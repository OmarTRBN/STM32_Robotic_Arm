
ra_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000842c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000052c0  080085d0  080085d0  000095d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d890  0800d890  0000f1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d890  0800d890  0000e890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d898  0800d898  0000f1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d898  0800d898  0000e898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d89c  0800d89c  0000e89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800d8a0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  200001f0  0800da90  0000f1f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  0800da90  0000f610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb8a  00000000  00000000  0000f220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a47  00000000  00000000  0002adaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000d1d3  00000000  00000000  0002e7f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  0003b9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001794  00000000  00000000  0003c900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018f79  00000000  00000000  0003e094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fe44  00000000  00000000  0005700d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094fa2  00000000  00000000  00076e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  0010bdf3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004100  00000000  00000000  0010beb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0010ffb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000c4d  00000000  00000000  00110020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000030  00000000  00000000  00110c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080085b4 	.word	0x080085b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	080085b4 	.word	0x080085b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MultivariablePID_Init>:

#include "PID_Control.h"

void MultivariablePID_Init(MultivariablePID *pid, float32_t *Kp_f32, float32_t *Ki_f32, float32_t *Kd_f32) {
	for (int i = 0; i < NUM_JOINTS*NUM_JOINTS; i++) {
		pid->Kp_data[i] = Kp_f32[i];
 8000ff4:	f8d1 c000 	ldr.w	ip, [r1]
void MultivariablePID_Init(MultivariablePID *pid, float32_t *Kp_f32, float32_t *Ki_f32, float32_t *Kd_f32) {
 8000ff8:	b510      	push	{r4, lr}
		pid->Kp_data[i] = Kp_f32[i];
 8000ffa:	f8c0 c000 	str.w	ip, [r0]
void MultivariablePID_Init(MultivariablePID *pid, float32_t *Kp_f32, float32_t *Ki_f32, float32_t *Kd_f32) {
 8000ffe:	4694      	mov	ip, r2
		pid->Ki_data[i] = Ki_f32[i];
 8001000:	6812      	ldr	r2, [r2, #0]
 8001002:	6102      	str	r2, [r0, #16]
void MultivariablePID_Init(MultivariablePID *pid, float32_t *Kp_f32, float32_t *Ki_f32, float32_t *Kd_f32) {
 8001004:	4604      	mov	r4, r0
 8001006:	4618      	mov	r0, r3
		pid->Kd_data[i] = Kd_f32[i];
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6223      	str	r3, [r4, #32]
		pid->Kp_data[i] = Kp_f32[i];
 800100c:	684b      	ldr	r3, [r1, #4]
 800100e:	6063      	str	r3, [r4, #4]
		pid->Ki_data[i] = Ki_f32[i];
 8001010:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8001014:	6163      	str	r3, [r4, #20]
		pid->Kd_data[i] = Kd_f32[i];
 8001016:	6843      	ldr	r3, [r0, #4]
 8001018:	6263      	str	r3, [r4, #36]	@ 0x24
		pid->Kp_data[i] = Kp_f32[i];
 800101a:	688b      	ldr	r3, [r1, #8]
 800101c:	60a3      	str	r3, [r4, #8]
		pid->Ki_data[i] = Ki_f32[i];
 800101e:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8001022:	61a3      	str	r3, [r4, #24]
		pid->Kd_data[i] = Kd_f32[i];
 8001024:	6883      	ldr	r3, [r0, #8]
 8001026:	62a3      	str	r3, [r4, #40]	@ 0x28
		pid->Kp_data[i] = Kp_f32[i];
 8001028:	68cb      	ldr	r3, [r1, #12]
 800102a:	60e3      	str	r3, [r4, #12]
		pid->Ki_data[i] = Ki_f32[i];
 800102c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8001030:	61e1      	str	r1, [r4, #28]
		pid->Kd_data[i] = Kd_f32[i];
 8001032:	68c1      	ldr	r1, [r0, #12]
 8001034:	62e1      	str	r1, [r4, #44]	@ 0x2c
	}

	arm_mat_init_f32(&(pid->Kp_mat), NUM_JOINTS, NUM_JOINTS, pid->Kp_data);
 8001036:	2202      	movs	r2, #2
 8001038:	4623      	mov	r3, r4
 800103a:	4611      	mov	r1, r2
 800103c:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8001040:	f002 ff40 	bl	8003ec4 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->Ki_mat), NUM_JOINTS, NUM_JOINTS, pid->Ki_data);
 8001044:	2202      	movs	r2, #2
 8001046:	4611      	mov	r1, r2
 8001048:	f104 0310 	add.w	r3, r4, #16
 800104c:	f104 0038 	add.w	r0, r4, #56	@ 0x38
 8001050:	f002 ff38 	bl	8003ec4 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->Kd_mat), NUM_JOINTS, NUM_JOINTS, pid->Kd_data);
 8001054:	2202      	movs	r2, #2
 8001056:	4611      	mov	r1, r2
 8001058:	f104 0320 	add.w	r3, r4, #32
 800105c:	f104 0040 	add.w	r0, r4, #64	@ 0x40
 8001060:	f002 ff30 	bl	8003ec4 <arm_mat_init_f32>

	// Initialize data arrays to zero
	for (int i = 0; i < NUM_JOINTS; i++) {
		pid->setpoint_data[i] = 2048.0f;
		pid->meas_data[i] = 0.0f;
 8001064:	2100      	movs	r1, #0
		pid->setpoint_data[i] = 2048.0f;
 8001066:	f04f 408a 	mov.w	r0, #1157627904	@ 0x45000000

		pid->temp1_N_1_data[i] = 0.0f;
		pid->temp2_N_1_data[i] = 0.0f;
	}

	arm_mat_init_f32(&(pid->setpoint_mat), NUM_JOINTS, 1, pid->setpoint_data);
 800106a:	f104 0348 	add.w	r3, r4, #72	@ 0x48
		pid->setpoint_data[i] = 2048.0f;
 800106e:	64a0      	str	r0, [r4, #72]	@ 0x48
		pid->meas_data[i] = 0.0f;
 8001070:	6521      	str	r1, [r4, #80]	@ 0x50
		pid->output_data[i] = 0.0f;
 8001072:	65a1      	str	r1, [r4, #88]	@ 0x58
		pid->error_data[i] = 0.0f;
 8001074:	67a1      	str	r1, [r4, #120]	@ 0x78
		pid->error_sum_data[i] = 0.0f;
 8001076:	f8c4 1080 	str.w	r1, [r4, #128]	@ 0x80
		pid->error_prev_data[i] = 0.0f;
 800107a:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
		pid->temp1_N_1_data[i] = 0.0f;
 800107e:	f8c4 10a8 	str.w	r1, [r4, #168]	@ 0xa8
		pid->temp2_N_1_data[i] = 0.0f;
 8001082:	f8c4 10b0 	str.w	r1, [r4, #176]	@ 0xb0
		pid->setpoint_data[i] = 2048.0f;
 8001086:	64e0      	str	r0, [r4, #76]	@ 0x4c
		pid->meas_data[i] = 0.0f;
 8001088:	6561      	str	r1, [r4, #84]	@ 0x54
		pid->output_data[i] = 0.0f;
 800108a:	65e1      	str	r1, [r4, #92]	@ 0x5c
		pid->error_data[i] = 0.0f;
 800108c:	67e1      	str	r1, [r4, #124]	@ 0x7c
		pid->error_sum_data[i] = 0.0f;
 800108e:	f8c4 1084 	str.w	r1, [r4, #132]	@ 0x84
		pid->error_prev_data[i] = 0.0f;
 8001092:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
		pid->temp1_N_1_data[i] = 0.0f;
 8001096:	f8c4 10ac 	str.w	r1, [r4, #172]	@ 0xac
		pid->temp2_N_1_data[i] = 0.0f;
 800109a:	f8c4 10b4 	str.w	r1, [r4, #180]	@ 0xb4
	arm_mat_init_f32(&(pid->setpoint_mat), NUM_JOINTS, 1, pid->setpoint_data);
 800109e:	f104 0060 	add.w	r0, r4, #96	@ 0x60
 80010a2:	2201      	movs	r2, #1
 80010a4:	2102      	movs	r1, #2
 80010a6:	f002 ff0d 	bl	8003ec4 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->meas_mat), NUM_JOINTS, 1, pid->meas_data);
 80010aa:	f104 0350 	add.w	r3, r4, #80	@ 0x50
 80010ae:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80010b2:	2201      	movs	r2, #1
 80010b4:	2102      	movs	r1, #2
 80010b6:	f002 ff05 	bl	8003ec4 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->output_mat), NUM_JOINTS, 1, pid->output_data);
 80010ba:	f104 0358 	add.w	r3, r4, #88	@ 0x58
 80010be:	f104 0070 	add.w	r0, r4, #112	@ 0x70
 80010c2:	2201      	movs	r2, #1
 80010c4:	2102      	movs	r1, #2
 80010c6:	f002 fefd 	bl	8003ec4 <arm_mat_init_f32>

	arm_mat_init_f32(&(pid->error_mat), NUM_JOINTS, 1, pid->error_data);
 80010ca:	f104 0378 	add.w	r3, r4, #120	@ 0x78
 80010ce:	f104 0090 	add.w	r0, r4, #144	@ 0x90
 80010d2:	2201      	movs	r2, #1
 80010d4:	2102      	movs	r1, #2
 80010d6:	f002 fef5 	bl	8003ec4 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->error_sum_mat), NUM_JOINTS, 1, pid->error_sum_data);
 80010da:	f104 0380 	add.w	r3, r4, #128	@ 0x80
 80010de:	f104 0098 	add.w	r0, r4, #152	@ 0x98
 80010e2:	2201      	movs	r2, #1
 80010e4:	2102      	movs	r1, #2
 80010e6:	f002 feed 	bl	8003ec4 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->error_prev_mat), NUM_JOINTS, 1, pid->error_prev_data);
 80010ea:	f104 0388 	add.w	r3, r4, #136	@ 0x88
 80010ee:	f104 00a0 	add.w	r0, r4, #160	@ 0xa0
 80010f2:	2201      	movs	r2, #1
 80010f4:	2102      	movs	r1, #2
 80010f6:	f002 fee5 	bl	8003ec4 <arm_mat_init_f32>

	arm_mat_init_f32(&(pid->temp1_N_1_mat), NUM_JOINTS, 1, pid->temp1_N_1_data);
 80010fa:	f104 03a8 	add.w	r3, r4, #168	@ 0xa8
 80010fe:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8001102:	2201      	movs	r2, #1
 8001104:	2102      	movs	r1, #2
 8001106:	f002 fedd 	bl	8003ec4 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->temp2_N_1_mat), NUM_JOINTS, 1, pid->temp2_N_1_data);
 800110a:	f104 03b0 	add.w	r3, r4, #176	@ 0xb0
 800110e:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 8001112:	2201      	movs	r2, #1
}
 8001114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_mat_init_f32(&(pid->temp2_N_1_mat), NUM_JOINTS, 1, pid->temp2_N_1_data);
 8001118:	2102      	movs	r1, #2
 800111a:	f002 bed3 	b.w	8003ec4 <arm_mat_init_f32>
 800111e:	bf00      	nop

08001120 <MultivariablePID_Compute>:
	for (int i = 0; i < NUM_JOINTS; i++) {
		pid->setpoint_data[i] = setpoint[i];
	}
}
void MultivariablePID_Compute(MultivariablePID *pid, float32_t *meas) {
  if (pid == NULL || meas == NULL) return;
 8001120:	b1b8      	cbz	r0, 8001152 <MultivariablePID_Compute+0x32>
 8001122:	b1b1      	cbz	r1, 8001152 <MultivariablePID_Compute+0x32>
void MultivariablePID_Compute(MultivariablePID *pid, float32_t *meas) {
 8001124:	b538      	push	{r3, r4, r5, lr}

  for (int i = 0; i < NUM_JOINTS; i++) {
  		pid->meas_data[i] = meas[i];
 8001126:	680b      	ldr	r3, [r1, #0]
 8001128:	6503      	str	r3, [r0, #80]	@ 0x50
 800112a:	684b      	ldr	r3, [r1, #4]
 800112c:	6543      	str	r3, [r0, #84]	@ 0x54
  }

  // error = setpoint - measurement
  arm_mat_sub_f32(&(pid->setpoint_mat), &(pid->meas_mat), &(pid->error_mat));
 800112e:	f100 0590 	add.w	r5, r0, #144	@ 0x90
 8001132:	4604      	mov	r4, r0
 8001134:	462a      	mov	r2, r5
 8001136:	f100 0168 	add.w	r1, r0, #104	@ 0x68
 800113a:	3060      	adds	r0, #96	@ 0x60
 800113c:	f002 fd46 	bl	8003bcc <arm_mat_sub_f32>

  arm_mat_mult_f32(&(pid->Kp_mat), &(pid->error_mat), &(pid->output_mat));
 8001140:	f104 0270 	add.w	r2, r4, #112	@ 0x70
 8001144:	4629      	mov	r1, r5
 8001146:	f104 0030 	add.w	r0, r4, #48	@ 0x30
}
 800114a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  arm_mat_mult_f32(&(pid->Kp_mat), &(pid->error_mat), &(pid->output_mat));
 800114e:	f002 bda9 	b.w	8003ca4 <arm_mat_mult_f32>
 8001152:	4770      	bx	lr

08001154 <AS5600_Init>:
 *      Author: omart
 */

#include "AS5600_Multi.h"

int AS5600_Init(AS5600_HandleTypeDef *as5600, I2C_HandleTypeDef *hi2c) {
 8001154:	b530      	push	{r4, r5, lr}
 8001156:	4603      	mov	r3, r0
 8001158:	b087      	sub	sp, #28
 800115a:	4608      	mov	r0, r1
    // Setup handle
    as5600->hi2c = hi2c;
    as5600->addr = AS5600_ADDR << 1; // Shift address for HAL

    // Check if magnet is detected
    if(HAL_I2C_Mem_Read(hi2c, as5600->addr, AS5600_REGISTER_STATUS, 1, &status, 1, 100) != HAL_OK) {
 800115c:	2564      	movs	r5, #100	@ 0x64
    as5600->addr = AS5600_ADDR << 1; // Shift address for HAL
 800115e:	216c      	movs	r1, #108	@ 0x6c
    if(HAL_I2C_Mem_Read(hi2c, as5600->addr, AS5600_REGISTER_STATUS, 1, &status, 1, 100) != HAL_OK) {
 8001160:	2401      	movs	r4, #1
    uint8_t status = 0;
 8001162:	2200      	movs	r2, #0
    if(HAL_I2C_Mem_Read(hi2c, as5600->addr, AS5600_REGISTER_STATUS, 1, &status, 1, 100) != HAL_OK) {
 8001164:	9502      	str	r5, [sp, #8]
    as5600->hi2c = hi2c;
 8001166:	6018      	str	r0, [r3, #0]
    as5600->addr = AS5600_ADDR << 1; // Shift address for HAL
 8001168:	7119      	strb	r1, [r3, #4]
    if(HAL_I2C_Mem_Read(hi2c, as5600->addr, AS5600_REGISTER_STATUS, 1, &status, 1, 100) != HAL_OK) {
 800116a:	f10d 0317 	add.w	r3, sp, #23
 800116e:	e9cd 3400 	strd	r3, r4, [sp]
    uint8_t status = 0;
 8001172:	f88d 2017 	strb.w	r2, [sp, #23]
    if(HAL_I2C_Mem_Read(hi2c, as5600->addr, AS5600_REGISTER_STATUS, 1, &status, 1, 100) != HAL_OK) {
 8001176:	4623      	mov	r3, r4
 8001178:	220b      	movs	r2, #11
 800117a:	f001 f94f 	bl	800241c <HAL_I2C_Mem_Read>
 800117e:	b940      	cbnz	r0, 8001192 <AS5600_Init+0x3e>
        return 1;
    }

    if(!(status & AS5600_MAGNET_DETECTED)) {
 8001180:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001184:	f080 0020 	eor.w	r0, r0, #32
 8001188:	f3c0 1040 	ubfx	r0, r0, #5, #1
 800118c:	40a0      	lsls	r0, r4
        return 2;  // No magnet detected
    }

    return 0;
}
 800118e:	b007      	add	sp, #28
 8001190:	bd30      	pop	{r4, r5, pc}
        return 1;
 8001192:	4620      	mov	r0, r4
}
 8001194:	b007      	add	sp, #28
 8001196:	bd30      	pop	{r4, r5, pc}

08001198 <AS5600_ReadAngle>:
int AS5600_ReadAngle(AS5600_HandleTypeDef *as5600, uint16_t *angle) {
 8001198:	b510      	push	{r4, lr}
    uint8_t data[2];

    // Read angle registers
    if(HAL_I2C_Mem_Read(as5600->hi2c, as5600->addr, AS5600_REGISTER_ANGLE_HIGH, 1, data, 2, 100) != HAL_OK) {
 800119a:	2202      	movs	r2, #2
int AS5600_ReadAngle(AS5600_HandleTypeDef *as5600, uint16_t *angle) {
 800119c:	b086      	sub	sp, #24
    if(HAL_I2C_Mem_Read(as5600->hi2c, as5600->addr, AS5600_REGISTER_ANGLE_HIGH, 1, data, 2, 100) != HAL_OK) {
 800119e:	2464      	movs	r4, #100	@ 0x64
 80011a0:	e9cd 2401 	strd	r2, r4, [sp, #4]
 80011a4:	ab05      	add	r3, sp, #20
int AS5600_ReadAngle(AS5600_HandleTypeDef *as5600, uint16_t *angle) {
 80011a6:	468c      	mov	ip, r1
    if(HAL_I2C_Mem_Read(as5600->hi2c, as5600->addr, AS5600_REGISTER_ANGLE_HIGH, 1, data, 2, 100) != HAL_OK) {
 80011a8:	220e      	movs	r2, #14
 80011aa:	7901      	ldrb	r1, [r0, #4]
 80011ac:	6800      	ldr	r0, [r0, #0]
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2301      	movs	r3, #1
int AS5600_ReadAngle(AS5600_HandleTypeDef *as5600, uint16_t *angle) {
 80011b2:	4664      	mov	r4, ip
    if(HAL_I2C_Mem_Read(as5600->hi2c, as5600->addr, AS5600_REGISTER_ANGLE_HIGH, 1, data, 2, 100) != HAL_OK) {
 80011b4:	f001 f932 	bl	800241c <HAL_I2C_Mem_Read>
 80011b8:	b928      	cbnz	r0, 80011c6 <AS5600_ReadAngle+0x2e>
        return 1;
    }

    // Combine high and low bytes
    *angle = ((uint16_t)data[0] << 8) | data[1];
 80011ba:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80011be:	ba5b      	rev16	r3, r3
 80011c0:	8023      	strh	r3, [r4, #0]

    return 0;
}
 80011c2:	b006      	add	sp, #24
 80011c4:	bd10      	pop	{r4, pc}
        return 1;
 80011c6:	2001      	movs	r0, #1
}
 80011c8:	b006      	add	sp, #24
 80011ca:	bd10      	pop	{r4, pc}

080011cc <CommandProtocol_SetCommandProcessor>:
#include "StepMotor.h"

static ProcessCommandFn CustomProcessCommand = NULL;

void CommandProtocol_SetCommandProcessor(ProcessCommandFn processFn) {
    CustomProcessCommand = processFn;
 80011cc:	4b01      	ldr	r3, [pc, #4]	@ (80011d4 <CommandProtocol_SetCommandProcessor+0x8>)
 80011ce:	6018      	str	r0, [r3, #0]
}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	2000020c 	.word	0x2000020c

080011d8 <CommandProtocol_Init>:

HAL_StatusTypeDef CommandProtocol_Init(CommandProtocol_Handle* handle, UART_HandleTypeDef* huart, uint32_t timeout) {
 80011d8:	4603      	mov	r3, r0
 80011da:	4608      	mov	r0, r1
    if (handle == NULL || huart == NULL) {
 80011dc:	b153      	cbz	r3, 80011f4 <CommandProtocol_Init+0x1c>
 80011de:	b149      	cbz	r1, 80011f4 <CommandProtocol_Init+0x1c>
        return HAL_ERROR;
    }

    handle->huart = huart;
	handle->timeout = timeout;
    handle->rxIndex = 0;
 80011e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
	handle->timeout = timeout;
 80011e4:	e9c3 0200 	strd	r0, r2, [r3]
    handle->rxIndex = 0;
 80011e8:	8759      	strh	r1, [r3, #58]	@ 0x3a
    handle->isInitialized = true;

    return HAL_UART_Receive_IT(handle->huart, &handle->rxBuffer[0], 1);
 80011ea:	2201      	movs	r2, #1
 80011ec:	f103 0108 	add.w	r1, r3, #8
 80011f0:	f002 baaa 	b.w	8003748 <HAL_UART_Receive_IT>
}
 80011f4:	2001      	movs	r0, #1
 80011f6:	4770      	bx	lr

080011f8 <CommandProtocol_ProcessByte>:

HAL_StatusTypeDef CommandProtocol_ProcessByte(CommandProtocol_Handle* handle, uint8_t byte, char* dataArray) {
    if (!handle->isInitialized) {
 80011f8:	f890 303b 	ldrb.w	r3, [r0, #59]	@ 0x3b
 80011fc:	b31b      	cbz	r3, 8001246 <CommandProtocol_ProcessByte+0x4e>
HAL_StatusTypeDef CommandProtocol_ProcessByte(CommandProtocol_Handle* handle, uint8_t byte, char* dataArray) {
 80011fe:	b570      	push	{r4, r5, r6, lr}
        return HAL_ERROR;
    }

    if (handle->rxIndex < sizeof(handle->rxBuffer) - 1)
 8001200:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8001204:	2b30      	cmp	r3, #48	@ 0x30
 8001206:	4604      	mov	r4, r0
 8001208:	d80a      	bhi.n	8001220 <CommandProtocol_ProcessByte+0x28>
    {
        if (byte == '\n' || byte == '\r')
 800120a:	290a      	cmp	r1, #10
 800120c:	d00d      	beq.n	800122a <CommandProtocol_ProcessByte+0x32>
 800120e:	290d      	cmp	r1, #13
 8001210:	d00b      	beq.n	800122a <CommandProtocol_ProcessByte+0x32>

            handle->rxIndex = 0;
        }
        else
        {
            handle->rxBuffer[handle->rxIndex++] = byte;
 8001212:	18c2      	adds	r2, r0, r3
 8001214:	3301      	adds	r3, #1
 8001216:	f880 303a 	strb.w	r3, [r0, #58]	@ 0x3a
 800121a:	7211      	strb	r1, [r2, #8]
    }
    else
    {
        handle->rxIndex = 0;
    }
    return HAL_OK;
 800121c:	2000      	movs	r0, #0
}
 800121e:	bd70      	pop	{r4, r5, r6, pc}
        handle->rxIndex = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	f880 303a 	strb.w	r3, [r0, #58]	@ 0x3a
    return HAL_OK;
 8001226:	2000      	movs	r0, #0
}
 8001228:	bd70      	pop	{r4, r5, r6, pc}
            if (CustomProcessCommand != NULL)
 800122a:	4908      	ldr	r1, [pc, #32]	@ (800124c <CommandProtocol_ProcessByte+0x54>)
            handle->rxBuffer[handle->rxIndex] = '\0';
 800122c:	4423      	add	r3, r4
            if (CustomProcessCommand != NULL)
 800122e:	680e      	ldr	r6, [r1, #0]
            handle->rxBuffer[handle->rxIndex] = '\0';
 8001230:	2500      	movs	r5, #0
 8001232:	721d      	strb	r5, [r3, #8]
            if (CustomProcessCommand != NULL)
 8001234:	b12e      	cbz	r6, 8001242 <CommandProtocol_ProcessByte+0x4a>
                CustomProcessCommand(handle, dataArray);
 8001236:	4611      	mov	r1, r2
 8001238:	4620      	mov	r0, r4
 800123a:	47b0      	blx	r6
            handle->rxIndex = 0;
 800123c:	f884 503a 	strb.w	r5, [r4, #58]	@ 0x3a
 8001240:	e7f1      	b.n	8001226 <CommandProtocol_ProcessByte+0x2e>
        return HAL_ERROR;
 8001242:	2001      	movs	r0, #1
}
 8001244:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001246:	2001      	movs	r0, #1
}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	2000020c 	.word	0x2000020c

08001250 <CommandProtocol_SendResponse>:

HAL_StatusTypeDef CommandProtocol_SendResponse(CommandProtocol_Handle* handle, const char* response) {
    if (!handle->isInitialized || response == NULL) {
 8001250:	f890 303b 	ldrb.w	r3, [r0, #59]	@ 0x3b
 8001254:	b18b      	cbz	r3, 800127a <CommandProtocol_SendResponse+0x2a>
HAL_StatusTypeDef CommandProtocol_SendResponse(CommandProtocol_Handle* handle, const char* response) {
 8001256:	b570      	push	{r4, r5, r6, lr}
 8001258:	460d      	mov	r5, r1
    if (!handle->isInitialized || response == NULL) {
 800125a:	b161      	cbz	r1, 8001276 <CommandProtocol_SendResponse+0x26>
        return HAL_ERROR;
    }

    return HAL_UART_Transmit(handle->huart, (uint8_t*)response, strlen(response),
 800125c:	4604      	mov	r4, r0
 800125e:	4608      	mov	r0, r1
 8001260:	f7ff f80e 	bl	8000280 <strlen>
 8001264:	4602      	mov	r2, r0
 8001266:	4629      	mov	r1, r5
 8001268:	e9d4 0300 	ldrd	r0, r3, [r4]
 800126c:	b292      	uxth	r2, r2
                            handle->timeout);
}
 800126e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return HAL_UART_Transmit(handle->huart, (uint8_t*)response, strlen(response),
 8001272:	f002 b9fb 	b.w	800366c <HAL_UART_Transmit>
}
 8001276:	2001      	movs	r0, #1
 8001278:	bd70      	pop	{r4, r5, r6, pc}
 800127a:	2001      	movs	r0, #1
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop

08001280 <StepMotor_Init>:
 *      Author: omart
 */

#include "StepMotor.h"

HAL_StatusTypeDef StepMotor_Init(StepMotor* motor, TIM_HandleTypeDef* timer, uint32_t tim_channel, GPIO_TypeDef* gpio_port, uint16_t gpio_pin){
 8001280:	4684      	mov	ip, r0
 8001282:	4608      	mov	r0, r1
 8001284:	4611      	mov	r1, r2
 8001286:	f8bd 2000 	ldrh.w	r2, [sp]
	motor->timer = timer;
	motor->channel = tim_channel;
	motor->dir_gpio_port = gpio_port;
 800128a:	f8cc 3008 	str.w	r3, [ip, #8]
	motor->channel = tim_channel;
 800128e:	e9cc 0100 	strd	r0, r1, [ip]
	motor->dir_gpio_pin = gpio_pin;
 8001292:	f8ac 200c 	strh.w	r2, [ip, #12]

	return HAL_TIM_OC_Start(motor->timer, motor->channel);
 8001296:	f001 be8b 	b.w	8002fb0 <HAL_TIM_OC_Start>
 800129a:	bf00      	nop

0800129c <StepMotor_SetSpeedLUT>:
}

void StepMotor_SetSpeedLUT(StepMotor* motor, int16_t speed, int direction) {
 800129c:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(motor->dir_gpio_port, motor->dir_gpio_pin, direction);
 800129e:	b2d2      	uxtb	r2, r2
void StepMotor_SetSpeedLUT(StepMotor* motor, int16_t speed, int direction) {
 80012a0:	460c      	mov	r4, r1
 80012a2:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(motor->dir_gpio_port, motor->dir_gpio_pin, direction);
 80012a4:	8981      	ldrh	r1, [r0, #12]
 80012a6:	6880      	ldr	r0, [r0, #8]
 80012a8:	f000 fe92 	bl	8001fd0 <HAL_GPIO_WritePin>

	if (speed == 0)
 80012ac:	b1dc      	cbz	r4, 80012e6 <StepMotor_SetSpeedLUT+0x4a>
	else if (speed < MIN_LUT_SPEED)
	{
		speed = MIN_LUT_SPEED;
	}

	__HAL_TIM_SET_PRESCALER(motor->timer, LUT_PSC[speed - 1]);
 80012ae:	2c01      	cmp	r4, #1
 80012b0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80012b4:	bfb8      	it	lt
 80012b6:	2401      	movlt	r4, #1
 80012b8:	429c      	cmp	r4, r3
 80012ba:	bfa8      	it	ge
 80012bc:	461c      	movge	r4, r3
 80012be:	682a      	ldr	r2, [r5, #0]
 80012c0:	480f      	ldr	r0, [pc, #60]	@ (8001300 <StepMotor_SetSpeedLUT+0x64>)
	__HAL_TIM_SET_AUTORELOAD(motor->timer, LUT_ARR[speed - 1]);
 80012c2:	4910      	ldr	r1, [pc, #64]	@ (8001304 <StepMotor_SetSpeedLUT+0x68>)
	__HAL_TIM_SET_PRESCALER(motor->timer, LUT_PSC[speed - 1]);
 80012c4:	6813      	ldr	r3, [r2, #0]
 80012c6:	3c01      	subs	r4, #1
 80012c8:	b224      	sxth	r4, r4
	__HAL_TIM_SET_AUTORELOAD(motor->timer, LUT_ARR[speed - 1]);
 80012ca:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
	__HAL_TIM_SET_PRESCALER(motor->timer, LUT_PSC[speed - 1]);
 80012ce:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
 80012d2:	629c      	str	r4, [r3, #40]	@ 0x28

	motor->timer->Instance->CNT = 0;
 80012d4:	2000      	movs	r0, #0
	__HAL_TIM_SET_AUTORELOAD(motor->timer, LUT_ARR[speed - 1]);
 80012d6:	62d9      	str	r1, [r3, #44]	@ 0x2c
 80012d8:	60d1      	str	r1, [r2, #12]
	motor->timer->Instance->CNT = 0;
 80012da:	6258      	str	r0, [r3, #36]	@ 0x24
	motor->timer->Instance->EGR |= TIM_EGR_UG;
 80012dc:	695a      	ldr	r2, [r3, #20]
 80012de:	f042 0201 	orr.w	r2, r2, #1
 80012e2:	615a      	str	r2, [r3, #20]
}
 80012e4:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_TIM_SET_PRESCALER(motor->timer, 0xFFFF);
 80012e6:	6829      	ldr	r1, [r5, #0]
 80012e8:	680b      	ldr	r3, [r1, #0]
 80012ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012ee:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(motor->timer, 0xFFFF);
 80012f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012f2:	60ca      	str	r2, [r1, #12]
		motor->timer->Instance->CNT = 0;  // Optional: reset counter
 80012f4:	625c      	str	r4, [r3, #36]	@ 0x24
		motor->timer->Instance->EGR |= TIM_EGR_UG;
 80012f6:	695a      	ldr	r2, [r3, #20]
 80012f8:	f042 0201 	orr.w	r2, r2, #1
 80012fc:	615a      	str	r2, [r3, #20]
}
 80012fe:	bd38      	pop	{r3, r4, r5, pc}
 8001300:	0800ace0 	.word	0x0800ace0
 8001304:	080085d0 	.word	0x080085d0

08001308 <DWT_Init>:
#include "Timing.h"

static uint32_t last_cycle = 0;

void DWT_Init(void) {
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8001308:	4908      	ldr	r1, [pc, #32]	@ (800132c <DWT_Init+0x24>)
    DWT->CYCCNT = 0;                                // Reset cycle counter
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <DWT_Init+0x28>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 800130c:	f8d1 20fc 	ldr.w	r2, [r1, #252]	@ 0xfc
    DWT->CYCCNT = 0;                                // Reset cycle counter
 8001310:	2000      	movs	r0, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8001312:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001316:	f8c1 20fc 	str.w	r2, [r1, #252]	@ 0xfc
    DWT->CYCCNT = 0;                                // Reset cycle counter
 800131a:	6058      	str	r0, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;           // Start cycle counter
 800131c:	681a      	ldr	r2, [r3, #0]
    last_cycle = DWT->CYCCNT;
 800131e:	4905      	ldr	r1, [pc, #20]	@ (8001334 <DWT_Init+0x2c>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;           // Start cycle counter
 8001320:	f042 0201 	orr.w	r2, r2, #1
 8001324:	601a      	str	r2, [r3, #0]
    last_cycle = DWT->CYCCNT;
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	600b      	str	r3, [r1, #0]
}
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00
 8001330:	e0001000 	.word	0xe0001000
 8001334:	20000210 	.word	0x20000210

08001338 <DWT_GetDeltaTime>:

float DWT_GetDeltaTime(void) {
    uint32_t now_cycle = DWT->CYCCNT;
    uint32_t cycle_diff = now_cycle - last_cycle;
 8001338:	4a08      	ldr	r2, [pc, #32]	@ (800135c <DWT_GetDeltaTime+0x24>)
    uint32_t now_cycle = DWT->CYCCNT;
 800133a:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <DWT_GetDeltaTime+0x28>)
    last_cycle = now_cycle;
    return (float)cycle_diff / (float)SystemCoreClock;  // dt in seconds
 800133c:	4809      	ldr	r0, [pc, #36]	@ (8001364 <DWT_GetDeltaTime+0x2c>)
    uint32_t now_cycle = DWT->CYCCNT;
 800133e:	6859      	ldr	r1, [r3, #4]
    uint32_t cycle_diff = now_cycle - last_cycle;
 8001340:	6813      	ldr	r3, [r2, #0]
    return (float)cycle_diff / (float)SystemCoreClock;  // dt in seconds
 8001342:	ed90 0a00 	vldr	s0, [r0]
    last_cycle = now_cycle;
 8001346:	6011      	str	r1, [r2, #0]
    uint32_t cycle_diff = now_cycle - last_cycle;
 8001348:	1acb      	subs	r3, r1, r3
    return (float)cycle_diff / (float)SystemCoreClock;  // dt in seconds
 800134a:	ee07 3a90 	vmov	s15, r3
 800134e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001352:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8001356:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800135a:	4770      	bx	lr
 800135c:	20000210 	.word	0x20000210
 8001360:	e0001000 	.word	0xe0001000
 8001364:	2000001c 	.word	0x2000001c

08001368 <MyProcessCommand>:
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void MyProcessCommand(CommandProtocol_Handle* handle, char *dataArray) {
 8001368:	b530      	push	{r4, r5, lr}
    CommandID cmdId = handle->rxBuffer[0];
 800136a:	7a03      	ldrb	r3, [r0, #8]
    char response[50];

    switch(cmdId) {
 800136c:	2b42      	cmp	r3, #66	@ 0x42
void MyProcessCommand(CommandProtocol_Handle* handle, char *dataArray) {
 800136e:	b08f      	sub	sp, #60	@ 0x3c
 8001370:	4604      	mov	r4, r0
    switch(cmdId) {
 8001372:	d005      	beq.n	8001380 <MyProcessCommand+0x18>
 8001374:	2b46      	cmp	r3, #70	@ 0x46
 8001376:	d01b      	beq.n	80013b0 <MyProcessCommand+0x48>
 8001378:	2b41      	cmp	r3, #65	@ 0x41
 800137a:	d00d      	beq.n	8001398 <MyProcessCommand+0x30>
				sprintf(response, "Frequency set to: %d\n", freq);
				CommandProtocol_SendResponse(handle, response);
            }
            break;
    }
}
 800137c:	b00f      	add	sp, #60	@ 0x3c
 800137e:	bd30      	pop	{r4, r5, pc}
            sprintf(response, "AS5600 Angle: %d\n", angle);
 8001380:	4b17      	ldr	r3, [pc, #92]	@ (80013e0 <MyProcessCommand+0x78>)
 8001382:	4918      	ldr	r1, [pc, #96]	@ (80013e4 <MyProcessCommand+0x7c>)
 8001384:	881a      	ldrh	r2, [r3, #0]
 8001386:	a801      	add	r0, sp, #4
 8001388:	f003 fd58 	bl	8004e3c <siprintf>
            CommandProtocol_SendResponse(handle, response);
 800138c:	a901      	add	r1, sp, #4
 800138e:	4620      	mov	r0, r4
 8001390:	f7ff ff5e 	bl	8001250 <CommandProtocol_SendResponse>
}
 8001394:	b00f      	add	sp, #60	@ 0x3c
 8001396:	bd30      	pop	{r4, r5, pc}
            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001398:	4813      	ldr	r0, [pc, #76]	@ (80013e8 <MyProcessCommand+0x80>)
 800139a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800139e:	f000 fe1b 	bl	8001fd8 <HAL_GPIO_TogglePin>
            CommandProtocol_SendResponse(handle, "LED TOGGLED!\n");
 80013a2:	4912      	ldr	r1, [pc, #72]	@ (80013ec <MyProcessCommand+0x84>)
 80013a4:	4620      	mov	r0, r4
}
 80013a6:	b00f      	add	sp, #60	@ 0x3c
 80013a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            CommandProtocol_SendResponse(handle, "LED TOGGLED!\n");
 80013ac:	f7ff bf50 	b.w	8001250 <CommandProtocol_SendResponse>
            if(handle->rxIndex > 1)
 80013b0:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d9e1      	bls.n	800137c <MyProcessCommand+0x14>
                uint16_t freq = atoi((const char*)&handle->rxBuffer[1]);
 80013b8:	3009      	adds	r0, #9
 80013ba:	f002 fd87 	bl	8003ecc <atoi>
 80013be:	4605      	mov	r5, r0
				StepMotor_SetSpeedLUT(&l1_motor, freq, STEP_MOTOR_CW);
 80013c0:	b229      	sxth	r1, r5
 80013c2:	480b      	ldr	r0, [pc, #44]	@ (80013f0 <MyProcessCommand+0x88>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	f7ff ff69 	bl	800129c <StepMotor_SetSpeedLUT>
				sprintf(response, "Frequency set to: %d\n", freq);
 80013ca:	b2aa      	uxth	r2, r5
 80013cc:	4909      	ldr	r1, [pc, #36]	@ (80013f4 <MyProcessCommand+0x8c>)
 80013ce:	a801      	add	r0, sp, #4
 80013d0:	f003 fd34 	bl	8004e3c <siprintf>
				CommandProtocol_SendResponse(handle, response);
 80013d4:	a901      	add	r1, sp, #4
 80013d6:	4620      	mov	r0, r4
 80013d8:	f7ff ff3a 	bl	8001250 <CommandProtocol_SendResponse>
}
 80013dc:	b00f      	add	sp, #60	@ 0x3c
 80013de:	bd30      	pop	{r4, r5, pc}
 80013e0:	20000018 	.word	0x20000018
 80013e4:	0800d400 	.word	0x0800d400
 80013e8:	40020800 	.word	0x40020800
 80013ec:	0800d3f0 	.word	0x0800d3f0
 80013f0:	20000300 	.word	0x20000300
 80013f4:	0800d414 	.word	0x0800d414

080013f8 <SystemClock_Config>:
{
 80013f8:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	2300      	movs	r3, #0
{
 80013fc:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fe:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8001402:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001406:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800140a:	e9cd 3305 	strd	r3, r3, [sp, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	4920      	ldr	r1, [pc, #128]	@ (8001490 <SystemClock_Config+0x98>)
 8001410:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001412:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001414:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001416:	4a1f      	ldr	r2, [pc, #124]	@ (8001494 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001418:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 800141c:	6408      	str	r0, [r1, #64]	@ 0x40
 800141e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001420:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8001424:	9101      	str	r1, [sp, #4]
 8001426:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001428:	9302      	str	r3, [sp, #8]
 800142a:	6813      	ldr	r3, [r2, #0]
 800142c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001434:	2001      	movs	r0, #1
 8001436:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800143a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800143e:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001442:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001444:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001448:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800144a:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800144e:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001450:	2104      	movs	r1, #4
 8001452:	2002      	movs	r0, #2
 8001454:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001458:	220c      	movs	r2, #12
  RCC_OscInitStruct.PLL.PLLN = 96;
 800145a:	2360      	movs	r3, #96	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800145c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 12;
 800145e:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001460:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001462:	f001 f9a9 	bl	80027b8 <HAL_RCC_OscConfig>
 8001466:	b108      	cbz	r0, 800146c <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001468:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800146a:	e7fe      	b.n	800146a <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800146c:	210f      	movs	r1, #15
 800146e:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001470:	e9cd 1403 	strd	r1, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001474:	2280      	movs	r2, #128	@ 0x80
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001476:	a803      	add	r0, sp, #12
 8001478:	2101      	movs	r1, #1
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800147a:	e9cd 2305 	strd	r2, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800147e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001480:	f001 fbb0 	bl	8002be4 <HAL_RCC_ClockConfig>
 8001484:	b108      	cbz	r0, 800148a <SystemClock_Config+0x92>
 8001486:	b672      	cpsid	i
  while (1)
 8001488:	e7fe      	b.n	8001488 <SystemClock_Config+0x90>
}
 800148a:	b014      	add	sp, #80	@ 0x50
 800148c:	bd10      	pop	{r4, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40007000 	.word	0x40007000

08001498 <main>:
{
 8001498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	CommandProtocol_SetCommandProcessor(MyProcessCommand);
 800149c:	48b2      	ldr	r0, [pc, #712]	@ (8001768 <main+0x2d0>)
  huart1.Instance = USART1;
 800149e:	4db3      	ldr	r5, [pc, #716]	@ (800176c <main+0x2d4>)
{
 80014a0:	b09d      	sub	sp, #116	@ 0x74
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	2400      	movs	r4, #0
	CommandProtocol_SetCommandProcessor(MyProcessCommand);
 80014a4:	f7ff fe92 	bl	80011cc <CommandProtocol_SetCommandProcessor>
  HAL_Init();
 80014a8:	f000 fb9e 	bl	8001be8 <HAL_Init>
  SystemClock_Config();
 80014ac:	f7ff ffa4 	bl	80013f8 <SystemClock_Config>
  DWT_Init();
 80014b0:	f7ff ff2a 	bl	8001308 <DWT_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b4:	e9cd 4414 	strd	r4, r4, [sp, #80]	@ 0x50
 80014b8:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014bc:	4bac      	ldr	r3, [pc, #688]	@ (8001770 <main+0x2d8>)
 80014be:	9402      	str	r4, [sp, #8]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	9418      	str	r4, [sp, #96]	@ 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80014c4:	48ab      	ldr	r0, [pc, #684]	@ (8001774 <main+0x2dc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c6:	f042 0204 	orr.w	r2, r2, #4
 80014ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80014cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014ce:	f002 0204 	and.w	r2, r2, #4
 80014d2:	9202      	str	r2, [sp, #8]
 80014d4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014d6:	9403      	str	r4, [sp, #12]
 80014d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014da:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80014de:	631a      	str	r2, [r3, #48]	@ 0x30
 80014e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014e2:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80014e6:	9203      	str	r2, [sp, #12]
 80014e8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	9404      	str	r4, [sp, #16]
 80014ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014ee:	f042 0201 	orr.w	r2, r2, #1
 80014f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80014f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80014f6:	f002 0201 	and.w	r2, r2, #1
 80014fa:	9204      	str	r2, [sp, #16]
 80014fc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fe:	9405      	str	r4, [sp, #20]
 8001500:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001502:	f042 0202 	orr.w	r2, r2, #2
 8001506:	631a      	str	r2, [r3, #48]	@ 0x30
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800150e:	4622      	mov	r2, r4
 8001510:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001514:	9305      	str	r3, [sp, #20]
 8001516:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001518:	f000 fd5a 	bl	8001fd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, GPIO_PIN_RESET);
 800151c:	4622      	mov	r2, r4
 800151e:	4896      	ldr	r0, [pc, #600]	@ (8001778 <main+0x2e0>)
 8001520:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001524:	f000 fd54 	bl	8001fd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 8001528:	4622      	mov	r2, r4
 800152a:	4894      	ldr	r0, [pc, #592]	@ (800177c <main+0x2e4>)
 800152c:	2108      	movs	r1, #8
 800152e:	f000 fd4f 	bl	8001fd0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001532:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001534:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001538:	488e      	ldr	r0, [pc, #568]	@ (8001774 <main+0x2dc>)
 800153a:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	e9cd 3614 	strd	r3, r6, [sp, #80]	@ 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001540:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  GPIO_InitStruct.Pin = M1_DIR_Pin;
 8001544:	f44f 6700 	mov.w	r7, #2048	@ 0x800
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001548:	f000 fc4c 	bl	8001de4 <HAL_GPIO_Init>
  HAL_GPIO_Init(M1_DIR_GPIO_Port, &GPIO_InitStruct);
 800154c:	488a      	ldr	r0, [pc, #552]	@ (8001778 <main+0x2e0>)
 800154e:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001550:	e9cd 7614 	strd	r7, r6, [sp, #80]	@ 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  HAL_GPIO_Init(M1_DIR_GPIO_Port, &GPIO_InitStruct);
 8001558:	f000 fc44 	bl	8001de4 <HAL_GPIO_Init>
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 800155c:	4887      	ldr	r0, [pc, #540]	@ (800177c <main+0x2e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155e:	9615      	str	r6, [sp, #84]	@ 0x54
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 8001560:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 8001562:	2608      	movs	r6, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 8001568:	9614      	str	r6, [sp, #80]	@ 0x50
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 800156a:	f000 fc3b 	bl	8001de4 <HAL_GPIO_Init>
  huart1.Init.StopBits = UART_STOPBITS_1;
 800156e:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001572:	e9c5 4406 	strd	r4, r4, [r5, #24]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001576:	612c      	str	r4, [r5, #16]
  huart1.Init.BaudRate = 115200;
 8001578:	4c81      	ldr	r4, [pc, #516]	@ (8001780 <main+0x2e8>)
 800157a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800157e:	e9c5 4300 	strd	r4, r3, [r5]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001582:	4628      	mov	r0, r5
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001584:	230c      	movs	r3, #12
 8001586:	616b      	str	r3, [r5, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001588:	f001 ffde 	bl	8003548 <HAL_UART_Init>
 800158c:	b108      	cbz	r0, 8001592 <main+0xfa>
 800158e:	b672      	cpsid	i
  while (1)
 8001590:	e7fe      	b.n	8001590 <main+0xf8>
  hi2c1.Instance = I2C1;
 8001592:	f8df 822c 	ldr.w	r8, [pc, #556]	@ 80017c0 <main+0x328>
  hi2c1.Init.ClockSpeed = 400000;
 8001596:	4b7b      	ldr	r3, [pc, #492]	@ (8001784 <main+0x2ec>)
  hi2c1.Init.OwnAddress1 = 0;
 8001598:	e9c8 0002 	strd	r0, r0, [r8, #8]
  hi2c1.Init.OwnAddress2 = 0;
 800159c:	e9c8 0005 	strd	r0, r0, [r8, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015a0:	e9c8 0007 	strd	r0, r0, [r8, #28]
  hi2c1.Init.ClockSpeed = 400000;
 80015a4:	4878      	ldr	r0, [pc, #480]	@ (8001788 <main+0x2f0>)
 80015a6:	e9c8 0300 	strd	r0, r3, [r8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015ae:	4640      	mov	r0, r8
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b0:	f8c8 3010 	str.w	r3, [r8, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015b4:	f000 fe6a 	bl	800228c <HAL_I2C_Init>
 80015b8:	4604      	mov	r4, r0
 80015ba:	b108      	cbz	r0, 80015c0 <main+0x128>
 80015bc:	b672      	cpsid	i
  while (1)
 80015be:	e7fe      	b.n	80015be <main+0x126>
  htim1.Instance = TIM1;
 80015c0:	f8df 9200 	ldr.w	r9, [pc, #512]	@ 80017c4 <main+0x32c>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c4:	9008      	str	r0, [sp, #32]
 80015c6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ca:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 80015ce:	e9cd 000f 	strd	r0, r0, [sp, #60]	@ 0x3c
 80015d2:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d6:	9006      	str	r0, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d8:	900c      	str	r0, [sp, #48]	@ 0x30
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015da:	900b      	str	r0, [sp, #44]	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015dc:	9007      	str	r0, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015de:	4601      	mov	r1, r0
 80015e0:	2220      	movs	r2, #32
 80015e2:	a814      	add	r0, sp, #80	@ 0x50
 80015e4:	f003 fc8d 	bl	8004f02 <memset>
  htim1.Instance = TIM1;
 80015e8:	4b68      	ldr	r3, [pc, #416]	@ (800178c <main+0x2f4>)
 80015ea:	f8c9 3000 	str.w	r3, [r9]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ee:	e9c9 4401 	strd	r4, r4, [r9, #4]
  htim1.Init.RepetitionCounter = 0;
 80015f2:	e9c9 4404 	strd	r4, r4, [r9, #16]
  htim1.Init.Period = 4999;
 80015f6:	f241 3387 	movw	r3, #4999	@ 0x1387
  htim1.Init.RepetitionCounter = 0;
 80015fa:	2480      	movs	r4, #128	@ 0x80
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015fc:	4648      	mov	r0, r9
  htim1.Init.Period = 4999;
 80015fe:	f8c9 300c 	str.w	r3, [r9, #12]
  htim1.Init.RepetitionCounter = 0;
 8001602:	f8c9 4018 	str.w	r4, [r9, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001606:	f001 fbab 	bl	8002d60 <HAL_TIM_Base_Init>
 800160a:	b108      	cbz	r0, 8001610 <main+0x178>
 800160c:	b672      	cpsid	i
  while (1)
 800160e:	e7fe      	b.n	800160e <main+0x176>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001610:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001614:	a908      	add	r1, sp, #32
 8001616:	4648      	mov	r0, r9
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001618:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800161a:	f001 fde1 	bl	80031e0 <HAL_TIM_ConfigClockSource>
 800161e:	b108      	cbz	r0, 8001624 <main+0x18c>
 8001620:	b672      	cpsid	i
  while (1)
 8001622:	e7fe      	b.n	8001622 <main+0x18a>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001624:	4648      	mov	r0, r9
 8001626:	f001 fc49 	bl	8002ebc <HAL_TIM_OC_Init>
 800162a:	b108      	cbz	r0, 8001630 <main+0x198>
 800162c:	b672      	cpsid	i
  while (1)
 800162e:	e7fe      	b.n	800162e <main+0x196>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001630:	f04f 0a00 	mov.w	sl, #0
 8001634:	f04f 0b00 	mov.w	fp, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001638:	a906      	add	r1, sp, #24
 800163a:	4648      	mov	r0, r9
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800163c:	e9cd ab06 	strd	sl, fp, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001640:	f001 ff1c 	bl	800347c <HAL_TIMEx_MasterConfigSynchronization>
 8001644:	b108      	cbz	r0, 800164a <main+0x1b2>
 8001646:	b672      	cpsid	i
  while (1)
 8001648:	e7fe      	b.n	8001648 <main+0x1b0>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800164a:	2330      	movs	r3, #48	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800164c:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001650:	900f      	str	r0, [sp, #60]	@ 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001652:	9012      	str	r0, [sp, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001654:	a90c      	add	r1, sp, #48	@ 0x30
 8001656:	4632      	mov	r2, r6
 8001658:	4648      	mov	r0, r9
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800165a:	930c      	str	r3, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800165c:	e9cd ab10 	strd	sl, fp, [sp, #64]	@ 0x40
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001660:	f001 fd02 	bl	8003068 <HAL_TIM_OC_ConfigChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	b108      	cbz	r0, 800166c <main+0x1d4>
 8001668:	b672      	cpsid	i
  while (1)
 800166a:	e7fe      	b.n	800166a <main+0x1d2>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 800166c:	f8d9 c000 	ldr.w	ip, [r9]
 8001670:	f8dc 201c 	ldr.w	r2, [ip, #28]
 8001674:	f042 0208 	orr.w	r2, r2, #8
 8001678:	f8cc 201c 	str.w	r2, [ip, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800167c:	a914      	add	r1, sp, #80	@ 0x50
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800167e:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.DeadTime = 0;
 8001682:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001686:	931b      	str	r3, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001688:	2200      	movs	r2, #0
 800168a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800168e:	4648      	mov	r0, r9
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001690:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001694:	f001 ff2a 	bl	80034ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001698:	4683      	mov	fp, r0
 800169a:	b108      	cbz	r0, 80016a0 <main+0x208>
 800169c:	b672      	cpsid	i
  while (1)
 800169e:	e7fe      	b.n	800169e <main+0x206>
  HAL_TIM_MspPostInit(&htim1);
 80016a0:	4648      	mov	r0, r9
 80016a2:	f000 f959 	bl	8001958 <HAL_TIM_MspPostInit>
  htim11.Instance = TIM11;
 80016a6:	f8df a120 	ldr.w	sl, [pc, #288]	@ 80017c8 <main+0x330>
  htim11.Init.Prescaler = 1000-1;
 80016aa:	4a39      	ldr	r2, [pc, #228]	@ (8001790 <main+0x2f8>)
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ac:	f8ca b008 	str.w	fp, [sl, #8]
  htim11.Init.Prescaler = 1000-1;
 80016b0:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80016b4:	e9ca 2300 	strd	r2, r3, [sl]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80016b8:	4650      	mov	r0, sl
  htim11.Init.Period = 500-1;
 80016ba:	f240 13f3 	movw	r3, #499	@ 0x1f3
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016be:	f8ca b010 	str.w	fp, [sl, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016c2:	f8ca 4018 	str.w	r4, [sl, #24]
  htim11.Init.Period = 500-1;
 80016c6:	f8ca 300c 	str.w	r3, [sl, #12]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80016ca:	f001 fb49 	bl	8002d60 <HAL_TIM_Base_Init>
 80016ce:	4683      	mov	fp, r0
 80016d0:	b108      	cbz	r0, 80016d6 <main+0x23e>
 80016d2:	b672      	cpsid	i
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <main+0x23c>
  HAL_TIM_Base_Start_IT(&htim11); // Start controller timer
 80016d6:	4650      	mov	r0, sl
 80016d8:	f001 fbbc 	bl	8002e54 <HAL_TIM_Base_Start_IT>
  statusCheck = CommandProtocol_Init(&cmdHandle, &huart1, 100);
 80016dc:	4629      	mov	r1, r5
 80016de:	2264      	movs	r2, #100	@ 0x64
 80016e0:	482c      	ldr	r0, [pc, #176]	@ (8001794 <main+0x2fc>)
 80016e2:	4c2d      	ldr	r4, [pc, #180]	@ (8001798 <main+0x300>)
 80016e4:	4d2d      	ldr	r5, [pc, #180]	@ (800179c <main+0x304>)
 80016e6:	f7ff fd77 	bl	80011d8 <CommandProtocol_Init>
  statusCheck = AS5600_Init(&as5600, &hi2c1);
 80016ea:	4641      	mov	r1, r8
  statusCheck = CommandProtocol_Init(&cmdHandle, &huart1, 100);
 80016ec:	6020      	str	r0, [r4, #0]
  statusCheck = AS5600_Init(&as5600, &hi2c1);
 80016ee:	482c      	ldr	r0, [pc, #176]	@ (80017a0 <main+0x308>)
 80016f0:	f8df 80d8 	ldr.w	r8, [pc, #216]	@ 80017cc <main+0x334>
 80016f4:	f7ff fd2e 	bl	8001154 <AS5600_Init>
  statusCheck = StepMotor_Init(&l1_motor, &htim1, TIM_CHANNEL_3, M1_DIR_GPIO_Port, M1_DIR_Pin);
 80016f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001778 <main+0x2e0>)
 80016fa:	9700      	str	r7, [sp, #0]
 80016fc:	4632      	mov	r2, r6
  statusCheck = AS5600_Init(&as5600, &hi2c1);
 80016fe:	6020      	str	r0, [r4, #0]
  statusCheck = StepMotor_Init(&l1_motor, &htim1, TIM_CHANNEL_3, M1_DIR_GPIO_Port, M1_DIR_Pin);
 8001700:	4649      	mov	r1, r9
 8001702:	4828      	ldr	r0, [pc, #160]	@ (80017a4 <main+0x30c>)
 8001704:	4f28      	ldr	r7, [pc, #160]	@ (80017a8 <main+0x310>)
 8001706:	4e29      	ldr	r6, [pc, #164]	@ (80017ac <main+0x314>)
 8001708:	f7ff fdba 	bl	8001280 <StepMotor_Init>
  StepMotor_SetSpeedLUT(&l1_motor, 0, 0); // Motor not moving initially
 800170c:	465a      	mov	r2, fp
 800170e:	4659      	mov	r1, fp
  statusCheck = StepMotor_Init(&l1_motor, &htim1, TIM_CHANNEL_3, M1_DIR_GPIO_Port, M1_DIR_Pin);
 8001710:	6020      	str	r0, [r4, #0]
  StepMotor_SetSpeedLUT(&l1_motor, 0, 0); // Motor not moving initially
 8001712:	4824      	ldr	r0, [pc, #144]	@ (80017a4 <main+0x30c>)
 8001714:	f7ff fdc2 	bl	800129c <StepMotor_SetSpeedLUT>
  MultivariablePID_Init(&pidObj, Kp, Ki, Kd);
 8001718:	4b25      	ldr	r3, [pc, #148]	@ (80017b0 <main+0x318>)
 800171a:	4a26      	ldr	r2, [pc, #152]	@ (80017b4 <main+0x31c>)
 800171c:	4926      	ldr	r1, [pc, #152]	@ (80017b8 <main+0x320>)
 800171e:	4822      	ldr	r0, [pc, #136]	@ (80017a8 <main+0x310>)
 8001720:	f7ff fc68 	bl	8000ff4 <MultivariablePID_Init>
	  if(globalControllerFlag)
 8001724:	f898 3000 	ldrb.w	r3, [r8]
 8001728:	b953      	cbnz	r3, 8001740 <main+0x2a8>
	  statusCheck = AS5600_ReadAngle(&as5600, &angle);
 800172a:	4631      	mov	r1, r6
 800172c:	481c      	ldr	r0, [pc, #112]	@ (80017a0 <main+0x308>)
 800172e:	f7ff fd33 	bl	8001198 <AS5600_ReadAngle>
		  CommandProtocol_SendResponse(&cmdHandle, "AS5600 reading gone wrong!\n");
 8001732:	4922      	ldr	r1, [pc, #136]	@ (80017bc <main+0x324>)
	  statusCheck = AS5600_ReadAngle(&as5600, &angle);
 8001734:	6020      	str	r0, [r4, #0]
	  if (statusCheck != HAL_OK)
 8001736:	b178      	cbz	r0, 8001758 <main+0x2c0>
		  CommandProtocol_SendResponse(&cmdHandle, "AS5600 reading gone wrong!\n");
 8001738:	4816      	ldr	r0, [pc, #88]	@ (8001794 <main+0x2fc>)
 800173a:	f7ff fd89 	bl	8001250 <CommandProtocol_SendResponse>
 800173e:	e7f1      	b.n	8001724 <main+0x28c>
		  globalControllerFlag = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	f888 3000 	strb.w	r3, [r8]
		  float controller_dt = DWT_GetDeltaTime();
 8001746:	f7ff fdf7 	bl	8001338 <DWT_GetDeltaTime>
		  MultivariablePID_Compute(&pidObj, q_meas);
 800174a:	4629      	mov	r1, r5
 800174c:	4638      	mov	r0, r7
		  pidObj.dt = (float32_t)controller_dt;
 800174e:	ed87 0a32 	vstr	s0, [r7, #200]	@ 0xc8
		  MultivariablePID_Compute(&pidObj, q_meas);
 8001752:	f7ff fce5 	bl	8001120 <MultivariablePID_Compute>
 8001756:	e7e8      	b.n	800172a <main+0x292>
		  q_meas[0] = (float)angle;
 8001758:	8833      	ldrh	r3, [r6, #0]
 800175a:	ee07 3a90 	vmov	s15, r3
 800175e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001762:	edc5 7a00 	vstr	s15, [r5]
 8001766:	e7dd      	b.n	8001724 <main+0x28c>
 8001768:	08001369 	.word	0x08001369
 800176c:	20000390 	.word	0x20000390
 8001770:	40023800 	.word	0x40023800
 8001774:	40020800 	.word	0x40020800
 8001778:	40020000 	.word	0x40020000
 800177c:	40020400 	.word	0x40020400
 8001780:	40011000 	.word	0x40011000
 8001784:	00061a80 	.word	0x00061a80
 8001788:	40005400 	.word	0x40005400
 800178c:	40010000 	.word	0x40010000
 8001790:	40014800 	.word	0x40014800
 8001794:	20000318 	.word	0x20000318
 8001798:	20000354 	.word	0x20000354
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000310 	.word	0x20000310
 80017a4:	20000300 	.word	0x20000300
 80017a8:	20000214 	.word	0x20000214
 80017ac:	20000018 	.word	0x20000018
 80017b0:	200002e0 	.word	0x200002e0
 80017b4:	200002f0 	.word	0x200002f0
 80017b8:	20000008 	.word	0x20000008
 80017bc:	0800d42c 	.word	0x0800d42c
 80017c0:	20000468 	.word	0x20000468
 80017c4:	20000420 	.word	0x20000420
 80017c8:	200003d8 	.word	0x200003d8
 80017cc:	20000358 	.word	0x20000358

080017d0 <HAL_UART_RxCpltCallback>:
{
 80017d0:	b538      	push	{r3, r4, r5, lr}
	if (huart == cmdHandle.huart) {
 80017d2:	4c0b      	ldr	r4, [pc, #44]	@ (8001800 <HAL_UART_RxCpltCallback+0x30>)
 80017d4:	6825      	ldr	r5, [r4, #0]
 80017d6:	4285      	cmp	r5, r0
 80017d8:	d000      	beq.n	80017dc <HAL_UART_RxCpltCallback+0xc>
}
 80017da:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t receivedByte = cmdHandle.rxBuffer[cmdHandle.rxIndex];
 80017dc:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
		CommandProtocol_ProcessByte(&cmdHandle, receivedByte, globalDataArray);
 80017e0:	4a08      	ldr	r2, [pc, #32]	@ (8001804 <HAL_UART_RxCpltCallback+0x34>)
		uint8_t receivedByte = cmdHandle.rxBuffer[cmdHandle.rxIndex];
 80017e2:	4423      	add	r3, r4
		CommandProtocol_ProcessByte(&cmdHandle, receivedByte, globalDataArray);
 80017e4:	4620      	mov	r0, r4
 80017e6:	7a19      	ldrb	r1, [r3, #8]
 80017e8:	f7ff fd06 	bl	80011f8 <CommandProtocol_ProcessByte>
		HAL_UART_Receive_IT(huart, &cmdHandle.rxBuffer[cmdHandle.rxIndex], 1);
 80017ec:	f894 103a 	ldrb.w	r1, [r4, #58]	@ 0x3a
 80017f0:	3108      	adds	r1, #8
 80017f2:	4421      	add	r1, r4
 80017f4:	4628      	mov	r0, r5
 80017f6:	2201      	movs	r2, #1
}
 80017f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_UART_Receive_IT(huart, &cmdHandle.rxBuffer[cmdHandle.rxIndex], 1);
 80017fc:	f001 bfa4 	b.w	8003748 <HAL_UART_Receive_IT>
 8001800:	20000318 	.word	0x20000318
 8001804:	2000035c 	.word	0x2000035c

08001808 <HAL_TIM_PeriodElapsedCallback>:
{
 8001808:	b508      	push	{r3, lr}
    if (htim->Instance == TIM11) // Controller timer
 800180a:	6802      	ldr	r2, [r0, #0]
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800180e:	429a      	cmp	r2, r3
 8001810:	d000      	beq.n	8001814 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8001812:	bd08      	pop	{r3, pc}
    	statusCheck = AS5600_ReadAngle(&as5600, &angle);
 8001814:	4905      	ldr	r1, [pc, #20]	@ (800182c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001816:	4806      	ldr	r0, [pc, #24]	@ (8001830 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001818:	f7ff fcbe 	bl	8001198 <AS5600_ReadAngle>
    	globalControllerFlag = 1;
 800181c:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <HAL_TIM_PeriodElapsedCallback+0x2c>)
    	statusCheck = AS5600_ReadAngle(&as5600, &angle);
 800181e:	4906      	ldr	r1, [pc, #24]	@ (8001838 <HAL_TIM_PeriodElapsedCallback+0x30>)
    	globalControllerFlag = 1;
 8001820:	2201      	movs	r2, #1
 8001822:	701a      	strb	r2, [r3, #0]
    	statusCheck = AS5600_ReadAngle(&as5600, &angle);
 8001824:	6008      	str	r0, [r1, #0]
}
 8001826:	bd08      	pop	{r3, pc}
 8001828:	40014800 	.word	0x40014800
 800182c:	20000018 	.word	0x20000018
 8001830:	20000310 	.word	0x20000310
 8001834:	20000358 	.word	0x20000358
 8001838:	20000354 	.word	0x20000354

0800183c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800183c:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <HAL_MspInit+0x34>)
 8001840:	2100      	movs	r1, #0
 8001842:	9100      	str	r1, [sp, #0]
 8001844:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001846:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800184a:	645a      	str	r2, [r3, #68]	@ 0x44
 800184c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800184e:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001852:	9200      	str	r2, [sp, #0]
 8001854:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	9101      	str	r1, [sp, #4]
 8001858:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800185a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800185e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186a:	b002      	add	sp, #8
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40023800 	.word	0x40023800

08001874 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001874:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8001876:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <HAL_I2C_MspInit+0x68>)
 8001878:	6802      	ldr	r2, [r0, #0]
{
 800187a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 800187e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001884:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001888:	9406      	str	r4, [sp, #24]
  if(hi2c->Instance==I2C1)
 800188a:	d001      	beq.n	8001890 <HAL_I2C_MspInit+0x1c>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800188c:	b009      	add	sp, #36	@ 0x24
 800188e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001890:	4d13      	ldr	r5, [pc, #76]	@ (80018e0 <HAL_I2C_MspInit+0x6c>)
 8001892:	9400      	str	r4, [sp, #0]
 8001894:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	4813      	ldr	r0, [pc, #76]	@ (80018e4 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	632b      	str	r3, [r5, #48]	@ 0x30
 800189e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018a6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80018aa:	2312      	movs	r3, #18
 80018ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80018b0:	2201      	movs	r2, #1
 80018b2:	2303      	movs	r3, #3
 80018b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018ba:	2304      	movs	r3, #4
 80018bc:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c0:	f000 fa90 	bl	8001de4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018c4:	9401      	str	r4, [sp, #4]
 80018c6:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80018c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018cc:	642b      	str	r3, [r5, #64]	@ 0x40
 80018ce:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80018d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018d4:	9301      	str	r3, [sp, #4]
 80018d6:	9b01      	ldr	r3, [sp, #4]
}
 80018d8:	b009      	add	sp, #36	@ 0x24
 80018da:	bd30      	pop	{r4, r5, pc}
 80018dc:	40005400 	.word	0x40005400
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40020400 	.word	0x40020400

080018e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018e8:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 80018ea:	4a18      	ldr	r2, [pc, #96]	@ (800194c <HAL_TIM_Base_MspInit+0x64>)
 80018ec:	6803      	ldr	r3, [r0, #0]
 80018ee:	4293      	cmp	r3, r2
{
 80018f0:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 80018f2:	d005      	beq.n	8001900 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 80018f4:	4a16      	ldr	r2, [pc, #88]	@ (8001950 <HAL_TIM_Base_MspInit+0x68>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d018      	beq.n	800192c <HAL_TIM_Base_MspInit+0x44>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80018fa:	b003      	add	sp, #12
 80018fc:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001900:	4b14      	ldr	r3, [pc, #80]	@ (8001954 <HAL_TIM_Base_MspInit+0x6c>)
 8001902:	2200      	movs	r2, #0
 8001904:	9200      	str	r2, [sp, #0]
 8001906:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001908:	f041 0101 	orr.w	r1, r1, #1
 800190c:	6459      	str	r1, [r3, #68]	@ 0x44
 800190e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	9300      	str	r3, [sp, #0]
 8001916:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001918:	201a      	movs	r0, #26
 800191a:	4611      	mov	r1, r2
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800191c:	f000 f9a2 	bl	8001c64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001920:	201a      	movs	r0, #26
}
 8001922:	b003      	add	sp, #12
 8001924:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001928:	f000 b9d8 	b.w	8001cdc <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <HAL_TIM_Base_MspInit+0x6c>)
 800192e:	2200      	movs	r2, #0
 8001930:	9201      	str	r2, [sp, #4]
 8001932:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001934:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
 8001938:	6459      	str	r1, [r3, #68]	@ 0x44
 800193a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001940:	9301      	str	r3, [sp, #4]
 8001942:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001944:	201a      	movs	r0, #26
 8001946:	4611      	mov	r1, r2
 8001948:	e7e8      	b.n	800191c <HAL_TIM_Base_MspInit+0x34>
 800194a:	bf00      	nop
 800194c:	40010000 	.word	0x40010000
 8001950:	40014800 	.word	0x40014800
 8001954:	40023800 	.word	0x40023800

08001958 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001958:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800195a:	4a15      	ldr	r2, [pc, #84]	@ (80019b0 <HAL_TIM_MspPostInit+0x58>)
 800195c:	6801      	ldr	r1, [r0, #0]
{
 800195e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001960:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8001962:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001964:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001968:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800196c:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 800196e:	d002      	beq.n	8001976 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001970:	b009      	add	sp, #36	@ 0x24
 8001972:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	480d      	ldr	r0, [pc, #52]	@ (80019b4 <HAL_TIM_MspPostInit+0x5c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6313      	str	r3, [r2, #48]	@ 0x30
 8001986:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001988:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 80019a8 <HAL_TIM_MspPostInit+0x50>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001992:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001994:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001996:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800199c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199e:	f000 fa21 	bl	8001de4 <HAL_GPIO_Init>
}
 80019a2:	b009      	add	sp, #36	@ 0x24
 80019a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80019a8:	00000400 	.word	0x00000400
 80019ac:	00000002 	.word	0x00000002
 80019b0:	40010000 	.word	0x40010000
 80019b4:	40020000 	.word	0x40020000

080019b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019b8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 80019ba:	4b1c      	ldr	r3, [pc, #112]	@ (8001a2c <HAL_UART_MspInit+0x74>)
 80019bc:	6802      	ldr	r2, [r0, #0]
{
 80019be:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 80019c2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80019c8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80019cc:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 80019ce:	d001      	beq.n	80019d4 <HAL_UART_MspInit+0x1c>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80019d0:	b009      	add	sp, #36	@ 0x24
 80019d2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80019d4:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 80019d8:	9400      	str	r4, [sp, #0]
 80019da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019dc:	4814      	ldr	r0, [pc, #80]	@ (8001a30 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80019de:	f042 0210 	orr.w	r2, r2, #16
 80019e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80019e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80019e6:	f002 0210 	and.w	r2, r2, #16
 80019ea:	9200      	str	r2, [sp, #0]
 80019ec:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	9401      	str	r4, [sp, #4]
 80019f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019f2:	f042 0202 	orr.w	r2, r2, #2
 80019f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a00:	22c0      	movs	r2, #192	@ 0xc0
 8001a02:	2302      	movs	r3, #2
 8001a04:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a08:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0a:	2307      	movs	r3, #7
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a14:	f000 f9e6 	bl	8001de4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001a18:	4622      	mov	r2, r4
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	2025      	movs	r0, #37	@ 0x25
 8001a1e:	f000 f921 	bl	8001c64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a22:	2025      	movs	r0, #37	@ 0x25
 8001a24:	f000 f95a 	bl	8001cdc <HAL_NVIC_EnableIRQ>
}
 8001a28:	b009      	add	sp, #36	@ 0x24
 8001a2a:	bd30      	pop	{r4, r5, pc}
 8001a2c:	40011000 	.word	0x40011000
 8001a30:	40020400 	.word	0x40020400

08001a34 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a34:	e7fe      	b.n	8001a34 <NMI_Handler>
 8001a36:	bf00      	nop

08001a38 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <HardFault_Handler>
 8001a3a:	bf00      	nop

08001a3c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <MemManage_Handler>
 8001a3e:	bf00      	nop

08001a40 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a40:	e7fe      	b.n	8001a40 <BusFault_Handler>
 8001a42:	bf00      	nop

08001a44 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <UsageFault_Handler>
 8001a46:	bf00      	nop

08001a48 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop

08001a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop

08001a50 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop

08001a54 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a54:	f000 b8e2 	b.w	8001c1c <HAL_IncTick>

08001a58 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001a58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a5a:	4804      	ldr	r0, [pc, #16]	@ (8001a6c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001a5c:	f001 fc72 	bl	8003344 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001a60:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim11);
 8001a64:	4802      	ldr	r0, [pc, #8]	@ (8001a70 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001a66:	f001 bc6d 	b.w	8003344 <HAL_TIM_IRQHandler>
 8001a6a:	bf00      	nop
 8001a6c:	20000420 	.word	0x20000420
 8001a70:	200003d8 	.word	0x200003d8

08001a74 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a74:	4801      	ldr	r0, [pc, #4]	@ (8001a7c <USART1_IRQHandler+0x8>)
 8001a76:	f001 befd 	b.w	8003874 <HAL_UART_IRQHandler>
 8001a7a:	bf00      	nop
 8001a7c:	20000390 	.word	0x20000390

08001a80 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001a80:	2001      	movs	r0, #1
 8001a82:	4770      	bx	lr

08001a84 <_kill>:

int _kill(int pid, int sig)
{
 8001a84:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a86:	f003 fa8f 	bl	8004fa8 <__errno>
 8001a8a:	2316      	movs	r3, #22
 8001a8c:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a92:	bd08      	pop	{r3, pc}

08001a94 <_exit>:

void _exit (int status)
{
 8001a94:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001a96:	f003 fa87 	bl	8004fa8 <__errno>
 8001a9a:	2316      	movs	r3, #22
 8001a9c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001a9e:	e7fe      	b.n	8001a9e <_exit+0xa>

08001aa0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa0:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa2:	1e16      	subs	r6, r2, #0
 8001aa4:	dd07      	ble.n	8001ab6 <_read+0x16>
 8001aa6:	460c      	mov	r4, r1
 8001aa8:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001aaa:	f3af 8000 	nop.w
 8001aae:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab2:	42a5      	cmp	r5, r4
 8001ab4:	d1f9      	bne.n	8001aaa <_read+0xa>
  }

  return len;
}
 8001ab6:	4630      	mov	r0, r6
 8001ab8:	bd70      	pop	{r4, r5, r6, pc}
 8001aba:	bf00      	nop

08001abc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001abc:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001abe:	1e16      	subs	r6, r2, #0
 8001ac0:	dd07      	ble.n	8001ad2 <_write+0x16>
 8001ac2:	460c      	mov	r4, r1
 8001ac4:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8001ac6:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001aca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ace:	42ac      	cmp	r4, r5
 8001ad0:	d1f9      	bne.n	8001ac6 <_write+0xa>
  }
  return len;
}
 8001ad2:	4630      	mov	r0, r6
 8001ad4:	bd70      	pop	{r4, r5, r6, pc}
 8001ad6:	bf00      	nop

08001ad8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop

08001ae0 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001ae0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ae4:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop

08001aec <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001aec:	2001      	movs	r0, #1
 8001aee:	4770      	bx	lr

08001af0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001af0:	2000      	movs	r0, #0
 8001af2:	4770      	bx	lr

08001af4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af4:	490c      	ldr	r1, [pc, #48]	@ (8001b28 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af6:	4a0d      	ldr	r2, [pc, #52]	@ (8001b2c <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001af8:	680b      	ldr	r3, [r1, #0]
{
 8001afa:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001afc:	4c0c      	ldr	r4, [pc, #48]	@ (8001b30 <_sbrk+0x3c>)
 8001afe:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001b00:	b12b      	cbz	r3, 8001b0e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b02:	4418      	add	r0, r3
 8001b04:	4290      	cmp	r0, r2
 8001b06:	d807      	bhi.n	8001b18 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001b08:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001b0e:	4b09      	ldr	r3, [pc, #36]	@ (8001b34 <_sbrk+0x40>)
 8001b10:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001b12:	4418      	add	r0, r3
 8001b14:	4290      	cmp	r0, r2
 8001b16:	d9f7      	bls.n	8001b08 <_sbrk+0x14>
    errno = ENOMEM;
 8001b18:	f003 fa46 	bl	8004fa8 <__errno>
 8001b1c:	230c      	movs	r3, #12
 8001b1e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001b20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	bd10      	pop	{r4, pc}
 8001b28:	200004bc 	.word	0x200004bc
 8001b2c:	20020000 	.word	0x20020000
 8001b30:	00000400 	.word	0x00000400
 8001b34:	20000610 	.word	0x20000610

08001b38 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b38:	4a03      	ldr	r2, [pc, #12]	@ (8001b48 <SystemInit+0x10>)
 8001b3a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001b3e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b42:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b50:	f7ff fff2 	bl	8001b38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b54:	480c      	ldr	r0, [pc, #48]	@ (8001b88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b56:	490d      	ldr	r1, [pc, #52]	@ (8001b8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b58:	4a0d      	ldr	r2, [pc, #52]	@ (8001b90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b5c:	e002      	b.n	8001b64 <LoopCopyDataInit>

08001b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b62:	3304      	adds	r3, #4

08001b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b68:	d3f9      	bcc.n	8001b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b6c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b70:	e001      	b.n	8001b76 <LoopFillZerobss>

08001b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b74:	3204      	adds	r2, #4

08001b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b78:	d3fb      	bcc.n	8001b72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b7a:	f003 fa1b 	bl	8004fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b7e:	f7ff fc8b 	bl	8001498 <main>
  bx  lr    
 8001b82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b8c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001b90:	0800d8a0 	.word	0x0800d8a0
  ldr r2, =_sbss
 8001b94:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001b98:	20000610 	.word	0x20000610

08001b9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b9c:	e7fe      	b.n	8001b9c <ADC_IRQHandler>
	...

08001ba0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	@ (8001bdc <HAL_InitTick+0x3c>)
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8001be0 <HAL_InitTick+0x40>)
 8001ba6:	7812      	ldrb	r2, [r2, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
{
 8001baa:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001bb0:	fbb0 f0f2 	udiv	r0, r0, r2
 8001bb4:	fbb3 f0f0 	udiv	r0, r3, r0
 8001bb8:	f000 f89e 	bl	8001cf8 <HAL_SYSTICK_Config>
 8001bbc:	b908      	cbnz	r0, 8001bc2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bbe:	2d0f      	cmp	r5, #15
 8001bc0:	d901      	bls.n	8001bc6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8001bc2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001bc4:	bd38      	pop	{r3, r4, r5, pc}
 8001bc6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bc8:	4602      	mov	r2, r0
 8001bca:	4629      	mov	r1, r5
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f000 f848 	bl	8001c64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd4:	4b03      	ldr	r3, [pc, #12]	@ (8001be4 <HAL_InitTick+0x44>)
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	601d      	str	r5, [r3, #0]
}
 8001bda:	bd38      	pop	{r3, r4, r5, pc}
 8001bdc:	20000020 	.word	0x20000020
 8001be0:	2000001c 	.word	0x2000001c
 8001be4:	20000024 	.word	0x20000024

08001be8 <HAL_Init>:
{
 8001be8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bea:	4b0b      	ldr	r3, [pc, #44]	@ (8001c18 <HAL_Init+0x30>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bf2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001bfa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c02:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c04:	2003      	movs	r0, #3
 8001c06:	f000 f81b 	bl	8001c40 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0a:	200f      	movs	r0, #15
 8001c0c:	f7ff ffc8 	bl	8001ba0 <HAL_InitTick>
  HAL_MspInit();
 8001c10:	f7ff fe14 	bl	800183c <HAL_MspInit>
}
 8001c14:	2000      	movs	r0, #0
 8001c16:	bd08      	pop	{r3, pc}
 8001c18:	40023c00 	.word	0x40023c00

08001c1c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001c1c:	4a03      	ldr	r2, [pc, #12]	@ (8001c2c <HAL_IncTick+0x10>)
 8001c1e:	4b04      	ldr	r3, [pc, #16]	@ (8001c30 <HAL_IncTick+0x14>)
 8001c20:	6811      	ldr	r1, [r2, #0]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	440b      	add	r3, r1
 8001c26:	6013      	str	r3, [r2, #0]
}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	200004c0 	.word	0x200004c0
 8001c30:	20000020 	.word	0x20000020

08001c34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001c34:	4b01      	ldr	r3, [pc, #4]	@ (8001c3c <HAL_GetTick+0x8>)
 8001c36:	6818      	ldr	r0, [r3, #0]
}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	200004c0 	.word	0x200004c0

08001c40 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c40:	4907      	ldr	r1, [pc, #28]	@ (8001c60 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001c42:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c44:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c46:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c4a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c4e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c50:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c52:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001c5a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c64:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd4 <HAL_NVIC_SetPriority+0x70>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c6c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c6e:	f1c3 0e07 	rsb	lr, r3, #7
 8001c72:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c76:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c7a:	bf28      	it	cs
 8001c7c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c80:	f1bc 0f06 	cmp.w	ip, #6
 8001c84:	d91c      	bls.n	8001cc0 <HAL_NVIC_SetPriority+0x5c>
 8001c86:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8e:	fa03 f30c 	lsl.w	r3, r3, ip
 8001c92:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	fa03 f30e 	lsl.w	r3, r3, lr
 8001c9e:	ea21 0303 	bic.w	r3, r1, r3
 8001ca2:	fa03 f30c 	lsl.w	r3, r3, ip
 8001ca6:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca8:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8001caa:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cac:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001cae:	db0a      	blt.n	8001cc6 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001cb4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001cb8:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001cbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cc0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc2:	4694      	mov	ip, r2
 8001cc4:	e7e7      	b.n	8001c96 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc6:	4a04      	ldr	r2, [pc, #16]	@ (8001cd8 <HAL_NVIC_SetPriority+0x74>)
 8001cc8:	f000 000f 	and.w	r0, r0, #15
 8001ccc:	4402      	add	r2, r0
 8001cce:	7613      	strb	r3, [r2, #24]
 8001cd0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cd4:	e000ed00 	.word	0xe000ed00
 8001cd8:	e000ecfc 	.word	0xe000ecfc

08001cdc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001cdc:	2800      	cmp	r0, #0
 8001cde:	db07      	blt.n	8001cf0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce0:	4a04      	ldr	r2, [pc, #16]	@ (8001cf4 <HAL_NVIC_EnableIRQ+0x18>)
 8001ce2:	0941      	lsrs	r1, r0, #5
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	f000 001f 	and.w	r0, r0, #31
 8001cea:	4083      	lsls	r3, r0
 8001cec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000e100 	.word	0xe000e100

08001cf8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf8:	3801      	subs	r0, #1
 8001cfa:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001cfe:	d301      	bcc.n	8001d04 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d00:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001d02:	4770      	bx	lr
{
 8001d04:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d06:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0a:	4c07      	ldr	r4, [pc, #28]	@ (8001d28 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d0c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8001d12:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d16:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d18:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d1a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d1c:	619a      	str	r2, [r3, #24]
}
 8001d1e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d22:	6119      	str	r1, [r3, #16]
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d2c:	b570      	push	{r4, r5, r6, lr}
 8001d2e:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d30:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8001d32:	f7ff ff7f 	bl	8001c34 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d36:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d006      	beq.n	8001d4c <HAL_DMA_Abort+0x20>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d3e:	2380      	movs	r3, #128	@ 0x80
 8001d40:	6563      	str	r3, [r4, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d42:	2300      	movs	r3, #0
 8001d44:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d48:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 8001d4a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d4c:	6823      	ldr	r3, [r4, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	f022 0216 	bic.w	r2, r2, #22
 8001d54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d56:	695a      	ldr	r2, [r3, #20]
 8001d58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d5c:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d5e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001d60:	4605      	mov	r5, r0
 8001d62:	b342      	cbz	r2, 8001db6 <HAL_DMA_Abort+0x8a>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	f022 0208 	bic.w	r2, r2, #8
 8001d6a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d74:	e005      	b.n	8001d82 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d76:	f7ff ff5d 	bl	8001c34 <HAL_GetTick>
 8001d7a:	1b43      	subs	r3, r0, r5
 8001d7c:	2b05      	cmp	r3, #5
 8001d7e:	d810      	bhi.n	8001da2 <HAL_DMA_Abort+0x76>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d80:	6823      	ldr	r3, [r4, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f013 0301 	ands.w	r3, r3, #1
 8001d88:	d1f5      	bne.n	8001d76 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d8a:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8001d8c:	223f      	movs	r2, #63	@ 0x3f
 8001d8e:	408a      	lsls	r2, r1
  return HAL_OK;
 8001d90:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8001d92:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8001d94:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d96:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001d98:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001d9c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8001da0:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001da4:	2220      	movs	r2, #32
 8001da6:	6562      	str	r2, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8001da8:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001daa:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001dae:	2300      	movs	r3, #0
 8001db0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8001db4:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001db6:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8001db8:	2a00      	cmp	r2, #0
 8001dba:	d1d3      	bne.n	8001d64 <HAL_DMA_Abort+0x38>
 8001dbc:	e7d6      	b.n	8001d6c <HAL_DMA_Abort+0x40>
 8001dbe:	bf00      	nop

08001dc0 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc0:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d003      	beq.n	8001dd0 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc8:	2380      	movs	r3, #128	@ 0x80
 8001dca:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8001dcc:	2001      	movs	r0, #1
 8001dce:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dd0:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dd2:	2305      	movs	r3, #5
 8001dd4:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8001dd8:	6813      	ldr	r3, [r2, #0]
 8001dda:	f023 0301 	bic.w	r3, r3, #1
  }

  return HAL_OK;
 8001dde:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001de0:	6013      	str	r3, [r2, #0]
}
 8001de2:	4770      	bx	lr

08001de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de8:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dea:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dec:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 8001fc4 <HAL_GPIO_Init+0x1e0>
{
 8001df0:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 8001df2:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001df6:	4689      	mov	r9, r1
 8001df8:	e003      	b.n	8001e02 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	2b10      	cmp	r3, #16
 8001dfe:	f000 8082 	beq.w	8001f06 <HAL_GPIO_Init+0x122>
    ioposition = 0x01U << position;
 8001e02:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e06:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8001e0a:	43a2      	bics	r2, r4
 8001e0c:	d1f5      	bne.n	8001dfa <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e0e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001e12:	f001 0203 	and.w	r2, r1, #3
 8001e16:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e1a:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e1c:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e1e:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e22:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e24:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e28:	d970      	bls.n	8001f0c <HAL_GPIO_Init+0x128>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e2a:	2a03      	cmp	r2, #3
 8001e2c:	f040 80a7 	bne.w	8001f7e <HAL_GPIO_Init+0x19a>
      temp = GPIOx->MODER;
 8001e30:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e32:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e36:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e38:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e3a:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8001e3e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e40:	d0db      	beq.n	8001dfa <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e42:	2200      	movs	r2, #0
 8001e44:	9203      	str	r2, [sp, #12]
 8001e46:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8001e4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e4e:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8001e52:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8001e56:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001e5a:	9203      	str	r2, [sp, #12]
 8001e5c:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001e5e:	f023 0203 	bic.w	r2, r3, #3
 8001e62:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e66:	f003 0703 	and.w	r7, r3, #3
 8001e6a:	260f      	movs	r6, #15
 8001e6c:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8001e70:	00bf      	lsls	r7, r7, #2
 8001e72:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e76:	4e50      	ldr	r6, [pc, #320]	@ (8001fb8 <HAL_GPIO_Init+0x1d4>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8001e78:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e7a:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e7c:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e80:	d018      	beq.n	8001eb4 <HAL_GPIO_Init+0xd0>
 8001e82:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001e86:	42b0      	cmp	r0, r6
 8001e88:	f000 8084 	beq.w	8001f94 <HAL_GPIO_Init+0x1b0>
 8001e8c:	4e4b      	ldr	r6, [pc, #300]	@ (8001fbc <HAL_GPIO_Init+0x1d8>)
 8001e8e:	42b0      	cmp	r0, r6
 8001e90:	f000 8086 	beq.w	8001fa0 <HAL_GPIO_Init+0x1bc>
 8001e94:	f8df c130 	ldr.w	ip, [pc, #304]	@ 8001fc8 <HAL_GPIO_Init+0x1e4>
 8001e98:	4560      	cmp	r0, ip
 8001e9a:	f000 8087 	beq.w	8001fac <HAL_GPIO_Init+0x1c8>
 8001e9e:	f8df c12c 	ldr.w	ip, [pc, #300]	@ 8001fcc <HAL_GPIO_Init+0x1e8>
 8001ea2:	4560      	cmp	r0, ip
 8001ea4:	bf0c      	ite	eq
 8001ea6:	f04f 0c04 	moveq.w	ip, #4
 8001eaa:	f04f 0c07 	movne.w	ip, #7
 8001eae:	fa0c f707 	lsl.w	r7, ip, r7
 8001eb2:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eb4:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb6:	4a42      	ldr	r2, [pc, #264]	@ (8001fc0 <HAL_GPIO_Init+0x1dc>)
 8001eb8:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eba:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 8001ebc:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001ec0:	4e3f      	ldr	r6, [pc, #252]	@ (8001fc0 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 8001ec2:	bf54      	ite	pl
 8001ec4:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001ec6:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8001eca:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8001ecc:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001ece:	4e3c      	ldr	r6, [pc, #240]	@ (8001fc0 <HAL_GPIO_Init+0x1dc>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ed0:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 8001ed2:	bf54      	ite	pl
 8001ed4:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001ed6:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8001eda:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8001edc:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ede:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001ee0:	4e37      	ldr	r6, [pc, #220]	@ (8001fc0 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 8001ee2:	bf54      	ite	pl
 8001ee4:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001ee6:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8001eea:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eec:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eee:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ef0:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001ef4:	4932      	ldr	r1, [pc, #200]	@ (8001fc0 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 8001ef6:	bf54      	ite	pl
 8001ef8:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001efa:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efe:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8001f00:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f02:	f47f af7e 	bne.w	8001e02 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8001f06:	b005      	add	sp, #20
 8001f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8001f0c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f0e:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f12:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8001f16:	fa07 f70c 	lsl.w	r7, r7, ip
 8001f1a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001f1e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001f20:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f22:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f26:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8001f2a:	409f      	lsls	r7, r3
 8001f2c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001f30:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001f32:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f34:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f38:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8001f3c:	fa07 f70c 	lsl.w	r7, r7, ip
 8001f40:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f44:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8001f46:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f48:	f47f af72 	bne.w	8001e30 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8001f4c:	08df      	lsrs	r7, r3, #3
 8001f4e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8001f52:	9701      	str	r7, [sp, #4]
 8001f54:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f56:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8001f5a:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f5c:	f003 0e07 	and.w	lr, r3, #7
 8001f60:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001f64:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f66:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f6a:	fa06 fe0e 	lsl.w	lr, r6, lr
 8001f6e:	9e00      	ldr	r6, [sp, #0]
 8001f70:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001f74:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f76:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001f7a:	6237      	str	r7, [r6, #32]
 8001f7c:	e758      	b.n	8001e30 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 8001f7e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f80:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f84:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8001f88:	fa07 f70c 	lsl.w	r7, r7, ip
 8001f8c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001f90:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f92:	e74d      	b.n	8001e30 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f94:	f04f 0c01 	mov.w	ip, #1
 8001f98:	fa0c f707 	lsl.w	r7, ip, r7
 8001f9c:	433d      	orrs	r5, r7
 8001f9e:	e789      	b.n	8001eb4 <HAL_GPIO_Init+0xd0>
 8001fa0:	f04f 0c02 	mov.w	ip, #2
 8001fa4:	fa0c f707 	lsl.w	r7, ip, r7
 8001fa8:	433d      	orrs	r5, r7
 8001faa:	e783      	b.n	8001eb4 <HAL_GPIO_Init+0xd0>
 8001fac:	f04f 0c03 	mov.w	ip, #3
 8001fb0:	fa0c f707 	lsl.w	r7, ip, r7
 8001fb4:	433d      	orrs	r5, r7
 8001fb6:	e77d      	b.n	8001eb4 <HAL_GPIO_Init+0xd0>
 8001fb8:	40020000 	.word	0x40020000
 8001fbc:	40020800 	.word	0x40020800
 8001fc0:	40013c00 	.word	0x40013c00
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40020c00 	.word	0x40020c00
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd0:	b902      	cbnz	r2, 8001fd4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fd2:	0409      	lsls	r1, r1, #16
 8001fd4:	6181      	str	r1, [r0, #24]
  }
}
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fd8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fda:	ea01 0203 	and.w	r2, r1, r3
 8001fde:	ea21 0103 	bic.w	r1, r1, r3
 8001fe2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001fe6:	6181      	str	r1, [r0, #24]
}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop

08001fec <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8001fec:	b570      	push	{r4, r5, r6, lr}
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fee:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8001ff0:	4604      	mov	r4, r0
 8001ff2:	1c48      	adds	r0, r1, #1
 8001ff4:	d003      	beq.n	8001ffe <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x12>
 8001ff6:	e01e      	b.n	8002036 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x4a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	0551      	lsls	r1, r2, #21
 8001ffc:	d404      	bmi.n	8002008 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ffe:	695a      	ldr	r2, [r3, #20]
 8002000:	0790      	lsls	r0, r2, #30
 8002002:	d5f9      	bpl.n	8001ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0xc>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002004:	2000      	movs	r0, #0
}
 8002006:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800200e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002010:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002012:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8002016:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002018:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800201a:	6321      	str	r1, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800201c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002020:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002024:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002026:	f043 0304 	orr.w	r3, r3, #4
 800202a:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800202c:	2300      	movs	r3, #0
 800202e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8002032:	2001      	movs	r0, #1
}
 8002034:	bd70      	pop	{r4, r5, r6, pc}
 8002036:	460d      	mov	r5, r1
 8002038:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800203a:	695a      	ldr	r2, [r3, #20]
 800203c:	0792      	lsls	r2, r2, #30
 800203e:	d4e1      	bmi.n	8002004 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x18>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002040:	695a      	ldr	r2, [r3, #20]
 8002042:	0551      	lsls	r1, r2, #21
 8002044:	d4e0      	bmi.n	8002008 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002046:	f7ff fdf5 	bl	8001c34 <HAL_GetTick>
 800204a:	1b80      	subs	r0, r0, r6
 800204c:	4285      	cmp	r5, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800204e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002050:	d301      	bcc.n	8002056 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x6a>
 8002052:	2d00      	cmp	r5, #0
 8002054:	d1f1      	bne.n	800203a <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x4e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002056:	695a      	ldr	r2, [r3, #20]
 8002058:	0792      	lsls	r2, r2, #30
 800205a:	d4ee      	bmi.n	800203a <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x4e>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800205c:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 800205e:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002060:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002062:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002066:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800206a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800206c:	4313      	orrs	r3, r2
 800206e:	6423      	str	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8002070:	e7dc      	b.n	800202c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x40>
 8002072:	bf00      	nop

08002074 <I2C_RequestMemoryRead>:
{
 8002074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002078:	6805      	ldr	r5, [r0, #0]
{
 800207a:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800207c:	682b      	ldr	r3, [r5, #0]
{
 800207e:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002080:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002084:	602b      	str	r3, [r5, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002086:	682b      	ldr	r3, [r5, #0]
{
 8002088:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 800208a:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 800208e:	4690      	mov	r8, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002090:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002094:	1c7a      	adds	r2, r7, #1
{
 8002096:	4606      	mov	r6, r0
 8002098:	468b      	mov	fp, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800209a:	602b      	str	r3, [r5, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800209c:	d13d      	bne.n	800211a <I2C_RequestMemoryRead+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800209e:	696c      	ldr	r4, [r5, #20]
 80020a0:	07e4      	lsls	r4, r4, #31
 80020a2:	d5fc      	bpl.n	800209e <I2C_RequestMemoryRead+0x2a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020a4:	f00b 03fe 	and.w	r3, fp, #254	@ 0xfe
 80020a8:	612b      	str	r3, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020aa:	4652      	mov	r2, sl
 80020ac:	4639      	mov	r1, r7
 80020ae:	4630      	mov	r0, r6
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020b0:	fa5f fb8b 	uxtb.w	fp, fp
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020b4:	f7ff ff9a 	bl	8001fec <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 80020b8:	bb38      	cbnz	r0, 800210a <I2C_RequestMemoryRead+0x96>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020ba:	9001      	str	r0, [sp, #4]
 80020bc:	6830      	ldr	r0, [r6, #0]
 80020be:	6943      	ldr	r3, [r0, #20]
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	6983      	ldr	r3, [r0, #24]
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	1c79      	adds	r1, r7, #1
 80020c8:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020ca:	f040 8087 	bne.w	80021dc <I2C_RequestMemoryRead+0x168>
 80020ce:	6943      	ldr	r3, [r0, #20]
 80020d0:	061d      	lsls	r5, r3, #24
 80020d2:	d444      	bmi.n	800215e <I2C_RequestMemoryRead+0xea>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020d4:	6943      	ldr	r3, [r0, #20]
 80020d6:	055c      	lsls	r4, r3, #21
 80020d8:	d5f9      	bpl.n	80020ce <I2C_RequestMemoryRead+0x5a>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 80020da:	2300      	movs	r3, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020dc:	f46f 6180 	mvn.w	r1, #1024	@ 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80020e0:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020e2:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80020e4:	6333      	str	r3, [r6, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80020e6:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ea:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020ee:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 80020f0:	f043 0304 	orr.w	r3, r3, #4
 80020f4:	6433      	str	r3, [r6, #64]	@ 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020f6:	6c33      	ldr	r3, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80020f8:	2200      	movs	r2, #0
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020fa:	2b04      	cmp	r3, #4
          __HAL_UNLOCK(hi2c);
 80020fc:	f886 203c 	strb.w	r2, [r6, #60]	@ 0x3c
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002100:	d103      	bne.n	800210a <I2C_RequestMemoryRead+0x96>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002102:	6803      	ldr	r3, [r0, #0]
 8002104:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002108:	6003      	str	r3, [r0, #0]
    return HAL_ERROR;
 800210a:	2001      	movs	r0, #1
}
 800210c:	b003      	add	sp, #12
 800210e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002112:	b917      	cbnz	r7, 800211a <I2C_RequestMemoryRead+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002114:	696b      	ldr	r3, [r5, #20]
 8002116:	07db      	lsls	r3, r3, #31
 8002118:	d50c      	bpl.n	8002134 <I2C_RequestMemoryRead+0xc0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800211a:	696b      	ldr	r3, [r5, #20]
 800211c:	07d8      	lsls	r0, r3, #31
 800211e:	d4c1      	bmi.n	80020a4 <I2C_RequestMemoryRead+0x30>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002120:	f7ff fd88 	bl	8001c34 <HAL_GetTick>
 8002124:	eba0 000a 	sub.w	r0, r0, sl
 8002128:	4287      	cmp	r7, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800212a:	6835      	ldr	r5, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800212c:	d2f1      	bcs.n	8002112 <I2C_RequestMemoryRead+0x9e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800212e:	696b      	ldr	r3, [r5, #20]
 8002130:	07db      	lsls	r3, r3, #31
 8002132:	d4f2      	bmi.n	800211a <I2C_RequestMemoryRead+0xa6>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002134:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8002136:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002138:	6332      	str	r2, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800213a:	f886 303d 	strb.w	r3, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800213e:	f886 203e 	strb.w	r2, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002142:	6c33      	ldr	r3, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002144:	f886 203c 	strb.w	r2, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002148:	f043 0320 	orr.w	r3, r3, #32
 800214c:	6433      	str	r3, [r6, #64]	@ 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800214e:	682b      	ldr	r3, [r5, #0]
 8002150:	05dd      	lsls	r5, r3, #23
 8002152:	d502      	bpl.n	800215a <I2C_RequestMemoryRead+0xe6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002154:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002158:	6433      	str	r3, [r6, #64]	@ 0x40
    return HAL_TIMEOUT;
 800215a:	2003      	movs	r0, #3
 800215c:	e7d6      	b.n	800210c <I2C_RequestMemoryRead+0x98>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800215e:	f1b9 0f01 	cmp.w	r9, #1
 8002162:	d10b      	bne.n	800217c <I2C_RequestMemoryRead+0x108>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002164:	fa5f f388 	uxtb.w	r3, r8
 8002168:	1c7c      	adds	r4, r7, #1
 800216a:	6103      	str	r3, [r0, #16]
 800216c:	d154      	bne.n	8002218 <I2C_RequestMemoryRead+0x1a4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800216e:	6943      	ldr	r3, [r0, #20]
 8002170:	0619      	lsls	r1, r3, #24
 8002172:	d40f      	bmi.n	8002194 <I2C_RequestMemoryRead+0x120>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002174:	6943      	ldr	r3, [r0, #20]
 8002176:	055a      	lsls	r2, r3, #21
 8002178:	d5f9      	bpl.n	800216e <I2C_RequestMemoryRead+0xfa>
 800217a:	e7ae      	b.n	80020da <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800217c:	ea4f 2318 	mov.w	r3, r8, lsr #8
 8002180:	1c7a      	adds	r2, r7, #1
 8002182:	6103      	str	r3, [r0, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002184:	d15c      	bne.n	8002240 <I2C_RequestMemoryRead+0x1cc>
 8002186:	6943      	ldr	r3, [r0, #20]
 8002188:	061c      	lsls	r4, r3, #24
 800218a:	d4eb      	bmi.n	8002164 <I2C_RequestMemoryRead+0xf0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800218c:	6943      	ldr	r3, [r0, #20]
 800218e:	0559      	lsls	r1, r3, #21
 8002190:	d5f9      	bpl.n	8002186 <I2C_RequestMemoryRead+0x112>
 8002192:	e7a2      	b.n	80020da <I2C_RequestMemoryRead+0x66>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002194:	6803      	ldr	r3, [r0, #0]
 8002196:	1c7d      	adds	r5, r7, #1
 8002198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800219c:	6003      	str	r3, [r0, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 800219e:	d112      	bne.n	80021c6 <I2C_RequestMemoryRead+0x152>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021a0:	6943      	ldr	r3, [r0, #20]
 80021a2:	07da      	lsls	r2, r3, #31
 80021a4:	d5fc      	bpl.n	80021a0 <I2C_RequestMemoryRead+0x12c>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80021a6:	f04b 0301 	orr.w	r3, fp, #1
 80021aa:	6103      	str	r3, [r0, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021ac:	4652      	mov	r2, sl
 80021ae:	4639      	mov	r1, r7
 80021b0:	4630      	mov	r0, r6
 80021b2:	f7ff ff1b 	bl	8001fec <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 80021b6:	3800      	subs	r0, #0
 80021b8:	bf18      	it	ne
 80021ba:	2001      	movne	r0, #1
 80021bc:	e7a6      	b.n	800210c <I2C_RequestMemoryRead+0x98>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021be:	b917      	cbnz	r7, 80021c6 <I2C_RequestMemoryRead+0x152>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021c0:	6943      	ldr	r3, [r0, #20]
 80021c2:	07dc      	lsls	r4, r3, #31
 80021c4:	d550      	bpl.n	8002268 <I2C_RequestMemoryRead+0x1f4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021c6:	6943      	ldr	r3, [r0, #20]
 80021c8:	07db      	lsls	r3, r3, #31
 80021ca:	d4ec      	bmi.n	80021a6 <I2C_RequestMemoryRead+0x132>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021cc:	f7ff fd32 	bl	8001c34 <HAL_GetTick>
 80021d0:	eba0 030a 	sub.w	r3, r0, sl
 80021d4:	429f      	cmp	r7, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021d6:	6830      	ldr	r0, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d8:	d2f1      	bcs.n	80021be <I2C_RequestMemoryRead+0x14a>
 80021da:	e7f1      	b.n	80021c0 <I2C_RequestMemoryRead+0x14c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021dc:	6943      	ldr	r3, [r0, #20]
 80021de:	0619      	lsls	r1, r3, #24
 80021e0:	d4bd      	bmi.n	800215e <I2C_RequestMemoryRead+0xea>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021e2:	6943      	ldr	r3, [r0, #20]
 80021e4:	055a      	lsls	r2, r3, #21
 80021e6:	f53f af78 	bmi.w	80020da <I2C_RequestMemoryRead+0x66>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ea:	f7ff fd23 	bl	8001c34 <HAL_GetTick>
 80021ee:	eba0 030a 	sub.w	r3, r0, sl
 80021f2:	429f      	cmp	r7, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80021f4:	6830      	ldr	r0, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021f6:	d301      	bcc.n	80021fc <I2C_RequestMemoryRead+0x188>
 80021f8:	2f00      	cmp	r7, #0
 80021fa:	d1ef      	bne.n	80021dc <I2C_RequestMemoryRead+0x168>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80021fc:	6943      	ldr	r3, [r0, #20]
 80021fe:	061b      	lsls	r3, r3, #24
 8002200:	d4ec      	bmi.n	80021dc <I2C_RequestMemoryRead+0x168>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002202:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8002204:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002206:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002208:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800220c:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002210:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8002212:	4313      	orrs	r3, r2
 8002214:	6433      	str	r3, [r6, #64]	@ 0x40
          return HAL_ERROR;
 8002216:	e76e      	b.n	80020f6 <I2C_RequestMemoryRead+0x82>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002218:	6943      	ldr	r3, [r0, #20]
 800221a:	061b      	lsls	r3, r3, #24
 800221c:	d4ba      	bmi.n	8002194 <I2C_RequestMemoryRead+0x120>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800221e:	6943      	ldr	r3, [r0, #20]
 8002220:	055b      	lsls	r3, r3, #21
 8002222:	f53f af5a 	bmi.w	80020da <I2C_RequestMemoryRead+0x66>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002226:	f7ff fd05 	bl	8001c34 <HAL_GetTick>
 800222a:	eba0 030a 	sub.w	r3, r0, sl
 800222e:	429f      	cmp	r7, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002230:	6830      	ldr	r0, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002232:	d301      	bcc.n	8002238 <I2C_RequestMemoryRead+0x1c4>
 8002234:	2f00      	cmp	r7, #0
 8002236:	d1ef      	bne.n	8002218 <I2C_RequestMemoryRead+0x1a4>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002238:	6943      	ldr	r3, [r0, #20]
 800223a:	061d      	lsls	r5, r3, #24
 800223c:	d4ec      	bmi.n	8002218 <I2C_RequestMemoryRead+0x1a4>
 800223e:	e7e0      	b.n	8002202 <I2C_RequestMemoryRead+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002240:	6943      	ldr	r3, [r0, #20]
 8002242:	061a      	lsls	r2, r3, #24
 8002244:	d48e      	bmi.n	8002164 <I2C_RequestMemoryRead+0xf0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002246:	6943      	ldr	r3, [r0, #20]
 8002248:	055b      	lsls	r3, r3, #21
 800224a:	f53f af46 	bmi.w	80020da <I2C_RequestMemoryRead+0x66>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224e:	f7ff fcf1 	bl	8001c34 <HAL_GetTick>
 8002252:	eba0 030a 	sub.w	r3, r0, sl
 8002256:	429f      	cmp	r7, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002258:	6830      	ldr	r0, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800225a:	d301      	bcc.n	8002260 <I2C_RequestMemoryRead+0x1ec>
 800225c:	2f00      	cmp	r7, #0
 800225e:	d1ef      	bne.n	8002240 <I2C_RequestMemoryRead+0x1cc>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002260:	6943      	ldr	r3, [r0, #20]
 8002262:	061d      	lsls	r5, r3, #24
 8002264:	d4ec      	bmi.n	8002240 <I2C_RequestMemoryRead+0x1cc>
 8002266:	e7cc      	b.n	8002202 <I2C_RequestMemoryRead+0x18e>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002268:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 800226a:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 800226c:	6332      	str	r2, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800226e:	f886 303d 	strb.w	r3, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002272:	f886 203e 	strb.w	r2, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002276:	6c33      	ldr	r3, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002278:	f886 203c 	strb.w	r2, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800227c:	f043 0320 	orr.w	r3, r3, #32
 8002280:	6433      	str	r3, [r6, #64]	@ 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002282:	6803      	ldr	r3, [r0, #0]
 8002284:	05d9      	lsls	r1, r3, #23
 8002286:	f53f af65 	bmi.w	8002154 <I2C_RequestMemoryRead+0xe0>
 800228a:	e766      	b.n	800215a <I2C_RequestMemoryRead+0xe6>

0800228c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800228c:	2800      	cmp	r0, #0
 800228e:	f000 80b8 	beq.w	8002402 <HAL_I2C_Init+0x176>
{
 8002292:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002294:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002298:	4604      	mov	r4, r0
 800229a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 8098 	beq.w	80023d4 <HAL_I2C_Init+0x148>
  __HAL_I2C_DISABLE(hi2c);
 80022a4:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80022a6:	2224      	movs	r2, #36	@ 0x24
 80022a8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	f022 0201 	bic.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80022c2:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022c4:	f000 fd2c 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022c8:	6865      	ldr	r5, [r4, #4]
 80022ca:	4b4f      	ldr	r3, [pc, #316]	@ (8002408 <HAL_I2C_Init+0x17c>)
 80022cc:	429d      	cmp	r5, r3
 80022ce:	d84f      	bhi.n	8002370 <HAL_I2C_Init+0xe4>
 80022d0:	4b4e      	ldr	r3, [pc, #312]	@ (800240c <HAL_I2C_Init+0x180>)
 80022d2:	4298      	cmp	r0, r3
 80022d4:	d97c      	bls.n	80023d0 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 80022d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002410 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022d8:	006a      	lsls	r2, r5, #1
  freqrange = I2C_FREQRANGE(pclk1);
 80022da:	fba3 3500 	umull	r3, r5, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022de:	1e43      	subs	r3, r0, #1
 80022e0:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022e4:	6822      	ldr	r2, [r4, #0]
 80022e6:	6851      	ldr	r1, [r2, #4]
 80022e8:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80022ec:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 80022f0:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022f2:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 80022f4:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80022f8:	f10c 0c01 	add.w	ip, ip, #1
 80022fc:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8002300:	ea41 010c 	orr.w	r1, r1, ip
 8002304:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002306:	69d1      	ldr	r1, [r2, #28]
 8002308:	f640 70fc 	movw	r0, #4092	@ 0xffc
 800230c:	3301      	adds	r3, #1
 800230e:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8002312:	4203      	tst	r3, r0
 8002314:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002318:	d161      	bne.n	80023de <HAL_I2C_Init+0x152>
 800231a:	2304      	movs	r3, #4
 800231c:	430b      	orrs	r3, r1
 800231e:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002320:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002324:	6811      	ldr	r1, [r2, #0]
 8002326:	4303      	orrs	r3, r0
 8002328:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 800232c:	430b      	orrs	r3, r1
 800232e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002330:	6891      	ldr	r1, [r2, #8]
 8002332:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002336:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 800233a:	4303      	orrs	r3, r0
 800233c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002340:	430b      	orrs	r3, r1
 8002342:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002344:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002348:	68d1      	ldr	r1, [r2, #12]
 800234a:	4303      	orrs	r3, r0
 800234c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002350:	430b      	orrs	r3, r1
 8002352:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002354:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002356:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8002358:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 800235c:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 800235e:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002360:	6423      	str	r3, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002362:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002366:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002368:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  return HAL_OK;
 800236c:	4618      	mov	r0, r3
}
 800236e:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002370:	4b28      	ldr	r3, [pc, #160]	@ (8002414 <HAL_I2C_Init+0x188>)
 8002372:	4298      	cmp	r0, r3
 8002374:	d92c      	bls.n	80023d0 <HAL_I2C_Init+0x144>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002376:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002378:	4b25      	ldr	r3, [pc, #148]	@ (8002410 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800237a:	4e27      	ldr	r6, [pc, #156]	@ (8002418 <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 800237c:	fba3 3c00 	umull	r3, ip, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002380:	1e43      	subs	r3, r0, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002382:	6850      	ldr	r0, [r2, #4]
 8002384:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 8002388:	ea40 409c 	orr.w	r0, r0, ip, lsr #18
 800238c:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800238e:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002392:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002396:	fb00 f101 	mul.w	r1, r0, r1
 800239a:	fba6 6101 	umull	r6, r1, r6, r1
 800239e:	6a10      	ldr	r0, [r2, #32]
 80023a0:	0989      	lsrs	r1, r1, #6
 80023a2:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 80023a6:	3101      	adds	r1, #1
 80023a8:	4301      	orrs	r1, r0
 80023aa:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023ac:	69d1      	ldr	r1, [r2, #28]
 80023ae:	68a0      	ldr	r0, [r4, #8]
 80023b0:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 80023b4:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80023b8:	b9a0      	cbnz	r0, 80023e4 <HAL_I2C_Init+0x158>
 80023ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80023be:	fbb3 f3f5 	udiv	r3, r3, r5
 80023c2:	3301      	adds	r3, #1
 80023c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c8:	b1cb      	cbz	r3, 80023fe <HAL_I2C_Init+0x172>
 80023ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80023ce:	e7a5      	b.n	800231c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80023d0:	2001      	movs	r0, #1
}
 80023d2:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80023d4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80023d8:	f7ff fa4c 	bl	8001874 <HAL_I2C_MspInit>
 80023dc:	e762      	b.n	80022a4 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e2:	e79b      	b.n	800231c <HAL_I2C_Init+0x90>
 80023e4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80023e8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80023ec:	fbb3 f3f5 	udiv	r3, r3, r5
 80023f0:	3301      	adds	r3, #1
 80023f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f6:	b113      	cbz	r3, 80023fe <HAL_I2C_Init+0x172>
 80023f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80023fc:	e78e      	b.n	800231c <HAL_I2C_Init+0x90>
 80023fe:	2301      	movs	r3, #1
 8002400:	e78c      	b.n	800231c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002402:	2001      	movs	r0, #1
}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	000186a0 	.word	0x000186a0
 800240c:	001e847f 	.word	0x001e847f
 8002410:	431bde83 	.word	0x431bde83
 8002414:	003d08ff 	.word	0x003d08ff
 8002418:	10624dd3 	.word	0x10624dd3

0800241c <HAL_I2C_Mem_Read>:
{
 800241c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002420:	4604      	mov	r4, r0
 8002422:	b086      	sub	sp, #24
 8002424:	4699      	mov	r9, r3
 8002426:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 800242a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800242c:	460f      	mov	r7, r1
 800242e:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002430:	f7ff fc00 	bl	8001c34 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002434:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8002438:	2b20      	cmp	r3, #32
 800243a:	d004      	beq.n	8002446 <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 800243c:	2702      	movs	r7, #2
}
 800243e:	4638      	mov	r0, r7
 8002440:	b006      	add	sp, #24
 8002442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002446:	4606      	mov	r6, r0
 8002448:	6820      	ldr	r0, [r4, #0]
 800244a:	6983      	ldr	r3, [r0, #24]
 800244c:	079b      	lsls	r3, r3, #30
 800244e:	d517      	bpl.n	8002480 <HAL_I2C_Mem_Read+0x64>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002450:	f7ff fbf0 	bl	8001c34 <HAL_GetTick>
 8002454:	1b80      	subs	r0, r0, r6
 8002456:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002458:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800245a:	d9f6      	bls.n	800244a <HAL_I2C_Mem_Read+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800245c:	6983      	ldr	r3, [r0, #24]
 800245e:	43db      	mvns	r3, r3
 8002460:	f013 0302 	ands.w	r3, r3, #2
 8002464:	d1f1      	bne.n	800244a <HAL_I2C_Mem_Read+0x2e>
          hi2c->State             = HAL_I2C_STATE_READY;
 8002466:	2220      	movs	r2, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002468:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800246a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800246e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002472:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002474:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002478:	f042 0220 	orr.w	r2, r2, #32
 800247c:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_ERROR;
 800247e:	e7dd      	b.n	800243c <HAL_I2C_Mem_Read+0x20>
    __HAL_LOCK(hi2c);
 8002480:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002484:	2b01      	cmp	r3, #1
 8002486:	d0d9      	beq.n	800243c <HAL_I2C_Mem_Read+0x20>
 8002488:	2301      	movs	r3, #1
 800248a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800248e:	6803      	ldr	r3, [r0, #0]
 8002490:	07d9      	lsls	r1, r3, #31
 8002492:	d561      	bpl.n	8002558 <HAL_I2C_Mem_Read+0x13c>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002494:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002496:	6807      	ldr	r7, [r0, #0]
 8002498:	f427 6700 	bic.w	r7, r7, #2048	@ 0x800
 800249c:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 800249e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80024a0:	6260      	str	r0, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024a2:	2022      	movs	r0, #34	@ 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024a4:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024a8:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024ac:	2040      	movs	r0, #64	@ 0x40
 80024ae:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b2:	2000      	movs	r0, #0
 80024b4:	6420      	str	r0, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 80024b6:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ba:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 80024bc:	8520      	strh	r0, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024be:	488b      	ldr	r0, [pc, #556]	@ (80026ec <HAL_I2C_Mem_Read+0x2d0>)
 80024c0:	62e0      	str	r0, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024c2:	464b      	mov	r3, r9
 80024c4:	4642      	mov	r2, r8
 80024c6:	4620      	mov	r0, r4
 80024c8:	f7ff fdd4 	bl	8002074 <I2C_RequestMemoryRead>
 80024cc:	4607      	mov	r7, r0
 80024ce:	2800      	cmp	r0, #0
 80024d0:	d13d      	bne.n	800254e <HAL_I2C_Mem_Read+0x132>
    if (hi2c->XferSize == 0U)
 80024d2:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d4:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 80024d6:	2a00      	cmp	r2, #0
 80024d8:	d143      	bne.n	8002562 <HAL_I2C_Mem_Read+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024da:	9002      	str	r0, [sp, #8]
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	9202      	str	r2, [sp, #8]
 80024e0:	699a      	ldr	r2, [r3, #24]
 80024e2:	9202      	str	r2, [sp, #8]
 80024e4:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ec:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ee:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80024f0:	2220      	movs	r2, #32
 80024f2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80024f6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024fa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 80024fe:	e79e      	b.n	800243e <HAL_I2C_Mem_Read+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	0652      	lsls	r2, r2, #25
 8002504:	f100 80ca 	bmi.w	800269c <HAL_I2C_Mem_Read+0x280>
 8002508:	2d00      	cmp	r5, #0
 800250a:	f000 80c3 	beq.w	8002694 <HAL_I2C_Mem_Read+0x278>
 800250e:	e00d      	b.n	800252c <HAL_I2C_Mem_Read+0x110>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002510:	f7ff fb90 	bl	8001c34 <HAL_GetTick>
 8002514:	1b80      	subs	r0, r0, r6
 8002516:	4285      	cmp	r5, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002518:	6823      	ldr	r3, [r4, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251a:	d203      	bcs.n	8002524 <HAL_I2C_Mem_Read+0x108>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800251c:	695a      	ldr	r2, [r3, #20]
 800251e:	0651      	lsls	r1, r2, #25
 8002520:	f140 8081 	bpl.w	8002626 <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002524:	695a      	ldr	r2, [r3, #20]
 8002526:	0652      	lsls	r2, r2, #25
 8002528:	f100 80b8 	bmi.w	800269c <HAL_I2C_Mem_Read+0x280>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	06d0      	lsls	r0, r2, #27
 8002530:	d5ee      	bpl.n	8002510 <HAL_I2C_Mem_Read+0xf4>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002532:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002534:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8002538:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800253a:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800253c:	6322      	str	r2, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800253e:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002542:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002546:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002548:	6423      	str	r3, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 800254a:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 800254e:	2701      	movs	r7, #1
}
 8002550:	4638      	mov	r0, r7
 8002552:	b006      	add	sp, #24
 8002554:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_I2C_ENABLE(hi2c);
 8002558:	6803      	ldr	r3, [r0, #0]
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	6003      	str	r3, [r0, #0]
 8002560:	e798      	b.n	8002494 <HAL_I2C_Mem_Read+0x78>
    else if (hi2c->XferSize == 1U)
 8002562:	2a01      	cmp	r2, #1
 8002564:	f000 8118 	beq.w	8002798 <HAL_I2C_Mem_Read+0x37c>
    else if (hi2c->XferSize == 2U)
 8002568:	2a02      	cmp	r2, #2
 800256a:	d07b      	beq.n	8002664 <HAL_I2C_Mem_Read+0x248>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800256c:	9005      	str	r0, [sp, #20]
 800256e:	6959      	ldr	r1, [r3, #20]
 8002570:	9105      	str	r1, [sp, #20]
 8002572:	6999      	ldr	r1, [r3, #24]
 8002574:	9105      	str	r1, [sp, #20]
 8002576:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 8002578:	2a03      	cmp	r2, #3
 800257a:	d8c1      	bhi.n	8002500 <HAL_I2C_Mem_Read+0xe4>
        if (hi2c->XferSize == 1U)
 800257c:	2a01      	cmp	r2, #1
 800257e:	f000 80e0 	beq.w	8002742 <HAL_I2C_Mem_Read+0x326>
        else if (hi2c->XferSize == 2U)
 8002582:	2a02      	cmp	r2, #2
 8002584:	f000 80b4 	beq.w	80026f0 <HAL_I2C_Mem_Read+0x2d4>
 8002588:	1c68      	adds	r0, r5, #1
 800258a:	d13e      	bne.n	800260a <HAL_I2C_Mem_Read+0x1ee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	0751      	lsls	r1, r2, #29
 8002590:	d5fc      	bpl.n	800258c <HAL_I2C_Mem_Read+0x170>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002592:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002594:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002596:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800259a:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80025a0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 80025a2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80025a4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80025a6:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 80025a8:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 80025aa:	3101      	adds	r1, #1
          hi2c->XferCount--;
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	1c68      	adds	r0, r5, #1
          hi2c->XferSize--;
 80025b0:	8522      	strh	r2, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 80025b2:	6261      	str	r1, [r4, #36]	@ 0x24
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025b4:	6822      	ldr	r2, [r4, #0]
          hi2c->XferCount--;
 80025b6:	8563      	strh	r3, [r4, #42]	@ 0x2a
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80025b8:	d144      	bne.n	8002644 <HAL_I2C_Mem_Read+0x228>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025ba:	6953      	ldr	r3, [r2, #20]
 80025bc:	0758      	lsls	r0, r3, #29
 80025be:	d5fc      	bpl.n	80025ba <HAL_I2C_Mem_Read+0x19e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c0:	6813      	ldr	r3, [r2, #0]
 80025c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025c6:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c8:	6913      	ldr	r3, [r2, #16]
 80025ca:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80025cc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 80025ce:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 80025d0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d2:	6821      	ldr	r1, [r4, #0]
          hi2c->XferCount--;
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025da:	6909      	ldr	r1, [r1, #16]
          hi2c->XferSize--;
 80025dc:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 80025de:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 80025e2:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 80025e4:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e8:	7041      	strb	r1, [r0, #1]
          hi2c->XferSize--;
 80025ea:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80025ec:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 80025ee:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80025f0:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80025f2:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 80025f4:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80025f6:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 80025f8:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80025fa:	6261      	str	r1, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80025fc:	8522      	strh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80025fe:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002600:	2a00      	cmp	r2, #0
 8002602:	f43f af74 	beq.w	80024ee <HAL_I2C_Mem_Read+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002606:	6823      	ldr	r3, [r4, #0]
 8002608:	e7b6      	b.n	8002578 <HAL_I2C_Mem_Read+0x15c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800260a:	695a      	ldr	r2, [r3, #20]
 800260c:	0752      	lsls	r2, r2, #29
 800260e:	d4c0      	bmi.n	8002592 <HAL_I2C_Mem_Read+0x176>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002610:	f7ff fb10 	bl	8001c34 <HAL_GetTick>
 8002614:	1b80      	subs	r0, r0, r6
 8002616:	4285      	cmp	r5, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002618:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800261a:	d301      	bcc.n	8002620 <HAL_I2C_Mem_Read+0x204>
 800261c:	2d00      	cmp	r5, #0
 800261e:	d1f4      	bne.n	800260a <HAL_I2C_Mem_Read+0x1ee>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	0752      	lsls	r2, r2, #29
 8002624:	d4f1      	bmi.n	800260a <HAL_I2C_Mem_Read+0x1ee>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002626:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002628:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800262a:	6322      	str	r2, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800262c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002630:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002634:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002636:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800263a:	f043 0320 	orr.w	r3, r3, #32
 800263e:	6423      	str	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8002640:	2701      	movs	r7, #1
 8002642:	e785      	b.n	8002550 <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002644:	6953      	ldr	r3, [r2, #20]
 8002646:	075b      	lsls	r3, r3, #29
 8002648:	f100 80a4 	bmi.w	8002794 <HAL_I2C_Mem_Read+0x378>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800264c:	f7ff faf2 	bl	8001c34 <HAL_GetTick>
 8002650:	1b80      	subs	r0, r0, r6
 8002652:	4285      	cmp	r5, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002654:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002656:	d301      	bcc.n	800265c <HAL_I2C_Mem_Read+0x240>
 8002658:	2d00      	cmp	r5, #0
 800265a:	d1f3      	bne.n	8002644 <HAL_I2C_Mem_Read+0x228>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800265c:	6953      	ldr	r3, [r2, #20]
 800265e:	075b      	lsls	r3, r3, #29
 8002660:	d4f0      	bmi.n	8002644 <HAL_I2C_Mem_Read+0x228>
 8002662:	e7e0      	b.n	8002626 <HAL_I2C_Mem_Read+0x20a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002664:	6819      	ldr	r1, [r3, #0]
 8002666:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 800266a:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800266c:	6819      	ldr	r1, [r3, #0]
 800266e:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 8002672:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002674:	9004      	str	r0, [sp, #16]
 8002676:	6959      	ldr	r1, [r3, #20]
 8002678:	9104      	str	r1, [sp, #16]
 800267a:	6999      	ldr	r1, [r3, #24]
 800267c:	9104      	str	r1, [sp, #16]
 800267e:	9904      	ldr	r1, [sp, #16]
 8002680:	e77a      	b.n	8002578 <HAL_I2C_Mem_Read+0x15c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002682:	f7ff fad7 	bl	8001c34 <HAL_GetTick>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002686:	6823      	ldr	r3, [r4, #0]
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	0651      	lsls	r1, r2, #25
 800268c:	d5cb      	bpl.n	8002626 <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	0652      	lsls	r2, r2, #25
 8002692:	d403      	bmi.n	800269c <HAL_I2C_Mem_Read+0x280>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	06d0      	lsls	r0, r2, #27
 8002698:	d5f3      	bpl.n	8002682 <HAL_I2C_Mem_Read+0x266>
 800269a:	e74a      	b.n	8002532 <HAL_I2C_Mem_Read+0x116>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800269c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 80026a2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026a4:	6821      	ldr	r1, [r4, #0]
        hi2c->XferSize--;
 80026a6:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
        hi2c->pBuffPtr++;
 80026a8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026b0:	694b      	ldr	r3, [r1, #20]
        hi2c->XferSize--;
 80026b2:	3a01      	subs	r2, #1
 80026b4:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 80026b6:	f100 0c01 	add.w	ip, r0, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026ba:	075b      	lsls	r3, r3, #29
        hi2c->XferSize--;
 80026bc:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->pBuffPtr++;
 80026be:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80026c2:	d59d      	bpl.n	8002600 <HAL_I2C_Mem_Read+0x1e4>
          if (hi2c->XferSize == 3U)
 80026c4:	2a03      	cmp	r2, #3
 80026c6:	d103      	bne.n	80026d0 <HAL_I2C_Mem_Read+0x2b4>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c8:	680b      	ldr	r3, [r1, #0]
 80026ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80026ce:	600b      	str	r3, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d0:	690b      	ldr	r3, [r1, #16]
 80026d2:	7043      	strb	r3, [r0, #1]
          hi2c->pBuffPtr++;
 80026d4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80026d6:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 80026d8:	3301      	adds	r3, #1
 80026da:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferCount--;
 80026dc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 80026de:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80026e0:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 80026e2:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 80026e4:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 80026e6:	8522      	strh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80026e8:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80026ea:	e789      	b.n	8002600 <HAL_I2C_Mem_Read+0x1e4>
 80026ec:	ffff0000 	.word	0xffff0000
 80026f0:	1c6a      	adds	r2, r5, #1
 80026f2:	d117      	bne.n	8002724 <HAL_I2C_Mem_Read+0x308>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	0750      	lsls	r0, r2, #29
 80026f8:	d5fc      	bpl.n	80026f4 <HAL_I2C_Mem_Read+0x2d8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002700:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002706:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8002708:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 800270a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
          hi2c->XferCount--;
 800270c:	3b01      	subs	r3, #1
 800270e:	b29b      	uxth	r3, r3
 8002710:	8563      	strh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 8002712:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002714:	3b01      	subs	r3, #1
 8002716:	8523      	strh	r3, [r4, #40]	@ 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002718:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 800271a:	1c51      	adds	r1, r2, #1
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800271c:	691b      	ldr	r3, [r3, #16]
          hi2c->pBuffPtr++;
 800271e:	6261      	str	r1, [r4, #36]	@ 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002720:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002722:	e7d7      	b.n	80026d4 <HAL_I2C_Mem_Read+0x2b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002724:	695a      	ldr	r2, [r3, #20]
 8002726:	0751      	lsls	r1, r2, #29
 8002728:	d4e7      	bmi.n	80026fa <HAL_I2C_Mem_Read+0x2de>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800272a:	f7ff fa83 	bl	8001c34 <HAL_GetTick>
 800272e:	1b80      	subs	r0, r0, r6
 8002730:	4285      	cmp	r5, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002732:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002734:	d301      	bcc.n	800273a <HAL_I2C_Mem_Read+0x31e>
 8002736:	2d00      	cmp	r5, #0
 8002738:	d1f4      	bne.n	8002724 <HAL_I2C_Mem_Read+0x308>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800273a:	695a      	ldr	r2, [r3, #20]
 800273c:	0751      	lsls	r1, r2, #29
 800273e:	d4f1      	bmi.n	8002724 <HAL_I2C_Mem_Read+0x308>
 8002740:	e771      	b.n	8002626 <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	0650      	lsls	r0, r2, #25
 8002746:	d421      	bmi.n	800278c <HAL_I2C_Mem_Read+0x370>
 8002748:	b1e5      	cbz	r5, 8002784 <HAL_I2C_Mem_Read+0x368>
 800274a:	e00c      	b.n	8002766 <HAL_I2C_Mem_Read+0x34a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800274c:	f7ff fa72 	bl	8001c34 <HAL_GetTick>
 8002750:	1b80      	subs	r0, r0, r6
 8002752:	42a8      	cmp	r0, r5
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002754:	6823      	ldr	r3, [r4, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002756:	d903      	bls.n	8002760 <HAL_I2C_Mem_Read+0x344>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	0652      	lsls	r2, r2, #25
 800275c:	f57f af63 	bpl.w	8002626 <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002760:	695a      	ldr	r2, [r3, #20]
 8002762:	0650      	lsls	r0, r2, #25
 8002764:	d412      	bmi.n	800278c <HAL_I2C_Mem_Read+0x370>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002766:	695a      	ldr	r2, [r3, #20]
 8002768:	06d1      	lsls	r1, r2, #27
 800276a:	f53f aee2 	bmi.w	8002532 <HAL_I2C_Mem_Read+0x116>
 800276e:	e7ed      	b.n	800274c <HAL_I2C_Mem_Read+0x330>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002770:	f7ff fa60 	bl	8001c34 <HAL_GetTick>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002774:	6823      	ldr	r3, [r4, #0]
 8002776:	695a      	ldr	r2, [r3, #20]
 8002778:	0652      	lsls	r2, r2, #25
 800277a:	f57f af54 	bpl.w	8002626 <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800277e:	695a      	ldr	r2, [r3, #20]
 8002780:	0650      	lsls	r0, r2, #25
 8002782:	d403      	bmi.n	800278c <HAL_I2C_Mem_Read+0x370>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002784:	695a      	ldr	r2, [r3, #20]
 8002786:	06d1      	lsls	r1, r2, #27
 8002788:	d5f2      	bpl.n	8002770 <HAL_I2C_Mem_Read+0x354>
 800278a:	e6d2      	b.n	8002532 <HAL_I2C_Mem_Read+0x116>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002790:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002792:	e79f      	b.n	80026d4 <HAL_I2C_Mem_Read+0x2b8>
 8002794:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002796:	e713      	b.n	80025c0 <HAL_I2C_Mem_Read+0x1a4>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002798:	6819      	ldr	r1, [r3, #0]
 800279a:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 800279e:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027a0:	9003      	str	r0, [sp, #12]
 80027a2:	6959      	ldr	r1, [r3, #20]
 80027a4:	9103      	str	r1, [sp, #12]
 80027a6:	6999      	ldr	r1, [r3, #24]
 80027a8:	9103      	str	r1, [sp, #12]
 80027aa:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ac:	6819      	ldr	r1, [r3, #0]
 80027ae:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 80027b2:	6019      	str	r1, [r3, #0]
 80027b4:	e6e0      	b.n	8002578 <HAL_I2C_Mem_Read+0x15c>
 80027b6:	bf00      	nop

080027b8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027b8:	2800      	cmp	r0, #0
 80027ba:	f000 81d8 	beq.w	8002b6e <HAL_RCC_OscConfig+0x3b6>
{
 80027be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027c2:	6803      	ldr	r3, [r0, #0]
 80027c4:	07dd      	lsls	r5, r3, #31
{
 80027c6:	b082      	sub	sp, #8
 80027c8:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ca:	d52f      	bpl.n	800282c <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027cc:	499d      	ldr	r1, [pc, #628]	@ (8002a44 <HAL_RCC_OscConfig+0x28c>)
 80027ce:	688a      	ldr	r2, [r1, #8]
 80027d0:	f002 020c 	and.w	r2, r2, #12
 80027d4:	2a04      	cmp	r2, #4
 80027d6:	f000 80ec 	beq.w	80029b2 <HAL_RCC_OscConfig+0x1fa>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027da:	688a      	ldr	r2, [r1, #8]
 80027dc:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027e0:	2a08      	cmp	r2, #8
 80027e2:	f000 80e2 	beq.w	80029aa <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027e6:	6863      	ldr	r3, [r4, #4]
 80027e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027ec:	f000 80eb 	beq.w	80029c6 <HAL_RCC_OscConfig+0x20e>
 80027f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027f4:	f000 8173 	beq.w	8002ade <HAL_RCC_OscConfig+0x326>
 80027f8:	4d92      	ldr	r5, [pc, #584]	@ (8002a44 <HAL_RCC_OscConfig+0x28c>)
 80027fa:	682a      	ldr	r2, [r5, #0]
 80027fc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002800:	602a      	str	r2, [r5, #0]
 8002802:	682a      	ldr	r2, [r5, #0]
 8002804:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002808:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800280a:	2b00      	cmp	r3, #0
 800280c:	f040 80e0 	bne.w	80029d0 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7ff fa10 	bl	8001c34 <HAL_GetTick>
 8002814:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002816:	e005      	b.n	8002824 <HAL_RCC_OscConfig+0x6c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002818:	f7ff fa0c 	bl	8001c34 <HAL_GetTick>
 800281c:	1b80      	subs	r0, r0, r6
 800281e:	2864      	cmp	r0, #100	@ 0x64
 8002820:	f200 8100 	bhi.w	8002a24 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002824:	682b      	ldr	r3, [r5, #0]
 8002826:	039f      	lsls	r7, r3, #14
 8002828:	d4f6      	bmi.n	8002818 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800282a:	6823      	ldr	r3, [r4, #0]
 800282c:	079d      	lsls	r5, r3, #30
 800282e:	d528      	bpl.n	8002882 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002830:	4a84      	ldr	r2, [pc, #528]	@ (8002a44 <HAL_RCC_OscConfig+0x28c>)
 8002832:	6891      	ldr	r1, [r2, #8]
 8002834:	f011 0f0c 	tst.w	r1, #12
 8002838:	f000 809b 	beq.w	8002972 <HAL_RCC_OscConfig+0x1ba>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800283c:	6891      	ldr	r1, [r2, #8]
 800283e:	f001 010c 	and.w	r1, r1, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002842:	2908      	cmp	r1, #8
 8002844:	f000 8091 	beq.w	800296a <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002848:	68e3      	ldr	r3, [r4, #12]
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 810c 	beq.w	8002a68 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002850:	4b7d      	ldr	r3, [pc, #500]	@ (8002a48 <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002852:	4e7c      	ldr	r6, [pc, #496]	@ (8002a44 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8002854:	2201      	movs	r2, #1
 8002856:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002858:	f7ff f9ec 	bl	8001c34 <HAL_GetTick>
 800285c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800285e:	e005      	b.n	800286c <HAL_RCC_OscConfig+0xb4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002860:	f7ff f9e8 	bl	8001c34 <HAL_GetTick>
 8002864:	1b40      	subs	r0, r0, r5
 8002866:	2802      	cmp	r0, #2
 8002868:	f200 80dc 	bhi.w	8002a24 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286c:	6833      	ldr	r3, [r6, #0]
 800286e:	079f      	lsls	r7, r3, #30
 8002870:	d5f6      	bpl.n	8002860 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002872:	6833      	ldr	r3, [r6, #0]
 8002874:	6922      	ldr	r2, [r4, #16]
 8002876:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800287a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800287e:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002880:	6823      	ldr	r3, [r4, #0]
 8002882:	071a      	lsls	r2, r3, #28
 8002884:	d45c      	bmi.n	8002940 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002886:	075d      	lsls	r5, r3, #29
 8002888:	d53a      	bpl.n	8002900 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800288a:	4a6e      	ldr	r2, [pc, #440]	@ (8002a44 <HAL_RCC_OscConfig+0x28c>)
 800288c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800288e:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8002892:	f040 8088 	bne.w	80029a6 <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	9301      	str	r3, [sp, #4]
 8002898:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800289a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800289e:	6413      	str	r3, [r2, #64]	@ 0x40
 80028a0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80028a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028a6:	9301      	str	r3, [sp, #4]
 80028a8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80028aa:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ac:	4e67      	ldr	r6, [pc, #412]	@ (8002a4c <HAL_RCC_OscConfig+0x294>)
 80028ae:	6833      	ldr	r3, [r6, #0]
 80028b0:	05d8      	lsls	r0, r3, #23
 80028b2:	f140 80a7 	bpl.w	8002a04 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b6:	68a3      	ldr	r3, [r4, #8]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	f000 80b7 	beq.w	8002a2c <HAL_RCC_OscConfig+0x274>
 80028be:	2b05      	cmp	r3, #5
 80028c0:	f000 811d 	beq.w	8002afe <HAL_RCC_OscConfig+0x346>
 80028c4:	4e5f      	ldr	r6, [pc, #380]	@ (8002a44 <HAL_RCC_OscConfig+0x28c>)
 80028c6:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 80028c8:	f022 0201 	bic.w	r2, r2, #1
 80028cc:	6732      	str	r2, [r6, #112]	@ 0x70
 80028ce:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 80028d0:	f022 0204 	bic.w	r2, r2, #4
 80028d4:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f040 80ad 	bne.w	8002a36 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028dc:	f7ff f9aa 	bl	8001c34 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e0:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80028e4:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e6:	e005      	b.n	80028f4 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e8:	f7ff f9a4 	bl	8001c34 <HAL_GetTick>
 80028ec:	1bc0      	subs	r0, r0, r7
 80028ee:	4540      	cmp	r0, r8
 80028f0:	f200 8098 	bhi.w	8002a24 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f4:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80028f6:	079b      	lsls	r3, r3, #30
 80028f8:	d4f6      	bmi.n	80028e8 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028fa:	2d00      	cmp	r5, #0
 80028fc:	f040 80f9 	bne.w	8002af2 <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002900:	69a3      	ldr	r3, [r4, #24]
 8002902:	b1cb      	cbz	r3, 8002938 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002904:	4d4f      	ldr	r5, [pc, #316]	@ (8002a44 <HAL_RCC_OscConfig+0x28c>)
 8002906:	68aa      	ldr	r2, [r5, #8]
 8002908:	f002 020c 	and.w	r2, r2, #12
 800290c:	2a08      	cmp	r2, #8
 800290e:	f000 80bc 	beq.w	8002a8a <HAL_RCC_OscConfig+0x2d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002912:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002914:	4b4c      	ldr	r3, [pc, #304]	@ (8002a48 <HAL_RCC_OscConfig+0x290>)
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800291c:	f000 80f9 	beq.w	8002b12 <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002920:	f7ff f988 	bl	8001c34 <HAL_GetTick>
 8002924:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002926:	e004      	b.n	8002932 <HAL_RCC_OscConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002928:	f7ff f984 	bl	8001c34 <HAL_GetTick>
 800292c:	1b00      	subs	r0, r0, r4
 800292e:	2802      	cmp	r0, #2
 8002930:	d878      	bhi.n	8002a24 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002932:	682b      	ldr	r3, [r5, #0]
 8002934:	019b      	lsls	r3, r3, #6
 8002936:	d4f7      	bmi.n	8002928 <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002938:	2000      	movs	r0, #0
}
 800293a:	b002      	add	sp, #8
 800293c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002940:	6963      	ldr	r3, [r4, #20]
 8002942:	b1fb      	cbz	r3, 8002984 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 8002944:	4b40      	ldr	r3, [pc, #256]	@ (8002a48 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002946:	4e3f      	ldr	r6, [pc, #252]	@ (8002a44 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 8002948:	2201      	movs	r2, #1
 800294a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800294e:	f7ff f971 	bl	8001c34 <HAL_GetTick>
 8002952:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002954:	e004      	b.n	8002960 <HAL_RCC_OscConfig+0x1a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002956:	f7ff f96d 	bl	8001c34 <HAL_GetTick>
 800295a:	1b40      	subs	r0, r0, r5
 800295c:	2802      	cmp	r0, #2
 800295e:	d861      	bhi.n	8002a24 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002960:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8002962:	079b      	lsls	r3, r3, #30
 8002964:	d5f7      	bpl.n	8002956 <HAL_RCC_OscConfig+0x19e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002966:	6823      	ldr	r3, [r4, #0]
 8002968:	e78d      	b.n	8002886 <HAL_RCC_OscConfig+0xce>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296a:	6852      	ldr	r2, [r2, #4]
 800296c:	0251      	lsls	r1, r2, #9
 800296e:	f53f af6b 	bmi.w	8002848 <HAL_RCC_OscConfig+0x90>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002972:	4a34      	ldr	r2, [pc, #208]	@ (8002a44 <HAL_RCC_OscConfig+0x28c>)
 8002974:	6812      	ldr	r2, [r2, #0]
 8002976:	0792      	lsls	r2, r2, #30
 8002978:	d538      	bpl.n	80029ec <HAL_RCC_OscConfig+0x234>
 800297a:	68e2      	ldr	r2, [r4, #12]
 800297c:	2a01      	cmp	r2, #1
 800297e:	d035      	beq.n	80029ec <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 8002980:	2001      	movs	r0, #1
 8002982:	e7da      	b.n	800293a <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 8002984:	4a30      	ldr	r2, [pc, #192]	@ (8002a48 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002986:	4e2f      	ldr	r6, [pc, #188]	@ (8002a44 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 8002988:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800298c:	f7ff f952 	bl	8001c34 <HAL_GetTick>
 8002990:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002992:	e004      	b.n	800299e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002994:	f7ff f94e 	bl	8001c34 <HAL_GetTick>
 8002998:	1b40      	subs	r0, r0, r5
 800299a:	2802      	cmp	r0, #2
 800299c:	d842      	bhi.n	8002a24 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800299e:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80029a0:	079f      	lsls	r7, r3, #30
 80029a2:	d4f7      	bmi.n	8002994 <HAL_RCC_OscConfig+0x1dc>
 80029a4:	e7df      	b.n	8002966 <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 80029a6:	2500      	movs	r5, #0
 80029a8:	e780      	b.n	80028ac <HAL_RCC_OscConfig+0xf4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029aa:	684a      	ldr	r2, [r1, #4]
 80029ac:	0251      	lsls	r1, r2, #9
 80029ae:	f57f af1a 	bpl.w	80027e6 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b2:	4a24      	ldr	r2, [pc, #144]	@ (8002a44 <HAL_RCC_OscConfig+0x28c>)
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	0392      	lsls	r2, r2, #14
 80029b8:	f57f af38 	bpl.w	800282c <HAL_RCC_OscConfig+0x74>
 80029bc:	6862      	ldr	r2, [r4, #4]
 80029be:	2a00      	cmp	r2, #0
 80029c0:	f47f af34 	bne.w	800282c <HAL_RCC_OscConfig+0x74>
 80029c4:	e7dc      	b.n	8002980 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a44 <HAL_RCC_OscConfig+0x28c>)
 80029c8:	6813      	ldr	r3, [r2, #0]
 80029ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029ce:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80029d0:	f7ff f930 	bl	8001c34 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d4:	4e1b      	ldr	r6, [pc, #108]	@ (8002a44 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80029d6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d8:	e004      	b.n	80029e4 <HAL_RCC_OscConfig+0x22c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029da:	f7ff f92b 	bl	8001c34 <HAL_GetTick>
 80029de:	1b40      	subs	r0, r0, r5
 80029e0:	2864      	cmp	r0, #100	@ 0x64
 80029e2:	d81f      	bhi.n	8002a24 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e4:	6833      	ldr	r3, [r6, #0]
 80029e6:	039b      	lsls	r3, r3, #14
 80029e8:	d5f7      	bpl.n	80029da <HAL_RCC_OscConfig+0x222>
 80029ea:	e71e      	b.n	800282a <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029ec:	4915      	ldr	r1, [pc, #84]	@ (8002a44 <HAL_RCC_OscConfig+0x28c>)
 80029ee:	6920      	ldr	r0, [r4, #16]
 80029f0:	680a      	ldr	r2, [r1, #0]
 80029f2:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 80029f6:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80029fa:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029fc:	071a      	lsls	r2, r3, #28
 80029fe:	f57f af42 	bpl.w	8002886 <HAL_RCC_OscConfig+0xce>
 8002a02:	e79d      	b.n	8002940 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a04:	6833      	ldr	r3, [r6, #0]
 8002a06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a0a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002a0c:	f7ff f912 	bl	8001c34 <HAL_GetTick>
 8002a10:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a12:	6833      	ldr	r3, [r6, #0]
 8002a14:	05d9      	lsls	r1, r3, #23
 8002a16:	f53f af4e 	bmi.w	80028b6 <HAL_RCC_OscConfig+0xfe>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1a:	f7ff f90b 	bl	8001c34 <HAL_GetTick>
 8002a1e:	1bc0      	subs	r0, r0, r7
 8002a20:	2802      	cmp	r0, #2
 8002a22:	d9f6      	bls.n	8002a12 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8002a24:	2003      	movs	r0, #3
}
 8002a26:	b002      	add	sp, #8
 8002a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a2c:	4a05      	ldr	r2, [pc, #20]	@ (8002a44 <HAL_RCC_OscConfig+0x28c>)
 8002a2e:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002a36:	f7ff f8fd 	bl	8001c34 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3a:	4f02      	ldr	r7, [pc, #8]	@ (8002a44 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002a3c:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a3e:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a42:	e00a      	b.n	8002a5a <HAL_RCC_OscConfig+0x2a2>
 8002a44:	40023800 	.word	0x40023800
 8002a48:	42470000 	.word	0x42470000
 8002a4c:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a50:	f7ff f8f0 	bl	8001c34 <HAL_GetTick>
 8002a54:	1b80      	subs	r0, r0, r6
 8002a56:	4540      	cmp	r0, r8
 8002a58:	d8e4      	bhi.n	8002a24 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a5c:	079a      	lsls	r2, r3, #30
 8002a5e:	d5f7      	bpl.n	8002a50 <HAL_RCC_OscConfig+0x298>
    if (pwrclkchanged == SET)
 8002a60:	2d00      	cmp	r5, #0
 8002a62:	f43f af4d 	beq.w	8002900 <HAL_RCC_OscConfig+0x148>
 8002a66:	e044      	b.n	8002af2 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 8002a68:	4a42      	ldr	r2, [pc, #264]	@ (8002b74 <HAL_RCC_OscConfig+0x3bc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a6a:	4e43      	ldr	r6, [pc, #268]	@ (8002b78 <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 8002a6c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002a6e:	f7ff f8e1 	bl	8001c34 <HAL_GetTick>
 8002a72:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a74:	e004      	b.n	8002a80 <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a76:	f7ff f8dd 	bl	8001c34 <HAL_GetTick>
 8002a7a:	1b40      	subs	r0, r0, r5
 8002a7c:	2802      	cmp	r0, #2
 8002a7e:	d8d1      	bhi.n	8002a24 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a80:	6833      	ldr	r3, [r6, #0]
 8002a82:	0799      	lsls	r1, r3, #30
 8002a84:	d4f7      	bmi.n	8002a76 <HAL_RCC_OscConfig+0x2be>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a86:	6823      	ldr	r3, [r4, #0]
 8002a88:	e6fb      	b.n	8002882 <HAL_RCC_OscConfig+0xca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	f43f af78 	beq.w	8002980 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8002a90:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a92:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a94:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a98:	4291      	cmp	r1, r2
 8002a9a:	f47f af71 	bne.w	8002980 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9e:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa0:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa4:	4291      	cmp	r1, r2
 8002aa6:	f47f af6b 	bne.w	8002980 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aaa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002aac:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8002ab0:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002ab6:	f47f af63 	bne.w	8002980 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aba:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8002abc:	0852      	lsrs	r2, r2, #1
 8002abe:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8002ac2:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac4:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002ac8:	f47f af5a 	bne.w	8002980 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002acc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002ace:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad2:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002ad6:	bf14      	ite	ne
 8002ad8:	2001      	movne	r0, #1
 8002ada:	2000      	moveq	r0, #0
 8002adc:	e72d      	b.n	800293a <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ade:	4b26      	ldr	r3, [pc, #152]	@ (8002b78 <HAL_RCC_OscConfig+0x3c0>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002aee:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002af0:	e76e      	b.n	80029d0 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af2:	4a21      	ldr	r2, [pc, #132]	@ (8002b78 <HAL_RCC_OscConfig+0x3c0>)
 8002af4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002afa:	6413      	str	r3, [r2, #64]	@ 0x40
 8002afc:	e700      	b.n	8002900 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002afe:	4b1e      	ldr	r3, [pc, #120]	@ (8002b78 <HAL_RCC_OscConfig+0x3c0>)
 8002b00:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b02:	f042 0204 	orr.w	r2, r2, #4
 8002b06:	671a      	str	r2, [r3, #112]	@ 0x70
 8002b08:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b10:	e791      	b.n	8002a36 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8002b12:	f7ff f88f 	bl	8001c34 <HAL_GetTick>
 8002b16:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b18:	e005      	b.n	8002b26 <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1a:	f7ff f88b 	bl	8001c34 <HAL_GetTick>
 8002b1e:	1b80      	subs	r0, r0, r6
 8002b20:	2802      	cmp	r0, #2
 8002b22:	f63f af7f 	bhi.w	8002a24 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b26:	682b      	ldr	r3, [r5, #0]
 8002b28:	0199      	lsls	r1, r3, #6
 8002b2a:	d4f6      	bmi.n	8002b1a <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b2c:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8002b30:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002b32:	430b      	orrs	r3, r1
 8002b34:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002b38:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	@ 0x28
 8002b3c:	0852      	lsrs	r2, r2, #1
 8002b3e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002b42:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8002b44:	490b      	ldr	r1, [pc, #44]	@ (8002b74 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8002b4a:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b4c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002b4e:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002b50:	f7ff f870 	bl	8001c34 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b54:	4d08      	ldr	r5, [pc, #32]	@ (8002b78 <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 8002b56:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b58:	e005      	b.n	8002b66 <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b5a:	f7ff f86b 	bl	8001c34 <HAL_GetTick>
 8002b5e:	1b00      	subs	r0, r0, r4
 8002b60:	2802      	cmp	r0, #2
 8002b62:	f63f af5f 	bhi.w	8002a24 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b66:	682b      	ldr	r3, [r5, #0]
 8002b68:	019a      	lsls	r2, r3, #6
 8002b6a:	d5f6      	bpl.n	8002b5a <HAL_RCC_OscConfig+0x3a2>
 8002b6c:	e6e4      	b.n	8002938 <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 8002b6e:	2001      	movs	r0, #1
}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	42470000 	.word	0x42470000
 8002b78:	40023800 	.word	0x40023800

08002b7c <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b7c:	4916      	ldr	r1, [pc, #88]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8002b7e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b80:	688b      	ldr	r3, [r1, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d01b      	beq.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x46>
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d117      	bne.n	8002bbe <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b8e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b90:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b92:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b94:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b98:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b9c:	d113      	bne.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b9e:	480f      	ldr	r0, [pc, #60]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0x60>)
 8002ba0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002ba4:	fba1 0100 	umull	r0, r1, r1, r0
 8002ba8:	f7fe f876 	bl	8000c98 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002bac:	4b0a      	ldr	r3, [pc, #40]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8002bb8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002bbc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8002bbe:	4807      	ldr	r0, [pc, #28]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0x60>)
}
 8002bc0:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bc2:	4807      	ldr	r0, [pc, #28]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8002bc4:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc6:	4806      	ldr	r0, [pc, #24]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0x64>)
 8002bc8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002bcc:	2300      	movs	r3, #0
 8002bce:	fba1 0100 	umull	r0, r1, r1, r0
 8002bd2:	f7fe f861 	bl	8000c98 <__aeabi_uldivmod>
 8002bd6:	e7e9      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x30>
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	00f42400 	.word	0x00f42400
 8002be0:	017d7840 	.word	0x017d7840

08002be4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002be4:	2800      	cmp	r0, #0
 8002be6:	f000 8087 	beq.w	8002cf8 <HAL_RCC_ClockConfig+0x114>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bea:	4a48      	ldr	r2, [pc, #288]	@ (8002d0c <HAL_RCC_ClockConfig+0x128>)
 8002bec:	6813      	ldr	r3, [r2, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	428b      	cmp	r3, r1
{
 8002bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bf8:	460d      	mov	r5, r1
 8002bfa:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bfc:	d209      	bcs.n	8002c12 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfe:	b2cb      	uxtb	r3, r1
 8002c00:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	6813      	ldr	r3, [r2, #0]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	428b      	cmp	r3, r1
 8002c0a:	d002      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002c0c:	2001      	movs	r0, #1
}
 8002c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c12:	6823      	ldr	r3, [r4, #0]
 8002c14:	0798      	lsls	r0, r3, #30
 8002c16:	d514      	bpl.n	8002c42 <HAL_RCC_ClockConfig+0x5e>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	0759      	lsls	r1, r3, #29
 8002c1a:	d504      	bpl.n	8002c26 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c1c:	493c      	ldr	r1, [pc, #240]	@ (8002d10 <HAL_RCC_ClockConfig+0x12c>)
 8002c1e:	688a      	ldr	r2, [r1, #8]
 8002c20:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8002c24:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c26:	071a      	lsls	r2, r3, #28
 8002c28:	d504      	bpl.n	8002c34 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c2a:	4939      	ldr	r1, [pc, #228]	@ (8002d10 <HAL_RCC_ClockConfig+0x12c>)
 8002c2c:	688a      	ldr	r2, [r1, #8]
 8002c2e:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8002c32:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c34:	4936      	ldr	r1, [pc, #216]	@ (8002d10 <HAL_RCC_ClockConfig+0x12c>)
 8002c36:	68a0      	ldr	r0, [r4, #8]
 8002c38:	688a      	ldr	r2, [r1, #8]
 8002c3a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002c3e:	4302      	orrs	r2, r0
 8002c40:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c42:	07df      	lsls	r7, r3, #31
 8002c44:	d521      	bpl.n	8002c8a <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c46:	6862      	ldr	r2, [r4, #4]
 8002c48:	2a01      	cmp	r2, #1
 8002c4a:	d057      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x118>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c4c:	1e93      	subs	r3, r2, #2
 8002c4e:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c50:	4b2f      	ldr	r3, [pc, #188]	@ (8002d10 <HAL_RCC_ClockConfig+0x12c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c54:	d94d      	bls.n	8002cf2 <HAL_RCC_ClockConfig+0x10e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c56:	0799      	lsls	r1, r3, #30
 8002c58:	d5d8      	bpl.n	8002c0c <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c5a:	4e2d      	ldr	r6, [pc, #180]	@ (8002d10 <HAL_RCC_ClockConfig+0x12c>)
 8002c5c:	68b3      	ldr	r3, [r6, #8]
 8002c5e:	f023 0303 	bic.w	r3, r3, #3
 8002c62:	4313      	orrs	r3, r2
 8002c64:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002c66:	f7fe ffe5 	bl	8001c34 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c6a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8002c6e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c70:	e004      	b.n	8002c7c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c72:	f7fe ffdf 	bl	8001c34 <HAL_GetTick>
 8002c76:	1bc0      	subs	r0, r0, r7
 8002c78:	4540      	cmp	r0, r8
 8002c7a:	d844      	bhi.n	8002d06 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c7c:	68b3      	ldr	r3, [r6, #8]
 8002c7e:	6862      	ldr	r2, [r4, #4]
 8002c80:	f003 030c 	and.w	r3, r3, #12
 8002c84:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002c88:	d1f3      	bne.n	8002c72 <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c8a:	4a20      	ldr	r2, [pc, #128]	@ (8002d0c <HAL_RCC_ClockConfig+0x128>)
 8002c8c:	6813      	ldr	r3, [r2, #0]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	42ab      	cmp	r3, r5
 8002c94:	d906      	bls.n	8002ca4 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c96:	b2eb      	uxtb	r3, r5
 8002c98:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9a:	6813      	ldr	r3, [r2, #0]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	42ab      	cmp	r3, r5
 8002ca2:	d1b3      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x28>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	075a      	lsls	r2, r3, #29
 8002ca8:	d506      	bpl.n	8002cb8 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002caa:	4919      	ldr	r1, [pc, #100]	@ (8002d10 <HAL_RCC_ClockConfig+0x12c>)
 8002cac:	68e0      	ldr	r0, [r4, #12]
 8002cae:	688a      	ldr	r2, [r1, #8]
 8002cb0:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8002cb4:	4302      	orrs	r2, r0
 8002cb6:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb8:	071b      	lsls	r3, r3, #28
 8002cba:	d507      	bpl.n	8002ccc <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cbc:	4a14      	ldr	r2, [pc, #80]	@ (8002d10 <HAL_RCC_ClockConfig+0x12c>)
 8002cbe:	6921      	ldr	r1, [r4, #16]
 8002cc0:	6893      	ldr	r3, [r2, #8]
 8002cc2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002cc6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002cca:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ccc:	f7ff ff56 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 8002cd0:	4a0f      	ldr	r2, [pc, #60]	@ (8002d10 <HAL_RCC_ClockConfig+0x12c>)
 8002cd2:	4c10      	ldr	r4, [pc, #64]	@ (8002d14 <HAL_RCC_ClockConfig+0x130>)
 8002cd4:	6892      	ldr	r2, [r2, #8]
 8002cd6:	4910      	ldr	r1, [pc, #64]	@ (8002d18 <HAL_RCC_ClockConfig+0x134>)
 8002cd8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002cdc:	4603      	mov	r3, r0
 8002cde:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick(uwTickPrio);
 8002ce0:	480e      	ldr	r0, [pc, #56]	@ (8002d1c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ce2:	40d3      	lsrs	r3, r2
  HAL_InitTick(uwTickPrio);
 8002ce4:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ce6:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8002ce8:	f7fe ff5a 	bl	8001ba0 <HAL_InitTick>
  return HAL_OK;
 8002cec:	2000      	movs	r0, #0
}
 8002cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf2:	0198      	lsls	r0, r3, #6
 8002cf4:	d4b1      	bmi.n	8002c5a <HAL_RCC_ClockConfig+0x76>
 8002cf6:	e789      	b.n	8002c0c <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8002cf8:	2001      	movs	r0, #1
}
 8002cfa:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfc:	4b04      	ldr	r3, [pc, #16]	@ (8002d10 <HAL_RCC_ClockConfig+0x12c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	039e      	lsls	r6, r3, #14
 8002d02:	d4aa      	bmi.n	8002c5a <HAL_RCC_ClockConfig+0x76>
 8002d04:	e782      	b.n	8002c0c <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8002d06:	2003      	movs	r0, #3
 8002d08:	e781      	b.n	8002c0e <HAL_RCC_ClockConfig+0x2a>
 8002d0a:	bf00      	nop
 8002d0c:	40023c00 	.word	0x40023c00
 8002d10:	40023800 	.word	0x40023800
 8002d14:	0800d450 	.word	0x0800d450
 8002d18:	2000001c 	.word	0x2000001c
 8002d1c:	20000024 	.word	0x20000024

08002d20 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d20:	4b04      	ldr	r3, [pc, #16]	@ (8002d34 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8002d22:	4905      	ldr	r1, [pc, #20]	@ (8002d38 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	4a05      	ldr	r2, [pc, #20]	@ (8002d3c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002d28:	6808      	ldr	r0, [r1, #0]
 8002d2a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002d2e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002d30:	40d8      	lsrs	r0, r3
 8002d32:	4770      	bx	lr
 8002d34:	40023800 	.word	0x40023800
 8002d38:	2000001c 	.word	0x2000001c
 8002d3c:	0800d448 	.word	0x0800d448

08002d40 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d40:	4b04      	ldr	r3, [pc, #16]	@ (8002d54 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8002d42:	4905      	ldr	r1, [pc, #20]	@ (8002d58 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	4a05      	ldr	r2, [pc, #20]	@ (8002d5c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002d48:	6808      	ldr	r0, [r1, #0]
 8002d4a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002d4e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002d50:	40d8      	lsrs	r0, r3
 8002d52:	4770      	bx	lr
 8002d54:	40023800 	.word	0x40023800
 8002d58:	2000001c 	.word	0x2000001c
 8002d5c:	0800d448 	.word	0x0800d448

08002d60 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d60:	2800      	cmp	r0, #0
 8002d62:	d071      	beq.n	8002e48 <HAL_TIM_Base_Init+0xe8>
{
 8002d64:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d66:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d053      	beq.n	8002e1c <HAL_TIM_Base_Init+0xbc>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d74:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d76:	4e35      	ldr	r6, [pc, #212]	@ (8002e4c <HAL_TIM_Base_Init+0xec>)

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d78:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d7a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d7c:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7e:	2302      	movs	r3, #2
 8002d80:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d84:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8002d86:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d88:	d04d      	beq.n	8002e26 <HAL_TIM_Base_Init+0xc6>
 8002d8a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002d8e:	d017      	beq.n	8002dc0 <HAL_TIM_Base_Init+0x60>
 8002d90:	f5a6 467c 	sub.w	r6, r6, #64512	@ 0xfc00
 8002d94:	42b2      	cmp	r2, r6
 8002d96:	d013      	beq.n	8002dc0 <HAL_TIM_Base_Init+0x60>
 8002d98:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002d9c:	42b2      	cmp	r2, r6
 8002d9e:	d00f      	beq.n	8002dc0 <HAL_TIM_Base_Init+0x60>
 8002da0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002da4:	42b2      	cmp	r2, r6
 8002da6:	d00b      	beq.n	8002dc0 <HAL_TIM_Base_Init+0x60>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002da8:	4e29      	ldr	r6, [pc, #164]	@ (8002e50 <HAL_TIM_Base_Init+0xf0>)
 8002daa:	42b2      	cmp	r2, r6
 8002dac:	d00c      	beq.n	8002dc8 <HAL_TIM_Base_Init+0x68>
 8002dae:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002db2:	42b2      	cmp	r2, r6
 8002db4:	d008      	beq.n	8002dc8 <HAL_TIM_Base_Init+0x68>
 8002db6:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002dba:	42b2      	cmp	r2, r6
 8002dbc:	d108      	bne.n	8002dd0 <HAL_TIM_Base_Init+0x70>
 8002dbe:	e003      	b.n	8002dc8 <HAL_TIM_Base_Init+0x68>
    tmpcr1 |= Structure->CounterMode;
 8002dc0:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002dc6:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dc8:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dce:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002dd4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002dd6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dd8:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002dda:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002de0:	6913      	ldr	r3, [r2, #16]
 8002de2:	07db      	lsls	r3, r3, #31
 8002de4:	d503      	bpl.n	8002dee <HAL_TIM_Base_Init+0x8e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002de6:	6913      	ldr	r3, [r2, #16]
 8002de8:	f023 0301 	bic.w	r3, r3, #1
 8002dec:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dee:	2301      	movs	r3, #1
 8002df0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002df8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002dfc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002e00:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002e08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e0c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002e10:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002e14:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002e18:	2000      	movs	r0, #0
}
 8002e1a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8002e1c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002e20:	f7fe fd62 	bl	80018e8 <HAL_TIM_Base_MspInit>
 8002e24:	e7a6      	b.n	8002d74 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8002e26:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e2c:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e2e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e34:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e3a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002e3c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e3e:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002e40:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002e42:	6963      	ldr	r3, [r4, #20]
 8002e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e46:	e7c9      	b.n	8002ddc <HAL_TIM_Base_Init+0x7c>
    return HAL_ERROR;
 8002e48:	2001      	movs	r0, #1
}
 8002e4a:	4770      	bx	lr
 8002e4c:	40010000 	.word	0x40010000
 8002e50:	40014000 	.word	0x40014000

08002e54 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002e54:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d127      	bne.n	8002eac <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e5c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e5e:	4914      	ldr	r1, [pc, #80]	@ (8002eb0 <HAL_TIM_Base_Start_IT+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002e60:	2202      	movs	r2, #2
 8002e62:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e66:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e68:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e6a:	f042 0201 	orr.w	r2, r2, #1
 8002e6e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e70:	d011      	beq.n	8002e96 <HAL_TIM_Base_Start_IT+0x42>
 8002e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e76:	d00e      	beq.n	8002e96 <HAL_TIM_Base_Start_IT+0x42>
 8002e78:	4a0e      	ldr	r2, [pc, #56]	@ (8002eb4 <HAL_TIM_Base_Start_IT+0x60>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d00b      	beq.n	8002e96 <HAL_TIM_Base_Start_IT+0x42>
 8002e7e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d007      	beq.n	8002e96 <HAL_TIM_Base_Start_IT+0x42>
 8002e86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d003      	beq.n	8002e96 <HAL_TIM_Base_Start_IT+0x42>
 8002e8e:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d104      	bne.n	8002ea0 <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e9c:	2a06      	cmp	r2, #6
 8002e9e:	d003      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	4770      	bx	lr
    return HAL_ERROR;
 8002eac:	2001      	movs	r0, #1
}
 8002eae:	4770      	bx	lr
 8002eb0:	40010000 	.word	0x40010000
 8002eb4:	40000400 	.word	0x40000400

08002eb8 <HAL_TIM_OC_MspInit>:
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop

08002ebc <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8002ebc:	2800      	cmp	r0, #0
 8002ebe:	d071      	beq.n	8002fa4 <HAL_TIM_OC_Init+0xe8>
{
 8002ec0:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002ec2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d053      	beq.n	8002f78 <HAL_TIM_OC_Init+0xbc>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002ed0:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ed2:	4e35      	ldr	r6, [pc, #212]	@ (8002fa8 <HAL_TIM_OC_Init+0xec>)
  TIMx->PSC = Structure->Prescaler;
 8002ed4:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ed6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ed8:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8002eda:	2302      	movs	r3, #2
 8002edc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ee0:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8002ee2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ee4:	d04d      	beq.n	8002f82 <HAL_TIM_OC_Init+0xc6>
 8002ee6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002eea:	d017      	beq.n	8002f1c <HAL_TIM_OC_Init+0x60>
 8002eec:	f5a6 467c 	sub.w	r6, r6, #64512	@ 0xfc00
 8002ef0:	42b2      	cmp	r2, r6
 8002ef2:	d013      	beq.n	8002f1c <HAL_TIM_OC_Init+0x60>
 8002ef4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002ef8:	42b2      	cmp	r2, r6
 8002efa:	d00f      	beq.n	8002f1c <HAL_TIM_OC_Init+0x60>
 8002efc:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002f00:	42b2      	cmp	r2, r6
 8002f02:	d00b      	beq.n	8002f1c <HAL_TIM_OC_Init+0x60>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f04:	4e29      	ldr	r6, [pc, #164]	@ (8002fac <HAL_TIM_OC_Init+0xf0>)
 8002f06:	42b2      	cmp	r2, r6
 8002f08:	d00c      	beq.n	8002f24 <HAL_TIM_OC_Init+0x68>
 8002f0a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002f0e:	42b2      	cmp	r2, r6
 8002f10:	d008      	beq.n	8002f24 <HAL_TIM_OC_Init+0x68>
 8002f12:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002f16:	42b2      	cmp	r2, r6
 8002f18:	d108      	bne.n	8002f2c <HAL_TIM_OC_Init+0x70>
 8002f1a:	e003      	b.n	8002f24 <HAL_TIM_OC_Init+0x68>
    tmpcr1 |= Structure->CounterMode;
 8002f1c:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002f22:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f24:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f2a:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f30:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002f32:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f34:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002f36:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f3c:	6913      	ldr	r3, [r2, #16]
 8002f3e:	07db      	lsls	r3, r3, #31
 8002f40:	d503      	bpl.n	8002f4a <HAL_TIM_OC_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f42:	6913      	ldr	r3, [r2, #16]
 8002f44:	f023 0301 	bic.w	r3, r3, #1
 8002f48:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f50:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002f54:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002f58:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002f5c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002f64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f68:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002f6c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002f70:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002f74:	2000      	movs	r0, #0
}
 8002f76:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8002f78:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 8002f7c:	f7ff ff9c 	bl	8002eb8 <HAL_TIM_OC_MspInit>
 8002f80:	e7a6      	b.n	8002ed0 <HAL_TIM_OC_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8002f82:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002f88:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f8a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f90:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f96:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002f98:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f9a:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002f9c:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002f9e:	6963      	ldr	r3, [r4, #20]
 8002fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fa2:	e7c9      	b.n	8002f38 <HAL_TIM_OC_Init+0x7c>
    return HAL_ERROR;
 8002fa4:	2001      	movs	r0, #1
}
 8002fa6:	4770      	bx	lr
 8002fa8:	40010000 	.word	0x40010000
 8002fac:	40014000 	.word	0x40014000

08002fb0 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fb0:	bb91      	cbnz	r1, 8003018 <HAL_TIM_OC_Start+0x68>
 8002fb2:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d136      	bne.n	8003028 <HAL_TIM_OC_Start+0x78>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fba:	2302      	movs	r3, #2
 8002fbc:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fc0:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fc2:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002fc6:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002fc8:	2201      	movs	r2, #1
 8002fca:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8002fcc:	ea20 0002 	bic.w	r0, r0, r2
 8002fd0:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fd2:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fd4:	4922      	ldr	r1, [pc, #136]	@ (8003060 <HAL_TIM_OC_Start+0xb0>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fd6:	4302      	orrs	r2, r0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fd8:	428b      	cmp	r3, r1
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002fda:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fdc:	d02a      	beq.n	8003034 <HAL_TIM_OC_Start+0x84>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fe2:	d00e      	beq.n	8003002 <HAL_TIM_OC_Start+0x52>
 8002fe4:	4a1f      	ldr	r2, [pc, #124]	@ (8003064 <HAL_TIM_OC_Start+0xb4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d00b      	beq.n	8003002 <HAL_TIM_OC_Start+0x52>
 8002fea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d007      	beq.n	8003002 <HAL_TIM_OC_Start+0x52>
 8002ff2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d003      	beq.n	8003002 <HAL_TIM_OC_Start+0x52>
 8002ffa:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d104      	bne.n	800300c <HAL_TIM_OC_Start+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003008:	2a06      	cmp	r2, #6
 800300a:	d003      	beq.n	8003014 <HAL_TIM_OC_Start+0x64>
      __HAL_TIM_ENABLE(htim);
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003014:	2000      	movs	r0, #0
 8003016:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003018:	2904      	cmp	r1, #4
 800301a:	d010      	beq.n	800303e <HAL_TIM_OC_Start+0x8e>
 800301c:	2908      	cmp	r1, #8
 800301e:	d016      	beq.n	800304e <HAL_TIM_OC_Start+0x9e>
 8003020:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003024:	2b01      	cmp	r3, #1
 8003026:	d001      	beq.n	800302c <HAL_TIM_OC_Start+0x7c>
    return HAL_ERROR;
 8003028:	2001      	movs	r0, #1
}
 800302a:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800302c:	2302      	movs	r3, #2
 800302e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 8003032:	e7c5      	b.n	8002fc0 <HAL_TIM_OC_Start+0x10>
    __HAL_TIM_MOE_ENABLE(htim);
 8003034:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003036:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800303a:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800303c:	e7e1      	b.n	8003002 <HAL_TIM_OC_Start+0x52>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800303e:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 8003042:	2b01      	cmp	r3, #1
 8003044:	d1f0      	bne.n	8003028 <HAL_TIM_OC_Start+0x78>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003046:	2302      	movs	r3, #2
 8003048:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 800304c:	e7b8      	b.n	8002fc0 <HAL_TIM_OC_Start+0x10>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800304e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8003052:	2b01      	cmp	r3, #1
 8003054:	d1e8      	bne.n	8003028 <HAL_TIM_OC_Start+0x78>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003056:	2302      	movs	r3, #2
 8003058:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 800305c:	e7b0      	b.n	8002fc0 <HAL_TIM_OC_Start+0x10>
 800305e:	bf00      	nop
 8003060:	40010000 	.word	0x40010000
 8003064:	40000400 	.word	0x40000400

08003068 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8003068:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800306c:	2b01      	cmp	r3, #1
 800306e:	f000 8081 	beq.w	8003174 <HAL_TIM_OC_ConfigChannel+0x10c>
{
 8003072:	b470      	push	{r4, r5, r6}
 8003074:	4684      	mov	ip, r0
  switch (Channel)
 8003076:	2a0c      	cmp	r2, #12
 8003078:	d808      	bhi.n	800308c <HAL_TIM_OC_ConfigChannel+0x24>
 800307a:	e8df f002 	tbb	[pc, r2]
 800307e:	072d      	.short	0x072d
 8003080:	07460707 	.word	0x07460707
 8003084:	07610707 	.word	0x07610707
 8003088:	0707      	.short	0x0707
 800308a:	0d          	.byte	0x0d
 800308b:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 800308c:	2300      	movs	r3, #0
 800308e:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  switch (Channel)
 8003092:	2001      	movs	r0, #1
}
 8003094:	bc70      	pop	{r4, r5, r6}
 8003096:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003098:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800309a:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 800309c:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800309e:	6a18      	ldr	r0, [r3, #32]
 80030a0:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 80030a4:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80030a6:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80030a8:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030aa:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030ae:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030b2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80030b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030b8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030bc:	4d47      	ldr	r5, [pc, #284]	@ (80031dc <HAL_TIM_OC_ConfigChannel+0x174>)
 80030be:	42ab      	cmp	r3, r5
 80030c0:	d076      	beq.n	80031b0 <HAL_TIM_OC_ConfigChannel+0x148>
  TIMx->CCR4 = OC_Config->Pulse;
 80030c2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80030c4:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80030c6:	61d8      	str	r0, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80030c8:	6419      	str	r1, [r3, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 80030ca:	621a      	str	r2, [r3, #32]
  __HAL_UNLOCK(htim);
 80030cc:	2300      	movs	r3, #0
 80030ce:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80030d2:	2000      	movs	r0, #0
}
 80030d4:	bc70      	pop	{r4, r5, r6}
 80030d6:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030d8:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80030da:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 80030dc:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030de:	6a18      	ldr	r0, [r3, #32]
 80030e0:	f020 0001 	bic.w	r0, r0, #1
 80030e4:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80030e6:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80030e8:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030ea:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80030ee:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 80030f0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80030f2:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 80030f6:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030f8:	4d38      	ldr	r5, [pc, #224]	@ (80031dc <HAL_TIM_OC_ConfigChannel+0x174>)
 80030fa:	42ab      	cmp	r3, r5
 80030fc:	d03c      	beq.n	8003178 <HAL_TIM_OC_ConfigChannel+0x110>
  TIMx->CCR1 = OC_Config->Pulse;
 80030fe:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003100:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003102:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003104:	6359      	str	r1, [r3, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8003106:	621a      	str	r2, [r3, #32]
}
 8003108:	e7e0      	b.n	80030cc <HAL_TIM_OC_ConfigChannel+0x64>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800310a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800310c:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 800310e:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003110:	6a18      	ldr	r0, [r3, #32]
 8003112:	f020 0010 	bic.w	r0, r0, #16
 8003116:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003118:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800311a:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800311c:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003120:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003124:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003126:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800312a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800312e:	4d2b      	ldr	r5, [pc, #172]	@ (80031dc <HAL_TIM_OC_ConfigChannel+0x174>)
 8003130:	42ab      	cmp	r3, r5
 8003132:	d02e      	beq.n	8003192 <HAL_TIM_OC_ConfigChannel+0x12a>
  TIMx->CCR2 = OC_Config->Pulse;
 8003134:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003136:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003138:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800313a:	6399      	str	r1, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800313c:	621a      	str	r2, [r3, #32]
}
 800313e:	e7c5      	b.n	80030cc <HAL_TIM_OC_ConfigChannel+0x64>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003140:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8003142:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8003144:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003146:	6a18      	ldr	r0, [r3, #32]
 8003148:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 800314c:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800314e:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003150:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003152:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003156:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003158:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800315a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800315e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003162:	4d1e      	ldr	r5, [pc, #120]	@ (80031dc <HAL_TIM_OC_ConfigChannel+0x174>)
 8003164:	42ab      	cmp	r3, r5
 8003166:	d029      	beq.n	80031bc <HAL_TIM_OC_ConfigChannel+0x154>
  TIMx->CCR3 = OC_Config->Pulse;
 8003168:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800316a:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800316c:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800316e:	63d9      	str	r1, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8003170:	621a      	str	r2, [r3, #32]
}
 8003172:	e7ab      	b.n	80030cc <HAL_TIM_OC_ConfigChannel+0x64>
  __HAL_LOCK(htim);
 8003174:	2002      	movs	r0, #2
}
 8003176:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8003178:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800317a:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 800317e:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8003180:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003184:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003188:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800318a:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800318e:	432c      	orrs	r4, r5
 8003190:	e7b5      	b.n	80030fe <HAL_TIM_OC_ConfigChannel+0x96>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003192:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003194:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003198:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800319c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031a0:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031a4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80031a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031aa:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80031ae:	e7c1      	b.n	8003134 <HAL_TIM_OC_ConfigChannel+0xcc>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031b0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031b2:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031b6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80031ba:	e782      	b.n	80030c2 <HAL_TIM_OC_ConfigChannel+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031bc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80031be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80031c2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031c6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031ca:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031ce:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80031d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031d4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80031d8:	e7c6      	b.n	8003168 <HAL_TIM_OC_ConfigChannel+0x100>
 80031da:	bf00      	nop
 80031dc:	40010000 	.word	0x40010000

080031e0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80031e0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d071      	beq.n	80032cc <HAL_TIM_ConfigClockSource+0xec>
 80031e8:	4602      	mov	r2, r0
{
 80031ea:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80031ec:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 80031ee:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80031f0:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 80031f4:	2001      	movs	r0, #1
 80031f6:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80031fa:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031fc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003200:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003204:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8003206:	680b      	ldr	r3, [r1, #0]
 8003208:	2b60      	cmp	r3, #96	@ 0x60
 800320a:	d061      	beq.n	80032d0 <HAL_TIM_ConfigClockSource+0xf0>
 800320c:	d824      	bhi.n	8003258 <HAL_TIM_ConfigClockSource+0x78>
 800320e:	2b40      	cmp	r3, #64	@ 0x40
 8003210:	d077      	beq.n	8003302 <HAL_TIM_ConfigClockSource+0x122>
 8003212:	d94a      	bls.n	80032aa <HAL_TIM_ConfigClockSource+0xca>
 8003214:	2b50      	cmp	r3, #80	@ 0x50
 8003216:	d117      	bne.n	8003248 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 8003218:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800321a:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 800321c:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800321e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003222:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003224:	6a23      	ldr	r3, [r4, #32]
 8003226:	f023 0301 	bic.w	r3, r3, #1
 800322a:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800322c:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800322e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003232:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003236:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003238:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800323a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800323c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003240:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8003244:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003246:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003248:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800324a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800324c:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003250:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8003254:	bc30      	pop	{r4, r5}
 8003256:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800325c:	d0f3      	beq.n	8003246 <HAL_TIM_ConfigClockSource+0x66>
 800325e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003262:	d110      	bne.n	8003286 <HAL_TIM_ConfigClockSource+0xa6>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003264:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003268:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800326a:	432b      	orrs	r3, r5
 800326c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800326e:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003272:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003276:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003278:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800327a:	68a3      	ldr	r3, [r4, #8]
 800327c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003280:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003282:	2000      	movs	r0, #0
 8003284:	e7e0      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8003286:	2b70      	cmp	r3, #112	@ 0x70
 8003288:	d1de      	bne.n	8003248 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800328a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800328e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003290:	432b      	orrs	r3, r5
 8003292:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003294:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003298:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800329c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800329e:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 80032a0:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032a2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 80032a6:	60a3      	str	r3, [r4, #8]
      break;
 80032a8:	e7cd      	b.n	8003246 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 80032aa:	2b20      	cmp	r3, #32
 80032ac:	d002      	beq.n	80032b4 <HAL_TIM_ConfigClockSource+0xd4>
 80032ae:	d909      	bls.n	80032c4 <HAL_TIM_ConfigClockSource+0xe4>
 80032b0:	2b30      	cmp	r3, #48	@ 0x30
 80032b2:	d1c9      	bne.n	8003248 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 80032b4:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80032b6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032ba:	430b      	orrs	r3, r1
 80032bc:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80032c0:	60a3      	str	r3, [r4, #8]
}
 80032c2:	e7c0      	b.n	8003246 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 80032c4:	f033 0110 	bics.w	r1, r3, #16
 80032c8:	d1be      	bne.n	8003248 <HAL_TIM_ConfigClockSource+0x68>
 80032ca:	e7f3      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 80032cc:	2002      	movs	r0, #2
}
 80032ce:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 80032d0:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 80032d2:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80032d4:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032d6:	6a21      	ldr	r1, [r4, #32]
 80032d8:	f021 0110 	bic.w	r1, r1, #16
 80032dc:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032de:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032e4:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 80032e8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032ec:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80032f0:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 80032f2:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80032f4:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80032f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032fa:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 80032fe:	60a3      	str	r3, [r4, #8]
}
 8003300:	e7a1      	b.n	8003246 <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 8003302:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003304:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8003306:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003308:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800330c:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800330e:	6a23      	ldr	r3, [r4, #32]
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003316:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003318:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800331c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003320:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003322:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003324:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800332a:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 800332e:	60a3      	str	r3, [r4, #8]
}
 8003330:	e789      	b.n	8003246 <HAL_TIM_ConfigClockSource+0x66>
 8003332:	bf00      	nop

08003334 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop

08003338 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop

0800333c <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop

08003340 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop

08003344 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8003344:	6803      	ldr	r3, [r0, #0]
{
 8003346:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8003348:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800334a:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800334c:	07a9      	lsls	r1, r5, #30
{
 800334e:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003350:	d501      	bpl.n	8003356 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003352:	07b2      	lsls	r2, r6, #30
 8003354:	d451      	bmi.n	80033fa <HAL_TIM_IRQHandler+0xb6>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003356:	0769      	lsls	r1, r5, #29
 8003358:	d501      	bpl.n	800335e <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800335a:	0772      	lsls	r2, r6, #29
 800335c:	d43a      	bmi.n	80033d4 <HAL_TIM_IRQHandler+0x90>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800335e:	072b      	lsls	r3, r5, #28
 8003360:	d501      	bpl.n	8003366 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003362:	0730      	lsls	r0, r6, #28
 8003364:	d424      	bmi.n	80033b0 <HAL_TIM_IRQHandler+0x6c>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003366:	06ea      	lsls	r2, r5, #27
 8003368:	d501      	bpl.n	800336e <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800336a:	06f3      	lsls	r3, r6, #27
 800336c:	d410      	bmi.n	8003390 <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800336e:	07e8      	lsls	r0, r5, #31
 8003370:	d501      	bpl.n	8003376 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003372:	07f1      	lsls	r1, r6, #31
 8003374:	d457      	bmi.n	8003426 <HAL_TIM_IRQHandler+0xe2>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003376:	062a      	lsls	r2, r5, #24
 8003378:	d501      	bpl.n	800337e <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800337a:	0633      	lsls	r3, r6, #24
 800337c:	d45b      	bmi.n	8003436 <HAL_TIM_IRQHandler+0xf2>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800337e:	0668      	lsls	r0, r5, #25
 8003380:	d501      	bpl.n	8003386 <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003382:	0671      	lsls	r1, r6, #25
 8003384:	d45f      	bmi.n	8003446 <HAL_TIM_IRQHandler+0x102>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003386:	06aa      	lsls	r2, r5, #26
 8003388:	d501      	bpl.n	800338e <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800338a:	06b3      	lsls	r3, r6, #26
 800338c:	d442      	bmi.n	8003414 <HAL_TIM_IRQHandler+0xd0>
}
 800338e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003390:	6823      	ldr	r3, [r4, #0]
 8003392:	f06f 0210 	mvn.w	r2, #16
 8003396:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003398:	2208      	movs	r2, #8
 800339a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80033a2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033a4:	d063      	beq.n	800346e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80033a6:	f7ff ffc7 	bl	8003338 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033aa:	2300      	movs	r3, #0
 80033ac:	7723      	strb	r3, [r4, #28]
 80033ae:	e7de      	b.n	800336e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80033b0:	6823      	ldr	r3, [r4, #0]
 80033b2:	f06f 0208 	mvn.w	r2, #8
 80033b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033b8:	2204      	movs	r2, #4
 80033ba:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80033c0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033c2:	d151      	bne.n	8003468 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033c4:	f7ff ffb6 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c8:	4620      	mov	r0, r4
 80033ca:	f7ff ffb7 	bl	800333c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ce:	2300      	movs	r3, #0
 80033d0:	7723      	strb	r3, [r4, #28]
 80033d2:	e7c8      	b.n	8003366 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80033d4:	6823      	ldr	r3, [r4, #0]
 80033d6:	f06f 0204 	mvn.w	r2, #4
 80033da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033dc:	2202      	movs	r2, #2
 80033de:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80033e6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033e8:	d13b      	bne.n	8003462 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ea:	f7ff ffa3 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ee:	4620      	mov	r0, r4
 80033f0:	f7ff ffa4 	bl	800333c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033f4:	2300      	movs	r3, #0
 80033f6:	7723      	strb	r3, [r4, #28]
 80033f8:	e7b1      	b.n	800335e <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033fa:	f06f 0202 	mvn.w	r2, #2
 80033fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003400:	2201      	movs	r2, #1
 8003402:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	079b      	lsls	r3, r3, #30
 8003408:	d025      	beq.n	8003456 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800340a:	f7ff ff95 	bl	8003338 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340e:	2300      	movs	r3, #0
 8003410:	7723      	strb	r3, [r4, #28]
 8003412:	e7a0      	b.n	8003356 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003414:	6823      	ldr	r3, [r4, #0]
 8003416:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800341a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800341c:	611a      	str	r2, [r3, #16]
}
 800341e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003422:	f000 b88d 	b.w	8003540 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003426:	6823      	ldr	r3, [r4, #0]
 8003428:	f06f 0201 	mvn.w	r2, #1
 800342c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800342e:	4620      	mov	r0, r4
 8003430:	f7fe f9ea 	bl	8001808 <HAL_TIM_PeriodElapsedCallback>
 8003434:	e79f      	b.n	8003376 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003436:	6823      	ldr	r3, [r4, #0]
 8003438:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800343c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800343e:	4620      	mov	r0, r4
 8003440:	f000 f880 	bl	8003544 <HAL_TIMEx_BreakCallback>
 8003444:	e79b      	b.n	800337e <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003446:	6823      	ldr	r3, [r4, #0]
 8003448:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800344c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800344e:	4620      	mov	r0, r4
 8003450:	f7ff ff76 	bl	8003340 <HAL_TIM_TriggerCallback>
 8003454:	e797      	b.n	8003386 <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003456:	f7ff ff6d 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800345a:	4620      	mov	r0, r4
 800345c:	f7ff ff6e 	bl	800333c <HAL_TIM_PWM_PulseFinishedCallback>
 8003460:	e7d5      	b.n	800340e <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8003462:	f7ff ff69 	bl	8003338 <HAL_TIM_IC_CaptureCallback>
 8003466:	e7c5      	b.n	80033f4 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_IC_CaptureCallback(htim);
 8003468:	f7ff ff66 	bl	8003338 <HAL_TIM_IC_CaptureCallback>
 800346c:	e7af      	b.n	80033ce <HAL_TIM_IRQHandler+0x8a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	f7ff ff61 	bl	8003334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003472:	4620      	mov	r0, r4
 8003474:	f7ff ff62 	bl	800333c <HAL_TIM_PWM_PulseFinishedCallback>
 8003478:	e797      	b.n	80033aa <HAL_TIM_IRQHandler+0x66>
 800347a:	bf00      	nop

0800347c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800347c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003480:	2a01      	cmp	r2, #1
 8003482:	d02f      	beq.n	80034e4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003484:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003486:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003488:	2002      	movs	r0, #2
{
 800348a:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003490:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003492:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003494:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003496:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800349a:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800349c:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800349e:	4812      	ldr	r0, [pc, #72]	@ (80034e8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80034a0:	4282      	cmp	r2, r0
 80034a2:	d012      	beq.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80034a4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80034a8:	d00f      	beq.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80034aa:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 80034ae:	4282      	cmp	r2, r0
 80034b0:	d00b      	beq.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80034b2:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80034b6:	4282      	cmp	r2, r0
 80034b8:	d007      	beq.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80034ba:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80034be:	4282      	cmp	r2, r0
 80034c0:	d003      	beq.n	80034ca <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80034c2:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 80034c6:	4282      	cmp	r2, r0
 80034c8:	d104      	bne.n	80034d4 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034ca:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034cc:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034d0:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034d2:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80034d4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80034dc:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80034e0:	bc30      	pop	{r4, r5}
 80034e2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80034e4:	2002      	movs	r0, #2
}
 80034e6:	4770      	bx	lr
 80034e8:	40010000 	.word	0x40010000

080034ec <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ec:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d023      	beq.n	800353c <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 80034f4:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80034f6:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80034fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034fe:	4602      	mov	r2, r0
 8003500:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003502:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003504:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003506:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800350a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800350c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003510:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003512:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003514:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003518:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800351a:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800351c:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800351e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003522:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003524:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003528:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 800352a:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800352c:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 800352e:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8003530:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8003534:	4608      	mov	r0, r1
}
 8003536:	f85d 4b04 	ldr.w	r4, [sp], #4
 800353a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800353c:	2002      	movs	r0, #2
}
 800353e:	4770      	bx	lr

08003540 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop

08003544 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop

08003548 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003548:	2800      	cmp	r0, #0
 800354a:	f000 8087 	beq.w	800365c <HAL_UART_Init+0x114>
{
 800354e:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003550:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003554:	4604      	mov	r4, r0
 8003556:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800355a:	2b00      	cmp	r3, #0
 800355c:	d079      	beq.n	8003652 <HAL_UART_Init+0x10a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800355e:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003560:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8003562:	2224      	movs	r2, #36	@ 0x24
 8003564:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8003568:	68da      	ldr	r2, [r3, #12]
 800356a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800356e:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003570:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003572:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003574:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8003578:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800357a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800357c:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800357e:	4302      	orrs	r2, r0
 8003580:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003582:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003584:	4302      	orrs	r2, r0
 8003586:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003588:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 800358c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003590:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003592:	430a      	orrs	r2, r1
 8003594:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003596:	695a      	ldr	r2, [r3, #20]
 8003598:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800359a:	4931      	ldr	r1, [pc, #196]	@ (8003660 <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800359c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80035a0:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035a2:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035a4:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035a6:	d036      	beq.n	8003616 <HAL_UART_Init+0xce>
 80035a8:	4a2e      	ldr	r2, [pc, #184]	@ (8003664 <HAL_UART_Init+0x11c>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d033      	beq.n	8003616 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035ae:	f7ff fbb7 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035b2:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035b4:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035b6:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035ba:	e9d4 5300 	ldrd	r5, r3, [r4]
 80035be:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035c2:	d02b      	beq.n	800361c <HAL_UART_Init+0xd4>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035c4:	009a      	lsls	r2, r3, #2
 80035c6:	0f9b      	lsrs	r3, r3, #30
 80035c8:	f7fd fb66 	bl	8000c98 <__aeabi_uldivmod>
 80035cc:	4a26      	ldr	r2, [pc, #152]	@ (8003668 <HAL_UART_Init+0x120>)
 80035ce:	fba2 1300 	umull	r1, r3, r2, r0
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	2164      	movs	r1, #100	@ 0x64
 80035d6:	fb01 0013 	mls	r0, r1, r3, r0
 80035da:	0100      	lsls	r0, r0, #4
 80035dc:	3032      	adds	r0, #50	@ 0x32
 80035de:	fba2 2000 	umull	r2, r0, r2, r0
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 80035e8:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ea:	692a      	ldr	r2, [r5, #16]
 80035ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035f0:	612a      	str	r2, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035f2:	696a      	ldr	r2, [r5, #20]
 80035f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035f8:	616a      	str	r2, [r5, #20]
  __HAL_UART_ENABLE(huart);
 80035fa:	68ea      	ldr	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fc:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80035fe:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8003600:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003604:	60ea      	str	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003606:	6463      	str	r3, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003608:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800360c:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  return HAL_OK;
 8003610:	4618      	mov	r0, r3
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003612:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8003614:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8003616:	f7ff fb93 	bl	8002d40 <HAL_RCC_GetPCLK2Freq>
 800361a:	e7ca      	b.n	80035b2 <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800361c:	18da      	adds	r2, r3, r3
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	415b      	adcs	r3, r3
 8003624:	f7fd fb38 	bl	8000c98 <__aeabi_uldivmod>
 8003628:	4a0f      	ldr	r2, [pc, #60]	@ (8003668 <HAL_UART_Init+0x120>)
 800362a:	fba2 3100 	umull	r3, r1, r2, r0
 800362e:	0949      	lsrs	r1, r1, #5
 8003630:	2364      	movs	r3, #100	@ 0x64
 8003632:	fb03 0311 	mls	r3, r3, r1, r0
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	3332      	adds	r3, #50	@ 0x32
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003648:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800364c:	4413      	add	r3, r2
 800364e:	60ab      	str	r3, [r5, #8]
 8003650:	e7cb      	b.n	80035ea <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 8003652:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8003656:	f7fe f9af 	bl	80019b8 <HAL_UART_MspInit>
 800365a:	e780      	b.n	800355e <HAL_UART_Init+0x16>
    return HAL_ERROR;
 800365c:	2001      	movs	r0, #1
}
 800365e:	4770      	bx	lr
 8003660:	40011000 	.word	0x40011000
 8003664:	40011400 	.word	0x40011400
 8003668:	51eb851f 	.word	0x51eb851f

0800366c <HAL_UART_Transmit>:
{
 800366c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003670:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003672:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8003676:	2820      	cmp	r0, #32
 8003678:	d14b      	bne.n	8003712 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 800367a:	4688      	mov	r8, r1
 800367c:	b109      	cbz	r1, 8003682 <HAL_UART_Transmit+0x16>
 800367e:	4617      	mov	r7, r2
 8003680:	b912      	cbnz	r2, 8003688 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 8003682:	2001      	movs	r0, #1
}
 8003684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003688:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368a:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800368e:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003690:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003694:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8003698:	f7fe facc 	bl	8001c34 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800369c:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 800369e:	84a7      	strh	r7, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 80036a4:	84e7      	strh	r7, [r4, #38]	@ 0x26
    tickstart = HAL_GetTick();
 80036a6:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036a8:	d042      	beq.n	8003730 <HAL_UART_Transmit+0xc4>
    while (huart->TxXferCount > 0U)
 80036aa:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ac:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 80036ae:	b292      	uxth	r2, r2
 80036b0:	b192      	cbz	r2, 80036d8 <HAL_UART_Transmit+0x6c>
 80036b2:	1c68      	adds	r0, r5, #1
 80036b4:	d122      	bne.n	80036fc <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	0612      	lsls	r2, r2, #24
 80036ba:	d5fc      	bpl.n	80036b6 <HAL_UART_Transmit+0x4a>
      if (pdata8bits == NULL)
 80036bc:	f1b8 0f00 	cmp.w	r8, #0
 80036c0:	d022      	beq.n	8003708 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80036c2:	f818 2b01 	ldrb.w	r2, [r8], #1
 80036c6:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 80036c8:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80036ca:	3a01      	subs	r2, #1
 80036cc:	b292      	uxth	r2, r2
 80036ce:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80036d0:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80036d2:	b292      	uxth	r2, r2
 80036d4:	2a00      	cmp	r2, #0
 80036d6:	d1ec      	bne.n	80036b2 <HAL_UART_Transmit+0x46>
 80036d8:	1c69      	adds	r1, r5, #1
 80036da:	d125      	bne.n	8003728 <HAL_UART_Transmit+0xbc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	0652      	lsls	r2, r2, #25
 80036e0:	d5fc      	bpl.n	80036dc <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 80036e2:	2320      	movs	r3, #32
 80036e4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80036e8:	2000      	movs	r0, #0
 80036ea:	e7cb      	b.n	8003684 <HAL_UART_Transmit+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ec:	f7fe faa2 	bl	8001c34 <HAL_GetTick>
 80036f0:	1b80      	subs	r0, r0, r6
 80036f2:	4285      	cmp	r5, r0
 80036f4:	d322      	bcc.n	800373c <HAL_UART_Transmit+0xd0>
 80036f6:	b30d      	cbz	r5, 800373c <HAL_UART_Transmit+0xd0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036f8:	6823      	ldr	r3, [r4, #0]
 80036fa:	68da      	ldr	r2, [r3, #12]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	0617      	lsls	r7, r2, #24
 8003700:	d5f4      	bpl.n	80036ec <HAL_UART_Transmit+0x80>
      if (pdata8bits == NULL)
 8003702:	f1b8 0f00 	cmp.w	r8, #0
 8003706:	d1dc      	bne.n	80036c2 <HAL_UART_Transmit+0x56>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003708:	f839 2b02 	ldrh.w	r2, [r9], #2
 800370c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003710:	e7d9      	b.n	80036c6 <HAL_UART_Transmit+0x5a>
    return HAL_BUSY;
 8003712:	2002      	movs	r0, #2
}
 8003714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003718:	f7fe fa8c 	bl	8001c34 <HAL_GetTick>
 800371c:	1b83      	subs	r3, r0, r6
 800371e:	429d      	cmp	r5, r3
 8003720:	d30c      	bcc.n	800373c <HAL_UART_Transmit+0xd0>
 8003722:	b15d      	cbz	r5, 800373c <HAL_UART_Transmit+0xd0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003724:	6823      	ldr	r3, [r4, #0]
 8003726:	68da      	ldr	r2, [r3, #12]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	065b      	lsls	r3, r3, #25
 800372c:	d5f4      	bpl.n	8003718 <HAL_UART_Transmit+0xac>
 800372e:	e7d8      	b.n	80036e2 <HAL_UART_Transmit+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003730:	6923      	ldr	r3, [r4, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1b9      	bne.n	80036aa <HAL_UART_Transmit+0x3e>
 8003736:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8003738:	4698      	mov	r8, r3
 800373a:	e7b6      	b.n	80036aa <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 800373c:	2320      	movs	r3, #32
 800373e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8003742:	2003      	movs	r0, #3
}
 8003744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003748 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003748:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800374c:	2b20      	cmp	r3, #32
 800374e:	d120      	bne.n	8003792 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8003750:	b101      	cbz	r1, 8003754 <HAL_UART_Receive_IT+0xc>
 8003752:	b90a      	cbnz	r2, 8003758 <HAL_UART_Receive_IT+0x10>
      return HAL_ERROR;
 8003754:	2001      	movs	r0, #1
}
 8003756:	4770      	bx	lr
{
 8003758:	b410      	push	{r4}
  if (huart->Init.Parity != UART_PARITY_NONE)
 800375a:	6904      	ldr	r4, [r0, #16]
  huart->pRxBuffPtr = pData;
 800375c:	6281      	str	r1, [r0, #40]	@ 0x28
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800375e:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003760:	2122      	movs	r1, #34	@ 0x22
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003762:	6303      	str	r3, [r0, #48]	@ 0x30
  huart->RxXferSize = Size;
 8003764:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003766:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003768:	6443      	str	r3, [r0, #68]	@ 0x44
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800376a:	6803      	ldr	r3, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800376c:	f880 1042 	strb.w	r1, [r0, #66]	@ 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003770:	b11c      	cbz	r4, 800377a <HAL_UART_Receive_IT+0x32>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003778:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800377a:	695a      	ldr	r2, [r3, #20]
}
 800377c:	f85d 4b04 	ldr.w	r4, [sp], #4
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003780:	f042 0201 	orr.w	r2, r2, #1
 8003784:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	f042 0220 	orr.w	r2, r2, #32
    return (UART_Start_Receive_IT(huart, pData, Size));
 800378c:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800378e:	60da      	str	r2, [r3, #12]
}
 8003790:	4770      	bx	lr
    return HAL_BUSY;
 8003792:	2002      	movs	r0, #2
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop

08003798 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop

0800379c <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop

080037a0 <UART_DMAAbortOnError>:
{
 80037a0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037a2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80037a8:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 80037aa:	f7ff fff7 	bl	800379c <HAL_UART_ErrorCallback>
}
 80037ae:	bd08      	pop	{r3, pc}

080037b0 <HAL_UARTEx_RxEventCallback>:
}
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop

080037b4 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037b4:	6883      	ldr	r3, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80037b6:	6801      	ldr	r1, [r0, #0]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80037b8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037be:	d042      	beq.n	8003846 <UART_Receive_IT.part.0.isra.0+0x92>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d039      	beq.n	8003838 <UART_Receive_IT.part.0.isra.0+0x84>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037c4:	684b      	ldr	r3, [r1, #4]
 80037c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037ca:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80037cc:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80037ce:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 80037d0:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
      huart->pRxBuffPtr += 2U;
 80037d2:	6282      	str	r2, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d132      	bne.n	8003844 <UART_Receive_IT.part.0.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037de:	6802      	ldr	r2, [r0, #0]
 80037e0:	68d1      	ldr	r1, [r2, #12]
 80037e2:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80037e6:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037e8:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037ea:	68d1      	ldr	r1, [r2, #12]
 80037ec:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 80037f0:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037f2:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80037f4:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037f8:	f021 0101 	bic.w	r1, r1, #1
 80037fc:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80037fe:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003802:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003804:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8003806:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003808:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800380a:	d125      	bne.n	8003858 <UART_Receive_IT.part.0.isra.0+0xa4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800380c:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380e:	f102 030c 	add.w	r3, r2, #12
 8003812:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003816:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381a:	f102 0c0c 	add.w	ip, r2, #12
 800381e:	e84c 3100 	strex	r1, r3, [ip]
 8003822:	2900      	cmp	r1, #0
 8003824:	d1f3      	bne.n	800380e <UART_Receive_IT.part.0.isra.0+0x5a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003826:	6813      	ldr	r3, [r2, #0]
 8003828:	06db      	lsls	r3, r3, #27
 800382a:	d41a      	bmi.n	8003862 <UART_Receive_IT.part.0.isra.0+0xae>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800382c:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800382e:	f7ff ffbf 	bl	80037b0 <HAL_UARTEx_RxEventCallback>
}
 8003832:	b003      	add	sp, #12
 8003834:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003838:	6903      	ldr	r3, [r0, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1c2      	bne.n	80037c4 <UART_Receive_IT.part.0.isra.0+0x10>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800383e:	684b      	ldr	r3, [r1, #4]
 8003840:	b2db      	uxtb	r3, r3
 8003842:	e7c2      	b.n	80037ca <UART_Receive_IT.part.0.isra.0+0x16>
 8003844:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003846:	6903      	ldr	r3, [r0, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f8      	bne.n	800383e <UART_Receive_IT.part.0.isra.0+0x8a>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800384c:	684b      	ldr	r3, [r1, #4]
 800384e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003852:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 8003856:	e7bb      	b.n	80037d0 <UART_Receive_IT.part.0.isra.0+0x1c>
        HAL_UART_RxCpltCallback(huart);
 8003858:	f7fd ffba 	bl	80017d0 <HAL_UART_RxCpltCallback>
}
 800385c:	b003      	add	sp, #12
 800385e:	f85d fb04 	ldr.w	pc, [sp], #4
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003862:	2300      	movs	r3, #0
 8003864:	9301      	str	r3, [sp, #4]
 8003866:	6813      	ldr	r3, [r2, #0]
 8003868:	9301      	str	r3, [sp, #4]
 800386a:	6853      	ldr	r3, [r2, #4]
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	9b01      	ldr	r3, [sp, #4]
 8003870:	e7dc      	b.n	800382c <UART_Receive_IT.part.0.isra.0+0x78>
 8003872:	bf00      	nop

08003874 <HAL_UART_IRQHandler>:
{
 8003874:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003876:	6803      	ldr	r3, [r0, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800387a:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800387c:	6959      	ldr	r1, [r3, #20]
  if (errorflags == RESET)
 800387e:	f012 0f0f 	tst.w	r2, #15
{
 8003882:	b083      	sub	sp, #12
 8003884:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8003886:	d170      	bne.n	800396a <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003888:	0691      	lsls	r1, r2, #26
 800388a:	d502      	bpl.n	8003892 <HAL_UART_IRQHandler+0x1e>
 800388c:	06a9      	lsls	r1, r5, #26
 800388e:	f100 80a1 	bmi.w	80039d4 <HAL_UART_IRQHandler+0x160>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003892:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003894:	2901      	cmp	r1, #1
 8003896:	d00b      	beq.n	80038b0 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003898:	0610      	lsls	r0, r2, #24
 800389a:	d502      	bpl.n	80038a2 <HAL_UART_IRQHandler+0x2e>
 800389c:	0629      	lsls	r1, r5, #24
 800389e:	f100 80a3 	bmi.w	80039e8 <HAL_UART_IRQHandler+0x174>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038a2:	0652      	lsls	r2, r2, #25
 80038a4:	d502      	bpl.n	80038ac <HAL_UART_IRQHandler+0x38>
 80038a6:	0668      	lsls	r0, r5, #25
 80038a8:	f100 80bd 	bmi.w	8003a26 <HAL_UART_IRQHandler+0x1b2>
}
 80038ac:	b003      	add	sp, #12
 80038ae:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038b0:	06d0      	lsls	r0, r2, #27
 80038b2:	d5f1      	bpl.n	8003898 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038b4:	06e9      	lsls	r1, r5, #27
 80038b6:	d5ef      	bpl.n	8003898 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038b8:	2200      	movs	r2, #0
 80038ba:	9201      	str	r2, [sp, #4]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	9201      	str	r2, [sp, #4]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	9201      	str	r2, [sp, #4]
 80038c4:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c6:	695a      	ldr	r2, [r3, #20]
 80038c8:	0655      	lsls	r5, r2, #25
 80038ca:	f140 8136 	bpl.w	8003b3a <HAL_UART_IRQHandler+0x2c6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038ce:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80038d0:	6802      	ldr	r2, [r0, #0]
 80038d2:	6852      	ldr	r2, [r2, #4]
 80038d4:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80038d6:	2a00      	cmp	r2, #0
 80038d8:	d0e8      	beq.n	80038ac <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038da:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80038dc:	4291      	cmp	r1, r2
 80038de:	d9e5      	bls.n	80038ac <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 80038e0:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038e2:	69c2      	ldr	r2, [r0, #28]
 80038e4:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80038e8:	d036      	beq.n	8003958 <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ea:	f103 020c 	add.w	r2, r3, #12
 80038ee:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	f103 050c 	add.w	r5, r3, #12
 80038fa:	e845 2100 	strex	r1, r2, [r5]
 80038fe:	2900      	cmp	r1, #0
 8003900:	d1f3      	bne.n	80038ea <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003902:	f103 0214 	add.w	r2, r3, #20
 8003906:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390e:	f103 0514 	add.w	r5, r3, #20
 8003912:	e845 2100 	strex	r1, r2, [r5]
 8003916:	2900      	cmp	r1, #0
 8003918:	d1f3      	bne.n	8003902 <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391a:	f103 0214 	add.w	r2, r3, #20
 800391e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003922:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003926:	f103 0514 	add.w	r5, r3, #20
 800392a:	e845 2100 	strex	r1, r2, [r5]
 800392e:	2900      	cmp	r1, #0
 8003930:	d1f3      	bne.n	800391a <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 8003932:	2220      	movs	r2, #32
 8003934:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003938:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	f103 020c 	add.w	r2, r3, #12
 800393e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003942:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003946:	f103 050c 	add.w	r5, r3, #12
 800394a:	e845 2100 	strex	r1, r2, [r5]
 800394e:	2900      	cmp	r1, #0
 8003950:	d1f3      	bne.n	800393a <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003952:	f7fe f9eb 	bl	8001d2c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003956:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003958:	2302      	movs	r3, #2
 800395a:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800395c:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800395e:	1ac9      	subs	r1, r1, r3
 8003960:	4620      	mov	r0, r4
 8003962:	b289      	uxth	r1, r1
 8003964:	f7ff ff24 	bl	80037b0 <HAL_UARTEx_RxEventCallback>
 8003968:	e7a0      	b.n	80038ac <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800396a:	f011 0101 	ands.w	r1, r1, #1
 800396e:	d178      	bne.n	8003a62 <HAL_UART_IRQHandler+0x1ee>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003970:	f415 7f90 	tst.w	r5, #288	@ 0x120
 8003974:	d08d      	beq.n	8003892 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003976:	07d0      	lsls	r0, r2, #31
 8003978:	d50a      	bpl.n	8003990 <HAL_UART_IRQHandler+0x11c>
 800397a:	05e8      	lsls	r0, r5, #23
 800397c:	f140 80d9 	bpl.w	8003b32 <HAL_UART_IRQHandler+0x2be>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003980:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003982:	f040 0001 	orr.w	r0, r0, #1
 8003986:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003988:	0750      	lsls	r0, r2, #29
 800398a:	d55b      	bpl.n	8003a44 <HAL_UART_IRQHandler+0x1d0>
 800398c:	2900      	cmp	r1, #0
 800398e:	d16c      	bne.n	8003a6a <HAL_UART_IRQHandler+0x1f6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003990:	0790      	lsls	r0, r2, #30
 8003992:	d570      	bpl.n	8003a76 <HAL_UART_IRQHandler+0x202>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003994:	0710      	lsls	r0, r2, #28
 8003996:	f100 80c9 	bmi.w	8003b2c <HAL_UART_IRQHandler+0x2b8>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800399a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800399c:	2900      	cmp	r1, #0
 800399e:	d085      	beq.n	80038ac <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039a0:	0691      	lsls	r1, r2, #26
 80039a2:	d509      	bpl.n	80039b8 <HAL_UART_IRQHandler+0x144>
 80039a4:	06aa      	lsls	r2, r5, #26
 80039a6:	d507      	bpl.n	80039b8 <HAL_UART_IRQHandler+0x144>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039a8:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 80039ac:	2a22      	cmp	r2, #34	@ 0x22
 80039ae:	d103      	bne.n	80039b8 <HAL_UART_IRQHandler+0x144>
 80039b0:	4620      	mov	r0, r4
 80039b2:	f7ff feff 	bl	80037b4 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039b6:	6823      	ldr	r3, [r4, #0]
 80039b8:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039ba:	6c61      	ldr	r1, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039bc:	f002 0240 	and.w	r2, r2, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039c0:	f001 0108 	and.w	r1, r1, #8
 80039c4:	ea52 0501 	orrs.w	r5, r2, r1
 80039c8:	d15c      	bne.n	8003a84 <HAL_UART_IRQHandler+0x210>
        HAL_UART_ErrorCallback(huart);
 80039ca:	4620      	mov	r0, r4
 80039cc:	f7ff fee6 	bl	800379c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d0:	6465      	str	r5, [r4, #68]	@ 0x44
 80039d2:	e76b      	b.n	80038ac <HAL_UART_IRQHandler+0x38>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039d4:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80039d8:	2b22      	cmp	r3, #34	@ 0x22
 80039da:	f47f af67 	bne.w	80038ac <HAL_UART_IRQHandler+0x38>
}
 80039de:	b003      	add	sp, #12
 80039e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80039e4:	f7ff bee6 	b.w	80037b4 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039e8:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 80039ec:	2a21      	cmp	r2, #33	@ 0x21
 80039ee:	f47f af5d 	bne.w	80038ac <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f2:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039f4:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039f6:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80039fa:	f000 80d9 	beq.w	8003bb0 <HAL_UART_IRQHandler+0x33c>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039fe:	1c51      	adds	r1, r2, #1
 8003a00:	6221      	str	r1, [r4, #32]
 8003a02:	7812      	ldrb	r2, [r2, #0]
 8003a04:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8003a06:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8003a08:	3a01      	subs	r2, #1
 8003a0a:	b292      	uxth	r2, r2
 8003a0c:	84e2      	strh	r2, [r4, #38]	@ 0x26
 8003a0e:	2a00      	cmp	r2, #0
 8003a10:	f47f af4c 	bne.w	80038ac <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a1a:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a22:	60da      	str	r2, [r3, #12]
 8003a24:	e742      	b.n	80038ac <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a26:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003a28:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a2e:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003a30:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8003a32:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8003a36:	f7ff feaf 	bl	8003798 <HAL_UART_TxCpltCallback>
    return;
 8003a3a:	e737      	b.n	80038ac <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a3c:	05e8      	lsls	r0, r5, #23
 8003a3e:	d49f      	bmi.n	8003980 <HAL_UART_IRQHandler+0x10c>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a40:	0750      	lsls	r0, r2, #29
 8003a42:	d412      	bmi.n	8003a6a <HAL_UART_IRQHandler+0x1f6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a44:	0790      	lsls	r0, r2, #30
 8003a46:	d516      	bpl.n	8003a76 <HAL_UART_IRQHandler+0x202>
 8003a48:	2900      	cmp	r1, #0
 8003a4a:	d0a3      	beq.n	8003994 <HAL_UART_IRQHandler+0x120>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a4c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003a4e:	f041 0104 	orr.w	r1, r1, #4
 8003a52:	6461      	str	r1, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a54:	0711      	lsls	r1, r2, #28
 8003a56:	d5a0      	bpl.n	800399a <HAL_UART_IRQHandler+0x126>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a58:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003a5a:	f041 0108 	orr.w	r1, r1, #8
 8003a5e:	6461      	str	r1, [r4, #68]	@ 0x44
 8003a60:	e79b      	b.n	800399a <HAL_UART_IRQHandler+0x126>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003a62:	07d0      	lsls	r0, r2, #31
 8003a64:	d4ea      	bmi.n	8003a3c <HAL_UART_IRQHandler+0x1c8>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a66:	0750      	lsls	r0, r2, #29
 8003a68:	d55b      	bpl.n	8003b22 <HAL_UART_IRQHandler+0x2ae>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a6a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003a6c:	f040 0002 	orr.w	r0, r0, #2
 8003a70:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a72:	0790      	lsls	r0, r2, #30
 8003a74:	d4ea      	bmi.n	8003a4c <HAL_UART_IRQHandler+0x1d8>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a76:	0710      	lsls	r0, r2, #28
 8003a78:	d58f      	bpl.n	800399a <HAL_UART_IRQHandler+0x126>
 8003a7a:	f005 0020 	and.w	r0, r5, #32
 8003a7e:	4308      	orrs	r0, r1
 8003a80:	d08b      	beq.n	800399a <HAL_UART_IRQHandler+0x126>
 8003a82:	e7e9      	b.n	8003a58 <HAL_UART_IRQHandler+0x1e4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a84:	f103 020c 	add.w	r2, r3, #12
 8003a88:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a8c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a90:	f103 000c 	add.w	r0, r3, #12
 8003a94:	e840 2100 	strex	r1, r2, [r0]
 8003a98:	2900      	cmp	r1, #0
 8003a9a:	d1f3      	bne.n	8003a84 <HAL_UART_IRQHandler+0x210>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9c:	f103 0214 	add.w	r2, r3, #20
 8003aa0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa8:	f103 0014 	add.w	r0, r3, #20
 8003aac:	e840 2100 	strex	r1, r2, [r0]
 8003ab0:	2900      	cmp	r1, #0
 8003ab2:	d1f3      	bne.n	8003a9c <HAL_UART_IRQHandler+0x228>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ab4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8003ab6:	2a01      	cmp	r2, #1
 8003ab8:	d022      	beq.n	8003b00 <HAL_UART_IRQHandler+0x28c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aba:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8003abc:	2120      	movs	r1, #32
 8003abe:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac2:	6322      	str	r2, [r4, #48]	@ 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac4:	695a      	ldr	r2, [r3, #20]
 8003ac6:	0655      	lsls	r5, r2, #25
 8003ac8:	d527      	bpl.n	8003b1a <HAL_UART_IRQHandler+0x2a6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aca:	f103 0214 	add.w	r2, r3, #20
 8003ace:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad6:	f103 0014 	add.w	r0, r3, #20
 8003ada:	e840 2100 	strex	r1, r2, [r0]
 8003ade:	2900      	cmp	r1, #0
 8003ae0:	d1f3      	bne.n	8003aca <HAL_UART_IRQHandler+0x256>
          if (huart->hdmarx != NULL)
 8003ae2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003ae4:	b1c8      	cbz	r0, 8003b1a <HAL_UART_IRQHandler+0x2a6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ae6:	4b38      	ldr	r3, [pc, #224]	@ (8003bc8 <HAL_UART_IRQHandler+0x354>)
 8003ae8:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003aea:	f7fe f969 	bl	8001dc0 <HAL_DMA_Abort_IT>
 8003aee:	2800      	cmp	r0, #0
 8003af0:	f43f aedc 	beq.w	80038ac <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003af4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8003af6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
}
 8003af8:	b003      	add	sp, #12
 8003afa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003afe:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b00:	f103 020c 	add.w	r2, r3, #12
 8003b04:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b08:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	f103 000c 	add.w	r0, r3, #12
 8003b10:	e840 2100 	strex	r1, r2, [r0]
 8003b14:	2900      	cmp	r1, #0
 8003b16:	d1f3      	bne.n	8003b00 <HAL_UART_IRQHandler+0x28c>
 8003b18:	e7cf      	b.n	8003aba <HAL_UART_IRQHandler+0x246>
            HAL_UART_ErrorCallback(huart);
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	f7ff fe3e 	bl	800379c <HAL_UART_ErrorCallback>
 8003b20:	e6c4      	b.n	80038ac <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b22:	0791      	lsls	r1, r2, #30
 8003b24:	d492      	bmi.n	8003a4c <HAL_UART_IRQHandler+0x1d8>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b26:	0711      	lsls	r1, r2, #28
 8003b28:	d496      	bmi.n	8003a58 <HAL_UART_IRQHandler+0x1e4>
 8003b2a:	e736      	b.n	800399a <HAL_UART_IRQHandler+0x126>
 8003b2c:	06a9      	lsls	r1, r5, #26
 8003b2e:	d493      	bmi.n	8003a58 <HAL_UART_IRQHandler+0x1e4>
 8003b30:	e733      	b.n	800399a <HAL_UART_IRQHandler+0x126>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b32:	0750      	lsls	r0, r2, #29
 8003b34:	f53f af2c 	bmi.w	8003990 <HAL_UART_IRQHandler+0x11c>
 8003b38:	e784      	b.n	8003a44 <HAL_UART_IRQHandler+0x1d0>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b3a:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 8003b3c:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b3e:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 8003b40:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b42:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8003b44:	2a00      	cmp	r2, #0
 8003b46:	f43f aeb1 	beq.w	80038ac <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b4a:	1a41      	subs	r1, r0, r1
 8003b4c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003b4e:	2900      	cmp	r1, #0
 8003b50:	f43f aeac 	beq.w	80038ac <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b54:	f103 020c 	add.w	r2, r3, #12
 8003b58:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b5c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b60:	f103 050c 	add.w	r5, r3, #12
 8003b64:	e845 2000 	strex	r0, r2, [r5]
 8003b68:	2800      	cmp	r0, #0
 8003b6a:	d1f3      	bne.n	8003b54 <HAL_UART_IRQHandler+0x2e0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6c:	f103 0214 	add.w	r2, r3, #20
 8003b70:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b74:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b78:	f103 0514 	add.w	r5, r3, #20
 8003b7c:	e845 2000 	strex	r0, r2, [r5]
 8003b80:	2800      	cmp	r0, #0
 8003b82:	d1f3      	bne.n	8003b6c <HAL_UART_IRQHandler+0x2f8>
        huart->RxState = HAL_UART_STATE_READY;
 8003b84:	2220      	movs	r2, #32
 8003b86:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b8a:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	f103 020c 	add.w	r2, r3, #12
 8003b90:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b94:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b98:	f103 050c 	add.w	r5, r3, #12
 8003b9c:	e845 2000 	strex	r0, r2, [r5]
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	d1f3      	bne.n	8003b8c <HAL_UART_IRQHandler+0x318>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ba8:	4620      	mov	r0, r4
 8003baa:	f7ff fe01 	bl	80037b0 <HAL_UARTEx_RxEventCallback>
 8003bae:	e67d      	b.n	80038ac <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb0:	6921      	ldr	r1, [r4, #16]
 8003bb2:	2900      	cmp	r1, #0
 8003bb4:	f47f af23 	bne.w	80039fe <HAL_UART_IRQHandler+0x18a>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bb8:	f832 1b02 	ldrh.w	r1, [r2], #2
 8003bbc:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003bc0:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bc2:	6222      	str	r2, [r4, #32]
 8003bc4:	e71f      	b.n	8003a06 <HAL_UART_IRQHandler+0x192>
 8003bc6:	bf00      	nop
 8003bc8:	080037a1 	.word	0x080037a1

08003bcc <arm_mat_sub_f32>:
 8003bcc:	b4f0      	push	{r4, r5, r6, r7}
 8003bce:	e9d1 4600 	ldrd	r4, r6, [r1]
 8003bd2:	6803      	ldr	r3, [r0, #0]
 8003bd4:	6847      	ldr	r7, [r0, #4]
 8003bd6:	6855      	ldr	r5, [r2, #4]
 8003bd8:	42a3      	cmp	r3, r4
 8003bda:	d160      	bne.n	8003c9e <arm_mat_sub_f32+0xd2>
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d15d      	bne.n	8003c9e <arm_mat_sub_f32+0xd2>
 8003be2:	8803      	ldrh	r3, [r0, #0]
 8003be4:	8844      	ldrh	r4, [r0, #2]
 8003be6:	fb04 f403 	mul.w	r4, r4, r3
 8003bea:	ea5f 0c94 	movs.w	ip, r4, lsr #2
 8003bee:	d034      	beq.n	8003c5a <arm_mat_sub_f32+0x8e>
 8003bf0:	f107 0110 	add.w	r1, r7, #16
 8003bf4:	f106 0210 	add.w	r2, r6, #16
 8003bf8:	f105 0310 	add.w	r3, r5, #16
 8003bfc:	4660      	mov	r0, ip
 8003bfe:	ed12 7a04 	vldr	s14, [r2, #-16]
 8003c02:	ed51 7a04 	vldr	s15, [r1, #-16]
 8003c06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c0a:	3801      	subs	r0, #1
 8003c0c:	ed43 7a04 	vstr	s15, [r3, #-16]
 8003c10:	ed12 7a03 	vldr	s14, [r2, #-12]
 8003c14:	ed51 7a03 	vldr	s15, [r1, #-12]
 8003c18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c1c:	f101 0110 	add.w	r1, r1, #16
 8003c20:	ed43 7a03 	vstr	s15, [r3, #-12]
 8003c24:	ed12 7a02 	vldr	s14, [r2, #-8]
 8003c28:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 8003c2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c30:	f102 0210 	add.w	r2, r2, #16
 8003c34:	ed43 7a02 	vstr	s15, [r3, #-8]
 8003c38:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 8003c3c:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8003c40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c44:	f103 0310 	add.w	r3, r3, #16
 8003c48:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8003c4c:	d1d7      	bne.n	8003bfe <arm_mat_sub_f32+0x32>
 8003c4e:	eb07 170c 	add.w	r7, r7, ip, lsl #4
 8003c52:	eb06 160c 	add.w	r6, r6, ip, lsl #4
 8003c56:	eb05 150c 	add.w	r5, r5, ip, lsl #4
 8003c5a:	f014 0403 	ands.w	r4, r4, #3
 8003c5e:	d01b      	beq.n	8003c98 <arm_mat_sub_f32+0xcc>
 8003c60:	edd7 7a00 	vldr	s15, [r7]
 8003c64:	ed96 7a00 	vldr	s14, [r6]
 8003c68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c6c:	3c01      	subs	r4, #1
 8003c6e:	edc5 7a00 	vstr	s15, [r5]
 8003c72:	d011      	beq.n	8003c98 <arm_mat_sub_f32+0xcc>
 8003c74:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c78:	ed96 7a01 	vldr	s14, [r6, #4]
 8003c7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c80:	2c01      	cmp	r4, #1
 8003c82:	edc5 7a01 	vstr	s15, [r5, #4]
 8003c86:	d007      	beq.n	8003c98 <arm_mat_sub_f32+0xcc>
 8003c88:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c8c:	ed96 7a02 	vldr	s14, [r6, #8]
 8003c90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c94:	edc5 7a02 	vstr	s15, [r5, #8]
 8003c98:	2000      	movs	r0, #0
 8003c9a:	bcf0      	pop	{r4, r5, r6, r7}
 8003c9c:	4770      	bx	lr
 8003c9e:	f06f 0002 	mvn.w	r0, #2
 8003ca2:	e7fa      	b.n	8003c9a <arm_mat_sub_f32+0xce>

08003ca4 <arm_mat_mult_f32>:
 8003ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ca8:	460c      	mov	r4, r1
 8003caa:	b08b      	sub	sp, #44	@ 0x2c
 8003cac:	8825      	ldrh	r5, [r4, #0]
 8003cae:	9107      	str	r1, [sp, #28]
 8003cb0:	8841      	ldrh	r1, [r0, #2]
 8003cb2:	8806      	ldrh	r6, [r0, #0]
 8003cb4:	6843      	ldr	r3, [r0, #4]
 8003cb6:	6857      	ldr	r7, [r2, #4]
 8003cb8:	6860      	ldr	r0, [r4, #4]
 8003cba:	9602      	str	r6, [sp, #8]
 8003cbc:	428d      	cmp	r5, r1
 8003cbe:	8864      	ldrh	r4, [r4, #2]
 8003cc0:	f040 80f9 	bne.w	8003eb6 <arm_mat_mult_f32+0x212>
 8003cc4:	8811      	ldrh	r1, [r2, #0]
 8003cc6:	42b1      	cmp	r1, r6
 8003cc8:	f040 80f5 	bne.w	8003eb6 <arm_mat_mult_f32+0x212>
 8003ccc:	8851      	ldrh	r1, [r2, #2]
 8003cce:	42a1      	cmp	r1, r4
 8003cd0:	f040 80f1 	bne.w	8003eb6 <arm_mat_mult_f32+0x212>
 8003cd4:	00aa      	lsls	r2, r5, #2
 8003cd6:	2901      	cmp	r1, #1
 8003cd8:	ea4f 0c95 	mov.w	ip, r5, lsr #2
 8003cdc:	ea4f 0481 	mov.w	r4, r1, lsl #2
 8003ce0:	f005 0e03 	and.w	lr, r5, #3
 8003ce4:	9206      	str	r2, [sp, #24]
 8003ce6:	d170      	bne.n	8003dca <arm_mat_mult_f32+0x126>
 8003ce8:	1d01      	adds	r1, r0, #4
 8003cea:	9105      	str	r1, [sp, #20]
 8003cec:	ea4f 110c 	mov.w	r1, ip, lsl #4
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	f107 0904 	add.w	r9, r7, #4
 8003cf6:	9101      	str	r1, [sp, #4]
 8003cf8:	eb03 1b0c 	add.w	fp, r3, ip, lsl #4
 8003cfc:	f103 0a10 	add.w	sl, r3, #16
 8003d00:	f1aa 0310 	sub.w	r3, sl, #16
 8003d04:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8003d08:	9303      	str	r3, [sp, #12]
 8003d0a:	f1a9 0704 	sub.w	r7, r9, #4
 8003d0e:	eddf 7a6c 	vldr	s15, [pc, #432]	@ 8003ec0 <arm_mat_mult_f32+0x21c>
 8003d12:	f1bc 0f00 	cmp.w	ip, #0
 8003d16:	d052      	beq.n	8003dbe <arm_mat_mult_f32+0x11a>
 8003d18:	f102 0008 	add.w	r0, r2, #8
 8003d1c:	4653      	mov	r3, sl
 8003d1e:	4665      	mov	r5, ip
 8003d20:	4611      	mov	r1, r2
 8003d22:	ed13 6a04 	vldr	s12, [r3, #-16]
 8003d26:	ed91 7a00 	vldr	s14, [r1]
 8003d2a:	ed53 4a03 	vldr	s9, [r3, #-12]
 8003d2e:	edd0 6a00 	vldr	s13, [r0]
 8003d32:	ed13 5a02 	vldr	s10, [r3, #-8]
 8003d36:	ed53 5a01 	vldr	s11, [r3, #-4]
 8003d3a:	190e      	adds	r6, r1, r4
 8003d3c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8003d40:	ed96 6a00 	vldr	s12, [r6]
 8003d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d48:	ee26 6a24 	vmul.f32	s12, s12, s9
 8003d4c:	1906      	adds	r6, r0, r4
 8003d4e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003d52:	ee26 7a85 	vmul.f32	s14, s13, s10
 8003d56:	edd6 7a00 	vldr	s15, [r6]
 8003d5a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003d5e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003d62:	3d01      	subs	r5, #1
 8003d64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d68:	f101 0110 	add.w	r1, r1, #16
 8003d6c:	f100 0010 	add.w	r0, r0, #16
 8003d70:	f103 0310 	add.w	r3, r3, #16
 8003d74:	d1d5      	bne.n	8003d22 <arm_mat_mult_f32+0x7e>
 8003d76:	9b01      	ldr	r3, [sp, #4]
 8003d78:	4659      	mov	r1, fp
 8003d7a:	441a      	add	r2, r3
 8003d7c:	f1be 0f00 	cmp.w	lr, #0
 8003d80:	d00b      	beq.n	8003d9a <arm_mat_mult_f32+0xf6>
 8003d82:	4673      	mov	r3, lr
 8003d84:	ed92 7a00 	vldr	s14, [r2]
 8003d88:	ecf1 6a01 	vldmia	r1!, {s13}
 8003d8c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003d90:	3b01      	subs	r3, #1
 8003d92:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d96:	4422      	add	r2, r4
 8003d98:	d1f4      	bne.n	8003d84 <arm_mat_mult_f32+0xe0>
 8003d9a:	ece7 7a01 	vstmia	r7!, {s15}
 8003d9e:	454f      	cmp	r7, r9
 8003da0:	4642      	mov	r2, r8
 8003da2:	f108 0804 	add.w	r8, r8, #4
 8003da6:	d1b2      	bne.n	8003d0e <arm_mat_mult_f32+0x6a>
 8003da8:	9b06      	ldr	r3, [sp, #24]
 8003daa:	449b      	add	fp, r3
 8003dac:	449a      	add	sl, r3
 8003dae:	9b02      	ldr	r3, [sp, #8]
 8003db0:	3b01      	subs	r3, #1
 8003db2:	44a1      	add	r9, r4
 8003db4:	9302      	str	r3, [sp, #8]
 8003db6:	d004      	beq.n	8003dc2 <arm_mat_mult_f32+0x11e>
 8003db8:	9b07      	ldr	r3, [sp, #28]
 8003dba:	685a      	ldr	r2, [r3, #4]
 8003dbc:	e7a0      	b.n	8003d00 <arm_mat_mult_f32+0x5c>
 8003dbe:	9903      	ldr	r1, [sp, #12]
 8003dc0:	e7dc      	b.n	8003d7c <arm_mat_mult_f32+0xd8>
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	b00b      	add	sp, #44	@ 0x2c
 8003dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dca:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
 8003dce:	0092      	lsls	r2, r2, #2
 8003dd0:	010e      	lsls	r6, r1, #4
 8003dd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8003dd4:	00ca      	lsls	r2, r1, #3
 8003dd6:	9204      	str	r2, [sp, #16]
 8003dd8:	fb06 f20c 	mul.w	r2, r6, ip
 8003ddc:	1d05      	adds	r5, r0, #4
 8003dde:	9203      	str	r2, [sp, #12]
 8003de0:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 8003de4:	eb07 0b04 	add.w	fp, r7, r4
 8003de8:	9505      	str	r5, [sp, #20]
 8003dea:	9201      	str	r2, [sp, #4]
 8003dec:	f103 0a10 	add.w	sl, r3, #16
 8003df0:	f1aa 0310 	sub.w	r3, sl, #16
 8003df4:	9308      	str	r3, [sp, #32]
 8003df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003df8:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003dfc:	eb0b 0803 	add.w	r8, fp, r3
 8003e00:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8003ec0 <arm_mat_mult_f32+0x21c>
 8003e04:	f1bc 0f00 	cmp.w	ip, #0
 8003e08:	d053      	beq.n	8003eb2 <arm_mat_mult_f32+0x20e>
 8003e0a:	9b04      	ldr	r3, [sp, #16]
 8003e0c:	4665      	mov	r5, ip
 8003e0e:	18c1      	adds	r1, r0, r3
 8003e10:	4602      	mov	r2, r0
 8003e12:	4653      	mov	r3, sl
 8003e14:	ed92 6a00 	vldr	s12, [r2]
 8003e18:	ed13 7a04 	vldr	s14, [r3, #-16]
 8003e1c:	ed53 4a03 	vldr	s9, [r3, #-12]
 8003e20:	ed53 6a02 	vldr	s13, [r3, #-8]
 8003e24:	ed91 5a00 	vldr	s10, [r1]
 8003e28:	ed53 5a01 	vldr	s11, [r3, #-4]
 8003e2c:	1917      	adds	r7, r2, r4
 8003e2e:	ee27 7a06 	vmul.f32	s14, s14, s12
 8003e32:	ed97 6a00 	vldr	s12, [r7]
 8003e36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e3a:	ee26 6a24 	vmul.f32	s12, s12, s9
 8003e3e:	190f      	adds	r7, r1, r4
 8003e40:	ee36 6a27 	vadd.f32	s12, s12, s15
 8003e44:	ee26 7a85 	vmul.f32	s14, s13, s10
 8003e48:	edd7 7a00 	vldr	s15, [r7]
 8003e4c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003e50:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003e54:	3d01      	subs	r5, #1
 8003e56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e5a:	4432      	add	r2, r6
 8003e5c:	4431      	add	r1, r6
 8003e5e:	f103 0310 	add.w	r3, r3, #16
 8003e62:	d1d7      	bne.n	8003e14 <arm_mat_mult_f32+0x170>
 8003e64:	9b03      	ldr	r3, [sp, #12]
 8003e66:	9a01      	ldr	r2, [sp, #4]
 8003e68:	4418      	add	r0, r3
 8003e6a:	f1be 0f00 	cmp.w	lr, #0
 8003e6e:	d00b      	beq.n	8003e88 <arm_mat_mult_f32+0x1e4>
 8003e70:	4673      	mov	r3, lr
 8003e72:	edd0 6a00 	vldr	s13, [r0]
 8003e76:	ecb2 7a01 	vldmia	r2!, {s14}
 8003e7a:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003e84:	4420      	add	r0, r4
 8003e86:	d1f4      	bne.n	8003e72 <arm_mat_mult_f32+0x1ce>
 8003e88:	ece8 7a01 	vstmia	r8!, {s15}
 8003e8c:	45d8      	cmp	r8, fp
 8003e8e:	4648      	mov	r0, r9
 8003e90:	f109 0904 	add.w	r9, r9, #4
 8003e94:	d1b4      	bne.n	8003e00 <arm_mat_mult_f32+0x15c>
 8003e96:	9a01      	ldr	r2, [sp, #4]
 8003e98:	9b06      	ldr	r3, [sp, #24]
 8003e9a:	4611      	mov	r1, r2
 8003e9c:	4419      	add	r1, r3
 8003e9e:	449a      	add	sl, r3
 8003ea0:	9b02      	ldr	r3, [sp, #8]
 8003ea2:	9101      	str	r1, [sp, #4]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	44a3      	add	fp, r4
 8003ea8:	9302      	str	r3, [sp, #8]
 8003eaa:	d08a      	beq.n	8003dc2 <arm_mat_mult_f32+0x11e>
 8003eac:	9b07      	ldr	r3, [sp, #28]
 8003eae:	6858      	ldr	r0, [r3, #4]
 8003eb0:	e79e      	b.n	8003df0 <arm_mat_mult_f32+0x14c>
 8003eb2:	9a08      	ldr	r2, [sp, #32]
 8003eb4:	e7d9      	b.n	8003e6a <arm_mat_mult_f32+0x1c6>
 8003eb6:	f06f 0002 	mvn.w	r0, #2
 8003eba:	b00b      	add	sp, #44	@ 0x2c
 8003ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ec0:	00000000 	.word	0x00000000

08003ec4 <arm_mat_init_f32>:
 8003ec4:	8001      	strh	r1, [r0, #0]
 8003ec6:	8042      	strh	r2, [r0, #2]
 8003ec8:	6043      	str	r3, [r0, #4]
 8003eca:	4770      	bx	lr

08003ecc <atoi>:
 8003ecc:	220a      	movs	r2, #10
 8003ece:	2100      	movs	r1, #0
 8003ed0:	f000 b87c 	b.w	8003fcc <strtol>

08003ed4 <_strtol_l.constprop.0>:
 8003ed4:	2b24      	cmp	r3, #36	@ 0x24
 8003ed6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eda:	4686      	mov	lr, r0
 8003edc:	4690      	mov	r8, r2
 8003ede:	d801      	bhi.n	8003ee4 <_strtol_l.constprop.0+0x10>
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d106      	bne.n	8003ef2 <_strtol_l.constprop.0+0x1e>
 8003ee4:	f001 f860 	bl	8004fa8 <__errno>
 8003ee8:	2316      	movs	r3, #22
 8003eea:	6003      	str	r3, [r0, #0]
 8003eec:	2000      	movs	r0, #0
 8003eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ef2:	4834      	ldr	r0, [pc, #208]	@ (8003fc4 <_strtol_l.constprop.0+0xf0>)
 8003ef4:	460d      	mov	r5, r1
 8003ef6:	462a      	mov	r2, r5
 8003ef8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003efc:	5d06      	ldrb	r6, [r0, r4]
 8003efe:	f016 0608 	ands.w	r6, r6, #8
 8003f02:	d1f8      	bne.n	8003ef6 <_strtol_l.constprop.0+0x22>
 8003f04:	2c2d      	cmp	r4, #45	@ 0x2d
 8003f06:	d12d      	bne.n	8003f64 <_strtol_l.constprop.0+0x90>
 8003f08:	782c      	ldrb	r4, [r5, #0]
 8003f0a:	2601      	movs	r6, #1
 8003f0c:	1c95      	adds	r5, r2, #2
 8003f0e:	f033 0210 	bics.w	r2, r3, #16
 8003f12:	d109      	bne.n	8003f28 <_strtol_l.constprop.0+0x54>
 8003f14:	2c30      	cmp	r4, #48	@ 0x30
 8003f16:	d12a      	bne.n	8003f6e <_strtol_l.constprop.0+0x9a>
 8003f18:	782a      	ldrb	r2, [r5, #0]
 8003f1a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003f1e:	2a58      	cmp	r2, #88	@ 0x58
 8003f20:	d125      	bne.n	8003f6e <_strtol_l.constprop.0+0x9a>
 8003f22:	786c      	ldrb	r4, [r5, #1]
 8003f24:	2310      	movs	r3, #16
 8003f26:	3502      	adds	r5, #2
 8003f28:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003f2c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003f30:	2200      	movs	r2, #0
 8003f32:	fbbc f9f3 	udiv	r9, ip, r3
 8003f36:	4610      	mov	r0, r2
 8003f38:	fb03 ca19 	mls	sl, r3, r9, ip
 8003f3c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003f40:	2f09      	cmp	r7, #9
 8003f42:	d81b      	bhi.n	8003f7c <_strtol_l.constprop.0+0xa8>
 8003f44:	463c      	mov	r4, r7
 8003f46:	42a3      	cmp	r3, r4
 8003f48:	dd27      	ble.n	8003f9a <_strtol_l.constprop.0+0xc6>
 8003f4a:	1c57      	adds	r7, r2, #1
 8003f4c:	d007      	beq.n	8003f5e <_strtol_l.constprop.0+0x8a>
 8003f4e:	4581      	cmp	r9, r0
 8003f50:	d320      	bcc.n	8003f94 <_strtol_l.constprop.0+0xc0>
 8003f52:	d101      	bne.n	8003f58 <_strtol_l.constprop.0+0x84>
 8003f54:	45a2      	cmp	sl, r4
 8003f56:	db1d      	blt.n	8003f94 <_strtol_l.constprop.0+0xc0>
 8003f58:	fb00 4003 	mla	r0, r0, r3, r4
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f62:	e7eb      	b.n	8003f3c <_strtol_l.constprop.0+0x68>
 8003f64:	2c2b      	cmp	r4, #43	@ 0x2b
 8003f66:	bf04      	itt	eq
 8003f68:	782c      	ldrbeq	r4, [r5, #0]
 8003f6a:	1c95      	addeq	r5, r2, #2
 8003f6c:	e7cf      	b.n	8003f0e <_strtol_l.constprop.0+0x3a>
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1da      	bne.n	8003f28 <_strtol_l.constprop.0+0x54>
 8003f72:	2c30      	cmp	r4, #48	@ 0x30
 8003f74:	bf0c      	ite	eq
 8003f76:	2308      	moveq	r3, #8
 8003f78:	230a      	movne	r3, #10
 8003f7a:	e7d5      	b.n	8003f28 <_strtol_l.constprop.0+0x54>
 8003f7c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003f80:	2f19      	cmp	r7, #25
 8003f82:	d801      	bhi.n	8003f88 <_strtol_l.constprop.0+0xb4>
 8003f84:	3c37      	subs	r4, #55	@ 0x37
 8003f86:	e7de      	b.n	8003f46 <_strtol_l.constprop.0+0x72>
 8003f88:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003f8c:	2f19      	cmp	r7, #25
 8003f8e:	d804      	bhi.n	8003f9a <_strtol_l.constprop.0+0xc6>
 8003f90:	3c57      	subs	r4, #87	@ 0x57
 8003f92:	e7d8      	b.n	8003f46 <_strtol_l.constprop.0+0x72>
 8003f94:	f04f 32ff 	mov.w	r2, #4294967295
 8003f98:	e7e1      	b.n	8003f5e <_strtol_l.constprop.0+0x8a>
 8003f9a:	1c53      	adds	r3, r2, #1
 8003f9c:	d108      	bne.n	8003fb0 <_strtol_l.constprop.0+0xdc>
 8003f9e:	2322      	movs	r3, #34	@ 0x22
 8003fa0:	f8ce 3000 	str.w	r3, [lr]
 8003fa4:	4660      	mov	r0, ip
 8003fa6:	f1b8 0f00 	cmp.w	r8, #0
 8003faa:	d0a0      	beq.n	8003eee <_strtol_l.constprop.0+0x1a>
 8003fac:	1e69      	subs	r1, r5, #1
 8003fae:	e006      	b.n	8003fbe <_strtol_l.constprop.0+0xea>
 8003fb0:	b106      	cbz	r6, 8003fb4 <_strtol_l.constprop.0+0xe0>
 8003fb2:	4240      	negs	r0, r0
 8003fb4:	f1b8 0f00 	cmp.w	r8, #0
 8003fb8:	d099      	beq.n	8003eee <_strtol_l.constprop.0+0x1a>
 8003fba:	2a00      	cmp	r2, #0
 8003fbc:	d1f6      	bne.n	8003fac <_strtol_l.constprop.0+0xd8>
 8003fbe:	f8c8 1000 	str.w	r1, [r8]
 8003fc2:	e794      	b.n	8003eee <_strtol_l.constprop.0+0x1a>
 8003fc4:	0800d461 	.word	0x0800d461

08003fc8 <_strtol_r>:
 8003fc8:	f7ff bf84 	b.w	8003ed4 <_strtol_l.constprop.0>

08003fcc <strtol>:
 8003fcc:	4613      	mov	r3, r2
 8003fce:	460a      	mov	r2, r1
 8003fd0:	4601      	mov	r1, r0
 8003fd2:	4802      	ldr	r0, [pc, #8]	@ (8003fdc <strtol+0x10>)
 8003fd4:	6800      	ldr	r0, [r0, #0]
 8003fd6:	f7ff bf7d 	b.w	8003ed4 <_strtol_l.constprop.0>
 8003fda:	bf00      	nop
 8003fdc:	20000034 	.word	0x20000034

08003fe0 <__cvt>:
 8003fe0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fe4:	ec57 6b10 	vmov	r6, r7, d0
 8003fe8:	2f00      	cmp	r7, #0
 8003fea:	460c      	mov	r4, r1
 8003fec:	4619      	mov	r1, r3
 8003fee:	463b      	mov	r3, r7
 8003ff0:	bfbb      	ittet	lt
 8003ff2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003ff6:	461f      	movlt	r7, r3
 8003ff8:	2300      	movge	r3, #0
 8003ffa:	232d      	movlt	r3, #45	@ 0x2d
 8003ffc:	700b      	strb	r3, [r1, #0]
 8003ffe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004000:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004004:	4691      	mov	r9, r2
 8004006:	f023 0820 	bic.w	r8, r3, #32
 800400a:	bfbc      	itt	lt
 800400c:	4632      	movlt	r2, r6
 800400e:	4616      	movlt	r6, r2
 8004010:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004014:	d005      	beq.n	8004022 <__cvt+0x42>
 8004016:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800401a:	d100      	bne.n	800401e <__cvt+0x3e>
 800401c:	3401      	adds	r4, #1
 800401e:	2102      	movs	r1, #2
 8004020:	e000      	b.n	8004024 <__cvt+0x44>
 8004022:	2103      	movs	r1, #3
 8004024:	ab03      	add	r3, sp, #12
 8004026:	9301      	str	r3, [sp, #4]
 8004028:	ab02      	add	r3, sp, #8
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	ec47 6b10 	vmov	d0, r6, r7
 8004030:	4653      	mov	r3, sl
 8004032:	4622      	mov	r2, r4
 8004034:	f001 f874 	bl	8005120 <_dtoa_r>
 8004038:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800403c:	4605      	mov	r5, r0
 800403e:	d119      	bne.n	8004074 <__cvt+0x94>
 8004040:	f019 0f01 	tst.w	r9, #1
 8004044:	d00e      	beq.n	8004064 <__cvt+0x84>
 8004046:	eb00 0904 	add.w	r9, r0, r4
 800404a:	2200      	movs	r2, #0
 800404c:	2300      	movs	r3, #0
 800404e:	4630      	mov	r0, r6
 8004050:	4639      	mov	r1, r7
 8004052:	f7fc fd41 	bl	8000ad8 <__aeabi_dcmpeq>
 8004056:	b108      	cbz	r0, 800405c <__cvt+0x7c>
 8004058:	f8cd 900c 	str.w	r9, [sp, #12]
 800405c:	2230      	movs	r2, #48	@ 0x30
 800405e:	9b03      	ldr	r3, [sp, #12]
 8004060:	454b      	cmp	r3, r9
 8004062:	d31e      	bcc.n	80040a2 <__cvt+0xc2>
 8004064:	9b03      	ldr	r3, [sp, #12]
 8004066:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004068:	1b5b      	subs	r3, r3, r5
 800406a:	4628      	mov	r0, r5
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	b004      	add	sp, #16
 8004070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004074:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004078:	eb00 0904 	add.w	r9, r0, r4
 800407c:	d1e5      	bne.n	800404a <__cvt+0x6a>
 800407e:	7803      	ldrb	r3, [r0, #0]
 8004080:	2b30      	cmp	r3, #48	@ 0x30
 8004082:	d10a      	bne.n	800409a <__cvt+0xba>
 8004084:	2200      	movs	r2, #0
 8004086:	2300      	movs	r3, #0
 8004088:	4630      	mov	r0, r6
 800408a:	4639      	mov	r1, r7
 800408c:	f7fc fd24 	bl	8000ad8 <__aeabi_dcmpeq>
 8004090:	b918      	cbnz	r0, 800409a <__cvt+0xba>
 8004092:	f1c4 0401 	rsb	r4, r4, #1
 8004096:	f8ca 4000 	str.w	r4, [sl]
 800409a:	f8da 3000 	ldr.w	r3, [sl]
 800409e:	4499      	add	r9, r3
 80040a0:	e7d3      	b.n	800404a <__cvt+0x6a>
 80040a2:	1c59      	adds	r1, r3, #1
 80040a4:	9103      	str	r1, [sp, #12]
 80040a6:	701a      	strb	r2, [r3, #0]
 80040a8:	e7d9      	b.n	800405e <__cvt+0x7e>

080040aa <__exponent>:
 80040aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040ac:	2900      	cmp	r1, #0
 80040ae:	bfba      	itte	lt
 80040b0:	4249      	neglt	r1, r1
 80040b2:	232d      	movlt	r3, #45	@ 0x2d
 80040b4:	232b      	movge	r3, #43	@ 0x2b
 80040b6:	2909      	cmp	r1, #9
 80040b8:	7002      	strb	r2, [r0, #0]
 80040ba:	7043      	strb	r3, [r0, #1]
 80040bc:	dd29      	ble.n	8004112 <__exponent+0x68>
 80040be:	f10d 0307 	add.w	r3, sp, #7
 80040c2:	461d      	mov	r5, r3
 80040c4:	270a      	movs	r7, #10
 80040c6:	461a      	mov	r2, r3
 80040c8:	fbb1 f6f7 	udiv	r6, r1, r7
 80040cc:	fb07 1416 	mls	r4, r7, r6, r1
 80040d0:	3430      	adds	r4, #48	@ 0x30
 80040d2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80040d6:	460c      	mov	r4, r1
 80040d8:	2c63      	cmp	r4, #99	@ 0x63
 80040da:	f103 33ff 	add.w	r3, r3, #4294967295
 80040de:	4631      	mov	r1, r6
 80040e0:	dcf1      	bgt.n	80040c6 <__exponent+0x1c>
 80040e2:	3130      	adds	r1, #48	@ 0x30
 80040e4:	1e94      	subs	r4, r2, #2
 80040e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80040ea:	1c41      	adds	r1, r0, #1
 80040ec:	4623      	mov	r3, r4
 80040ee:	42ab      	cmp	r3, r5
 80040f0:	d30a      	bcc.n	8004108 <__exponent+0x5e>
 80040f2:	f10d 0309 	add.w	r3, sp, #9
 80040f6:	1a9b      	subs	r3, r3, r2
 80040f8:	42ac      	cmp	r4, r5
 80040fa:	bf88      	it	hi
 80040fc:	2300      	movhi	r3, #0
 80040fe:	3302      	adds	r3, #2
 8004100:	4403      	add	r3, r0
 8004102:	1a18      	subs	r0, r3, r0
 8004104:	b003      	add	sp, #12
 8004106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004108:	f813 6b01 	ldrb.w	r6, [r3], #1
 800410c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004110:	e7ed      	b.n	80040ee <__exponent+0x44>
 8004112:	2330      	movs	r3, #48	@ 0x30
 8004114:	3130      	adds	r1, #48	@ 0x30
 8004116:	7083      	strb	r3, [r0, #2]
 8004118:	70c1      	strb	r1, [r0, #3]
 800411a:	1d03      	adds	r3, r0, #4
 800411c:	e7f1      	b.n	8004102 <__exponent+0x58>
	...

08004120 <_printf_float>:
 8004120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004124:	b08d      	sub	sp, #52	@ 0x34
 8004126:	460c      	mov	r4, r1
 8004128:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800412c:	4616      	mov	r6, r2
 800412e:	461f      	mov	r7, r3
 8004130:	4605      	mov	r5, r0
 8004132:	f000 feef 	bl	8004f14 <_localeconv_r>
 8004136:	6803      	ldr	r3, [r0, #0]
 8004138:	9304      	str	r3, [sp, #16]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fc f8a0 	bl	8000280 <strlen>
 8004140:	2300      	movs	r3, #0
 8004142:	930a      	str	r3, [sp, #40]	@ 0x28
 8004144:	f8d8 3000 	ldr.w	r3, [r8]
 8004148:	9005      	str	r0, [sp, #20]
 800414a:	3307      	adds	r3, #7
 800414c:	f023 0307 	bic.w	r3, r3, #7
 8004150:	f103 0208 	add.w	r2, r3, #8
 8004154:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004158:	f8d4 b000 	ldr.w	fp, [r4]
 800415c:	f8c8 2000 	str.w	r2, [r8]
 8004160:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004164:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004168:	9307      	str	r3, [sp, #28]
 800416a:	f8cd 8018 	str.w	r8, [sp, #24]
 800416e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004172:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004176:	4b9c      	ldr	r3, [pc, #624]	@ (80043e8 <_printf_float+0x2c8>)
 8004178:	f04f 32ff 	mov.w	r2, #4294967295
 800417c:	f7fc fcde 	bl	8000b3c <__aeabi_dcmpun>
 8004180:	bb70      	cbnz	r0, 80041e0 <_printf_float+0xc0>
 8004182:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004186:	4b98      	ldr	r3, [pc, #608]	@ (80043e8 <_printf_float+0x2c8>)
 8004188:	f04f 32ff 	mov.w	r2, #4294967295
 800418c:	f7fc fcb8 	bl	8000b00 <__aeabi_dcmple>
 8004190:	bb30      	cbnz	r0, 80041e0 <_printf_float+0xc0>
 8004192:	2200      	movs	r2, #0
 8004194:	2300      	movs	r3, #0
 8004196:	4640      	mov	r0, r8
 8004198:	4649      	mov	r1, r9
 800419a:	f7fc fca7 	bl	8000aec <__aeabi_dcmplt>
 800419e:	b110      	cbz	r0, 80041a6 <_printf_float+0x86>
 80041a0:	232d      	movs	r3, #45	@ 0x2d
 80041a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041a6:	4a91      	ldr	r2, [pc, #580]	@ (80043ec <_printf_float+0x2cc>)
 80041a8:	4b91      	ldr	r3, [pc, #580]	@ (80043f0 <_printf_float+0x2d0>)
 80041aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80041ae:	bf94      	ite	ls
 80041b0:	4690      	movls	r8, r2
 80041b2:	4698      	movhi	r8, r3
 80041b4:	2303      	movs	r3, #3
 80041b6:	6123      	str	r3, [r4, #16]
 80041b8:	f02b 0304 	bic.w	r3, fp, #4
 80041bc:	6023      	str	r3, [r4, #0]
 80041be:	f04f 0900 	mov.w	r9, #0
 80041c2:	9700      	str	r7, [sp, #0]
 80041c4:	4633      	mov	r3, r6
 80041c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80041c8:	4621      	mov	r1, r4
 80041ca:	4628      	mov	r0, r5
 80041cc:	f000 f9d2 	bl	8004574 <_printf_common>
 80041d0:	3001      	adds	r0, #1
 80041d2:	f040 808d 	bne.w	80042f0 <_printf_float+0x1d0>
 80041d6:	f04f 30ff 	mov.w	r0, #4294967295
 80041da:	b00d      	add	sp, #52	@ 0x34
 80041dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e0:	4642      	mov	r2, r8
 80041e2:	464b      	mov	r3, r9
 80041e4:	4640      	mov	r0, r8
 80041e6:	4649      	mov	r1, r9
 80041e8:	f7fc fca8 	bl	8000b3c <__aeabi_dcmpun>
 80041ec:	b140      	cbz	r0, 8004200 <_printf_float+0xe0>
 80041ee:	464b      	mov	r3, r9
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	bfbc      	itt	lt
 80041f4:	232d      	movlt	r3, #45	@ 0x2d
 80041f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80041fa:	4a7e      	ldr	r2, [pc, #504]	@ (80043f4 <_printf_float+0x2d4>)
 80041fc:	4b7e      	ldr	r3, [pc, #504]	@ (80043f8 <_printf_float+0x2d8>)
 80041fe:	e7d4      	b.n	80041aa <_printf_float+0x8a>
 8004200:	6863      	ldr	r3, [r4, #4]
 8004202:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004206:	9206      	str	r2, [sp, #24]
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	d13b      	bne.n	8004284 <_printf_float+0x164>
 800420c:	2306      	movs	r3, #6
 800420e:	6063      	str	r3, [r4, #4]
 8004210:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004214:	2300      	movs	r3, #0
 8004216:	6022      	str	r2, [r4, #0]
 8004218:	9303      	str	r3, [sp, #12]
 800421a:	ab0a      	add	r3, sp, #40	@ 0x28
 800421c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004220:	ab09      	add	r3, sp, #36	@ 0x24
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	6861      	ldr	r1, [r4, #4]
 8004226:	ec49 8b10 	vmov	d0, r8, r9
 800422a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800422e:	4628      	mov	r0, r5
 8004230:	f7ff fed6 	bl	8003fe0 <__cvt>
 8004234:	9b06      	ldr	r3, [sp, #24]
 8004236:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004238:	2b47      	cmp	r3, #71	@ 0x47
 800423a:	4680      	mov	r8, r0
 800423c:	d129      	bne.n	8004292 <_printf_float+0x172>
 800423e:	1cc8      	adds	r0, r1, #3
 8004240:	db02      	blt.n	8004248 <_printf_float+0x128>
 8004242:	6863      	ldr	r3, [r4, #4]
 8004244:	4299      	cmp	r1, r3
 8004246:	dd41      	ble.n	80042cc <_printf_float+0x1ac>
 8004248:	f1aa 0a02 	sub.w	sl, sl, #2
 800424c:	fa5f fa8a 	uxtb.w	sl, sl
 8004250:	3901      	subs	r1, #1
 8004252:	4652      	mov	r2, sl
 8004254:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004258:	9109      	str	r1, [sp, #36]	@ 0x24
 800425a:	f7ff ff26 	bl	80040aa <__exponent>
 800425e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004260:	1813      	adds	r3, r2, r0
 8004262:	2a01      	cmp	r2, #1
 8004264:	4681      	mov	r9, r0
 8004266:	6123      	str	r3, [r4, #16]
 8004268:	dc02      	bgt.n	8004270 <_printf_float+0x150>
 800426a:	6822      	ldr	r2, [r4, #0]
 800426c:	07d2      	lsls	r2, r2, #31
 800426e:	d501      	bpl.n	8004274 <_printf_float+0x154>
 8004270:	3301      	adds	r3, #1
 8004272:	6123      	str	r3, [r4, #16]
 8004274:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0a2      	beq.n	80041c2 <_printf_float+0xa2>
 800427c:	232d      	movs	r3, #45	@ 0x2d
 800427e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004282:	e79e      	b.n	80041c2 <_printf_float+0xa2>
 8004284:	9a06      	ldr	r2, [sp, #24]
 8004286:	2a47      	cmp	r2, #71	@ 0x47
 8004288:	d1c2      	bne.n	8004210 <_printf_float+0xf0>
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1c0      	bne.n	8004210 <_printf_float+0xf0>
 800428e:	2301      	movs	r3, #1
 8004290:	e7bd      	b.n	800420e <_printf_float+0xee>
 8004292:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004296:	d9db      	bls.n	8004250 <_printf_float+0x130>
 8004298:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800429c:	d118      	bne.n	80042d0 <_printf_float+0x1b0>
 800429e:	2900      	cmp	r1, #0
 80042a0:	6863      	ldr	r3, [r4, #4]
 80042a2:	dd0b      	ble.n	80042bc <_printf_float+0x19c>
 80042a4:	6121      	str	r1, [r4, #16]
 80042a6:	b913      	cbnz	r3, 80042ae <_printf_float+0x18e>
 80042a8:	6822      	ldr	r2, [r4, #0]
 80042aa:	07d0      	lsls	r0, r2, #31
 80042ac:	d502      	bpl.n	80042b4 <_printf_float+0x194>
 80042ae:	3301      	adds	r3, #1
 80042b0:	440b      	add	r3, r1
 80042b2:	6123      	str	r3, [r4, #16]
 80042b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80042b6:	f04f 0900 	mov.w	r9, #0
 80042ba:	e7db      	b.n	8004274 <_printf_float+0x154>
 80042bc:	b913      	cbnz	r3, 80042c4 <_printf_float+0x1a4>
 80042be:	6822      	ldr	r2, [r4, #0]
 80042c0:	07d2      	lsls	r2, r2, #31
 80042c2:	d501      	bpl.n	80042c8 <_printf_float+0x1a8>
 80042c4:	3302      	adds	r3, #2
 80042c6:	e7f4      	b.n	80042b2 <_printf_float+0x192>
 80042c8:	2301      	movs	r3, #1
 80042ca:	e7f2      	b.n	80042b2 <_printf_float+0x192>
 80042cc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80042d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80042d2:	4299      	cmp	r1, r3
 80042d4:	db05      	blt.n	80042e2 <_printf_float+0x1c2>
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	6121      	str	r1, [r4, #16]
 80042da:	07d8      	lsls	r0, r3, #31
 80042dc:	d5ea      	bpl.n	80042b4 <_printf_float+0x194>
 80042de:	1c4b      	adds	r3, r1, #1
 80042e0:	e7e7      	b.n	80042b2 <_printf_float+0x192>
 80042e2:	2900      	cmp	r1, #0
 80042e4:	bfd4      	ite	le
 80042e6:	f1c1 0202 	rsble	r2, r1, #2
 80042ea:	2201      	movgt	r2, #1
 80042ec:	4413      	add	r3, r2
 80042ee:	e7e0      	b.n	80042b2 <_printf_float+0x192>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	055a      	lsls	r2, r3, #21
 80042f4:	d407      	bmi.n	8004306 <_printf_float+0x1e6>
 80042f6:	6923      	ldr	r3, [r4, #16]
 80042f8:	4642      	mov	r2, r8
 80042fa:	4631      	mov	r1, r6
 80042fc:	4628      	mov	r0, r5
 80042fe:	47b8      	blx	r7
 8004300:	3001      	adds	r0, #1
 8004302:	d12b      	bne.n	800435c <_printf_float+0x23c>
 8004304:	e767      	b.n	80041d6 <_printf_float+0xb6>
 8004306:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800430a:	f240 80dd 	bls.w	80044c8 <_printf_float+0x3a8>
 800430e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004312:	2200      	movs	r2, #0
 8004314:	2300      	movs	r3, #0
 8004316:	f7fc fbdf 	bl	8000ad8 <__aeabi_dcmpeq>
 800431a:	2800      	cmp	r0, #0
 800431c:	d033      	beq.n	8004386 <_printf_float+0x266>
 800431e:	4a37      	ldr	r2, [pc, #220]	@ (80043fc <_printf_float+0x2dc>)
 8004320:	2301      	movs	r3, #1
 8004322:	4631      	mov	r1, r6
 8004324:	4628      	mov	r0, r5
 8004326:	47b8      	blx	r7
 8004328:	3001      	adds	r0, #1
 800432a:	f43f af54 	beq.w	80041d6 <_printf_float+0xb6>
 800432e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004332:	4543      	cmp	r3, r8
 8004334:	db02      	blt.n	800433c <_printf_float+0x21c>
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	07d8      	lsls	r0, r3, #31
 800433a:	d50f      	bpl.n	800435c <_printf_float+0x23c>
 800433c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004340:	4631      	mov	r1, r6
 8004342:	4628      	mov	r0, r5
 8004344:	47b8      	blx	r7
 8004346:	3001      	adds	r0, #1
 8004348:	f43f af45 	beq.w	80041d6 <_printf_float+0xb6>
 800434c:	f04f 0900 	mov.w	r9, #0
 8004350:	f108 38ff 	add.w	r8, r8, #4294967295
 8004354:	f104 0a1a 	add.w	sl, r4, #26
 8004358:	45c8      	cmp	r8, r9
 800435a:	dc09      	bgt.n	8004370 <_printf_float+0x250>
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	079b      	lsls	r3, r3, #30
 8004360:	f100 8103 	bmi.w	800456a <_printf_float+0x44a>
 8004364:	68e0      	ldr	r0, [r4, #12]
 8004366:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004368:	4298      	cmp	r0, r3
 800436a:	bfb8      	it	lt
 800436c:	4618      	movlt	r0, r3
 800436e:	e734      	b.n	80041da <_printf_float+0xba>
 8004370:	2301      	movs	r3, #1
 8004372:	4652      	mov	r2, sl
 8004374:	4631      	mov	r1, r6
 8004376:	4628      	mov	r0, r5
 8004378:	47b8      	blx	r7
 800437a:	3001      	adds	r0, #1
 800437c:	f43f af2b 	beq.w	80041d6 <_printf_float+0xb6>
 8004380:	f109 0901 	add.w	r9, r9, #1
 8004384:	e7e8      	b.n	8004358 <_printf_float+0x238>
 8004386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004388:	2b00      	cmp	r3, #0
 800438a:	dc39      	bgt.n	8004400 <_printf_float+0x2e0>
 800438c:	4a1b      	ldr	r2, [pc, #108]	@ (80043fc <_printf_float+0x2dc>)
 800438e:	2301      	movs	r3, #1
 8004390:	4631      	mov	r1, r6
 8004392:	4628      	mov	r0, r5
 8004394:	47b8      	blx	r7
 8004396:	3001      	adds	r0, #1
 8004398:	f43f af1d 	beq.w	80041d6 <_printf_float+0xb6>
 800439c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80043a0:	ea59 0303 	orrs.w	r3, r9, r3
 80043a4:	d102      	bne.n	80043ac <_printf_float+0x28c>
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	07d9      	lsls	r1, r3, #31
 80043aa:	d5d7      	bpl.n	800435c <_printf_float+0x23c>
 80043ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043b0:	4631      	mov	r1, r6
 80043b2:	4628      	mov	r0, r5
 80043b4:	47b8      	blx	r7
 80043b6:	3001      	adds	r0, #1
 80043b8:	f43f af0d 	beq.w	80041d6 <_printf_float+0xb6>
 80043bc:	f04f 0a00 	mov.w	sl, #0
 80043c0:	f104 0b1a 	add.w	fp, r4, #26
 80043c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043c6:	425b      	negs	r3, r3
 80043c8:	4553      	cmp	r3, sl
 80043ca:	dc01      	bgt.n	80043d0 <_printf_float+0x2b0>
 80043cc:	464b      	mov	r3, r9
 80043ce:	e793      	b.n	80042f8 <_printf_float+0x1d8>
 80043d0:	2301      	movs	r3, #1
 80043d2:	465a      	mov	r2, fp
 80043d4:	4631      	mov	r1, r6
 80043d6:	4628      	mov	r0, r5
 80043d8:	47b8      	blx	r7
 80043da:	3001      	adds	r0, #1
 80043dc:	f43f aefb 	beq.w	80041d6 <_printf_float+0xb6>
 80043e0:	f10a 0a01 	add.w	sl, sl, #1
 80043e4:	e7ee      	b.n	80043c4 <_printf_float+0x2a4>
 80043e6:	bf00      	nop
 80043e8:	7fefffff 	.word	0x7fefffff
 80043ec:	0800d561 	.word	0x0800d561
 80043f0:	0800d565 	.word	0x0800d565
 80043f4:	0800d569 	.word	0x0800d569
 80043f8:	0800d56d 	.word	0x0800d56d
 80043fc:	0800d571 	.word	0x0800d571
 8004400:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004402:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004406:	4553      	cmp	r3, sl
 8004408:	bfa8      	it	ge
 800440a:	4653      	movge	r3, sl
 800440c:	2b00      	cmp	r3, #0
 800440e:	4699      	mov	r9, r3
 8004410:	dc36      	bgt.n	8004480 <_printf_float+0x360>
 8004412:	f04f 0b00 	mov.w	fp, #0
 8004416:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800441a:	f104 021a 	add.w	r2, r4, #26
 800441e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004420:	9306      	str	r3, [sp, #24]
 8004422:	eba3 0309 	sub.w	r3, r3, r9
 8004426:	455b      	cmp	r3, fp
 8004428:	dc31      	bgt.n	800448e <_printf_float+0x36e>
 800442a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800442c:	459a      	cmp	sl, r3
 800442e:	dc3a      	bgt.n	80044a6 <_printf_float+0x386>
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	07da      	lsls	r2, r3, #31
 8004434:	d437      	bmi.n	80044a6 <_printf_float+0x386>
 8004436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004438:	ebaa 0903 	sub.w	r9, sl, r3
 800443c:	9b06      	ldr	r3, [sp, #24]
 800443e:	ebaa 0303 	sub.w	r3, sl, r3
 8004442:	4599      	cmp	r9, r3
 8004444:	bfa8      	it	ge
 8004446:	4699      	movge	r9, r3
 8004448:	f1b9 0f00 	cmp.w	r9, #0
 800444c:	dc33      	bgt.n	80044b6 <_printf_float+0x396>
 800444e:	f04f 0800 	mov.w	r8, #0
 8004452:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004456:	f104 0b1a 	add.w	fp, r4, #26
 800445a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800445c:	ebaa 0303 	sub.w	r3, sl, r3
 8004460:	eba3 0309 	sub.w	r3, r3, r9
 8004464:	4543      	cmp	r3, r8
 8004466:	f77f af79 	ble.w	800435c <_printf_float+0x23c>
 800446a:	2301      	movs	r3, #1
 800446c:	465a      	mov	r2, fp
 800446e:	4631      	mov	r1, r6
 8004470:	4628      	mov	r0, r5
 8004472:	47b8      	blx	r7
 8004474:	3001      	adds	r0, #1
 8004476:	f43f aeae 	beq.w	80041d6 <_printf_float+0xb6>
 800447a:	f108 0801 	add.w	r8, r8, #1
 800447e:	e7ec      	b.n	800445a <_printf_float+0x33a>
 8004480:	4642      	mov	r2, r8
 8004482:	4631      	mov	r1, r6
 8004484:	4628      	mov	r0, r5
 8004486:	47b8      	blx	r7
 8004488:	3001      	adds	r0, #1
 800448a:	d1c2      	bne.n	8004412 <_printf_float+0x2f2>
 800448c:	e6a3      	b.n	80041d6 <_printf_float+0xb6>
 800448e:	2301      	movs	r3, #1
 8004490:	4631      	mov	r1, r6
 8004492:	4628      	mov	r0, r5
 8004494:	9206      	str	r2, [sp, #24]
 8004496:	47b8      	blx	r7
 8004498:	3001      	adds	r0, #1
 800449a:	f43f ae9c 	beq.w	80041d6 <_printf_float+0xb6>
 800449e:	9a06      	ldr	r2, [sp, #24]
 80044a0:	f10b 0b01 	add.w	fp, fp, #1
 80044a4:	e7bb      	b.n	800441e <_printf_float+0x2fe>
 80044a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044aa:	4631      	mov	r1, r6
 80044ac:	4628      	mov	r0, r5
 80044ae:	47b8      	blx	r7
 80044b0:	3001      	adds	r0, #1
 80044b2:	d1c0      	bne.n	8004436 <_printf_float+0x316>
 80044b4:	e68f      	b.n	80041d6 <_printf_float+0xb6>
 80044b6:	9a06      	ldr	r2, [sp, #24]
 80044b8:	464b      	mov	r3, r9
 80044ba:	4442      	add	r2, r8
 80044bc:	4631      	mov	r1, r6
 80044be:	4628      	mov	r0, r5
 80044c0:	47b8      	blx	r7
 80044c2:	3001      	adds	r0, #1
 80044c4:	d1c3      	bne.n	800444e <_printf_float+0x32e>
 80044c6:	e686      	b.n	80041d6 <_printf_float+0xb6>
 80044c8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80044cc:	f1ba 0f01 	cmp.w	sl, #1
 80044d0:	dc01      	bgt.n	80044d6 <_printf_float+0x3b6>
 80044d2:	07db      	lsls	r3, r3, #31
 80044d4:	d536      	bpl.n	8004544 <_printf_float+0x424>
 80044d6:	2301      	movs	r3, #1
 80044d8:	4642      	mov	r2, r8
 80044da:	4631      	mov	r1, r6
 80044dc:	4628      	mov	r0, r5
 80044de:	47b8      	blx	r7
 80044e0:	3001      	adds	r0, #1
 80044e2:	f43f ae78 	beq.w	80041d6 <_printf_float+0xb6>
 80044e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80044ea:	4631      	mov	r1, r6
 80044ec:	4628      	mov	r0, r5
 80044ee:	47b8      	blx	r7
 80044f0:	3001      	adds	r0, #1
 80044f2:	f43f ae70 	beq.w	80041d6 <_printf_float+0xb6>
 80044f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80044fa:	2200      	movs	r2, #0
 80044fc:	2300      	movs	r3, #0
 80044fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004502:	f7fc fae9 	bl	8000ad8 <__aeabi_dcmpeq>
 8004506:	b9c0      	cbnz	r0, 800453a <_printf_float+0x41a>
 8004508:	4653      	mov	r3, sl
 800450a:	f108 0201 	add.w	r2, r8, #1
 800450e:	4631      	mov	r1, r6
 8004510:	4628      	mov	r0, r5
 8004512:	47b8      	blx	r7
 8004514:	3001      	adds	r0, #1
 8004516:	d10c      	bne.n	8004532 <_printf_float+0x412>
 8004518:	e65d      	b.n	80041d6 <_printf_float+0xb6>
 800451a:	2301      	movs	r3, #1
 800451c:	465a      	mov	r2, fp
 800451e:	4631      	mov	r1, r6
 8004520:	4628      	mov	r0, r5
 8004522:	47b8      	blx	r7
 8004524:	3001      	adds	r0, #1
 8004526:	f43f ae56 	beq.w	80041d6 <_printf_float+0xb6>
 800452a:	f108 0801 	add.w	r8, r8, #1
 800452e:	45d0      	cmp	r8, sl
 8004530:	dbf3      	blt.n	800451a <_printf_float+0x3fa>
 8004532:	464b      	mov	r3, r9
 8004534:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004538:	e6df      	b.n	80042fa <_printf_float+0x1da>
 800453a:	f04f 0800 	mov.w	r8, #0
 800453e:	f104 0b1a 	add.w	fp, r4, #26
 8004542:	e7f4      	b.n	800452e <_printf_float+0x40e>
 8004544:	2301      	movs	r3, #1
 8004546:	4642      	mov	r2, r8
 8004548:	e7e1      	b.n	800450e <_printf_float+0x3ee>
 800454a:	2301      	movs	r3, #1
 800454c:	464a      	mov	r2, r9
 800454e:	4631      	mov	r1, r6
 8004550:	4628      	mov	r0, r5
 8004552:	47b8      	blx	r7
 8004554:	3001      	adds	r0, #1
 8004556:	f43f ae3e 	beq.w	80041d6 <_printf_float+0xb6>
 800455a:	f108 0801 	add.w	r8, r8, #1
 800455e:	68e3      	ldr	r3, [r4, #12]
 8004560:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004562:	1a5b      	subs	r3, r3, r1
 8004564:	4543      	cmp	r3, r8
 8004566:	dcf0      	bgt.n	800454a <_printf_float+0x42a>
 8004568:	e6fc      	b.n	8004364 <_printf_float+0x244>
 800456a:	f04f 0800 	mov.w	r8, #0
 800456e:	f104 0919 	add.w	r9, r4, #25
 8004572:	e7f4      	b.n	800455e <_printf_float+0x43e>

08004574 <_printf_common>:
 8004574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004578:	4616      	mov	r6, r2
 800457a:	4698      	mov	r8, r3
 800457c:	688a      	ldr	r2, [r1, #8]
 800457e:	690b      	ldr	r3, [r1, #16]
 8004580:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004584:	4293      	cmp	r3, r2
 8004586:	bfb8      	it	lt
 8004588:	4613      	movlt	r3, r2
 800458a:	6033      	str	r3, [r6, #0]
 800458c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004590:	4607      	mov	r7, r0
 8004592:	460c      	mov	r4, r1
 8004594:	b10a      	cbz	r2, 800459a <_printf_common+0x26>
 8004596:	3301      	adds	r3, #1
 8004598:	6033      	str	r3, [r6, #0]
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	0699      	lsls	r1, r3, #26
 800459e:	bf42      	ittt	mi
 80045a0:	6833      	ldrmi	r3, [r6, #0]
 80045a2:	3302      	addmi	r3, #2
 80045a4:	6033      	strmi	r3, [r6, #0]
 80045a6:	6825      	ldr	r5, [r4, #0]
 80045a8:	f015 0506 	ands.w	r5, r5, #6
 80045ac:	d106      	bne.n	80045bc <_printf_common+0x48>
 80045ae:	f104 0a19 	add.w	sl, r4, #25
 80045b2:	68e3      	ldr	r3, [r4, #12]
 80045b4:	6832      	ldr	r2, [r6, #0]
 80045b6:	1a9b      	subs	r3, r3, r2
 80045b8:	42ab      	cmp	r3, r5
 80045ba:	dc26      	bgt.n	800460a <_printf_common+0x96>
 80045bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045c0:	6822      	ldr	r2, [r4, #0]
 80045c2:	3b00      	subs	r3, #0
 80045c4:	bf18      	it	ne
 80045c6:	2301      	movne	r3, #1
 80045c8:	0692      	lsls	r2, r2, #26
 80045ca:	d42b      	bmi.n	8004624 <_printf_common+0xb0>
 80045cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045d0:	4641      	mov	r1, r8
 80045d2:	4638      	mov	r0, r7
 80045d4:	47c8      	blx	r9
 80045d6:	3001      	adds	r0, #1
 80045d8:	d01e      	beq.n	8004618 <_printf_common+0xa4>
 80045da:	6823      	ldr	r3, [r4, #0]
 80045dc:	6922      	ldr	r2, [r4, #16]
 80045de:	f003 0306 	and.w	r3, r3, #6
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	bf02      	ittt	eq
 80045e6:	68e5      	ldreq	r5, [r4, #12]
 80045e8:	6833      	ldreq	r3, [r6, #0]
 80045ea:	1aed      	subeq	r5, r5, r3
 80045ec:	68a3      	ldr	r3, [r4, #8]
 80045ee:	bf0c      	ite	eq
 80045f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045f4:	2500      	movne	r5, #0
 80045f6:	4293      	cmp	r3, r2
 80045f8:	bfc4      	itt	gt
 80045fa:	1a9b      	subgt	r3, r3, r2
 80045fc:	18ed      	addgt	r5, r5, r3
 80045fe:	2600      	movs	r6, #0
 8004600:	341a      	adds	r4, #26
 8004602:	42b5      	cmp	r5, r6
 8004604:	d11a      	bne.n	800463c <_printf_common+0xc8>
 8004606:	2000      	movs	r0, #0
 8004608:	e008      	b.n	800461c <_printf_common+0xa8>
 800460a:	2301      	movs	r3, #1
 800460c:	4652      	mov	r2, sl
 800460e:	4641      	mov	r1, r8
 8004610:	4638      	mov	r0, r7
 8004612:	47c8      	blx	r9
 8004614:	3001      	adds	r0, #1
 8004616:	d103      	bne.n	8004620 <_printf_common+0xac>
 8004618:	f04f 30ff 	mov.w	r0, #4294967295
 800461c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004620:	3501      	adds	r5, #1
 8004622:	e7c6      	b.n	80045b2 <_printf_common+0x3e>
 8004624:	18e1      	adds	r1, r4, r3
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	2030      	movs	r0, #48	@ 0x30
 800462a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800462e:	4422      	add	r2, r4
 8004630:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004634:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004638:	3302      	adds	r3, #2
 800463a:	e7c7      	b.n	80045cc <_printf_common+0x58>
 800463c:	2301      	movs	r3, #1
 800463e:	4622      	mov	r2, r4
 8004640:	4641      	mov	r1, r8
 8004642:	4638      	mov	r0, r7
 8004644:	47c8      	blx	r9
 8004646:	3001      	adds	r0, #1
 8004648:	d0e6      	beq.n	8004618 <_printf_common+0xa4>
 800464a:	3601      	adds	r6, #1
 800464c:	e7d9      	b.n	8004602 <_printf_common+0x8e>
	...

08004650 <_printf_i>:
 8004650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004654:	7e0f      	ldrb	r7, [r1, #24]
 8004656:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004658:	2f78      	cmp	r7, #120	@ 0x78
 800465a:	4691      	mov	r9, r2
 800465c:	4680      	mov	r8, r0
 800465e:	460c      	mov	r4, r1
 8004660:	469a      	mov	sl, r3
 8004662:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004666:	d807      	bhi.n	8004678 <_printf_i+0x28>
 8004668:	2f62      	cmp	r7, #98	@ 0x62
 800466a:	d80a      	bhi.n	8004682 <_printf_i+0x32>
 800466c:	2f00      	cmp	r7, #0
 800466e:	f000 80d2 	beq.w	8004816 <_printf_i+0x1c6>
 8004672:	2f58      	cmp	r7, #88	@ 0x58
 8004674:	f000 80b9 	beq.w	80047ea <_printf_i+0x19a>
 8004678:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800467c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004680:	e03a      	b.n	80046f8 <_printf_i+0xa8>
 8004682:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004686:	2b15      	cmp	r3, #21
 8004688:	d8f6      	bhi.n	8004678 <_printf_i+0x28>
 800468a:	a101      	add	r1, pc, #4	@ (adr r1, 8004690 <_printf_i+0x40>)
 800468c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004690:	080046e9 	.word	0x080046e9
 8004694:	080046fd 	.word	0x080046fd
 8004698:	08004679 	.word	0x08004679
 800469c:	08004679 	.word	0x08004679
 80046a0:	08004679 	.word	0x08004679
 80046a4:	08004679 	.word	0x08004679
 80046a8:	080046fd 	.word	0x080046fd
 80046ac:	08004679 	.word	0x08004679
 80046b0:	08004679 	.word	0x08004679
 80046b4:	08004679 	.word	0x08004679
 80046b8:	08004679 	.word	0x08004679
 80046bc:	080047fd 	.word	0x080047fd
 80046c0:	08004727 	.word	0x08004727
 80046c4:	080047b7 	.word	0x080047b7
 80046c8:	08004679 	.word	0x08004679
 80046cc:	08004679 	.word	0x08004679
 80046d0:	0800481f 	.word	0x0800481f
 80046d4:	08004679 	.word	0x08004679
 80046d8:	08004727 	.word	0x08004727
 80046dc:	08004679 	.word	0x08004679
 80046e0:	08004679 	.word	0x08004679
 80046e4:	080047bf 	.word	0x080047bf
 80046e8:	6833      	ldr	r3, [r6, #0]
 80046ea:	1d1a      	adds	r2, r3, #4
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6032      	str	r2, [r6, #0]
 80046f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80046f8:	2301      	movs	r3, #1
 80046fa:	e09d      	b.n	8004838 <_printf_i+0x1e8>
 80046fc:	6833      	ldr	r3, [r6, #0]
 80046fe:	6820      	ldr	r0, [r4, #0]
 8004700:	1d19      	adds	r1, r3, #4
 8004702:	6031      	str	r1, [r6, #0]
 8004704:	0606      	lsls	r6, r0, #24
 8004706:	d501      	bpl.n	800470c <_printf_i+0xbc>
 8004708:	681d      	ldr	r5, [r3, #0]
 800470a:	e003      	b.n	8004714 <_printf_i+0xc4>
 800470c:	0645      	lsls	r5, r0, #25
 800470e:	d5fb      	bpl.n	8004708 <_printf_i+0xb8>
 8004710:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004714:	2d00      	cmp	r5, #0
 8004716:	da03      	bge.n	8004720 <_printf_i+0xd0>
 8004718:	232d      	movs	r3, #45	@ 0x2d
 800471a:	426d      	negs	r5, r5
 800471c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004720:	4859      	ldr	r0, [pc, #356]	@ (8004888 <_printf_i+0x238>)
 8004722:	230a      	movs	r3, #10
 8004724:	e011      	b.n	800474a <_printf_i+0xfa>
 8004726:	6821      	ldr	r1, [r4, #0]
 8004728:	6833      	ldr	r3, [r6, #0]
 800472a:	0608      	lsls	r0, r1, #24
 800472c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004730:	d402      	bmi.n	8004738 <_printf_i+0xe8>
 8004732:	0649      	lsls	r1, r1, #25
 8004734:	bf48      	it	mi
 8004736:	b2ad      	uxthmi	r5, r5
 8004738:	2f6f      	cmp	r7, #111	@ 0x6f
 800473a:	4853      	ldr	r0, [pc, #332]	@ (8004888 <_printf_i+0x238>)
 800473c:	6033      	str	r3, [r6, #0]
 800473e:	bf14      	ite	ne
 8004740:	230a      	movne	r3, #10
 8004742:	2308      	moveq	r3, #8
 8004744:	2100      	movs	r1, #0
 8004746:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800474a:	6866      	ldr	r6, [r4, #4]
 800474c:	60a6      	str	r6, [r4, #8]
 800474e:	2e00      	cmp	r6, #0
 8004750:	bfa2      	ittt	ge
 8004752:	6821      	ldrge	r1, [r4, #0]
 8004754:	f021 0104 	bicge.w	r1, r1, #4
 8004758:	6021      	strge	r1, [r4, #0]
 800475a:	b90d      	cbnz	r5, 8004760 <_printf_i+0x110>
 800475c:	2e00      	cmp	r6, #0
 800475e:	d04b      	beq.n	80047f8 <_printf_i+0x1a8>
 8004760:	4616      	mov	r6, r2
 8004762:	fbb5 f1f3 	udiv	r1, r5, r3
 8004766:	fb03 5711 	mls	r7, r3, r1, r5
 800476a:	5dc7      	ldrb	r7, [r0, r7]
 800476c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004770:	462f      	mov	r7, r5
 8004772:	42bb      	cmp	r3, r7
 8004774:	460d      	mov	r5, r1
 8004776:	d9f4      	bls.n	8004762 <_printf_i+0x112>
 8004778:	2b08      	cmp	r3, #8
 800477a:	d10b      	bne.n	8004794 <_printf_i+0x144>
 800477c:	6823      	ldr	r3, [r4, #0]
 800477e:	07df      	lsls	r7, r3, #31
 8004780:	d508      	bpl.n	8004794 <_printf_i+0x144>
 8004782:	6923      	ldr	r3, [r4, #16]
 8004784:	6861      	ldr	r1, [r4, #4]
 8004786:	4299      	cmp	r1, r3
 8004788:	bfde      	ittt	le
 800478a:	2330      	movle	r3, #48	@ 0x30
 800478c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004790:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004794:	1b92      	subs	r2, r2, r6
 8004796:	6122      	str	r2, [r4, #16]
 8004798:	f8cd a000 	str.w	sl, [sp]
 800479c:	464b      	mov	r3, r9
 800479e:	aa03      	add	r2, sp, #12
 80047a0:	4621      	mov	r1, r4
 80047a2:	4640      	mov	r0, r8
 80047a4:	f7ff fee6 	bl	8004574 <_printf_common>
 80047a8:	3001      	adds	r0, #1
 80047aa:	d14a      	bne.n	8004842 <_printf_i+0x1f2>
 80047ac:	f04f 30ff 	mov.w	r0, #4294967295
 80047b0:	b004      	add	sp, #16
 80047b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	f043 0320 	orr.w	r3, r3, #32
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	4833      	ldr	r0, [pc, #204]	@ (800488c <_printf_i+0x23c>)
 80047c0:	2778      	movs	r7, #120	@ 0x78
 80047c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047c6:	6823      	ldr	r3, [r4, #0]
 80047c8:	6831      	ldr	r1, [r6, #0]
 80047ca:	061f      	lsls	r7, r3, #24
 80047cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80047d0:	d402      	bmi.n	80047d8 <_printf_i+0x188>
 80047d2:	065f      	lsls	r7, r3, #25
 80047d4:	bf48      	it	mi
 80047d6:	b2ad      	uxthmi	r5, r5
 80047d8:	6031      	str	r1, [r6, #0]
 80047da:	07d9      	lsls	r1, r3, #31
 80047dc:	bf44      	itt	mi
 80047de:	f043 0320 	orrmi.w	r3, r3, #32
 80047e2:	6023      	strmi	r3, [r4, #0]
 80047e4:	b11d      	cbz	r5, 80047ee <_printf_i+0x19e>
 80047e6:	2310      	movs	r3, #16
 80047e8:	e7ac      	b.n	8004744 <_printf_i+0xf4>
 80047ea:	4827      	ldr	r0, [pc, #156]	@ (8004888 <_printf_i+0x238>)
 80047ec:	e7e9      	b.n	80047c2 <_printf_i+0x172>
 80047ee:	6823      	ldr	r3, [r4, #0]
 80047f0:	f023 0320 	bic.w	r3, r3, #32
 80047f4:	6023      	str	r3, [r4, #0]
 80047f6:	e7f6      	b.n	80047e6 <_printf_i+0x196>
 80047f8:	4616      	mov	r6, r2
 80047fa:	e7bd      	b.n	8004778 <_printf_i+0x128>
 80047fc:	6833      	ldr	r3, [r6, #0]
 80047fe:	6825      	ldr	r5, [r4, #0]
 8004800:	6961      	ldr	r1, [r4, #20]
 8004802:	1d18      	adds	r0, r3, #4
 8004804:	6030      	str	r0, [r6, #0]
 8004806:	062e      	lsls	r6, r5, #24
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	d501      	bpl.n	8004810 <_printf_i+0x1c0>
 800480c:	6019      	str	r1, [r3, #0]
 800480e:	e002      	b.n	8004816 <_printf_i+0x1c6>
 8004810:	0668      	lsls	r0, r5, #25
 8004812:	d5fb      	bpl.n	800480c <_printf_i+0x1bc>
 8004814:	8019      	strh	r1, [r3, #0]
 8004816:	2300      	movs	r3, #0
 8004818:	6123      	str	r3, [r4, #16]
 800481a:	4616      	mov	r6, r2
 800481c:	e7bc      	b.n	8004798 <_printf_i+0x148>
 800481e:	6833      	ldr	r3, [r6, #0]
 8004820:	1d1a      	adds	r2, r3, #4
 8004822:	6032      	str	r2, [r6, #0]
 8004824:	681e      	ldr	r6, [r3, #0]
 8004826:	6862      	ldr	r2, [r4, #4]
 8004828:	2100      	movs	r1, #0
 800482a:	4630      	mov	r0, r6
 800482c:	f7fb fcd8 	bl	80001e0 <memchr>
 8004830:	b108      	cbz	r0, 8004836 <_printf_i+0x1e6>
 8004832:	1b80      	subs	r0, r0, r6
 8004834:	6060      	str	r0, [r4, #4]
 8004836:	6863      	ldr	r3, [r4, #4]
 8004838:	6123      	str	r3, [r4, #16]
 800483a:	2300      	movs	r3, #0
 800483c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004840:	e7aa      	b.n	8004798 <_printf_i+0x148>
 8004842:	6923      	ldr	r3, [r4, #16]
 8004844:	4632      	mov	r2, r6
 8004846:	4649      	mov	r1, r9
 8004848:	4640      	mov	r0, r8
 800484a:	47d0      	blx	sl
 800484c:	3001      	adds	r0, #1
 800484e:	d0ad      	beq.n	80047ac <_printf_i+0x15c>
 8004850:	6823      	ldr	r3, [r4, #0]
 8004852:	079b      	lsls	r3, r3, #30
 8004854:	d413      	bmi.n	800487e <_printf_i+0x22e>
 8004856:	68e0      	ldr	r0, [r4, #12]
 8004858:	9b03      	ldr	r3, [sp, #12]
 800485a:	4298      	cmp	r0, r3
 800485c:	bfb8      	it	lt
 800485e:	4618      	movlt	r0, r3
 8004860:	e7a6      	b.n	80047b0 <_printf_i+0x160>
 8004862:	2301      	movs	r3, #1
 8004864:	4632      	mov	r2, r6
 8004866:	4649      	mov	r1, r9
 8004868:	4640      	mov	r0, r8
 800486a:	47d0      	blx	sl
 800486c:	3001      	adds	r0, #1
 800486e:	d09d      	beq.n	80047ac <_printf_i+0x15c>
 8004870:	3501      	adds	r5, #1
 8004872:	68e3      	ldr	r3, [r4, #12]
 8004874:	9903      	ldr	r1, [sp, #12]
 8004876:	1a5b      	subs	r3, r3, r1
 8004878:	42ab      	cmp	r3, r5
 800487a:	dcf2      	bgt.n	8004862 <_printf_i+0x212>
 800487c:	e7eb      	b.n	8004856 <_printf_i+0x206>
 800487e:	2500      	movs	r5, #0
 8004880:	f104 0619 	add.w	r6, r4, #25
 8004884:	e7f5      	b.n	8004872 <_printf_i+0x222>
 8004886:	bf00      	nop
 8004888:	0800d573 	.word	0x0800d573
 800488c:	0800d584 	.word	0x0800d584

08004890 <_scanf_float>:
 8004890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004894:	b087      	sub	sp, #28
 8004896:	4617      	mov	r7, r2
 8004898:	9303      	str	r3, [sp, #12]
 800489a:	688b      	ldr	r3, [r1, #8]
 800489c:	1e5a      	subs	r2, r3, #1
 800489e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80048a2:	bf81      	itttt	hi
 80048a4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80048a8:	eb03 0b05 	addhi.w	fp, r3, r5
 80048ac:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80048b0:	608b      	strhi	r3, [r1, #8]
 80048b2:	680b      	ldr	r3, [r1, #0]
 80048b4:	460a      	mov	r2, r1
 80048b6:	f04f 0500 	mov.w	r5, #0
 80048ba:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80048be:	f842 3b1c 	str.w	r3, [r2], #28
 80048c2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80048c6:	4680      	mov	r8, r0
 80048c8:	460c      	mov	r4, r1
 80048ca:	bf98      	it	ls
 80048cc:	f04f 0b00 	movls.w	fp, #0
 80048d0:	9201      	str	r2, [sp, #4]
 80048d2:	4616      	mov	r6, r2
 80048d4:	46aa      	mov	sl, r5
 80048d6:	46a9      	mov	r9, r5
 80048d8:	9502      	str	r5, [sp, #8]
 80048da:	68a2      	ldr	r2, [r4, #8]
 80048dc:	b152      	cbz	r2, 80048f4 <_scanf_float+0x64>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	2b4e      	cmp	r3, #78	@ 0x4e
 80048e4:	d864      	bhi.n	80049b0 <_scanf_float+0x120>
 80048e6:	2b40      	cmp	r3, #64	@ 0x40
 80048e8:	d83c      	bhi.n	8004964 <_scanf_float+0xd4>
 80048ea:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80048ee:	b2c8      	uxtb	r0, r1
 80048f0:	280e      	cmp	r0, #14
 80048f2:	d93a      	bls.n	800496a <_scanf_float+0xda>
 80048f4:	f1b9 0f00 	cmp.w	r9, #0
 80048f8:	d003      	beq.n	8004902 <_scanf_float+0x72>
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004900:	6023      	str	r3, [r4, #0]
 8004902:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004906:	f1ba 0f01 	cmp.w	sl, #1
 800490a:	f200 8117 	bhi.w	8004b3c <_scanf_float+0x2ac>
 800490e:	9b01      	ldr	r3, [sp, #4]
 8004910:	429e      	cmp	r6, r3
 8004912:	f200 8108 	bhi.w	8004b26 <_scanf_float+0x296>
 8004916:	2001      	movs	r0, #1
 8004918:	b007      	add	sp, #28
 800491a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800491e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004922:	2a0d      	cmp	r2, #13
 8004924:	d8e6      	bhi.n	80048f4 <_scanf_float+0x64>
 8004926:	a101      	add	r1, pc, #4	@ (adr r1, 800492c <_scanf_float+0x9c>)
 8004928:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800492c:	08004a73 	.word	0x08004a73
 8004930:	080048f5 	.word	0x080048f5
 8004934:	080048f5 	.word	0x080048f5
 8004938:	080048f5 	.word	0x080048f5
 800493c:	08004ad3 	.word	0x08004ad3
 8004940:	08004aab 	.word	0x08004aab
 8004944:	080048f5 	.word	0x080048f5
 8004948:	080048f5 	.word	0x080048f5
 800494c:	08004a81 	.word	0x08004a81
 8004950:	080048f5 	.word	0x080048f5
 8004954:	080048f5 	.word	0x080048f5
 8004958:	080048f5 	.word	0x080048f5
 800495c:	080048f5 	.word	0x080048f5
 8004960:	08004a39 	.word	0x08004a39
 8004964:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004968:	e7db      	b.n	8004922 <_scanf_float+0x92>
 800496a:	290e      	cmp	r1, #14
 800496c:	d8c2      	bhi.n	80048f4 <_scanf_float+0x64>
 800496e:	a001      	add	r0, pc, #4	@ (adr r0, 8004974 <_scanf_float+0xe4>)
 8004970:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004974:	08004a29 	.word	0x08004a29
 8004978:	080048f5 	.word	0x080048f5
 800497c:	08004a29 	.word	0x08004a29
 8004980:	08004abf 	.word	0x08004abf
 8004984:	080048f5 	.word	0x080048f5
 8004988:	080049d1 	.word	0x080049d1
 800498c:	08004a0f 	.word	0x08004a0f
 8004990:	08004a0f 	.word	0x08004a0f
 8004994:	08004a0f 	.word	0x08004a0f
 8004998:	08004a0f 	.word	0x08004a0f
 800499c:	08004a0f 	.word	0x08004a0f
 80049a0:	08004a0f 	.word	0x08004a0f
 80049a4:	08004a0f 	.word	0x08004a0f
 80049a8:	08004a0f 	.word	0x08004a0f
 80049ac:	08004a0f 	.word	0x08004a0f
 80049b0:	2b6e      	cmp	r3, #110	@ 0x6e
 80049b2:	d809      	bhi.n	80049c8 <_scanf_float+0x138>
 80049b4:	2b60      	cmp	r3, #96	@ 0x60
 80049b6:	d8b2      	bhi.n	800491e <_scanf_float+0x8e>
 80049b8:	2b54      	cmp	r3, #84	@ 0x54
 80049ba:	d07b      	beq.n	8004ab4 <_scanf_float+0x224>
 80049bc:	2b59      	cmp	r3, #89	@ 0x59
 80049be:	d199      	bne.n	80048f4 <_scanf_float+0x64>
 80049c0:	2d07      	cmp	r5, #7
 80049c2:	d197      	bne.n	80048f4 <_scanf_float+0x64>
 80049c4:	2508      	movs	r5, #8
 80049c6:	e02c      	b.n	8004a22 <_scanf_float+0x192>
 80049c8:	2b74      	cmp	r3, #116	@ 0x74
 80049ca:	d073      	beq.n	8004ab4 <_scanf_float+0x224>
 80049cc:	2b79      	cmp	r3, #121	@ 0x79
 80049ce:	e7f6      	b.n	80049be <_scanf_float+0x12e>
 80049d0:	6821      	ldr	r1, [r4, #0]
 80049d2:	05c8      	lsls	r0, r1, #23
 80049d4:	d51b      	bpl.n	8004a0e <_scanf_float+0x17e>
 80049d6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80049da:	6021      	str	r1, [r4, #0]
 80049dc:	f109 0901 	add.w	r9, r9, #1
 80049e0:	f1bb 0f00 	cmp.w	fp, #0
 80049e4:	d003      	beq.n	80049ee <_scanf_float+0x15e>
 80049e6:	3201      	adds	r2, #1
 80049e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80049ec:	60a2      	str	r2, [r4, #8]
 80049ee:	68a3      	ldr	r3, [r4, #8]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	60a3      	str	r3, [r4, #8]
 80049f4:	6923      	ldr	r3, [r4, #16]
 80049f6:	3301      	adds	r3, #1
 80049f8:	6123      	str	r3, [r4, #16]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3b01      	subs	r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	607b      	str	r3, [r7, #4]
 8004a02:	f340 8087 	ble.w	8004b14 <_scanf_float+0x284>
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	3301      	adds	r3, #1
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	e765      	b.n	80048da <_scanf_float+0x4a>
 8004a0e:	eb1a 0105 	adds.w	r1, sl, r5
 8004a12:	f47f af6f 	bne.w	80048f4 <_scanf_float+0x64>
 8004a16:	6822      	ldr	r2, [r4, #0]
 8004a18:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004a1c:	6022      	str	r2, [r4, #0]
 8004a1e:	460d      	mov	r5, r1
 8004a20:	468a      	mov	sl, r1
 8004a22:	f806 3b01 	strb.w	r3, [r6], #1
 8004a26:	e7e2      	b.n	80049ee <_scanf_float+0x15e>
 8004a28:	6822      	ldr	r2, [r4, #0]
 8004a2a:	0610      	lsls	r0, r2, #24
 8004a2c:	f57f af62 	bpl.w	80048f4 <_scanf_float+0x64>
 8004a30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a34:	6022      	str	r2, [r4, #0]
 8004a36:	e7f4      	b.n	8004a22 <_scanf_float+0x192>
 8004a38:	f1ba 0f00 	cmp.w	sl, #0
 8004a3c:	d10e      	bne.n	8004a5c <_scanf_float+0x1cc>
 8004a3e:	f1b9 0f00 	cmp.w	r9, #0
 8004a42:	d10e      	bne.n	8004a62 <_scanf_float+0x1d2>
 8004a44:	6822      	ldr	r2, [r4, #0]
 8004a46:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004a4a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004a4e:	d108      	bne.n	8004a62 <_scanf_float+0x1d2>
 8004a50:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004a54:	6022      	str	r2, [r4, #0]
 8004a56:	f04f 0a01 	mov.w	sl, #1
 8004a5a:	e7e2      	b.n	8004a22 <_scanf_float+0x192>
 8004a5c:	f1ba 0f02 	cmp.w	sl, #2
 8004a60:	d055      	beq.n	8004b0e <_scanf_float+0x27e>
 8004a62:	2d01      	cmp	r5, #1
 8004a64:	d002      	beq.n	8004a6c <_scanf_float+0x1dc>
 8004a66:	2d04      	cmp	r5, #4
 8004a68:	f47f af44 	bne.w	80048f4 <_scanf_float+0x64>
 8004a6c:	3501      	adds	r5, #1
 8004a6e:	b2ed      	uxtb	r5, r5
 8004a70:	e7d7      	b.n	8004a22 <_scanf_float+0x192>
 8004a72:	f1ba 0f01 	cmp.w	sl, #1
 8004a76:	f47f af3d 	bne.w	80048f4 <_scanf_float+0x64>
 8004a7a:	f04f 0a02 	mov.w	sl, #2
 8004a7e:	e7d0      	b.n	8004a22 <_scanf_float+0x192>
 8004a80:	b97d      	cbnz	r5, 8004aa2 <_scanf_float+0x212>
 8004a82:	f1b9 0f00 	cmp.w	r9, #0
 8004a86:	f47f af38 	bne.w	80048fa <_scanf_float+0x6a>
 8004a8a:	6822      	ldr	r2, [r4, #0]
 8004a8c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004a90:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004a94:	f040 8108 	bne.w	8004ca8 <_scanf_float+0x418>
 8004a98:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004a9c:	6022      	str	r2, [r4, #0]
 8004a9e:	2501      	movs	r5, #1
 8004aa0:	e7bf      	b.n	8004a22 <_scanf_float+0x192>
 8004aa2:	2d03      	cmp	r5, #3
 8004aa4:	d0e2      	beq.n	8004a6c <_scanf_float+0x1dc>
 8004aa6:	2d05      	cmp	r5, #5
 8004aa8:	e7de      	b.n	8004a68 <_scanf_float+0x1d8>
 8004aaa:	2d02      	cmp	r5, #2
 8004aac:	f47f af22 	bne.w	80048f4 <_scanf_float+0x64>
 8004ab0:	2503      	movs	r5, #3
 8004ab2:	e7b6      	b.n	8004a22 <_scanf_float+0x192>
 8004ab4:	2d06      	cmp	r5, #6
 8004ab6:	f47f af1d 	bne.w	80048f4 <_scanf_float+0x64>
 8004aba:	2507      	movs	r5, #7
 8004abc:	e7b1      	b.n	8004a22 <_scanf_float+0x192>
 8004abe:	6822      	ldr	r2, [r4, #0]
 8004ac0:	0591      	lsls	r1, r2, #22
 8004ac2:	f57f af17 	bpl.w	80048f4 <_scanf_float+0x64>
 8004ac6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004aca:	6022      	str	r2, [r4, #0]
 8004acc:	f8cd 9008 	str.w	r9, [sp, #8]
 8004ad0:	e7a7      	b.n	8004a22 <_scanf_float+0x192>
 8004ad2:	6822      	ldr	r2, [r4, #0]
 8004ad4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004ad8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004adc:	d006      	beq.n	8004aec <_scanf_float+0x25c>
 8004ade:	0550      	lsls	r0, r2, #21
 8004ae0:	f57f af08 	bpl.w	80048f4 <_scanf_float+0x64>
 8004ae4:	f1b9 0f00 	cmp.w	r9, #0
 8004ae8:	f000 80de 	beq.w	8004ca8 <_scanf_float+0x418>
 8004aec:	0591      	lsls	r1, r2, #22
 8004aee:	bf58      	it	pl
 8004af0:	9902      	ldrpl	r1, [sp, #8]
 8004af2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004af6:	bf58      	it	pl
 8004af8:	eba9 0101 	subpl.w	r1, r9, r1
 8004afc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004b00:	bf58      	it	pl
 8004b02:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004b06:	6022      	str	r2, [r4, #0]
 8004b08:	f04f 0900 	mov.w	r9, #0
 8004b0c:	e789      	b.n	8004a22 <_scanf_float+0x192>
 8004b0e:	f04f 0a03 	mov.w	sl, #3
 8004b12:	e786      	b.n	8004a22 <_scanf_float+0x192>
 8004b14:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004b18:	4639      	mov	r1, r7
 8004b1a:	4640      	mov	r0, r8
 8004b1c:	4798      	blx	r3
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	f43f aedb 	beq.w	80048da <_scanf_float+0x4a>
 8004b24:	e6e6      	b.n	80048f4 <_scanf_float+0x64>
 8004b26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004b2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004b2e:	463a      	mov	r2, r7
 8004b30:	4640      	mov	r0, r8
 8004b32:	4798      	blx	r3
 8004b34:	6923      	ldr	r3, [r4, #16]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	6123      	str	r3, [r4, #16]
 8004b3a:	e6e8      	b.n	800490e <_scanf_float+0x7e>
 8004b3c:	1e6b      	subs	r3, r5, #1
 8004b3e:	2b06      	cmp	r3, #6
 8004b40:	d824      	bhi.n	8004b8c <_scanf_float+0x2fc>
 8004b42:	2d02      	cmp	r5, #2
 8004b44:	d836      	bhi.n	8004bb4 <_scanf_float+0x324>
 8004b46:	9b01      	ldr	r3, [sp, #4]
 8004b48:	429e      	cmp	r6, r3
 8004b4a:	f67f aee4 	bls.w	8004916 <_scanf_float+0x86>
 8004b4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004b52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004b56:	463a      	mov	r2, r7
 8004b58:	4640      	mov	r0, r8
 8004b5a:	4798      	blx	r3
 8004b5c:	6923      	ldr	r3, [r4, #16]
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	6123      	str	r3, [r4, #16]
 8004b62:	e7f0      	b.n	8004b46 <_scanf_float+0x2b6>
 8004b64:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004b68:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004b6c:	463a      	mov	r2, r7
 8004b6e:	4640      	mov	r0, r8
 8004b70:	4798      	blx	r3
 8004b72:	6923      	ldr	r3, [r4, #16]
 8004b74:	3b01      	subs	r3, #1
 8004b76:	6123      	str	r3, [r4, #16]
 8004b78:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b7c:	fa5f fa8a 	uxtb.w	sl, sl
 8004b80:	f1ba 0f02 	cmp.w	sl, #2
 8004b84:	d1ee      	bne.n	8004b64 <_scanf_float+0x2d4>
 8004b86:	3d03      	subs	r5, #3
 8004b88:	b2ed      	uxtb	r5, r5
 8004b8a:	1b76      	subs	r6, r6, r5
 8004b8c:	6823      	ldr	r3, [r4, #0]
 8004b8e:	05da      	lsls	r2, r3, #23
 8004b90:	d530      	bpl.n	8004bf4 <_scanf_float+0x364>
 8004b92:	055b      	lsls	r3, r3, #21
 8004b94:	d511      	bpl.n	8004bba <_scanf_float+0x32a>
 8004b96:	9b01      	ldr	r3, [sp, #4]
 8004b98:	429e      	cmp	r6, r3
 8004b9a:	f67f aebc 	bls.w	8004916 <_scanf_float+0x86>
 8004b9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ba2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004ba6:	463a      	mov	r2, r7
 8004ba8:	4640      	mov	r0, r8
 8004baa:	4798      	blx	r3
 8004bac:	6923      	ldr	r3, [r4, #16]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	6123      	str	r3, [r4, #16]
 8004bb2:	e7f0      	b.n	8004b96 <_scanf_float+0x306>
 8004bb4:	46aa      	mov	sl, r5
 8004bb6:	46b3      	mov	fp, r6
 8004bb8:	e7de      	b.n	8004b78 <_scanf_float+0x2e8>
 8004bba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004bbe:	6923      	ldr	r3, [r4, #16]
 8004bc0:	2965      	cmp	r1, #101	@ 0x65
 8004bc2:	f103 33ff 	add.w	r3, r3, #4294967295
 8004bc6:	f106 35ff 	add.w	r5, r6, #4294967295
 8004bca:	6123      	str	r3, [r4, #16]
 8004bcc:	d00c      	beq.n	8004be8 <_scanf_float+0x358>
 8004bce:	2945      	cmp	r1, #69	@ 0x45
 8004bd0:	d00a      	beq.n	8004be8 <_scanf_float+0x358>
 8004bd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004bd6:	463a      	mov	r2, r7
 8004bd8:	4640      	mov	r0, r8
 8004bda:	4798      	blx	r3
 8004bdc:	6923      	ldr	r3, [r4, #16]
 8004bde:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	1eb5      	subs	r5, r6, #2
 8004be6:	6123      	str	r3, [r4, #16]
 8004be8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004bec:	463a      	mov	r2, r7
 8004bee:	4640      	mov	r0, r8
 8004bf0:	4798      	blx	r3
 8004bf2:	462e      	mov	r6, r5
 8004bf4:	6822      	ldr	r2, [r4, #0]
 8004bf6:	f012 0210 	ands.w	r2, r2, #16
 8004bfa:	d001      	beq.n	8004c00 <_scanf_float+0x370>
 8004bfc:	2000      	movs	r0, #0
 8004bfe:	e68b      	b.n	8004918 <_scanf_float+0x88>
 8004c00:	7032      	strb	r2, [r6, #0]
 8004c02:	6823      	ldr	r3, [r4, #0]
 8004c04:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004c08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c0c:	d11c      	bne.n	8004c48 <_scanf_float+0x3b8>
 8004c0e:	9b02      	ldr	r3, [sp, #8]
 8004c10:	454b      	cmp	r3, r9
 8004c12:	eba3 0209 	sub.w	r2, r3, r9
 8004c16:	d123      	bne.n	8004c60 <_scanf_float+0x3d0>
 8004c18:	9901      	ldr	r1, [sp, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	4640      	mov	r0, r8
 8004c1e:	f002 fbf7 	bl	8007410 <_strtod_r>
 8004c22:	9b03      	ldr	r3, [sp, #12]
 8004c24:	6821      	ldr	r1, [r4, #0]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f011 0f02 	tst.w	r1, #2
 8004c2c:	ec57 6b10 	vmov	r6, r7, d0
 8004c30:	f103 0204 	add.w	r2, r3, #4
 8004c34:	d01f      	beq.n	8004c76 <_scanf_float+0x3e6>
 8004c36:	9903      	ldr	r1, [sp, #12]
 8004c38:	600a      	str	r2, [r1, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	e9c3 6700 	strd	r6, r7, [r3]
 8004c40:	68e3      	ldr	r3, [r4, #12]
 8004c42:	3301      	adds	r3, #1
 8004c44:	60e3      	str	r3, [r4, #12]
 8004c46:	e7d9      	b.n	8004bfc <_scanf_float+0x36c>
 8004c48:	9b04      	ldr	r3, [sp, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d0e4      	beq.n	8004c18 <_scanf_float+0x388>
 8004c4e:	9905      	ldr	r1, [sp, #20]
 8004c50:	230a      	movs	r3, #10
 8004c52:	3101      	adds	r1, #1
 8004c54:	4640      	mov	r0, r8
 8004c56:	f7ff f9b7 	bl	8003fc8 <_strtol_r>
 8004c5a:	9b04      	ldr	r3, [sp, #16]
 8004c5c:	9e05      	ldr	r6, [sp, #20]
 8004c5e:	1ac2      	subs	r2, r0, r3
 8004c60:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004c64:	429e      	cmp	r6, r3
 8004c66:	bf28      	it	cs
 8004c68:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004c6c:	4910      	ldr	r1, [pc, #64]	@ (8004cb0 <_scanf_float+0x420>)
 8004c6e:	4630      	mov	r0, r6
 8004c70:	f000 f8e4 	bl	8004e3c <siprintf>
 8004c74:	e7d0      	b.n	8004c18 <_scanf_float+0x388>
 8004c76:	f011 0f04 	tst.w	r1, #4
 8004c7a:	9903      	ldr	r1, [sp, #12]
 8004c7c:	600a      	str	r2, [r1, #0]
 8004c7e:	d1dc      	bne.n	8004c3a <_scanf_float+0x3aa>
 8004c80:	681d      	ldr	r5, [r3, #0]
 8004c82:	4632      	mov	r2, r6
 8004c84:	463b      	mov	r3, r7
 8004c86:	4630      	mov	r0, r6
 8004c88:	4639      	mov	r1, r7
 8004c8a:	f7fb ff57 	bl	8000b3c <__aeabi_dcmpun>
 8004c8e:	b128      	cbz	r0, 8004c9c <_scanf_float+0x40c>
 8004c90:	4808      	ldr	r0, [pc, #32]	@ (8004cb4 <_scanf_float+0x424>)
 8004c92:	f000 f9b7 	bl	8005004 <nanf>
 8004c96:	ed85 0a00 	vstr	s0, [r5]
 8004c9a:	e7d1      	b.n	8004c40 <_scanf_float+0x3b0>
 8004c9c:	4630      	mov	r0, r6
 8004c9e:	4639      	mov	r1, r7
 8004ca0:	f7fb ffaa 	bl	8000bf8 <__aeabi_d2f>
 8004ca4:	6028      	str	r0, [r5, #0]
 8004ca6:	e7cb      	b.n	8004c40 <_scanf_float+0x3b0>
 8004ca8:	f04f 0900 	mov.w	r9, #0
 8004cac:	e629      	b.n	8004902 <_scanf_float+0x72>
 8004cae:	bf00      	nop
 8004cb0:	0800d595 	.word	0x0800d595
 8004cb4:	0800d82c 	.word	0x0800d82c

08004cb8 <std>:
 8004cb8:	2300      	movs	r3, #0
 8004cba:	b510      	push	{r4, lr}
 8004cbc:	4604      	mov	r4, r0
 8004cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8004cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cc6:	6083      	str	r3, [r0, #8]
 8004cc8:	8181      	strh	r1, [r0, #12]
 8004cca:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ccc:	81c2      	strh	r2, [r0, #14]
 8004cce:	6183      	str	r3, [r0, #24]
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	2208      	movs	r2, #8
 8004cd4:	305c      	adds	r0, #92	@ 0x5c
 8004cd6:	f000 f914 	bl	8004f02 <memset>
 8004cda:	4b0d      	ldr	r3, [pc, #52]	@ (8004d10 <std+0x58>)
 8004cdc:	6263      	str	r3, [r4, #36]	@ 0x24
 8004cde:	4b0d      	ldr	r3, [pc, #52]	@ (8004d14 <std+0x5c>)
 8004ce0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8004d18 <std+0x60>)
 8004ce4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8004d1c <std+0x64>)
 8004ce8:	6323      	str	r3, [r4, #48]	@ 0x30
 8004cea:	4b0d      	ldr	r3, [pc, #52]	@ (8004d20 <std+0x68>)
 8004cec:	6224      	str	r4, [r4, #32]
 8004cee:	429c      	cmp	r4, r3
 8004cf0:	d006      	beq.n	8004d00 <std+0x48>
 8004cf2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004cf6:	4294      	cmp	r4, r2
 8004cf8:	d002      	beq.n	8004d00 <std+0x48>
 8004cfa:	33d0      	adds	r3, #208	@ 0xd0
 8004cfc:	429c      	cmp	r4, r3
 8004cfe:	d105      	bne.n	8004d0c <std+0x54>
 8004d00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d08:	f000 b978 	b.w	8004ffc <__retarget_lock_init_recursive>
 8004d0c:	bd10      	pop	{r4, pc}
 8004d0e:	bf00      	nop
 8004d10:	08004e7d 	.word	0x08004e7d
 8004d14:	08004e9f 	.word	0x08004e9f
 8004d18:	08004ed7 	.word	0x08004ed7
 8004d1c:	08004efb 	.word	0x08004efb
 8004d20:	200004c4 	.word	0x200004c4

08004d24 <stdio_exit_handler>:
 8004d24:	4a02      	ldr	r2, [pc, #8]	@ (8004d30 <stdio_exit_handler+0xc>)
 8004d26:	4903      	ldr	r1, [pc, #12]	@ (8004d34 <stdio_exit_handler+0x10>)
 8004d28:	4803      	ldr	r0, [pc, #12]	@ (8004d38 <stdio_exit_handler+0x14>)
 8004d2a:	f000 b869 	b.w	8004e00 <_fwalk_sglue>
 8004d2e:	bf00      	nop
 8004d30:	20000028 	.word	0x20000028
 8004d34:	080077d5 	.word	0x080077d5
 8004d38:	20000038 	.word	0x20000038

08004d3c <cleanup_stdio>:
 8004d3c:	6841      	ldr	r1, [r0, #4]
 8004d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d70 <cleanup_stdio+0x34>)
 8004d40:	4299      	cmp	r1, r3
 8004d42:	b510      	push	{r4, lr}
 8004d44:	4604      	mov	r4, r0
 8004d46:	d001      	beq.n	8004d4c <cleanup_stdio+0x10>
 8004d48:	f002 fd44 	bl	80077d4 <_fflush_r>
 8004d4c:	68a1      	ldr	r1, [r4, #8]
 8004d4e:	4b09      	ldr	r3, [pc, #36]	@ (8004d74 <cleanup_stdio+0x38>)
 8004d50:	4299      	cmp	r1, r3
 8004d52:	d002      	beq.n	8004d5a <cleanup_stdio+0x1e>
 8004d54:	4620      	mov	r0, r4
 8004d56:	f002 fd3d 	bl	80077d4 <_fflush_r>
 8004d5a:	68e1      	ldr	r1, [r4, #12]
 8004d5c:	4b06      	ldr	r3, [pc, #24]	@ (8004d78 <cleanup_stdio+0x3c>)
 8004d5e:	4299      	cmp	r1, r3
 8004d60:	d004      	beq.n	8004d6c <cleanup_stdio+0x30>
 8004d62:	4620      	mov	r0, r4
 8004d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d68:	f002 bd34 	b.w	80077d4 <_fflush_r>
 8004d6c:	bd10      	pop	{r4, pc}
 8004d6e:	bf00      	nop
 8004d70:	200004c4 	.word	0x200004c4
 8004d74:	2000052c 	.word	0x2000052c
 8004d78:	20000594 	.word	0x20000594

08004d7c <global_stdio_init.part.0>:
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004dac <global_stdio_init.part.0+0x30>)
 8004d80:	4c0b      	ldr	r4, [pc, #44]	@ (8004db0 <global_stdio_init.part.0+0x34>)
 8004d82:	4a0c      	ldr	r2, [pc, #48]	@ (8004db4 <global_stdio_init.part.0+0x38>)
 8004d84:	601a      	str	r2, [r3, #0]
 8004d86:	4620      	mov	r0, r4
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2104      	movs	r1, #4
 8004d8c:	f7ff ff94 	bl	8004cb8 <std>
 8004d90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d94:	2201      	movs	r2, #1
 8004d96:	2109      	movs	r1, #9
 8004d98:	f7ff ff8e 	bl	8004cb8 <std>
 8004d9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004da0:	2202      	movs	r2, #2
 8004da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004da6:	2112      	movs	r1, #18
 8004da8:	f7ff bf86 	b.w	8004cb8 <std>
 8004dac:	200005fc 	.word	0x200005fc
 8004db0:	200004c4 	.word	0x200004c4
 8004db4:	08004d25 	.word	0x08004d25

08004db8 <__sfp_lock_acquire>:
 8004db8:	4801      	ldr	r0, [pc, #4]	@ (8004dc0 <__sfp_lock_acquire+0x8>)
 8004dba:	f000 b920 	b.w	8004ffe <__retarget_lock_acquire_recursive>
 8004dbe:	bf00      	nop
 8004dc0:	20000605 	.word	0x20000605

08004dc4 <__sfp_lock_release>:
 8004dc4:	4801      	ldr	r0, [pc, #4]	@ (8004dcc <__sfp_lock_release+0x8>)
 8004dc6:	f000 b91b 	b.w	8005000 <__retarget_lock_release_recursive>
 8004dca:	bf00      	nop
 8004dcc:	20000605 	.word	0x20000605

08004dd0 <__sinit>:
 8004dd0:	b510      	push	{r4, lr}
 8004dd2:	4604      	mov	r4, r0
 8004dd4:	f7ff fff0 	bl	8004db8 <__sfp_lock_acquire>
 8004dd8:	6a23      	ldr	r3, [r4, #32]
 8004dda:	b11b      	cbz	r3, 8004de4 <__sinit+0x14>
 8004ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004de0:	f7ff bff0 	b.w	8004dc4 <__sfp_lock_release>
 8004de4:	4b04      	ldr	r3, [pc, #16]	@ (8004df8 <__sinit+0x28>)
 8004de6:	6223      	str	r3, [r4, #32]
 8004de8:	4b04      	ldr	r3, [pc, #16]	@ (8004dfc <__sinit+0x2c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1f5      	bne.n	8004ddc <__sinit+0xc>
 8004df0:	f7ff ffc4 	bl	8004d7c <global_stdio_init.part.0>
 8004df4:	e7f2      	b.n	8004ddc <__sinit+0xc>
 8004df6:	bf00      	nop
 8004df8:	08004d3d 	.word	0x08004d3d
 8004dfc:	200005fc 	.word	0x200005fc

08004e00 <_fwalk_sglue>:
 8004e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e04:	4607      	mov	r7, r0
 8004e06:	4688      	mov	r8, r1
 8004e08:	4614      	mov	r4, r2
 8004e0a:	2600      	movs	r6, #0
 8004e0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e10:	f1b9 0901 	subs.w	r9, r9, #1
 8004e14:	d505      	bpl.n	8004e22 <_fwalk_sglue+0x22>
 8004e16:	6824      	ldr	r4, [r4, #0]
 8004e18:	2c00      	cmp	r4, #0
 8004e1a:	d1f7      	bne.n	8004e0c <_fwalk_sglue+0xc>
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e22:	89ab      	ldrh	r3, [r5, #12]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d907      	bls.n	8004e38 <_fwalk_sglue+0x38>
 8004e28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e2c:	3301      	adds	r3, #1
 8004e2e:	d003      	beq.n	8004e38 <_fwalk_sglue+0x38>
 8004e30:	4629      	mov	r1, r5
 8004e32:	4638      	mov	r0, r7
 8004e34:	47c0      	blx	r8
 8004e36:	4306      	orrs	r6, r0
 8004e38:	3568      	adds	r5, #104	@ 0x68
 8004e3a:	e7e9      	b.n	8004e10 <_fwalk_sglue+0x10>

08004e3c <siprintf>:
 8004e3c:	b40e      	push	{r1, r2, r3}
 8004e3e:	b500      	push	{lr}
 8004e40:	b09c      	sub	sp, #112	@ 0x70
 8004e42:	ab1d      	add	r3, sp, #116	@ 0x74
 8004e44:	9002      	str	r0, [sp, #8]
 8004e46:	9006      	str	r0, [sp, #24]
 8004e48:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004e4c:	4809      	ldr	r0, [pc, #36]	@ (8004e74 <siprintf+0x38>)
 8004e4e:	9107      	str	r1, [sp, #28]
 8004e50:	9104      	str	r1, [sp, #16]
 8004e52:	4909      	ldr	r1, [pc, #36]	@ (8004e78 <siprintf+0x3c>)
 8004e54:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e58:	9105      	str	r1, [sp, #20]
 8004e5a:	6800      	ldr	r0, [r0, #0]
 8004e5c:	9301      	str	r3, [sp, #4]
 8004e5e:	a902      	add	r1, sp, #8
 8004e60:	f002 fb38 	bl	80074d4 <_svfiprintf_r>
 8004e64:	9b02      	ldr	r3, [sp, #8]
 8004e66:	2200      	movs	r2, #0
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	b01c      	add	sp, #112	@ 0x70
 8004e6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e70:	b003      	add	sp, #12
 8004e72:	4770      	bx	lr
 8004e74:	20000034 	.word	0x20000034
 8004e78:	ffff0208 	.word	0xffff0208

08004e7c <__sread>:
 8004e7c:	b510      	push	{r4, lr}
 8004e7e:	460c      	mov	r4, r1
 8004e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e84:	f000 f86c 	bl	8004f60 <_read_r>
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	bfab      	itete	ge
 8004e8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004e8e:	89a3      	ldrhlt	r3, [r4, #12]
 8004e90:	181b      	addge	r3, r3, r0
 8004e92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004e96:	bfac      	ite	ge
 8004e98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004e9a:	81a3      	strhlt	r3, [r4, #12]
 8004e9c:	bd10      	pop	{r4, pc}

08004e9e <__swrite>:
 8004e9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ea2:	461f      	mov	r7, r3
 8004ea4:	898b      	ldrh	r3, [r1, #12]
 8004ea6:	05db      	lsls	r3, r3, #23
 8004ea8:	4605      	mov	r5, r0
 8004eaa:	460c      	mov	r4, r1
 8004eac:	4616      	mov	r6, r2
 8004eae:	d505      	bpl.n	8004ebc <__swrite+0x1e>
 8004eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f000 f840 	bl	8004f3c <_lseek_r>
 8004ebc:	89a3      	ldrh	r3, [r4, #12]
 8004ebe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ec2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ec6:	81a3      	strh	r3, [r4, #12]
 8004ec8:	4632      	mov	r2, r6
 8004eca:	463b      	mov	r3, r7
 8004ecc:	4628      	mov	r0, r5
 8004ece:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed2:	f000 b857 	b.w	8004f84 <_write_r>

08004ed6 <__sseek>:
 8004ed6:	b510      	push	{r4, lr}
 8004ed8:	460c      	mov	r4, r1
 8004eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ede:	f000 f82d 	bl	8004f3c <_lseek_r>
 8004ee2:	1c43      	adds	r3, r0, #1
 8004ee4:	89a3      	ldrh	r3, [r4, #12]
 8004ee6:	bf15      	itete	ne
 8004ee8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004eea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004eee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004ef2:	81a3      	strheq	r3, [r4, #12]
 8004ef4:	bf18      	it	ne
 8004ef6:	81a3      	strhne	r3, [r4, #12]
 8004ef8:	bd10      	pop	{r4, pc}

08004efa <__sclose>:
 8004efa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004efe:	f000 b80d 	b.w	8004f1c <_close_r>

08004f02 <memset>:
 8004f02:	4402      	add	r2, r0
 8004f04:	4603      	mov	r3, r0
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d100      	bne.n	8004f0c <memset+0xa>
 8004f0a:	4770      	bx	lr
 8004f0c:	f803 1b01 	strb.w	r1, [r3], #1
 8004f10:	e7f9      	b.n	8004f06 <memset+0x4>
	...

08004f14 <_localeconv_r>:
 8004f14:	4800      	ldr	r0, [pc, #0]	@ (8004f18 <_localeconv_r+0x4>)
 8004f16:	4770      	bx	lr
 8004f18:	20000174 	.word	0x20000174

08004f1c <_close_r>:
 8004f1c:	b538      	push	{r3, r4, r5, lr}
 8004f1e:	4d06      	ldr	r5, [pc, #24]	@ (8004f38 <_close_r+0x1c>)
 8004f20:	2300      	movs	r3, #0
 8004f22:	4604      	mov	r4, r0
 8004f24:	4608      	mov	r0, r1
 8004f26:	602b      	str	r3, [r5, #0]
 8004f28:	f7fc fdd6 	bl	8001ad8 <_close>
 8004f2c:	1c43      	adds	r3, r0, #1
 8004f2e:	d102      	bne.n	8004f36 <_close_r+0x1a>
 8004f30:	682b      	ldr	r3, [r5, #0]
 8004f32:	b103      	cbz	r3, 8004f36 <_close_r+0x1a>
 8004f34:	6023      	str	r3, [r4, #0]
 8004f36:	bd38      	pop	{r3, r4, r5, pc}
 8004f38:	20000600 	.word	0x20000600

08004f3c <_lseek_r>:
 8004f3c:	b538      	push	{r3, r4, r5, lr}
 8004f3e:	4d07      	ldr	r5, [pc, #28]	@ (8004f5c <_lseek_r+0x20>)
 8004f40:	4604      	mov	r4, r0
 8004f42:	4608      	mov	r0, r1
 8004f44:	4611      	mov	r1, r2
 8004f46:	2200      	movs	r2, #0
 8004f48:	602a      	str	r2, [r5, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	f7fc fdd0 	bl	8001af0 <_lseek>
 8004f50:	1c43      	adds	r3, r0, #1
 8004f52:	d102      	bne.n	8004f5a <_lseek_r+0x1e>
 8004f54:	682b      	ldr	r3, [r5, #0]
 8004f56:	b103      	cbz	r3, 8004f5a <_lseek_r+0x1e>
 8004f58:	6023      	str	r3, [r4, #0]
 8004f5a:	bd38      	pop	{r3, r4, r5, pc}
 8004f5c:	20000600 	.word	0x20000600

08004f60 <_read_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	4d07      	ldr	r5, [pc, #28]	@ (8004f80 <_read_r+0x20>)
 8004f64:	4604      	mov	r4, r0
 8004f66:	4608      	mov	r0, r1
 8004f68:	4611      	mov	r1, r2
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	602a      	str	r2, [r5, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f7fc fd96 	bl	8001aa0 <_read>
 8004f74:	1c43      	adds	r3, r0, #1
 8004f76:	d102      	bne.n	8004f7e <_read_r+0x1e>
 8004f78:	682b      	ldr	r3, [r5, #0]
 8004f7a:	b103      	cbz	r3, 8004f7e <_read_r+0x1e>
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	bd38      	pop	{r3, r4, r5, pc}
 8004f80:	20000600 	.word	0x20000600

08004f84 <_write_r>:
 8004f84:	b538      	push	{r3, r4, r5, lr}
 8004f86:	4d07      	ldr	r5, [pc, #28]	@ (8004fa4 <_write_r+0x20>)
 8004f88:	4604      	mov	r4, r0
 8004f8a:	4608      	mov	r0, r1
 8004f8c:	4611      	mov	r1, r2
 8004f8e:	2200      	movs	r2, #0
 8004f90:	602a      	str	r2, [r5, #0]
 8004f92:	461a      	mov	r2, r3
 8004f94:	f7fc fd92 	bl	8001abc <_write>
 8004f98:	1c43      	adds	r3, r0, #1
 8004f9a:	d102      	bne.n	8004fa2 <_write_r+0x1e>
 8004f9c:	682b      	ldr	r3, [r5, #0]
 8004f9e:	b103      	cbz	r3, 8004fa2 <_write_r+0x1e>
 8004fa0:	6023      	str	r3, [r4, #0]
 8004fa2:	bd38      	pop	{r3, r4, r5, pc}
 8004fa4:	20000600 	.word	0x20000600

08004fa8 <__errno>:
 8004fa8:	4b01      	ldr	r3, [pc, #4]	@ (8004fb0 <__errno+0x8>)
 8004faa:	6818      	ldr	r0, [r3, #0]
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	20000034 	.word	0x20000034

08004fb4 <__libc_init_array>:
 8004fb4:	b570      	push	{r4, r5, r6, lr}
 8004fb6:	4d0d      	ldr	r5, [pc, #52]	@ (8004fec <__libc_init_array+0x38>)
 8004fb8:	4c0d      	ldr	r4, [pc, #52]	@ (8004ff0 <__libc_init_array+0x3c>)
 8004fba:	1b64      	subs	r4, r4, r5
 8004fbc:	10a4      	asrs	r4, r4, #2
 8004fbe:	2600      	movs	r6, #0
 8004fc0:	42a6      	cmp	r6, r4
 8004fc2:	d109      	bne.n	8004fd8 <__libc_init_array+0x24>
 8004fc4:	4d0b      	ldr	r5, [pc, #44]	@ (8004ff4 <__libc_init_array+0x40>)
 8004fc6:	4c0c      	ldr	r4, [pc, #48]	@ (8004ff8 <__libc_init_array+0x44>)
 8004fc8:	f003 faf4 	bl	80085b4 <_init>
 8004fcc:	1b64      	subs	r4, r4, r5
 8004fce:	10a4      	asrs	r4, r4, #2
 8004fd0:	2600      	movs	r6, #0
 8004fd2:	42a6      	cmp	r6, r4
 8004fd4:	d105      	bne.n	8004fe2 <__libc_init_array+0x2e>
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
 8004fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fdc:	4798      	blx	r3
 8004fde:	3601      	adds	r6, #1
 8004fe0:	e7ee      	b.n	8004fc0 <__libc_init_array+0xc>
 8004fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe6:	4798      	blx	r3
 8004fe8:	3601      	adds	r6, #1
 8004fea:	e7f2      	b.n	8004fd2 <__libc_init_array+0x1e>
 8004fec:	0800d898 	.word	0x0800d898
 8004ff0:	0800d898 	.word	0x0800d898
 8004ff4:	0800d898 	.word	0x0800d898
 8004ff8:	0800d89c 	.word	0x0800d89c

08004ffc <__retarget_lock_init_recursive>:
 8004ffc:	4770      	bx	lr

08004ffe <__retarget_lock_acquire_recursive>:
 8004ffe:	4770      	bx	lr

08005000 <__retarget_lock_release_recursive>:
 8005000:	4770      	bx	lr
	...

08005004 <nanf>:
 8005004:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800500c <nanf+0x8>
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	7fc00000 	.word	0x7fc00000

08005010 <quorem>:
 8005010:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005014:	6903      	ldr	r3, [r0, #16]
 8005016:	690c      	ldr	r4, [r1, #16]
 8005018:	42a3      	cmp	r3, r4
 800501a:	4607      	mov	r7, r0
 800501c:	db7e      	blt.n	800511c <quorem+0x10c>
 800501e:	3c01      	subs	r4, #1
 8005020:	f101 0814 	add.w	r8, r1, #20
 8005024:	00a3      	lsls	r3, r4, #2
 8005026:	f100 0514 	add.w	r5, r0, #20
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005030:	9301      	str	r3, [sp, #4]
 8005032:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005036:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800503a:	3301      	adds	r3, #1
 800503c:	429a      	cmp	r2, r3
 800503e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005042:	fbb2 f6f3 	udiv	r6, r2, r3
 8005046:	d32e      	bcc.n	80050a6 <quorem+0x96>
 8005048:	f04f 0a00 	mov.w	sl, #0
 800504c:	46c4      	mov	ip, r8
 800504e:	46ae      	mov	lr, r5
 8005050:	46d3      	mov	fp, sl
 8005052:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005056:	b298      	uxth	r0, r3
 8005058:	fb06 a000 	mla	r0, r6, r0, sl
 800505c:	0c02      	lsrs	r2, r0, #16
 800505e:	0c1b      	lsrs	r3, r3, #16
 8005060:	fb06 2303 	mla	r3, r6, r3, r2
 8005064:	f8de 2000 	ldr.w	r2, [lr]
 8005068:	b280      	uxth	r0, r0
 800506a:	b292      	uxth	r2, r2
 800506c:	1a12      	subs	r2, r2, r0
 800506e:	445a      	add	r2, fp
 8005070:	f8de 0000 	ldr.w	r0, [lr]
 8005074:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005078:	b29b      	uxth	r3, r3
 800507a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800507e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005082:	b292      	uxth	r2, r2
 8005084:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005088:	45e1      	cmp	r9, ip
 800508a:	f84e 2b04 	str.w	r2, [lr], #4
 800508e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005092:	d2de      	bcs.n	8005052 <quorem+0x42>
 8005094:	9b00      	ldr	r3, [sp, #0]
 8005096:	58eb      	ldr	r3, [r5, r3]
 8005098:	b92b      	cbnz	r3, 80050a6 <quorem+0x96>
 800509a:	9b01      	ldr	r3, [sp, #4]
 800509c:	3b04      	subs	r3, #4
 800509e:	429d      	cmp	r5, r3
 80050a0:	461a      	mov	r2, r3
 80050a2:	d32f      	bcc.n	8005104 <quorem+0xf4>
 80050a4:	613c      	str	r4, [r7, #16]
 80050a6:	4638      	mov	r0, r7
 80050a8:	f001 f9c2 	bl	8006430 <__mcmp>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	db25      	blt.n	80050fc <quorem+0xec>
 80050b0:	4629      	mov	r1, r5
 80050b2:	2000      	movs	r0, #0
 80050b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80050b8:	f8d1 c000 	ldr.w	ip, [r1]
 80050bc:	fa1f fe82 	uxth.w	lr, r2
 80050c0:	fa1f f38c 	uxth.w	r3, ip
 80050c4:	eba3 030e 	sub.w	r3, r3, lr
 80050c8:	4403      	add	r3, r0
 80050ca:	0c12      	lsrs	r2, r2, #16
 80050cc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80050d0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050da:	45c1      	cmp	r9, r8
 80050dc:	f841 3b04 	str.w	r3, [r1], #4
 80050e0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80050e4:	d2e6      	bcs.n	80050b4 <quorem+0xa4>
 80050e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80050ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80050ee:	b922      	cbnz	r2, 80050fa <quorem+0xea>
 80050f0:	3b04      	subs	r3, #4
 80050f2:	429d      	cmp	r5, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	d30b      	bcc.n	8005110 <quorem+0x100>
 80050f8:	613c      	str	r4, [r7, #16]
 80050fa:	3601      	adds	r6, #1
 80050fc:	4630      	mov	r0, r6
 80050fe:	b003      	add	sp, #12
 8005100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005104:	6812      	ldr	r2, [r2, #0]
 8005106:	3b04      	subs	r3, #4
 8005108:	2a00      	cmp	r2, #0
 800510a:	d1cb      	bne.n	80050a4 <quorem+0x94>
 800510c:	3c01      	subs	r4, #1
 800510e:	e7c6      	b.n	800509e <quorem+0x8e>
 8005110:	6812      	ldr	r2, [r2, #0]
 8005112:	3b04      	subs	r3, #4
 8005114:	2a00      	cmp	r2, #0
 8005116:	d1ef      	bne.n	80050f8 <quorem+0xe8>
 8005118:	3c01      	subs	r4, #1
 800511a:	e7ea      	b.n	80050f2 <quorem+0xe2>
 800511c:	2000      	movs	r0, #0
 800511e:	e7ee      	b.n	80050fe <quorem+0xee>

08005120 <_dtoa_r>:
 8005120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005124:	69c7      	ldr	r7, [r0, #28]
 8005126:	b099      	sub	sp, #100	@ 0x64
 8005128:	ed8d 0b02 	vstr	d0, [sp, #8]
 800512c:	ec55 4b10 	vmov	r4, r5, d0
 8005130:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005132:	9109      	str	r1, [sp, #36]	@ 0x24
 8005134:	4683      	mov	fp, r0
 8005136:	920e      	str	r2, [sp, #56]	@ 0x38
 8005138:	9313      	str	r3, [sp, #76]	@ 0x4c
 800513a:	b97f      	cbnz	r7, 800515c <_dtoa_r+0x3c>
 800513c:	2010      	movs	r0, #16
 800513e:	f000 fdfd 	bl	8005d3c <malloc>
 8005142:	4602      	mov	r2, r0
 8005144:	f8cb 001c 	str.w	r0, [fp, #28]
 8005148:	b920      	cbnz	r0, 8005154 <_dtoa_r+0x34>
 800514a:	4ba7      	ldr	r3, [pc, #668]	@ (80053e8 <_dtoa_r+0x2c8>)
 800514c:	21ef      	movs	r1, #239	@ 0xef
 800514e:	48a7      	ldr	r0, [pc, #668]	@ (80053ec <_dtoa_r+0x2cc>)
 8005150:	f002 fbba 	bl	80078c8 <__assert_func>
 8005154:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005158:	6007      	str	r7, [r0, #0]
 800515a:	60c7      	str	r7, [r0, #12]
 800515c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005160:	6819      	ldr	r1, [r3, #0]
 8005162:	b159      	cbz	r1, 800517c <_dtoa_r+0x5c>
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	604a      	str	r2, [r1, #4]
 8005168:	2301      	movs	r3, #1
 800516a:	4093      	lsls	r3, r2
 800516c:	608b      	str	r3, [r1, #8]
 800516e:	4658      	mov	r0, fp
 8005170:	f000 feda 	bl	8005f28 <_Bfree>
 8005174:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005178:	2200      	movs	r2, #0
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	1e2b      	subs	r3, r5, #0
 800517e:	bfb9      	ittee	lt
 8005180:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005184:	9303      	strlt	r3, [sp, #12]
 8005186:	2300      	movge	r3, #0
 8005188:	6033      	strge	r3, [r6, #0]
 800518a:	9f03      	ldr	r7, [sp, #12]
 800518c:	4b98      	ldr	r3, [pc, #608]	@ (80053f0 <_dtoa_r+0x2d0>)
 800518e:	bfbc      	itt	lt
 8005190:	2201      	movlt	r2, #1
 8005192:	6032      	strlt	r2, [r6, #0]
 8005194:	43bb      	bics	r3, r7
 8005196:	d112      	bne.n	80051be <_dtoa_r+0x9e>
 8005198:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800519a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800519e:	6013      	str	r3, [r2, #0]
 80051a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80051a4:	4323      	orrs	r3, r4
 80051a6:	f000 854d 	beq.w	8005c44 <_dtoa_r+0xb24>
 80051aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80051ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005404 <_dtoa_r+0x2e4>
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	f000 854f 	beq.w	8005c54 <_dtoa_r+0xb34>
 80051b6:	f10a 0303 	add.w	r3, sl, #3
 80051ba:	f000 bd49 	b.w	8005c50 <_dtoa_r+0xb30>
 80051be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80051c2:	2200      	movs	r2, #0
 80051c4:	ec51 0b17 	vmov	r0, r1, d7
 80051c8:	2300      	movs	r3, #0
 80051ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80051ce:	f7fb fc83 	bl	8000ad8 <__aeabi_dcmpeq>
 80051d2:	4680      	mov	r8, r0
 80051d4:	b158      	cbz	r0, 80051ee <_dtoa_r+0xce>
 80051d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80051d8:	2301      	movs	r3, #1
 80051da:	6013      	str	r3, [r2, #0]
 80051dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80051de:	b113      	cbz	r3, 80051e6 <_dtoa_r+0xc6>
 80051e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80051e2:	4b84      	ldr	r3, [pc, #528]	@ (80053f4 <_dtoa_r+0x2d4>)
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005408 <_dtoa_r+0x2e8>
 80051ea:	f000 bd33 	b.w	8005c54 <_dtoa_r+0xb34>
 80051ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80051f2:	aa16      	add	r2, sp, #88	@ 0x58
 80051f4:	a917      	add	r1, sp, #92	@ 0x5c
 80051f6:	4658      	mov	r0, fp
 80051f8:	f001 fa3a 	bl	8006670 <__d2b>
 80051fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005200:	4681      	mov	r9, r0
 8005202:	2e00      	cmp	r6, #0
 8005204:	d077      	beq.n	80052f6 <_dtoa_r+0x1d6>
 8005206:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005208:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800520c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005210:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005214:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005218:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800521c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005220:	4619      	mov	r1, r3
 8005222:	2200      	movs	r2, #0
 8005224:	4b74      	ldr	r3, [pc, #464]	@ (80053f8 <_dtoa_r+0x2d8>)
 8005226:	f7fb f837 	bl	8000298 <__aeabi_dsub>
 800522a:	a369      	add	r3, pc, #420	@ (adr r3, 80053d0 <_dtoa_r+0x2b0>)
 800522c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005230:	f7fb f9ea 	bl	8000608 <__aeabi_dmul>
 8005234:	a368      	add	r3, pc, #416	@ (adr r3, 80053d8 <_dtoa_r+0x2b8>)
 8005236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523a:	f7fb f82f 	bl	800029c <__adddf3>
 800523e:	4604      	mov	r4, r0
 8005240:	4630      	mov	r0, r6
 8005242:	460d      	mov	r5, r1
 8005244:	f7fb f976 	bl	8000534 <__aeabi_i2d>
 8005248:	a365      	add	r3, pc, #404	@ (adr r3, 80053e0 <_dtoa_r+0x2c0>)
 800524a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524e:	f7fb f9db 	bl	8000608 <__aeabi_dmul>
 8005252:	4602      	mov	r2, r0
 8005254:	460b      	mov	r3, r1
 8005256:	4620      	mov	r0, r4
 8005258:	4629      	mov	r1, r5
 800525a:	f7fb f81f 	bl	800029c <__adddf3>
 800525e:	4604      	mov	r4, r0
 8005260:	460d      	mov	r5, r1
 8005262:	f7fb fc81 	bl	8000b68 <__aeabi_d2iz>
 8005266:	2200      	movs	r2, #0
 8005268:	4607      	mov	r7, r0
 800526a:	2300      	movs	r3, #0
 800526c:	4620      	mov	r0, r4
 800526e:	4629      	mov	r1, r5
 8005270:	f7fb fc3c 	bl	8000aec <__aeabi_dcmplt>
 8005274:	b140      	cbz	r0, 8005288 <_dtoa_r+0x168>
 8005276:	4638      	mov	r0, r7
 8005278:	f7fb f95c 	bl	8000534 <__aeabi_i2d>
 800527c:	4622      	mov	r2, r4
 800527e:	462b      	mov	r3, r5
 8005280:	f7fb fc2a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005284:	b900      	cbnz	r0, 8005288 <_dtoa_r+0x168>
 8005286:	3f01      	subs	r7, #1
 8005288:	2f16      	cmp	r7, #22
 800528a:	d851      	bhi.n	8005330 <_dtoa_r+0x210>
 800528c:	4b5b      	ldr	r3, [pc, #364]	@ (80053fc <_dtoa_r+0x2dc>)
 800528e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800529a:	f7fb fc27 	bl	8000aec <__aeabi_dcmplt>
 800529e:	2800      	cmp	r0, #0
 80052a0:	d048      	beq.n	8005334 <_dtoa_r+0x214>
 80052a2:	3f01      	subs	r7, #1
 80052a4:	2300      	movs	r3, #0
 80052a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80052a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80052aa:	1b9b      	subs	r3, r3, r6
 80052ac:	1e5a      	subs	r2, r3, #1
 80052ae:	bf44      	itt	mi
 80052b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80052b4:	2300      	movmi	r3, #0
 80052b6:	9208      	str	r2, [sp, #32]
 80052b8:	bf54      	ite	pl
 80052ba:	f04f 0800 	movpl.w	r8, #0
 80052be:	9308      	strmi	r3, [sp, #32]
 80052c0:	2f00      	cmp	r7, #0
 80052c2:	db39      	blt.n	8005338 <_dtoa_r+0x218>
 80052c4:	9b08      	ldr	r3, [sp, #32]
 80052c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80052c8:	443b      	add	r3, r7
 80052ca:	9308      	str	r3, [sp, #32]
 80052cc:	2300      	movs	r3, #0
 80052ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80052d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052d2:	2b09      	cmp	r3, #9
 80052d4:	d864      	bhi.n	80053a0 <_dtoa_r+0x280>
 80052d6:	2b05      	cmp	r3, #5
 80052d8:	bfc4      	itt	gt
 80052da:	3b04      	subgt	r3, #4
 80052dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80052de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052e0:	f1a3 0302 	sub.w	r3, r3, #2
 80052e4:	bfcc      	ite	gt
 80052e6:	2400      	movgt	r4, #0
 80052e8:	2401      	movle	r4, #1
 80052ea:	2b03      	cmp	r3, #3
 80052ec:	d863      	bhi.n	80053b6 <_dtoa_r+0x296>
 80052ee:	e8df f003 	tbb	[pc, r3]
 80052f2:	372a      	.short	0x372a
 80052f4:	5535      	.short	0x5535
 80052f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80052fa:	441e      	add	r6, r3
 80052fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005300:	2b20      	cmp	r3, #32
 8005302:	bfc1      	itttt	gt
 8005304:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005308:	409f      	lslgt	r7, r3
 800530a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800530e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005312:	bfd6      	itet	le
 8005314:	f1c3 0320 	rsble	r3, r3, #32
 8005318:	ea47 0003 	orrgt.w	r0, r7, r3
 800531c:	fa04 f003 	lslle.w	r0, r4, r3
 8005320:	f7fb f8f8 	bl	8000514 <__aeabi_ui2d>
 8005324:	2201      	movs	r2, #1
 8005326:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800532a:	3e01      	subs	r6, #1
 800532c:	9214      	str	r2, [sp, #80]	@ 0x50
 800532e:	e777      	b.n	8005220 <_dtoa_r+0x100>
 8005330:	2301      	movs	r3, #1
 8005332:	e7b8      	b.n	80052a6 <_dtoa_r+0x186>
 8005334:	9012      	str	r0, [sp, #72]	@ 0x48
 8005336:	e7b7      	b.n	80052a8 <_dtoa_r+0x188>
 8005338:	427b      	negs	r3, r7
 800533a:	930a      	str	r3, [sp, #40]	@ 0x28
 800533c:	2300      	movs	r3, #0
 800533e:	eba8 0807 	sub.w	r8, r8, r7
 8005342:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005344:	e7c4      	b.n	80052d0 <_dtoa_r+0x1b0>
 8005346:	2300      	movs	r3, #0
 8005348:	930b      	str	r3, [sp, #44]	@ 0x2c
 800534a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800534c:	2b00      	cmp	r3, #0
 800534e:	dc35      	bgt.n	80053bc <_dtoa_r+0x29c>
 8005350:	2301      	movs	r3, #1
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	9307      	str	r3, [sp, #28]
 8005356:	461a      	mov	r2, r3
 8005358:	920e      	str	r2, [sp, #56]	@ 0x38
 800535a:	e00b      	b.n	8005374 <_dtoa_r+0x254>
 800535c:	2301      	movs	r3, #1
 800535e:	e7f3      	b.n	8005348 <_dtoa_r+0x228>
 8005360:	2300      	movs	r3, #0
 8005362:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005364:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005366:	18fb      	adds	r3, r7, r3
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	3301      	adds	r3, #1
 800536c:	2b01      	cmp	r3, #1
 800536e:	9307      	str	r3, [sp, #28]
 8005370:	bfb8      	it	lt
 8005372:	2301      	movlt	r3, #1
 8005374:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005378:	2100      	movs	r1, #0
 800537a:	2204      	movs	r2, #4
 800537c:	f102 0514 	add.w	r5, r2, #20
 8005380:	429d      	cmp	r5, r3
 8005382:	d91f      	bls.n	80053c4 <_dtoa_r+0x2a4>
 8005384:	6041      	str	r1, [r0, #4]
 8005386:	4658      	mov	r0, fp
 8005388:	f000 fd8e 	bl	8005ea8 <_Balloc>
 800538c:	4682      	mov	sl, r0
 800538e:	2800      	cmp	r0, #0
 8005390:	d13c      	bne.n	800540c <_dtoa_r+0x2ec>
 8005392:	4b1b      	ldr	r3, [pc, #108]	@ (8005400 <_dtoa_r+0x2e0>)
 8005394:	4602      	mov	r2, r0
 8005396:	f240 11af 	movw	r1, #431	@ 0x1af
 800539a:	e6d8      	b.n	800514e <_dtoa_r+0x2e>
 800539c:	2301      	movs	r3, #1
 800539e:	e7e0      	b.n	8005362 <_dtoa_r+0x242>
 80053a0:	2401      	movs	r4, #1
 80053a2:	2300      	movs	r3, #0
 80053a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80053a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80053a8:	f04f 33ff 	mov.w	r3, #4294967295
 80053ac:	9300      	str	r3, [sp, #0]
 80053ae:	9307      	str	r3, [sp, #28]
 80053b0:	2200      	movs	r2, #0
 80053b2:	2312      	movs	r3, #18
 80053b4:	e7d0      	b.n	8005358 <_dtoa_r+0x238>
 80053b6:	2301      	movs	r3, #1
 80053b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053ba:	e7f5      	b.n	80053a8 <_dtoa_r+0x288>
 80053bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	9307      	str	r3, [sp, #28]
 80053c2:	e7d7      	b.n	8005374 <_dtoa_r+0x254>
 80053c4:	3101      	adds	r1, #1
 80053c6:	0052      	lsls	r2, r2, #1
 80053c8:	e7d8      	b.n	800537c <_dtoa_r+0x25c>
 80053ca:	bf00      	nop
 80053cc:	f3af 8000 	nop.w
 80053d0:	636f4361 	.word	0x636f4361
 80053d4:	3fd287a7 	.word	0x3fd287a7
 80053d8:	8b60c8b3 	.word	0x8b60c8b3
 80053dc:	3fc68a28 	.word	0x3fc68a28
 80053e0:	509f79fb 	.word	0x509f79fb
 80053e4:	3fd34413 	.word	0x3fd34413
 80053e8:	0800d5a7 	.word	0x0800d5a7
 80053ec:	0800d5be 	.word	0x0800d5be
 80053f0:	7ff00000 	.word	0x7ff00000
 80053f4:	0800d572 	.word	0x0800d572
 80053f8:	3ff80000 	.word	0x3ff80000
 80053fc:	0800d6b8 	.word	0x0800d6b8
 8005400:	0800d616 	.word	0x0800d616
 8005404:	0800d5a3 	.word	0x0800d5a3
 8005408:	0800d571 	.word	0x0800d571
 800540c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005410:	6018      	str	r0, [r3, #0]
 8005412:	9b07      	ldr	r3, [sp, #28]
 8005414:	2b0e      	cmp	r3, #14
 8005416:	f200 80a4 	bhi.w	8005562 <_dtoa_r+0x442>
 800541a:	2c00      	cmp	r4, #0
 800541c:	f000 80a1 	beq.w	8005562 <_dtoa_r+0x442>
 8005420:	2f00      	cmp	r7, #0
 8005422:	dd33      	ble.n	800548c <_dtoa_r+0x36c>
 8005424:	4bad      	ldr	r3, [pc, #692]	@ (80056dc <_dtoa_r+0x5bc>)
 8005426:	f007 020f 	and.w	r2, r7, #15
 800542a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800542e:	ed93 7b00 	vldr	d7, [r3]
 8005432:	05f8      	lsls	r0, r7, #23
 8005434:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005438:	ea4f 1427 	mov.w	r4, r7, asr #4
 800543c:	d516      	bpl.n	800546c <_dtoa_r+0x34c>
 800543e:	4ba8      	ldr	r3, [pc, #672]	@ (80056e0 <_dtoa_r+0x5c0>)
 8005440:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005444:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005448:	f7fb fa08 	bl	800085c <__aeabi_ddiv>
 800544c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005450:	f004 040f 	and.w	r4, r4, #15
 8005454:	2603      	movs	r6, #3
 8005456:	4da2      	ldr	r5, [pc, #648]	@ (80056e0 <_dtoa_r+0x5c0>)
 8005458:	b954      	cbnz	r4, 8005470 <_dtoa_r+0x350>
 800545a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800545e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005462:	f7fb f9fb 	bl	800085c <__aeabi_ddiv>
 8005466:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800546a:	e028      	b.n	80054be <_dtoa_r+0x39e>
 800546c:	2602      	movs	r6, #2
 800546e:	e7f2      	b.n	8005456 <_dtoa_r+0x336>
 8005470:	07e1      	lsls	r1, r4, #31
 8005472:	d508      	bpl.n	8005486 <_dtoa_r+0x366>
 8005474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005478:	e9d5 2300 	ldrd	r2, r3, [r5]
 800547c:	f7fb f8c4 	bl	8000608 <__aeabi_dmul>
 8005480:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005484:	3601      	adds	r6, #1
 8005486:	1064      	asrs	r4, r4, #1
 8005488:	3508      	adds	r5, #8
 800548a:	e7e5      	b.n	8005458 <_dtoa_r+0x338>
 800548c:	f000 80d2 	beq.w	8005634 <_dtoa_r+0x514>
 8005490:	427c      	negs	r4, r7
 8005492:	4b92      	ldr	r3, [pc, #584]	@ (80056dc <_dtoa_r+0x5bc>)
 8005494:	4d92      	ldr	r5, [pc, #584]	@ (80056e0 <_dtoa_r+0x5c0>)
 8005496:	f004 020f 	and.w	r2, r4, #15
 800549a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800549e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054a6:	f7fb f8af 	bl	8000608 <__aeabi_dmul>
 80054aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054ae:	1124      	asrs	r4, r4, #4
 80054b0:	2300      	movs	r3, #0
 80054b2:	2602      	movs	r6, #2
 80054b4:	2c00      	cmp	r4, #0
 80054b6:	f040 80b2 	bne.w	800561e <_dtoa_r+0x4fe>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d1d3      	bne.n	8005466 <_dtoa_r+0x346>
 80054be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80054c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	f000 80b7 	beq.w	8005638 <_dtoa_r+0x518>
 80054ca:	4b86      	ldr	r3, [pc, #536]	@ (80056e4 <_dtoa_r+0x5c4>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	4620      	mov	r0, r4
 80054d0:	4629      	mov	r1, r5
 80054d2:	f7fb fb0b 	bl	8000aec <__aeabi_dcmplt>
 80054d6:	2800      	cmp	r0, #0
 80054d8:	f000 80ae 	beq.w	8005638 <_dtoa_r+0x518>
 80054dc:	9b07      	ldr	r3, [sp, #28]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 80aa 	beq.w	8005638 <_dtoa_r+0x518>
 80054e4:	9b00      	ldr	r3, [sp, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	dd37      	ble.n	800555a <_dtoa_r+0x43a>
 80054ea:	1e7b      	subs	r3, r7, #1
 80054ec:	9304      	str	r3, [sp, #16]
 80054ee:	4620      	mov	r0, r4
 80054f0:	4b7d      	ldr	r3, [pc, #500]	@ (80056e8 <_dtoa_r+0x5c8>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	4629      	mov	r1, r5
 80054f6:	f7fb f887 	bl	8000608 <__aeabi_dmul>
 80054fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054fe:	9c00      	ldr	r4, [sp, #0]
 8005500:	3601      	adds	r6, #1
 8005502:	4630      	mov	r0, r6
 8005504:	f7fb f816 	bl	8000534 <__aeabi_i2d>
 8005508:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800550c:	f7fb f87c 	bl	8000608 <__aeabi_dmul>
 8005510:	4b76      	ldr	r3, [pc, #472]	@ (80056ec <_dtoa_r+0x5cc>)
 8005512:	2200      	movs	r2, #0
 8005514:	f7fa fec2 	bl	800029c <__adddf3>
 8005518:	4605      	mov	r5, r0
 800551a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800551e:	2c00      	cmp	r4, #0
 8005520:	f040 808d 	bne.w	800563e <_dtoa_r+0x51e>
 8005524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005528:	4b71      	ldr	r3, [pc, #452]	@ (80056f0 <_dtoa_r+0x5d0>)
 800552a:	2200      	movs	r2, #0
 800552c:	f7fa feb4 	bl	8000298 <__aeabi_dsub>
 8005530:	4602      	mov	r2, r0
 8005532:	460b      	mov	r3, r1
 8005534:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005538:	462a      	mov	r2, r5
 800553a:	4633      	mov	r3, r6
 800553c:	f7fb faf4 	bl	8000b28 <__aeabi_dcmpgt>
 8005540:	2800      	cmp	r0, #0
 8005542:	f040 828b 	bne.w	8005a5c <_dtoa_r+0x93c>
 8005546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800554a:	462a      	mov	r2, r5
 800554c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005550:	f7fb facc 	bl	8000aec <__aeabi_dcmplt>
 8005554:	2800      	cmp	r0, #0
 8005556:	f040 8128 	bne.w	80057aa <_dtoa_r+0x68a>
 800555a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800555e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005562:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005564:	2b00      	cmp	r3, #0
 8005566:	f2c0 815a 	blt.w	800581e <_dtoa_r+0x6fe>
 800556a:	2f0e      	cmp	r7, #14
 800556c:	f300 8157 	bgt.w	800581e <_dtoa_r+0x6fe>
 8005570:	4b5a      	ldr	r3, [pc, #360]	@ (80056dc <_dtoa_r+0x5bc>)
 8005572:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005576:	ed93 7b00 	vldr	d7, [r3]
 800557a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800557c:	2b00      	cmp	r3, #0
 800557e:	ed8d 7b00 	vstr	d7, [sp]
 8005582:	da03      	bge.n	800558c <_dtoa_r+0x46c>
 8005584:	9b07      	ldr	r3, [sp, #28]
 8005586:	2b00      	cmp	r3, #0
 8005588:	f340 8101 	ble.w	800578e <_dtoa_r+0x66e>
 800558c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005590:	4656      	mov	r6, sl
 8005592:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005596:	4620      	mov	r0, r4
 8005598:	4629      	mov	r1, r5
 800559a:	f7fb f95f 	bl	800085c <__aeabi_ddiv>
 800559e:	f7fb fae3 	bl	8000b68 <__aeabi_d2iz>
 80055a2:	4680      	mov	r8, r0
 80055a4:	f7fa ffc6 	bl	8000534 <__aeabi_i2d>
 80055a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055ac:	f7fb f82c 	bl	8000608 <__aeabi_dmul>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4620      	mov	r0, r4
 80055b6:	4629      	mov	r1, r5
 80055b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80055bc:	f7fa fe6c 	bl	8000298 <__aeabi_dsub>
 80055c0:	f806 4b01 	strb.w	r4, [r6], #1
 80055c4:	9d07      	ldr	r5, [sp, #28]
 80055c6:	eba6 040a 	sub.w	r4, r6, sl
 80055ca:	42a5      	cmp	r5, r4
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	f040 8117 	bne.w	8005802 <_dtoa_r+0x6e2>
 80055d4:	f7fa fe62 	bl	800029c <__adddf3>
 80055d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055dc:	4604      	mov	r4, r0
 80055de:	460d      	mov	r5, r1
 80055e0:	f7fb faa2 	bl	8000b28 <__aeabi_dcmpgt>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	f040 80f9 	bne.w	80057dc <_dtoa_r+0x6bc>
 80055ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055ee:	4620      	mov	r0, r4
 80055f0:	4629      	mov	r1, r5
 80055f2:	f7fb fa71 	bl	8000ad8 <__aeabi_dcmpeq>
 80055f6:	b118      	cbz	r0, 8005600 <_dtoa_r+0x4e0>
 80055f8:	f018 0f01 	tst.w	r8, #1
 80055fc:	f040 80ee 	bne.w	80057dc <_dtoa_r+0x6bc>
 8005600:	4649      	mov	r1, r9
 8005602:	4658      	mov	r0, fp
 8005604:	f000 fc90 	bl	8005f28 <_Bfree>
 8005608:	2300      	movs	r3, #0
 800560a:	7033      	strb	r3, [r6, #0]
 800560c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800560e:	3701      	adds	r7, #1
 8005610:	601f      	str	r7, [r3, #0]
 8005612:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 831d 	beq.w	8005c54 <_dtoa_r+0xb34>
 800561a:	601e      	str	r6, [r3, #0]
 800561c:	e31a      	b.n	8005c54 <_dtoa_r+0xb34>
 800561e:	07e2      	lsls	r2, r4, #31
 8005620:	d505      	bpl.n	800562e <_dtoa_r+0x50e>
 8005622:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005626:	f7fa ffef 	bl	8000608 <__aeabi_dmul>
 800562a:	3601      	adds	r6, #1
 800562c:	2301      	movs	r3, #1
 800562e:	1064      	asrs	r4, r4, #1
 8005630:	3508      	adds	r5, #8
 8005632:	e73f      	b.n	80054b4 <_dtoa_r+0x394>
 8005634:	2602      	movs	r6, #2
 8005636:	e742      	b.n	80054be <_dtoa_r+0x39e>
 8005638:	9c07      	ldr	r4, [sp, #28]
 800563a:	9704      	str	r7, [sp, #16]
 800563c:	e761      	b.n	8005502 <_dtoa_r+0x3e2>
 800563e:	4b27      	ldr	r3, [pc, #156]	@ (80056dc <_dtoa_r+0x5bc>)
 8005640:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005642:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005646:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800564a:	4454      	add	r4, sl
 800564c:	2900      	cmp	r1, #0
 800564e:	d053      	beq.n	80056f8 <_dtoa_r+0x5d8>
 8005650:	4928      	ldr	r1, [pc, #160]	@ (80056f4 <_dtoa_r+0x5d4>)
 8005652:	2000      	movs	r0, #0
 8005654:	f7fb f902 	bl	800085c <__aeabi_ddiv>
 8005658:	4633      	mov	r3, r6
 800565a:	462a      	mov	r2, r5
 800565c:	f7fa fe1c 	bl	8000298 <__aeabi_dsub>
 8005660:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005664:	4656      	mov	r6, sl
 8005666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800566a:	f7fb fa7d 	bl	8000b68 <__aeabi_d2iz>
 800566e:	4605      	mov	r5, r0
 8005670:	f7fa ff60 	bl	8000534 <__aeabi_i2d>
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800567c:	f7fa fe0c 	bl	8000298 <__aeabi_dsub>
 8005680:	3530      	adds	r5, #48	@ 0x30
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800568a:	f806 5b01 	strb.w	r5, [r6], #1
 800568e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005692:	f7fb fa2b 	bl	8000aec <__aeabi_dcmplt>
 8005696:	2800      	cmp	r0, #0
 8005698:	d171      	bne.n	800577e <_dtoa_r+0x65e>
 800569a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800569e:	4911      	ldr	r1, [pc, #68]	@ (80056e4 <_dtoa_r+0x5c4>)
 80056a0:	2000      	movs	r0, #0
 80056a2:	f7fa fdf9 	bl	8000298 <__aeabi_dsub>
 80056a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80056aa:	f7fb fa1f 	bl	8000aec <__aeabi_dcmplt>
 80056ae:	2800      	cmp	r0, #0
 80056b0:	f040 8095 	bne.w	80057de <_dtoa_r+0x6be>
 80056b4:	42a6      	cmp	r6, r4
 80056b6:	f43f af50 	beq.w	800555a <_dtoa_r+0x43a>
 80056ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80056be:	4b0a      	ldr	r3, [pc, #40]	@ (80056e8 <_dtoa_r+0x5c8>)
 80056c0:	2200      	movs	r2, #0
 80056c2:	f7fa ffa1 	bl	8000608 <__aeabi_dmul>
 80056c6:	4b08      	ldr	r3, [pc, #32]	@ (80056e8 <_dtoa_r+0x5c8>)
 80056c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80056cc:	2200      	movs	r2, #0
 80056ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056d2:	f7fa ff99 	bl	8000608 <__aeabi_dmul>
 80056d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056da:	e7c4      	b.n	8005666 <_dtoa_r+0x546>
 80056dc:	0800d6b8 	.word	0x0800d6b8
 80056e0:	0800d690 	.word	0x0800d690
 80056e4:	3ff00000 	.word	0x3ff00000
 80056e8:	40240000 	.word	0x40240000
 80056ec:	401c0000 	.word	0x401c0000
 80056f0:	40140000 	.word	0x40140000
 80056f4:	3fe00000 	.word	0x3fe00000
 80056f8:	4631      	mov	r1, r6
 80056fa:	4628      	mov	r0, r5
 80056fc:	f7fa ff84 	bl	8000608 <__aeabi_dmul>
 8005700:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005704:	9415      	str	r4, [sp, #84]	@ 0x54
 8005706:	4656      	mov	r6, sl
 8005708:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800570c:	f7fb fa2c 	bl	8000b68 <__aeabi_d2iz>
 8005710:	4605      	mov	r5, r0
 8005712:	f7fa ff0f 	bl	8000534 <__aeabi_i2d>
 8005716:	4602      	mov	r2, r0
 8005718:	460b      	mov	r3, r1
 800571a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800571e:	f7fa fdbb 	bl	8000298 <__aeabi_dsub>
 8005722:	3530      	adds	r5, #48	@ 0x30
 8005724:	f806 5b01 	strb.w	r5, [r6], #1
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	42a6      	cmp	r6, r4
 800572e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005732:	f04f 0200 	mov.w	r2, #0
 8005736:	d124      	bne.n	8005782 <_dtoa_r+0x662>
 8005738:	4bac      	ldr	r3, [pc, #688]	@ (80059ec <_dtoa_r+0x8cc>)
 800573a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800573e:	f7fa fdad 	bl	800029c <__adddf3>
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800574a:	f7fb f9ed 	bl	8000b28 <__aeabi_dcmpgt>
 800574e:	2800      	cmp	r0, #0
 8005750:	d145      	bne.n	80057de <_dtoa_r+0x6be>
 8005752:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005756:	49a5      	ldr	r1, [pc, #660]	@ (80059ec <_dtoa_r+0x8cc>)
 8005758:	2000      	movs	r0, #0
 800575a:	f7fa fd9d 	bl	8000298 <__aeabi_dsub>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005766:	f7fb f9c1 	bl	8000aec <__aeabi_dcmplt>
 800576a:	2800      	cmp	r0, #0
 800576c:	f43f aef5 	beq.w	800555a <_dtoa_r+0x43a>
 8005770:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005772:	1e73      	subs	r3, r6, #1
 8005774:	9315      	str	r3, [sp, #84]	@ 0x54
 8005776:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800577a:	2b30      	cmp	r3, #48	@ 0x30
 800577c:	d0f8      	beq.n	8005770 <_dtoa_r+0x650>
 800577e:	9f04      	ldr	r7, [sp, #16]
 8005780:	e73e      	b.n	8005600 <_dtoa_r+0x4e0>
 8005782:	4b9b      	ldr	r3, [pc, #620]	@ (80059f0 <_dtoa_r+0x8d0>)
 8005784:	f7fa ff40 	bl	8000608 <__aeabi_dmul>
 8005788:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800578c:	e7bc      	b.n	8005708 <_dtoa_r+0x5e8>
 800578e:	d10c      	bne.n	80057aa <_dtoa_r+0x68a>
 8005790:	4b98      	ldr	r3, [pc, #608]	@ (80059f4 <_dtoa_r+0x8d4>)
 8005792:	2200      	movs	r2, #0
 8005794:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005798:	f7fa ff36 	bl	8000608 <__aeabi_dmul>
 800579c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057a0:	f7fb f9b8 	bl	8000b14 <__aeabi_dcmpge>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	f000 8157 	beq.w	8005a58 <_dtoa_r+0x938>
 80057aa:	2400      	movs	r4, #0
 80057ac:	4625      	mov	r5, r4
 80057ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057b0:	43db      	mvns	r3, r3
 80057b2:	9304      	str	r3, [sp, #16]
 80057b4:	4656      	mov	r6, sl
 80057b6:	2700      	movs	r7, #0
 80057b8:	4621      	mov	r1, r4
 80057ba:	4658      	mov	r0, fp
 80057bc:	f000 fbb4 	bl	8005f28 <_Bfree>
 80057c0:	2d00      	cmp	r5, #0
 80057c2:	d0dc      	beq.n	800577e <_dtoa_r+0x65e>
 80057c4:	b12f      	cbz	r7, 80057d2 <_dtoa_r+0x6b2>
 80057c6:	42af      	cmp	r7, r5
 80057c8:	d003      	beq.n	80057d2 <_dtoa_r+0x6b2>
 80057ca:	4639      	mov	r1, r7
 80057cc:	4658      	mov	r0, fp
 80057ce:	f000 fbab 	bl	8005f28 <_Bfree>
 80057d2:	4629      	mov	r1, r5
 80057d4:	4658      	mov	r0, fp
 80057d6:	f000 fba7 	bl	8005f28 <_Bfree>
 80057da:	e7d0      	b.n	800577e <_dtoa_r+0x65e>
 80057dc:	9704      	str	r7, [sp, #16]
 80057de:	4633      	mov	r3, r6
 80057e0:	461e      	mov	r6, r3
 80057e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057e6:	2a39      	cmp	r2, #57	@ 0x39
 80057e8:	d107      	bne.n	80057fa <_dtoa_r+0x6da>
 80057ea:	459a      	cmp	sl, r3
 80057ec:	d1f8      	bne.n	80057e0 <_dtoa_r+0x6c0>
 80057ee:	9a04      	ldr	r2, [sp, #16]
 80057f0:	3201      	adds	r2, #1
 80057f2:	9204      	str	r2, [sp, #16]
 80057f4:	2230      	movs	r2, #48	@ 0x30
 80057f6:	f88a 2000 	strb.w	r2, [sl]
 80057fa:	781a      	ldrb	r2, [r3, #0]
 80057fc:	3201      	adds	r2, #1
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	e7bd      	b.n	800577e <_dtoa_r+0x65e>
 8005802:	4b7b      	ldr	r3, [pc, #492]	@ (80059f0 <_dtoa_r+0x8d0>)
 8005804:	2200      	movs	r2, #0
 8005806:	f7fa feff 	bl	8000608 <__aeabi_dmul>
 800580a:	2200      	movs	r2, #0
 800580c:	2300      	movs	r3, #0
 800580e:	4604      	mov	r4, r0
 8005810:	460d      	mov	r5, r1
 8005812:	f7fb f961 	bl	8000ad8 <__aeabi_dcmpeq>
 8005816:	2800      	cmp	r0, #0
 8005818:	f43f aebb 	beq.w	8005592 <_dtoa_r+0x472>
 800581c:	e6f0      	b.n	8005600 <_dtoa_r+0x4e0>
 800581e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005820:	2a00      	cmp	r2, #0
 8005822:	f000 80db 	beq.w	80059dc <_dtoa_r+0x8bc>
 8005826:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005828:	2a01      	cmp	r2, #1
 800582a:	f300 80bf 	bgt.w	80059ac <_dtoa_r+0x88c>
 800582e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005830:	2a00      	cmp	r2, #0
 8005832:	f000 80b7 	beq.w	80059a4 <_dtoa_r+0x884>
 8005836:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800583a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800583c:	4646      	mov	r6, r8
 800583e:	9a08      	ldr	r2, [sp, #32]
 8005840:	2101      	movs	r1, #1
 8005842:	441a      	add	r2, r3
 8005844:	4658      	mov	r0, fp
 8005846:	4498      	add	r8, r3
 8005848:	9208      	str	r2, [sp, #32]
 800584a:	f000 fc6b 	bl	8006124 <__i2b>
 800584e:	4605      	mov	r5, r0
 8005850:	b15e      	cbz	r6, 800586a <_dtoa_r+0x74a>
 8005852:	9b08      	ldr	r3, [sp, #32]
 8005854:	2b00      	cmp	r3, #0
 8005856:	dd08      	ble.n	800586a <_dtoa_r+0x74a>
 8005858:	42b3      	cmp	r3, r6
 800585a:	9a08      	ldr	r2, [sp, #32]
 800585c:	bfa8      	it	ge
 800585e:	4633      	movge	r3, r6
 8005860:	eba8 0803 	sub.w	r8, r8, r3
 8005864:	1af6      	subs	r6, r6, r3
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	9308      	str	r3, [sp, #32]
 800586a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800586c:	b1f3      	cbz	r3, 80058ac <_dtoa_r+0x78c>
 800586e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 80b7 	beq.w	80059e4 <_dtoa_r+0x8c4>
 8005876:	b18c      	cbz	r4, 800589c <_dtoa_r+0x77c>
 8005878:	4629      	mov	r1, r5
 800587a:	4622      	mov	r2, r4
 800587c:	4658      	mov	r0, fp
 800587e:	f000 fd11 	bl	80062a4 <__pow5mult>
 8005882:	464a      	mov	r2, r9
 8005884:	4601      	mov	r1, r0
 8005886:	4605      	mov	r5, r0
 8005888:	4658      	mov	r0, fp
 800588a:	f000 fc61 	bl	8006150 <__multiply>
 800588e:	4649      	mov	r1, r9
 8005890:	9004      	str	r0, [sp, #16]
 8005892:	4658      	mov	r0, fp
 8005894:	f000 fb48 	bl	8005f28 <_Bfree>
 8005898:	9b04      	ldr	r3, [sp, #16]
 800589a:	4699      	mov	r9, r3
 800589c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800589e:	1b1a      	subs	r2, r3, r4
 80058a0:	d004      	beq.n	80058ac <_dtoa_r+0x78c>
 80058a2:	4649      	mov	r1, r9
 80058a4:	4658      	mov	r0, fp
 80058a6:	f000 fcfd 	bl	80062a4 <__pow5mult>
 80058aa:	4681      	mov	r9, r0
 80058ac:	2101      	movs	r1, #1
 80058ae:	4658      	mov	r0, fp
 80058b0:	f000 fc38 	bl	8006124 <__i2b>
 80058b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80058b6:	4604      	mov	r4, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f000 81cf 	beq.w	8005c5c <_dtoa_r+0xb3c>
 80058be:	461a      	mov	r2, r3
 80058c0:	4601      	mov	r1, r0
 80058c2:	4658      	mov	r0, fp
 80058c4:	f000 fcee 	bl	80062a4 <__pow5mult>
 80058c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	4604      	mov	r4, r0
 80058ce:	f300 8095 	bgt.w	80059fc <_dtoa_r+0x8dc>
 80058d2:	9b02      	ldr	r3, [sp, #8]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f040 8087 	bne.w	80059e8 <_dtoa_r+0x8c8>
 80058da:	9b03      	ldr	r3, [sp, #12]
 80058dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f040 8089 	bne.w	80059f8 <_dtoa_r+0x8d8>
 80058e6:	9b03      	ldr	r3, [sp, #12]
 80058e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80058ec:	0d1b      	lsrs	r3, r3, #20
 80058ee:	051b      	lsls	r3, r3, #20
 80058f0:	b12b      	cbz	r3, 80058fe <_dtoa_r+0x7de>
 80058f2:	9b08      	ldr	r3, [sp, #32]
 80058f4:	3301      	adds	r3, #1
 80058f6:	9308      	str	r3, [sp, #32]
 80058f8:	f108 0801 	add.w	r8, r8, #1
 80058fc:	2301      	movs	r3, #1
 80058fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8005900:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005902:	2b00      	cmp	r3, #0
 8005904:	f000 81b0 	beq.w	8005c68 <_dtoa_r+0xb48>
 8005908:	6923      	ldr	r3, [r4, #16]
 800590a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800590e:	6918      	ldr	r0, [r3, #16]
 8005910:	f000 fbbc 	bl	800608c <__hi0bits>
 8005914:	f1c0 0020 	rsb	r0, r0, #32
 8005918:	9b08      	ldr	r3, [sp, #32]
 800591a:	4418      	add	r0, r3
 800591c:	f010 001f 	ands.w	r0, r0, #31
 8005920:	d077      	beq.n	8005a12 <_dtoa_r+0x8f2>
 8005922:	f1c0 0320 	rsb	r3, r0, #32
 8005926:	2b04      	cmp	r3, #4
 8005928:	dd6b      	ble.n	8005a02 <_dtoa_r+0x8e2>
 800592a:	9b08      	ldr	r3, [sp, #32]
 800592c:	f1c0 001c 	rsb	r0, r0, #28
 8005930:	4403      	add	r3, r0
 8005932:	4480      	add	r8, r0
 8005934:	4406      	add	r6, r0
 8005936:	9308      	str	r3, [sp, #32]
 8005938:	f1b8 0f00 	cmp.w	r8, #0
 800593c:	dd05      	ble.n	800594a <_dtoa_r+0x82a>
 800593e:	4649      	mov	r1, r9
 8005940:	4642      	mov	r2, r8
 8005942:	4658      	mov	r0, fp
 8005944:	f000 fd08 	bl	8006358 <__lshift>
 8005948:	4681      	mov	r9, r0
 800594a:	9b08      	ldr	r3, [sp, #32]
 800594c:	2b00      	cmp	r3, #0
 800594e:	dd05      	ble.n	800595c <_dtoa_r+0x83c>
 8005950:	4621      	mov	r1, r4
 8005952:	461a      	mov	r2, r3
 8005954:	4658      	mov	r0, fp
 8005956:	f000 fcff 	bl	8006358 <__lshift>
 800595a:	4604      	mov	r4, r0
 800595c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800595e:	2b00      	cmp	r3, #0
 8005960:	d059      	beq.n	8005a16 <_dtoa_r+0x8f6>
 8005962:	4621      	mov	r1, r4
 8005964:	4648      	mov	r0, r9
 8005966:	f000 fd63 	bl	8006430 <__mcmp>
 800596a:	2800      	cmp	r0, #0
 800596c:	da53      	bge.n	8005a16 <_dtoa_r+0x8f6>
 800596e:	1e7b      	subs	r3, r7, #1
 8005970:	9304      	str	r3, [sp, #16]
 8005972:	4649      	mov	r1, r9
 8005974:	2300      	movs	r3, #0
 8005976:	220a      	movs	r2, #10
 8005978:	4658      	mov	r0, fp
 800597a:	f000 faf7 	bl	8005f6c <__multadd>
 800597e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005980:	4681      	mov	r9, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 8172 	beq.w	8005c6c <_dtoa_r+0xb4c>
 8005988:	2300      	movs	r3, #0
 800598a:	4629      	mov	r1, r5
 800598c:	220a      	movs	r2, #10
 800598e:	4658      	mov	r0, fp
 8005990:	f000 faec 	bl	8005f6c <__multadd>
 8005994:	9b00      	ldr	r3, [sp, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	4605      	mov	r5, r0
 800599a:	dc67      	bgt.n	8005a6c <_dtoa_r+0x94c>
 800599c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800599e:	2b02      	cmp	r3, #2
 80059a0:	dc41      	bgt.n	8005a26 <_dtoa_r+0x906>
 80059a2:	e063      	b.n	8005a6c <_dtoa_r+0x94c>
 80059a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80059a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80059aa:	e746      	b.n	800583a <_dtoa_r+0x71a>
 80059ac:	9b07      	ldr	r3, [sp, #28]
 80059ae:	1e5c      	subs	r4, r3, #1
 80059b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059b2:	42a3      	cmp	r3, r4
 80059b4:	bfbf      	itttt	lt
 80059b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80059b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80059ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80059bc:	1ae3      	sublt	r3, r4, r3
 80059be:	bfb4      	ite	lt
 80059c0:	18d2      	addlt	r2, r2, r3
 80059c2:	1b1c      	subge	r4, r3, r4
 80059c4:	9b07      	ldr	r3, [sp, #28]
 80059c6:	bfbc      	itt	lt
 80059c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80059ca:	2400      	movlt	r4, #0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	bfb5      	itete	lt
 80059d0:	eba8 0603 	sublt.w	r6, r8, r3
 80059d4:	9b07      	ldrge	r3, [sp, #28]
 80059d6:	2300      	movlt	r3, #0
 80059d8:	4646      	movge	r6, r8
 80059da:	e730      	b.n	800583e <_dtoa_r+0x71e>
 80059dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80059de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80059e0:	4646      	mov	r6, r8
 80059e2:	e735      	b.n	8005850 <_dtoa_r+0x730>
 80059e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80059e6:	e75c      	b.n	80058a2 <_dtoa_r+0x782>
 80059e8:	2300      	movs	r3, #0
 80059ea:	e788      	b.n	80058fe <_dtoa_r+0x7de>
 80059ec:	3fe00000 	.word	0x3fe00000
 80059f0:	40240000 	.word	0x40240000
 80059f4:	40140000 	.word	0x40140000
 80059f8:	9b02      	ldr	r3, [sp, #8]
 80059fa:	e780      	b.n	80058fe <_dtoa_r+0x7de>
 80059fc:	2300      	movs	r3, #0
 80059fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a00:	e782      	b.n	8005908 <_dtoa_r+0x7e8>
 8005a02:	d099      	beq.n	8005938 <_dtoa_r+0x818>
 8005a04:	9a08      	ldr	r2, [sp, #32]
 8005a06:	331c      	adds	r3, #28
 8005a08:	441a      	add	r2, r3
 8005a0a:	4498      	add	r8, r3
 8005a0c:	441e      	add	r6, r3
 8005a0e:	9208      	str	r2, [sp, #32]
 8005a10:	e792      	b.n	8005938 <_dtoa_r+0x818>
 8005a12:	4603      	mov	r3, r0
 8005a14:	e7f6      	b.n	8005a04 <_dtoa_r+0x8e4>
 8005a16:	9b07      	ldr	r3, [sp, #28]
 8005a18:	9704      	str	r7, [sp, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	dc20      	bgt.n	8005a60 <_dtoa_r+0x940>
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	dd1e      	ble.n	8005a64 <_dtoa_r+0x944>
 8005a26:	9b00      	ldr	r3, [sp, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f47f aec0 	bne.w	80057ae <_dtoa_r+0x68e>
 8005a2e:	4621      	mov	r1, r4
 8005a30:	2205      	movs	r2, #5
 8005a32:	4658      	mov	r0, fp
 8005a34:	f000 fa9a 	bl	8005f6c <__multadd>
 8005a38:	4601      	mov	r1, r0
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	4648      	mov	r0, r9
 8005a3e:	f000 fcf7 	bl	8006430 <__mcmp>
 8005a42:	2800      	cmp	r0, #0
 8005a44:	f77f aeb3 	ble.w	80057ae <_dtoa_r+0x68e>
 8005a48:	4656      	mov	r6, sl
 8005a4a:	2331      	movs	r3, #49	@ 0x31
 8005a4c:	f806 3b01 	strb.w	r3, [r6], #1
 8005a50:	9b04      	ldr	r3, [sp, #16]
 8005a52:	3301      	adds	r3, #1
 8005a54:	9304      	str	r3, [sp, #16]
 8005a56:	e6ae      	b.n	80057b6 <_dtoa_r+0x696>
 8005a58:	9c07      	ldr	r4, [sp, #28]
 8005a5a:	9704      	str	r7, [sp, #16]
 8005a5c:	4625      	mov	r5, r4
 8005a5e:	e7f3      	b.n	8005a48 <_dtoa_r+0x928>
 8005a60:	9b07      	ldr	r3, [sp, #28]
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f000 8104 	beq.w	8005c74 <_dtoa_r+0xb54>
 8005a6c:	2e00      	cmp	r6, #0
 8005a6e:	dd05      	ble.n	8005a7c <_dtoa_r+0x95c>
 8005a70:	4629      	mov	r1, r5
 8005a72:	4632      	mov	r2, r6
 8005a74:	4658      	mov	r0, fp
 8005a76:	f000 fc6f 	bl	8006358 <__lshift>
 8005a7a:	4605      	mov	r5, r0
 8005a7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d05a      	beq.n	8005b38 <_dtoa_r+0xa18>
 8005a82:	6869      	ldr	r1, [r5, #4]
 8005a84:	4658      	mov	r0, fp
 8005a86:	f000 fa0f 	bl	8005ea8 <_Balloc>
 8005a8a:	4606      	mov	r6, r0
 8005a8c:	b928      	cbnz	r0, 8005a9a <_dtoa_r+0x97a>
 8005a8e:	4b84      	ldr	r3, [pc, #528]	@ (8005ca0 <_dtoa_r+0xb80>)
 8005a90:	4602      	mov	r2, r0
 8005a92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005a96:	f7ff bb5a 	b.w	800514e <_dtoa_r+0x2e>
 8005a9a:	692a      	ldr	r2, [r5, #16]
 8005a9c:	3202      	adds	r2, #2
 8005a9e:	0092      	lsls	r2, r2, #2
 8005aa0:	f105 010c 	add.w	r1, r5, #12
 8005aa4:	300c      	adds	r0, #12
 8005aa6:	f001 fef9 	bl	800789c <memcpy>
 8005aaa:	2201      	movs	r2, #1
 8005aac:	4631      	mov	r1, r6
 8005aae:	4658      	mov	r0, fp
 8005ab0:	f000 fc52 	bl	8006358 <__lshift>
 8005ab4:	f10a 0301 	add.w	r3, sl, #1
 8005ab8:	9307      	str	r3, [sp, #28]
 8005aba:	9b00      	ldr	r3, [sp, #0]
 8005abc:	4453      	add	r3, sl
 8005abe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ac0:	9b02      	ldr	r3, [sp, #8]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	462f      	mov	r7, r5
 8005ac8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005aca:	4605      	mov	r5, r0
 8005acc:	9b07      	ldr	r3, [sp, #28]
 8005ace:	4621      	mov	r1, r4
 8005ad0:	3b01      	subs	r3, #1
 8005ad2:	4648      	mov	r0, r9
 8005ad4:	9300      	str	r3, [sp, #0]
 8005ad6:	f7ff fa9b 	bl	8005010 <quorem>
 8005ada:	4639      	mov	r1, r7
 8005adc:	9002      	str	r0, [sp, #8]
 8005ade:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005ae2:	4648      	mov	r0, r9
 8005ae4:	f000 fca4 	bl	8006430 <__mcmp>
 8005ae8:	462a      	mov	r2, r5
 8005aea:	9008      	str	r0, [sp, #32]
 8005aec:	4621      	mov	r1, r4
 8005aee:	4658      	mov	r0, fp
 8005af0:	f000 fcba 	bl	8006468 <__mdiff>
 8005af4:	68c2      	ldr	r2, [r0, #12]
 8005af6:	4606      	mov	r6, r0
 8005af8:	bb02      	cbnz	r2, 8005b3c <_dtoa_r+0xa1c>
 8005afa:	4601      	mov	r1, r0
 8005afc:	4648      	mov	r0, r9
 8005afe:	f000 fc97 	bl	8006430 <__mcmp>
 8005b02:	4602      	mov	r2, r0
 8005b04:	4631      	mov	r1, r6
 8005b06:	4658      	mov	r0, fp
 8005b08:	920e      	str	r2, [sp, #56]	@ 0x38
 8005b0a:	f000 fa0d 	bl	8005f28 <_Bfree>
 8005b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005b12:	9e07      	ldr	r6, [sp, #28]
 8005b14:	ea43 0102 	orr.w	r1, r3, r2
 8005b18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b1a:	4319      	orrs	r1, r3
 8005b1c:	d110      	bne.n	8005b40 <_dtoa_r+0xa20>
 8005b1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005b22:	d029      	beq.n	8005b78 <_dtoa_r+0xa58>
 8005b24:	9b08      	ldr	r3, [sp, #32]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	dd02      	ble.n	8005b30 <_dtoa_r+0xa10>
 8005b2a:	9b02      	ldr	r3, [sp, #8]
 8005b2c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005b30:	9b00      	ldr	r3, [sp, #0]
 8005b32:	f883 8000 	strb.w	r8, [r3]
 8005b36:	e63f      	b.n	80057b8 <_dtoa_r+0x698>
 8005b38:	4628      	mov	r0, r5
 8005b3a:	e7bb      	b.n	8005ab4 <_dtoa_r+0x994>
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	e7e1      	b.n	8005b04 <_dtoa_r+0x9e4>
 8005b40:	9b08      	ldr	r3, [sp, #32]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	db04      	blt.n	8005b50 <_dtoa_r+0xa30>
 8005b46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b48:	430b      	orrs	r3, r1
 8005b4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	d120      	bne.n	8005b92 <_dtoa_r+0xa72>
 8005b50:	2a00      	cmp	r2, #0
 8005b52:	dded      	ble.n	8005b30 <_dtoa_r+0xa10>
 8005b54:	4649      	mov	r1, r9
 8005b56:	2201      	movs	r2, #1
 8005b58:	4658      	mov	r0, fp
 8005b5a:	f000 fbfd 	bl	8006358 <__lshift>
 8005b5e:	4621      	mov	r1, r4
 8005b60:	4681      	mov	r9, r0
 8005b62:	f000 fc65 	bl	8006430 <__mcmp>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	dc03      	bgt.n	8005b72 <_dtoa_r+0xa52>
 8005b6a:	d1e1      	bne.n	8005b30 <_dtoa_r+0xa10>
 8005b6c:	f018 0f01 	tst.w	r8, #1
 8005b70:	d0de      	beq.n	8005b30 <_dtoa_r+0xa10>
 8005b72:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005b76:	d1d8      	bne.n	8005b2a <_dtoa_r+0xa0a>
 8005b78:	9a00      	ldr	r2, [sp, #0]
 8005b7a:	2339      	movs	r3, #57	@ 0x39
 8005b7c:	7013      	strb	r3, [r2, #0]
 8005b7e:	4633      	mov	r3, r6
 8005b80:	461e      	mov	r6, r3
 8005b82:	3b01      	subs	r3, #1
 8005b84:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005b88:	2a39      	cmp	r2, #57	@ 0x39
 8005b8a:	d052      	beq.n	8005c32 <_dtoa_r+0xb12>
 8005b8c:	3201      	adds	r2, #1
 8005b8e:	701a      	strb	r2, [r3, #0]
 8005b90:	e612      	b.n	80057b8 <_dtoa_r+0x698>
 8005b92:	2a00      	cmp	r2, #0
 8005b94:	dd07      	ble.n	8005ba6 <_dtoa_r+0xa86>
 8005b96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005b9a:	d0ed      	beq.n	8005b78 <_dtoa_r+0xa58>
 8005b9c:	9a00      	ldr	r2, [sp, #0]
 8005b9e:	f108 0301 	add.w	r3, r8, #1
 8005ba2:	7013      	strb	r3, [r2, #0]
 8005ba4:	e608      	b.n	80057b8 <_dtoa_r+0x698>
 8005ba6:	9b07      	ldr	r3, [sp, #28]
 8005ba8:	9a07      	ldr	r2, [sp, #28]
 8005baa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8005bae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d028      	beq.n	8005c06 <_dtoa_r+0xae6>
 8005bb4:	4649      	mov	r1, r9
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	220a      	movs	r2, #10
 8005bba:	4658      	mov	r0, fp
 8005bbc:	f000 f9d6 	bl	8005f6c <__multadd>
 8005bc0:	42af      	cmp	r7, r5
 8005bc2:	4681      	mov	r9, r0
 8005bc4:	f04f 0300 	mov.w	r3, #0
 8005bc8:	f04f 020a 	mov.w	r2, #10
 8005bcc:	4639      	mov	r1, r7
 8005bce:	4658      	mov	r0, fp
 8005bd0:	d107      	bne.n	8005be2 <_dtoa_r+0xac2>
 8005bd2:	f000 f9cb 	bl	8005f6c <__multadd>
 8005bd6:	4607      	mov	r7, r0
 8005bd8:	4605      	mov	r5, r0
 8005bda:	9b07      	ldr	r3, [sp, #28]
 8005bdc:	3301      	adds	r3, #1
 8005bde:	9307      	str	r3, [sp, #28]
 8005be0:	e774      	b.n	8005acc <_dtoa_r+0x9ac>
 8005be2:	f000 f9c3 	bl	8005f6c <__multadd>
 8005be6:	4629      	mov	r1, r5
 8005be8:	4607      	mov	r7, r0
 8005bea:	2300      	movs	r3, #0
 8005bec:	220a      	movs	r2, #10
 8005bee:	4658      	mov	r0, fp
 8005bf0:	f000 f9bc 	bl	8005f6c <__multadd>
 8005bf4:	4605      	mov	r5, r0
 8005bf6:	e7f0      	b.n	8005bda <_dtoa_r+0xaba>
 8005bf8:	9b00      	ldr	r3, [sp, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	bfcc      	ite	gt
 8005bfe:	461e      	movgt	r6, r3
 8005c00:	2601      	movle	r6, #1
 8005c02:	4456      	add	r6, sl
 8005c04:	2700      	movs	r7, #0
 8005c06:	4649      	mov	r1, r9
 8005c08:	2201      	movs	r2, #1
 8005c0a:	4658      	mov	r0, fp
 8005c0c:	f000 fba4 	bl	8006358 <__lshift>
 8005c10:	4621      	mov	r1, r4
 8005c12:	4681      	mov	r9, r0
 8005c14:	f000 fc0c 	bl	8006430 <__mcmp>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	dcb0      	bgt.n	8005b7e <_dtoa_r+0xa5e>
 8005c1c:	d102      	bne.n	8005c24 <_dtoa_r+0xb04>
 8005c1e:	f018 0f01 	tst.w	r8, #1
 8005c22:	d1ac      	bne.n	8005b7e <_dtoa_r+0xa5e>
 8005c24:	4633      	mov	r3, r6
 8005c26:	461e      	mov	r6, r3
 8005c28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c2c:	2a30      	cmp	r2, #48	@ 0x30
 8005c2e:	d0fa      	beq.n	8005c26 <_dtoa_r+0xb06>
 8005c30:	e5c2      	b.n	80057b8 <_dtoa_r+0x698>
 8005c32:	459a      	cmp	sl, r3
 8005c34:	d1a4      	bne.n	8005b80 <_dtoa_r+0xa60>
 8005c36:	9b04      	ldr	r3, [sp, #16]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	9304      	str	r3, [sp, #16]
 8005c3c:	2331      	movs	r3, #49	@ 0x31
 8005c3e:	f88a 3000 	strb.w	r3, [sl]
 8005c42:	e5b9      	b.n	80057b8 <_dtoa_r+0x698>
 8005c44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005c46:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005ca4 <_dtoa_r+0xb84>
 8005c4a:	b11b      	cbz	r3, 8005c54 <_dtoa_r+0xb34>
 8005c4c:	f10a 0308 	add.w	r3, sl, #8
 8005c50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	4650      	mov	r0, sl
 8005c56:	b019      	add	sp, #100	@ 0x64
 8005c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	f77f ae37 	ble.w	80058d2 <_dtoa_r+0x7b2>
 8005c64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c66:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c68:	2001      	movs	r0, #1
 8005c6a:	e655      	b.n	8005918 <_dtoa_r+0x7f8>
 8005c6c:	9b00      	ldr	r3, [sp, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f77f aed6 	ble.w	8005a20 <_dtoa_r+0x900>
 8005c74:	4656      	mov	r6, sl
 8005c76:	4621      	mov	r1, r4
 8005c78:	4648      	mov	r0, r9
 8005c7a:	f7ff f9c9 	bl	8005010 <quorem>
 8005c7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005c82:	f806 8b01 	strb.w	r8, [r6], #1
 8005c86:	9b00      	ldr	r3, [sp, #0]
 8005c88:	eba6 020a 	sub.w	r2, r6, sl
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	ddb3      	ble.n	8005bf8 <_dtoa_r+0xad8>
 8005c90:	4649      	mov	r1, r9
 8005c92:	2300      	movs	r3, #0
 8005c94:	220a      	movs	r2, #10
 8005c96:	4658      	mov	r0, fp
 8005c98:	f000 f968 	bl	8005f6c <__multadd>
 8005c9c:	4681      	mov	r9, r0
 8005c9e:	e7ea      	b.n	8005c76 <_dtoa_r+0xb56>
 8005ca0:	0800d616 	.word	0x0800d616
 8005ca4:	0800d59a 	.word	0x0800d59a

08005ca8 <_free_r>:
 8005ca8:	b538      	push	{r3, r4, r5, lr}
 8005caa:	4605      	mov	r5, r0
 8005cac:	2900      	cmp	r1, #0
 8005cae:	d041      	beq.n	8005d34 <_free_r+0x8c>
 8005cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cb4:	1f0c      	subs	r4, r1, #4
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	bfb8      	it	lt
 8005cba:	18e4      	addlt	r4, r4, r3
 8005cbc:	f000 f8e8 	bl	8005e90 <__malloc_lock>
 8005cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8005d38 <_free_r+0x90>)
 8005cc2:	6813      	ldr	r3, [r2, #0]
 8005cc4:	b933      	cbnz	r3, 8005cd4 <_free_r+0x2c>
 8005cc6:	6063      	str	r3, [r4, #4]
 8005cc8:	6014      	str	r4, [r2, #0]
 8005cca:	4628      	mov	r0, r5
 8005ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cd0:	f000 b8e4 	b.w	8005e9c <__malloc_unlock>
 8005cd4:	42a3      	cmp	r3, r4
 8005cd6:	d908      	bls.n	8005cea <_free_r+0x42>
 8005cd8:	6820      	ldr	r0, [r4, #0]
 8005cda:	1821      	adds	r1, r4, r0
 8005cdc:	428b      	cmp	r3, r1
 8005cde:	bf01      	itttt	eq
 8005ce0:	6819      	ldreq	r1, [r3, #0]
 8005ce2:	685b      	ldreq	r3, [r3, #4]
 8005ce4:	1809      	addeq	r1, r1, r0
 8005ce6:	6021      	streq	r1, [r4, #0]
 8005ce8:	e7ed      	b.n	8005cc6 <_free_r+0x1e>
 8005cea:	461a      	mov	r2, r3
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	b10b      	cbz	r3, 8005cf4 <_free_r+0x4c>
 8005cf0:	42a3      	cmp	r3, r4
 8005cf2:	d9fa      	bls.n	8005cea <_free_r+0x42>
 8005cf4:	6811      	ldr	r1, [r2, #0]
 8005cf6:	1850      	adds	r0, r2, r1
 8005cf8:	42a0      	cmp	r0, r4
 8005cfa:	d10b      	bne.n	8005d14 <_free_r+0x6c>
 8005cfc:	6820      	ldr	r0, [r4, #0]
 8005cfe:	4401      	add	r1, r0
 8005d00:	1850      	adds	r0, r2, r1
 8005d02:	4283      	cmp	r3, r0
 8005d04:	6011      	str	r1, [r2, #0]
 8005d06:	d1e0      	bne.n	8005cca <_free_r+0x22>
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	6053      	str	r3, [r2, #4]
 8005d0e:	4408      	add	r0, r1
 8005d10:	6010      	str	r0, [r2, #0]
 8005d12:	e7da      	b.n	8005cca <_free_r+0x22>
 8005d14:	d902      	bls.n	8005d1c <_free_r+0x74>
 8005d16:	230c      	movs	r3, #12
 8005d18:	602b      	str	r3, [r5, #0]
 8005d1a:	e7d6      	b.n	8005cca <_free_r+0x22>
 8005d1c:	6820      	ldr	r0, [r4, #0]
 8005d1e:	1821      	adds	r1, r4, r0
 8005d20:	428b      	cmp	r3, r1
 8005d22:	bf04      	itt	eq
 8005d24:	6819      	ldreq	r1, [r3, #0]
 8005d26:	685b      	ldreq	r3, [r3, #4]
 8005d28:	6063      	str	r3, [r4, #4]
 8005d2a:	bf04      	itt	eq
 8005d2c:	1809      	addeq	r1, r1, r0
 8005d2e:	6021      	streq	r1, [r4, #0]
 8005d30:	6054      	str	r4, [r2, #4]
 8005d32:	e7ca      	b.n	8005cca <_free_r+0x22>
 8005d34:	bd38      	pop	{r3, r4, r5, pc}
 8005d36:	bf00      	nop
 8005d38:	2000060c 	.word	0x2000060c

08005d3c <malloc>:
 8005d3c:	4b02      	ldr	r3, [pc, #8]	@ (8005d48 <malloc+0xc>)
 8005d3e:	4601      	mov	r1, r0
 8005d40:	6818      	ldr	r0, [r3, #0]
 8005d42:	f000 b825 	b.w	8005d90 <_malloc_r>
 8005d46:	bf00      	nop
 8005d48:	20000034 	.word	0x20000034

08005d4c <sbrk_aligned>:
 8005d4c:	b570      	push	{r4, r5, r6, lr}
 8005d4e:	4e0f      	ldr	r6, [pc, #60]	@ (8005d8c <sbrk_aligned+0x40>)
 8005d50:	460c      	mov	r4, r1
 8005d52:	6831      	ldr	r1, [r6, #0]
 8005d54:	4605      	mov	r5, r0
 8005d56:	b911      	cbnz	r1, 8005d5e <sbrk_aligned+0x12>
 8005d58:	f001 fd90 	bl	800787c <_sbrk_r>
 8005d5c:	6030      	str	r0, [r6, #0]
 8005d5e:	4621      	mov	r1, r4
 8005d60:	4628      	mov	r0, r5
 8005d62:	f001 fd8b 	bl	800787c <_sbrk_r>
 8005d66:	1c43      	adds	r3, r0, #1
 8005d68:	d103      	bne.n	8005d72 <sbrk_aligned+0x26>
 8005d6a:	f04f 34ff 	mov.w	r4, #4294967295
 8005d6e:	4620      	mov	r0, r4
 8005d70:	bd70      	pop	{r4, r5, r6, pc}
 8005d72:	1cc4      	adds	r4, r0, #3
 8005d74:	f024 0403 	bic.w	r4, r4, #3
 8005d78:	42a0      	cmp	r0, r4
 8005d7a:	d0f8      	beq.n	8005d6e <sbrk_aligned+0x22>
 8005d7c:	1a21      	subs	r1, r4, r0
 8005d7e:	4628      	mov	r0, r5
 8005d80:	f001 fd7c 	bl	800787c <_sbrk_r>
 8005d84:	3001      	adds	r0, #1
 8005d86:	d1f2      	bne.n	8005d6e <sbrk_aligned+0x22>
 8005d88:	e7ef      	b.n	8005d6a <sbrk_aligned+0x1e>
 8005d8a:	bf00      	nop
 8005d8c:	20000608 	.word	0x20000608

08005d90 <_malloc_r>:
 8005d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d94:	1ccd      	adds	r5, r1, #3
 8005d96:	f025 0503 	bic.w	r5, r5, #3
 8005d9a:	3508      	adds	r5, #8
 8005d9c:	2d0c      	cmp	r5, #12
 8005d9e:	bf38      	it	cc
 8005da0:	250c      	movcc	r5, #12
 8005da2:	2d00      	cmp	r5, #0
 8005da4:	4606      	mov	r6, r0
 8005da6:	db01      	blt.n	8005dac <_malloc_r+0x1c>
 8005da8:	42a9      	cmp	r1, r5
 8005daa:	d904      	bls.n	8005db6 <_malloc_r+0x26>
 8005dac:	230c      	movs	r3, #12
 8005dae:	6033      	str	r3, [r6, #0]
 8005db0:	2000      	movs	r0, #0
 8005db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005db6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e8c <_malloc_r+0xfc>
 8005dba:	f000 f869 	bl	8005e90 <__malloc_lock>
 8005dbe:	f8d8 3000 	ldr.w	r3, [r8]
 8005dc2:	461c      	mov	r4, r3
 8005dc4:	bb44      	cbnz	r4, 8005e18 <_malloc_r+0x88>
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	4630      	mov	r0, r6
 8005dca:	f7ff ffbf 	bl	8005d4c <sbrk_aligned>
 8005dce:	1c43      	adds	r3, r0, #1
 8005dd0:	4604      	mov	r4, r0
 8005dd2:	d158      	bne.n	8005e86 <_malloc_r+0xf6>
 8005dd4:	f8d8 4000 	ldr.w	r4, [r8]
 8005dd8:	4627      	mov	r7, r4
 8005dda:	2f00      	cmp	r7, #0
 8005ddc:	d143      	bne.n	8005e66 <_malloc_r+0xd6>
 8005dde:	2c00      	cmp	r4, #0
 8005de0:	d04b      	beq.n	8005e7a <_malloc_r+0xea>
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	4639      	mov	r1, r7
 8005de6:	4630      	mov	r0, r6
 8005de8:	eb04 0903 	add.w	r9, r4, r3
 8005dec:	f001 fd46 	bl	800787c <_sbrk_r>
 8005df0:	4581      	cmp	r9, r0
 8005df2:	d142      	bne.n	8005e7a <_malloc_r+0xea>
 8005df4:	6821      	ldr	r1, [r4, #0]
 8005df6:	1a6d      	subs	r5, r5, r1
 8005df8:	4629      	mov	r1, r5
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	f7ff ffa6 	bl	8005d4c <sbrk_aligned>
 8005e00:	3001      	adds	r0, #1
 8005e02:	d03a      	beq.n	8005e7a <_malloc_r+0xea>
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	442b      	add	r3, r5
 8005e08:	6023      	str	r3, [r4, #0]
 8005e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	bb62      	cbnz	r2, 8005e6c <_malloc_r+0xdc>
 8005e12:	f8c8 7000 	str.w	r7, [r8]
 8005e16:	e00f      	b.n	8005e38 <_malloc_r+0xa8>
 8005e18:	6822      	ldr	r2, [r4, #0]
 8005e1a:	1b52      	subs	r2, r2, r5
 8005e1c:	d420      	bmi.n	8005e60 <_malloc_r+0xd0>
 8005e1e:	2a0b      	cmp	r2, #11
 8005e20:	d917      	bls.n	8005e52 <_malloc_r+0xc2>
 8005e22:	1961      	adds	r1, r4, r5
 8005e24:	42a3      	cmp	r3, r4
 8005e26:	6025      	str	r5, [r4, #0]
 8005e28:	bf18      	it	ne
 8005e2a:	6059      	strne	r1, [r3, #4]
 8005e2c:	6863      	ldr	r3, [r4, #4]
 8005e2e:	bf08      	it	eq
 8005e30:	f8c8 1000 	streq.w	r1, [r8]
 8005e34:	5162      	str	r2, [r4, r5]
 8005e36:	604b      	str	r3, [r1, #4]
 8005e38:	4630      	mov	r0, r6
 8005e3a:	f000 f82f 	bl	8005e9c <__malloc_unlock>
 8005e3e:	f104 000b 	add.w	r0, r4, #11
 8005e42:	1d23      	adds	r3, r4, #4
 8005e44:	f020 0007 	bic.w	r0, r0, #7
 8005e48:	1ac2      	subs	r2, r0, r3
 8005e4a:	bf1c      	itt	ne
 8005e4c:	1a1b      	subne	r3, r3, r0
 8005e4e:	50a3      	strne	r3, [r4, r2]
 8005e50:	e7af      	b.n	8005db2 <_malloc_r+0x22>
 8005e52:	6862      	ldr	r2, [r4, #4]
 8005e54:	42a3      	cmp	r3, r4
 8005e56:	bf0c      	ite	eq
 8005e58:	f8c8 2000 	streq.w	r2, [r8]
 8005e5c:	605a      	strne	r2, [r3, #4]
 8005e5e:	e7eb      	b.n	8005e38 <_malloc_r+0xa8>
 8005e60:	4623      	mov	r3, r4
 8005e62:	6864      	ldr	r4, [r4, #4]
 8005e64:	e7ae      	b.n	8005dc4 <_malloc_r+0x34>
 8005e66:	463c      	mov	r4, r7
 8005e68:	687f      	ldr	r7, [r7, #4]
 8005e6a:	e7b6      	b.n	8005dda <_malloc_r+0x4a>
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	42a3      	cmp	r3, r4
 8005e72:	d1fb      	bne.n	8005e6c <_malloc_r+0xdc>
 8005e74:	2300      	movs	r3, #0
 8005e76:	6053      	str	r3, [r2, #4]
 8005e78:	e7de      	b.n	8005e38 <_malloc_r+0xa8>
 8005e7a:	230c      	movs	r3, #12
 8005e7c:	6033      	str	r3, [r6, #0]
 8005e7e:	4630      	mov	r0, r6
 8005e80:	f000 f80c 	bl	8005e9c <__malloc_unlock>
 8005e84:	e794      	b.n	8005db0 <_malloc_r+0x20>
 8005e86:	6005      	str	r5, [r0, #0]
 8005e88:	e7d6      	b.n	8005e38 <_malloc_r+0xa8>
 8005e8a:	bf00      	nop
 8005e8c:	2000060c 	.word	0x2000060c

08005e90 <__malloc_lock>:
 8005e90:	4801      	ldr	r0, [pc, #4]	@ (8005e98 <__malloc_lock+0x8>)
 8005e92:	f7ff b8b4 	b.w	8004ffe <__retarget_lock_acquire_recursive>
 8005e96:	bf00      	nop
 8005e98:	20000604 	.word	0x20000604

08005e9c <__malloc_unlock>:
 8005e9c:	4801      	ldr	r0, [pc, #4]	@ (8005ea4 <__malloc_unlock+0x8>)
 8005e9e:	f7ff b8af 	b.w	8005000 <__retarget_lock_release_recursive>
 8005ea2:	bf00      	nop
 8005ea4:	20000604 	.word	0x20000604

08005ea8 <_Balloc>:
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	69c6      	ldr	r6, [r0, #28]
 8005eac:	4604      	mov	r4, r0
 8005eae:	460d      	mov	r5, r1
 8005eb0:	b976      	cbnz	r6, 8005ed0 <_Balloc+0x28>
 8005eb2:	2010      	movs	r0, #16
 8005eb4:	f7ff ff42 	bl	8005d3c <malloc>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	61e0      	str	r0, [r4, #28]
 8005ebc:	b920      	cbnz	r0, 8005ec8 <_Balloc+0x20>
 8005ebe:	4b18      	ldr	r3, [pc, #96]	@ (8005f20 <_Balloc+0x78>)
 8005ec0:	4818      	ldr	r0, [pc, #96]	@ (8005f24 <_Balloc+0x7c>)
 8005ec2:	216b      	movs	r1, #107	@ 0x6b
 8005ec4:	f001 fd00 	bl	80078c8 <__assert_func>
 8005ec8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ecc:	6006      	str	r6, [r0, #0]
 8005ece:	60c6      	str	r6, [r0, #12]
 8005ed0:	69e6      	ldr	r6, [r4, #28]
 8005ed2:	68f3      	ldr	r3, [r6, #12]
 8005ed4:	b183      	cbz	r3, 8005ef8 <_Balloc+0x50>
 8005ed6:	69e3      	ldr	r3, [r4, #28]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ede:	b9b8      	cbnz	r0, 8005f10 <_Balloc+0x68>
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	fa01 f605 	lsl.w	r6, r1, r5
 8005ee6:	1d72      	adds	r2, r6, #5
 8005ee8:	0092      	lsls	r2, r2, #2
 8005eea:	4620      	mov	r0, r4
 8005eec:	f001 fd0a 	bl	8007904 <_calloc_r>
 8005ef0:	b160      	cbz	r0, 8005f0c <_Balloc+0x64>
 8005ef2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ef6:	e00e      	b.n	8005f16 <_Balloc+0x6e>
 8005ef8:	2221      	movs	r2, #33	@ 0x21
 8005efa:	2104      	movs	r1, #4
 8005efc:	4620      	mov	r0, r4
 8005efe:	f001 fd01 	bl	8007904 <_calloc_r>
 8005f02:	69e3      	ldr	r3, [r4, #28]
 8005f04:	60f0      	str	r0, [r6, #12]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1e4      	bne.n	8005ed6 <_Balloc+0x2e>
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	bd70      	pop	{r4, r5, r6, pc}
 8005f10:	6802      	ldr	r2, [r0, #0]
 8005f12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f16:	2300      	movs	r3, #0
 8005f18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f1c:	e7f7      	b.n	8005f0e <_Balloc+0x66>
 8005f1e:	bf00      	nop
 8005f20:	0800d5a7 	.word	0x0800d5a7
 8005f24:	0800d627 	.word	0x0800d627

08005f28 <_Bfree>:
 8005f28:	b570      	push	{r4, r5, r6, lr}
 8005f2a:	69c6      	ldr	r6, [r0, #28]
 8005f2c:	4605      	mov	r5, r0
 8005f2e:	460c      	mov	r4, r1
 8005f30:	b976      	cbnz	r6, 8005f50 <_Bfree+0x28>
 8005f32:	2010      	movs	r0, #16
 8005f34:	f7ff ff02 	bl	8005d3c <malloc>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	61e8      	str	r0, [r5, #28]
 8005f3c:	b920      	cbnz	r0, 8005f48 <_Bfree+0x20>
 8005f3e:	4b09      	ldr	r3, [pc, #36]	@ (8005f64 <_Bfree+0x3c>)
 8005f40:	4809      	ldr	r0, [pc, #36]	@ (8005f68 <_Bfree+0x40>)
 8005f42:	218f      	movs	r1, #143	@ 0x8f
 8005f44:	f001 fcc0 	bl	80078c8 <__assert_func>
 8005f48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f4c:	6006      	str	r6, [r0, #0]
 8005f4e:	60c6      	str	r6, [r0, #12]
 8005f50:	b13c      	cbz	r4, 8005f62 <_Bfree+0x3a>
 8005f52:	69eb      	ldr	r3, [r5, #28]
 8005f54:	6862      	ldr	r2, [r4, #4]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f5c:	6021      	str	r1, [r4, #0]
 8005f5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f62:	bd70      	pop	{r4, r5, r6, pc}
 8005f64:	0800d5a7 	.word	0x0800d5a7
 8005f68:	0800d627 	.word	0x0800d627

08005f6c <__multadd>:
 8005f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f70:	690d      	ldr	r5, [r1, #16]
 8005f72:	4607      	mov	r7, r0
 8005f74:	460c      	mov	r4, r1
 8005f76:	461e      	mov	r6, r3
 8005f78:	f101 0c14 	add.w	ip, r1, #20
 8005f7c:	2000      	movs	r0, #0
 8005f7e:	f8dc 3000 	ldr.w	r3, [ip]
 8005f82:	b299      	uxth	r1, r3
 8005f84:	fb02 6101 	mla	r1, r2, r1, r6
 8005f88:	0c1e      	lsrs	r6, r3, #16
 8005f8a:	0c0b      	lsrs	r3, r1, #16
 8005f8c:	fb02 3306 	mla	r3, r2, r6, r3
 8005f90:	b289      	uxth	r1, r1
 8005f92:	3001      	adds	r0, #1
 8005f94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005f98:	4285      	cmp	r5, r0
 8005f9a:	f84c 1b04 	str.w	r1, [ip], #4
 8005f9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005fa2:	dcec      	bgt.n	8005f7e <__multadd+0x12>
 8005fa4:	b30e      	cbz	r6, 8005fea <__multadd+0x7e>
 8005fa6:	68a3      	ldr	r3, [r4, #8]
 8005fa8:	42ab      	cmp	r3, r5
 8005faa:	dc19      	bgt.n	8005fe0 <__multadd+0x74>
 8005fac:	6861      	ldr	r1, [r4, #4]
 8005fae:	4638      	mov	r0, r7
 8005fb0:	3101      	adds	r1, #1
 8005fb2:	f7ff ff79 	bl	8005ea8 <_Balloc>
 8005fb6:	4680      	mov	r8, r0
 8005fb8:	b928      	cbnz	r0, 8005fc6 <__multadd+0x5a>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff0 <__multadd+0x84>)
 8005fbe:	480d      	ldr	r0, [pc, #52]	@ (8005ff4 <__multadd+0x88>)
 8005fc0:	21ba      	movs	r1, #186	@ 0xba
 8005fc2:	f001 fc81 	bl	80078c8 <__assert_func>
 8005fc6:	6922      	ldr	r2, [r4, #16]
 8005fc8:	3202      	adds	r2, #2
 8005fca:	f104 010c 	add.w	r1, r4, #12
 8005fce:	0092      	lsls	r2, r2, #2
 8005fd0:	300c      	adds	r0, #12
 8005fd2:	f001 fc63 	bl	800789c <memcpy>
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	4638      	mov	r0, r7
 8005fda:	f7ff ffa5 	bl	8005f28 <_Bfree>
 8005fde:	4644      	mov	r4, r8
 8005fe0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005fe4:	3501      	adds	r5, #1
 8005fe6:	615e      	str	r6, [r3, #20]
 8005fe8:	6125      	str	r5, [r4, #16]
 8005fea:	4620      	mov	r0, r4
 8005fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ff0:	0800d616 	.word	0x0800d616
 8005ff4:	0800d627 	.word	0x0800d627

08005ff8 <__s2b>:
 8005ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ffc:	460c      	mov	r4, r1
 8005ffe:	4615      	mov	r5, r2
 8006000:	461f      	mov	r7, r3
 8006002:	2209      	movs	r2, #9
 8006004:	3308      	adds	r3, #8
 8006006:	4606      	mov	r6, r0
 8006008:	fb93 f3f2 	sdiv	r3, r3, r2
 800600c:	2100      	movs	r1, #0
 800600e:	2201      	movs	r2, #1
 8006010:	429a      	cmp	r2, r3
 8006012:	db09      	blt.n	8006028 <__s2b+0x30>
 8006014:	4630      	mov	r0, r6
 8006016:	f7ff ff47 	bl	8005ea8 <_Balloc>
 800601a:	b940      	cbnz	r0, 800602e <__s2b+0x36>
 800601c:	4602      	mov	r2, r0
 800601e:	4b19      	ldr	r3, [pc, #100]	@ (8006084 <__s2b+0x8c>)
 8006020:	4819      	ldr	r0, [pc, #100]	@ (8006088 <__s2b+0x90>)
 8006022:	21d3      	movs	r1, #211	@ 0xd3
 8006024:	f001 fc50 	bl	80078c8 <__assert_func>
 8006028:	0052      	lsls	r2, r2, #1
 800602a:	3101      	adds	r1, #1
 800602c:	e7f0      	b.n	8006010 <__s2b+0x18>
 800602e:	9b08      	ldr	r3, [sp, #32]
 8006030:	6143      	str	r3, [r0, #20]
 8006032:	2d09      	cmp	r5, #9
 8006034:	f04f 0301 	mov.w	r3, #1
 8006038:	6103      	str	r3, [r0, #16]
 800603a:	dd16      	ble.n	800606a <__s2b+0x72>
 800603c:	f104 0909 	add.w	r9, r4, #9
 8006040:	46c8      	mov	r8, r9
 8006042:	442c      	add	r4, r5
 8006044:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006048:	4601      	mov	r1, r0
 800604a:	3b30      	subs	r3, #48	@ 0x30
 800604c:	220a      	movs	r2, #10
 800604e:	4630      	mov	r0, r6
 8006050:	f7ff ff8c 	bl	8005f6c <__multadd>
 8006054:	45a0      	cmp	r8, r4
 8006056:	d1f5      	bne.n	8006044 <__s2b+0x4c>
 8006058:	f1a5 0408 	sub.w	r4, r5, #8
 800605c:	444c      	add	r4, r9
 800605e:	1b2d      	subs	r5, r5, r4
 8006060:	1963      	adds	r3, r4, r5
 8006062:	42bb      	cmp	r3, r7
 8006064:	db04      	blt.n	8006070 <__s2b+0x78>
 8006066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800606a:	340a      	adds	r4, #10
 800606c:	2509      	movs	r5, #9
 800606e:	e7f6      	b.n	800605e <__s2b+0x66>
 8006070:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006074:	4601      	mov	r1, r0
 8006076:	3b30      	subs	r3, #48	@ 0x30
 8006078:	220a      	movs	r2, #10
 800607a:	4630      	mov	r0, r6
 800607c:	f7ff ff76 	bl	8005f6c <__multadd>
 8006080:	e7ee      	b.n	8006060 <__s2b+0x68>
 8006082:	bf00      	nop
 8006084:	0800d616 	.word	0x0800d616
 8006088:	0800d627 	.word	0x0800d627

0800608c <__hi0bits>:
 800608c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006090:	4603      	mov	r3, r0
 8006092:	bf36      	itet	cc
 8006094:	0403      	lslcc	r3, r0, #16
 8006096:	2000      	movcs	r0, #0
 8006098:	2010      	movcc	r0, #16
 800609a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800609e:	bf3c      	itt	cc
 80060a0:	021b      	lslcc	r3, r3, #8
 80060a2:	3008      	addcc	r0, #8
 80060a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060a8:	bf3c      	itt	cc
 80060aa:	011b      	lslcc	r3, r3, #4
 80060ac:	3004      	addcc	r0, #4
 80060ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060b2:	bf3c      	itt	cc
 80060b4:	009b      	lslcc	r3, r3, #2
 80060b6:	3002      	addcc	r0, #2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	db05      	blt.n	80060c8 <__hi0bits+0x3c>
 80060bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80060c0:	f100 0001 	add.w	r0, r0, #1
 80060c4:	bf08      	it	eq
 80060c6:	2020      	moveq	r0, #32
 80060c8:	4770      	bx	lr

080060ca <__lo0bits>:
 80060ca:	6803      	ldr	r3, [r0, #0]
 80060cc:	4602      	mov	r2, r0
 80060ce:	f013 0007 	ands.w	r0, r3, #7
 80060d2:	d00b      	beq.n	80060ec <__lo0bits+0x22>
 80060d4:	07d9      	lsls	r1, r3, #31
 80060d6:	d421      	bmi.n	800611c <__lo0bits+0x52>
 80060d8:	0798      	lsls	r0, r3, #30
 80060da:	bf49      	itett	mi
 80060dc:	085b      	lsrmi	r3, r3, #1
 80060de:	089b      	lsrpl	r3, r3, #2
 80060e0:	2001      	movmi	r0, #1
 80060e2:	6013      	strmi	r3, [r2, #0]
 80060e4:	bf5c      	itt	pl
 80060e6:	6013      	strpl	r3, [r2, #0]
 80060e8:	2002      	movpl	r0, #2
 80060ea:	4770      	bx	lr
 80060ec:	b299      	uxth	r1, r3
 80060ee:	b909      	cbnz	r1, 80060f4 <__lo0bits+0x2a>
 80060f0:	0c1b      	lsrs	r3, r3, #16
 80060f2:	2010      	movs	r0, #16
 80060f4:	b2d9      	uxtb	r1, r3
 80060f6:	b909      	cbnz	r1, 80060fc <__lo0bits+0x32>
 80060f8:	3008      	adds	r0, #8
 80060fa:	0a1b      	lsrs	r3, r3, #8
 80060fc:	0719      	lsls	r1, r3, #28
 80060fe:	bf04      	itt	eq
 8006100:	091b      	lsreq	r3, r3, #4
 8006102:	3004      	addeq	r0, #4
 8006104:	0799      	lsls	r1, r3, #30
 8006106:	bf04      	itt	eq
 8006108:	089b      	lsreq	r3, r3, #2
 800610a:	3002      	addeq	r0, #2
 800610c:	07d9      	lsls	r1, r3, #31
 800610e:	d403      	bmi.n	8006118 <__lo0bits+0x4e>
 8006110:	085b      	lsrs	r3, r3, #1
 8006112:	f100 0001 	add.w	r0, r0, #1
 8006116:	d003      	beq.n	8006120 <__lo0bits+0x56>
 8006118:	6013      	str	r3, [r2, #0]
 800611a:	4770      	bx	lr
 800611c:	2000      	movs	r0, #0
 800611e:	4770      	bx	lr
 8006120:	2020      	movs	r0, #32
 8006122:	4770      	bx	lr

08006124 <__i2b>:
 8006124:	b510      	push	{r4, lr}
 8006126:	460c      	mov	r4, r1
 8006128:	2101      	movs	r1, #1
 800612a:	f7ff febd 	bl	8005ea8 <_Balloc>
 800612e:	4602      	mov	r2, r0
 8006130:	b928      	cbnz	r0, 800613e <__i2b+0x1a>
 8006132:	4b05      	ldr	r3, [pc, #20]	@ (8006148 <__i2b+0x24>)
 8006134:	4805      	ldr	r0, [pc, #20]	@ (800614c <__i2b+0x28>)
 8006136:	f240 1145 	movw	r1, #325	@ 0x145
 800613a:	f001 fbc5 	bl	80078c8 <__assert_func>
 800613e:	2301      	movs	r3, #1
 8006140:	6144      	str	r4, [r0, #20]
 8006142:	6103      	str	r3, [r0, #16]
 8006144:	bd10      	pop	{r4, pc}
 8006146:	bf00      	nop
 8006148:	0800d616 	.word	0x0800d616
 800614c:	0800d627 	.word	0x0800d627

08006150 <__multiply>:
 8006150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006154:	4614      	mov	r4, r2
 8006156:	690a      	ldr	r2, [r1, #16]
 8006158:	6923      	ldr	r3, [r4, #16]
 800615a:	429a      	cmp	r2, r3
 800615c:	bfa8      	it	ge
 800615e:	4623      	movge	r3, r4
 8006160:	460f      	mov	r7, r1
 8006162:	bfa4      	itt	ge
 8006164:	460c      	movge	r4, r1
 8006166:	461f      	movge	r7, r3
 8006168:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800616c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006170:	68a3      	ldr	r3, [r4, #8]
 8006172:	6861      	ldr	r1, [r4, #4]
 8006174:	eb0a 0609 	add.w	r6, sl, r9
 8006178:	42b3      	cmp	r3, r6
 800617a:	b085      	sub	sp, #20
 800617c:	bfb8      	it	lt
 800617e:	3101      	addlt	r1, #1
 8006180:	f7ff fe92 	bl	8005ea8 <_Balloc>
 8006184:	b930      	cbnz	r0, 8006194 <__multiply+0x44>
 8006186:	4602      	mov	r2, r0
 8006188:	4b44      	ldr	r3, [pc, #272]	@ (800629c <__multiply+0x14c>)
 800618a:	4845      	ldr	r0, [pc, #276]	@ (80062a0 <__multiply+0x150>)
 800618c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006190:	f001 fb9a 	bl	80078c8 <__assert_func>
 8006194:	f100 0514 	add.w	r5, r0, #20
 8006198:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800619c:	462b      	mov	r3, r5
 800619e:	2200      	movs	r2, #0
 80061a0:	4543      	cmp	r3, r8
 80061a2:	d321      	bcc.n	80061e8 <__multiply+0x98>
 80061a4:	f107 0114 	add.w	r1, r7, #20
 80061a8:	f104 0214 	add.w	r2, r4, #20
 80061ac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80061b0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80061b4:	9302      	str	r3, [sp, #8]
 80061b6:	1b13      	subs	r3, r2, r4
 80061b8:	3b15      	subs	r3, #21
 80061ba:	f023 0303 	bic.w	r3, r3, #3
 80061be:	3304      	adds	r3, #4
 80061c0:	f104 0715 	add.w	r7, r4, #21
 80061c4:	42ba      	cmp	r2, r7
 80061c6:	bf38      	it	cc
 80061c8:	2304      	movcc	r3, #4
 80061ca:	9301      	str	r3, [sp, #4]
 80061cc:	9b02      	ldr	r3, [sp, #8]
 80061ce:	9103      	str	r1, [sp, #12]
 80061d0:	428b      	cmp	r3, r1
 80061d2:	d80c      	bhi.n	80061ee <__multiply+0x9e>
 80061d4:	2e00      	cmp	r6, #0
 80061d6:	dd03      	ble.n	80061e0 <__multiply+0x90>
 80061d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d05b      	beq.n	8006298 <__multiply+0x148>
 80061e0:	6106      	str	r6, [r0, #16]
 80061e2:	b005      	add	sp, #20
 80061e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061e8:	f843 2b04 	str.w	r2, [r3], #4
 80061ec:	e7d8      	b.n	80061a0 <__multiply+0x50>
 80061ee:	f8b1 a000 	ldrh.w	sl, [r1]
 80061f2:	f1ba 0f00 	cmp.w	sl, #0
 80061f6:	d024      	beq.n	8006242 <__multiply+0xf2>
 80061f8:	f104 0e14 	add.w	lr, r4, #20
 80061fc:	46a9      	mov	r9, r5
 80061fe:	f04f 0c00 	mov.w	ip, #0
 8006202:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006206:	f8d9 3000 	ldr.w	r3, [r9]
 800620a:	fa1f fb87 	uxth.w	fp, r7
 800620e:	b29b      	uxth	r3, r3
 8006210:	fb0a 330b 	mla	r3, sl, fp, r3
 8006214:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006218:	f8d9 7000 	ldr.w	r7, [r9]
 800621c:	4463      	add	r3, ip
 800621e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006222:	fb0a c70b 	mla	r7, sl, fp, ip
 8006226:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800622a:	b29b      	uxth	r3, r3
 800622c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006230:	4572      	cmp	r2, lr
 8006232:	f849 3b04 	str.w	r3, [r9], #4
 8006236:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800623a:	d8e2      	bhi.n	8006202 <__multiply+0xb2>
 800623c:	9b01      	ldr	r3, [sp, #4]
 800623e:	f845 c003 	str.w	ip, [r5, r3]
 8006242:	9b03      	ldr	r3, [sp, #12]
 8006244:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006248:	3104      	adds	r1, #4
 800624a:	f1b9 0f00 	cmp.w	r9, #0
 800624e:	d021      	beq.n	8006294 <__multiply+0x144>
 8006250:	682b      	ldr	r3, [r5, #0]
 8006252:	f104 0c14 	add.w	ip, r4, #20
 8006256:	46ae      	mov	lr, r5
 8006258:	f04f 0a00 	mov.w	sl, #0
 800625c:	f8bc b000 	ldrh.w	fp, [ip]
 8006260:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006264:	fb09 770b 	mla	r7, r9, fp, r7
 8006268:	4457      	add	r7, sl
 800626a:	b29b      	uxth	r3, r3
 800626c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006270:	f84e 3b04 	str.w	r3, [lr], #4
 8006274:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006278:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800627c:	f8be 3000 	ldrh.w	r3, [lr]
 8006280:	fb09 330a 	mla	r3, r9, sl, r3
 8006284:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006288:	4562      	cmp	r2, ip
 800628a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800628e:	d8e5      	bhi.n	800625c <__multiply+0x10c>
 8006290:	9f01      	ldr	r7, [sp, #4]
 8006292:	51eb      	str	r3, [r5, r7]
 8006294:	3504      	adds	r5, #4
 8006296:	e799      	b.n	80061cc <__multiply+0x7c>
 8006298:	3e01      	subs	r6, #1
 800629a:	e79b      	b.n	80061d4 <__multiply+0x84>
 800629c:	0800d616 	.word	0x0800d616
 80062a0:	0800d627 	.word	0x0800d627

080062a4 <__pow5mult>:
 80062a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062a8:	4615      	mov	r5, r2
 80062aa:	f012 0203 	ands.w	r2, r2, #3
 80062ae:	4607      	mov	r7, r0
 80062b0:	460e      	mov	r6, r1
 80062b2:	d007      	beq.n	80062c4 <__pow5mult+0x20>
 80062b4:	4c25      	ldr	r4, [pc, #148]	@ (800634c <__pow5mult+0xa8>)
 80062b6:	3a01      	subs	r2, #1
 80062b8:	2300      	movs	r3, #0
 80062ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062be:	f7ff fe55 	bl	8005f6c <__multadd>
 80062c2:	4606      	mov	r6, r0
 80062c4:	10ad      	asrs	r5, r5, #2
 80062c6:	d03d      	beq.n	8006344 <__pow5mult+0xa0>
 80062c8:	69fc      	ldr	r4, [r7, #28]
 80062ca:	b97c      	cbnz	r4, 80062ec <__pow5mult+0x48>
 80062cc:	2010      	movs	r0, #16
 80062ce:	f7ff fd35 	bl	8005d3c <malloc>
 80062d2:	4602      	mov	r2, r0
 80062d4:	61f8      	str	r0, [r7, #28]
 80062d6:	b928      	cbnz	r0, 80062e4 <__pow5mult+0x40>
 80062d8:	4b1d      	ldr	r3, [pc, #116]	@ (8006350 <__pow5mult+0xac>)
 80062da:	481e      	ldr	r0, [pc, #120]	@ (8006354 <__pow5mult+0xb0>)
 80062dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80062e0:	f001 faf2 	bl	80078c8 <__assert_func>
 80062e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062e8:	6004      	str	r4, [r0, #0]
 80062ea:	60c4      	str	r4, [r0, #12]
 80062ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80062f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062f4:	b94c      	cbnz	r4, 800630a <__pow5mult+0x66>
 80062f6:	f240 2171 	movw	r1, #625	@ 0x271
 80062fa:	4638      	mov	r0, r7
 80062fc:	f7ff ff12 	bl	8006124 <__i2b>
 8006300:	2300      	movs	r3, #0
 8006302:	f8c8 0008 	str.w	r0, [r8, #8]
 8006306:	4604      	mov	r4, r0
 8006308:	6003      	str	r3, [r0, #0]
 800630a:	f04f 0900 	mov.w	r9, #0
 800630e:	07eb      	lsls	r3, r5, #31
 8006310:	d50a      	bpl.n	8006328 <__pow5mult+0x84>
 8006312:	4631      	mov	r1, r6
 8006314:	4622      	mov	r2, r4
 8006316:	4638      	mov	r0, r7
 8006318:	f7ff ff1a 	bl	8006150 <__multiply>
 800631c:	4631      	mov	r1, r6
 800631e:	4680      	mov	r8, r0
 8006320:	4638      	mov	r0, r7
 8006322:	f7ff fe01 	bl	8005f28 <_Bfree>
 8006326:	4646      	mov	r6, r8
 8006328:	106d      	asrs	r5, r5, #1
 800632a:	d00b      	beq.n	8006344 <__pow5mult+0xa0>
 800632c:	6820      	ldr	r0, [r4, #0]
 800632e:	b938      	cbnz	r0, 8006340 <__pow5mult+0x9c>
 8006330:	4622      	mov	r2, r4
 8006332:	4621      	mov	r1, r4
 8006334:	4638      	mov	r0, r7
 8006336:	f7ff ff0b 	bl	8006150 <__multiply>
 800633a:	6020      	str	r0, [r4, #0]
 800633c:	f8c0 9000 	str.w	r9, [r0]
 8006340:	4604      	mov	r4, r0
 8006342:	e7e4      	b.n	800630e <__pow5mult+0x6a>
 8006344:	4630      	mov	r0, r6
 8006346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800634a:	bf00      	nop
 800634c:	0800d680 	.word	0x0800d680
 8006350:	0800d5a7 	.word	0x0800d5a7
 8006354:	0800d627 	.word	0x0800d627

08006358 <__lshift>:
 8006358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800635c:	460c      	mov	r4, r1
 800635e:	6849      	ldr	r1, [r1, #4]
 8006360:	6923      	ldr	r3, [r4, #16]
 8006362:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006366:	68a3      	ldr	r3, [r4, #8]
 8006368:	4607      	mov	r7, r0
 800636a:	4691      	mov	r9, r2
 800636c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006370:	f108 0601 	add.w	r6, r8, #1
 8006374:	42b3      	cmp	r3, r6
 8006376:	db0b      	blt.n	8006390 <__lshift+0x38>
 8006378:	4638      	mov	r0, r7
 800637a:	f7ff fd95 	bl	8005ea8 <_Balloc>
 800637e:	4605      	mov	r5, r0
 8006380:	b948      	cbnz	r0, 8006396 <__lshift+0x3e>
 8006382:	4602      	mov	r2, r0
 8006384:	4b28      	ldr	r3, [pc, #160]	@ (8006428 <__lshift+0xd0>)
 8006386:	4829      	ldr	r0, [pc, #164]	@ (800642c <__lshift+0xd4>)
 8006388:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800638c:	f001 fa9c 	bl	80078c8 <__assert_func>
 8006390:	3101      	adds	r1, #1
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	e7ee      	b.n	8006374 <__lshift+0x1c>
 8006396:	2300      	movs	r3, #0
 8006398:	f100 0114 	add.w	r1, r0, #20
 800639c:	f100 0210 	add.w	r2, r0, #16
 80063a0:	4618      	mov	r0, r3
 80063a2:	4553      	cmp	r3, sl
 80063a4:	db33      	blt.n	800640e <__lshift+0xb6>
 80063a6:	6920      	ldr	r0, [r4, #16]
 80063a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80063ac:	f104 0314 	add.w	r3, r4, #20
 80063b0:	f019 091f 	ands.w	r9, r9, #31
 80063b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80063b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80063bc:	d02b      	beq.n	8006416 <__lshift+0xbe>
 80063be:	f1c9 0e20 	rsb	lr, r9, #32
 80063c2:	468a      	mov	sl, r1
 80063c4:	2200      	movs	r2, #0
 80063c6:	6818      	ldr	r0, [r3, #0]
 80063c8:	fa00 f009 	lsl.w	r0, r0, r9
 80063cc:	4310      	orrs	r0, r2
 80063ce:	f84a 0b04 	str.w	r0, [sl], #4
 80063d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80063d6:	459c      	cmp	ip, r3
 80063d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80063dc:	d8f3      	bhi.n	80063c6 <__lshift+0x6e>
 80063de:	ebac 0304 	sub.w	r3, ip, r4
 80063e2:	3b15      	subs	r3, #21
 80063e4:	f023 0303 	bic.w	r3, r3, #3
 80063e8:	3304      	adds	r3, #4
 80063ea:	f104 0015 	add.w	r0, r4, #21
 80063ee:	4584      	cmp	ip, r0
 80063f0:	bf38      	it	cc
 80063f2:	2304      	movcc	r3, #4
 80063f4:	50ca      	str	r2, [r1, r3]
 80063f6:	b10a      	cbz	r2, 80063fc <__lshift+0xa4>
 80063f8:	f108 0602 	add.w	r6, r8, #2
 80063fc:	3e01      	subs	r6, #1
 80063fe:	4638      	mov	r0, r7
 8006400:	612e      	str	r6, [r5, #16]
 8006402:	4621      	mov	r1, r4
 8006404:	f7ff fd90 	bl	8005f28 <_Bfree>
 8006408:	4628      	mov	r0, r5
 800640a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800640e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006412:	3301      	adds	r3, #1
 8006414:	e7c5      	b.n	80063a2 <__lshift+0x4a>
 8006416:	3904      	subs	r1, #4
 8006418:	f853 2b04 	ldr.w	r2, [r3], #4
 800641c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006420:	459c      	cmp	ip, r3
 8006422:	d8f9      	bhi.n	8006418 <__lshift+0xc0>
 8006424:	e7ea      	b.n	80063fc <__lshift+0xa4>
 8006426:	bf00      	nop
 8006428:	0800d616 	.word	0x0800d616
 800642c:	0800d627 	.word	0x0800d627

08006430 <__mcmp>:
 8006430:	690a      	ldr	r2, [r1, #16]
 8006432:	4603      	mov	r3, r0
 8006434:	6900      	ldr	r0, [r0, #16]
 8006436:	1a80      	subs	r0, r0, r2
 8006438:	b530      	push	{r4, r5, lr}
 800643a:	d10e      	bne.n	800645a <__mcmp+0x2a>
 800643c:	3314      	adds	r3, #20
 800643e:	3114      	adds	r1, #20
 8006440:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006444:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006448:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800644c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006450:	4295      	cmp	r5, r2
 8006452:	d003      	beq.n	800645c <__mcmp+0x2c>
 8006454:	d205      	bcs.n	8006462 <__mcmp+0x32>
 8006456:	f04f 30ff 	mov.w	r0, #4294967295
 800645a:	bd30      	pop	{r4, r5, pc}
 800645c:	42a3      	cmp	r3, r4
 800645e:	d3f3      	bcc.n	8006448 <__mcmp+0x18>
 8006460:	e7fb      	b.n	800645a <__mcmp+0x2a>
 8006462:	2001      	movs	r0, #1
 8006464:	e7f9      	b.n	800645a <__mcmp+0x2a>
	...

08006468 <__mdiff>:
 8006468:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646c:	4689      	mov	r9, r1
 800646e:	4606      	mov	r6, r0
 8006470:	4611      	mov	r1, r2
 8006472:	4648      	mov	r0, r9
 8006474:	4614      	mov	r4, r2
 8006476:	f7ff ffdb 	bl	8006430 <__mcmp>
 800647a:	1e05      	subs	r5, r0, #0
 800647c:	d112      	bne.n	80064a4 <__mdiff+0x3c>
 800647e:	4629      	mov	r1, r5
 8006480:	4630      	mov	r0, r6
 8006482:	f7ff fd11 	bl	8005ea8 <_Balloc>
 8006486:	4602      	mov	r2, r0
 8006488:	b928      	cbnz	r0, 8006496 <__mdiff+0x2e>
 800648a:	4b3f      	ldr	r3, [pc, #252]	@ (8006588 <__mdiff+0x120>)
 800648c:	f240 2137 	movw	r1, #567	@ 0x237
 8006490:	483e      	ldr	r0, [pc, #248]	@ (800658c <__mdiff+0x124>)
 8006492:	f001 fa19 	bl	80078c8 <__assert_func>
 8006496:	2301      	movs	r3, #1
 8006498:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800649c:	4610      	mov	r0, r2
 800649e:	b003      	add	sp, #12
 80064a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a4:	bfbc      	itt	lt
 80064a6:	464b      	movlt	r3, r9
 80064a8:	46a1      	movlt	r9, r4
 80064aa:	4630      	mov	r0, r6
 80064ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80064b0:	bfba      	itte	lt
 80064b2:	461c      	movlt	r4, r3
 80064b4:	2501      	movlt	r5, #1
 80064b6:	2500      	movge	r5, #0
 80064b8:	f7ff fcf6 	bl	8005ea8 <_Balloc>
 80064bc:	4602      	mov	r2, r0
 80064be:	b918      	cbnz	r0, 80064c8 <__mdiff+0x60>
 80064c0:	4b31      	ldr	r3, [pc, #196]	@ (8006588 <__mdiff+0x120>)
 80064c2:	f240 2145 	movw	r1, #581	@ 0x245
 80064c6:	e7e3      	b.n	8006490 <__mdiff+0x28>
 80064c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80064cc:	6926      	ldr	r6, [r4, #16]
 80064ce:	60c5      	str	r5, [r0, #12]
 80064d0:	f109 0310 	add.w	r3, r9, #16
 80064d4:	f109 0514 	add.w	r5, r9, #20
 80064d8:	f104 0e14 	add.w	lr, r4, #20
 80064dc:	f100 0b14 	add.w	fp, r0, #20
 80064e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80064e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80064e8:	9301      	str	r3, [sp, #4]
 80064ea:	46d9      	mov	r9, fp
 80064ec:	f04f 0c00 	mov.w	ip, #0
 80064f0:	9b01      	ldr	r3, [sp, #4]
 80064f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80064f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80064fa:	9301      	str	r3, [sp, #4]
 80064fc:	fa1f f38a 	uxth.w	r3, sl
 8006500:	4619      	mov	r1, r3
 8006502:	b283      	uxth	r3, r0
 8006504:	1acb      	subs	r3, r1, r3
 8006506:	0c00      	lsrs	r0, r0, #16
 8006508:	4463      	add	r3, ip
 800650a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800650e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006512:	b29b      	uxth	r3, r3
 8006514:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006518:	4576      	cmp	r6, lr
 800651a:	f849 3b04 	str.w	r3, [r9], #4
 800651e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006522:	d8e5      	bhi.n	80064f0 <__mdiff+0x88>
 8006524:	1b33      	subs	r3, r6, r4
 8006526:	3b15      	subs	r3, #21
 8006528:	f023 0303 	bic.w	r3, r3, #3
 800652c:	3415      	adds	r4, #21
 800652e:	3304      	adds	r3, #4
 8006530:	42a6      	cmp	r6, r4
 8006532:	bf38      	it	cc
 8006534:	2304      	movcc	r3, #4
 8006536:	441d      	add	r5, r3
 8006538:	445b      	add	r3, fp
 800653a:	461e      	mov	r6, r3
 800653c:	462c      	mov	r4, r5
 800653e:	4544      	cmp	r4, r8
 8006540:	d30e      	bcc.n	8006560 <__mdiff+0xf8>
 8006542:	f108 0103 	add.w	r1, r8, #3
 8006546:	1b49      	subs	r1, r1, r5
 8006548:	f021 0103 	bic.w	r1, r1, #3
 800654c:	3d03      	subs	r5, #3
 800654e:	45a8      	cmp	r8, r5
 8006550:	bf38      	it	cc
 8006552:	2100      	movcc	r1, #0
 8006554:	440b      	add	r3, r1
 8006556:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800655a:	b191      	cbz	r1, 8006582 <__mdiff+0x11a>
 800655c:	6117      	str	r7, [r2, #16]
 800655e:	e79d      	b.n	800649c <__mdiff+0x34>
 8006560:	f854 1b04 	ldr.w	r1, [r4], #4
 8006564:	46e6      	mov	lr, ip
 8006566:	0c08      	lsrs	r0, r1, #16
 8006568:	fa1c fc81 	uxtah	ip, ip, r1
 800656c:	4471      	add	r1, lr
 800656e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006572:	b289      	uxth	r1, r1
 8006574:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006578:	f846 1b04 	str.w	r1, [r6], #4
 800657c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006580:	e7dd      	b.n	800653e <__mdiff+0xd6>
 8006582:	3f01      	subs	r7, #1
 8006584:	e7e7      	b.n	8006556 <__mdiff+0xee>
 8006586:	bf00      	nop
 8006588:	0800d616 	.word	0x0800d616
 800658c:	0800d627 	.word	0x0800d627

08006590 <__ulp>:
 8006590:	b082      	sub	sp, #8
 8006592:	ed8d 0b00 	vstr	d0, [sp]
 8006596:	9a01      	ldr	r2, [sp, #4]
 8006598:	4b0f      	ldr	r3, [pc, #60]	@ (80065d8 <__ulp+0x48>)
 800659a:	4013      	ands	r3, r2
 800659c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	dc08      	bgt.n	80065b6 <__ulp+0x26>
 80065a4:	425b      	negs	r3, r3
 80065a6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80065aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80065ae:	da04      	bge.n	80065ba <__ulp+0x2a>
 80065b0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80065b4:	4113      	asrs	r3, r2
 80065b6:	2200      	movs	r2, #0
 80065b8:	e008      	b.n	80065cc <__ulp+0x3c>
 80065ba:	f1a2 0314 	sub.w	r3, r2, #20
 80065be:	2b1e      	cmp	r3, #30
 80065c0:	bfda      	itte	le
 80065c2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80065c6:	40da      	lsrle	r2, r3
 80065c8:	2201      	movgt	r2, #1
 80065ca:	2300      	movs	r3, #0
 80065cc:	4619      	mov	r1, r3
 80065ce:	4610      	mov	r0, r2
 80065d0:	ec41 0b10 	vmov	d0, r0, r1
 80065d4:	b002      	add	sp, #8
 80065d6:	4770      	bx	lr
 80065d8:	7ff00000 	.word	0x7ff00000

080065dc <__b2d>:
 80065dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e0:	6906      	ldr	r6, [r0, #16]
 80065e2:	f100 0814 	add.w	r8, r0, #20
 80065e6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80065ea:	1f37      	subs	r7, r6, #4
 80065ec:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80065f0:	4610      	mov	r0, r2
 80065f2:	f7ff fd4b 	bl	800608c <__hi0bits>
 80065f6:	f1c0 0320 	rsb	r3, r0, #32
 80065fa:	280a      	cmp	r0, #10
 80065fc:	600b      	str	r3, [r1, #0]
 80065fe:	491b      	ldr	r1, [pc, #108]	@ (800666c <__b2d+0x90>)
 8006600:	dc15      	bgt.n	800662e <__b2d+0x52>
 8006602:	f1c0 0c0b 	rsb	ip, r0, #11
 8006606:	fa22 f30c 	lsr.w	r3, r2, ip
 800660a:	45b8      	cmp	r8, r7
 800660c:	ea43 0501 	orr.w	r5, r3, r1
 8006610:	bf34      	ite	cc
 8006612:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006616:	2300      	movcs	r3, #0
 8006618:	3015      	adds	r0, #21
 800661a:	fa02 f000 	lsl.w	r0, r2, r0
 800661e:	fa23 f30c 	lsr.w	r3, r3, ip
 8006622:	4303      	orrs	r3, r0
 8006624:	461c      	mov	r4, r3
 8006626:	ec45 4b10 	vmov	d0, r4, r5
 800662a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800662e:	45b8      	cmp	r8, r7
 8006630:	bf3a      	itte	cc
 8006632:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006636:	f1a6 0708 	subcc.w	r7, r6, #8
 800663a:	2300      	movcs	r3, #0
 800663c:	380b      	subs	r0, #11
 800663e:	d012      	beq.n	8006666 <__b2d+0x8a>
 8006640:	f1c0 0120 	rsb	r1, r0, #32
 8006644:	fa23 f401 	lsr.w	r4, r3, r1
 8006648:	4082      	lsls	r2, r0
 800664a:	4322      	orrs	r2, r4
 800664c:	4547      	cmp	r7, r8
 800664e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006652:	bf8c      	ite	hi
 8006654:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006658:	2200      	movls	r2, #0
 800665a:	4083      	lsls	r3, r0
 800665c:	40ca      	lsrs	r2, r1
 800665e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006662:	4313      	orrs	r3, r2
 8006664:	e7de      	b.n	8006624 <__b2d+0x48>
 8006666:	ea42 0501 	orr.w	r5, r2, r1
 800666a:	e7db      	b.n	8006624 <__b2d+0x48>
 800666c:	3ff00000 	.word	0x3ff00000

08006670 <__d2b>:
 8006670:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006674:	460f      	mov	r7, r1
 8006676:	2101      	movs	r1, #1
 8006678:	ec59 8b10 	vmov	r8, r9, d0
 800667c:	4616      	mov	r6, r2
 800667e:	f7ff fc13 	bl	8005ea8 <_Balloc>
 8006682:	4604      	mov	r4, r0
 8006684:	b930      	cbnz	r0, 8006694 <__d2b+0x24>
 8006686:	4602      	mov	r2, r0
 8006688:	4b23      	ldr	r3, [pc, #140]	@ (8006718 <__d2b+0xa8>)
 800668a:	4824      	ldr	r0, [pc, #144]	@ (800671c <__d2b+0xac>)
 800668c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006690:	f001 f91a 	bl	80078c8 <__assert_func>
 8006694:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006698:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800669c:	b10d      	cbz	r5, 80066a2 <__d2b+0x32>
 800669e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066a2:	9301      	str	r3, [sp, #4]
 80066a4:	f1b8 0300 	subs.w	r3, r8, #0
 80066a8:	d023      	beq.n	80066f2 <__d2b+0x82>
 80066aa:	4668      	mov	r0, sp
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	f7ff fd0c 	bl	80060ca <__lo0bits>
 80066b2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80066b6:	b1d0      	cbz	r0, 80066ee <__d2b+0x7e>
 80066b8:	f1c0 0320 	rsb	r3, r0, #32
 80066bc:	fa02 f303 	lsl.w	r3, r2, r3
 80066c0:	430b      	orrs	r3, r1
 80066c2:	40c2      	lsrs	r2, r0
 80066c4:	6163      	str	r3, [r4, #20]
 80066c6:	9201      	str	r2, [sp, #4]
 80066c8:	9b01      	ldr	r3, [sp, #4]
 80066ca:	61a3      	str	r3, [r4, #24]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	bf0c      	ite	eq
 80066d0:	2201      	moveq	r2, #1
 80066d2:	2202      	movne	r2, #2
 80066d4:	6122      	str	r2, [r4, #16]
 80066d6:	b1a5      	cbz	r5, 8006702 <__d2b+0x92>
 80066d8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80066dc:	4405      	add	r5, r0
 80066de:	603d      	str	r5, [r7, #0]
 80066e0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80066e4:	6030      	str	r0, [r6, #0]
 80066e6:	4620      	mov	r0, r4
 80066e8:	b003      	add	sp, #12
 80066ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066ee:	6161      	str	r1, [r4, #20]
 80066f0:	e7ea      	b.n	80066c8 <__d2b+0x58>
 80066f2:	a801      	add	r0, sp, #4
 80066f4:	f7ff fce9 	bl	80060ca <__lo0bits>
 80066f8:	9b01      	ldr	r3, [sp, #4]
 80066fa:	6163      	str	r3, [r4, #20]
 80066fc:	3020      	adds	r0, #32
 80066fe:	2201      	movs	r2, #1
 8006700:	e7e8      	b.n	80066d4 <__d2b+0x64>
 8006702:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006706:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800670a:	6038      	str	r0, [r7, #0]
 800670c:	6918      	ldr	r0, [r3, #16]
 800670e:	f7ff fcbd 	bl	800608c <__hi0bits>
 8006712:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006716:	e7e5      	b.n	80066e4 <__d2b+0x74>
 8006718:	0800d616 	.word	0x0800d616
 800671c:	0800d627 	.word	0x0800d627

08006720 <__ratio>:
 8006720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006724:	b085      	sub	sp, #20
 8006726:	e9cd 1000 	strd	r1, r0, [sp]
 800672a:	a902      	add	r1, sp, #8
 800672c:	f7ff ff56 	bl	80065dc <__b2d>
 8006730:	9800      	ldr	r0, [sp, #0]
 8006732:	a903      	add	r1, sp, #12
 8006734:	ec55 4b10 	vmov	r4, r5, d0
 8006738:	f7ff ff50 	bl	80065dc <__b2d>
 800673c:	9b01      	ldr	r3, [sp, #4]
 800673e:	6919      	ldr	r1, [r3, #16]
 8006740:	9b00      	ldr	r3, [sp, #0]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	1ac9      	subs	r1, r1, r3
 8006746:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800674a:	1a9b      	subs	r3, r3, r2
 800674c:	ec5b ab10 	vmov	sl, fp, d0
 8006750:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006754:	2b00      	cmp	r3, #0
 8006756:	bfce      	itee	gt
 8006758:	462a      	movgt	r2, r5
 800675a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800675e:	465a      	movle	r2, fp
 8006760:	462f      	mov	r7, r5
 8006762:	46d9      	mov	r9, fp
 8006764:	bfcc      	ite	gt
 8006766:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800676a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800676e:	464b      	mov	r3, r9
 8006770:	4652      	mov	r2, sl
 8006772:	4620      	mov	r0, r4
 8006774:	4639      	mov	r1, r7
 8006776:	f7fa f871 	bl	800085c <__aeabi_ddiv>
 800677a:	ec41 0b10 	vmov	d0, r0, r1
 800677e:	b005      	add	sp, #20
 8006780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006784 <__copybits>:
 8006784:	3901      	subs	r1, #1
 8006786:	b570      	push	{r4, r5, r6, lr}
 8006788:	1149      	asrs	r1, r1, #5
 800678a:	6914      	ldr	r4, [r2, #16]
 800678c:	3101      	adds	r1, #1
 800678e:	f102 0314 	add.w	r3, r2, #20
 8006792:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006796:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800679a:	1f05      	subs	r5, r0, #4
 800679c:	42a3      	cmp	r3, r4
 800679e:	d30c      	bcc.n	80067ba <__copybits+0x36>
 80067a0:	1aa3      	subs	r3, r4, r2
 80067a2:	3b11      	subs	r3, #17
 80067a4:	f023 0303 	bic.w	r3, r3, #3
 80067a8:	3211      	adds	r2, #17
 80067aa:	42a2      	cmp	r2, r4
 80067ac:	bf88      	it	hi
 80067ae:	2300      	movhi	r3, #0
 80067b0:	4418      	add	r0, r3
 80067b2:	2300      	movs	r3, #0
 80067b4:	4288      	cmp	r0, r1
 80067b6:	d305      	bcc.n	80067c4 <__copybits+0x40>
 80067b8:	bd70      	pop	{r4, r5, r6, pc}
 80067ba:	f853 6b04 	ldr.w	r6, [r3], #4
 80067be:	f845 6f04 	str.w	r6, [r5, #4]!
 80067c2:	e7eb      	b.n	800679c <__copybits+0x18>
 80067c4:	f840 3b04 	str.w	r3, [r0], #4
 80067c8:	e7f4      	b.n	80067b4 <__copybits+0x30>

080067ca <__any_on>:
 80067ca:	f100 0214 	add.w	r2, r0, #20
 80067ce:	6900      	ldr	r0, [r0, #16]
 80067d0:	114b      	asrs	r3, r1, #5
 80067d2:	4298      	cmp	r0, r3
 80067d4:	b510      	push	{r4, lr}
 80067d6:	db11      	blt.n	80067fc <__any_on+0x32>
 80067d8:	dd0a      	ble.n	80067f0 <__any_on+0x26>
 80067da:	f011 011f 	ands.w	r1, r1, #31
 80067de:	d007      	beq.n	80067f0 <__any_on+0x26>
 80067e0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80067e4:	fa24 f001 	lsr.w	r0, r4, r1
 80067e8:	fa00 f101 	lsl.w	r1, r0, r1
 80067ec:	428c      	cmp	r4, r1
 80067ee:	d10b      	bne.n	8006808 <__any_on+0x3e>
 80067f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d803      	bhi.n	8006800 <__any_on+0x36>
 80067f8:	2000      	movs	r0, #0
 80067fa:	bd10      	pop	{r4, pc}
 80067fc:	4603      	mov	r3, r0
 80067fe:	e7f7      	b.n	80067f0 <__any_on+0x26>
 8006800:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006804:	2900      	cmp	r1, #0
 8006806:	d0f5      	beq.n	80067f4 <__any_on+0x2a>
 8006808:	2001      	movs	r0, #1
 800680a:	e7f6      	b.n	80067fa <__any_on+0x30>

0800680c <sulp>:
 800680c:	b570      	push	{r4, r5, r6, lr}
 800680e:	4604      	mov	r4, r0
 8006810:	460d      	mov	r5, r1
 8006812:	ec45 4b10 	vmov	d0, r4, r5
 8006816:	4616      	mov	r6, r2
 8006818:	f7ff feba 	bl	8006590 <__ulp>
 800681c:	ec51 0b10 	vmov	r0, r1, d0
 8006820:	b17e      	cbz	r6, 8006842 <sulp+0x36>
 8006822:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006826:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800682a:	2b00      	cmp	r3, #0
 800682c:	dd09      	ble.n	8006842 <sulp+0x36>
 800682e:	051b      	lsls	r3, r3, #20
 8006830:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006834:	2400      	movs	r4, #0
 8006836:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800683a:	4622      	mov	r2, r4
 800683c:	462b      	mov	r3, r5
 800683e:	f7f9 fee3 	bl	8000608 <__aeabi_dmul>
 8006842:	ec41 0b10 	vmov	d0, r0, r1
 8006846:	bd70      	pop	{r4, r5, r6, pc}

08006848 <_strtod_l>:
 8006848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800684c:	b09f      	sub	sp, #124	@ 0x7c
 800684e:	460c      	mov	r4, r1
 8006850:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006852:	2200      	movs	r2, #0
 8006854:	921a      	str	r2, [sp, #104]	@ 0x68
 8006856:	9005      	str	r0, [sp, #20]
 8006858:	f04f 0a00 	mov.w	sl, #0
 800685c:	f04f 0b00 	mov.w	fp, #0
 8006860:	460a      	mov	r2, r1
 8006862:	9219      	str	r2, [sp, #100]	@ 0x64
 8006864:	7811      	ldrb	r1, [r2, #0]
 8006866:	292b      	cmp	r1, #43	@ 0x2b
 8006868:	d04a      	beq.n	8006900 <_strtod_l+0xb8>
 800686a:	d838      	bhi.n	80068de <_strtod_l+0x96>
 800686c:	290d      	cmp	r1, #13
 800686e:	d832      	bhi.n	80068d6 <_strtod_l+0x8e>
 8006870:	2908      	cmp	r1, #8
 8006872:	d832      	bhi.n	80068da <_strtod_l+0x92>
 8006874:	2900      	cmp	r1, #0
 8006876:	d03b      	beq.n	80068f0 <_strtod_l+0xa8>
 8006878:	2200      	movs	r2, #0
 800687a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800687c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800687e:	782a      	ldrb	r2, [r5, #0]
 8006880:	2a30      	cmp	r2, #48	@ 0x30
 8006882:	f040 80b3 	bne.w	80069ec <_strtod_l+0x1a4>
 8006886:	786a      	ldrb	r2, [r5, #1]
 8006888:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800688c:	2a58      	cmp	r2, #88	@ 0x58
 800688e:	d16e      	bne.n	800696e <_strtod_l+0x126>
 8006890:	9302      	str	r3, [sp, #8]
 8006892:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006894:	9301      	str	r3, [sp, #4]
 8006896:	ab1a      	add	r3, sp, #104	@ 0x68
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	4a8e      	ldr	r2, [pc, #568]	@ (8006ad4 <_strtod_l+0x28c>)
 800689c:	9805      	ldr	r0, [sp, #20]
 800689e:	ab1b      	add	r3, sp, #108	@ 0x6c
 80068a0:	a919      	add	r1, sp, #100	@ 0x64
 80068a2:	f001 f8ab 	bl	80079fc <__gethex>
 80068a6:	f010 060f 	ands.w	r6, r0, #15
 80068aa:	4604      	mov	r4, r0
 80068ac:	d005      	beq.n	80068ba <_strtod_l+0x72>
 80068ae:	2e06      	cmp	r6, #6
 80068b0:	d128      	bne.n	8006904 <_strtod_l+0xbc>
 80068b2:	3501      	adds	r5, #1
 80068b4:	2300      	movs	r3, #0
 80068b6:	9519      	str	r5, [sp, #100]	@ 0x64
 80068b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068ba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80068bc:	2b00      	cmp	r3, #0
 80068be:	f040 858e 	bne.w	80073de <_strtod_l+0xb96>
 80068c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068c4:	b1cb      	cbz	r3, 80068fa <_strtod_l+0xb2>
 80068c6:	4652      	mov	r2, sl
 80068c8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80068cc:	ec43 2b10 	vmov	d0, r2, r3
 80068d0:	b01f      	add	sp, #124	@ 0x7c
 80068d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068d6:	2920      	cmp	r1, #32
 80068d8:	d1ce      	bne.n	8006878 <_strtod_l+0x30>
 80068da:	3201      	adds	r2, #1
 80068dc:	e7c1      	b.n	8006862 <_strtod_l+0x1a>
 80068de:	292d      	cmp	r1, #45	@ 0x2d
 80068e0:	d1ca      	bne.n	8006878 <_strtod_l+0x30>
 80068e2:	2101      	movs	r1, #1
 80068e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80068e6:	1c51      	adds	r1, r2, #1
 80068e8:	9119      	str	r1, [sp, #100]	@ 0x64
 80068ea:	7852      	ldrb	r2, [r2, #1]
 80068ec:	2a00      	cmp	r2, #0
 80068ee:	d1c5      	bne.n	800687c <_strtod_l+0x34>
 80068f0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80068f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f040 8570 	bne.w	80073da <_strtod_l+0xb92>
 80068fa:	4652      	mov	r2, sl
 80068fc:	465b      	mov	r3, fp
 80068fe:	e7e5      	b.n	80068cc <_strtod_l+0x84>
 8006900:	2100      	movs	r1, #0
 8006902:	e7ef      	b.n	80068e4 <_strtod_l+0x9c>
 8006904:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006906:	b13a      	cbz	r2, 8006918 <_strtod_l+0xd0>
 8006908:	2135      	movs	r1, #53	@ 0x35
 800690a:	a81c      	add	r0, sp, #112	@ 0x70
 800690c:	f7ff ff3a 	bl	8006784 <__copybits>
 8006910:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006912:	9805      	ldr	r0, [sp, #20]
 8006914:	f7ff fb08 	bl	8005f28 <_Bfree>
 8006918:	3e01      	subs	r6, #1
 800691a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800691c:	2e04      	cmp	r6, #4
 800691e:	d806      	bhi.n	800692e <_strtod_l+0xe6>
 8006920:	e8df f006 	tbb	[pc, r6]
 8006924:	201d0314 	.word	0x201d0314
 8006928:	14          	.byte	0x14
 8006929:	00          	.byte	0x00
 800692a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800692e:	05e1      	lsls	r1, r4, #23
 8006930:	bf48      	it	mi
 8006932:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006936:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800693a:	0d1b      	lsrs	r3, r3, #20
 800693c:	051b      	lsls	r3, r3, #20
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1bb      	bne.n	80068ba <_strtod_l+0x72>
 8006942:	f7fe fb31 	bl	8004fa8 <__errno>
 8006946:	2322      	movs	r3, #34	@ 0x22
 8006948:	6003      	str	r3, [r0, #0]
 800694a:	e7b6      	b.n	80068ba <_strtod_l+0x72>
 800694c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006950:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006954:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006958:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800695c:	e7e7      	b.n	800692e <_strtod_l+0xe6>
 800695e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006adc <_strtod_l+0x294>
 8006962:	e7e4      	b.n	800692e <_strtod_l+0xe6>
 8006964:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006968:	f04f 3aff 	mov.w	sl, #4294967295
 800696c:	e7df      	b.n	800692e <_strtod_l+0xe6>
 800696e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	9219      	str	r2, [sp, #100]	@ 0x64
 8006974:	785b      	ldrb	r3, [r3, #1]
 8006976:	2b30      	cmp	r3, #48	@ 0x30
 8006978:	d0f9      	beq.n	800696e <_strtod_l+0x126>
 800697a:	2b00      	cmp	r3, #0
 800697c:	d09d      	beq.n	80068ba <_strtod_l+0x72>
 800697e:	2301      	movs	r3, #1
 8006980:	9309      	str	r3, [sp, #36]	@ 0x24
 8006982:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006984:	930c      	str	r3, [sp, #48]	@ 0x30
 8006986:	2300      	movs	r3, #0
 8006988:	9308      	str	r3, [sp, #32]
 800698a:	930a      	str	r3, [sp, #40]	@ 0x28
 800698c:	461f      	mov	r7, r3
 800698e:	220a      	movs	r2, #10
 8006990:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006992:	7805      	ldrb	r5, [r0, #0]
 8006994:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006998:	b2d9      	uxtb	r1, r3
 800699a:	2909      	cmp	r1, #9
 800699c:	d928      	bls.n	80069f0 <_strtod_l+0x1a8>
 800699e:	494e      	ldr	r1, [pc, #312]	@ (8006ad8 <_strtod_l+0x290>)
 80069a0:	2201      	movs	r2, #1
 80069a2:	f000 ff59 	bl	8007858 <strncmp>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d032      	beq.n	8006a10 <_strtod_l+0x1c8>
 80069aa:	2000      	movs	r0, #0
 80069ac:	462a      	mov	r2, r5
 80069ae:	4681      	mov	r9, r0
 80069b0:	463d      	mov	r5, r7
 80069b2:	4603      	mov	r3, r0
 80069b4:	2a65      	cmp	r2, #101	@ 0x65
 80069b6:	d001      	beq.n	80069bc <_strtod_l+0x174>
 80069b8:	2a45      	cmp	r2, #69	@ 0x45
 80069ba:	d114      	bne.n	80069e6 <_strtod_l+0x19e>
 80069bc:	b91d      	cbnz	r5, 80069c6 <_strtod_l+0x17e>
 80069be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069c0:	4302      	orrs	r2, r0
 80069c2:	d095      	beq.n	80068f0 <_strtod_l+0xa8>
 80069c4:	2500      	movs	r5, #0
 80069c6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80069c8:	1c62      	adds	r2, r4, #1
 80069ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80069cc:	7862      	ldrb	r2, [r4, #1]
 80069ce:	2a2b      	cmp	r2, #43	@ 0x2b
 80069d0:	d077      	beq.n	8006ac2 <_strtod_l+0x27a>
 80069d2:	2a2d      	cmp	r2, #45	@ 0x2d
 80069d4:	d07b      	beq.n	8006ace <_strtod_l+0x286>
 80069d6:	f04f 0c00 	mov.w	ip, #0
 80069da:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80069de:	2909      	cmp	r1, #9
 80069e0:	f240 8082 	bls.w	8006ae8 <_strtod_l+0x2a0>
 80069e4:	9419      	str	r4, [sp, #100]	@ 0x64
 80069e6:	f04f 0800 	mov.w	r8, #0
 80069ea:	e0a2      	b.n	8006b32 <_strtod_l+0x2ea>
 80069ec:	2300      	movs	r3, #0
 80069ee:	e7c7      	b.n	8006980 <_strtod_l+0x138>
 80069f0:	2f08      	cmp	r7, #8
 80069f2:	bfd5      	itete	le
 80069f4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80069f6:	9908      	ldrgt	r1, [sp, #32]
 80069f8:	fb02 3301 	mlale	r3, r2, r1, r3
 80069fc:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006a00:	f100 0001 	add.w	r0, r0, #1
 8006a04:	bfd4      	ite	le
 8006a06:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006a08:	9308      	strgt	r3, [sp, #32]
 8006a0a:	3701      	adds	r7, #1
 8006a0c:	9019      	str	r0, [sp, #100]	@ 0x64
 8006a0e:	e7bf      	b.n	8006990 <_strtod_l+0x148>
 8006a10:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a16:	785a      	ldrb	r2, [r3, #1]
 8006a18:	b37f      	cbz	r7, 8006a7a <_strtod_l+0x232>
 8006a1a:	4681      	mov	r9, r0
 8006a1c:	463d      	mov	r5, r7
 8006a1e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006a22:	2b09      	cmp	r3, #9
 8006a24:	d912      	bls.n	8006a4c <_strtod_l+0x204>
 8006a26:	2301      	movs	r3, #1
 8006a28:	e7c4      	b.n	80069b4 <_strtod_l+0x16c>
 8006a2a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a2c:	1c5a      	adds	r2, r3, #1
 8006a2e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a30:	785a      	ldrb	r2, [r3, #1]
 8006a32:	3001      	adds	r0, #1
 8006a34:	2a30      	cmp	r2, #48	@ 0x30
 8006a36:	d0f8      	beq.n	8006a2a <_strtod_l+0x1e2>
 8006a38:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006a3c:	2b08      	cmp	r3, #8
 8006a3e:	f200 84d3 	bhi.w	80073e8 <_strtod_l+0xba0>
 8006a42:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a44:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a46:	4681      	mov	r9, r0
 8006a48:	2000      	movs	r0, #0
 8006a4a:	4605      	mov	r5, r0
 8006a4c:	3a30      	subs	r2, #48	@ 0x30
 8006a4e:	f100 0301 	add.w	r3, r0, #1
 8006a52:	d02a      	beq.n	8006aaa <_strtod_l+0x262>
 8006a54:	4499      	add	r9, r3
 8006a56:	eb00 0c05 	add.w	ip, r0, r5
 8006a5a:	462b      	mov	r3, r5
 8006a5c:	210a      	movs	r1, #10
 8006a5e:	4563      	cmp	r3, ip
 8006a60:	d10d      	bne.n	8006a7e <_strtod_l+0x236>
 8006a62:	1c69      	adds	r1, r5, #1
 8006a64:	4401      	add	r1, r0
 8006a66:	4428      	add	r0, r5
 8006a68:	2808      	cmp	r0, #8
 8006a6a:	dc16      	bgt.n	8006a9a <_strtod_l+0x252>
 8006a6c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006a6e:	230a      	movs	r3, #10
 8006a70:	fb03 2300 	mla	r3, r3, r0, r2
 8006a74:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a76:	2300      	movs	r3, #0
 8006a78:	e018      	b.n	8006aac <_strtod_l+0x264>
 8006a7a:	4638      	mov	r0, r7
 8006a7c:	e7da      	b.n	8006a34 <_strtod_l+0x1ec>
 8006a7e:	2b08      	cmp	r3, #8
 8006a80:	f103 0301 	add.w	r3, r3, #1
 8006a84:	dc03      	bgt.n	8006a8e <_strtod_l+0x246>
 8006a86:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006a88:	434e      	muls	r6, r1
 8006a8a:	960a      	str	r6, [sp, #40]	@ 0x28
 8006a8c:	e7e7      	b.n	8006a5e <_strtod_l+0x216>
 8006a8e:	2b10      	cmp	r3, #16
 8006a90:	bfde      	ittt	le
 8006a92:	9e08      	ldrle	r6, [sp, #32]
 8006a94:	434e      	mulle	r6, r1
 8006a96:	9608      	strle	r6, [sp, #32]
 8006a98:	e7e1      	b.n	8006a5e <_strtod_l+0x216>
 8006a9a:	280f      	cmp	r0, #15
 8006a9c:	dceb      	bgt.n	8006a76 <_strtod_l+0x22e>
 8006a9e:	9808      	ldr	r0, [sp, #32]
 8006aa0:	230a      	movs	r3, #10
 8006aa2:	fb03 2300 	mla	r3, r3, r0, r2
 8006aa6:	9308      	str	r3, [sp, #32]
 8006aa8:	e7e5      	b.n	8006a76 <_strtod_l+0x22e>
 8006aaa:	4629      	mov	r1, r5
 8006aac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006aae:	1c50      	adds	r0, r2, #1
 8006ab0:	9019      	str	r0, [sp, #100]	@ 0x64
 8006ab2:	7852      	ldrb	r2, [r2, #1]
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	460d      	mov	r5, r1
 8006ab8:	e7b1      	b.n	8006a1e <_strtod_l+0x1d6>
 8006aba:	f04f 0900 	mov.w	r9, #0
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e77d      	b.n	80069be <_strtod_l+0x176>
 8006ac2:	f04f 0c00 	mov.w	ip, #0
 8006ac6:	1ca2      	adds	r2, r4, #2
 8006ac8:	9219      	str	r2, [sp, #100]	@ 0x64
 8006aca:	78a2      	ldrb	r2, [r4, #2]
 8006acc:	e785      	b.n	80069da <_strtod_l+0x192>
 8006ace:	f04f 0c01 	mov.w	ip, #1
 8006ad2:	e7f8      	b.n	8006ac6 <_strtod_l+0x27e>
 8006ad4:	0800d798 	.word	0x0800d798
 8006ad8:	0800d780 	.word	0x0800d780
 8006adc:	7ff00000 	.word	0x7ff00000
 8006ae0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006ae2:	1c51      	adds	r1, r2, #1
 8006ae4:	9119      	str	r1, [sp, #100]	@ 0x64
 8006ae6:	7852      	ldrb	r2, [r2, #1]
 8006ae8:	2a30      	cmp	r2, #48	@ 0x30
 8006aea:	d0f9      	beq.n	8006ae0 <_strtod_l+0x298>
 8006aec:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006af0:	2908      	cmp	r1, #8
 8006af2:	f63f af78 	bhi.w	80069e6 <_strtod_l+0x19e>
 8006af6:	3a30      	subs	r2, #48	@ 0x30
 8006af8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006afa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006afc:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006afe:	f04f 080a 	mov.w	r8, #10
 8006b02:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006b04:	1c56      	adds	r6, r2, #1
 8006b06:	9619      	str	r6, [sp, #100]	@ 0x64
 8006b08:	7852      	ldrb	r2, [r2, #1]
 8006b0a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006b0e:	f1be 0f09 	cmp.w	lr, #9
 8006b12:	d939      	bls.n	8006b88 <_strtod_l+0x340>
 8006b14:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006b16:	1a76      	subs	r6, r6, r1
 8006b18:	2e08      	cmp	r6, #8
 8006b1a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006b1e:	dc03      	bgt.n	8006b28 <_strtod_l+0x2e0>
 8006b20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006b22:	4588      	cmp	r8, r1
 8006b24:	bfa8      	it	ge
 8006b26:	4688      	movge	r8, r1
 8006b28:	f1bc 0f00 	cmp.w	ip, #0
 8006b2c:	d001      	beq.n	8006b32 <_strtod_l+0x2ea>
 8006b2e:	f1c8 0800 	rsb	r8, r8, #0
 8006b32:	2d00      	cmp	r5, #0
 8006b34:	d14e      	bne.n	8006bd4 <_strtod_l+0x38c>
 8006b36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b38:	4308      	orrs	r0, r1
 8006b3a:	f47f aebe 	bne.w	80068ba <_strtod_l+0x72>
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f47f aed6 	bne.w	80068f0 <_strtod_l+0xa8>
 8006b44:	2a69      	cmp	r2, #105	@ 0x69
 8006b46:	d028      	beq.n	8006b9a <_strtod_l+0x352>
 8006b48:	dc25      	bgt.n	8006b96 <_strtod_l+0x34e>
 8006b4a:	2a49      	cmp	r2, #73	@ 0x49
 8006b4c:	d025      	beq.n	8006b9a <_strtod_l+0x352>
 8006b4e:	2a4e      	cmp	r2, #78	@ 0x4e
 8006b50:	f47f aece 	bne.w	80068f0 <_strtod_l+0xa8>
 8006b54:	499b      	ldr	r1, [pc, #620]	@ (8006dc4 <_strtod_l+0x57c>)
 8006b56:	a819      	add	r0, sp, #100	@ 0x64
 8006b58:	f001 f972 	bl	8007e40 <__match>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	f43f aec7 	beq.w	80068f0 <_strtod_l+0xa8>
 8006b62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b28      	cmp	r3, #40	@ 0x28
 8006b68:	d12e      	bne.n	8006bc8 <_strtod_l+0x380>
 8006b6a:	4997      	ldr	r1, [pc, #604]	@ (8006dc8 <_strtod_l+0x580>)
 8006b6c:	aa1c      	add	r2, sp, #112	@ 0x70
 8006b6e:	a819      	add	r0, sp, #100	@ 0x64
 8006b70:	f001 f97a 	bl	8007e68 <__hexnan>
 8006b74:	2805      	cmp	r0, #5
 8006b76:	d127      	bne.n	8006bc8 <_strtod_l+0x380>
 8006b78:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006b7a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006b7e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006b82:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006b86:	e698      	b.n	80068ba <_strtod_l+0x72>
 8006b88:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006b8a:	fb08 2101 	mla	r1, r8, r1, r2
 8006b8e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006b92:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b94:	e7b5      	b.n	8006b02 <_strtod_l+0x2ba>
 8006b96:	2a6e      	cmp	r2, #110	@ 0x6e
 8006b98:	e7da      	b.n	8006b50 <_strtod_l+0x308>
 8006b9a:	498c      	ldr	r1, [pc, #560]	@ (8006dcc <_strtod_l+0x584>)
 8006b9c:	a819      	add	r0, sp, #100	@ 0x64
 8006b9e:	f001 f94f 	bl	8007e40 <__match>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	f43f aea4 	beq.w	80068f0 <_strtod_l+0xa8>
 8006ba8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006baa:	4989      	ldr	r1, [pc, #548]	@ (8006dd0 <_strtod_l+0x588>)
 8006bac:	3b01      	subs	r3, #1
 8006bae:	a819      	add	r0, sp, #100	@ 0x64
 8006bb0:	9319      	str	r3, [sp, #100]	@ 0x64
 8006bb2:	f001 f945 	bl	8007e40 <__match>
 8006bb6:	b910      	cbnz	r0, 8006bbe <_strtod_l+0x376>
 8006bb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006bba:	3301      	adds	r3, #1
 8006bbc:	9319      	str	r3, [sp, #100]	@ 0x64
 8006bbe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006de0 <_strtod_l+0x598>
 8006bc2:	f04f 0a00 	mov.w	sl, #0
 8006bc6:	e678      	b.n	80068ba <_strtod_l+0x72>
 8006bc8:	4882      	ldr	r0, [pc, #520]	@ (8006dd4 <_strtod_l+0x58c>)
 8006bca:	f000 fe75 	bl	80078b8 <nan>
 8006bce:	ec5b ab10 	vmov	sl, fp, d0
 8006bd2:	e672      	b.n	80068ba <_strtod_l+0x72>
 8006bd4:	eba8 0309 	sub.w	r3, r8, r9
 8006bd8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006bda:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bdc:	2f00      	cmp	r7, #0
 8006bde:	bf08      	it	eq
 8006be0:	462f      	moveq	r7, r5
 8006be2:	2d10      	cmp	r5, #16
 8006be4:	462c      	mov	r4, r5
 8006be6:	bfa8      	it	ge
 8006be8:	2410      	movge	r4, #16
 8006bea:	f7f9 fc93 	bl	8000514 <__aeabi_ui2d>
 8006bee:	2d09      	cmp	r5, #9
 8006bf0:	4682      	mov	sl, r0
 8006bf2:	468b      	mov	fp, r1
 8006bf4:	dc13      	bgt.n	8006c1e <_strtod_l+0x3d6>
 8006bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	f43f ae5e 	beq.w	80068ba <_strtod_l+0x72>
 8006bfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c00:	dd78      	ble.n	8006cf4 <_strtod_l+0x4ac>
 8006c02:	2b16      	cmp	r3, #22
 8006c04:	dc5f      	bgt.n	8006cc6 <_strtod_l+0x47e>
 8006c06:	4974      	ldr	r1, [pc, #464]	@ (8006dd8 <_strtod_l+0x590>)
 8006c08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c10:	4652      	mov	r2, sl
 8006c12:	465b      	mov	r3, fp
 8006c14:	f7f9 fcf8 	bl	8000608 <__aeabi_dmul>
 8006c18:	4682      	mov	sl, r0
 8006c1a:	468b      	mov	fp, r1
 8006c1c:	e64d      	b.n	80068ba <_strtod_l+0x72>
 8006c1e:	4b6e      	ldr	r3, [pc, #440]	@ (8006dd8 <_strtod_l+0x590>)
 8006c20:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c24:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006c28:	f7f9 fcee 	bl	8000608 <__aeabi_dmul>
 8006c2c:	4682      	mov	sl, r0
 8006c2e:	9808      	ldr	r0, [sp, #32]
 8006c30:	468b      	mov	fp, r1
 8006c32:	f7f9 fc6f 	bl	8000514 <__aeabi_ui2d>
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4650      	mov	r0, sl
 8006c3c:	4659      	mov	r1, fp
 8006c3e:	f7f9 fb2d 	bl	800029c <__adddf3>
 8006c42:	2d0f      	cmp	r5, #15
 8006c44:	4682      	mov	sl, r0
 8006c46:	468b      	mov	fp, r1
 8006c48:	ddd5      	ble.n	8006bf6 <_strtod_l+0x3ae>
 8006c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c4c:	1b2c      	subs	r4, r5, r4
 8006c4e:	441c      	add	r4, r3
 8006c50:	2c00      	cmp	r4, #0
 8006c52:	f340 8096 	ble.w	8006d82 <_strtod_l+0x53a>
 8006c56:	f014 030f 	ands.w	r3, r4, #15
 8006c5a:	d00a      	beq.n	8006c72 <_strtod_l+0x42a>
 8006c5c:	495e      	ldr	r1, [pc, #376]	@ (8006dd8 <_strtod_l+0x590>)
 8006c5e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c62:	4652      	mov	r2, sl
 8006c64:	465b      	mov	r3, fp
 8006c66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c6a:	f7f9 fccd 	bl	8000608 <__aeabi_dmul>
 8006c6e:	4682      	mov	sl, r0
 8006c70:	468b      	mov	fp, r1
 8006c72:	f034 040f 	bics.w	r4, r4, #15
 8006c76:	d073      	beq.n	8006d60 <_strtod_l+0x518>
 8006c78:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006c7c:	dd48      	ble.n	8006d10 <_strtod_l+0x4c8>
 8006c7e:	2400      	movs	r4, #0
 8006c80:	46a0      	mov	r8, r4
 8006c82:	940a      	str	r4, [sp, #40]	@ 0x28
 8006c84:	46a1      	mov	r9, r4
 8006c86:	9a05      	ldr	r2, [sp, #20]
 8006c88:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006de0 <_strtod_l+0x598>
 8006c8c:	2322      	movs	r3, #34	@ 0x22
 8006c8e:	6013      	str	r3, [r2, #0]
 8006c90:	f04f 0a00 	mov.w	sl, #0
 8006c94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f43f ae0f 	beq.w	80068ba <_strtod_l+0x72>
 8006c9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c9e:	9805      	ldr	r0, [sp, #20]
 8006ca0:	f7ff f942 	bl	8005f28 <_Bfree>
 8006ca4:	9805      	ldr	r0, [sp, #20]
 8006ca6:	4649      	mov	r1, r9
 8006ca8:	f7ff f93e 	bl	8005f28 <_Bfree>
 8006cac:	9805      	ldr	r0, [sp, #20]
 8006cae:	4641      	mov	r1, r8
 8006cb0:	f7ff f93a 	bl	8005f28 <_Bfree>
 8006cb4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006cb6:	9805      	ldr	r0, [sp, #20]
 8006cb8:	f7ff f936 	bl	8005f28 <_Bfree>
 8006cbc:	9805      	ldr	r0, [sp, #20]
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	f7ff f932 	bl	8005f28 <_Bfree>
 8006cc4:	e5f9      	b.n	80068ba <_strtod_l+0x72>
 8006cc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cc8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	dbbc      	blt.n	8006c4a <_strtod_l+0x402>
 8006cd0:	4c41      	ldr	r4, [pc, #260]	@ (8006dd8 <_strtod_l+0x590>)
 8006cd2:	f1c5 050f 	rsb	r5, r5, #15
 8006cd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006cda:	4652      	mov	r2, sl
 8006cdc:	465b      	mov	r3, fp
 8006cde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ce2:	f7f9 fc91 	bl	8000608 <__aeabi_dmul>
 8006ce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ce8:	1b5d      	subs	r5, r3, r5
 8006cea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006cee:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006cf2:	e78f      	b.n	8006c14 <_strtod_l+0x3cc>
 8006cf4:	3316      	adds	r3, #22
 8006cf6:	dba8      	blt.n	8006c4a <_strtod_l+0x402>
 8006cf8:	4b37      	ldr	r3, [pc, #220]	@ (8006dd8 <_strtod_l+0x590>)
 8006cfa:	eba9 0808 	sub.w	r8, r9, r8
 8006cfe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006d02:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006d06:	4650      	mov	r0, sl
 8006d08:	4659      	mov	r1, fp
 8006d0a:	f7f9 fda7 	bl	800085c <__aeabi_ddiv>
 8006d0e:	e783      	b.n	8006c18 <_strtod_l+0x3d0>
 8006d10:	4b32      	ldr	r3, [pc, #200]	@ (8006ddc <_strtod_l+0x594>)
 8006d12:	9308      	str	r3, [sp, #32]
 8006d14:	2300      	movs	r3, #0
 8006d16:	1124      	asrs	r4, r4, #4
 8006d18:	4650      	mov	r0, sl
 8006d1a:	4659      	mov	r1, fp
 8006d1c:	461e      	mov	r6, r3
 8006d1e:	2c01      	cmp	r4, #1
 8006d20:	dc21      	bgt.n	8006d66 <_strtod_l+0x51e>
 8006d22:	b10b      	cbz	r3, 8006d28 <_strtod_l+0x4e0>
 8006d24:	4682      	mov	sl, r0
 8006d26:	468b      	mov	fp, r1
 8006d28:	492c      	ldr	r1, [pc, #176]	@ (8006ddc <_strtod_l+0x594>)
 8006d2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006d2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006d32:	4652      	mov	r2, sl
 8006d34:	465b      	mov	r3, fp
 8006d36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006d3a:	f7f9 fc65 	bl	8000608 <__aeabi_dmul>
 8006d3e:	4b28      	ldr	r3, [pc, #160]	@ (8006de0 <_strtod_l+0x598>)
 8006d40:	460a      	mov	r2, r1
 8006d42:	400b      	ands	r3, r1
 8006d44:	4927      	ldr	r1, [pc, #156]	@ (8006de4 <_strtod_l+0x59c>)
 8006d46:	428b      	cmp	r3, r1
 8006d48:	4682      	mov	sl, r0
 8006d4a:	d898      	bhi.n	8006c7e <_strtod_l+0x436>
 8006d4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006d50:	428b      	cmp	r3, r1
 8006d52:	bf86      	itte	hi
 8006d54:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006de8 <_strtod_l+0x5a0>
 8006d58:	f04f 3aff 	movhi.w	sl, #4294967295
 8006d5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006d60:	2300      	movs	r3, #0
 8006d62:	9308      	str	r3, [sp, #32]
 8006d64:	e07a      	b.n	8006e5c <_strtod_l+0x614>
 8006d66:	07e2      	lsls	r2, r4, #31
 8006d68:	d505      	bpl.n	8006d76 <_strtod_l+0x52e>
 8006d6a:	9b08      	ldr	r3, [sp, #32]
 8006d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d70:	f7f9 fc4a 	bl	8000608 <__aeabi_dmul>
 8006d74:	2301      	movs	r3, #1
 8006d76:	9a08      	ldr	r2, [sp, #32]
 8006d78:	3208      	adds	r2, #8
 8006d7a:	3601      	adds	r6, #1
 8006d7c:	1064      	asrs	r4, r4, #1
 8006d7e:	9208      	str	r2, [sp, #32]
 8006d80:	e7cd      	b.n	8006d1e <_strtod_l+0x4d6>
 8006d82:	d0ed      	beq.n	8006d60 <_strtod_l+0x518>
 8006d84:	4264      	negs	r4, r4
 8006d86:	f014 020f 	ands.w	r2, r4, #15
 8006d8a:	d00a      	beq.n	8006da2 <_strtod_l+0x55a>
 8006d8c:	4b12      	ldr	r3, [pc, #72]	@ (8006dd8 <_strtod_l+0x590>)
 8006d8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d92:	4650      	mov	r0, sl
 8006d94:	4659      	mov	r1, fp
 8006d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9a:	f7f9 fd5f 	bl	800085c <__aeabi_ddiv>
 8006d9e:	4682      	mov	sl, r0
 8006da0:	468b      	mov	fp, r1
 8006da2:	1124      	asrs	r4, r4, #4
 8006da4:	d0dc      	beq.n	8006d60 <_strtod_l+0x518>
 8006da6:	2c1f      	cmp	r4, #31
 8006da8:	dd20      	ble.n	8006dec <_strtod_l+0x5a4>
 8006daa:	2400      	movs	r4, #0
 8006dac:	46a0      	mov	r8, r4
 8006dae:	940a      	str	r4, [sp, #40]	@ 0x28
 8006db0:	46a1      	mov	r9, r4
 8006db2:	9a05      	ldr	r2, [sp, #20]
 8006db4:	2322      	movs	r3, #34	@ 0x22
 8006db6:	f04f 0a00 	mov.w	sl, #0
 8006dba:	f04f 0b00 	mov.w	fp, #0
 8006dbe:	6013      	str	r3, [r2, #0]
 8006dc0:	e768      	b.n	8006c94 <_strtod_l+0x44c>
 8006dc2:	bf00      	nop
 8006dc4:	0800d56e 	.word	0x0800d56e
 8006dc8:	0800d784 	.word	0x0800d784
 8006dcc:	0800d566 	.word	0x0800d566
 8006dd0:	0800d59d 	.word	0x0800d59d
 8006dd4:	0800d82c 	.word	0x0800d82c
 8006dd8:	0800d6b8 	.word	0x0800d6b8
 8006ddc:	0800d690 	.word	0x0800d690
 8006de0:	7ff00000 	.word	0x7ff00000
 8006de4:	7ca00000 	.word	0x7ca00000
 8006de8:	7fefffff 	.word	0x7fefffff
 8006dec:	f014 0310 	ands.w	r3, r4, #16
 8006df0:	bf18      	it	ne
 8006df2:	236a      	movne	r3, #106	@ 0x6a
 8006df4:	4ea9      	ldr	r6, [pc, #676]	@ (800709c <_strtod_l+0x854>)
 8006df6:	9308      	str	r3, [sp, #32]
 8006df8:	4650      	mov	r0, sl
 8006dfa:	4659      	mov	r1, fp
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	07e2      	lsls	r2, r4, #31
 8006e00:	d504      	bpl.n	8006e0c <_strtod_l+0x5c4>
 8006e02:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006e06:	f7f9 fbff 	bl	8000608 <__aeabi_dmul>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	1064      	asrs	r4, r4, #1
 8006e0e:	f106 0608 	add.w	r6, r6, #8
 8006e12:	d1f4      	bne.n	8006dfe <_strtod_l+0x5b6>
 8006e14:	b10b      	cbz	r3, 8006e1a <_strtod_l+0x5d2>
 8006e16:	4682      	mov	sl, r0
 8006e18:	468b      	mov	fp, r1
 8006e1a:	9b08      	ldr	r3, [sp, #32]
 8006e1c:	b1b3      	cbz	r3, 8006e4c <_strtod_l+0x604>
 8006e1e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006e22:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	4659      	mov	r1, fp
 8006e2a:	dd0f      	ble.n	8006e4c <_strtod_l+0x604>
 8006e2c:	2b1f      	cmp	r3, #31
 8006e2e:	dd55      	ble.n	8006edc <_strtod_l+0x694>
 8006e30:	2b34      	cmp	r3, #52	@ 0x34
 8006e32:	bfde      	ittt	le
 8006e34:	f04f 33ff 	movle.w	r3, #4294967295
 8006e38:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006e3c:	4093      	lslle	r3, r2
 8006e3e:	f04f 0a00 	mov.w	sl, #0
 8006e42:	bfcc      	ite	gt
 8006e44:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006e48:	ea03 0b01 	andle.w	fp, r3, r1
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2300      	movs	r3, #0
 8006e50:	4650      	mov	r0, sl
 8006e52:	4659      	mov	r1, fp
 8006e54:	f7f9 fe40 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	d1a6      	bne.n	8006daa <_strtod_l+0x562>
 8006e5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006e62:	9805      	ldr	r0, [sp, #20]
 8006e64:	462b      	mov	r3, r5
 8006e66:	463a      	mov	r2, r7
 8006e68:	f7ff f8c6 	bl	8005ff8 <__s2b>
 8006e6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	f43f af05 	beq.w	8006c7e <_strtod_l+0x436>
 8006e74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e76:	2a00      	cmp	r2, #0
 8006e78:	eba9 0308 	sub.w	r3, r9, r8
 8006e7c:	bfa8      	it	ge
 8006e7e:	2300      	movge	r3, #0
 8006e80:	9312      	str	r3, [sp, #72]	@ 0x48
 8006e82:	2400      	movs	r4, #0
 8006e84:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006e88:	9316      	str	r3, [sp, #88]	@ 0x58
 8006e8a:	46a0      	mov	r8, r4
 8006e8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e8e:	9805      	ldr	r0, [sp, #20]
 8006e90:	6859      	ldr	r1, [r3, #4]
 8006e92:	f7ff f809 	bl	8005ea8 <_Balloc>
 8006e96:	4681      	mov	r9, r0
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	f43f aef4 	beq.w	8006c86 <_strtod_l+0x43e>
 8006e9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ea0:	691a      	ldr	r2, [r3, #16]
 8006ea2:	3202      	adds	r2, #2
 8006ea4:	f103 010c 	add.w	r1, r3, #12
 8006ea8:	0092      	lsls	r2, r2, #2
 8006eaa:	300c      	adds	r0, #12
 8006eac:	f000 fcf6 	bl	800789c <memcpy>
 8006eb0:	ec4b ab10 	vmov	d0, sl, fp
 8006eb4:	9805      	ldr	r0, [sp, #20]
 8006eb6:	aa1c      	add	r2, sp, #112	@ 0x70
 8006eb8:	a91b      	add	r1, sp, #108	@ 0x6c
 8006eba:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006ebe:	f7ff fbd7 	bl	8006670 <__d2b>
 8006ec2:	901a      	str	r0, [sp, #104]	@ 0x68
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	f43f aede 	beq.w	8006c86 <_strtod_l+0x43e>
 8006eca:	9805      	ldr	r0, [sp, #20]
 8006ecc:	2101      	movs	r1, #1
 8006ece:	f7ff f929 	bl	8006124 <__i2b>
 8006ed2:	4680      	mov	r8, r0
 8006ed4:	b948      	cbnz	r0, 8006eea <_strtod_l+0x6a2>
 8006ed6:	f04f 0800 	mov.w	r8, #0
 8006eda:	e6d4      	b.n	8006c86 <_strtod_l+0x43e>
 8006edc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee4:	ea03 0a0a 	and.w	sl, r3, sl
 8006ee8:	e7b0      	b.n	8006e4c <_strtod_l+0x604>
 8006eea:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006eec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006eee:	2d00      	cmp	r5, #0
 8006ef0:	bfab      	itete	ge
 8006ef2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006ef4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006ef6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006ef8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006efa:	bfac      	ite	ge
 8006efc:	18ef      	addge	r7, r5, r3
 8006efe:	1b5e      	sublt	r6, r3, r5
 8006f00:	9b08      	ldr	r3, [sp, #32]
 8006f02:	1aed      	subs	r5, r5, r3
 8006f04:	4415      	add	r5, r2
 8006f06:	4b66      	ldr	r3, [pc, #408]	@ (80070a0 <_strtod_l+0x858>)
 8006f08:	3d01      	subs	r5, #1
 8006f0a:	429d      	cmp	r5, r3
 8006f0c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006f10:	da50      	bge.n	8006fb4 <_strtod_l+0x76c>
 8006f12:	1b5b      	subs	r3, r3, r5
 8006f14:	2b1f      	cmp	r3, #31
 8006f16:	eba2 0203 	sub.w	r2, r2, r3
 8006f1a:	f04f 0101 	mov.w	r1, #1
 8006f1e:	dc3d      	bgt.n	8006f9c <_strtod_l+0x754>
 8006f20:	fa01 f303 	lsl.w	r3, r1, r3
 8006f24:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f26:	2300      	movs	r3, #0
 8006f28:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f2a:	18bd      	adds	r5, r7, r2
 8006f2c:	9b08      	ldr	r3, [sp, #32]
 8006f2e:	42af      	cmp	r7, r5
 8006f30:	4416      	add	r6, r2
 8006f32:	441e      	add	r6, r3
 8006f34:	463b      	mov	r3, r7
 8006f36:	bfa8      	it	ge
 8006f38:	462b      	movge	r3, r5
 8006f3a:	42b3      	cmp	r3, r6
 8006f3c:	bfa8      	it	ge
 8006f3e:	4633      	movge	r3, r6
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	bfc2      	ittt	gt
 8006f44:	1aed      	subgt	r5, r5, r3
 8006f46:	1af6      	subgt	r6, r6, r3
 8006f48:	1aff      	subgt	r7, r7, r3
 8006f4a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	dd16      	ble.n	8006f7e <_strtod_l+0x736>
 8006f50:	4641      	mov	r1, r8
 8006f52:	9805      	ldr	r0, [sp, #20]
 8006f54:	461a      	mov	r2, r3
 8006f56:	f7ff f9a5 	bl	80062a4 <__pow5mult>
 8006f5a:	4680      	mov	r8, r0
 8006f5c:	2800      	cmp	r0, #0
 8006f5e:	d0ba      	beq.n	8006ed6 <_strtod_l+0x68e>
 8006f60:	4601      	mov	r1, r0
 8006f62:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006f64:	9805      	ldr	r0, [sp, #20]
 8006f66:	f7ff f8f3 	bl	8006150 <__multiply>
 8006f6a:	900e      	str	r0, [sp, #56]	@ 0x38
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	f43f ae8a 	beq.w	8006c86 <_strtod_l+0x43e>
 8006f72:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f74:	9805      	ldr	r0, [sp, #20]
 8006f76:	f7fe ffd7 	bl	8005f28 <_Bfree>
 8006f7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f7e:	2d00      	cmp	r5, #0
 8006f80:	dc1d      	bgt.n	8006fbe <_strtod_l+0x776>
 8006f82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	dd23      	ble.n	8006fd0 <_strtod_l+0x788>
 8006f88:	4649      	mov	r1, r9
 8006f8a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006f8c:	9805      	ldr	r0, [sp, #20]
 8006f8e:	f7ff f989 	bl	80062a4 <__pow5mult>
 8006f92:	4681      	mov	r9, r0
 8006f94:	b9e0      	cbnz	r0, 8006fd0 <_strtod_l+0x788>
 8006f96:	f04f 0900 	mov.w	r9, #0
 8006f9a:	e674      	b.n	8006c86 <_strtod_l+0x43e>
 8006f9c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006fa0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006fa4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006fa8:	35e2      	adds	r5, #226	@ 0xe2
 8006faa:	fa01 f305 	lsl.w	r3, r1, r5
 8006fae:	9310      	str	r3, [sp, #64]	@ 0x40
 8006fb0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006fb2:	e7ba      	b.n	8006f2a <_strtod_l+0x6e2>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8006fb8:	2301      	movs	r3, #1
 8006fba:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006fbc:	e7b5      	b.n	8006f2a <_strtod_l+0x6e2>
 8006fbe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006fc0:	9805      	ldr	r0, [sp, #20]
 8006fc2:	462a      	mov	r2, r5
 8006fc4:	f7ff f9c8 	bl	8006358 <__lshift>
 8006fc8:	901a      	str	r0, [sp, #104]	@ 0x68
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	d1d9      	bne.n	8006f82 <_strtod_l+0x73a>
 8006fce:	e65a      	b.n	8006c86 <_strtod_l+0x43e>
 8006fd0:	2e00      	cmp	r6, #0
 8006fd2:	dd07      	ble.n	8006fe4 <_strtod_l+0x79c>
 8006fd4:	4649      	mov	r1, r9
 8006fd6:	9805      	ldr	r0, [sp, #20]
 8006fd8:	4632      	mov	r2, r6
 8006fda:	f7ff f9bd 	bl	8006358 <__lshift>
 8006fde:	4681      	mov	r9, r0
 8006fe0:	2800      	cmp	r0, #0
 8006fe2:	d0d8      	beq.n	8006f96 <_strtod_l+0x74e>
 8006fe4:	2f00      	cmp	r7, #0
 8006fe6:	dd08      	ble.n	8006ffa <_strtod_l+0x7b2>
 8006fe8:	4641      	mov	r1, r8
 8006fea:	9805      	ldr	r0, [sp, #20]
 8006fec:	463a      	mov	r2, r7
 8006fee:	f7ff f9b3 	bl	8006358 <__lshift>
 8006ff2:	4680      	mov	r8, r0
 8006ff4:	2800      	cmp	r0, #0
 8006ff6:	f43f ae46 	beq.w	8006c86 <_strtod_l+0x43e>
 8006ffa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ffc:	9805      	ldr	r0, [sp, #20]
 8006ffe:	464a      	mov	r2, r9
 8007000:	f7ff fa32 	bl	8006468 <__mdiff>
 8007004:	4604      	mov	r4, r0
 8007006:	2800      	cmp	r0, #0
 8007008:	f43f ae3d 	beq.w	8006c86 <_strtod_l+0x43e>
 800700c:	68c3      	ldr	r3, [r0, #12]
 800700e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007010:	2300      	movs	r3, #0
 8007012:	60c3      	str	r3, [r0, #12]
 8007014:	4641      	mov	r1, r8
 8007016:	f7ff fa0b 	bl	8006430 <__mcmp>
 800701a:	2800      	cmp	r0, #0
 800701c:	da46      	bge.n	80070ac <_strtod_l+0x864>
 800701e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007020:	ea53 030a 	orrs.w	r3, r3, sl
 8007024:	d16c      	bne.n	8007100 <_strtod_l+0x8b8>
 8007026:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800702a:	2b00      	cmp	r3, #0
 800702c:	d168      	bne.n	8007100 <_strtod_l+0x8b8>
 800702e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007032:	0d1b      	lsrs	r3, r3, #20
 8007034:	051b      	lsls	r3, r3, #20
 8007036:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800703a:	d961      	bls.n	8007100 <_strtod_l+0x8b8>
 800703c:	6963      	ldr	r3, [r4, #20]
 800703e:	b913      	cbnz	r3, 8007046 <_strtod_l+0x7fe>
 8007040:	6923      	ldr	r3, [r4, #16]
 8007042:	2b01      	cmp	r3, #1
 8007044:	dd5c      	ble.n	8007100 <_strtod_l+0x8b8>
 8007046:	4621      	mov	r1, r4
 8007048:	2201      	movs	r2, #1
 800704a:	9805      	ldr	r0, [sp, #20]
 800704c:	f7ff f984 	bl	8006358 <__lshift>
 8007050:	4641      	mov	r1, r8
 8007052:	4604      	mov	r4, r0
 8007054:	f7ff f9ec 	bl	8006430 <__mcmp>
 8007058:	2800      	cmp	r0, #0
 800705a:	dd51      	ble.n	8007100 <_strtod_l+0x8b8>
 800705c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007060:	9a08      	ldr	r2, [sp, #32]
 8007062:	0d1b      	lsrs	r3, r3, #20
 8007064:	051b      	lsls	r3, r3, #20
 8007066:	2a00      	cmp	r2, #0
 8007068:	d06b      	beq.n	8007142 <_strtod_l+0x8fa>
 800706a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800706e:	d868      	bhi.n	8007142 <_strtod_l+0x8fa>
 8007070:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007074:	f67f ae9d 	bls.w	8006db2 <_strtod_l+0x56a>
 8007078:	4b0a      	ldr	r3, [pc, #40]	@ (80070a4 <_strtod_l+0x85c>)
 800707a:	4650      	mov	r0, sl
 800707c:	4659      	mov	r1, fp
 800707e:	2200      	movs	r2, #0
 8007080:	f7f9 fac2 	bl	8000608 <__aeabi_dmul>
 8007084:	4b08      	ldr	r3, [pc, #32]	@ (80070a8 <_strtod_l+0x860>)
 8007086:	400b      	ands	r3, r1
 8007088:	4682      	mov	sl, r0
 800708a:	468b      	mov	fp, r1
 800708c:	2b00      	cmp	r3, #0
 800708e:	f47f ae05 	bne.w	8006c9c <_strtod_l+0x454>
 8007092:	9a05      	ldr	r2, [sp, #20]
 8007094:	2322      	movs	r3, #34	@ 0x22
 8007096:	6013      	str	r3, [r2, #0]
 8007098:	e600      	b.n	8006c9c <_strtod_l+0x454>
 800709a:	bf00      	nop
 800709c:	0800d7b0 	.word	0x0800d7b0
 80070a0:	fffffc02 	.word	0xfffffc02
 80070a4:	39500000 	.word	0x39500000
 80070a8:	7ff00000 	.word	0x7ff00000
 80070ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80070b0:	d165      	bne.n	800717e <_strtod_l+0x936>
 80070b2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80070b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80070b8:	b35a      	cbz	r2, 8007112 <_strtod_l+0x8ca>
 80070ba:	4a9f      	ldr	r2, [pc, #636]	@ (8007338 <_strtod_l+0xaf0>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d12b      	bne.n	8007118 <_strtod_l+0x8d0>
 80070c0:	9b08      	ldr	r3, [sp, #32]
 80070c2:	4651      	mov	r1, sl
 80070c4:	b303      	cbz	r3, 8007108 <_strtod_l+0x8c0>
 80070c6:	4b9d      	ldr	r3, [pc, #628]	@ (800733c <_strtod_l+0xaf4>)
 80070c8:	465a      	mov	r2, fp
 80070ca:	4013      	ands	r3, r2
 80070cc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80070d0:	f04f 32ff 	mov.w	r2, #4294967295
 80070d4:	d81b      	bhi.n	800710e <_strtod_l+0x8c6>
 80070d6:	0d1b      	lsrs	r3, r3, #20
 80070d8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80070dc:	fa02 f303 	lsl.w	r3, r2, r3
 80070e0:	4299      	cmp	r1, r3
 80070e2:	d119      	bne.n	8007118 <_strtod_l+0x8d0>
 80070e4:	4b96      	ldr	r3, [pc, #600]	@ (8007340 <_strtod_l+0xaf8>)
 80070e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d102      	bne.n	80070f2 <_strtod_l+0x8aa>
 80070ec:	3101      	adds	r1, #1
 80070ee:	f43f adca 	beq.w	8006c86 <_strtod_l+0x43e>
 80070f2:	4b92      	ldr	r3, [pc, #584]	@ (800733c <_strtod_l+0xaf4>)
 80070f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80070f6:	401a      	ands	r2, r3
 80070f8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80070fc:	f04f 0a00 	mov.w	sl, #0
 8007100:	9b08      	ldr	r3, [sp, #32]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1b8      	bne.n	8007078 <_strtod_l+0x830>
 8007106:	e5c9      	b.n	8006c9c <_strtod_l+0x454>
 8007108:	f04f 33ff 	mov.w	r3, #4294967295
 800710c:	e7e8      	b.n	80070e0 <_strtod_l+0x898>
 800710e:	4613      	mov	r3, r2
 8007110:	e7e6      	b.n	80070e0 <_strtod_l+0x898>
 8007112:	ea53 030a 	orrs.w	r3, r3, sl
 8007116:	d0a1      	beq.n	800705c <_strtod_l+0x814>
 8007118:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800711a:	b1db      	cbz	r3, 8007154 <_strtod_l+0x90c>
 800711c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800711e:	4213      	tst	r3, r2
 8007120:	d0ee      	beq.n	8007100 <_strtod_l+0x8b8>
 8007122:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007124:	9a08      	ldr	r2, [sp, #32]
 8007126:	4650      	mov	r0, sl
 8007128:	4659      	mov	r1, fp
 800712a:	b1bb      	cbz	r3, 800715c <_strtod_l+0x914>
 800712c:	f7ff fb6e 	bl	800680c <sulp>
 8007130:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007134:	ec53 2b10 	vmov	r2, r3, d0
 8007138:	f7f9 f8b0 	bl	800029c <__adddf3>
 800713c:	4682      	mov	sl, r0
 800713e:	468b      	mov	fp, r1
 8007140:	e7de      	b.n	8007100 <_strtod_l+0x8b8>
 8007142:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007146:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800714a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800714e:	f04f 3aff 	mov.w	sl, #4294967295
 8007152:	e7d5      	b.n	8007100 <_strtod_l+0x8b8>
 8007154:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007156:	ea13 0f0a 	tst.w	r3, sl
 800715a:	e7e1      	b.n	8007120 <_strtod_l+0x8d8>
 800715c:	f7ff fb56 	bl	800680c <sulp>
 8007160:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007164:	ec53 2b10 	vmov	r2, r3, d0
 8007168:	f7f9 f896 	bl	8000298 <__aeabi_dsub>
 800716c:	2200      	movs	r2, #0
 800716e:	2300      	movs	r3, #0
 8007170:	4682      	mov	sl, r0
 8007172:	468b      	mov	fp, r1
 8007174:	f7f9 fcb0 	bl	8000ad8 <__aeabi_dcmpeq>
 8007178:	2800      	cmp	r0, #0
 800717a:	d0c1      	beq.n	8007100 <_strtod_l+0x8b8>
 800717c:	e619      	b.n	8006db2 <_strtod_l+0x56a>
 800717e:	4641      	mov	r1, r8
 8007180:	4620      	mov	r0, r4
 8007182:	f7ff facd 	bl	8006720 <__ratio>
 8007186:	ec57 6b10 	vmov	r6, r7, d0
 800718a:	2200      	movs	r2, #0
 800718c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007190:	4630      	mov	r0, r6
 8007192:	4639      	mov	r1, r7
 8007194:	f7f9 fcb4 	bl	8000b00 <__aeabi_dcmple>
 8007198:	2800      	cmp	r0, #0
 800719a:	d06f      	beq.n	800727c <_strtod_l+0xa34>
 800719c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d17a      	bne.n	8007298 <_strtod_l+0xa50>
 80071a2:	f1ba 0f00 	cmp.w	sl, #0
 80071a6:	d158      	bne.n	800725a <_strtod_l+0xa12>
 80071a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d15a      	bne.n	8007268 <_strtod_l+0xa20>
 80071b2:	4b64      	ldr	r3, [pc, #400]	@ (8007344 <_strtod_l+0xafc>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	4630      	mov	r0, r6
 80071b8:	4639      	mov	r1, r7
 80071ba:	f7f9 fc97 	bl	8000aec <__aeabi_dcmplt>
 80071be:	2800      	cmp	r0, #0
 80071c0:	d159      	bne.n	8007276 <_strtod_l+0xa2e>
 80071c2:	4630      	mov	r0, r6
 80071c4:	4639      	mov	r1, r7
 80071c6:	4b60      	ldr	r3, [pc, #384]	@ (8007348 <_strtod_l+0xb00>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	f7f9 fa1d 	bl	8000608 <__aeabi_dmul>
 80071ce:	4606      	mov	r6, r0
 80071d0:	460f      	mov	r7, r1
 80071d2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80071d6:	9606      	str	r6, [sp, #24]
 80071d8:	9307      	str	r3, [sp, #28]
 80071da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071de:	4d57      	ldr	r5, [pc, #348]	@ (800733c <_strtod_l+0xaf4>)
 80071e0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80071e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071e6:	401d      	ands	r5, r3
 80071e8:	4b58      	ldr	r3, [pc, #352]	@ (800734c <_strtod_l+0xb04>)
 80071ea:	429d      	cmp	r5, r3
 80071ec:	f040 80b2 	bne.w	8007354 <_strtod_l+0xb0c>
 80071f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071f2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80071f6:	ec4b ab10 	vmov	d0, sl, fp
 80071fa:	f7ff f9c9 	bl	8006590 <__ulp>
 80071fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007202:	ec51 0b10 	vmov	r0, r1, d0
 8007206:	f7f9 f9ff 	bl	8000608 <__aeabi_dmul>
 800720a:	4652      	mov	r2, sl
 800720c:	465b      	mov	r3, fp
 800720e:	f7f9 f845 	bl	800029c <__adddf3>
 8007212:	460b      	mov	r3, r1
 8007214:	4949      	ldr	r1, [pc, #292]	@ (800733c <_strtod_l+0xaf4>)
 8007216:	4a4e      	ldr	r2, [pc, #312]	@ (8007350 <_strtod_l+0xb08>)
 8007218:	4019      	ands	r1, r3
 800721a:	4291      	cmp	r1, r2
 800721c:	4682      	mov	sl, r0
 800721e:	d942      	bls.n	80072a6 <_strtod_l+0xa5e>
 8007220:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007222:	4b47      	ldr	r3, [pc, #284]	@ (8007340 <_strtod_l+0xaf8>)
 8007224:	429a      	cmp	r2, r3
 8007226:	d103      	bne.n	8007230 <_strtod_l+0x9e8>
 8007228:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800722a:	3301      	adds	r3, #1
 800722c:	f43f ad2b 	beq.w	8006c86 <_strtod_l+0x43e>
 8007230:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007340 <_strtod_l+0xaf8>
 8007234:	f04f 3aff 	mov.w	sl, #4294967295
 8007238:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800723a:	9805      	ldr	r0, [sp, #20]
 800723c:	f7fe fe74 	bl	8005f28 <_Bfree>
 8007240:	9805      	ldr	r0, [sp, #20]
 8007242:	4649      	mov	r1, r9
 8007244:	f7fe fe70 	bl	8005f28 <_Bfree>
 8007248:	9805      	ldr	r0, [sp, #20]
 800724a:	4641      	mov	r1, r8
 800724c:	f7fe fe6c 	bl	8005f28 <_Bfree>
 8007250:	9805      	ldr	r0, [sp, #20]
 8007252:	4621      	mov	r1, r4
 8007254:	f7fe fe68 	bl	8005f28 <_Bfree>
 8007258:	e618      	b.n	8006e8c <_strtod_l+0x644>
 800725a:	f1ba 0f01 	cmp.w	sl, #1
 800725e:	d103      	bne.n	8007268 <_strtod_l+0xa20>
 8007260:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007262:	2b00      	cmp	r3, #0
 8007264:	f43f ada5 	beq.w	8006db2 <_strtod_l+0x56a>
 8007268:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007318 <_strtod_l+0xad0>
 800726c:	4f35      	ldr	r7, [pc, #212]	@ (8007344 <_strtod_l+0xafc>)
 800726e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007272:	2600      	movs	r6, #0
 8007274:	e7b1      	b.n	80071da <_strtod_l+0x992>
 8007276:	4f34      	ldr	r7, [pc, #208]	@ (8007348 <_strtod_l+0xb00>)
 8007278:	2600      	movs	r6, #0
 800727a:	e7aa      	b.n	80071d2 <_strtod_l+0x98a>
 800727c:	4b32      	ldr	r3, [pc, #200]	@ (8007348 <_strtod_l+0xb00>)
 800727e:	4630      	mov	r0, r6
 8007280:	4639      	mov	r1, r7
 8007282:	2200      	movs	r2, #0
 8007284:	f7f9 f9c0 	bl	8000608 <__aeabi_dmul>
 8007288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800728a:	4606      	mov	r6, r0
 800728c:	460f      	mov	r7, r1
 800728e:	2b00      	cmp	r3, #0
 8007290:	d09f      	beq.n	80071d2 <_strtod_l+0x98a>
 8007292:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007296:	e7a0      	b.n	80071da <_strtod_l+0x992>
 8007298:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007320 <_strtod_l+0xad8>
 800729c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80072a0:	ec57 6b17 	vmov	r6, r7, d7
 80072a4:	e799      	b.n	80071da <_strtod_l+0x992>
 80072a6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80072aa:	9b08      	ldr	r3, [sp, #32]
 80072ac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1c1      	bne.n	8007238 <_strtod_l+0x9f0>
 80072b4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80072b8:	0d1b      	lsrs	r3, r3, #20
 80072ba:	051b      	lsls	r3, r3, #20
 80072bc:	429d      	cmp	r5, r3
 80072be:	d1bb      	bne.n	8007238 <_strtod_l+0x9f0>
 80072c0:	4630      	mov	r0, r6
 80072c2:	4639      	mov	r1, r7
 80072c4:	f7f9 fd00 	bl	8000cc8 <__aeabi_d2lz>
 80072c8:	f7f9 f970 	bl	80005ac <__aeabi_l2d>
 80072cc:	4602      	mov	r2, r0
 80072ce:	460b      	mov	r3, r1
 80072d0:	4630      	mov	r0, r6
 80072d2:	4639      	mov	r1, r7
 80072d4:	f7f8 ffe0 	bl	8000298 <__aeabi_dsub>
 80072d8:	460b      	mov	r3, r1
 80072da:	4602      	mov	r2, r0
 80072dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80072e0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80072e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072e6:	ea46 060a 	orr.w	r6, r6, sl
 80072ea:	431e      	orrs	r6, r3
 80072ec:	d06f      	beq.n	80073ce <_strtod_l+0xb86>
 80072ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8007328 <_strtod_l+0xae0>)
 80072f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f4:	f7f9 fbfa 	bl	8000aec <__aeabi_dcmplt>
 80072f8:	2800      	cmp	r0, #0
 80072fa:	f47f accf 	bne.w	8006c9c <_strtod_l+0x454>
 80072fe:	a30c      	add	r3, pc, #48	@ (adr r3, 8007330 <_strtod_l+0xae8>)
 8007300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007304:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007308:	f7f9 fc0e 	bl	8000b28 <__aeabi_dcmpgt>
 800730c:	2800      	cmp	r0, #0
 800730e:	d093      	beq.n	8007238 <_strtod_l+0x9f0>
 8007310:	e4c4      	b.n	8006c9c <_strtod_l+0x454>
 8007312:	bf00      	nop
 8007314:	f3af 8000 	nop.w
 8007318:	00000000 	.word	0x00000000
 800731c:	bff00000 	.word	0xbff00000
 8007320:	00000000 	.word	0x00000000
 8007324:	3ff00000 	.word	0x3ff00000
 8007328:	94a03595 	.word	0x94a03595
 800732c:	3fdfffff 	.word	0x3fdfffff
 8007330:	35afe535 	.word	0x35afe535
 8007334:	3fe00000 	.word	0x3fe00000
 8007338:	000fffff 	.word	0x000fffff
 800733c:	7ff00000 	.word	0x7ff00000
 8007340:	7fefffff 	.word	0x7fefffff
 8007344:	3ff00000 	.word	0x3ff00000
 8007348:	3fe00000 	.word	0x3fe00000
 800734c:	7fe00000 	.word	0x7fe00000
 8007350:	7c9fffff 	.word	0x7c9fffff
 8007354:	9b08      	ldr	r3, [sp, #32]
 8007356:	b323      	cbz	r3, 80073a2 <_strtod_l+0xb5a>
 8007358:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800735c:	d821      	bhi.n	80073a2 <_strtod_l+0xb5a>
 800735e:	a328      	add	r3, pc, #160	@ (adr r3, 8007400 <_strtod_l+0xbb8>)
 8007360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007364:	4630      	mov	r0, r6
 8007366:	4639      	mov	r1, r7
 8007368:	f7f9 fbca 	bl	8000b00 <__aeabi_dcmple>
 800736c:	b1a0      	cbz	r0, 8007398 <_strtod_l+0xb50>
 800736e:	4639      	mov	r1, r7
 8007370:	4630      	mov	r0, r6
 8007372:	f7f9 fc21 	bl	8000bb8 <__aeabi_d2uiz>
 8007376:	2801      	cmp	r0, #1
 8007378:	bf38      	it	cc
 800737a:	2001      	movcc	r0, #1
 800737c:	f7f9 f8ca 	bl	8000514 <__aeabi_ui2d>
 8007380:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007382:	4606      	mov	r6, r0
 8007384:	460f      	mov	r7, r1
 8007386:	b9fb      	cbnz	r3, 80073c8 <_strtod_l+0xb80>
 8007388:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800738c:	9014      	str	r0, [sp, #80]	@ 0x50
 800738e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007390:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007394:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007398:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800739a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800739e:	1b5b      	subs	r3, r3, r5
 80073a0:	9311      	str	r3, [sp, #68]	@ 0x44
 80073a2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80073a6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80073aa:	f7ff f8f1 	bl	8006590 <__ulp>
 80073ae:	4650      	mov	r0, sl
 80073b0:	ec53 2b10 	vmov	r2, r3, d0
 80073b4:	4659      	mov	r1, fp
 80073b6:	f7f9 f927 	bl	8000608 <__aeabi_dmul>
 80073ba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80073be:	f7f8 ff6d 	bl	800029c <__adddf3>
 80073c2:	4682      	mov	sl, r0
 80073c4:	468b      	mov	fp, r1
 80073c6:	e770      	b.n	80072aa <_strtod_l+0xa62>
 80073c8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80073cc:	e7e0      	b.n	8007390 <_strtod_l+0xb48>
 80073ce:	a30e      	add	r3, pc, #56	@ (adr r3, 8007408 <_strtod_l+0xbc0>)
 80073d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d4:	f7f9 fb8a 	bl	8000aec <__aeabi_dcmplt>
 80073d8:	e798      	b.n	800730c <_strtod_l+0xac4>
 80073da:	2300      	movs	r3, #0
 80073dc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073de:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80073e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073e2:	6013      	str	r3, [r2, #0]
 80073e4:	f7ff ba6d 	b.w	80068c2 <_strtod_l+0x7a>
 80073e8:	2a65      	cmp	r2, #101	@ 0x65
 80073ea:	f43f ab66 	beq.w	8006aba <_strtod_l+0x272>
 80073ee:	2a45      	cmp	r2, #69	@ 0x45
 80073f0:	f43f ab63 	beq.w	8006aba <_strtod_l+0x272>
 80073f4:	2301      	movs	r3, #1
 80073f6:	f7ff bb9e 	b.w	8006b36 <_strtod_l+0x2ee>
 80073fa:	bf00      	nop
 80073fc:	f3af 8000 	nop.w
 8007400:	ffc00000 	.word	0xffc00000
 8007404:	41dfffff 	.word	0x41dfffff
 8007408:	94a03595 	.word	0x94a03595
 800740c:	3fcfffff 	.word	0x3fcfffff

08007410 <_strtod_r>:
 8007410:	4b01      	ldr	r3, [pc, #4]	@ (8007418 <_strtod_r+0x8>)
 8007412:	f7ff ba19 	b.w	8006848 <_strtod_l>
 8007416:	bf00      	nop
 8007418:	20000084 	.word	0x20000084

0800741c <__ssputs_r>:
 800741c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007420:	688e      	ldr	r6, [r1, #8]
 8007422:	461f      	mov	r7, r3
 8007424:	42be      	cmp	r6, r7
 8007426:	680b      	ldr	r3, [r1, #0]
 8007428:	4682      	mov	sl, r0
 800742a:	460c      	mov	r4, r1
 800742c:	4690      	mov	r8, r2
 800742e:	d82d      	bhi.n	800748c <__ssputs_r+0x70>
 8007430:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007434:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007438:	d026      	beq.n	8007488 <__ssputs_r+0x6c>
 800743a:	6965      	ldr	r5, [r4, #20]
 800743c:	6909      	ldr	r1, [r1, #16]
 800743e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007442:	eba3 0901 	sub.w	r9, r3, r1
 8007446:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800744a:	1c7b      	adds	r3, r7, #1
 800744c:	444b      	add	r3, r9
 800744e:	106d      	asrs	r5, r5, #1
 8007450:	429d      	cmp	r5, r3
 8007452:	bf38      	it	cc
 8007454:	461d      	movcc	r5, r3
 8007456:	0553      	lsls	r3, r2, #21
 8007458:	d527      	bpl.n	80074aa <__ssputs_r+0x8e>
 800745a:	4629      	mov	r1, r5
 800745c:	f7fe fc98 	bl	8005d90 <_malloc_r>
 8007460:	4606      	mov	r6, r0
 8007462:	b360      	cbz	r0, 80074be <__ssputs_r+0xa2>
 8007464:	6921      	ldr	r1, [r4, #16]
 8007466:	464a      	mov	r2, r9
 8007468:	f000 fa18 	bl	800789c <memcpy>
 800746c:	89a3      	ldrh	r3, [r4, #12]
 800746e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007476:	81a3      	strh	r3, [r4, #12]
 8007478:	6126      	str	r6, [r4, #16]
 800747a:	6165      	str	r5, [r4, #20]
 800747c:	444e      	add	r6, r9
 800747e:	eba5 0509 	sub.w	r5, r5, r9
 8007482:	6026      	str	r6, [r4, #0]
 8007484:	60a5      	str	r5, [r4, #8]
 8007486:	463e      	mov	r6, r7
 8007488:	42be      	cmp	r6, r7
 800748a:	d900      	bls.n	800748e <__ssputs_r+0x72>
 800748c:	463e      	mov	r6, r7
 800748e:	6820      	ldr	r0, [r4, #0]
 8007490:	4632      	mov	r2, r6
 8007492:	4641      	mov	r1, r8
 8007494:	f000 f9c6 	bl	8007824 <memmove>
 8007498:	68a3      	ldr	r3, [r4, #8]
 800749a:	1b9b      	subs	r3, r3, r6
 800749c:	60a3      	str	r3, [r4, #8]
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	4433      	add	r3, r6
 80074a2:	6023      	str	r3, [r4, #0]
 80074a4:	2000      	movs	r0, #0
 80074a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074aa:	462a      	mov	r2, r5
 80074ac:	f000 fd89 	bl	8007fc2 <_realloc_r>
 80074b0:	4606      	mov	r6, r0
 80074b2:	2800      	cmp	r0, #0
 80074b4:	d1e0      	bne.n	8007478 <__ssputs_r+0x5c>
 80074b6:	6921      	ldr	r1, [r4, #16]
 80074b8:	4650      	mov	r0, sl
 80074ba:	f7fe fbf5 	bl	8005ca8 <_free_r>
 80074be:	230c      	movs	r3, #12
 80074c0:	f8ca 3000 	str.w	r3, [sl]
 80074c4:	89a3      	ldrh	r3, [r4, #12]
 80074c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074ca:	81a3      	strh	r3, [r4, #12]
 80074cc:	f04f 30ff 	mov.w	r0, #4294967295
 80074d0:	e7e9      	b.n	80074a6 <__ssputs_r+0x8a>
	...

080074d4 <_svfiprintf_r>:
 80074d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d8:	4698      	mov	r8, r3
 80074da:	898b      	ldrh	r3, [r1, #12]
 80074dc:	061b      	lsls	r3, r3, #24
 80074de:	b09d      	sub	sp, #116	@ 0x74
 80074e0:	4607      	mov	r7, r0
 80074e2:	460d      	mov	r5, r1
 80074e4:	4614      	mov	r4, r2
 80074e6:	d510      	bpl.n	800750a <_svfiprintf_r+0x36>
 80074e8:	690b      	ldr	r3, [r1, #16]
 80074ea:	b973      	cbnz	r3, 800750a <_svfiprintf_r+0x36>
 80074ec:	2140      	movs	r1, #64	@ 0x40
 80074ee:	f7fe fc4f 	bl	8005d90 <_malloc_r>
 80074f2:	6028      	str	r0, [r5, #0]
 80074f4:	6128      	str	r0, [r5, #16]
 80074f6:	b930      	cbnz	r0, 8007506 <_svfiprintf_r+0x32>
 80074f8:	230c      	movs	r3, #12
 80074fa:	603b      	str	r3, [r7, #0]
 80074fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007500:	b01d      	add	sp, #116	@ 0x74
 8007502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007506:	2340      	movs	r3, #64	@ 0x40
 8007508:	616b      	str	r3, [r5, #20]
 800750a:	2300      	movs	r3, #0
 800750c:	9309      	str	r3, [sp, #36]	@ 0x24
 800750e:	2320      	movs	r3, #32
 8007510:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007514:	f8cd 800c 	str.w	r8, [sp, #12]
 8007518:	2330      	movs	r3, #48	@ 0x30
 800751a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80076b8 <_svfiprintf_r+0x1e4>
 800751e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007522:	f04f 0901 	mov.w	r9, #1
 8007526:	4623      	mov	r3, r4
 8007528:	469a      	mov	sl, r3
 800752a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800752e:	b10a      	cbz	r2, 8007534 <_svfiprintf_r+0x60>
 8007530:	2a25      	cmp	r2, #37	@ 0x25
 8007532:	d1f9      	bne.n	8007528 <_svfiprintf_r+0x54>
 8007534:	ebba 0b04 	subs.w	fp, sl, r4
 8007538:	d00b      	beq.n	8007552 <_svfiprintf_r+0x7e>
 800753a:	465b      	mov	r3, fp
 800753c:	4622      	mov	r2, r4
 800753e:	4629      	mov	r1, r5
 8007540:	4638      	mov	r0, r7
 8007542:	f7ff ff6b 	bl	800741c <__ssputs_r>
 8007546:	3001      	adds	r0, #1
 8007548:	f000 80a7 	beq.w	800769a <_svfiprintf_r+0x1c6>
 800754c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800754e:	445a      	add	r2, fp
 8007550:	9209      	str	r2, [sp, #36]	@ 0x24
 8007552:	f89a 3000 	ldrb.w	r3, [sl]
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 809f 	beq.w	800769a <_svfiprintf_r+0x1c6>
 800755c:	2300      	movs	r3, #0
 800755e:	f04f 32ff 	mov.w	r2, #4294967295
 8007562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007566:	f10a 0a01 	add.w	sl, sl, #1
 800756a:	9304      	str	r3, [sp, #16]
 800756c:	9307      	str	r3, [sp, #28]
 800756e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007572:	931a      	str	r3, [sp, #104]	@ 0x68
 8007574:	4654      	mov	r4, sl
 8007576:	2205      	movs	r2, #5
 8007578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800757c:	484e      	ldr	r0, [pc, #312]	@ (80076b8 <_svfiprintf_r+0x1e4>)
 800757e:	f7f8 fe2f 	bl	80001e0 <memchr>
 8007582:	9a04      	ldr	r2, [sp, #16]
 8007584:	b9d8      	cbnz	r0, 80075be <_svfiprintf_r+0xea>
 8007586:	06d0      	lsls	r0, r2, #27
 8007588:	bf44      	itt	mi
 800758a:	2320      	movmi	r3, #32
 800758c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007590:	0711      	lsls	r1, r2, #28
 8007592:	bf44      	itt	mi
 8007594:	232b      	movmi	r3, #43	@ 0x2b
 8007596:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800759a:	f89a 3000 	ldrb.w	r3, [sl]
 800759e:	2b2a      	cmp	r3, #42	@ 0x2a
 80075a0:	d015      	beq.n	80075ce <_svfiprintf_r+0xfa>
 80075a2:	9a07      	ldr	r2, [sp, #28]
 80075a4:	4654      	mov	r4, sl
 80075a6:	2000      	movs	r0, #0
 80075a8:	f04f 0c0a 	mov.w	ip, #10
 80075ac:	4621      	mov	r1, r4
 80075ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075b2:	3b30      	subs	r3, #48	@ 0x30
 80075b4:	2b09      	cmp	r3, #9
 80075b6:	d94b      	bls.n	8007650 <_svfiprintf_r+0x17c>
 80075b8:	b1b0      	cbz	r0, 80075e8 <_svfiprintf_r+0x114>
 80075ba:	9207      	str	r2, [sp, #28]
 80075bc:	e014      	b.n	80075e8 <_svfiprintf_r+0x114>
 80075be:	eba0 0308 	sub.w	r3, r0, r8
 80075c2:	fa09 f303 	lsl.w	r3, r9, r3
 80075c6:	4313      	orrs	r3, r2
 80075c8:	9304      	str	r3, [sp, #16]
 80075ca:	46a2      	mov	sl, r4
 80075cc:	e7d2      	b.n	8007574 <_svfiprintf_r+0xa0>
 80075ce:	9b03      	ldr	r3, [sp, #12]
 80075d0:	1d19      	adds	r1, r3, #4
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	9103      	str	r1, [sp, #12]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	bfbb      	ittet	lt
 80075da:	425b      	neglt	r3, r3
 80075dc:	f042 0202 	orrlt.w	r2, r2, #2
 80075e0:	9307      	strge	r3, [sp, #28]
 80075e2:	9307      	strlt	r3, [sp, #28]
 80075e4:	bfb8      	it	lt
 80075e6:	9204      	strlt	r2, [sp, #16]
 80075e8:	7823      	ldrb	r3, [r4, #0]
 80075ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80075ec:	d10a      	bne.n	8007604 <_svfiprintf_r+0x130>
 80075ee:	7863      	ldrb	r3, [r4, #1]
 80075f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80075f2:	d132      	bne.n	800765a <_svfiprintf_r+0x186>
 80075f4:	9b03      	ldr	r3, [sp, #12]
 80075f6:	1d1a      	adds	r2, r3, #4
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	9203      	str	r2, [sp, #12]
 80075fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007600:	3402      	adds	r4, #2
 8007602:	9305      	str	r3, [sp, #20]
 8007604:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80076c8 <_svfiprintf_r+0x1f4>
 8007608:	7821      	ldrb	r1, [r4, #0]
 800760a:	2203      	movs	r2, #3
 800760c:	4650      	mov	r0, sl
 800760e:	f7f8 fde7 	bl	80001e0 <memchr>
 8007612:	b138      	cbz	r0, 8007624 <_svfiprintf_r+0x150>
 8007614:	9b04      	ldr	r3, [sp, #16]
 8007616:	eba0 000a 	sub.w	r0, r0, sl
 800761a:	2240      	movs	r2, #64	@ 0x40
 800761c:	4082      	lsls	r2, r0
 800761e:	4313      	orrs	r3, r2
 8007620:	3401      	adds	r4, #1
 8007622:	9304      	str	r3, [sp, #16]
 8007624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007628:	4824      	ldr	r0, [pc, #144]	@ (80076bc <_svfiprintf_r+0x1e8>)
 800762a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800762e:	2206      	movs	r2, #6
 8007630:	f7f8 fdd6 	bl	80001e0 <memchr>
 8007634:	2800      	cmp	r0, #0
 8007636:	d036      	beq.n	80076a6 <_svfiprintf_r+0x1d2>
 8007638:	4b21      	ldr	r3, [pc, #132]	@ (80076c0 <_svfiprintf_r+0x1ec>)
 800763a:	bb1b      	cbnz	r3, 8007684 <_svfiprintf_r+0x1b0>
 800763c:	9b03      	ldr	r3, [sp, #12]
 800763e:	3307      	adds	r3, #7
 8007640:	f023 0307 	bic.w	r3, r3, #7
 8007644:	3308      	adds	r3, #8
 8007646:	9303      	str	r3, [sp, #12]
 8007648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800764a:	4433      	add	r3, r6
 800764c:	9309      	str	r3, [sp, #36]	@ 0x24
 800764e:	e76a      	b.n	8007526 <_svfiprintf_r+0x52>
 8007650:	fb0c 3202 	mla	r2, ip, r2, r3
 8007654:	460c      	mov	r4, r1
 8007656:	2001      	movs	r0, #1
 8007658:	e7a8      	b.n	80075ac <_svfiprintf_r+0xd8>
 800765a:	2300      	movs	r3, #0
 800765c:	3401      	adds	r4, #1
 800765e:	9305      	str	r3, [sp, #20]
 8007660:	4619      	mov	r1, r3
 8007662:	f04f 0c0a 	mov.w	ip, #10
 8007666:	4620      	mov	r0, r4
 8007668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800766c:	3a30      	subs	r2, #48	@ 0x30
 800766e:	2a09      	cmp	r2, #9
 8007670:	d903      	bls.n	800767a <_svfiprintf_r+0x1a6>
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0c6      	beq.n	8007604 <_svfiprintf_r+0x130>
 8007676:	9105      	str	r1, [sp, #20]
 8007678:	e7c4      	b.n	8007604 <_svfiprintf_r+0x130>
 800767a:	fb0c 2101 	mla	r1, ip, r1, r2
 800767e:	4604      	mov	r4, r0
 8007680:	2301      	movs	r3, #1
 8007682:	e7f0      	b.n	8007666 <_svfiprintf_r+0x192>
 8007684:	ab03      	add	r3, sp, #12
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	462a      	mov	r2, r5
 800768a:	4b0e      	ldr	r3, [pc, #56]	@ (80076c4 <_svfiprintf_r+0x1f0>)
 800768c:	a904      	add	r1, sp, #16
 800768e:	4638      	mov	r0, r7
 8007690:	f7fc fd46 	bl	8004120 <_printf_float>
 8007694:	1c42      	adds	r2, r0, #1
 8007696:	4606      	mov	r6, r0
 8007698:	d1d6      	bne.n	8007648 <_svfiprintf_r+0x174>
 800769a:	89ab      	ldrh	r3, [r5, #12]
 800769c:	065b      	lsls	r3, r3, #25
 800769e:	f53f af2d 	bmi.w	80074fc <_svfiprintf_r+0x28>
 80076a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076a4:	e72c      	b.n	8007500 <_svfiprintf_r+0x2c>
 80076a6:	ab03      	add	r3, sp, #12
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	462a      	mov	r2, r5
 80076ac:	4b05      	ldr	r3, [pc, #20]	@ (80076c4 <_svfiprintf_r+0x1f0>)
 80076ae:	a904      	add	r1, sp, #16
 80076b0:	4638      	mov	r0, r7
 80076b2:	f7fc ffcd 	bl	8004650 <_printf_i>
 80076b6:	e7ed      	b.n	8007694 <_svfiprintf_r+0x1c0>
 80076b8:	0800d7d8 	.word	0x0800d7d8
 80076bc:	0800d7e2 	.word	0x0800d7e2
 80076c0:	08004121 	.word	0x08004121
 80076c4:	0800741d 	.word	0x0800741d
 80076c8:	0800d7de 	.word	0x0800d7de

080076cc <__sflush_r>:
 80076cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80076d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076d4:	0716      	lsls	r6, r2, #28
 80076d6:	4605      	mov	r5, r0
 80076d8:	460c      	mov	r4, r1
 80076da:	d454      	bmi.n	8007786 <__sflush_r+0xba>
 80076dc:	684b      	ldr	r3, [r1, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	dc02      	bgt.n	80076e8 <__sflush_r+0x1c>
 80076e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	dd48      	ble.n	800777a <__sflush_r+0xae>
 80076e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076ea:	2e00      	cmp	r6, #0
 80076ec:	d045      	beq.n	800777a <__sflush_r+0xae>
 80076ee:	2300      	movs	r3, #0
 80076f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80076f4:	682f      	ldr	r7, [r5, #0]
 80076f6:	6a21      	ldr	r1, [r4, #32]
 80076f8:	602b      	str	r3, [r5, #0]
 80076fa:	d030      	beq.n	800775e <__sflush_r+0x92>
 80076fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80076fe:	89a3      	ldrh	r3, [r4, #12]
 8007700:	0759      	lsls	r1, r3, #29
 8007702:	d505      	bpl.n	8007710 <__sflush_r+0x44>
 8007704:	6863      	ldr	r3, [r4, #4]
 8007706:	1ad2      	subs	r2, r2, r3
 8007708:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800770a:	b10b      	cbz	r3, 8007710 <__sflush_r+0x44>
 800770c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800770e:	1ad2      	subs	r2, r2, r3
 8007710:	2300      	movs	r3, #0
 8007712:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007714:	6a21      	ldr	r1, [r4, #32]
 8007716:	4628      	mov	r0, r5
 8007718:	47b0      	blx	r6
 800771a:	1c43      	adds	r3, r0, #1
 800771c:	89a3      	ldrh	r3, [r4, #12]
 800771e:	d106      	bne.n	800772e <__sflush_r+0x62>
 8007720:	6829      	ldr	r1, [r5, #0]
 8007722:	291d      	cmp	r1, #29
 8007724:	d82b      	bhi.n	800777e <__sflush_r+0xb2>
 8007726:	4a2a      	ldr	r2, [pc, #168]	@ (80077d0 <__sflush_r+0x104>)
 8007728:	410a      	asrs	r2, r1
 800772a:	07d6      	lsls	r6, r2, #31
 800772c:	d427      	bmi.n	800777e <__sflush_r+0xb2>
 800772e:	2200      	movs	r2, #0
 8007730:	6062      	str	r2, [r4, #4]
 8007732:	04d9      	lsls	r1, r3, #19
 8007734:	6922      	ldr	r2, [r4, #16]
 8007736:	6022      	str	r2, [r4, #0]
 8007738:	d504      	bpl.n	8007744 <__sflush_r+0x78>
 800773a:	1c42      	adds	r2, r0, #1
 800773c:	d101      	bne.n	8007742 <__sflush_r+0x76>
 800773e:	682b      	ldr	r3, [r5, #0]
 8007740:	b903      	cbnz	r3, 8007744 <__sflush_r+0x78>
 8007742:	6560      	str	r0, [r4, #84]	@ 0x54
 8007744:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007746:	602f      	str	r7, [r5, #0]
 8007748:	b1b9      	cbz	r1, 800777a <__sflush_r+0xae>
 800774a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800774e:	4299      	cmp	r1, r3
 8007750:	d002      	beq.n	8007758 <__sflush_r+0x8c>
 8007752:	4628      	mov	r0, r5
 8007754:	f7fe faa8 	bl	8005ca8 <_free_r>
 8007758:	2300      	movs	r3, #0
 800775a:	6363      	str	r3, [r4, #52]	@ 0x34
 800775c:	e00d      	b.n	800777a <__sflush_r+0xae>
 800775e:	2301      	movs	r3, #1
 8007760:	4628      	mov	r0, r5
 8007762:	47b0      	blx	r6
 8007764:	4602      	mov	r2, r0
 8007766:	1c50      	adds	r0, r2, #1
 8007768:	d1c9      	bne.n	80076fe <__sflush_r+0x32>
 800776a:	682b      	ldr	r3, [r5, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d0c6      	beq.n	80076fe <__sflush_r+0x32>
 8007770:	2b1d      	cmp	r3, #29
 8007772:	d001      	beq.n	8007778 <__sflush_r+0xac>
 8007774:	2b16      	cmp	r3, #22
 8007776:	d11e      	bne.n	80077b6 <__sflush_r+0xea>
 8007778:	602f      	str	r7, [r5, #0]
 800777a:	2000      	movs	r0, #0
 800777c:	e022      	b.n	80077c4 <__sflush_r+0xf8>
 800777e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007782:	b21b      	sxth	r3, r3
 8007784:	e01b      	b.n	80077be <__sflush_r+0xf2>
 8007786:	690f      	ldr	r7, [r1, #16]
 8007788:	2f00      	cmp	r7, #0
 800778a:	d0f6      	beq.n	800777a <__sflush_r+0xae>
 800778c:	0793      	lsls	r3, r2, #30
 800778e:	680e      	ldr	r6, [r1, #0]
 8007790:	bf08      	it	eq
 8007792:	694b      	ldreq	r3, [r1, #20]
 8007794:	600f      	str	r7, [r1, #0]
 8007796:	bf18      	it	ne
 8007798:	2300      	movne	r3, #0
 800779a:	eba6 0807 	sub.w	r8, r6, r7
 800779e:	608b      	str	r3, [r1, #8]
 80077a0:	f1b8 0f00 	cmp.w	r8, #0
 80077a4:	dde9      	ble.n	800777a <__sflush_r+0xae>
 80077a6:	6a21      	ldr	r1, [r4, #32]
 80077a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80077aa:	4643      	mov	r3, r8
 80077ac:	463a      	mov	r2, r7
 80077ae:	4628      	mov	r0, r5
 80077b0:	47b0      	blx	r6
 80077b2:	2800      	cmp	r0, #0
 80077b4:	dc08      	bgt.n	80077c8 <__sflush_r+0xfc>
 80077b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077be:	81a3      	strh	r3, [r4, #12]
 80077c0:	f04f 30ff 	mov.w	r0, #4294967295
 80077c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077c8:	4407      	add	r7, r0
 80077ca:	eba8 0800 	sub.w	r8, r8, r0
 80077ce:	e7e7      	b.n	80077a0 <__sflush_r+0xd4>
 80077d0:	dfbffffe 	.word	0xdfbffffe

080077d4 <_fflush_r>:
 80077d4:	b538      	push	{r3, r4, r5, lr}
 80077d6:	690b      	ldr	r3, [r1, #16]
 80077d8:	4605      	mov	r5, r0
 80077da:	460c      	mov	r4, r1
 80077dc:	b913      	cbnz	r3, 80077e4 <_fflush_r+0x10>
 80077de:	2500      	movs	r5, #0
 80077e0:	4628      	mov	r0, r5
 80077e2:	bd38      	pop	{r3, r4, r5, pc}
 80077e4:	b118      	cbz	r0, 80077ee <_fflush_r+0x1a>
 80077e6:	6a03      	ldr	r3, [r0, #32]
 80077e8:	b90b      	cbnz	r3, 80077ee <_fflush_r+0x1a>
 80077ea:	f7fd faf1 	bl	8004dd0 <__sinit>
 80077ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d0f3      	beq.n	80077de <_fflush_r+0xa>
 80077f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80077f8:	07d0      	lsls	r0, r2, #31
 80077fa:	d404      	bmi.n	8007806 <_fflush_r+0x32>
 80077fc:	0599      	lsls	r1, r3, #22
 80077fe:	d402      	bmi.n	8007806 <_fflush_r+0x32>
 8007800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007802:	f7fd fbfc 	bl	8004ffe <__retarget_lock_acquire_recursive>
 8007806:	4628      	mov	r0, r5
 8007808:	4621      	mov	r1, r4
 800780a:	f7ff ff5f 	bl	80076cc <__sflush_r>
 800780e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007810:	07da      	lsls	r2, r3, #31
 8007812:	4605      	mov	r5, r0
 8007814:	d4e4      	bmi.n	80077e0 <_fflush_r+0xc>
 8007816:	89a3      	ldrh	r3, [r4, #12]
 8007818:	059b      	lsls	r3, r3, #22
 800781a:	d4e1      	bmi.n	80077e0 <_fflush_r+0xc>
 800781c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800781e:	f7fd fbef 	bl	8005000 <__retarget_lock_release_recursive>
 8007822:	e7dd      	b.n	80077e0 <_fflush_r+0xc>

08007824 <memmove>:
 8007824:	4288      	cmp	r0, r1
 8007826:	b510      	push	{r4, lr}
 8007828:	eb01 0402 	add.w	r4, r1, r2
 800782c:	d902      	bls.n	8007834 <memmove+0x10>
 800782e:	4284      	cmp	r4, r0
 8007830:	4623      	mov	r3, r4
 8007832:	d807      	bhi.n	8007844 <memmove+0x20>
 8007834:	1e43      	subs	r3, r0, #1
 8007836:	42a1      	cmp	r1, r4
 8007838:	d008      	beq.n	800784c <memmove+0x28>
 800783a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800783e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007842:	e7f8      	b.n	8007836 <memmove+0x12>
 8007844:	4402      	add	r2, r0
 8007846:	4601      	mov	r1, r0
 8007848:	428a      	cmp	r2, r1
 800784a:	d100      	bne.n	800784e <memmove+0x2a>
 800784c:	bd10      	pop	{r4, pc}
 800784e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007856:	e7f7      	b.n	8007848 <memmove+0x24>

08007858 <strncmp>:
 8007858:	b510      	push	{r4, lr}
 800785a:	b16a      	cbz	r2, 8007878 <strncmp+0x20>
 800785c:	3901      	subs	r1, #1
 800785e:	1884      	adds	r4, r0, r2
 8007860:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007864:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007868:	429a      	cmp	r2, r3
 800786a:	d103      	bne.n	8007874 <strncmp+0x1c>
 800786c:	42a0      	cmp	r0, r4
 800786e:	d001      	beq.n	8007874 <strncmp+0x1c>
 8007870:	2a00      	cmp	r2, #0
 8007872:	d1f5      	bne.n	8007860 <strncmp+0x8>
 8007874:	1ad0      	subs	r0, r2, r3
 8007876:	bd10      	pop	{r4, pc}
 8007878:	4610      	mov	r0, r2
 800787a:	e7fc      	b.n	8007876 <strncmp+0x1e>

0800787c <_sbrk_r>:
 800787c:	b538      	push	{r3, r4, r5, lr}
 800787e:	4d06      	ldr	r5, [pc, #24]	@ (8007898 <_sbrk_r+0x1c>)
 8007880:	2300      	movs	r3, #0
 8007882:	4604      	mov	r4, r0
 8007884:	4608      	mov	r0, r1
 8007886:	602b      	str	r3, [r5, #0]
 8007888:	f7fa f934 	bl	8001af4 <_sbrk>
 800788c:	1c43      	adds	r3, r0, #1
 800788e:	d102      	bne.n	8007896 <_sbrk_r+0x1a>
 8007890:	682b      	ldr	r3, [r5, #0]
 8007892:	b103      	cbz	r3, 8007896 <_sbrk_r+0x1a>
 8007894:	6023      	str	r3, [r4, #0]
 8007896:	bd38      	pop	{r3, r4, r5, pc}
 8007898:	20000600 	.word	0x20000600

0800789c <memcpy>:
 800789c:	440a      	add	r2, r1
 800789e:	4291      	cmp	r1, r2
 80078a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80078a4:	d100      	bne.n	80078a8 <memcpy+0xc>
 80078a6:	4770      	bx	lr
 80078a8:	b510      	push	{r4, lr}
 80078aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078b2:	4291      	cmp	r1, r2
 80078b4:	d1f9      	bne.n	80078aa <memcpy+0xe>
 80078b6:	bd10      	pop	{r4, pc}

080078b8 <nan>:
 80078b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80078c0 <nan+0x8>
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	00000000 	.word	0x00000000
 80078c4:	7ff80000 	.word	0x7ff80000

080078c8 <__assert_func>:
 80078c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80078ca:	4614      	mov	r4, r2
 80078cc:	461a      	mov	r2, r3
 80078ce:	4b09      	ldr	r3, [pc, #36]	@ (80078f4 <__assert_func+0x2c>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4605      	mov	r5, r0
 80078d4:	68d8      	ldr	r0, [r3, #12]
 80078d6:	b954      	cbnz	r4, 80078ee <__assert_func+0x26>
 80078d8:	4b07      	ldr	r3, [pc, #28]	@ (80078f8 <__assert_func+0x30>)
 80078da:	461c      	mov	r4, r3
 80078dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80078e0:	9100      	str	r1, [sp, #0]
 80078e2:	462b      	mov	r3, r5
 80078e4:	4905      	ldr	r1, [pc, #20]	@ (80078fc <__assert_func+0x34>)
 80078e6:	f000 fba7 	bl	8008038 <fiprintf>
 80078ea:	f000 fbb7 	bl	800805c <abort>
 80078ee:	4b04      	ldr	r3, [pc, #16]	@ (8007900 <__assert_func+0x38>)
 80078f0:	e7f4      	b.n	80078dc <__assert_func+0x14>
 80078f2:	bf00      	nop
 80078f4:	20000034 	.word	0x20000034
 80078f8:	0800d82c 	.word	0x0800d82c
 80078fc:	0800d7fe 	.word	0x0800d7fe
 8007900:	0800d7f1 	.word	0x0800d7f1

08007904 <_calloc_r>:
 8007904:	b570      	push	{r4, r5, r6, lr}
 8007906:	fba1 5402 	umull	r5, r4, r1, r2
 800790a:	b93c      	cbnz	r4, 800791c <_calloc_r+0x18>
 800790c:	4629      	mov	r1, r5
 800790e:	f7fe fa3f 	bl	8005d90 <_malloc_r>
 8007912:	4606      	mov	r6, r0
 8007914:	b928      	cbnz	r0, 8007922 <_calloc_r+0x1e>
 8007916:	2600      	movs	r6, #0
 8007918:	4630      	mov	r0, r6
 800791a:	bd70      	pop	{r4, r5, r6, pc}
 800791c:	220c      	movs	r2, #12
 800791e:	6002      	str	r2, [r0, #0]
 8007920:	e7f9      	b.n	8007916 <_calloc_r+0x12>
 8007922:	462a      	mov	r2, r5
 8007924:	4621      	mov	r1, r4
 8007926:	f7fd faec 	bl	8004f02 <memset>
 800792a:	e7f5      	b.n	8007918 <_calloc_r+0x14>

0800792c <rshift>:
 800792c:	6903      	ldr	r3, [r0, #16]
 800792e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007932:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007936:	ea4f 1261 	mov.w	r2, r1, asr #5
 800793a:	f100 0414 	add.w	r4, r0, #20
 800793e:	dd45      	ble.n	80079cc <rshift+0xa0>
 8007940:	f011 011f 	ands.w	r1, r1, #31
 8007944:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007948:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800794c:	d10c      	bne.n	8007968 <rshift+0x3c>
 800794e:	f100 0710 	add.w	r7, r0, #16
 8007952:	4629      	mov	r1, r5
 8007954:	42b1      	cmp	r1, r6
 8007956:	d334      	bcc.n	80079c2 <rshift+0x96>
 8007958:	1a9b      	subs	r3, r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	1eea      	subs	r2, r5, #3
 800795e:	4296      	cmp	r6, r2
 8007960:	bf38      	it	cc
 8007962:	2300      	movcc	r3, #0
 8007964:	4423      	add	r3, r4
 8007966:	e015      	b.n	8007994 <rshift+0x68>
 8007968:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800796c:	f1c1 0820 	rsb	r8, r1, #32
 8007970:	40cf      	lsrs	r7, r1
 8007972:	f105 0e04 	add.w	lr, r5, #4
 8007976:	46a1      	mov	r9, r4
 8007978:	4576      	cmp	r6, lr
 800797a:	46f4      	mov	ip, lr
 800797c:	d815      	bhi.n	80079aa <rshift+0x7e>
 800797e:	1a9a      	subs	r2, r3, r2
 8007980:	0092      	lsls	r2, r2, #2
 8007982:	3a04      	subs	r2, #4
 8007984:	3501      	adds	r5, #1
 8007986:	42ae      	cmp	r6, r5
 8007988:	bf38      	it	cc
 800798a:	2200      	movcc	r2, #0
 800798c:	18a3      	adds	r3, r4, r2
 800798e:	50a7      	str	r7, [r4, r2]
 8007990:	b107      	cbz	r7, 8007994 <rshift+0x68>
 8007992:	3304      	adds	r3, #4
 8007994:	1b1a      	subs	r2, r3, r4
 8007996:	42a3      	cmp	r3, r4
 8007998:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800799c:	bf08      	it	eq
 800799e:	2300      	moveq	r3, #0
 80079a0:	6102      	str	r2, [r0, #16]
 80079a2:	bf08      	it	eq
 80079a4:	6143      	streq	r3, [r0, #20]
 80079a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80079aa:	f8dc c000 	ldr.w	ip, [ip]
 80079ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80079b2:	ea4c 0707 	orr.w	r7, ip, r7
 80079b6:	f849 7b04 	str.w	r7, [r9], #4
 80079ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80079be:	40cf      	lsrs	r7, r1
 80079c0:	e7da      	b.n	8007978 <rshift+0x4c>
 80079c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80079c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80079ca:	e7c3      	b.n	8007954 <rshift+0x28>
 80079cc:	4623      	mov	r3, r4
 80079ce:	e7e1      	b.n	8007994 <rshift+0x68>

080079d0 <__hexdig_fun>:
 80079d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80079d4:	2b09      	cmp	r3, #9
 80079d6:	d802      	bhi.n	80079de <__hexdig_fun+0xe>
 80079d8:	3820      	subs	r0, #32
 80079da:	b2c0      	uxtb	r0, r0
 80079dc:	4770      	bx	lr
 80079de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80079e2:	2b05      	cmp	r3, #5
 80079e4:	d801      	bhi.n	80079ea <__hexdig_fun+0x1a>
 80079e6:	3847      	subs	r0, #71	@ 0x47
 80079e8:	e7f7      	b.n	80079da <__hexdig_fun+0xa>
 80079ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80079ee:	2b05      	cmp	r3, #5
 80079f0:	d801      	bhi.n	80079f6 <__hexdig_fun+0x26>
 80079f2:	3827      	subs	r0, #39	@ 0x27
 80079f4:	e7f1      	b.n	80079da <__hexdig_fun+0xa>
 80079f6:	2000      	movs	r0, #0
 80079f8:	4770      	bx	lr
	...

080079fc <__gethex>:
 80079fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a00:	b085      	sub	sp, #20
 8007a02:	468a      	mov	sl, r1
 8007a04:	9302      	str	r3, [sp, #8]
 8007a06:	680b      	ldr	r3, [r1, #0]
 8007a08:	9001      	str	r0, [sp, #4]
 8007a0a:	4690      	mov	r8, r2
 8007a0c:	1c9c      	adds	r4, r3, #2
 8007a0e:	46a1      	mov	r9, r4
 8007a10:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007a14:	2830      	cmp	r0, #48	@ 0x30
 8007a16:	d0fa      	beq.n	8007a0e <__gethex+0x12>
 8007a18:	eba9 0303 	sub.w	r3, r9, r3
 8007a1c:	f1a3 0b02 	sub.w	fp, r3, #2
 8007a20:	f7ff ffd6 	bl	80079d0 <__hexdig_fun>
 8007a24:	4605      	mov	r5, r0
 8007a26:	2800      	cmp	r0, #0
 8007a28:	d168      	bne.n	8007afc <__gethex+0x100>
 8007a2a:	49a0      	ldr	r1, [pc, #640]	@ (8007cac <__gethex+0x2b0>)
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	4648      	mov	r0, r9
 8007a30:	f7ff ff12 	bl	8007858 <strncmp>
 8007a34:	4607      	mov	r7, r0
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d167      	bne.n	8007b0a <__gethex+0x10e>
 8007a3a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007a3e:	4626      	mov	r6, r4
 8007a40:	f7ff ffc6 	bl	80079d0 <__hexdig_fun>
 8007a44:	2800      	cmp	r0, #0
 8007a46:	d062      	beq.n	8007b0e <__gethex+0x112>
 8007a48:	4623      	mov	r3, r4
 8007a4a:	7818      	ldrb	r0, [r3, #0]
 8007a4c:	2830      	cmp	r0, #48	@ 0x30
 8007a4e:	4699      	mov	r9, r3
 8007a50:	f103 0301 	add.w	r3, r3, #1
 8007a54:	d0f9      	beq.n	8007a4a <__gethex+0x4e>
 8007a56:	f7ff ffbb 	bl	80079d0 <__hexdig_fun>
 8007a5a:	fab0 f580 	clz	r5, r0
 8007a5e:	096d      	lsrs	r5, r5, #5
 8007a60:	f04f 0b01 	mov.w	fp, #1
 8007a64:	464a      	mov	r2, r9
 8007a66:	4616      	mov	r6, r2
 8007a68:	3201      	adds	r2, #1
 8007a6a:	7830      	ldrb	r0, [r6, #0]
 8007a6c:	f7ff ffb0 	bl	80079d0 <__hexdig_fun>
 8007a70:	2800      	cmp	r0, #0
 8007a72:	d1f8      	bne.n	8007a66 <__gethex+0x6a>
 8007a74:	498d      	ldr	r1, [pc, #564]	@ (8007cac <__gethex+0x2b0>)
 8007a76:	2201      	movs	r2, #1
 8007a78:	4630      	mov	r0, r6
 8007a7a:	f7ff feed 	bl	8007858 <strncmp>
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	d13f      	bne.n	8007b02 <__gethex+0x106>
 8007a82:	b944      	cbnz	r4, 8007a96 <__gethex+0x9a>
 8007a84:	1c74      	adds	r4, r6, #1
 8007a86:	4622      	mov	r2, r4
 8007a88:	4616      	mov	r6, r2
 8007a8a:	3201      	adds	r2, #1
 8007a8c:	7830      	ldrb	r0, [r6, #0]
 8007a8e:	f7ff ff9f 	bl	80079d0 <__hexdig_fun>
 8007a92:	2800      	cmp	r0, #0
 8007a94:	d1f8      	bne.n	8007a88 <__gethex+0x8c>
 8007a96:	1ba4      	subs	r4, r4, r6
 8007a98:	00a7      	lsls	r7, r4, #2
 8007a9a:	7833      	ldrb	r3, [r6, #0]
 8007a9c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007aa0:	2b50      	cmp	r3, #80	@ 0x50
 8007aa2:	d13e      	bne.n	8007b22 <__gethex+0x126>
 8007aa4:	7873      	ldrb	r3, [r6, #1]
 8007aa6:	2b2b      	cmp	r3, #43	@ 0x2b
 8007aa8:	d033      	beq.n	8007b12 <__gethex+0x116>
 8007aaa:	2b2d      	cmp	r3, #45	@ 0x2d
 8007aac:	d034      	beq.n	8007b18 <__gethex+0x11c>
 8007aae:	1c71      	adds	r1, r6, #1
 8007ab0:	2400      	movs	r4, #0
 8007ab2:	7808      	ldrb	r0, [r1, #0]
 8007ab4:	f7ff ff8c 	bl	80079d0 <__hexdig_fun>
 8007ab8:	1e43      	subs	r3, r0, #1
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b18      	cmp	r3, #24
 8007abe:	d830      	bhi.n	8007b22 <__gethex+0x126>
 8007ac0:	f1a0 0210 	sub.w	r2, r0, #16
 8007ac4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007ac8:	f7ff ff82 	bl	80079d0 <__hexdig_fun>
 8007acc:	f100 3cff 	add.w	ip, r0, #4294967295
 8007ad0:	fa5f fc8c 	uxtb.w	ip, ip
 8007ad4:	f1bc 0f18 	cmp.w	ip, #24
 8007ad8:	f04f 030a 	mov.w	r3, #10
 8007adc:	d91e      	bls.n	8007b1c <__gethex+0x120>
 8007ade:	b104      	cbz	r4, 8007ae2 <__gethex+0xe6>
 8007ae0:	4252      	negs	r2, r2
 8007ae2:	4417      	add	r7, r2
 8007ae4:	f8ca 1000 	str.w	r1, [sl]
 8007ae8:	b1ed      	cbz	r5, 8007b26 <__gethex+0x12a>
 8007aea:	f1bb 0f00 	cmp.w	fp, #0
 8007aee:	bf0c      	ite	eq
 8007af0:	2506      	moveq	r5, #6
 8007af2:	2500      	movne	r5, #0
 8007af4:	4628      	mov	r0, r5
 8007af6:	b005      	add	sp, #20
 8007af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007afc:	2500      	movs	r5, #0
 8007afe:	462c      	mov	r4, r5
 8007b00:	e7b0      	b.n	8007a64 <__gethex+0x68>
 8007b02:	2c00      	cmp	r4, #0
 8007b04:	d1c7      	bne.n	8007a96 <__gethex+0x9a>
 8007b06:	4627      	mov	r7, r4
 8007b08:	e7c7      	b.n	8007a9a <__gethex+0x9e>
 8007b0a:	464e      	mov	r6, r9
 8007b0c:	462f      	mov	r7, r5
 8007b0e:	2501      	movs	r5, #1
 8007b10:	e7c3      	b.n	8007a9a <__gethex+0x9e>
 8007b12:	2400      	movs	r4, #0
 8007b14:	1cb1      	adds	r1, r6, #2
 8007b16:	e7cc      	b.n	8007ab2 <__gethex+0xb6>
 8007b18:	2401      	movs	r4, #1
 8007b1a:	e7fb      	b.n	8007b14 <__gethex+0x118>
 8007b1c:	fb03 0002 	mla	r0, r3, r2, r0
 8007b20:	e7ce      	b.n	8007ac0 <__gethex+0xc4>
 8007b22:	4631      	mov	r1, r6
 8007b24:	e7de      	b.n	8007ae4 <__gethex+0xe8>
 8007b26:	eba6 0309 	sub.w	r3, r6, r9
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	4629      	mov	r1, r5
 8007b2e:	2b07      	cmp	r3, #7
 8007b30:	dc0a      	bgt.n	8007b48 <__gethex+0x14c>
 8007b32:	9801      	ldr	r0, [sp, #4]
 8007b34:	f7fe f9b8 	bl	8005ea8 <_Balloc>
 8007b38:	4604      	mov	r4, r0
 8007b3a:	b940      	cbnz	r0, 8007b4e <__gethex+0x152>
 8007b3c:	4b5c      	ldr	r3, [pc, #368]	@ (8007cb0 <__gethex+0x2b4>)
 8007b3e:	4602      	mov	r2, r0
 8007b40:	21e4      	movs	r1, #228	@ 0xe4
 8007b42:	485c      	ldr	r0, [pc, #368]	@ (8007cb4 <__gethex+0x2b8>)
 8007b44:	f7ff fec0 	bl	80078c8 <__assert_func>
 8007b48:	3101      	adds	r1, #1
 8007b4a:	105b      	asrs	r3, r3, #1
 8007b4c:	e7ef      	b.n	8007b2e <__gethex+0x132>
 8007b4e:	f100 0a14 	add.w	sl, r0, #20
 8007b52:	2300      	movs	r3, #0
 8007b54:	4655      	mov	r5, sl
 8007b56:	469b      	mov	fp, r3
 8007b58:	45b1      	cmp	r9, r6
 8007b5a:	d337      	bcc.n	8007bcc <__gethex+0x1d0>
 8007b5c:	f845 bb04 	str.w	fp, [r5], #4
 8007b60:	eba5 050a 	sub.w	r5, r5, sl
 8007b64:	10ad      	asrs	r5, r5, #2
 8007b66:	6125      	str	r5, [r4, #16]
 8007b68:	4658      	mov	r0, fp
 8007b6a:	f7fe fa8f 	bl	800608c <__hi0bits>
 8007b6e:	016d      	lsls	r5, r5, #5
 8007b70:	f8d8 6000 	ldr.w	r6, [r8]
 8007b74:	1a2d      	subs	r5, r5, r0
 8007b76:	42b5      	cmp	r5, r6
 8007b78:	dd54      	ble.n	8007c24 <__gethex+0x228>
 8007b7a:	1bad      	subs	r5, r5, r6
 8007b7c:	4629      	mov	r1, r5
 8007b7e:	4620      	mov	r0, r4
 8007b80:	f7fe fe23 	bl	80067ca <__any_on>
 8007b84:	4681      	mov	r9, r0
 8007b86:	b178      	cbz	r0, 8007ba8 <__gethex+0x1ac>
 8007b88:	1e6b      	subs	r3, r5, #1
 8007b8a:	1159      	asrs	r1, r3, #5
 8007b8c:	f003 021f 	and.w	r2, r3, #31
 8007b90:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007b94:	f04f 0901 	mov.w	r9, #1
 8007b98:	fa09 f202 	lsl.w	r2, r9, r2
 8007b9c:	420a      	tst	r2, r1
 8007b9e:	d003      	beq.n	8007ba8 <__gethex+0x1ac>
 8007ba0:	454b      	cmp	r3, r9
 8007ba2:	dc36      	bgt.n	8007c12 <__gethex+0x216>
 8007ba4:	f04f 0902 	mov.w	r9, #2
 8007ba8:	4629      	mov	r1, r5
 8007baa:	4620      	mov	r0, r4
 8007bac:	f7ff febe 	bl	800792c <rshift>
 8007bb0:	442f      	add	r7, r5
 8007bb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007bb6:	42bb      	cmp	r3, r7
 8007bb8:	da42      	bge.n	8007c40 <__gethex+0x244>
 8007bba:	9801      	ldr	r0, [sp, #4]
 8007bbc:	4621      	mov	r1, r4
 8007bbe:	f7fe f9b3 	bl	8005f28 <_Bfree>
 8007bc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	6013      	str	r3, [r2, #0]
 8007bc8:	25a3      	movs	r5, #163	@ 0xa3
 8007bca:	e793      	b.n	8007af4 <__gethex+0xf8>
 8007bcc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007bd0:	2a2e      	cmp	r2, #46	@ 0x2e
 8007bd2:	d012      	beq.n	8007bfa <__gethex+0x1fe>
 8007bd4:	2b20      	cmp	r3, #32
 8007bd6:	d104      	bne.n	8007be2 <__gethex+0x1e6>
 8007bd8:	f845 bb04 	str.w	fp, [r5], #4
 8007bdc:	f04f 0b00 	mov.w	fp, #0
 8007be0:	465b      	mov	r3, fp
 8007be2:	7830      	ldrb	r0, [r6, #0]
 8007be4:	9303      	str	r3, [sp, #12]
 8007be6:	f7ff fef3 	bl	80079d0 <__hexdig_fun>
 8007bea:	9b03      	ldr	r3, [sp, #12]
 8007bec:	f000 000f 	and.w	r0, r0, #15
 8007bf0:	4098      	lsls	r0, r3
 8007bf2:	ea4b 0b00 	orr.w	fp, fp, r0
 8007bf6:	3304      	adds	r3, #4
 8007bf8:	e7ae      	b.n	8007b58 <__gethex+0x15c>
 8007bfa:	45b1      	cmp	r9, r6
 8007bfc:	d8ea      	bhi.n	8007bd4 <__gethex+0x1d8>
 8007bfe:	492b      	ldr	r1, [pc, #172]	@ (8007cac <__gethex+0x2b0>)
 8007c00:	9303      	str	r3, [sp, #12]
 8007c02:	2201      	movs	r2, #1
 8007c04:	4630      	mov	r0, r6
 8007c06:	f7ff fe27 	bl	8007858 <strncmp>
 8007c0a:	9b03      	ldr	r3, [sp, #12]
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	d1e1      	bne.n	8007bd4 <__gethex+0x1d8>
 8007c10:	e7a2      	b.n	8007b58 <__gethex+0x15c>
 8007c12:	1ea9      	subs	r1, r5, #2
 8007c14:	4620      	mov	r0, r4
 8007c16:	f7fe fdd8 	bl	80067ca <__any_on>
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	d0c2      	beq.n	8007ba4 <__gethex+0x1a8>
 8007c1e:	f04f 0903 	mov.w	r9, #3
 8007c22:	e7c1      	b.n	8007ba8 <__gethex+0x1ac>
 8007c24:	da09      	bge.n	8007c3a <__gethex+0x23e>
 8007c26:	1b75      	subs	r5, r6, r5
 8007c28:	4621      	mov	r1, r4
 8007c2a:	9801      	ldr	r0, [sp, #4]
 8007c2c:	462a      	mov	r2, r5
 8007c2e:	f7fe fb93 	bl	8006358 <__lshift>
 8007c32:	1b7f      	subs	r7, r7, r5
 8007c34:	4604      	mov	r4, r0
 8007c36:	f100 0a14 	add.w	sl, r0, #20
 8007c3a:	f04f 0900 	mov.w	r9, #0
 8007c3e:	e7b8      	b.n	8007bb2 <__gethex+0x1b6>
 8007c40:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007c44:	42bd      	cmp	r5, r7
 8007c46:	dd6f      	ble.n	8007d28 <__gethex+0x32c>
 8007c48:	1bed      	subs	r5, r5, r7
 8007c4a:	42ae      	cmp	r6, r5
 8007c4c:	dc34      	bgt.n	8007cb8 <__gethex+0x2bc>
 8007c4e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007c52:	2b02      	cmp	r3, #2
 8007c54:	d022      	beq.n	8007c9c <__gethex+0x2a0>
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	d024      	beq.n	8007ca4 <__gethex+0x2a8>
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d115      	bne.n	8007c8a <__gethex+0x28e>
 8007c5e:	42ae      	cmp	r6, r5
 8007c60:	d113      	bne.n	8007c8a <__gethex+0x28e>
 8007c62:	2e01      	cmp	r6, #1
 8007c64:	d10b      	bne.n	8007c7e <__gethex+0x282>
 8007c66:	9a02      	ldr	r2, [sp, #8]
 8007c68:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007c6c:	6013      	str	r3, [r2, #0]
 8007c6e:	2301      	movs	r3, #1
 8007c70:	6123      	str	r3, [r4, #16]
 8007c72:	f8ca 3000 	str.w	r3, [sl]
 8007c76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c78:	2562      	movs	r5, #98	@ 0x62
 8007c7a:	601c      	str	r4, [r3, #0]
 8007c7c:	e73a      	b.n	8007af4 <__gethex+0xf8>
 8007c7e:	1e71      	subs	r1, r6, #1
 8007c80:	4620      	mov	r0, r4
 8007c82:	f7fe fda2 	bl	80067ca <__any_on>
 8007c86:	2800      	cmp	r0, #0
 8007c88:	d1ed      	bne.n	8007c66 <__gethex+0x26a>
 8007c8a:	9801      	ldr	r0, [sp, #4]
 8007c8c:	4621      	mov	r1, r4
 8007c8e:	f7fe f94b 	bl	8005f28 <_Bfree>
 8007c92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c94:	2300      	movs	r3, #0
 8007c96:	6013      	str	r3, [r2, #0]
 8007c98:	2550      	movs	r5, #80	@ 0x50
 8007c9a:	e72b      	b.n	8007af4 <__gethex+0xf8>
 8007c9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1f3      	bne.n	8007c8a <__gethex+0x28e>
 8007ca2:	e7e0      	b.n	8007c66 <__gethex+0x26a>
 8007ca4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1dd      	bne.n	8007c66 <__gethex+0x26a>
 8007caa:	e7ee      	b.n	8007c8a <__gethex+0x28e>
 8007cac:	0800d780 	.word	0x0800d780
 8007cb0:	0800d616 	.word	0x0800d616
 8007cb4:	0800d82d 	.word	0x0800d82d
 8007cb8:	1e6f      	subs	r7, r5, #1
 8007cba:	f1b9 0f00 	cmp.w	r9, #0
 8007cbe:	d130      	bne.n	8007d22 <__gethex+0x326>
 8007cc0:	b127      	cbz	r7, 8007ccc <__gethex+0x2d0>
 8007cc2:	4639      	mov	r1, r7
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	f7fe fd80 	bl	80067ca <__any_on>
 8007cca:	4681      	mov	r9, r0
 8007ccc:	117a      	asrs	r2, r7, #5
 8007cce:	2301      	movs	r3, #1
 8007cd0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007cd4:	f007 071f 	and.w	r7, r7, #31
 8007cd8:	40bb      	lsls	r3, r7
 8007cda:	4213      	tst	r3, r2
 8007cdc:	4629      	mov	r1, r5
 8007cde:	4620      	mov	r0, r4
 8007ce0:	bf18      	it	ne
 8007ce2:	f049 0902 	orrne.w	r9, r9, #2
 8007ce6:	f7ff fe21 	bl	800792c <rshift>
 8007cea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007cee:	1b76      	subs	r6, r6, r5
 8007cf0:	2502      	movs	r5, #2
 8007cf2:	f1b9 0f00 	cmp.w	r9, #0
 8007cf6:	d047      	beq.n	8007d88 <__gethex+0x38c>
 8007cf8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d015      	beq.n	8007d2c <__gethex+0x330>
 8007d00:	2b03      	cmp	r3, #3
 8007d02:	d017      	beq.n	8007d34 <__gethex+0x338>
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d109      	bne.n	8007d1c <__gethex+0x320>
 8007d08:	f019 0f02 	tst.w	r9, #2
 8007d0c:	d006      	beq.n	8007d1c <__gethex+0x320>
 8007d0e:	f8da 3000 	ldr.w	r3, [sl]
 8007d12:	ea49 0903 	orr.w	r9, r9, r3
 8007d16:	f019 0f01 	tst.w	r9, #1
 8007d1a:	d10e      	bne.n	8007d3a <__gethex+0x33e>
 8007d1c:	f045 0510 	orr.w	r5, r5, #16
 8007d20:	e032      	b.n	8007d88 <__gethex+0x38c>
 8007d22:	f04f 0901 	mov.w	r9, #1
 8007d26:	e7d1      	b.n	8007ccc <__gethex+0x2d0>
 8007d28:	2501      	movs	r5, #1
 8007d2a:	e7e2      	b.n	8007cf2 <__gethex+0x2f6>
 8007d2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d2e:	f1c3 0301 	rsb	r3, r3, #1
 8007d32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d0f0      	beq.n	8007d1c <__gethex+0x320>
 8007d3a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007d3e:	f104 0314 	add.w	r3, r4, #20
 8007d42:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007d46:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007d4a:	f04f 0c00 	mov.w	ip, #0
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d54:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007d58:	d01b      	beq.n	8007d92 <__gethex+0x396>
 8007d5a:	3201      	adds	r2, #1
 8007d5c:	6002      	str	r2, [r0, #0]
 8007d5e:	2d02      	cmp	r5, #2
 8007d60:	f104 0314 	add.w	r3, r4, #20
 8007d64:	d13c      	bne.n	8007de0 <__gethex+0x3e4>
 8007d66:	f8d8 2000 	ldr.w	r2, [r8]
 8007d6a:	3a01      	subs	r2, #1
 8007d6c:	42b2      	cmp	r2, r6
 8007d6e:	d109      	bne.n	8007d84 <__gethex+0x388>
 8007d70:	1171      	asrs	r1, r6, #5
 8007d72:	2201      	movs	r2, #1
 8007d74:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007d78:	f006 061f 	and.w	r6, r6, #31
 8007d7c:	fa02 f606 	lsl.w	r6, r2, r6
 8007d80:	421e      	tst	r6, r3
 8007d82:	d13a      	bne.n	8007dfa <__gethex+0x3fe>
 8007d84:	f045 0520 	orr.w	r5, r5, #32
 8007d88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d8a:	601c      	str	r4, [r3, #0]
 8007d8c:	9b02      	ldr	r3, [sp, #8]
 8007d8e:	601f      	str	r7, [r3, #0]
 8007d90:	e6b0      	b.n	8007af4 <__gethex+0xf8>
 8007d92:	4299      	cmp	r1, r3
 8007d94:	f843 cc04 	str.w	ip, [r3, #-4]
 8007d98:	d8d9      	bhi.n	8007d4e <__gethex+0x352>
 8007d9a:	68a3      	ldr	r3, [r4, #8]
 8007d9c:	459b      	cmp	fp, r3
 8007d9e:	db17      	blt.n	8007dd0 <__gethex+0x3d4>
 8007da0:	6861      	ldr	r1, [r4, #4]
 8007da2:	9801      	ldr	r0, [sp, #4]
 8007da4:	3101      	adds	r1, #1
 8007da6:	f7fe f87f 	bl	8005ea8 <_Balloc>
 8007daa:	4681      	mov	r9, r0
 8007dac:	b918      	cbnz	r0, 8007db6 <__gethex+0x3ba>
 8007dae:	4b1a      	ldr	r3, [pc, #104]	@ (8007e18 <__gethex+0x41c>)
 8007db0:	4602      	mov	r2, r0
 8007db2:	2184      	movs	r1, #132	@ 0x84
 8007db4:	e6c5      	b.n	8007b42 <__gethex+0x146>
 8007db6:	6922      	ldr	r2, [r4, #16]
 8007db8:	3202      	adds	r2, #2
 8007dba:	f104 010c 	add.w	r1, r4, #12
 8007dbe:	0092      	lsls	r2, r2, #2
 8007dc0:	300c      	adds	r0, #12
 8007dc2:	f7ff fd6b 	bl	800789c <memcpy>
 8007dc6:	4621      	mov	r1, r4
 8007dc8:	9801      	ldr	r0, [sp, #4]
 8007dca:	f7fe f8ad 	bl	8005f28 <_Bfree>
 8007dce:	464c      	mov	r4, r9
 8007dd0:	6923      	ldr	r3, [r4, #16]
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007dd8:	6122      	str	r2, [r4, #16]
 8007dda:	2201      	movs	r2, #1
 8007ddc:	615a      	str	r2, [r3, #20]
 8007dde:	e7be      	b.n	8007d5e <__gethex+0x362>
 8007de0:	6922      	ldr	r2, [r4, #16]
 8007de2:	455a      	cmp	r2, fp
 8007de4:	dd0b      	ble.n	8007dfe <__gethex+0x402>
 8007de6:	2101      	movs	r1, #1
 8007de8:	4620      	mov	r0, r4
 8007dea:	f7ff fd9f 	bl	800792c <rshift>
 8007dee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007df2:	3701      	adds	r7, #1
 8007df4:	42bb      	cmp	r3, r7
 8007df6:	f6ff aee0 	blt.w	8007bba <__gethex+0x1be>
 8007dfa:	2501      	movs	r5, #1
 8007dfc:	e7c2      	b.n	8007d84 <__gethex+0x388>
 8007dfe:	f016 061f 	ands.w	r6, r6, #31
 8007e02:	d0fa      	beq.n	8007dfa <__gethex+0x3fe>
 8007e04:	4453      	add	r3, sl
 8007e06:	f1c6 0620 	rsb	r6, r6, #32
 8007e0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007e0e:	f7fe f93d 	bl	800608c <__hi0bits>
 8007e12:	42b0      	cmp	r0, r6
 8007e14:	dbe7      	blt.n	8007de6 <__gethex+0x3ea>
 8007e16:	e7f0      	b.n	8007dfa <__gethex+0x3fe>
 8007e18:	0800d616 	.word	0x0800d616

08007e1c <L_shift>:
 8007e1c:	f1c2 0208 	rsb	r2, r2, #8
 8007e20:	0092      	lsls	r2, r2, #2
 8007e22:	b570      	push	{r4, r5, r6, lr}
 8007e24:	f1c2 0620 	rsb	r6, r2, #32
 8007e28:	6843      	ldr	r3, [r0, #4]
 8007e2a:	6804      	ldr	r4, [r0, #0]
 8007e2c:	fa03 f506 	lsl.w	r5, r3, r6
 8007e30:	432c      	orrs	r4, r5
 8007e32:	40d3      	lsrs	r3, r2
 8007e34:	6004      	str	r4, [r0, #0]
 8007e36:	f840 3f04 	str.w	r3, [r0, #4]!
 8007e3a:	4288      	cmp	r0, r1
 8007e3c:	d3f4      	bcc.n	8007e28 <L_shift+0xc>
 8007e3e:	bd70      	pop	{r4, r5, r6, pc}

08007e40 <__match>:
 8007e40:	b530      	push	{r4, r5, lr}
 8007e42:	6803      	ldr	r3, [r0, #0]
 8007e44:	3301      	adds	r3, #1
 8007e46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e4a:	b914      	cbnz	r4, 8007e52 <__match+0x12>
 8007e4c:	6003      	str	r3, [r0, #0]
 8007e4e:	2001      	movs	r0, #1
 8007e50:	bd30      	pop	{r4, r5, pc}
 8007e52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e56:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007e5a:	2d19      	cmp	r5, #25
 8007e5c:	bf98      	it	ls
 8007e5e:	3220      	addls	r2, #32
 8007e60:	42a2      	cmp	r2, r4
 8007e62:	d0f0      	beq.n	8007e46 <__match+0x6>
 8007e64:	2000      	movs	r0, #0
 8007e66:	e7f3      	b.n	8007e50 <__match+0x10>

08007e68 <__hexnan>:
 8007e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6c:	680b      	ldr	r3, [r1, #0]
 8007e6e:	6801      	ldr	r1, [r0, #0]
 8007e70:	115e      	asrs	r6, r3, #5
 8007e72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007e76:	f013 031f 	ands.w	r3, r3, #31
 8007e7a:	b087      	sub	sp, #28
 8007e7c:	bf18      	it	ne
 8007e7e:	3604      	addne	r6, #4
 8007e80:	2500      	movs	r5, #0
 8007e82:	1f37      	subs	r7, r6, #4
 8007e84:	4682      	mov	sl, r0
 8007e86:	4690      	mov	r8, r2
 8007e88:	9301      	str	r3, [sp, #4]
 8007e8a:	f846 5c04 	str.w	r5, [r6, #-4]
 8007e8e:	46b9      	mov	r9, r7
 8007e90:	463c      	mov	r4, r7
 8007e92:	9502      	str	r5, [sp, #8]
 8007e94:	46ab      	mov	fp, r5
 8007e96:	784a      	ldrb	r2, [r1, #1]
 8007e98:	1c4b      	adds	r3, r1, #1
 8007e9a:	9303      	str	r3, [sp, #12]
 8007e9c:	b342      	cbz	r2, 8007ef0 <__hexnan+0x88>
 8007e9e:	4610      	mov	r0, r2
 8007ea0:	9105      	str	r1, [sp, #20]
 8007ea2:	9204      	str	r2, [sp, #16]
 8007ea4:	f7ff fd94 	bl	80079d0 <__hexdig_fun>
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d151      	bne.n	8007f50 <__hexnan+0xe8>
 8007eac:	9a04      	ldr	r2, [sp, #16]
 8007eae:	9905      	ldr	r1, [sp, #20]
 8007eb0:	2a20      	cmp	r2, #32
 8007eb2:	d818      	bhi.n	8007ee6 <__hexnan+0x7e>
 8007eb4:	9b02      	ldr	r3, [sp, #8]
 8007eb6:	459b      	cmp	fp, r3
 8007eb8:	dd13      	ble.n	8007ee2 <__hexnan+0x7a>
 8007eba:	454c      	cmp	r4, r9
 8007ebc:	d206      	bcs.n	8007ecc <__hexnan+0x64>
 8007ebe:	2d07      	cmp	r5, #7
 8007ec0:	dc04      	bgt.n	8007ecc <__hexnan+0x64>
 8007ec2:	462a      	mov	r2, r5
 8007ec4:	4649      	mov	r1, r9
 8007ec6:	4620      	mov	r0, r4
 8007ec8:	f7ff ffa8 	bl	8007e1c <L_shift>
 8007ecc:	4544      	cmp	r4, r8
 8007ece:	d952      	bls.n	8007f76 <__hexnan+0x10e>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	f1a4 0904 	sub.w	r9, r4, #4
 8007ed6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007eda:	f8cd b008 	str.w	fp, [sp, #8]
 8007ede:	464c      	mov	r4, r9
 8007ee0:	461d      	mov	r5, r3
 8007ee2:	9903      	ldr	r1, [sp, #12]
 8007ee4:	e7d7      	b.n	8007e96 <__hexnan+0x2e>
 8007ee6:	2a29      	cmp	r2, #41	@ 0x29
 8007ee8:	d157      	bne.n	8007f9a <__hexnan+0x132>
 8007eea:	3102      	adds	r1, #2
 8007eec:	f8ca 1000 	str.w	r1, [sl]
 8007ef0:	f1bb 0f00 	cmp.w	fp, #0
 8007ef4:	d051      	beq.n	8007f9a <__hexnan+0x132>
 8007ef6:	454c      	cmp	r4, r9
 8007ef8:	d206      	bcs.n	8007f08 <__hexnan+0xa0>
 8007efa:	2d07      	cmp	r5, #7
 8007efc:	dc04      	bgt.n	8007f08 <__hexnan+0xa0>
 8007efe:	462a      	mov	r2, r5
 8007f00:	4649      	mov	r1, r9
 8007f02:	4620      	mov	r0, r4
 8007f04:	f7ff ff8a 	bl	8007e1c <L_shift>
 8007f08:	4544      	cmp	r4, r8
 8007f0a:	d936      	bls.n	8007f7a <__hexnan+0x112>
 8007f0c:	f1a8 0204 	sub.w	r2, r8, #4
 8007f10:	4623      	mov	r3, r4
 8007f12:	f853 1b04 	ldr.w	r1, [r3], #4
 8007f16:	f842 1f04 	str.w	r1, [r2, #4]!
 8007f1a:	429f      	cmp	r7, r3
 8007f1c:	d2f9      	bcs.n	8007f12 <__hexnan+0xaa>
 8007f1e:	1b3b      	subs	r3, r7, r4
 8007f20:	f023 0303 	bic.w	r3, r3, #3
 8007f24:	3304      	adds	r3, #4
 8007f26:	3401      	adds	r4, #1
 8007f28:	3e03      	subs	r6, #3
 8007f2a:	42b4      	cmp	r4, r6
 8007f2c:	bf88      	it	hi
 8007f2e:	2304      	movhi	r3, #4
 8007f30:	4443      	add	r3, r8
 8007f32:	2200      	movs	r2, #0
 8007f34:	f843 2b04 	str.w	r2, [r3], #4
 8007f38:	429f      	cmp	r7, r3
 8007f3a:	d2fb      	bcs.n	8007f34 <__hexnan+0xcc>
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	b91b      	cbnz	r3, 8007f48 <__hexnan+0xe0>
 8007f40:	4547      	cmp	r7, r8
 8007f42:	d128      	bne.n	8007f96 <__hexnan+0x12e>
 8007f44:	2301      	movs	r3, #1
 8007f46:	603b      	str	r3, [r7, #0]
 8007f48:	2005      	movs	r0, #5
 8007f4a:	b007      	add	sp, #28
 8007f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f50:	3501      	adds	r5, #1
 8007f52:	2d08      	cmp	r5, #8
 8007f54:	f10b 0b01 	add.w	fp, fp, #1
 8007f58:	dd06      	ble.n	8007f68 <__hexnan+0x100>
 8007f5a:	4544      	cmp	r4, r8
 8007f5c:	d9c1      	bls.n	8007ee2 <__hexnan+0x7a>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f64:	2501      	movs	r5, #1
 8007f66:	3c04      	subs	r4, #4
 8007f68:	6822      	ldr	r2, [r4, #0]
 8007f6a:	f000 000f 	and.w	r0, r0, #15
 8007f6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007f72:	6020      	str	r0, [r4, #0]
 8007f74:	e7b5      	b.n	8007ee2 <__hexnan+0x7a>
 8007f76:	2508      	movs	r5, #8
 8007f78:	e7b3      	b.n	8007ee2 <__hexnan+0x7a>
 8007f7a:	9b01      	ldr	r3, [sp, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d0dd      	beq.n	8007f3c <__hexnan+0xd4>
 8007f80:	f1c3 0320 	rsb	r3, r3, #32
 8007f84:	f04f 32ff 	mov.w	r2, #4294967295
 8007f88:	40da      	lsrs	r2, r3
 8007f8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007f8e:	4013      	ands	r3, r2
 8007f90:	f846 3c04 	str.w	r3, [r6, #-4]
 8007f94:	e7d2      	b.n	8007f3c <__hexnan+0xd4>
 8007f96:	3f04      	subs	r7, #4
 8007f98:	e7d0      	b.n	8007f3c <__hexnan+0xd4>
 8007f9a:	2004      	movs	r0, #4
 8007f9c:	e7d5      	b.n	8007f4a <__hexnan+0xe2>

08007f9e <__ascii_mbtowc>:
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	b901      	cbnz	r1, 8007fa4 <__ascii_mbtowc+0x6>
 8007fa2:	a901      	add	r1, sp, #4
 8007fa4:	b142      	cbz	r2, 8007fb8 <__ascii_mbtowc+0x1a>
 8007fa6:	b14b      	cbz	r3, 8007fbc <__ascii_mbtowc+0x1e>
 8007fa8:	7813      	ldrb	r3, [r2, #0]
 8007faa:	600b      	str	r3, [r1, #0]
 8007fac:	7812      	ldrb	r2, [r2, #0]
 8007fae:	1e10      	subs	r0, r2, #0
 8007fb0:	bf18      	it	ne
 8007fb2:	2001      	movne	r0, #1
 8007fb4:	b002      	add	sp, #8
 8007fb6:	4770      	bx	lr
 8007fb8:	4610      	mov	r0, r2
 8007fba:	e7fb      	b.n	8007fb4 <__ascii_mbtowc+0x16>
 8007fbc:	f06f 0001 	mvn.w	r0, #1
 8007fc0:	e7f8      	b.n	8007fb4 <__ascii_mbtowc+0x16>

08007fc2 <_realloc_r>:
 8007fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fc6:	4680      	mov	r8, r0
 8007fc8:	4615      	mov	r5, r2
 8007fca:	460c      	mov	r4, r1
 8007fcc:	b921      	cbnz	r1, 8007fd8 <_realloc_r+0x16>
 8007fce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fd2:	4611      	mov	r1, r2
 8007fd4:	f7fd bedc 	b.w	8005d90 <_malloc_r>
 8007fd8:	b92a      	cbnz	r2, 8007fe6 <_realloc_r+0x24>
 8007fda:	f7fd fe65 	bl	8005ca8 <_free_r>
 8007fde:	2400      	movs	r4, #0
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fe6:	f000 f840 	bl	800806a <_malloc_usable_size_r>
 8007fea:	4285      	cmp	r5, r0
 8007fec:	4606      	mov	r6, r0
 8007fee:	d802      	bhi.n	8007ff6 <_realloc_r+0x34>
 8007ff0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007ff4:	d8f4      	bhi.n	8007fe0 <_realloc_r+0x1e>
 8007ff6:	4629      	mov	r1, r5
 8007ff8:	4640      	mov	r0, r8
 8007ffa:	f7fd fec9 	bl	8005d90 <_malloc_r>
 8007ffe:	4607      	mov	r7, r0
 8008000:	2800      	cmp	r0, #0
 8008002:	d0ec      	beq.n	8007fde <_realloc_r+0x1c>
 8008004:	42b5      	cmp	r5, r6
 8008006:	462a      	mov	r2, r5
 8008008:	4621      	mov	r1, r4
 800800a:	bf28      	it	cs
 800800c:	4632      	movcs	r2, r6
 800800e:	f7ff fc45 	bl	800789c <memcpy>
 8008012:	4621      	mov	r1, r4
 8008014:	4640      	mov	r0, r8
 8008016:	f7fd fe47 	bl	8005ca8 <_free_r>
 800801a:	463c      	mov	r4, r7
 800801c:	e7e0      	b.n	8007fe0 <_realloc_r+0x1e>

0800801e <__ascii_wctomb>:
 800801e:	4603      	mov	r3, r0
 8008020:	4608      	mov	r0, r1
 8008022:	b141      	cbz	r1, 8008036 <__ascii_wctomb+0x18>
 8008024:	2aff      	cmp	r2, #255	@ 0xff
 8008026:	d904      	bls.n	8008032 <__ascii_wctomb+0x14>
 8008028:	228a      	movs	r2, #138	@ 0x8a
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	f04f 30ff 	mov.w	r0, #4294967295
 8008030:	4770      	bx	lr
 8008032:	700a      	strb	r2, [r1, #0]
 8008034:	2001      	movs	r0, #1
 8008036:	4770      	bx	lr

08008038 <fiprintf>:
 8008038:	b40e      	push	{r1, r2, r3}
 800803a:	b503      	push	{r0, r1, lr}
 800803c:	4601      	mov	r1, r0
 800803e:	ab03      	add	r3, sp, #12
 8008040:	4805      	ldr	r0, [pc, #20]	@ (8008058 <fiprintf+0x20>)
 8008042:	f853 2b04 	ldr.w	r2, [r3], #4
 8008046:	6800      	ldr	r0, [r0, #0]
 8008048:	9301      	str	r3, [sp, #4]
 800804a:	f000 f83f 	bl	80080cc <_vfiprintf_r>
 800804e:	b002      	add	sp, #8
 8008050:	f85d eb04 	ldr.w	lr, [sp], #4
 8008054:	b003      	add	sp, #12
 8008056:	4770      	bx	lr
 8008058:	20000034 	.word	0x20000034

0800805c <abort>:
 800805c:	b508      	push	{r3, lr}
 800805e:	2006      	movs	r0, #6
 8008060:	f000 fa08 	bl	8008474 <raise>
 8008064:	2001      	movs	r0, #1
 8008066:	f7f9 fd15 	bl	8001a94 <_exit>

0800806a <_malloc_usable_size_r>:
 800806a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800806e:	1f18      	subs	r0, r3, #4
 8008070:	2b00      	cmp	r3, #0
 8008072:	bfbc      	itt	lt
 8008074:	580b      	ldrlt	r3, [r1, r0]
 8008076:	18c0      	addlt	r0, r0, r3
 8008078:	4770      	bx	lr

0800807a <__sfputc_r>:
 800807a:	6893      	ldr	r3, [r2, #8]
 800807c:	3b01      	subs	r3, #1
 800807e:	2b00      	cmp	r3, #0
 8008080:	b410      	push	{r4}
 8008082:	6093      	str	r3, [r2, #8]
 8008084:	da08      	bge.n	8008098 <__sfputc_r+0x1e>
 8008086:	6994      	ldr	r4, [r2, #24]
 8008088:	42a3      	cmp	r3, r4
 800808a:	db01      	blt.n	8008090 <__sfputc_r+0x16>
 800808c:	290a      	cmp	r1, #10
 800808e:	d103      	bne.n	8008098 <__sfputc_r+0x1e>
 8008090:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008094:	f000 b932 	b.w	80082fc <__swbuf_r>
 8008098:	6813      	ldr	r3, [r2, #0]
 800809a:	1c58      	adds	r0, r3, #1
 800809c:	6010      	str	r0, [r2, #0]
 800809e:	7019      	strb	r1, [r3, #0]
 80080a0:	4608      	mov	r0, r1
 80080a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <__sfputs_r>:
 80080a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080aa:	4606      	mov	r6, r0
 80080ac:	460f      	mov	r7, r1
 80080ae:	4614      	mov	r4, r2
 80080b0:	18d5      	adds	r5, r2, r3
 80080b2:	42ac      	cmp	r4, r5
 80080b4:	d101      	bne.n	80080ba <__sfputs_r+0x12>
 80080b6:	2000      	movs	r0, #0
 80080b8:	e007      	b.n	80080ca <__sfputs_r+0x22>
 80080ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080be:	463a      	mov	r2, r7
 80080c0:	4630      	mov	r0, r6
 80080c2:	f7ff ffda 	bl	800807a <__sfputc_r>
 80080c6:	1c43      	adds	r3, r0, #1
 80080c8:	d1f3      	bne.n	80080b2 <__sfputs_r+0xa>
 80080ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080080cc <_vfiprintf_r>:
 80080cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d0:	460d      	mov	r5, r1
 80080d2:	b09d      	sub	sp, #116	@ 0x74
 80080d4:	4614      	mov	r4, r2
 80080d6:	4698      	mov	r8, r3
 80080d8:	4606      	mov	r6, r0
 80080da:	b118      	cbz	r0, 80080e4 <_vfiprintf_r+0x18>
 80080dc:	6a03      	ldr	r3, [r0, #32]
 80080de:	b90b      	cbnz	r3, 80080e4 <_vfiprintf_r+0x18>
 80080e0:	f7fc fe76 	bl	8004dd0 <__sinit>
 80080e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080e6:	07d9      	lsls	r1, r3, #31
 80080e8:	d405      	bmi.n	80080f6 <_vfiprintf_r+0x2a>
 80080ea:	89ab      	ldrh	r3, [r5, #12]
 80080ec:	059a      	lsls	r2, r3, #22
 80080ee:	d402      	bmi.n	80080f6 <_vfiprintf_r+0x2a>
 80080f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080f2:	f7fc ff84 	bl	8004ffe <__retarget_lock_acquire_recursive>
 80080f6:	89ab      	ldrh	r3, [r5, #12]
 80080f8:	071b      	lsls	r3, r3, #28
 80080fa:	d501      	bpl.n	8008100 <_vfiprintf_r+0x34>
 80080fc:	692b      	ldr	r3, [r5, #16]
 80080fe:	b99b      	cbnz	r3, 8008128 <_vfiprintf_r+0x5c>
 8008100:	4629      	mov	r1, r5
 8008102:	4630      	mov	r0, r6
 8008104:	f000 f938 	bl	8008378 <__swsetup_r>
 8008108:	b170      	cbz	r0, 8008128 <_vfiprintf_r+0x5c>
 800810a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800810c:	07dc      	lsls	r4, r3, #31
 800810e:	d504      	bpl.n	800811a <_vfiprintf_r+0x4e>
 8008110:	f04f 30ff 	mov.w	r0, #4294967295
 8008114:	b01d      	add	sp, #116	@ 0x74
 8008116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800811a:	89ab      	ldrh	r3, [r5, #12]
 800811c:	0598      	lsls	r0, r3, #22
 800811e:	d4f7      	bmi.n	8008110 <_vfiprintf_r+0x44>
 8008120:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008122:	f7fc ff6d 	bl	8005000 <__retarget_lock_release_recursive>
 8008126:	e7f3      	b.n	8008110 <_vfiprintf_r+0x44>
 8008128:	2300      	movs	r3, #0
 800812a:	9309      	str	r3, [sp, #36]	@ 0x24
 800812c:	2320      	movs	r3, #32
 800812e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008132:	f8cd 800c 	str.w	r8, [sp, #12]
 8008136:	2330      	movs	r3, #48	@ 0x30
 8008138:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80082e8 <_vfiprintf_r+0x21c>
 800813c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008140:	f04f 0901 	mov.w	r9, #1
 8008144:	4623      	mov	r3, r4
 8008146:	469a      	mov	sl, r3
 8008148:	f813 2b01 	ldrb.w	r2, [r3], #1
 800814c:	b10a      	cbz	r2, 8008152 <_vfiprintf_r+0x86>
 800814e:	2a25      	cmp	r2, #37	@ 0x25
 8008150:	d1f9      	bne.n	8008146 <_vfiprintf_r+0x7a>
 8008152:	ebba 0b04 	subs.w	fp, sl, r4
 8008156:	d00b      	beq.n	8008170 <_vfiprintf_r+0xa4>
 8008158:	465b      	mov	r3, fp
 800815a:	4622      	mov	r2, r4
 800815c:	4629      	mov	r1, r5
 800815e:	4630      	mov	r0, r6
 8008160:	f7ff ffa2 	bl	80080a8 <__sfputs_r>
 8008164:	3001      	adds	r0, #1
 8008166:	f000 80a7 	beq.w	80082b8 <_vfiprintf_r+0x1ec>
 800816a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800816c:	445a      	add	r2, fp
 800816e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008170:	f89a 3000 	ldrb.w	r3, [sl]
 8008174:	2b00      	cmp	r3, #0
 8008176:	f000 809f 	beq.w	80082b8 <_vfiprintf_r+0x1ec>
 800817a:	2300      	movs	r3, #0
 800817c:	f04f 32ff 	mov.w	r2, #4294967295
 8008180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008184:	f10a 0a01 	add.w	sl, sl, #1
 8008188:	9304      	str	r3, [sp, #16]
 800818a:	9307      	str	r3, [sp, #28]
 800818c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008190:	931a      	str	r3, [sp, #104]	@ 0x68
 8008192:	4654      	mov	r4, sl
 8008194:	2205      	movs	r2, #5
 8008196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800819a:	4853      	ldr	r0, [pc, #332]	@ (80082e8 <_vfiprintf_r+0x21c>)
 800819c:	f7f8 f820 	bl	80001e0 <memchr>
 80081a0:	9a04      	ldr	r2, [sp, #16]
 80081a2:	b9d8      	cbnz	r0, 80081dc <_vfiprintf_r+0x110>
 80081a4:	06d1      	lsls	r1, r2, #27
 80081a6:	bf44      	itt	mi
 80081a8:	2320      	movmi	r3, #32
 80081aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081ae:	0713      	lsls	r3, r2, #28
 80081b0:	bf44      	itt	mi
 80081b2:	232b      	movmi	r3, #43	@ 0x2b
 80081b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80081b8:	f89a 3000 	ldrb.w	r3, [sl]
 80081bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80081be:	d015      	beq.n	80081ec <_vfiprintf_r+0x120>
 80081c0:	9a07      	ldr	r2, [sp, #28]
 80081c2:	4654      	mov	r4, sl
 80081c4:	2000      	movs	r0, #0
 80081c6:	f04f 0c0a 	mov.w	ip, #10
 80081ca:	4621      	mov	r1, r4
 80081cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081d0:	3b30      	subs	r3, #48	@ 0x30
 80081d2:	2b09      	cmp	r3, #9
 80081d4:	d94b      	bls.n	800826e <_vfiprintf_r+0x1a2>
 80081d6:	b1b0      	cbz	r0, 8008206 <_vfiprintf_r+0x13a>
 80081d8:	9207      	str	r2, [sp, #28]
 80081da:	e014      	b.n	8008206 <_vfiprintf_r+0x13a>
 80081dc:	eba0 0308 	sub.w	r3, r0, r8
 80081e0:	fa09 f303 	lsl.w	r3, r9, r3
 80081e4:	4313      	orrs	r3, r2
 80081e6:	9304      	str	r3, [sp, #16]
 80081e8:	46a2      	mov	sl, r4
 80081ea:	e7d2      	b.n	8008192 <_vfiprintf_r+0xc6>
 80081ec:	9b03      	ldr	r3, [sp, #12]
 80081ee:	1d19      	adds	r1, r3, #4
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	9103      	str	r1, [sp, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	bfbb      	ittet	lt
 80081f8:	425b      	neglt	r3, r3
 80081fa:	f042 0202 	orrlt.w	r2, r2, #2
 80081fe:	9307      	strge	r3, [sp, #28]
 8008200:	9307      	strlt	r3, [sp, #28]
 8008202:	bfb8      	it	lt
 8008204:	9204      	strlt	r2, [sp, #16]
 8008206:	7823      	ldrb	r3, [r4, #0]
 8008208:	2b2e      	cmp	r3, #46	@ 0x2e
 800820a:	d10a      	bne.n	8008222 <_vfiprintf_r+0x156>
 800820c:	7863      	ldrb	r3, [r4, #1]
 800820e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008210:	d132      	bne.n	8008278 <_vfiprintf_r+0x1ac>
 8008212:	9b03      	ldr	r3, [sp, #12]
 8008214:	1d1a      	adds	r2, r3, #4
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	9203      	str	r2, [sp, #12]
 800821a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800821e:	3402      	adds	r4, #2
 8008220:	9305      	str	r3, [sp, #20]
 8008222:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80082f8 <_vfiprintf_r+0x22c>
 8008226:	7821      	ldrb	r1, [r4, #0]
 8008228:	2203      	movs	r2, #3
 800822a:	4650      	mov	r0, sl
 800822c:	f7f7 ffd8 	bl	80001e0 <memchr>
 8008230:	b138      	cbz	r0, 8008242 <_vfiprintf_r+0x176>
 8008232:	9b04      	ldr	r3, [sp, #16]
 8008234:	eba0 000a 	sub.w	r0, r0, sl
 8008238:	2240      	movs	r2, #64	@ 0x40
 800823a:	4082      	lsls	r2, r0
 800823c:	4313      	orrs	r3, r2
 800823e:	3401      	adds	r4, #1
 8008240:	9304      	str	r3, [sp, #16]
 8008242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008246:	4829      	ldr	r0, [pc, #164]	@ (80082ec <_vfiprintf_r+0x220>)
 8008248:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800824c:	2206      	movs	r2, #6
 800824e:	f7f7 ffc7 	bl	80001e0 <memchr>
 8008252:	2800      	cmp	r0, #0
 8008254:	d03f      	beq.n	80082d6 <_vfiprintf_r+0x20a>
 8008256:	4b26      	ldr	r3, [pc, #152]	@ (80082f0 <_vfiprintf_r+0x224>)
 8008258:	bb1b      	cbnz	r3, 80082a2 <_vfiprintf_r+0x1d6>
 800825a:	9b03      	ldr	r3, [sp, #12]
 800825c:	3307      	adds	r3, #7
 800825e:	f023 0307 	bic.w	r3, r3, #7
 8008262:	3308      	adds	r3, #8
 8008264:	9303      	str	r3, [sp, #12]
 8008266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008268:	443b      	add	r3, r7
 800826a:	9309      	str	r3, [sp, #36]	@ 0x24
 800826c:	e76a      	b.n	8008144 <_vfiprintf_r+0x78>
 800826e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008272:	460c      	mov	r4, r1
 8008274:	2001      	movs	r0, #1
 8008276:	e7a8      	b.n	80081ca <_vfiprintf_r+0xfe>
 8008278:	2300      	movs	r3, #0
 800827a:	3401      	adds	r4, #1
 800827c:	9305      	str	r3, [sp, #20]
 800827e:	4619      	mov	r1, r3
 8008280:	f04f 0c0a 	mov.w	ip, #10
 8008284:	4620      	mov	r0, r4
 8008286:	f810 2b01 	ldrb.w	r2, [r0], #1
 800828a:	3a30      	subs	r2, #48	@ 0x30
 800828c:	2a09      	cmp	r2, #9
 800828e:	d903      	bls.n	8008298 <_vfiprintf_r+0x1cc>
 8008290:	2b00      	cmp	r3, #0
 8008292:	d0c6      	beq.n	8008222 <_vfiprintf_r+0x156>
 8008294:	9105      	str	r1, [sp, #20]
 8008296:	e7c4      	b.n	8008222 <_vfiprintf_r+0x156>
 8008298:	fb0c 2101 	mla	r1, ip, r1, r2
 800829c:	4604      	mov	r4, r0
 800829e:	2301      	movs	r3, #1
 80082a0:	e7f0      	b.n	8008284 <_vfiprintf_r+0x1b8>
 80082a2:	ab03      	add	r3, sp, #12
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	462a      	mov	r2, r5
 80082a8:	4b12      	ldr	r3, [pc, #72]	@ (80082f4 <_vfiprintf_r+0x228>)
 80082aa:	a904      	add	r1, sp, #16
 80082ac:	4630      	mov	r0, r6
 80082ae:	f7fb ff37 	bl	8004120 <_printf_float>
 80082b2:	4607      	mov	r7, r0
 80082b4:	1c78      	adds	r0, r7, #1
 80082b6:	d1d6      	bne.n	8008266 <_vfiprintf_r+0x19a>
 80082b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082ba:	07d9      	lsls	r1, r3, #31
 80082bc:	d405      	bmi.n	80082ca <_vfiprintf_r+0x1fe>
 80082be:	89ab      	ldrh	r3, [r5, #12]
 80082c0:	059a      	lsls	r2, r3, #22
 80082c2:	d402      	bmi.n	80082ca <_vfiprintf_r+0x1fe>
 80082c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082c6:	f7fc fe9b 	bl	8005000 <__retarget_lock_release_recursive>
 80082ca:	89ab      	ldrh	r3, [r5, #12]
 80082cc:	065b      	lsls	r3, r3, #25
 80082ce:	f53f af1f 	bmi.w	8008110 <_vfiprintf_r+0x44>
 80082d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80082d4:	e71e      	b.n	8008114 <_vfiprintf_r+0x48>
 80082d6:	ab03      	add	r3, sp, #12
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	462a      	mov	r2, r5
 80082dc:	4b05      	ldr	r3, [pc, #20]	@ (80082f4 <_vfiprintf_r+0x228>)
 80082de:	a904      	add	r1, sp, #16
 80082e0:	4630      	mov	r0, r6
 80082e2:	f7fc f9b5 	bl	8004650 <_printf_i>
 80082e6:	e7e4      	b.n	80082b2 <_vfiprintf_r+0x1e6>
 80082e8:	0800d7d8 	.word	0x0800d7d8
 80082ec:	0800d7e2 	.word	0x0800d7e2
 80082f0:	08004121 	.word	0x08004121
 80082f4:	080080a9 	.word	0x080080a9
 80082f8:	0800d7de 	.word	0x0800d7de

080082fc <__swbuf_r>:
 80082fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fe:	460e      	mov	r6, r1
 8008300:	4614      	mov	r4, r2
 8008302:	4605      	mov	r5, r0
 8008304:	b118      	cbz	r0, 800830e <__swbuf_r+0x12>
 8008306:	6a03      	ldr	r3, [r0, #32]
 8008308:	b90b      	cbnz	r3, 800830e <__swbuf_r+0x12>
 800830a:	f7fc fd61 	bl	8004dd0 <__sinit>
 800830e:	69a3      	ldr	r3, [r4, #24]
 8008310:	60a3      	str	r3, [r4, #8]
 8008312:	89a3      	ldrh	r3, [r4, #12]
 8008314:	071a      	lsls	r2, r3, #28
 8008316:	d501      	bpl.n	800831c <__swbuf_r+0x20>
 8008318:	6923      	ldr	r3, [r4, #16]
 800831a:	b943      	cbnz	r3, 800832e <__swbuf_r+0x32>
 800831c:	4621      	mov	r1, r4
 800831e:	4628      	mov	r0, r5
 8008320:	f000 f82a 	bl	8008378 <__swsetup_r>
 8008324:	b118      	cbz	r0, 800832e <__swbuf_r+0x32>
 8008326:	f04f 37ff 	mov.w	r7, #4294967295
 800832a:	4638      	mov	r0, r7
 800832c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	6922      	ldr	r2, [r4, #16]
 8008332:	1a98      	subs	r0, r3, r2
 8008334:	6963      	ldr	r3, [r4, #20]
 8008336:	b2f6      	uxtb	r6, r6
 8008338:	4283      	cmp	r3, r0
 800833a:	4637      	mov	r7, r6
 800833c:	dc05      	bgt.n	800834a <__swbuf_r+0x4e>
 800833e:	4621      	mov	r1, r4
 8008340:	4628      	mov	r0, r5
 8008342:	f7ff fa47 	bl	80077d4 <_fflush_r>
 8008346:	2800      	cmp	r0, #0
 8008348:	d1ed      	bne.n	8008326 <__swbuf_r+0x2a>
 800834a:	68a3      	ldr	r3, [r4, #8]
 800834c:	3b01      	subs	r3, #1
 800834e:	60a3      	str	r3, [r4, #8]
 8008350:	6823      	ldr	r3, [r4, #0]
 8008352:	1c5a      	adds	r2, r3, #1
 8008354:	6022      	str	r2, [r4, #0]
 8008356:	701e      	strb	r6, [r3, #0]
 8008358:	6962      	ldr	r2, [r4, #20]
 800835a:	1c43      	adds	r3, r0, #1
 800835c:	429a      	cmp	r2, r3
 800835e:	d004      	beq.n	800836a <__swbuf_r+0x6e>
 8008360:	89a3      	ldrh	r3, [r4, #12]
 8008362:	07db      	lsls	r3, r3, #31
 8008364:	d5e1      	bpl.n	800832a <__swbuf_r+0x2e>
 8008366:	2e0a      	cmp	r6, #10
 8008368:	d1df      	bne.n	800832a <__swbuf_r+0x2e>
 800836a:	4621      	mov	r1, r4
 800836c:	4628      	mov	r0, r5
 800836e:	f7ff fa31 	bl	80077d4 <_fflush_r>
 8008372:	2800      	cmp	r0, #0
 8008374:	d0d9      	beq.n	800832a <__swbuf_r+0x2e>
 8008376:	e7d6      	b.n	8008326 <__swbuf_r+0x2a>

08008378 <__swsetup_r>:
 8008378:	b538      	push	{r3, r4, r5, lr}
 800837a:	4b29      	ldr	r3, [pc, #164]	@ (8008420 <__swsetup_r+0xa8>)
 800837c:	4605      	mov	r5, r0
 800837e:	6818      	ldr	r0, [r3, #0]
 8008380:	460c      	mov	r4, r1
 8008382:	b118      	cbz	r0, 800838c <__swsetup_r+0x14>
 8008384:	6a03      	ldr	r3, [r0, #32]
 8008386:	b90b      	cbnz	r3, 800838c <__swsetup_r+0x14>
 8008388:	f7fc fd22 	bl	8004dd0 <__sinit>
 800838c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008390:	0719      	lsls	r1, r3, #28
 8008392:	d422      	bmi.n	80083da <__swsetup_r+0x62>
 8008394:	06da      	lsls	r2, r3, #27
 8008396:	d407      	bmi.n	80083a8 <__swsetup_r+0x30>
 8008398:	2209      	movs	r2, #9
 800839a:	602a      	str	r2, [r5, #0]
 800839c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083a0:	81a3      	strh	r3, [r4, #12]
 80083a2:	f04f 30ff 	mov.w	r0, #4294967295
 80083a6:	e033      	b.n	8008410 <__swsetup_r+0x98>
 80083a8:	0758      	lsls	r0, r3, #29
 80083aa:	d512      	bpl.n	80083d2 <__swsetup_r+0x5a>
 80083ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083ae:	b141      	cbz	r1, 80083c2 <__swsetup_r+0x4a>
 80083b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083b4:	4299      	cmp	r1, r3
 80083b6:	d002      	beq.n	80083be <__swsetup_r+0x46>
 80083b8:	4628      	mov	r0, r5
 80083ba:	f7fd fc75 	bl	8005ca8 <_free_r>
 80083be:	2300      	movs	r3, #0
 80083c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80083c2:	89a3      	ldrh	r3, [r4, #12]
 80083c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80083c8:	81a3      	strh	r3, [r4, #12]
 80083ca:	2300      	movs	r3, #0
 80083cc:	6063      	str	r3, [r4, #4]
 80083ce:	6923      	ldr	r3, [r4, #16]
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	89a3      	ldrh	r3, [r4, #12]
 80083d4:	f043 0308 	orr.w	r3, r3, #8
 80083d8:	81a3      	strh	r3, [r4, #12]
 80083da:	6923      	ldr	r3, [r4, #16]
 80083dc:	b94b      	cbnz	r3, 80083f2 <__swsetup_r+0x7a>
 80083de:	89a3      	ldrh	r3, [r4, #12]
 80083e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80083e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083e8:	d003      	beq.n	80083f2 <__swsetup_r+0x7a>
 80083ea:	4621      	mov	r1, r4
 80083ec:	4628      	mov	r0, r5
 80083ee:	f000 f883 	bl	80084f8 <__smakebuf_r>
 80083f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083f6:	f013 0201 	ands.w	r2, r3, #1
 80083fa:	d00a      	beq.n	8008412 <__swsetup_r+0x9a>
 80083fc:	2200      	movs	r2, #0
 80083fe:	60a2      	str	r2, [r4, #8]
 8008400:	6962      	ldr	r2, [r4, #20]
 8008402:	4252      	negs	r2, r2
 8008404:	61a2      	str	r2, [r4, #24]
 8008406:	6922      	ldr	r2, [r4, #16]
 8008408:	b942      	cbnz	r2, 800841c <__swsetup_r+0xa4>
 800840a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800840e:	d1c5      	bne.n	800839c <__swsetup_r+0x24>
 8008410:	bd38      	pop	{r3, r4, r5, pc}
 8008412:	0799      	lsls	r1, r3, #30
 8008414:	bf58      	it	pl
 8008416:	6962      	ldrpl	r2, [r4, #20]
 8008418:	60a2      	str	r2, [r4, #8]
 800841a:	e7f4      	b.n	8008406 <__swsetup_r+0x8e>
 800841c:	2000      	movs	r0, #0
 800841e:	e7f7      	b.n	8008410 <__swsetup_r+0x98>
 8008420:	20000034 	.word	0x20000034

08008424 <_raise_r>:
 8008424:	291f      	cmp	r1, #31
 8008426:	b538      	push	{r3, r4, r5, lr}
 8008428:	4605      	mov	r5, r0
 800842a:	460c      	mov	r4, r1
 800842c:	d904      	bls.n	8008438 <_raise_r+0x14>
 800842e:	2316      	movs	r3, #22
 8008430:	6003      	str	r3, [r0, #0]
 8008432:	f04f 30ff 	mov.w	r0, #4294967295
 8008436:	bd38      	pop	{r3, r4, r5, pc}
 8008438:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800843a:	b112      	cbz	r2, 8008442 <_raise_r+0x1e>
 800843c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008440:	b94b      	cbnz	r3, 8008456 <_raise_r+0x32>
 8008442:	4628      	mov	r0, r5
 8008444:	f000 f830 	bl	80084a8 <_getpid_r>
 8008448:	4622      	mov	r2, r4
 800844a:	4601      	mov	r1, r0
 800844c:	4628      	mov	r0, r5
 800844e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008452:	f000 b817 	b.w	8008484 <_kill_r>
 8008456:	2b01      	cmp	r3, #1
 8008458:	d00a      	beq.n	8008470 <_raise_r+0x4c>
 800845a:	1c59      	adds	r1, r3, #1
 800845c:	d103      	bne.n	8008466 <_raise_r+0x42>
 800845e:	2316      	movs	r3, #22
 8008460:	6003      	str	r3, [r0, #0]
 8008462:	2001      	movs	r0, #1
 8008464:	e7e7      	b.n	8008436 <_raise_r+0x12>
 8008466:	2100      	movs	r1, #0
 8008468:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800846c:	4620      	mov	r0, r4
 800846e:	4798      	blx	r3
 8008470:	2000      	movs	r0, #0
 8008472:	e7e0      	b.n	8008436 <_raise_r+0x12>

08008474 <raise>:
 8008474:	4b02      	ldr	r3, [pc, #8]	@ (8008480 <raise+0xc>)
 8008476:	4601      	mov	r1, r0
 8008478:	6818      	ldr	r0, [r3, #0]
 800847a:	f7ff bfd3 	b.w	8008424 <_raise_r>
 800847e:	bf00      	nop
 8008480:	20000034 	.word	0x20000034

08008484 <_kill_r>:
 8008484:	b538      	push	{r3, r4, r5, lr}
 8008486:	4d07      	ldr	r5, [pc, #28]	@ (80084a4 <_kill_r+0x20>)
 8008488:	2300      	movs	r3, #0
 800848a:	4604      	mov	r4, r0
 800848c:	4608      	mov	r0, r1
 800848e:	4611      	mov	r1, r2
 8008490:	602b      	str	r3, [r5, #0]
 8008492:	f7f9 faf7 	bl	8001a84 <_kill>
 8008496:	1c43      	adds	r3, r0, #1
 8008498:	d102      	bne.n	80084a0 <_kill_r+0x1c>
 800849a:	682b      	ldr	r3, [r5, #0]
 800849c:	b103      	cbz	r3, 80084a0 <_kill_r+0x1c>
 800849e:	6023      	str	r3, [r4, #0]
 80084a0:	bd38      	pop	{r3, r4, r5, pc}
 80084a2:	bf00      	nop
 80084a4:	20000600 	.word	0x20000600

080084a8 <_getpid_r>:
 80084a8:	f7f9 baea 	b.w	8001a80 <_getpid>

080084ac <__swhatbuf_r>:
 80084ac:	b570      	push	{r4, r5, r6, lr}
 80084ae:	460c      	mov	r4, r1
 80084b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084b4:	2900      	cmp	r1, #0
 80084b6:	b096      	sub	sp, #88	@ 0x58
 80084b8:	4615      	mov	r5, r2
 80084ba:	461e      	mov	r6, r3
 80084bc:	da0d      	bge.n	80084da <__swhatbuf_r+0x2e>
 80084be:	89a3      	ldrh	r3, [r4, #12]
 80084c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80084c4:	f04f 0100 	mov.w	r1, #0
 80084c8:	bf14      	ite	ne
 80084ca:	2340      	movne	r3, #64	@ 0x40
 80084cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80084d0:	2000      	movs	r0, #0
 80084d2:	6031      	str	r1, [r6, #0]
 80084d4:	602b      	str	r3, [r5, #0]
 80084d6:	b016      	add	sp, #88	@ 0x58
 80084d8:	bd70      	pop	{r4, r5, r6, pc}
 80084da:	466a      	mov	r2, sp
 80084dc:	f000 f848 	bl	8008570 <_fstat_r>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	dbec      	blt.n	80084be <__swhatbuf_r+0x12>
 80084e4:	9901      	ldr	r1, [sp, #4]
 80084e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80084ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80084ee:	4259      	negs	r1, r3
 80084f0:	4159      	adcs	r1, r3
 80084f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80084f6:	e7eb      	b.n	80084d0 <__swhatbuf_r+0x24>

080084f8 <__smakebuf_r>:
 80084f8:	898b      	ldrh	r3, [r1, #12]
 80084fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084fc:	079d      	lsls	r5, r3, #30
 80084fe:	4606      	mov	r6, r0
 8008500:	460c      	mov	r4, r1
 8008502:	d507      	bpl.n	8008514 <__smakebuf_r+0x1c>
 8008504:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008508:	6023      	str	r3, [r4, #0]
 800850a:	6123      	str	r3, [r4, #16]
 800850c:	2301      	movs	r3, #1
 800850e:	6163      	str	r3, [r4, #20]
 8008510:	b003      	add	sp, #12
 8008512:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008514:	ab01      	add	r3, sp, #4
 8008516:	466a      	mov	r2, sp
 8008518:	f7ff ffc8 	bl	80084ac <__swhatbuf_r>
 800851c:	9f00      	ldr	r7, [sp, #0]
 800851e:	4605      	mov	r5, r0
 8008520:	4639      	mov	r1, r7
 8008522:	4630      	mov	r0, r6
 8008524:	f7fd fc34 	bl	8005d90 <_malloc_r>
 8008528:	b948      	cbnz	r0, 800853e <__smakebuf_r+0x46>
 800852a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800852e:	059a      	lsls	r2, r3, #22
 8008530:	d4ee      	bmi.n	8008510 <__smakebuf_r+0x18>
 8008532:	f023 0303 	bic.w	r3, r3, #3
 8008536:	f043 0302 	orr.w	r3, r3, #2
 800853a:	81a3      	strh	r3, [r4, #12]
 800853c:	e7e2      	b.n	8008504 <__smakebuf_r+0xc>
 800853e:	89a3      	ldrh	r3, [r4, #12]
 8008540:	6020      	str	r0, [r4, #0]
 8008542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008546:	81a3      	strh	r3, [r4, #12]
 8008548:	9b01      	ldr	r3, [sp, #4]
 800854a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800854e:	b15b      	cbz	r3, 8008568 <__smakebuf_r+0x70>
 8008550:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008554:	4630      	mov	r0, r6
 8008556:	f000 f81d 	bl	8008594 <_isatty_r>
 800855a:	b128      	cbz	r0, 8008568 <__smakebuf_r+0x70>
 800855c:	89a3      	ldrh	r3, [r4, #12]
 800855e:	f023 0303 	bic.w	r3, r3, #3
 8008562:	f043 0301 	orr.w	r3, r3, #1
 8008566:	81a3      	strh	r3, [r4, #12]
 8008568:	89a3      	ldrh	r3, [r4, #12]
 800856a:	431d      	orrs	r5, r3
 800856c:	81a5      	strh	r5, [r4, #12]
 800856e:	e7cf      	b.n	8008510 <__smakebuf_r+0x18>

08008570 <_fstat_r>:
 8008570:	b538      	push	{r3, r4, r5, lr}
 8008572:	4d07      	ldr	r5, [pc, #28]	@ (8008590 <_fstat_r+0x20>)
 8008574:	2300      	movs	r3, #0
 8008576:	4604      	mov	r4, r0
 8008578:	4608      	mov	r0, r1
 800857a:	4611      	mov	r1, r2
 800857c:	602b      	str	r3, [r5, #0]
 800857e:	f7f9 faaf 	bl	8001ae0 <_fstat>
 8008582:	1c43      	adds	r3, r0, #1
 8008584:	d102      	bne.n	800858c <_fstat_r+0x1c>
 8008586:	682b      	ldr	r3, [r5, #0]
 8008588:	b103      	cbz	r3, 800858c <_fstat_r+0x1c>
 800858a:	6023      	str	r3, [r4, #0]
 800858c:	bd38      	pop	{r3, r4, r5, pc}
 800858e:	bf00      	nop
 8008590:	20000600 	.word	0x20000600

08008594 <_isatty_r>:
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	4d06      	ldr	r5, [pc, #24]	@ (80085b0 <_isatty_r+0x1c>)
 8008598:	2300      	movs	r3, #0
 800859a:	4604      	mov	r4, r0
 800859c:	4608      	mov	r0, r1
 800859e:	602b      	str	r3, [r5, #0]
 80085a0:	f7f9 faa4 	bl	8001aec <_isatty>
 80085a4:	1c43      	adds	r3, r0, #1
 80085a6:	d102      	bne.n	80085ae <_isatty_r+0x1a>
 80085a8:	682b      	ldr	r3, [r5, #0]
 80085aa:	b103      	cbz	r3, 80085ae <_isatty_r+0x1a>
 80085ac:	6023      	str	r3, [r4, #0]
 80085ae:	bd38      	pop	{r3, r4, r5, pc}
 80085b0:	20000600 	.word	0x20000600

080085b4 <_init>:
 80085b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085b6:	bf00      	nop
 80085b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ba:	bc08      	pop	{r3}
 80085bc:	469e      	mov	lr, r3
 80085be:	4770      	bx	lr

080085c0 <_fini>:
 80085c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c2:	bf00      	nop
 80085c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085c6:	bc08      	pop	{r3}
 80085c8:	469e      	mov	lr, r3
 80085ca:	4770      	bx	lr
