
ra_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009030  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005378  080091d0  080091d0  0000a1d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e548  0800e548  000101f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800e548  0800e548  0000f548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e550  0800e550  000101f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e550  0800e550  0000f550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e554  0800e554  0000f554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800e558  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009b8  200001f8  0800e74c  000101f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000bb0  0800e74c  00010bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f993  00000000  00000000  00010224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004672  00000000  00000000  0002fbb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000dbe5  00000000  00000000  00034229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001048  00000000  00000000  00041e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019ea  00000000  00000000  00042e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019d5c  00000000  00000000  00044842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022f17  00000000  00000000  0005e59e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009588d  00000000  00000000  000814b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  00116d42  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004498  00000000  00000000  00116e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0011b298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000013a6  00000000  00000000  0011b308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000078  00000000  00000000  0011c6ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080091b8 	.word	0x080091b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	080091b8 	.word	0x080091b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MultivariablePID_Init>:
#define CMD_SET_KI              ( ('K'<<8) | 'I') // "KI"
#define CMD_SET_KD              ( ('K'<<8) | 'D') // "KD"

#define MAX_UART_BUFFER 800

void MultivariablePID_Init(MultivariablePID *pid) {
 8000ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (int i = 0; i < NUM_JOINTS*NUM_JOINTS; i++) {
		pid->Kp_data[i] = 0.0f;
 8000ff8:	22c0      	movs	r2, #192	@ 0xc0
 8000ffa:	2100      	movs	r1, #0
void MultivariablePID_Init(MultivariablePID *pid) {
 8000ffc:	4604      	mov	r4, r0
		pid->Kp_data[i] = 0.0f;
 8000ffe:	f005 fb7a 	bl	80066f6 <memset>
		pid->Ki_data[i] = 0.0f;
		pid->Kd_data[i] = 0.0f;
	}

	arm_mat_init_f32(&(pid->Kp_mat), NUM_JOINTS, NUM_JOINTS, pid->Kp_data);
 8001002:	2204      	movs	r2, #4
 8001004:	4623      	mov	r3, r4
 8001006:	4611      	mov	r1, r2
 8001008:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 800100c:	f003 fc54 	bl	80048b8 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->Ki_mat), NUM_JOINTS, NUM_JOINTS, pid->Ki_data);
 8001010:	2204      	movs	r2, #4
 8001012:	4611      	mov	r1, r2
 8001014:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8001018:	f104 00c8 	add.w	r0, r4, #200	@ 0xc8
 800101c:	f003 fc4c 	bl	80048b8 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->Kd_mat), NUM_JOINTS, NUM_JOINTS, pid->Kd_data);
 8001020:	2204      	movs	r2, #4
 8001022:	f104 0380 	add.w	r3, r4, #128	@ 0x80
 8001026:	4611      	mov	r1, r2
 8001028:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800102c:	f003 fc44 	bl	80048b8 <arm_mat_init_f32>

	// Initialize data arrays to zero
	for (int i = 0; i < NUM_JOINTS; i++) {
		pid->setpoint_data[i] = 2048.0f;
		pid->meas_data[i] = 0.0f;
 8001030:	f104 07e8 	add.w	r7, r4, #232	@ 0xe8
		pid->setpoint_data[i] = 2048.0f;
 8001034:	f04f 438a 	mov.w	r3, #1157627904	@ 0x45000000
		pid->meas_data[i] = 0.0f;
 8001038:	f04f 0820 	mov.w	r8, #32
		pid->setpoint_data[i] = 2048.0f;
 800103c:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 8001040:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 8001044:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001048:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
		pid->meas_data[i] = 0.0f;
 800104c:	4642      	mov	r2, r8
		pid->output_data[i] = 0.0f;

		pid->error_data[i] = 0.0f;
 800104e:	f504 7690 	add.w	r6, r4, #288	@ 0x120
		pid->meas_data[i] = 0.0f;
 8001052:	2100      	movs	r1, #0
 8001054:	4638      	mov	r0, r7
 8001056:	f005 fb4e 	bl	80066f6 <memset>
		pid->error_sum_data[i] = 0.0f;
		pid->error_prev_data[i] = 0.0f;

		pid->temp1_N_1_data[i] = 0.0f;
 800105a:	f504 75b4 	add.w	r5, r4, #360	@ 0x168
		pid->error_data[i] = 0.0f;
 800105e:	2230      	movs	r2, #48	@ 0x30
 8001060:	2100      	movs	r1, #0
 8001062:	4630      	mov	r0, r6
 8001064:	f005 fb47 	bl	80066f6 <memset>
		pid->temp1_N_1_data[i] = 0.0f;
 8001068:	4642      	mov	r2, r8
 800106a:	2100      	movs	r1, #0
 800106c:	4628      	mov	r0, r5
 800106e:	f005 fb42 	bl	80066f6 <memset>
		pid->temp2_N_1_data[i] = 0.0f;
	}

	arm_mat_init_f32(&(pid->setpoint_mat), NUM_JOINTS, 1, pid->setpoint_data);
 8001072:	f104 03d8 	add.w	r3, r4, #216	@ 0xd8
 8001076:	f504 7084 	add.w	r0, r4, #264	@ 0x108
 800107a:	2201      	movs	r2, #1
 800107c:	2104      	movs	r1, #4
 800107e:	f003 fc1b 	bl	80048b8 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->meas_mat), NUM_JOINTS, 1, pid->meas_data);
 8001082:	463b      	mov	r3, r7
 8001084:	f504 7088 	add.w	r0, r4, #272	@ 0x110
 8001088:	2201      	movs	r2, #1
 800108a:	2104      	movs	r1, #4
 800108c:	f003 fc14 	bl	80048b8 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->output_mat), NUM_JOINTS, 1, pid->output_data);
 8001090:	f104 03f8 	add.w	r3, r4, #248	@ 0xf8
 8001094:	f504 708c 	add.w	r0, r4, #280	@ 0x118
 8001098:	2201      	movs	r2, #1
 800109a:	2104      	movs	r1, #4
 800109c:	f003 fc0c 	bl	80048b8 <arm_mat_init_f32>

	arm_mat_init_f32(&(pid->error_mat), NUM_JOINTS, 1, pid->error_data);
 80010a0:	4633      	mov	r3, r6
 80010a2:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 80010a6:	2201      	movs	r2, #1
 80010a8:	2104      	movs	r1, #4
 80010aa:	f003 fc05 	bl	80048b8 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->error_sum_mat), NUM_JOINTS, 1, pid->error_sum_data);
 80010ae:	f504 7398 	add.w	r3, r4, #304	@ 0x130
 80010b2:	f504 70ac 	add.w	r0, r4, #344	@ 0x158
 80010b6:	2201      	movs	r2, #1
 80010b8:	2104      	movs	r1, #4
 80010ba:	f003 fbfd 	bl	80048b8 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->error_prev_mat), NUM_JOINTS, 1, pid->error_prev_data);
 80010be:	f504 70b0 	add.w	r0, r4, #352	@ 0x160
 80010c2:	f504 73a0 	add.w	r3, r4, #320	@ 0x140
 80010c6:	2201      	movs	r2, #1
 80010c8:	2104      	movs	r1, #4
 80010ca:	f003 fbf5 	bl	80048b8 <arm_mat_init_f32>

	arm_mat_init_f32(&(pid->temp1_N_1_mat), NUM_JOINTS, 1, pid->temp1_N_1_data);
 80010ce:	462b      	mov	r3, r5
 80010d0:	f504 70c4 	add.w	r0, r4, #392	@ 0x188
 80010d4:	2201      	movs	r2, #1
 80010d6:	2104      	movs	r1, #4
 80010d8:	f003 fbee 	bl	80048b8 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->temp2_N_1_mat), NUM_JOINTS, 1, pid->temp2_N_1_data);
 80010dc:	f504 73bc 	add.w	r3, r4, #376	@ 0x178
 80010e0:	f504 70c8 	add.w	r0, r4, #400	@ 0x190
 80010e4:	2201      	movs	r2, #1
 80010e6:	2104      	movs	r1, #4
 80010e8:	f003 fbe6 	bl	80048b8 <arm_mat_init_f32>

	pid->invert_data[0] = 1.0f;
 80010ec:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
	pid->invert_data[1] = 1.0f;
	pid->invert_data[2] = 1.0f;
	pid->invert_data[3] = -1.0f;
 80010f0:	4a09      	ldr	r2, [pc, #36]	@ (8001118 <MultivariablePID_Init+0x124>)
	pid->invert_data[0] = 1.0f;
 80010f2:	f8c4 3198 	str.w	r3, [r4, #408]	@ 0x198
	pid->invert_data[1] = 1.0f;
 80010f6:	f8c4 319c 	str.w	r3, [r4, #412]	@ 0x19c
	pid->invert_data[2] = 1.0f;
 80010fa:	f8c4 31a0 	str.w	r3, [r4, #416]	@ 0x1a0
	pid->invert_data[3] = -1.0f;
 80010fe:	f8c4 21a4 	str.w	r2, [r4, #420]	@ 0x1a4
	arm_mat_init_f32(&(pid->invert_mat), NUM_JOINTS, 1, pid->invert_data);
 8001102:	f504 73cc 	add.w	r3, r4, #408	@ 0x198
 8001106:	f504 70d4 	add.w	r0, r4, #424	@ 0x1a8
 800110a:	2201      	movs	r2, #1
}
 800110c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	arm_mat_init_f32(&(pid->invert_mat), NUM_JOINTS, 1, pid->invert_data);
 8001110:	2104      	movs	r1, #4
 8001112:	f003 bbd1 	b.w	80048b8 <arm_mat_init_f32>
 8001116:	bf00      	nop
 8001118:	bf800000 	.word	0xbf800000

0800111c <MultivariablePID_SetSetpoint>:

void MultivariablePID_SetSetpoint(MultivariablePID *pid, float32_t *setpoint) {
	if (pid == NULL || setpoint == NULL) return;
 800111c:	2800      	cmp	r0, #0
 800111e:	d04d      	beq.n	80011bc <MultivariablePID_SetSetpoint+0xa0>
 8001120:	2900      	cmp	r1, #0
 8001122:	d04b      	beq.n	80011bc <MultivariablePID_SetSetpoint+0xa0>

	for (int i = 0; i < NUM_JOINTS; i++) {
		// Check if setpoint is within valid range
		if (setpoint[i] < SETPOINT_MIN) {
			pid->setpoint_data[i] = SETPOINT_MIN;
 8001124:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80011c0 <MultivariablePID_SetSetpoint+0xa4>
 8001128:	edd1 6a00 	vldr	s13, [r1]
 800112c:	eddf 7a25 	vldr	s15, [pc, #148]	@ 80011c4 <MultivariablePID_SetSetpoint+0xa8>
 8001130:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001138:	bf58      	it	pl
 800113a:	eef0 6a47 	vmovpl.f32	s13, s14
 800113e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001146:	bfb8      	it	lt
 8001148:	eef0 6a67 	vmovlt.f32	s13, s15
 800114c:	edc0 6a36 	vstr	s13, [r0, #216]	@ 0xd8
 8001150:	edd1 6a01 	vldr	s13, [r1, #4]
 8001154:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800115c:	bf58      	it	pl
 800115e:	eef0 6a47 	vmovpl.f32	s13, s14
 8001162:	eef4 6ae7 	vcmpe.f32	s13, s15
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	bfb8      	it	lt
 800116c:	eef0 6a67 	vmovlt.f32	s13, s15
 8001170:	edc0 6a37 	vstr	s13, [r0, #220]	@ 0xdc
 8001174:	edd1 6a02 	vldr	s13, [r1, #8]
 8001178:	eef4 6ac7 	vcmpe.f32	s13, s14
 800117c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001180:	bf58      	it	pl
 8001182:	eef0 6a47 	vmovpl.f32	s13, s14
 8001186:	eef4 6ae7 	vcmpe.f32	s13, s15
 800118a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118e:	bfb8      	it	lt
 8001190:	eef0 6a67 	vmovlt.f32	s13, s15
 8001194:	edc0 6a38 	vstr	s13, [r0, #224]	@ 0xe0
 8001198:	edd1 6a03 	vldr	s13, [r1, #12]
 800119c:	eef4 6ac7 	vcmpe.f32	s13, s14
 80011a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a4:	bf48      	it	mi
 80011a6:	eeb0 7a66 	vmovmi.f32	s14, s13
 80011aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b2:	bfb8      	it	lt
 80011b4:	eeb0 7a67 	vmovlt.f32	s14, s15
 80011b8:	ed80 7a39 	vstr	s14, [r0, #228]	@ 0xe4
			pid->setpoint_data[i] = SETPOINT_MAX;
		} else {
			pid->setpoint_data[i] = setpoint[i];
		}
	}
}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	453b8000 	.word	0x453b8000
 80011c4:	44898000 	.word	0x44898000

080011c8 <MultivariablePID_Compute>:

void MultivariablePID_Compute(MultivariablePID *pid, float32_t *meas) {
  if (pid == NULL || meas == NULL) return;
 80011c8:	2800      	cmp	r0, #0
 80011ca:	d069      	beq.n	80012a0 <MultivariablePID_Compute+0xd8>
 80011cc:	2900      	cmp	r1, #0
 80011ce:	d067      	beq.n	80012a0 <MultivariablePID_Compute+0xd8>

  for (int i = 0; i < NUM_JOINTS; i++) {
    pid->meas_data[i] = meas[i];
 80011d0:	680b      	ldr	r3, [r1, #0]
void MultivariablePID_Compute(MultivariablePID *pid, float32_t *meas) {
 80011d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pid->meas_data[i] = meas[i];
 80011d6:	f8c0 30e8 	str.w	r3, [r0, #232]	@ 0xe8
 80011da:	684b      	ldr	r3, [r1, #4]
 80011dc:	f8c0 30ec 	str.w	r3, [r0, #236]	@ 0xec
 80011e0:	688b      	ldr	r3, [r1, #8]
 80011e2:	f8c0 30f0 	str.w	r3, [r0, #240]	@ 0xf0
 80011e6:	68cb      	ldr	r3, [r1, #12]
 80011e8:	f8c0 30f4 	str.w	r3, [r0, #244]	@ 0xf4
  }

  // error = setpoint - measurement
  arm_mat_sub_f32(&(pid->setpoint_mat), &(pid->meas_mat), &(pid->error_mat));
 80011ec:	f500 77a8 	add.w	r7, r0, #336	@ 0x150
 80011f0:	4604      	mov	r4, r0

  // Proportional Term: P = Kp * error
  arm_mat_mult_f32(&(pid->Kp_mat), &(pid->error_mat), &(pid->output_mat));
 80011f2:	f500 768c 	add.w	r6, r0, #280	@ 0x118
  arm_mat_sub_f32(&(pid->setpoint_mat), &(pid->meas_mat), &(pid->error_mat));
 80011f6:	463a      	mov	r2, r7
 80011f8:	f500 7188 	add.w	r1, r0, #272	@ 0x110
 80011fc:	f500 7084 	add.w	r0, r0, #264	@ 0x108
 8001200:	f003 f9de 	bl	80045c0 <arm_mat_sub_f32>

  // Integral Term: I = Ki * integral(error)
  // Update error sum (accumulate integral of error)
  // Scale by dt (sample time)
  arm_mat_add_f32(&(pid->error_sum_mat), &(pid->error_mat), &(pid->error_sum_mat));
 8001204:	f504 75ac 	add.w	r5, r4, #344	@ 0x158
  arm_mat_mult_f32(&(pid->Kp_mat), &(pid->error_mat), &(pid->output_mat));
 8001208:	4632      	mov	r2, r6
 800120a:	4639      	mov	r1, r7
 800120c:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 8001210:	f003 fa42 	bl	8004698 <arm_mat_mult_f32>
  arm_mat_mult_f32(&(pid->Ki_mat), &(pid->error_sum_mat), &(pid->temp1_N_1_mat));
 8001214:	f504 78c4 	add.w	r8, r4, #392	@ 0x188
  arm_mat_add_f32(&(pid->error_sum_mat), &(pid->error_mat), &(pid->error_sum_mat));
 8001218:	462a      	mov	r2, r5
 800121a:	4639      	mov	r1, r7
 800121c:	4628      	mov	r0, r5
 800121e:	f003 fb4f 	bl	80048c0 <arm_mat_add_f32>
  arm_mat_mult_f32(&(pid->Ki_mat), &(pid->error_sum_mat), &(pid->temp1_N_1_mat));
 8001222:	4629      	mov	r1, r5
 8001224:	4642      	mov	r2, r8
 8001226:	f104 00c8 	add.w	r0, r4, #200	@ 0xc8
 800122a:	f003 fa35 	bl	8004698 <arm_mat_mult_f32>
  arm_scale_f32(pid->temp1_N_1_data, pid->dt, pid->temp1_N_1_data, NUM_JOINTS);
 800122e:	f504 71b4 	add.w	r1, r4, #360	@ 0x168
 8001232:	ed94 0a6c 	vldr	s0, [r4, #432]	@ 0x1b0

  // Derivative Term: D = Kd * (error - previous_error)
  // Update the derivative term (change in error)
  // Scale by dt (sample time)
  arm_mat_sub_f32(&(pid->error_mat), &(pid->error_prev_mat), &(pid->temp2_N_1_mat));
 8001236:	f504 75c8 	add.w	r5, r4, #400	@ 0x190
  arm_scale_f32(pid->temp1_N_1_data, pid->dt, pid->temp1_N_1_data, NUM_JOINTS);
 800123a:	4608      	mov	r0, r1
 800123c:	2204      	movs	r2, #4
 800123e:	f003 fbab 	bl	8004998 <arm_scale_f32>
  arm_mat_sub_f32(&(pid->error_mat), &(pid->error_prev_mat), &(pid->temp2_N_1_mat));
 8001242:	462a      	mov	r2, r5
 8001244:	f504 71b0 	add.w	r1, r4, #352	@ 0x160
 8001248:	4638      	mov	r0, r7
 800124a:	f003 f9b9 	bl	80045c0 <arm_mat_sub_f32>
  arm_mat_mult_f32(&(pid->Kd_mat), &(pid->temp2_N_1_mat), &(pid->temp2_N_1_mat));
 800124e:	462a      	mov	r2, r5
 8001250:	4629      	mov	r1, r5
 8001252:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001256:	f003 fa1f 	bl	8004698 <arm_mat_mult_f32>
  arm_scale_f32(pid->temp2_N_1_data, pid->dt, pid->temp2_N_1_data, NUM_JOINTS);
 800125a:	f504 71bc 	add.w	r1, r4, #376	@ 0x178
 800125e:	ed94 0a6c 	vldr	s0, [r4, #432]	@ 0x1b0
 8001262:	4608      	mov	r0, r1
 8001264:	2204      	movs	r2, #4
 8001266:	f003 fb97 	bl	8004998 <arm_scale_f32>

  // Sum the P, I, D terms
  arm_mat_add_f32(&(pid->output_mat), &(pid->temp1_N_1_mat), &(pid->output_mat));  // P + I
 800126a:	4632      	mov	r2, r6
 800126c:	4641      	mov	r1, r8
 800126e:	4630      	mov	r0, r6
 8001270:	f003 fb26 	bl	80048c0 <arm_mat_add_f32>
  arm_mat_add_f32(&(pid->output_mat), &(pid->temp2_N_1_mat), &(pid->output_mat));  // P + I + D
 8001274:	4632      	mov	r2, r6
 8001276:	4629      	mov	r1, r5
 8001278:	4630      	mov	r0, r6
 800127a:	f003 fb21 	bl	80048c0 <arm_mat_add_f32>

  // Optionally scale the final output if necessary (e.g., by a factor to adjust magnitude)
  float32_t output_scale_factor = 0.01f;
  arm_scale_f32(pid->output_data, output_scale_factor, pid->output_data, NUM_JOINTS);
 800127e:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 8001282:	4608      	mov	r0, r1
 8001284:	2204      	movs	r2, #4
 8001286:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80012a4 <MultivariablePID_Compute+0xdc>
 800128a:	f003 fb85 	bl	8004998 <arm_scale_f32>

  // Apply the inversion to the output (multiply each output by its corresponding inversion value)
  //  arm_mult_f32(pid->output_data, pid->invert_data, pid->output_data, NUM_JOINTS);

  // Save the current error as the previous error for the next iteration
  arm_copy_f32(pid->error_data, pid->error_prev_data, NUM_JOINTS);
 800128e:	f504 71a0 	add.w	r1, r4, #320	@ 0x140
 8001292:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 8001296:	2204      	movs	r2, #4
}
 8001298:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  arm_copy_f32(pid->error_data, pid->error_prev_data, NUM_JOINTS);
 800129c:	f003 b95e 	b.w	800455c <arm_copy_f32>
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	3c23d70a 	.word	0x3c23d70a

080012a8 <ParsePIDParametersFromUART>:
    arm_copy_f32(new_matrix, target_data, NUM_JOINTS*NUM_JOINTS);
    // No need to re-initialize the matrix as the data pointer remains the same
}

uint8_t ParsePIDParametersFromUART(MultivariablePID *pid, char *uart_str, uint16_t len) {
    if (pid == NULL || uart_str == NULL || len == 0) return 0;
 80012a8:	2800      	cmp	r0, #0
 80012aa:	d04d      	beq.n	8001348 <ParsePIDParametersFromUART+0xa0>
uint8_t ParsePIDParametersFromUART(MultivariablePID *pid, char *uart_str, uint16_t len) {
 80012ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012b0:	460c      	mov	r4, r1
 80012b2:	b092      	sub	sp, #72	@ 0x48
    if (pid == NULL || uart_str == NULL || len == 0) return 0;
 80012b4:	2900      	cmp	r1, #0
 80012b6:	d043      	beq.n	8001340 <ParsePIDParametersFromUART+0x98>
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d041      	beq.n	8001340 <ParsePIDParametersFromUART+0x98>

    // Make sure the string is null-terminated
    if (uart_str[len-1] != '\0') {
 80012bc:	188b      	adds	r3, r1, r2
 80012be:	4606      	mov	r6, r0
 80012c0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80012c4:	b123      	cbz	r3, 80012d0 <ParsePIDParametersFromUART+0x28>
        if (len >= MAX_UART_BUFFER) {
 80012c6:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 80012ca:	d239      	bcs.n	8001340 <ParsePIDParametersFromUART+0x98>
            // String too long, can't safely null-terminate
            return 0;
        }
        uart_str[len] = '\0';
 80012cc:	2300      	movs	r3, #0
 80012ce:	548b      	strb	r3, [r1, r2]
    }

    float32_t parsed_values[NUM_JOINTS*NUM_JOINTS];
    for (int i = 0; i < NUM_JOINTS*NUM_JOINTS; i++) {
        parsed_values[i] = 0.0f;
 80012d0:	2240      	movs	r2, #64	@ 0x40
 80012d2:	2100      	movs	r1, #0
 80012d4:	a802      	add	r0, sp, #8
 80012d6:	f005 fa0e 	bl	80066f6 <memset>

    // Determine which parameter is being updated
    uint16_t chosen_param;
    char *data_start = NULL;

    if (strncmp(uart_str, "KP", 2) == 0) {
 80012da:	7823      	ldrb	r3, [r4, #0]
 80012dc:	2b4b      	cmp	r3, #75	@ 0x4b
 80012de:	d12f      	bne.n	8001340 <ParsePIDParametersFromUART+0x98>
 80012e0:	7862      	ldrb	r2, [r4, #1]
 80012e2:	2a50      	cmp	r2, #80	@ 0x50
 80012e4:	d137      	bne.n	8001356 <ParsePIDParametersFromUART+0xae>
        chosen_param = CMD_SET_KP;
 80012e6:	f644 3750 	movw	r7, #19280	@ 0x4b50
    }
    else {
        // Unrecognized parameter
        return 0;
    }
    data_start = uart_str + 2;
 80012ea:	1ca0      	adds	r0, r4, #2
    // Parse the comma-separated values
    char *token;
    char *rest = data_start;
    int index = 0;

    while ((token = strtok_r(rest, ",", &rest)) != NULL && index < NUM_JOINTS*NUM_JOINTS) {
 80012ec:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 8001374 <ParsePIDParametersFromUART+0xcc>
    char *rest = data_start;
 80012f0:	9001      	str	r0, [sp, #4]
    while ((token = strtok_r(rest, ",", &rest)) != NULL && index < NUM_JOINTS*NUM_JOINTS) {
 80012f2:	ad02      	add	r5, sp, #8
    int index = 0;
 80012f4:	2400      	movs	r4, #0
    while ((token = strtok_r(rest, ",", &rest)) != NULL && index < NUM_JOINTS*NUM_JOINTS) {
 80012f6:	e00a      	b.n	800130e <ParsePIDParametersFromUART+0x66>
        // Convert the token to float
        parsed_values[index] = (float32_t)atof(token);
 80012f8:	f003 fb94 	bl	8004a24 <atof>
 80012fc:	ec51 0b10 	vmov	r0, r1, d0
 8001300:	f7ff fc7a 	bl	8000bf8 <__aeabi_d2f>
 8001304:	4603      	mov	r3, r0
 8001306:	f845 3b04 	str.w	r3, [r5], #4
    while ((token = strtok_r(rest, ",", &rest)) != NULL && index < NUM_JOINTS*NUM_JOINTS) {
 800130a:	9801      	ldr	r0, [sp, #4]
        index++;
 800130c:	3401      	adds	r4, #1
    while ((token = strtok_r(rest, ",", &rest)) != NULL && index < NUM_JOINTS*NUM_JOINTS) {
 800130e:	aa01      	add	r2, sp, #4
 8001310:	4641      	mov	r1, r8
 8001312:	f005 fa4e 	bl	80067b2 <strtok_r>
 8001316:	b188      	cbz	r0, 800133c <ParsePIDParametersFromUART+0x94>
 8001318:	2c10      	cmp	r4, #16
 800131a:	d1ed      	bne.n	80012f8 <ParsePIDParametersFromUART+0x50>
    switch (chosen_param) {
 800131c:	f644 3349 	movw	r3, #19273	@ 0x4b49
 8001320:	429f      	cmp	r7, r3
 8001322:	d013      	beq.n	800134c <ParsePIDParametersFromUART+0xa4>
 8001324:	f644 3350 	movw	r3, #19280	@ 0x4b50
 8001328:	429f      	cmp	r7, r3
 800132a:	d012      	beq.n	8001352 <ParsePIDParametersFromUART+0xaa>
            target_data = pid->Kd_data;
 800132c:	f106 0180 	add.w	r1, r6, #128	@ 0x80
    arm_copy_f32(new_matrix, target_data, NUM_JOINTS*NUM_JOINTS);
 8001330:	a802      	add	r0, sp, #8
 8001332:	2210      	movs	r2, #16
 8001334:	f003 f912 	bl	800455c <arm_copy_f32>
    }

    // Update the PID parameters
    MultivariablePID_SetParameter(pid, parsed_values, chosen_param);

    return 1;
 8001338:	2001      	movs	r0, #1
 800133a:	e002      	b.n	8001342 <ParsePIDParametersFromUART+0x9a>
    if (index != NUM_JOINTS*NUM_JOINTS) {
 800133c:	2c10      	cmp	r4, #16
 800133e:	d0ed      	beq.n	800131c <ParsePIDParametersFromUART+0x74>
    if (pid == NULL || uart_str == NULL || len == 0) return 0;
 8001340:	2000      	movs	r0, #0
}
 8001342:	b012      	add	sp, #72	@ 0x48
 8001344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pid == NULL || uart_str == NULL || len == 0) return 0;
 8001348:	2000      	movs	r0, #0
}
 800134a:	4770      	bx	lr
            target_data = pid->Ki_data;
 800134c:	f106 0140 	add.w	r1, r6, #64	@ 0x40
            break;
 8001350:	e7ee      	b.n	8001330 <ParsePIDParametersFromUART+0x88>
            target_data = pid->Kp_data;
 8001352:	4631      	mov	r1, r6
            break;
 8001354:	e7ec      	b.n	8001330 <ParsePIDParametersFromUART+0x88>
    else if (strncmp(uart_str, "KI", 2) == 0) {
 8001356:	2b4b      	cmp	r3, #75	@ 0x4b
 8001358:	d1f2      	bne.n	8001340 <ParsePIDParametersFromUART+0x98>
 800135a:	2a49      	cmp	r2, #73	@ 0x49
 800135c:	d102      	bne.n	8001364 <ParsePIDParametersFromUART+0xbc>
        chosen_param = CMD_SET_KI;
 800135e:	f644 3749 	movw	r7, #19273	@ 0x4b49
 8001362:	e7c2      	b.n	80012ea <ParsePIDParametersFromUART+0x42>
    else if (strncmp(uart_str, "KD", 2) == 0) {
 8001364:	2b4b      	cmp	r3, #75	@ 0x4b
 8001366:	d1eb      	bne.n	8001340 <ParsePIDParametersFromUART+0x98>
 8001368:	2a44      	cmp	r2, #68	@ 0x44
 800136a:	d1e9      	bne.n	8001340 <ParsePIDParametersFromUART+0x98>
        chosen_param = CMD_SET_KD;
 800136c:	f644 3744 	movw	r7, #19268	@ 0x4b44
 8001370:	e7bb      	b.n	80012ea <ParsePIDParametersFromUART+0x42>
 8001372:	bf00      	nop
 8001374:	080091d0 	.word	0x080091d0

08001378 <Trajectory_Init>:
	}
}

// User functions
void Trajectory_Init(Trajectory *traj) {
	if (traj == NULL) return;
 8001378:	b1c8      	cbz	r0, 80013ae <Trajectory_Init+0x36>
void Trajectory_Init(Trajectory *traj) {
 800137a:	b538      	push	{r3, r4, r5, lr}

	for (int i = 0; i < NUM_JOINTS_TRAJ*TRAJ_POLY_TERMS; i++) {
		traj->coeff_data[i] = 0.0f;
 800137c:	2500      	movs	r5, #0
 800137e:	4604      	mov	r4, r0
 8001380:	6005      	str	r5, [r0, #0]
 8001382:	6045      	str	r5, [r0, #4]
 8001384:	6085      	str	r5, [r0, #8]
 8001386:	60c5      	str	r5, [r0, #12]
 8001388:	6105      	str	r5, [r0, #16]
 800138a:	6145      	str	r5, [r0, #20]
	}

	for (int i = 0; i < TRAJ_POLY_TERMS; i++) {
		traj->time_vec_pos_data[i] = 0.0f;
 800138c:	2248      	movs	r2, #72	@ 0x48
 800138e:	2100      	movs	r1, #0
 8001390:	3020      	adds	r0, #32
 8001392:	f005 f9b0 	bl	80066f6 <memset>

	traj->startTime = 0.0f;
	traj->currentTime = 0.0f;
	traj->duration = 0.0f;

	traj->state = TRAJ_IDLE;
 8001396:	2300      	movs	r3, #0
 8001398:	f8a4 30b0 	strh.w	r3, [r4, #176]	@ 0xb0

	traj->compute_velocity = 0;
	traj->compute_acceleration = 0;
 800139c:	f884 30b2 	strb.w	r3, [r4, #178]	@ 0xb2
	traj->startTime = 0.0f;
 80013a0:	f8c4 50a4 	str.w	r5, [r4, #164]	@ 0xa4
	traj->currentTime = 0.0f;
 80013a4:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
	traj->duration = 0.0f;
 80013a8:	f8c4 50ac 	str.w	r5, [r4, #172]	@ 0xac
}
 80013ac:	bd38      	pop	{r3, r4, r5, pc}
 80013ae:	4770      	bx	lr

080013b0 <Trajectory_SetCoefficients>:

void Trajectory_SetCoefficients(Trajectory *traj, float32_t *new_coeffs) {
 80013b0:	460b      	mov	r3, r1
	if (traj == NULL) return;
 80013b2:	4601      	mov	r1, r0
 80013b4:	b118      	cbz	r0, 80013be <Trajectory_SetCoefficients+0xe>
	arm_copy_f32(new_coeffs, traj->coeff_data, NUM_JOINTS_TRAJ*TRAJ_POLY_TERMS);
 80013b6:	2206      	movs	r2, #6
 80013b8:	4618      	mov	r0, r3
 80013ba:	f003 b8cf 	b.w	800455c <arm_copy_f32>
}
 80013be:	4770      	bx	lr

080013c0 <Trajectory_ParseCoeffs>:

	return traj->state == TRAJ_RUNNING;
}

HAL_StatusTypeDef Trajectory_ParseCoeffs(const char* input_string, float32_t* coeff_array, int expected_count) {
    if (input_string == NULL || coeff_array == NULL || expected_count <= 0) {
 80013c0:	b378      	cbz	r0, 8001422 <Trajectory_ParseCoeffs+0x62>
HAL_StatusTypeDef Trajectory_ParseCoeffs(const char* input_string, float32_t* coeff_array, int expected_count) {
 80013c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013c6:	460d      	mov	r5, r1
 80013c8:	b082      	sub	sp, #8
    if (input_string == NULL || coeff_array == NULL || expected_count <= 0) {
 80013ca:	b331      	cbz	r1, 800141a <Trajectory_ParseCoeffs+0x5a>
 80013cc:	2a00      	cmp	r2, #0
 80013ce:	4616      	mov	r6, r2
 80013d0:	dd23      	ble.n	800141a <Trajectory_ParseCoeffs+0x5a>
        return HAL_ERROR;
    }

    char* input_copy = strdup(input_string); // Create a copy as strtok modifies the string
 80013d2:	f005 f999 	bl	8006708 <strdup>
    if (input_copy == NULL) {
 80013d6:	4680      	mov	r8, r0
 80013d8:	b1f8      	cbz	r0, 800141a <Trajectory_ParseCoeffs+0x5a>
    char* token;
    char* rest = input_copy;
    int coeff_index = 0;

    // Parse each token separated by comma
    while ((token = strtok_r(rest, ",", &rest)) && coeff_index < expected_count) {
 80013da:	4f13      	ldr	r7, [pc, #76]	@ (8001428 <Trajectory_ParseCoeffs+0x68>)
    char* rest = input_copy;
 80013dc:	9001      	str	r0, [sp, #4]
    int coeff_index = 0;
 80013de:	2400      	movs	r4, #0
    while ((token = strtok_r(rest, ",", &rest)) && coeff_index < expected_count) {
 80013e0:	e00c      	b.n	80013fc <Trajectory_ParseCoeffs+0x3c>
 80013e2:	42b4      	cmp	r4, r6
 80013e4:	d010      	beq.n	8001408 <Trajectory_ParseCoeffs+0x48>
        // Convert string to float
        coeff_array[coeff_index] = (float32_t)atof(token);
 80013e6:	f003 fb1d 	bl	8004a24 <atof>
 80013ea:	ec51 0b10 	vmov	r0, r1, d0
 80013ee:	f7ff fc03 	bl	8000bf8 <__aeabi_d2f>
 80013f2:	4603      	mov	r3, r0
 80013f4:	f845 3b04 	str.w	r3, [r5], #4
    while ((token = strtok_r(rest, ",", &rest)) && coeff_index < expected_count) {
 80013f8:	9801      	ldr	r0, [sp, #4]
        coeff_index++;
 80013fa:	3401      	adds	r4, #1
    while ((token = strtok_r(rest, ",", &rest)) && coeff_index < expected_count) {
 80013fc:	aa01      	add	r2, sp, #4
 80013fe:	4639      	mov	r1, r7
 8001400:	f005 f9d7 	bl	80067b2 <strtok_r>
 8001404:	2800      	cmp	r0, #0
 8001406:	d1ec      	bne.n	80013e2 <Trajectory_ParseCoeffs+0x22>
    }

    free(input_copy); // Free the allocated memory
 8001408:	4640      	mov	r0, r8
 800140a:	f003 fb17 	bl	8004a3c <free>

    // Check if we got the correct number of coefficients
    if (coeff_index == expected_count) {
 800140e:	1ba0      	subs	r0, r4, r6
 8001410:	bf18      	it	ne
 8001412:	2001      	movne	r0, #1
        return HAL_OK;
    } else {
        return HAL_ERROR; // Incorrect number of coefficients
    }
}
 8001414:	b002      	add	sp, #8
 8001416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 800141a:	2001      	movs	r0, #1
}
 800141c:	b002      	add	sp, #8
 800141e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 8001422:	2001      	movs	r0, #1
}
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	080091d0 	.word	0x080091d0

0800142c <AS5600_Mux_Init>:

 * @return HAL status

 */

HAL_StatusTypeDef AS5600_Mux_Init(AS5600_Mux_Array* sensors, I2C_HandleTypeDef* hi2c, uint8_t num_sensors) {
 800142c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001430:	b084      	sub	sp, #16

    // Basic parameter check

    if (hi2c == NULL || num_sensors > MAX_SENSORS) {
 8001432:	2900      	cmp	r1, #0
 8001434:	d05c      	beq.n	80014f0 <AS5600_Mux_Init+0xc4>
 8001436:	2a08      	cmp	r2, #8
 8001438:	4616      	mov	r6, r2
 800143a:	d859      	bhi.n	80014f0 <AS5600_Mux_Init+0xc4>



    // Store configuration

    sensors->hi2c = hi2c;
 800143c:	4604      	mov	r4, r0

    // Initialize all angle readings to 0

    for (uint8_t i = 0; i < MAX_SENSORS; i++) {

        sensors->angles[i] = 0;
 800143e:	2300      	movs	r3, #0

    // Disable all multiplexer channels initially

    uint8_t disable_cmd = 0x00;

    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &disable_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 8001440:	f04f 0864 	mov.w	r8, #100	@ 0x64
    sensors->hi2c = hi2c;
 8001444:	6021      	str	r1, [r4, #0]
    sensors->num_sensors = num_sensors;
 8001446:	7122      	strb	r2, [r4, #4]
        sensors->angles[i] = 0;
 8001448:	f8c4 3006 	str.w	r3, [r4, #6]
 800144c:	f8c4 300a 	str.w	r3, [r4, #10]
 8001450:	f8c4 300e 	str.w	r3, [r4, #14]
 8001454:	f8c4 3012 	str.w	r3, [r4, #18]
    uint8_t disable_cmd = 0x00;
 8001458:	4608      	mov	r0, r1
 800145a:	f88d 300c 	strb.w	r3, [sp, #12]
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &disable_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 800145e:	f8cd 8000 	str.w	r8, [sp]
 8001462:	2301      	movs	r3, #1
 8001464:	aa03      	add	r2, sp, #12
 8001466:	21e0      	movs	r1, #224	@ 0xe0
 8001468:	f001 faa2 	bl	80029b0 <HAL_I2C_Master_Transmit>
 800146c:	4681      	mov	r9, r0
 800146e:	2800      	cmp	r0, #0
 8001470:	d13e      	bne.n	80014f0 <AS5600_Mux_Init+0xc4>



    // Basic check if sensors are responsive

    for (uint8_t i = 0; i < num_sensors; i++) {
 8001472:	2e00      	cmp	r6, #0
 8001474:	d03e      	beq.n	80014f4 <AS5600_Mux_Init+0xc8>
 8001476:	4607      	mov	r7, r0

    }



    uint8_t channel_cmd = 1 << channel;
 8001478:	f04f 0a01 	mov.w	sl, #1

    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &channel_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 800147c:	f8cd 8000 	str.w	r8, [sp]
    uint8_t channel_cmd = 1 << channel;
 8001480:	fa0a f507 	lsl.w	r5, sl, r7
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &channel_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 8001484:	6820      	ldr	r0, [r4, #0]
    uint8_t channel_cmd = 1 << channel;
 8001486:	b2ed      	uxtb	r5, r5
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &channel_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 8001488:	2301      	movs	r3, #1
 800148a:	f10d 020f 	add.w	r2, sp, #15
 800148e:	21e0      	movs	r1, #224	@ 0xe0
    uint8_t channel_cmd = 1 << channel;
 8001490:	f88d 500f 	strb.w	r5, [sp, #15]
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &channel_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 8001494:	f001 fa8c 	bl	80029b0 <HAL_I2C_Master_Transmit>

HAL_StatusTypeDef AS5600_Mux_ReadAngle(AS5600_Mux_Array* sensors, uint8_t sensor_index, uint16_t* angle) {
    uint8_t angle_h, angle_l;
    uint8_t reg_addr;

    if (sensor_index >= sensors->num_sensors) {
 8001498:	fa5f fe87 	uxtb.w	lr, r7
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &channel_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 800149c:	bb40      	cbnz	r0, 80014f0 <AS5600_Mux_Init+0xc4>
    if (sensor_index >= sensors->num_sensors) {
 800149e:	f894 c004 	ldrb.w	ip, [r4, #4]
 80014a2:	45f4      	cmp	ip, lr
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &channel_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 80014a4:	f04f 0301 	mov.w	r3, #1
 80014a8:	f10d 020f 	add.w	r2, sp, #15
 80014ac:	f04f 01e0 	mov.w	r1, #224	@ 0xe0
    if (sensor_index >= sensors->num_sensors) {
 80014b0:	d91e      	bls.n	80014f0 <AS5600_Mux_Init+0xc4>
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &channel_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 80014b2:	f8cd 8000 	str.w	r8, [sp]
 80014b6:	6820      	ldr	r0, [r4, #0]
    uint8_t channel_cmd = 1 << channel;
 80014b8:	f88d 500f 	strb.w	r5, [sp, #15]
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &channel_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 80014bc:	f001 fa78 	bl	80029b0 <HAL_I2C_Master_Transmit>
    }

    // Read high byte
    reg_addr = AS5600_REG_ANGLE_H;

    if (HAL_I2C_Master_Transmit(sensors->hi2c, AS5600_ADDR << 1, &reg_addr, 1, I2C_TIMEOUT) != HAL_OK) {
 80014c0:	2301      	movs	r3, #1
 80014c2:	f10d 020f 	add.w	r2, sp, #15
    reg_addr = AS5600_REG_ANGLE_H;
 80014c6:	210e      	movs	r1, #14
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &channel_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 80014c8:	b990      	cbnz	r0, 80014f0 <AS5600_Mux_Init+0xc4>
    if (HAL_I2C_Master_Transmit(sensors->hi2c, AS5600_ADDR << 1, &reg_addr, 1, I2C_TIMEOUT) != HAL_OK) {
 80014ca:	f8cd 8000 	str.w	r8, [sp]
    reg_addr = AS5600_REG_ANGLE_H;
 80014ce:	f88d 100f 	strb.w	r1, [sp, #15]
    if (HAL_I2C_Master_Transmit(sensors->hi2c, AS5600_ADDR << 1, &reg_addr, 1, I2C_TIMEOUT) != HAL_OK) {
 80014d2:	6820      	ldr	r0, [r4, #0]
 80014d4:	216c      	movs	r1, #108	@ 0x6c
 80014d6:	f001 fa6b 	bl	80029b0 <HAL_I2C_Master_Transmit>
 80014da:	b948      	cbnz	r0, 80014f0 <AS5600_Mux_Init+0xc4>
        return HAL_ERROR;
    }

    if (HAL_I2C_Master_Receive(sensors->hi2c, AS5600_ADDR << 1, &angle_h, 1, I2C_TIMEOUT) != HAL_OK) {
 80014dc:	f8cd 8000 	str.w	r8, [sp]
 80014e0:	6820      	ldr	r0, [r4, #0]
 80014e2:	2301      	movs	r3, #1
 80014e4:	f10d 020d 	add.w	r2, sp, #13
 80014e8:	216c      	movs	r1, #108	@ 0x6c
 80014ea:	f001 fbad 	bl	8002c48 <HAL_I2C_Master_Receive>
 80014ee:	b128      	cbz	r0, 80014fc <AS5600_Mux_Init+0xd0>
        return HAL_ERROR;
 80014f0:	f04f 0901 	mov.w	r9, #1
}
 80014f4:	4648      	mov	r0, r9
 80014f6:	b004      	add	sp, #16
 80014f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return HAL_ERROR;
    }

    // Read low byte
    reg_addr = AS5600_REG_ANGLE_L;
 80014fc:	230f      	movs	r3, #15
    if (HAL_I2C_Master_Transmit(sensors->hi2c, AS5600_ADDR << 1, &reg_addr, 1, I2C_TIMEOUT) != HAL_OK) {
 80014fe:	f8cd 8000 	str.w	r8, [sp]
    reg_addr = AS5600_REG_ANGLE_L;
 8001502:	f88d 300f 	strb.w	r3, [sp, #15]
    if (HAL_I2C_Master_Transmit(sensors->hi2c, AS5600_ADDR << 1, &reg_addr, 1, I2C_TIMEOUT) != HAL_OK) {
 8001506:	6820      	ldr	r0, [r4, #0]
 8001508:	2301      	movs	r3, #1
 800150a:	f10d 020f 	add.w	r2, sp, #15
 800150e:	216c      	movs	r1, #108	@ 0x6c
 8001510:	f001 fa4e 	bl	80029b0 <HAL_I2C_Master_Transmit>
 8001514:	2800      	cmp	r0, #0
 8001516:	d1eb      	bne.n	80014f0 <AS5600_Mux_Init+0xc4>
        return HAL_ERROR;
    }

    if (HAL_I2C_Master_Receive(sensors->hi2c, AS5600_ADDR << 1, &angle_l, 1, I2C_TIMEOUT) != HAL_OK) {
 8001518:	f8cd 8000 	str.w	r8, [sp]
 800151c:	2301      	movs	r3, #1
 800151e:	6820      	ldr	r0, [r4, #0]
 8001520:	f10d 020e 	add.w	r2, sp, #14
 8001524:	216c      	movs	r1, #108	@ 0x6c
    for (uint8_t i = 0; i < num_sensors; i++) {
 8001526:	441f      	add	r7, r3
    if (HAL_I2C_Master_Receive(sensors->hi2c, AS5600_ADDR << 1, &angle_l, 1, I2C_TIMEOUT) != HAL_OK) {
 8001528:	f001 fb8e 	bl	8002c48 <HAL_I2C_Master_Receive>
 800152c:	2800      	cmp	r0, #0
 800152e:	d1df      	bne.n	80014f0 <AS5600_Mux_Init+0xc4>
    for (uint8_t i = 0; i < num_sensors; i++) {
 8001530:	42b7      	cmp	r7, r6
 8001532:	d1a3      	bne.n	800147c <AS5600_Mux_Init+0x50>
}
 8001534:	4648      	mov	r0, r9
 8001536:	b004      	add	sp, #16
 8001538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800153c <AS5600_Mux_ReadAllAngles>:
 * @return HAL status

 */

void AS5600_Mux_ReadAllAngles(AS5600_Mux_Array* sensors) {
    for (uint8_t i = 0; i < sensors->num_sensors; i++) {
 800153c:	7902      	ldrb	r2, [r0, #4]
 800153e:	2a00      	cmp	r2, #0
 8001540:	d059      	beq.n	80015f6 <AS5600_Mux_ReadAllAngles+0xba>
void AS5600_Mux_ReadAllAngles(AS5600_Mux_Array* sensors) {
 8001542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint8_t i = 0; i < sensors->num_sensors; i++) {
 8001546:	2500      	movs	r5, #0
void AS5600_Mux_ReadAllAngles(AS5600_Mux_Array* sensors) {
 8001548:	b084      	sub	sp, #16
 800154a:	4606      	mov	r6, r0
 800154c:	462c      	mov	r4, r5
    uint8_t channel_cmd = 1 << channel;
 800154e:	f04f 0801 	mov.w	r8, #1
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &channel_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 8001552:	2764      	movs	r7, #100	@ 0x64
    if (channel > 7) {
 8001554:	2c07      	cmp	r4, #7
 8001556:	d822      	bhi.n	800159e <AS5600_Mux_ReadAllAngles+0x62>
    uint8_t channel_cmd = 1 << channel;
 8001558:	fa08 f104 	lsl.w	r1, r8, r4
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &channel_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 800155c:	9700      	str	r7, [sp, #0]
    uint8_t channel_cmd = 1 << channel;
 800155e:	f88d 100f 	strb.w	r1, [sp, #15]
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &channel_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 8001562:	6830      	ldr	r0, [r6, #0]
 8001564:	2301      	movs	r3, #1
 8001566:	f10d 020f 	add.w	r2, sp, #15
 800156a:	21e0      	movs	r1, #224	@ 0xe0
 800156c:	f001 fa20 	bl	80029b0 <HAL_I2C_Master_Transmit>
 8001570:	b9a0      	cbnz	r0, 800159c <AS5600_Mux_ReadAllAngles+0x60>
    reg_addr = AS5600_REG_ANGLE_H;
 8001572:	210e      	movs	r1, #14
    if (HAL_I2C_Master_Transmit(sensors->hi2c, AS5600_ADDR << 1, &reg_addr, 1, I2C_TIMEOUT) != HAL_OK) {
 8001574:	9700      	str	r7, [sp, #0]
    reg_addr = AS5600_REG_ANGLE_H;
 8001576:	f88d 100f 	strb.w	r1, [sp, #15]
    if (HAL_I2C_Master_Transmit(sensors->hi2c, AS5600_ADDR << 1, &reg_addr, 1, I2C_TIMEOUT) != HAL_OK) {
 800157a:	6830      	ldr	r0, [r6, #0]
 800157c:	2301      	movs	r3, #1
 800157e:	f10d 020f 	add.w	r2, sp, #15
 8001582:	216c      	movs	r1, #108	@ 0x6c
 8001584:	f001 fa14 	bl	80029b0 <HAL_I2C_Master_Transmit>
 8001588:	b940      	cbnz	r0, 800159c <AS5600_Mux_ReadAllAngles+0x60>
    if (HAL_I2C_Master_Receive(sensors->hi2c, AS5600_ADDR << 1, &angle_h, 1, I2C_TIMEOUT) != HAL_OK) {
 800158a:	9700      	str	r7, [sp, #0]
 800158c:	6830      	ldr	r0, [r6, #0]
 800158e:	2301      	movs	r3, #1
 8001590:	f10d 020d 	add.w	r2, sp, #13
 8001594:	216c      	movs	r1, #108	@ 0x6c
 8001596:	f001 fb57 	bl	8002c48 <HAL_I2C_Master_Receive>
 800159a:	b150      	cbz	r0, 80015b2 <AS5600_Mux_ReadAllAngles+0x76>
    for (uint8_t i = 0; i < sensors->num_sensors; i++) {
 800159c:	7932      	ldrb	r2, [r6, #4]
        return HAL_ERROR;
 800159e:	2001      	movs	r0, #1
    for (uint8_t i = 0; i < sensors->num_sensors; i++) {
 80015a0:	3501      	adds	r5, #1
        sensors->sensor_status_array[i] = AS5600_Mux_ReadAngle(sensors, i, &sensors->angles[i]);
 80015a2:	1933      	adds	r3, r6, r4
    for (uint8_t i = 0; i < sensors->num_sensors; i++) {
 80015a4:	b2ec      	uxtb	r4, r5
 80015a6:	42a2      	cmp	r2, r4
        sensors->sensor_status_array[i] = AS5600_Mux_ReadAngle(sensors, i, &sensors->angles[i]);
 80015a8:	7598      	strb	r0, [r3, #22]
    for (uint8_t i = 0; i < sensors->num_sensors; i++) {
 80015aa:	d8d3      	bhi.n	8001554 <AS5600_Mux_ReadAllAngles+0x18>
    }
}
 80015ac:	b004      	add	sp, #16
 80015ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    reg_addr = AS5600_REG_ANGLE_L;
 80015b2:	230f      	movs	r3, #15
    if (HAL_I2C_Master_Transmit(sensors->hi2c, AS5600_ADDR << 1, &reg_addr, 1, I2C_TIMEOUT) != HAL_OK) {
 80015b4:	9700      	str	r7, [sp, #0]
    reg_addr = AS5600_REG_ANGLE_L;
 80015b6:	f88d 300f 	strb.w	r3, [sp, #15]
    if (HAL_I2C_Master_Transmit(sensors->hi2c, AS5600_ADDR << 1, &reg_addr, 1, I2C_TIMEOUT) != HAL_OK) {
 80015ba:	6830      	ldr	r0, [r6, #0]
 80015bc:	2301      	movs	r3, #1
 80015be:	f10d 020f 	add.w	r2, sp, #15
 80015c2:	216c      	movs	r1, #108	@ 0x6c
 80015c4:	f001 f9f4 	bl	80029b0 <HAL_I2C_Master_Transmit>
 80015c8:	2800      	cmp	r0, #0
 80015ca:	d1e7      	bne.n	800159c <AS5600_Mux_ReadAllAngles+0x60>
    if (HAL_I2C_Master_Receive(sensors->hi2c, AS5600_ADDR << 1, &angle_l, 1, I2C_TIMEOUT) != HAL_OK) {
 80015cc:	9700      	str	r7, [sp, #0]
 80015ce:	6830      	ldr	r0, [r6, #0]
 80015d0:	2301      	movs	r3, #1
 80015d2:	f10d 020e 	add.w	r2, sp, #14
 80015d6:	216c      	movs	r1, #108	@ 0x6c
 80015d8:	f001 fb36 	bl	8002c48 <HAL_I2C_Master_Receive>
 80015dc:	2800      	cmp	r0, #0
 80015de:	d1dd      	bne.n	800159c <AS5600_Mux_ReadAllAngles+0x60>
    *angle = ((uint16_t)angle_h << 8) | angle_l;
 80015e0:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80015e4:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80015e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015ec:	eb06 0244 	add.w	r2, r6, r4, lsl #1
 80015f0:	80d3      	strh	r3, [r2, #6]
    for (uint8_t i = 0; i < sensors->num_sensors; i++) {
 80015f2:	7932      	ldrb	r2, [r6, #4]
    return HAL_OK;
 80015f4:	e7d4      	b.n	80015a0 <AS5600_Mux_ReadAllAngles+0x64>
 80015f6:	4770      	bx	lr

080015f8 <CommandProtocol_SetCommandProcessor>:
#include "CommandProtocol.h"

static ProcessCommandFn CustomProcessCommand = NULL;

void CommandProtocol_SetCommandProcessor(ProcessCommandFn processFn) {
    CustomProcessCommand = processFn;
 80015f8:	4b01      	ldr	r3, [pc, #4]	@ (8001600 <CommandProtocol_SetCommandProcessor+0x8>)
 80015fa:	6018      	str	r0, [r3, #0]
}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000214 	.word	0x20000214

08001604 <CommandProtocol_Init>:

HAL_StatusTypeDef CommandProtocol_Init(CommandProtocol_Handle* handle, UART_HandleTypeDef* huart, uint32_t timeout) {
 8001604:	4603      	mov	r3, r0
 8001606:	4608      	mov	r0, r1
    if (handle == NULL || huart == NULL) {
 8001608:	b15b      	cbz	r3, 8001622 <CommandProtocol_Init+0x1e>
 800160a:	b151      	cbz	r1, 8001622 <CommandProtocol_Init+0x1e>
        return HAL_ERROR;
    }

    handle->huart = huart;
	handle->timeout = timeout;
    handle->rxIndex = 0;
 800160c:	f44f 7180 	mov.w	r1, #256	@ 0x100
	handle->timeout = timeout;
 8001610:	e9c3 0200 	strd	r0, r2, [r3]
    handle->rxIndex = 0;
 8001614:	f8a3 13f0 	strh.w	r1, [r3, #1008]	@ 0x3f0
    handle->isInitialized = true;

    return HAL_UART_Receive_IT(handle->huart, &handle->rxBuffer[0], 1);
 8001618:	2201      	movs	r2, #1
 800161a:	f103 0108 	add.w	r1, r3, #8
 800161e:	f002 bd5b 	b.w	80040d8 <HAL_UART_Receive_IT>
}
 8001622:	2001      	movs	r0, #1
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop

08001628 <CommandProtocol_ProcessByte>:

HAL_StatusTypeDef CommandProtocol_ProcessByte(CommandProtocol_Handle* handle, uint8_t byte) {
 8001628:	b538      	push	{r3, r4, r5, lr}
    if (!handle->isInitialized) {
 800162a:	f890 33f1 	ldrb.w	r3, [r0, #1009]	@ 0x3f1
 800162e:	b1bb      	cbz	r3, 8001660 <CommandProtocol_ProcessByte+0x38>
        return HAL_ERROR;
    }

    if (handle->rxIndex < sizeof(handle->rxBuffer) - 1)
    {
        if (byte == '\n' || byte == '\r')
 8001630:	290a      	cmp	r1, #10

            handle->rxIndex = 0;
        }
        else
        {
        	handle->rxBuffer[handle->rxIndex] = byte; // Store the received byte in the buffer
 8001632:	f890 33f0 	ldrb.w	r3, [r0, #1008]	@ 0x3f0
 8001636:	4604      	mov	r4, r0
        if (byte == '\n' || byte == '\r')
 8001638:	d009      	beq.n	800164e <CommandProtocol_ProcessByte+0x26>
 800163a:	290d      	cmp	r1, #13
 800163c:	d007      	beq.n	800164e <CommandProtocol_ProcessByte+0x26>
        	handle->rxBuffer[handle->rxIndex] = byte; // Store the received byte in the buffer
 800163e:	18c2      	adds	r2, r0, r3
        	handle->rxIndex++; // Move to the next position in the buffer
 8001640:	3301      	adds	r3, #1
        	handle->rxBuffer[handle->rxIndex] = byte; // Store the received byte in the buffer
 8001642:	7211      	strb	r1, [r2, #8]
        	handle->rxIndex++; // Move to the next position in the buffer
 8001644:	b2dd      	uxtb	r5, r3
            handle->rxIndex = 0;
 8001646:	f884 53f0 	strb.w	r5, [r4, #1008]	@ 0x3f0
    }
    else // Reset index to 0
    {
        handle->rxIndex = 0;
    }
    return HAL_OK;
 800164a:	2000      	movs	r0, #0
}
 800164c:	bd38      	pop	{r3, r4, r5, pc}
            if (CustomProcessCommand != NULL)
 800164e:	4a05      	ldr	r2, [pc, #20]	@ (8001664 <CommandProtocol_ProcessByte+0x3c>)
            handle->rxBuffer[handle->rxIndex] = '\0';
 8001650:	4423      	add	r3, r4
            if (CustomProcessCommand != NULL)
 8001652:	6812      	ldr	r2, [r2, #0]
            handle->rxBuffer[handle->rxIndex] = '\0';
 8001654:	2500      	movs	r5, #0
 8001656:	721d      	strb	r5, [r3, #8]
            if (CustomProcessCommand != NULL)
 8001658:	b112      	cbz	r2, 8001660 <CommandProtocol_ProcessByte+0x38>
                CustomProcessCommand(handle);
 800165a:	4620      	mov	r0, r4
 800165c:	4790      	blx	r2
            handle->rxIndex = 0;
 800165e:	e7f2      	b.n	8001646 <CommandProtocol_ProcessByte+0x1e>
        return HAL_ERROR;
 8001660:	2001      	movs	r0, #1
}
 8001662:	bd38      	pop	{r3, r4, r5, pc}
 8001664:	20000214 	.word	0x20000214

08001668 <CommandProtocol_SendResponse>:

HAL_StatusTypeDef CommandProtocol_SendResponse(CommandProtocol_Handle* handle, const char* response) {
    if (!handle->isInitialized || response == NULL) {
 8001668:	f890 33f1 	ldrb.w	r3, [r0, #1009]	@ 0x3f1
 800166c:	b18b      	cbz	r3, 8001692 <CommandProtocol_SendResponse+0x2a>
HAL_StatusTypeDef CommandProtocol_SendResponse(CommandProtocol_Handle* handle, const char* response) {
 800166e:	b570      	push	{r4, r5, r6, lr}
 8001670:	460d      	mov	r5, r1
    if (!handle->isInitialized || response == NULL) {
 8001672:	b161      	cbz	r1, 800168e <CommandProtocol_SendResponse+0x26>
        return HAL_ERROR;
    }

    return HAL_UART_Transmit(handle->huart, (uint8_t*)response, strlen(response),
 8001674:	4604      	mov	r4, r0
 8001676:	4608      	mov	r0, r1
 8001678:	f7fe fe02 	bl	8000280 <strlen>
 800167c:	4602      	mov	r2, r0
 800167e:	4629      	mov	r1, r5
 8001680:	e9d4 0300 	ldrd	r0, r3, [r4]
 8001684:	b292      	uxth	r2, r2
                            handle->timeout);
}
 8001686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return HAL_UART_Transmit(handle->huart, (uint8_t*)response, strlen(response),
 800168a:	f002 bcb7 	b.w	8003ffc <HAL_UART_Transmit>
}
 800168e:	2001      	movs	r0, #1
 8001690:	bd70      	pop	{r4, r5, r6, pc}
 8001692:	2001      	movs	r0, #1
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop

08001698 <StepMotor_Init>:
								 TIM_HandleTypeDef* tim,
								 uint32_t tim_channel,
								 GPIO_TypeDef* dir_port,
								 uint16_t dir_pin,
								 GPIO_TypeDef* en_port,
								 uint16_t en_pin) {
 8001698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800169a:	4604      	mov	r4, r0
 800169c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 80016a0:	f8bd 7020 	ldrh.w	r7, [sp, #32]
	motor->timer = tim;
 80016a4:	6021      	str	r1, [r4, #0]
	motor->dir_gpio_port = dir_port;
	motor->dir_gpio_pin = dir_pin;
	motor->en_gpio_port = en_port;
	motor->en_gpio_pin = en_pin;

	motor->last_speed = 0;
 80016a6:	2500      	movs	r5, #0
	motor->dir_gpio_pin = dir_pin;
 80016a8:	81a6      	strh	r6, [r4, #12]

	HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_RESET);
 80016aa:	4631      	mov	r1, r6
								 uint16_t en_pin) {
 80016ac:	9e07      	ldr	r6, [sp, #28]
	motor->last_speed = 0;
 80016ae:	82e5      	strh	r5, [r4, #22]
	motor->dir_gpio_port = dir_port;
 80016b0:	e9c4 2301 	strd	r2, r3, [r4, #4]
								 uint16_t en_pin) {
 80016b4:	4618      	mov	r0, r3
	HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_RESET);
 80016b6:	462a      	mov	r2, r5
	motor->en_gpio_port = en_port;
 80016b8:	6126      	str	r6, [r4, #16]
	motor->en_gpio_pin = en_pin;
 80016ba:	82a7      	strh	r7, [r4, #20]
	HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_RESET);
 80016bc:	f001 f81a 	bl	80026f4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(en_port, en_pin, GPIO_PIN_RESET);
 80016c0:	4639      	mov	r1, r7
 80016c2:	4630      	mov	r0, r6
 80016c4:	462a      	mov	r2, r5
 80016c6:	f001 f815 	bl	80026f4 <HAL_GPIO_WritePin>

	return HAL_TIM_OC_Start(motor->timer, motor->channel);
 80016ca:	e9d4 0100 	ldrd	r0, r1, [r4]
}
 80016ce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return HAL_TIM_OC_Start(motor->timer, motor->channel);
 80016d2:	f002 b913 	b.w	80038fc <HAL_TIM_OC_Start>
 80016d6:	bf00      	nop

080016d8 <StepMotor_SetSpeedLUT>:

void StepMotor_SetSpeedLUT(StepMotor* motor, int16_t speed) {
 80016d8:	b538      	push	{r3, r4, r5, lr}
	if (speed == motor->last_speed)
 80016da:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 80016de:	428b      	cmp	r3, r1
 80016e0:	d026      	beq.n	8001730 <StepMotor_SetSpeedLUT+0x58>
	{
		return;
	}
	else if (speed == -motor->last_speed)
 80016e2:	42d9      	cmn	r1, r3
 80016e4:	4605      	mov	r5, r0
 80016e6:	460c      	mov	r4, r1
 80016e8:	d036      	beq.n	8001758 <StepMotor_SetSpeedLUT+0x80>
	{
		motor->last_speed = speed;
		HAL_GPIO_TogglePin(motor->dir_gpio_port, motor->dir_gpio_pin);
		return;
	}
	else if (speed == 0)
 80016ea:	2900      	cmp	r1, #0
 80016ec:	d021      	beq.n	8001732 <StepMotor_SetSpeedLUT+0x5a>
		HAL_GPIO_TogglePin(motor->dir_gpio_port, motor->dir_gpio_pin);
 80016ee:	6880      	ldr	r0, [r0, #8]
 80016f0:	89a9      	ldrh	r1, [r5, #12]
		motor->last_speed = speed;
		return;
	}
	else
	{
		if (speed < 0)
 80016f2:	db2b      	blt.n	800174c <StepMotor_SetSpeedLUT+0x74>
			motor->last_speed = speed;
			speed = -speed;
		}
		else
		{
			HAL_GPIO_WritePin(motor->dir_gpio_port, motor->dir_gpio_pin, STEP_MOTOR_CCW);
 80016f4:	2201      	movs	r2, #1
 80016f6:	f000 fffd 	bl	80026f4 <HAL_GPIO_WritePin>
 80016fa:	4623      	mov	r3, r4
		else if (speed < MIN_LUT_SPEED)
		{
			speed = MIN_LUT_SPEED;
		}

		__HAL_TIM_SET_PRESCALER(motor->timer, LUT_PSC[speed - 1]);
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001702:	bfb8      	it	lt
 8001704:	2301      	movlt	r3, #1
 8001706:	4293      	cmp	r3, r2
 8001708:	6829      	ldr	r1, [r5, #0]
		__HAL_TIM_SET_AUTORELOAD(motor->timer, LUT_ARR[speed - 1]);
 800170a:	4817      	ldr	r0, [pc, #92]	@ (8001768 <StepMotor_SetSpeedLUT+0x90>)
		__HAL_TIM_SET_PRESCALER(motor->timer, LUT_PSC[speed - 1]);
 800170c:	bfa8      	it	ge
 800170e:	4613      	movge	r3, r2
 8001710:	3b01      	subs	r3, #1
 8001712:	680a      	ldr	r2, [r1, #0]
			motor->last_speed = speed;
 8001714:	82ec      	strh	r4, [r5, #22]
		__HAL_TIM_SET_PRESCALER(motor->timer, LUT_PSC[speed - 1]);
 8001716:	b21b      	sxth	r3, r3
 8001718:	4c14      	ldr	r4, [pc, #80]	@ (800176c <StepMotor_SetSpeedLUT+0x94>)
		__HAL_TIM_SET_AUTORELOAD(motor->timer, LUT_ARR[speed - 1]);
 800171a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
		__HAL_TIM_SET_PRESCALER(motor->timer, LUT_PSC[speed - 1]);
 800171e:	f834 4013 	ldrh.w	r4, [r4, r3, lsl #1]
 8001722:	6294      	str	r4, [r2, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(motor->timer, LUT_ARR[speed - 1]);
 8001724:	62d0      	str	r0, [r2, #44]	@ 0x2c

//		motor->timer->Instance->CNT = 0;
		motor->timer->Instance->EGR |= TIM_EGR_UG;
 8001726:	6953      	ldr	r3, [r2, #20]
		__HAL_TIM_SET_AUTORELOAD(motor->timer, LUT_ARR[speed - 1]);
 8001728:	60c8      	str	r0, [r1, #12]
		motor->timer->Instance->EGR |= TIM_EGR_UG;
 800172a:	f043 0301 	orr.w	r3, r3, #1
 800172e:	6153      	str	r3, [r2, #20]
		return;
	}
}
 8001730:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_TIM_SET_PRESCALER(motor->timer, 0xFFFF);
 8001732:	6801      	ldr	r1, [r0, #0]
 8001734:	680b      	ldr	r3, [r1, #0]
 8001736:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800173a:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(motor->timer, 0xFFFF);
 800173c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800173e:	60ca      	str	r2, [r1, #12]
		motor->timer->Instance->EGR |= TIM_EGR_UG;
 8001740:	695a      	ldr	r2, [r3, #20]
 8001742:	f042 0201 	orr.w	r2, r2, #1
 8001746:	615a      	str	r2, [r3, #20]
		motor->last_speed = speed;
 8001748:	82c4      	strh	r4, [r0, #22]
}
 800174a:	bd38      	pop	{r3, r4, r5, pc}
			HAL_GPIO_WritePin(motor->dir_gpio_port, motor->dir_gpio_pin, STEP_MOTOR_CW);
 800174c:	2200      	movs	r2, #0
 800174e:	f000 ffd1 	bl	80026f4 <HAL_GPIO_WritePin>
			speed = -speed;
 8001752:	4263      	negs	r3, r4
 8001754:	b21b      	sxth	r3, r3
 8001756:	e7d1      	b.n	80016fc <StepMotor_SetSpeedLUT+0x24>
		HAL_GPIO_TogglePin(motor->dir_gpio_port, motor->dir_gpio_pin);
 8001758:	8981      	ldrh	r1, [r0, #12]
 800175a:	6880      	ldr	r0, [r0, #8]
		motor->last_speed = speed;
 800175c:	82ec      	strh	r4, [r5, #22]
}
 800175e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_TogglePin(motor->dir_gpio_port, motor->dir_gpio_pin);
 8001762:	f000 bfcb 	b.w	80026fc <HAL_GPIO_TogglePin>
 8001766:	bf00      	nop
 8001768:	080091d4 	.word	0x080091d4
 800176c:	0800b8e4 	.word	0x0800b8e4

08001770 <StepMotor_Enable>:
void StepMotor_Enable(StepMotor* motor) {
 8001770:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(motor->en_gpio_port, motor->en_gpio_pin, GPIO_PIN_RESET);
 8001772:	8a81      	ldrh	r1, [r0, #20]
void StepMotor_Enable(StepMotor* motor) {
 8001774:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(motor->en_gpio_port, motor->en_gpio_pin, GPIO_PIN_RESET);
 8001776:	2200      	movs	r2, #0
 8001778:	6900      	ldr	r0, [r0, #16]
 800177a:	f000 ffbb 	bl	80026f4 <HAL_GPIO_WritePin>
    HAL_TIM_OC_Start(motor->timer, motor->channel);
 800177e:	e9d4 0100 	ldrd	r0, r1, [r4]
}
 8001782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_TIM_OC_Start(motor->timer, motor->channel);
 8001786:	f002 b8b9 	b.w	80038fc <HAL_TIM_OC_Start>
 800178a:	bf00      	nop

0800178c <StepMotor_Disable>:
void StepMotor_Disable(StepMotor* motor) {
 800178c:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(motor->en_gpio_port, motor->en_gpio_pin, GPIO_PIN_SET);
 800178e:	8a81      	ldrh	r1, [r0, #20]
void StepMotor_Disable(StepMotor* motor) {
 8001790:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(motor->en_gpio_port, motor->en_gpio_pin, GPIO_PIN_SET);
 8001792:	2201      	movs	r2, #1
 8001794:	6900      	ldr	r0, [r0, #16]
 8001796:	f000 ffad 	bl	80026f4 <HAL_GPIO_WritePin>
    HAL_TIM_OC_Stop(motor->timer, motor->channel);
 800179a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800179e:	f002 f909 	bl	80039b4 <HAL_TIM_OC_Stop>
    motor->timer->Instance->CNT = 0;
 80017a2:	6823      	ldr	r3, [r4, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2200      	movs	r2, #0
 80017a8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80017aa:	bd10      	pop	{r4, pc}

080017ac <DWT_Init>:
#include "Timing.h"

static uint32_t last_cycle = 0;

void DWT_Init(void) {
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 80017ac:	4908      	ldr	r1, [pc, #32]	@ (80017d0 <DWT_Init+0x24>)
    DWT->CYCCNT = 0;                                // Reset cycle counter
 80017ae:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <DWT_Init+0x28>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 80017b0:	f8d1 20fc 	ldr.w	r2, [r1, #252]	@ 0xfc
    DWT->CYCCNT = 0;                                // Reset cycle counter
 80017b4:	2000      	movs	r0, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 80017b6:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80017ba:	f8c1 20fc 	str.w	r2, [r1, #252]	@ 0xfc
    DWT->CYCCNT = 0;                                // Reset cycle counter
 80017be:	6058      	str	r0, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;           // Start cycle counter
 80017c0:	681a      	ldr	r2, [r3, #0]
    last_cycle = DWT->CYCCNT;
 80017c2:	4905      	ldr	r1, [pc, #20]	@ (80017d8 <DWT_Init+0x2c>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;           // Start cycle counter
 80017c4:	f042 0201 	orr.w	r2, r2, #1
 80017c8:	601a      	str	r2, [r3, #0]
    last_cycle = DWT->CYCCNT;
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	600b      	str	r3, [r1, #0]
}
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00
 80017d4:	e0001000 	.word	0xe0001000
 80017d8:	20000218 	.word	0x20000218

080017dc <DWT_GetDeltaTime>:

float DWT_GetDeltaTime(void) {
    uint32_t now_cycle = DWT->CYCCNT;
    uint32_t cycle_diff = now_cycle - last_cycle;
 80017dc:	4a08      	ldr	r2, [pc, #32]	@ (8001800 <DWT_GetDeltaTime+0x24>)
    uint32_t now_cycle = DWT->CYCCNT;
 80017de:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <DWT_GetDeltaTime+0x28>)
    last_cycle = now_cycle;
    return (float)cycle_diff / (float)SystemCoreClock;  // dt in seconds
 80017e0:	4809      	ldr	r0, [pc, #36]	@ (8001808 <DWT_GetDeltaTime+0x2c>)
    uint32_t now_cycle = DWT->CYCCNT;
 80017e2:	6859      	ldr	r1, [r3, #4]
    uint32_t cycle_diff = now_cycle - last_cycle;
 80017e4:	6813      	ldr	r3, [r2, #0]
    return (float)cycle_diff / (float)SystemCoreClock;  // dt in seconds
 80017e6:	ed90 0a00 	vldr	s0, [r0]
    last_cycle = now_cycle;
 80017ea:	6011      	str	r1, [r2, #0]
    uint32_t cycle_diff = now_cycle - last_cycle;
 80017ec:	1acb      	subs	r3, r1, r3
    return (float)cycle_diff / (float)SystemCoreClock;  // dt in seconds
 80017ee:	ee07 3a90 	vmov	s15, r3
 80017f2:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80017f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80017fa:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80017fe:	4770      	bx	lr
 8001800:	20000218 	.word	0x20000218
 8001804:	e0001000 	.word	0xe0001000
 8001808:	20000020 	.word	0x20000020

0800180c <MyProcessCommand>:
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void MyProcessCommand(CommandProtocol_Handle* handle) {
 800180c:	b570      	push	{r4, r5, r6, lr}
 800180e:	8902      	ldrh	r2, [r0, #8]
 8001810:	ba52      	rev16	r2, r2
	// Combine the first two characters into a 16-bit integer
	uint16_t encodedCommand = (handle->rxBuffer[0] << 8) | handle->rxBuffer[1];
    char response[50];

    switch(encodedCommand) {
 8001812:	f644 5153 	movw	r1, #19795	@ 0x4d53
 8001816:	b213      	sxth	r3, r2
 8001818:	428b      	cmp	r3, r1
void MyProcessCommand(CommandProtocol_Handle* handle) {
 800181a:	b094      	sub	sp, #80	@ 0x50
 800181c:	4604      	mov	r4, r0
    switch(encodedCommand) {
 800181e:	d042      	beq.n	80018a6 <MyProcessCommand+0x9a>
 8001820:	b292      	uxth	r2, r2
 8001822:	dd13      	ble.n	800184c <MyProcessCommand+0x40>
 8001824:	f245 4143 	movw	r1, #21571	@ 0x5443
 8001828:	428b      	cmp	r3, r1
 800182a:	d05f      	beq.n	80018ec <MyProcessCommand+0xe0>
 800182c:	f245 414c 	movw	r1, #21580	@ 0x544c
 8001830:	428b      	cmp	r3, r1
 8001832:	d175      	bne.n	8001920 <MyProcessCommand+0x114>
        case CMD_TEST_LED:
            HAL_GPIO_TogglePin(TEST_LED_GPIO_Port, TEST_LED_Pin);
 8001834:	4848      	ldr	r0, [pc, #288]	@ (8001958 <MyProcessCommand+0x14c>)
 8001836:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800183a:	f000 ff5f 	bl	80026fc <HAL_GPIO_TogglePin>
            CommandProtocol_SendResponse(handle, "LED TOGGLED!\n");
 800183e:	4947      	ldr	r1, [pc, #284]	@ (800195c <MyProcessCommand+0x150>)
 8001840:	4620      	mov	r0, r4
        default:
            sprintf(response, "Unknown command: %d\n", encodedCommand);
        	CommandProtocol_SendResponse(handle, response);
        	break;
    }
}
 8001842:	b014      	add	sp, #80	@ 0x50
 8001844:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            CommandProtocol_SendResponse(handle, "LED TOGGLED!\n");
 8001848:	f7ff bf0e 	b.w	8001668 <CommandProtocol_SendResponse>
    switch(encodedCommand) {
 800184c:	f244 1142 	movw	r1, #16706	@ 0x4142
 8001850:	428b      	cmp	r3, r1
 8001852:	d03e      	beq.n	80018d2 <MyProcessCommand+0xc6>
 8001854:	f244 3150 	movw	r1, #17232	@ 0x4350
 8001858:	428b      	cmp	r3, r1
 800185a:	d161      	bne.n	8001920 <MyProcessCommand+0x114>
			char paramType[3] = {handle->rxBuffer[2], handle->rxBuffer[3], '\0'};
 800185c:	f100 050a 	add.w	r5, r0, #10
 8001860:	8942      	ldrh	r2, [r0, #10]
 8001862:	f8ad 2000 	strh.w	r2, [sp]
 8001866:	2300      	movs	r3, #0
			if (ParsePIDParametersFromUART(&pidObj, recievedShit, strlen(recievedShit))) {
 8001868:	4628      	mov	r0, r5
			char paramType[3] = {handle->rxBuffer[2], handle->rxBuffer[3], '\0'};
 800186a:	f88d 3002 	strb.w	r3, [sp, #2]
			if (ParsePIDParametersFromUART(&pidObj, recievedShit, strlen(recievedShit))) {
 800186e:	f7fe fd07 	bl	8000280 <strlen>
 8001872:	4629      	mov	r1, r5
 8001874:	b282      	uxth	r2, r0
 8001876:	483a      	ldr	r0, [pc, #232]	@ (8001960 <MyProcessCommand+0x154>)
 8001878:	f7ff fd16 	bl	80012a8 <ParsePIDParametersFromUART>
				sprintf(response, "PID %s parameters updated successfully, %s\n", paramType, &handle->rxBuffer[4]);
 800187c:	ae07      	add	r6, sp, #28
			if (ParsePIDParametersFromUART(&pidObj, recievedShit, strlen(recievedShit))) {
 800187e:	b950      	cbnz	r0, 8001896 <MyProcessCommand+0x8a>
				sprintf(response, "Error: Failed to parse PID %s parameters\n", paramType);
 8001880:	4938      	ldr	r1, [pc, #224]	@ (8001964 <MyProcessCommand+0x158>)
 8001882:	466a      	mov	r2, sp
 8001884:	4630      	mov	r0, r6
 8001886:	f004 fed3 	bl	8006630 <siprintf>
			CommandProtocol_SendResponse(handle, response);
 800188a:	4631      	mov	r1, r6
 800188c:	4620      	mov	r0, r4
 800188e:	f7ff feeb 	bl	8001668 <CommandProtocol_SendResponse>
}
 8001892:	b014      	add	sp, #80	@ 0x50
 8001894:	bd70      	pop	{r4, r5, r6, pc}
				sprintf(response, "PID %s parameters updated successfully, %s\n", paramType, &handle->rxBuffer[4]);
 8001896:	4934      	ldr	r1, [pc, #208]	@ (8001968 <MyProcessCommand+0x15c>)
 8001898:	f104 030c 	add.w	r3, r4, #12
 800189c:	466a      	mov	r2, sp
 800189e:	4630      	mov	r0, r6
 80018a0:	f004 fec6 	bl	8006630 <siprintf>
 80018a4:	e7f1      	b.n	800188a <MyProcessCommand+0x7e>
			int index = handle->rxBuffer[2] - '0'; // Convert char to int by subtracting '0'
 80018a6:	7a85      	ldrb	r5, [r0, #10]
			char state = handle->rxBuffer[3];
 80018a8:	7ac6      	ldrb	r6, [r0, #11]
				StepMotor_Enable(motorArray[index]);
 80018aa:	4b30      	ldr	r3, [pc, #192]	@ (800196c <MyProcessCommand+0x160>)
			int index = handle->rxBuffer[2] - '0'; // Convert char to int by subtracting '0'
 80018ac:	3d30      	subs	r5, #48	@ 0x30
			if (state == '1') {
 80018ae:	2e31      	cmp	r6, #49	@ 0x31
				StepMotor_Enable(motorArray[index]);
 80018b0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
			if (state == '1') {
 80018b4:	d04c      	beq.n	8001950 <MyProcessCommand+0x144>
				StepMotor_Disable(motorArray[index]);
 80018b6:	f7ff ff69 	bl	800178c <StepMotor_Disable>
			sprintf(response, "Motor %d is at state %c\n", index, state);
 80018ba:	4633      	mov	r3, r6
 80018bc:	462a      	mov	r2, r5
 80018be:	492c      	ldr	r1, [pc, #176]	@ (8001970 <MyProcessCommand+0x164>)
 80018c0:	a807      	add	r0, sp, #28
 80018c2:	f004 feb5 	bl	8006630 <siprintf>
			CommandProtocol_SendResponse(handle, response);
 80018c6:	a907      	add	r1, sp, #28
 80018c8:	4620      	mov	r0, r4
 80018ca:	f7ff fecd 	bl	8001668 <CommandProtocol_SendResponse>
}
 80018ce:	b014      	add	sp, #80	@ 0x50
 80018d0:	bd70      	pop	{r4, r5, r6, pc}
            sprintf(response, "AS5600 Angles: %d, %d\n", sensors.angles[0], sensors.angles[1]);
 80018d2:	4a28      	ldr	r2, [pc, #160]	@ (8001974 <MyProcessCommand+0x168>)
 80018d4:	4928      	ldr	r1, [pc, #160]	@ (8001978 <MyProcessCommand+0x16c>)
 80018d6:	8913      	ldrh	r3, [r2, #8]
 80018d8:	88d2      	ldrh	r2, [r2, #6]
 80018da:	a807      	add	r0, sp, #28
 80018dc:	f004 fea8 	bl	8006630 <siprintf>
            CommandProtocol_SendResponse(handle, response);
 80018e0:	a907      	add	r1, sp, #28
 80018e2:	4620      	mov	r0, r4
 80018e4:	f7ff fec0 	bl	8001668 <CommandProtocol_SendResponse>
}
 80018e8:	b014      	add	sp, #80	@ 0x50
 80018ea:	bd70      	pop	{r4, r5, r6, pc}
        	if (Trajectory_ParseCoeffs((const char*)&handle->rxBuffer[2], parsed_coeffs, TRAJ_COEFF_LEN) == HAL_OK) {
 80018ec:	2206      	movs	r2, #6
 80018ee:	a901      	add	r1, sp, #4
 80018f0:	300a      	adds	r0, #10
 80018f2:	f7ff fd65 	bl	80013c0 <Trajectory_ParseCoeffs>
 80018f6:	b9e8      	cbnz	r0, 8001934 <MyProcessCommand+0x128>
				sprintf(response, "Trajectory coefficients set successfully\n");
 80018f8:	4d20      	ldr	r5, [pc, #128]	@ (800197c <MyProcessCommand+0x170>)
        		Trajectory_SetCoefficients(&robotTraj, parsed_coeffs);
 80018fa:	4821      	ldr	r0, [pc, #132]	@ (8001980 <MyProcessCommand+0x174>)
 80018fc:	a901      	add	r1, sp, #4
 80018fe:	f7ff fd57 	bl	80013b0 <Trajectory_SetCoefficients>
				sprintf(response, "Trajectory coefficients set successfully\n");
 8001902:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001904:	ae07      	add	r6, sp, #28
 8001906:	46b4      	mov	ip, r6
 8001908:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800190c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800190e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001912:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001916:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 800191a:	f8ac 2000 	strh.w	r2, [ip]
 800191e:	e7b4      	b.n	800188a <MyProcessCommand+0x7e>
            sprintf(response, "Unknown command: %d\n", encodedCommand);
 8001920:	4918      	ldr	r1, [pc, #96]	@ (8001984 <MyProcessCommand+0x178>)
 8001922:	a807      	add	r0, sp, #28
 8001924:	f004 fe84 	bl	8006630 <siprintf>
        	CommandProtocol_SendResponse(handle, response);
 8001928:	a907      	add	r1, sp, #28
 800192a:	4620      	mov	r0, r4
 800192c:	f7ff fe9c 	bl	8001668 <CommandProtocol_SendResponse>
}
 8001930:	b014      	add	sp, #80	@ 0x50
 8001932:	bd70      	pop	{r4, r5, r6, pc}
				sprintf(response, "Error: Failed to parse trajectory coefficients\n");
 8001934:	4d14      	ldr	r5, [pc, #80]	@ (8001988 <MyProcessCommand+0x17c>)
 8001936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001938:	ae07      	add	r6, sp, #28
 800193a:	46b4      	mov	ip, r6
 800193c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001942:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001946:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800194a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800194e:	e79c      	b.n	800188a <MyProcessCommand+0x7e>
				StepMotor_Enable(motorArray[index]);
 8001950:	f7ff ff0e 	bl	8001770 <StepMotor_Enable>
 8001954:	e7b1      	b.n	80018ba <MyProcessCommand+0xae>
 8001956:	bf00      	nop
 8001958:	40020800 	.word	0x40020800
 800195c:	0800dff4 	.word	0x0800dff4
 8001960:	200002d0 	.word	0x200002d0
 8001964:	0800e04c 	.word	0x0800e04c
 8001968:	0800e020 	.word	0x0800e020
 800196c:	20000484 	.word	0x20000484
 8001970:	0800e004 	.word	0x0800e004
 8001974:	200004cc 	.word	0x200004cc
 8001978:	0800e0d4 	.word	0x0800e0d4
 800197c:	0800e078 	.word	0x0800e078
 8001980:	2000021c 	.word	0x2000021c
 8001984:	0800e0ec 	.word	0x0800e0ec
 8001988:	0800e0a4 	.word	0x0800e0a4

0800198c <SystemClock_Config>:
{
 800198c:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198e:	2300      	movs	r3, #0
{
 8001990:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001992:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8001996:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800199a:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800199e:	e9cd 3305 	strd	r3, r3, [sp, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a2:	4920      	ldr	r1, [pc, #128]	@ (8001a24 <SystemClock_Config+0x98>)
 80019a4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019a6:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a8:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001a28 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ac:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 80019b0:	6408      	str	r0, [r1, #64]	@ 0x40
 80019b2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80019b4:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 80019b8:	9101      	str	r1, [sp, #4]
 80019ba:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019bc:	9302      	str	r3, [sp, #8]
 80019be:	6813      	ldr	r3, [r2, #0]
 80019c0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019c4:	6013      	str	r3, [r2, #0]
 80019c6:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019c8:	2001      	movs	r0, #1
 80019ca:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ce:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019d2:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d6:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019dc:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019de:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e2:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019e4:	2104      	movs	r1, #4
 80019e6:	2002      	movs	r0, #2
 80019e8:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 80019ec:	220c      	movs	r2, #12
  RCC_OscInitStruct.PLL.PLLN = 96;
 80019ee:	2360      	movs	r3, #96	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f0:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 12;
 80019f2:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80019f4:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f6:	f001 fb85 	bl	8003104 <HAL_RCC_OscConfig>
 80019fa:	b108      	cbz	r0, 8001a00 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019fc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019fe:	e7fe      	b.n	80019fe <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a00:	210f      	movs	r1, #15
 8001a02:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a04:	e9cd 1403 	strd	r1, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001a08:	2280      	movs	r2, #128	@ 0x80
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a0a:	a803      	add	r0, sp, #12
 8001a0c:	2101      	movs	r1, #1
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a12:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001a14:	f001 fd8c 	bl	8003530 <HAL_RCC_ClockConfig>
 8001a18:	b108      	cbz	r0, 8001a1e <SystemClock_Config+0x92>
 8001a1a:	b672      	cpsid	i
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <SystemClock_Config+0x90>
}
 8001a1e:	b014      	add	sp, #80	@ 0x50
 8001a20:	bd10      	pop	{r4, pc}
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40007000 	.word	0x40007000

08001a2c <HAL_UART_RxCpltCallback>:
{
 8001a2c:	b538      	push	{r3, r4, r5, lr}
	if (huart == cmdHandle.huart) {
 8001a2e:	4c0b      	ldr	r4, [pc, #44]	@ (8001a5c <HAL_UART_RxCpltCallback+0x30>)
 8001a30:	6825      	ldr	r5, [r4, #0]
 8001a32:	4285      	cmp	r5, r0
 8001a34:	d000      	beq.n	8001a38 <HAL_UART_RxCpltCallback+0xc>
}
 8001a36:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t receivedByte = cmdHandle.rxBuffer[cmdHandle.rxIndex];
 8001a38:	f894 33f0 	ldrb.w	r3, [r4, #1008]	@ 0x3f0
 8001a3c:	4423      	add	r3, r4
		CommandProtocol_ProcessByte(&cmdHandle, receivedByte);
 8001a3e:	4620      	mov	r0, r4
 8001a40:	7a19      	ldrb	r1, [r3, #8]
 8001a42:	f7ff fdf1 	bl	8001628 <CommandProtocol_ProcessByte>
		HAL_UART_Receive_IT(huart, &cmdHandle.rxBuffer[cmdHandle.rxIndex], 1);
 8001a46:	f894 13f0 	ldrb.w	r1, [r4, #1008]	@ 0x3f0
 8001a4a:	3108      	adds	r1, #8
 8001a4c:	4421      	add	r1, r4
 8001a4e:	4628      	mov	r0, r5
 8001a50:	2201      	movs	r2, #1
}
 8001a52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_UART_Receive_IT(huart, &cmdHandle.rxBuffer[cmdHandle.rxIndex], 1);
 8001a56:	f002 bb3f 	b.w	80040d8 <HAL_UART_Receive_IT>
 8001a5a:	bf00      	nop
 8001a5c:	200004ec 	.word	0x200004ec

08001a60 <HAL_TIM_PeriodElapsedCallback>:
    if (htim->Instance == TIM11)
 8001a60:	4b04      	ldr	r3, [pc, #16]	@ (8001a74 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001a62:	6802      	ldr	r2, [r0, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d000      	beq.n	8001a6a <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001a68:	4770      	bx	lr
    	globalControllerFlag = 1;
 8001a6a:	4b03      	ldr	r3, [pc, #12]	@ (8001a78 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
}
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40014800 	.word	0x40014800
 8001a78:	200008e1 	.word	0x200008e1

08001a7c <setup_motors>:
void setup_motors() {
 8001a7c:	b570      	push	{r4, r5, r6, lr}
    statusCheck = StepMotor_Init(&l1_motor, &htim5, TIM_CHANNEL_1, M1_DIR_GPIO_Port, M1_DIR_Pin, M1_EN_GPIO_Port, M1_EN_Pin);
 8001a7e:	4b16      	ldr	r3, [pc, #88]	@ (8001ad8 <setup_motors+0x5c>)
 8001a80:	4d16      	ldr	r5, [pc, #88]	@ (8001adc <setup_motors+0x60>)
 8001a82:	4917      	ldr	r1, [pc, #92]	@ (8001ae0 <setup_motors+0x64>)
 8001a84:	4e17      	ldr	r6, [pc, #92]	@ (8001ae4 <setup_motors+0x68>)
    statusCheck = StepMotor_Init(&l2_motor, &htim9, TIM_CHANNEL_1, M2_DIR_GPIO_Port, M2_DIR_Pin, M2_EN_GPIO_Port, M2_EN_Pin);
 8001a86:	4c18      	ldr	r4, [pc, #96]	@ (8001ae8 <setup_motors+0x6c>)
void setup_motors() {
 8001a88:	b084      	sub	sp, #16
    statusCheck = StepMotor_Init(&l1_motor, &htim5, TIM_CHANNEL_1, M1_DIR_GPIO_Port, M1_DIR_Pin, M1_EN_GPIO_Port, M1_EN_Pin);
 8001a8a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a8e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001a92:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8001a96:	9000      	str	r0, [sp, #0]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	4628      	mov	r0, r5
 8001a9c:	f7ff fdfc 	bl	8001698 <StepMotor_Init>
    statusCheck = StepMotor_Init(&l2_motor, &htim9, TIM_CHANNEL_1, M2_DIR_GPIO_Port, M2_DIR_Pin, M2_EN_GPIO_Port, M2_EN_Pin);
 8001aa0:	4b12      	ldr	r3, [pc, #72]	@ (8001aec <setup_motors+0x70>)
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	2208      	movs	r2, #8
    statusCheck = StepMotor_Init(&l1_motor, &htim5, TIM_CHANNEL_1, M1_DIR_GPIO_Port, M1_DIR_Pin, M1_EN_GPIO_Port, M1_EN_Pin);
 8001aa6:	7030      	strb	r0, [r6, #0]
    statusCheck = StepMotor_Init(&l2_motor, &htim9, TIM_CHANNEL_1, M2_DIR_GPIO_Port, M2_DIR_Pin, M2_EN_GPIO_Port, M2_EN_Pin);
 8001aa8:	9202      	str	r2, [sp, #8]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	9200      	str	r2, [sp, #0]
 8001aae:	4910      	ldr	r1, [pc, #64]	@ (8001af0 <setup_motors+0x74>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	f7ff fdf0 	bl	8001698 <StepMotor_Init>
    motorArray[0] = &l1_motor;
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	@ (8001af4 <setup_motors+0x78>)
    statusCheck = StepMotor_Init(&l2_motor, &htim9, TIM_CHANNEL_1, M2_DIR_GPIO_Port, M2_DIR_Pin, M2_EN_GPIO_Port, M2_EN_Pin);
 8001aba:	7030      	strb	r0, [r6, #0]
    StepMotor_SetSpeedLUT(&l1_motor, 0); // Set motor speed to 0 Initially
 8001abc:	2100      	movs	r1, #0
 8001abe:	4628      	mov	r0, r5
    motorArray[1] = &l2_motor;
 8001ac0:	e9c3 5400 	strd	r5, r4, [r3]
    StepMotor_SetSpeedLUT(&l1_motor, 0); // Set motor speed to 0 Initially
 8001ac4:	f7ff fe08 	bl	80016d8 <StepMotor_SetSpeedLUT>
    StepMotor_SetSpeedLUT(&l2_motor, 0); // Set motor speed to 0 Initially
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4620      	mov	r0, r4
}
 8001acc:	b004      	add	sp, #16
 8001ace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    StepMotor_SetSpeedLUT(&l2_motor, 0); // Set motor speed to 0 Initially
 8001ad2:	f7ff be01 	b.w	80016d8 <StepMotor_SetSpeedLUT>
 8001ad6:	bf00      	nop
 8001ad8:	40020800 	.word	0x40020800
 8001adc:	200004b0 	.word	0x200004b0
 8001ae0:	200009c0 	.word	0x200009c0
 8001ae4:	200008e0 	.word	0x200008e0
 8001ae8:	20000494 	.word	0x20000494
 8001aec:	40020000 	.word	0x40020000
 8001af0:	20000978 	.word	0x20000978
 8001af4:	20000484 	.word	0x20000484

08001af8 <main>:
{
 8001af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  CommandProtocol_SetCommandProcessor(MyProcessCommand);
 8001afc:	48ae      	ldr	r0, [pc, #696]	@ (8001db8 <main+0x2c0>)
{
 8001afe:	b093      	sub	sp, #76	@ 0x4c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b00:	2400      	movs	r4, #0
  CommandProtocol_SetCommandProcessor(MyProcessCommand);
 8001b02:	f7ff fd79 	bl	80015f8 <CommandProtocol_SetCommandProcessor>
  HAL_Init();
 8001b06:	f000 fc01 	bl	800230c <HAL_Init>
  SystemClock_Config();
 8001b0a:	f7ff ff3f 	bl	800198c <SystemClock_Config>
  DWT_Init();
 8001b0e:	f7ff fe4d 	bl	80017ac <DWT_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b12:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 8001b16:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1a:	4ba8      	ldr	r3, [pc, #672]	@ (8001dbc <main+0x2c4>)
 8001b1c:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1e:	940e      	str	r4, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOC, TEST_LED_Pin|M1_DIR_Pin|M1_EN_Pin, GPIO_PIN_RESET);
 8001b22:	48a7      	ldr	r0, [pc, #668]	@ (8001dc0 <main+0x2c8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b24:	f042 0204 	orr.w	r2, r2, #4
 8001b28:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b2c:	f002 0204 	and.w	r2, r2, #4
 8001b30:	9200      	str	r2, [sp, #0]
 8001b32:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b34:	9401      	str	r4, [sp, #4]
 8001b36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b38:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001b3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b40:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001b44:	9201      	str	r2, [sp, #4]
 8001b46:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b48:	9402      	str	r4, [sp, #8]
 8001b4a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b4c:	f042 0201 	orr.w	r2, r2, #1
 8001b50:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b54:	f002 0201 	and.w	r2, r2, #1
 8001b58:	9202      	str	r2, [sp, #8]
 8001b5a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5c:	9403      	str	r4, [sp, #12]
 8001b5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001b60:	f042 0202 	orr.w	r2, r2, #2
 8001b64:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b68:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, TEST_LED_Pin|M1_DIR_Pin|M1_EN_Pin, GPIO_PIN_RESET);
 8001b6c:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b70:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, TEST_LED_Pin|M1_DIR_Pin|M1_EN_Pin, GPIO_PIN_RESET);
 8001b72:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b74:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, TEST_LED_Pin|M1_DIR_Pin|M1_EN_Pin, GPIO_PIN_RESET);
 8001b76:	f000 fdbd 	bl	80026f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, M2_DIR_Pin|M2_EN_Pin, GPIO_PIN_RESET);
 8001b7a:	4622      	mov	r2, r4
 8001b7c:	4891      	ldr	r0, [pc, #580]	@ (8001dc4 <main+0x2cc>)
 8001b7e:	210a      	movs	r1, #10
 8001b80:	f000 fdb8 	bl	80026f4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b84:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = TEST_LED_Pin|M1_DIR_Pin;
 8001b86:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8a:	488d      	ldr	r0, [pc, #564]	@ (8001dc0 <main+0x2c8>)
 8001b8c:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b8e:	2502      	movs	r5, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	e9cd 360a 	strd	r3, r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = M1_EN_Pin;
 8001b94:	f44f 4700 	mov.w	r7, #32768	@ 0x8000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9c:	f000 fcb4 	bl	8002508 <HAL_GPIO_Init>
  HAL_GPIO_Init(M1_EN_GPIO_Port, &GPIO_InitStruct);
 8001ba0:	4887      	ldr	r0, [pc, #540]	@ (8001dc0 <main+0x2c8>)
 8001ba2:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ba4:	e9cd 760a 	strd	r7, r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	e9cd 540c 	strd	r5, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(M1_EN_GPIO_Port, &GPIO_InitStruct);
 8001bac:	f000 fcac 	bl	8002508 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M2_DIR_Pin|M2_EN_Pin;
 8001bb0:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb2:	4884      	ldr	r0, [pc, #528]	@ (8001dc4 <main+0x2cc>)
  GPIO_InitStruct.Pin = M2_DIR_Pin|M2_EN_Pin;
 8001bb4:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	e9cd 640b 	strd	r6, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	940d      	str	r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbe:	f000 fca3 	bl	8002508 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001bc2:	2333      	movs	r3, #51	@ 0x33
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc4:	4880      	ldr	r0, [pc, #512]	@ (8001dc8 <main+0x2d0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001bc6:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc8:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bca:	e9cd 540b 	strd	r5, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bce:	e9cd 450d 	strd	r4, r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd2:	f000 fc99 	bl	8002508 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001bd6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	487a      	ldr	r0, [pc, #488]	@ (8001dc4 <main+0x2cc>)
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001bdc:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bde:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	e9cd 540b 	strd	r5, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001be4:	e9cd 460d 	strd	r4, r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be8:	f000 fc8e 	bl	8002508 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bec:	4875      	ldr	r0, [pc, #468]	@ (8001dc4 <main+0x2cc>)
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bee:	970a      	str	r7, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf0:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	e9cd 540b 	strd	r5, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bf6:	e9cd 460d 	strd	r4, r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	f000 fc85 	bl	8002508 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001bfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	e9cd 350a 	strd	r3, r5, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c06:	4870      	ldr	r0, [pc, #448]	@ (8001dc8 <main+0x2d0>)
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001c08:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c0a:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001c0c:	930e      	str	r3, [sp, #56]	@ 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	f000 fc79 	bl	8002508 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c16:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1a:	486b      	ldr	r0, [pc, #428]	@ (8001dc8 <main+0x2d0>)
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c1c:	950e      	str	r5, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1e:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c20:	e9cd 350a 	strd	r3, r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c28:	f000 fc6e 	bl	8002508 <HAL_GPIO_Init>
  huart1.Instance = USART1;
 8001c2c:	4867      	ldr	r0, [pc, #412]	@ (8001dcc <main+0x2d4>)
  huart1.Init.BaudRate = 115200;
 8001c2e:	4a68      	ldr	r2, [pc, #416]	@ (8001dd0 <main+0x2d8>)
 8001c30:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001c34:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c38:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c3a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c3e:	e9c0 4304 	strd	r4, r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c42:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c46:	f002 f947 	bl	8003ed8 <HAL_UART_Init>
 8001c4a:	b108      	cbz	r0, 8001c50 <main+0x158>
 8001c4c:	b672      	cpsid	i
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <main+0x156>
  hi2c1.Instance = I2C1;
 8001c50:	4603      	mov	r3, r0
  hi2c1.Init.ClockSpeed = 400000;
 8001c52:	4a60      	ldr	r2, [pc, #384]	@ (8001dd4 <main+0x2dc>)
  hi2c1.Instance = I2C1;
 8001c54:	4860      	ldr	r0, [pc, #384]	@ (8001dd8 <main+0x2e0>)
  hi2c1.Init.ClockSpeed = 400000;
 8001c56:	4961      	ldr	r1, [pc, #388]	@ (8001ddc <main+0x2e4>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c58:	6203      	str	r3, [r0, #32]
  hi2c1.Init.ClockSpeed = 400000;
 8001c5a:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8001c62:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c66:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c6a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c6e:	f000 fdd7 	bl	8002820 <HAL_I2C_Init>
 8001c72:	b108      	cbz	r0, 8001c78 <main+0x180>
 8001c74:	b672      	cpsid	i
  while (1)
 8001c76:	e7fe      	b.n	8001c76 <main+0x17e>
  htim11.Instance = TIM11;
 8001c78:	4c59      	ldr	r4, [pc, #356]	@ (8001de0 <main+0x2e8>)
  htim11.Init.Prescaler = 5000-1;
 8001c7a:	4a5a      	ldr	r2, [pc, #360]	@ (8001de4 <main+0x2ec>)
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7c:	6120      	str	r0, [r4, #16]
  htim11.Init.Prescaler = 5000-1;
 8001c7e:	f241 3387 	movw	r3, #4999	@ 0x1387
 8001c82:	e9c4 2300 	strd	r2, r3, [r4]
  htim11.Init.Period = 100-1;
 8001c86:	2363      	movs	r3, #99	@ 0x63
 8001c88:	e9c4 0302 	strd	r0, r3, [r4, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c8c:	2780      	movs	r7, #128	@ 0x80
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001c8e:	4620      	mov	r0, r4
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c90:	61a7      	str	r7, [r4, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001c92:	f001 fd0b 	bl	80036ac <HAL_TIM_Base_Init>
 8001c96:	4605      	mov	r5, r0
 8001c98:	b108      	cbz	r0, 8001c9e <main+0x1a6>
 8001c9a:	b672      	cpsid	i
  while (1)
 8001c9c:	e7fe      	b.n	8001c9c <main+0x1a4>
  htim5.Instance = TIM5;
 8001c9e:	4e52      	ldr	r6, [pc, #328]	@ (8001de8 <main+0x2f0>)
  HAL_TIM_Base_Start_IT(&htim11); // Start controller timer
 8001ca0:	4620      	mov	r0, r4
 8001ca2:	f001 fd7d 	bl	80037a0 <HAL_TIM_Base_Start_IT>
  htim5.Init.Prescaler = 65535;
 8001ca6:	f64f 78ff 	movw	r8, #65535	@ 0xffff
  htim5.Instance = TIM5;
 8001caa:	4b50      	ldr	r3, [pc, #320]	@ (8001dec <main+0x2f4>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cac:	9504      	str	r5, [sp, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001cae:	4630      	mov	r0, r6
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cb0:	e9cd 5506 	strd	r5, r5, [sp, #24]
 8001cb4:	e9cd 5508 	strd	r5, r5, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cb8:	e9cd 550a 	strd	r5, r5, [sp, #40]	@ 0x28
 8001cbc:	e9cd 550c 	strd	r5, r5, [sp, #48]	@ 0x30
 8001cc0:	e9cd 550e 	strd	r5, r5, [sp, #56]	@ 0x38
 8001cc4:	9510      	str	r5, [sp, #64]	@ 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cc6:	9505      	str	r5, [sp, #20]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc8:	60b5      	str	r5, [r6, #8]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cca:	6135      	str	r5, [r6, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ccc:	61b7      	str	r7, [r6, #24]
  htim5.Init.Prescaler = 65535;
 8001cce:	f8c6 8004 	str.w	r8, [r6, #4]
  htim5.Init.Period = 65535;
 8001cd2:	f8c6 800c 	str.w	r8, [r6, #12]
  htim5.Instance = TIM5;
 8001cd6:	6033      	str	r3, [r6, #0]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001cd8:	f001 fce8 	bl	80036ac <HAL_TIM_Base_Init>
 8001cdc:	b108      	cbz	r0, 8001ce2 <main+0x1ea>
 8001cde:	b672      	cpsid	i
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <main+0x1e8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce2:	f44f 5980 	mov.w	r9, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001ce6:	a906      	add	r1, sp, #24
 8001ce8:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cea:	f8cd 9018 	str.w	r9, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001cee:	f001 ff69 	bl	8003bc4 <HAL_TIM_ConfigClockSource>
 8001cf2:	b108      	cbz	r0, 8001cf8 <main+0x200>
 8001cf4:	b672      	cpsid	i
  while (1)
 8001cf6:	e7fe      	b.n	8001cf6 <main+0x1fe>
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001cf8:	4630      	mov	r0, r6
 8001cfa:	f001 fd85 	bl	8003808 <HAL_TIM_OC_Init>
 8001cfe:	b108      	cbz	r0, 8001d04 <main+0x20c>
 8001d00:	b672      	cpsid	i
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <main+0x20a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d04:	2200      	movs	r2, #0
 8001d06:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d08:	a904      	add	r1, sp, #16
 8001d0a:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d10:	f002 f8a6 	bl	8003e60 <HAL_TIMEx_MasterConfigSynchronization>
 8001d14:	4602      	mov	r2, r0
 8001d16:	b108      	cbz	r0, 8001d1c <main+0x224>
 8001d18:	b672      	cpsid	i
  while (1)
 8001d1a:	e7fe      	b.n	8001d1a <main+0x222>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d1c:	900c      	str	r0, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d1e:	900e      	str	r0, [sp, #56]	@ 0x38
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001d20:	2430      	movs	r4, #48	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d22:	a90a      	add	r1, sp, #40	@ 0x28
 8001d24:	4630      	mov	r0, r6
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001d26:	2500      	movs	r5, #0
 8001d28:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d2c:	f001 fe8e 	bl	8003a4c <HAL_TIM_OC_ConfigChannel>
 8001d30:	4604      	mov	r4, r0
 8001d32:	b108      	cbz	r0, 8001d38 <main+0x240>
 8001d34:	b672      	cpsid	i
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <main+0x23e>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim5, TIM_CHANNEL_1);
 8001d38:	6832      	ldr	r2, [r6, #0]
  htim9.Instance = TIM9;
 8001d3a:	4d2d      	ldr	r5, [pc, #180]	@ (8001df0 <main+0x2f8>)
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim5, TIM_CHANNEL_1);
 8001d3c:	6993      	ldr	r3, [r2, #24]
 8001d3e:	f043 0308 	orr.w	r3, r3, #8
  HAL_TIM_MspPostInit(&htim5);
 8001d42:	4630      	mov	r0, r6
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim5, TIM_CHANNEL_1);
 8001d44:	6193      	str	r3, [r2, #24]
  HAL_TIM_MspPostInit(&htim5);
 8001d46:	f000 f97f 	bl	8002048 <HAL_TIM_MspPostInit>
  htim9.Instance = TIM9;
 8001d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001df4 <main+0x2fc>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d4c:	9410      	str	r4, [sp, #64]	@ 0x40
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001d4e:	4628      	mov	r0, r5
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d50:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8001d54:	e9cd 4408 	strd	r4, r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d58:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 8001d5c:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
 8001d60:	e9cd 440e 	strd	r4, r4, [sp, #56]	@ 0x38
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d64:	e9c5 4802 	strd	r4, r8, [r5, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d68:	61af      	str	r7, [r5, #24]
  htim9.Init.Prescaler = 65535;
 8001d6a:	f8c5 8004 	str.w	r8, [r5, #4]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6e:	612c      	str	r4, [r5, #16]
  htim9.Instance = TIM9;
 8001d70:	602b      	str	r3, [r5, #0]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001d72:	f001 fc9b 	bl	80036ac <HAL_TIM_Base_Init>
 8001d76:	b108      	cbz	r0, 8001d7c <main+0x284>
 8001d78:	b672      	cpsid	i
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <main+0x282>
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001d7c:	a906      	add	r1, sp, #24
 8001d7e:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d80:	f8cd 9018 	str.w	r9, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001d84:	f001 ff1e 	bl	8003bc4 <HAL_TIM_ConfigClockSource>
 8001d88:	b108      	cbz	r0, 8001d8e <main+0x296>
 8001d8a:	b672      	cpsid	i
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <main+0x294>
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 8001d8e:	4818      	ldr	r0, [pc, #96]	@ (8001df0 <main+0x2f8>)
 8001d90:	f001 fd3a 	bl	8003808 <HAL_TIM_OC_Init>
 8001d94:	4602      	mov	r2, r0
 8001d96:	b108      	cbz	r0, 8001d9c <main+0x2a4>
 8001d98:	b672      	cpsid	i
  while (1)
 8001d9a:	e7fe      	b.n	8001d9a <main+0x2a2>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001d9c:	2630      	movs	r6, #48	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d9e:	4814      	ldr	r0, [pc, #80]	@ (8001df0 <main+0x2f8>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001da0:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001da2:	2700      	movs	r7, #0
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001da4:	a90a      	add	r1, sp, #40	@ 0x28
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001da6:	e9cd 670a 	strd	r6, r7, [sp, #40]	@ 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001daa:	920e      	str	r2, [sp, #56]	@ 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dac:	f001 fe4e 	bl	8003a4c <HAL_TIM_OC_ConfigChannel>
 8001db0:	4606      	mov	r6, r0
 8001db2:	b308      	cbz	r0, 8001df8 <main+0x300>
 8001db4:	b672      	cpsid	i
  while (1)
 8001db6:	e7fe      	b.n	8001db6 <main+0x2be>
 8001db8:	0800180d 	.word	0x0800180d
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40020800 	.word	0x40020800
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	40020400 	.word	0x40020400
 8001dcc:	200008e8 	.word	0x200008e8
 8001dd0:	40011000 	.word	0x40011000
 8001dd4:	00061a80 	.word	0x00061a80
 8001dd8:	20000a08 	.word	0x20000a08
 8001ddc:	40005400 	.word	0x40005400
 8001de0:	20000930 	.word	0x20000930
 8001de4:	40014800 	.word	0x40014800
 8001de8:	200009c0 	.word	0x200009c0
 8001dec:	40000c00 	.word	0x40000c00
 8001df0:	20000978 	.word	0x20000978
 8001df4:	40014000 	.word	0x40014000
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim9, TIM_CHANNEL_1);
 8001df8:	682a      	ldr	r2, [r5, #0]
  HAL_TIM_MspPostInit(&htim9);
 8001dfa:	4834      	ldr	r0, [pc, #208]	@ (8001ecc <main+0x3d4>)
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim9, TIM_CHANNEL_1);
 8001dfc:	6993      	ldr	r3, [r2, #24]
  statusCheck = AS5600_Mux_Init(&sensors, &hi2c1, 2);
 8001dfe:	4c34      	ldr	r4, [pc, #208]	@ (8001ed0 <main+0x3d8>)
 8001e00:	4d34      	ldr	r5, [pc, #208]	@ (8001ed4 <main+0x3dc>)
 8001e02:	4f35      	ldr	r7, [pc, #212]	@ (8001ed8 <main+0x3e0>)
		  MultivariablePID_SetSetpoint(&pidObj, q_set);
 8001e04:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 8001f00 <main+0x408>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim9, TIM_CHANNEL_1);
 8001e08:	f043 0308 	orr.w	r3, r3, #8
 8001e0c:	6193      	str	r3, [r2, #24]
  HAL_TIM_MspPostInit(&htim9);
 8001e0e:	f000 f91b 	bl	8002048 <HAL_TIM_MspPostInit>
  statusCheck = AS5600_Mux_Init(&sensors, &hi2c1, 2);
 8001e12:	4932      	ldr	r1, [pc, #200]	@ (8001edc <main+0x3e4>)
 8001e14:	4830      	ldr	r0, [pc, #192]	@ (8001ed8 <main+0x3e0>)
 8001e16:	2202      	movs	r2, #2
 8001e18:	f7ff fb08 	bl	800142c <AS5600_Mux_Init>
  statusCheck = CommandProtocol_Init(&cmdHandle, &huart1, 100);
 8001e1c:	4930      	ldr	r1, [pc, #192]	@ (8001ee0 <main+0x3e8>)
  statusCheck = AS5600_Mux_Init(&sensors, &hi2c1, 2);
 8001e1e:	7020      	strb	r0, [r4, #0]
  statusCheck = CommandProtocol_Init(&cmdHandle, &huart1, 100);
 8001e20:	2264      	movs	r2, #100	@ 0x64
 8001e22:	4830      	ldr	r0, [pc, #192]	@ (8001ee4 <main+0x3ec>)
 8001e24:	f7ff fbee 	bl	8001604 <CommandProtocol_Init>
 8001e28:	7020      	strb	r0, [r4, #0]
  setup_motors();
 8001e2a:	f7ff fe27 	bl	8001a7c <setup_motors>
  MultivariablePID_Init(&pidObj);
 8001e2e:	482e      	ldr	r0, [pc, #184]	@ (8001ee8 <main+0x3f0>)
 8001e30:	4c2d      	ldr	r4, [pc, #180]	@ (8001ee8 <main+0x3f0>)
 8001e32:	f7ff f8df 	bl	8000ff4 <MultivariablePID_Init>
  Trajectory_Init(&robotTraj);
 8001e36:	482d      	ldr	r0, [pc, #180]	@ (8001eec <main+0x3f4>)
 8001e38:	f7ff fa9e 	bl	8001378 <Trajectory_Init>
  volatile uint32_t lastTime = 0; uint32_t interval = 4;
 8001e3c:	960a      	str	r6, [sp, #40]	@ 0x28
		  MultivariablePID_Compute(&pidObj, q_meas);
 8001e3e:	4e2c      	ldr	r6, [pc, #176]	@ (8001ef0 <main+0x3f8>)
 8001e40:	e005      	b.n	8001e4e <main+0x356>
	  if (HAL_GetTick() - lastTime > interval)
 8001e42:	f000 fa89 	bl	8002358 <HAL_GetTick>
 8001e46:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001e48:	1ac3      	subs	r3, r0, r3
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d825      	bhi.n	8001e9a <main+0x3a2>
	  if(globalControllerFlag)
 8001e4e:	782b      	ldrb	r3, [r5, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d0f6      	beq.n	8001e42 <main+0x34a>
		  globalControllerFlag = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	702b      	strb	r3, [r5, #0]
		  float controller_dt = DWT_GetDeltaTime();
 8001e58:	f7ff fcc0 	bl	80017dc <DWT_GetDeltaTime>
		  MultivariablePID_SetSetpoint(&pidObj, q_set);
 8001e5c:	4641      	mov	r1, r8
 8001e5e:	4620      	mov	r0, r4
		  pidObj.dt = (float32_t)controller_dt;
 8001e60:	ed84 0a6c 	vstr	s0, [r4, #432]	@ 0x1b0
		  MultivariablePID_SetSetpoint(&pidObj, q_set);
 8001e64:	f7ff f95a 	bl	800111c <MultivariablePID_SetSetpoint>
		  MultivariablePID_Compute(&pidObj, q_meas);
 8001e68:	4631      	mov	r1, r6
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	f7ff f9ac 	bl	80011c8 <MultivariablePID_Compute>
		  StepMotor_SetSpeedLUT(&l1_motor, pidObj.output_data[0]);
 8001e70:	edd4 7a3e 	vldr	s15, [r4, #248]	@ 0xf8
 8001e74:	481f      	ldr	r0, [pc, #124]	@ (8001ef4 <main+0x3fc>)
 8001e76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e7a:	ee17 3a90 	vmov	r3, s15
 8001e7e:	b219      	sxth	r1, r3
 8001e80:	f7ff fc2a 	bl	80016d8 <StepMotor_SetSpeedLUT>
		  StepMotor_SetSpeedLUT(&l2_motor, pidObj.output_data[1]);
 8001e84:	edd4 7a3f 	vldr	s15, [r4, #252]	@ 0xfc
 8001e88:	481b      	ldr	r0, [pc, #108]	@ (8001ef8 <main+0x400>)
 8001e8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e8e:	ee17 3a90 	vmov	r3, s15
 8001e92:	b219      	sxth	r1, r3
 8001e94:	f7ff fc20 	bl	80016d8 <StepMotor_SetSpeedLUT>
 8001e98:	e7d3      	b.n	8001e42 <main+0x34a>
		  AS5600_Mux_ReadAllAngles(&sensors);
 8001e9a:	480f      	ldr	r0, [pc, #60]	@ (8001ed8 <main+0x3e0>)
 8001e9c:	f7ff fb4e 	bl	800153c <AS5600_Mux_ReadAllAngles>
		  for (uint8_t i = 0; i < sensors.num_sensors; i++) {
 8001ea0:	7938      	ldrb	r0, [r7, #4]
 8001ea2:	4916      	ldr	r1, [pc, #88]	@ (8001efc <main+0x404>)
 8001ea4:	4a12      	ldr	r2, [pc, #72]	@ (8001ef0 <main+0x3f8>)
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	fa5f fc83 	uxtb.w	ip, r3
 8001eac:	4560      	cmp	r0, ip
 8001eae:	d909      	bls.n	8001ec4 <main+0x3cc>
			  q_meas[i] = sensors.angles[i];
 8001eb0:	f831 cf02 	ldrh.w	ip, [r1, #2]!
 8001eb4:	ee07 ca90 	vmov	s15, ip
 8001eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	ece2 7a01 	vstmia	r2!, {s15}
		  for (uint8_t i = 0; i < sensors.num_sensors; i++) {
 8001ec2:	e7f1      	b.n	8001ea8 <main+0x3b0>
		  lastTime = HAL_GetTick();
 8001ec4:	f000 fa48 	bl	8002358 <HAL_GetTick>
 8001ec8:	900a      	str	r0, [sp, #40]	@ 0x28
 8001eca:	e7c0      	b.n	8001e4e <main+0x356>
 8001ecc:	20000978 	.word	0x20000978
 8001ed0:	200008e0 	.word	0x200008e0
 8001ed4:	200008e1 	.word	0x200008e1
 8001ed8:	200004cc 	.word	0x200004cc
 8001edc:	20000a08 	.word	0x20000a08
 8001ee0:	200008e8 	.word	0x200008e8
 8001ee4:	200004ec 	.word	0x200004ec
 8001ee8:	200002d0 	.word	0x200002d0
 8001eec:	2000021c 	.word	0x2000021c
 8001ef0:	20000000 	.word	0x20000000
 8001ef4:	200004b0 	.word	0x200004b0
 8001ef8:	20000494 	.word	0x20000494
 8001efc:	200004d0 	.word	0x200004d0
 8001f00:	20000010 	.word	0x20000010

08001f04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f04:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f06:	4b0c      	ldr	r3, [pc, #48]	@ (8001f38 <HAL_MspInit+0x34>)
 8001f08:	2100      	movs	r1, #0
 8001f0a:	9100      	str	r1, [sp, #0]
 8001f0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f12:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f16:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001f1a:	9200      	str	r2, [sp, #0]
 8001f1c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1e:	9101      	str	r1, [sp, #4]
 8001f20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f22:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001f26:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f32:	b002      	add	sp, #8
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40023800 	.word	0x40023800

08001f3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f3c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8001f3e:	4b19      	ldr	r3, [pc, #100]	@ (8001fa4 <HAL_I2C_MspInit+0x68>)
 8001f40:	6802      	ldr	r2, [r0, #0]
{
 8001f42:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8001f46:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001f4c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001f50:	9406      	str	r4, [sp, #24]
  if(hi2c->Instance==I2C1)
 8001f52:	d001      	beq.n	8001f58 <HAL_I2C_MspInit+0x1c>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f54:	b009      	add	sp, #36	@ 0x24
 8001f56:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f58:	4d13      	ldr	r5, [pc, #76]	@ (8001fa8 <HAL_I2C_MspInit+0x6c>)
 8001f5a:	9400      	str	r4, [sp, #0]
 8001f5c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5e:	4813      	ldr	r0, [pc, #76]	@ (8001fac <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	632b      	str	r3, [r5, #48]	@ 0x30
 8001f66:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f6e:	22c0      	movs	r2, #192	@ 0xc0
 8001f70:	2312      	movs	r3, #18
 8001f72:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001f76:	2201      	movs	r2, #1
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7e:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f80:	2304      	movs	r3, #4
 8001f82:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f84:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f86:	f000 fabf 	bl	8002508 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f8a:	9401      	str	r4, [sp, #4]
 8001f8c:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8001f8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f92:	642b      	str	r3, [r5, #64]	@ 0x40
 8001f94:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8001f96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f9a:	9301      	str	r3, [sp, #4]
 8001f9c:	9b01      	ldr	r3, [sp, #4]
}
 8001f9e:	b009      	add	sp, #36	@ 0x24
 8001fa0:	bd30      	pop	{r4, r5, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40005400 	.word	0x40005400
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40020400 	.word	0x40020400

08001fb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fb0:	b500      	push	{lr}
  if(htim_base->Instance==TIM5)
 8001fb2:	4a21      	ldr	r2, [pc, #132]	@ (8002038 <HAL_TIM_Base_MspInit+0x88>)
 8001fb4:	6803      	ldr	r3, [r0, #0]
 8001fb6:	4293      	cmp	r3, r2
{
 8001fb8:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM5)
 8001fba:	d017      	beq.n	8001fec <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM9)
 8001fbc:	4a1f      	ldr	r2, [pc, #124]	@ (800203c <HAL_TIM_Base_MspInit+0x8c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d005      	beq.n	8001fce <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 8001fc2:	4a1f      	ldr	r2, [pc, #124]	@ (8002040 <HAL_TIM_Base_MspInit+0x90>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d020      	beq.n	800200a <HAL_TIM_Base_MspInit+0x5a>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001fc8:	b005      	add	sp, #20
 8001fca:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001fce:	4b1d      	ldr	r3, [pc, #116]	@ (8002044 <HAL_TIM_Base_MspInit+0x94>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	9202      	str	r2, [sp, #8]
 8001fd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001fd6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001fda:	645a      	str	r2, [r3, #68]	@ 0x44
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fde:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fe2:	9302      	str	r3, [sp, #8]
 8001fe4:	9b02      	ldr	r3, [sp, #8]
}
 8001fe6:	b005      	add	sp, #20
 8001fe8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001fec:	4b15      	ldr	r3, [pc, #84]	@ (8002044 <HAL_TIM_Base_MspInit+0x94>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	9201      	str	r2, [sp, #4]
 8001ff2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ff4:	f042 0208 	orr.w	r2, r2, #8
 8001ff8:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffc:	f003 0308 	and.w	r3, r3, #8
 8002000:	9301      	str	r3, [sp, #4]
 8002002:	9b01      	ldr	r3, [sp, #4]
}
 8002004:	b005      	add	sp, #20
 8002006:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM11_CLK_ENABLE();
 800200a:	2200      	movs	r2, #0
 800200c:	4b0d      	ldr	r3, [pc, #52]	@ (8002044 <HAL_TIM_Base_MspInit+0x94>)
 800200e:	9203      	str	r2, [sp, #12]
 8002010:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002012:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
 8002016:	6459      	str	r1, [r3, #68]	@ 0x44
 8002018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800201e:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002020:	201a      	movs	r0, #26
 8002022:	4611      	mov	r1, r2
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002024:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002026:	f000 f9af 	bl	8002388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800202a:	201a      	movs	r0, #26
}
 800202c:	b005      	add	sp, #20
 800202e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002032:	f000 b9e5 	b.w	8002400 <HAL_NVIC_EnableIRQ>
 8002036:	bf00      	nop
 8002038:	40000c00 	.word	0x40000c00
 800203c:	40014000 	.word	0x40014000
 8002040:	40014800 	.word	0x40014800
 8002044:	40023800 	.word	0x40023800

08002048 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002048:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM5)
 800204a:	6802      	ldr	r2, [r0, #0]
 800204c:	4922      	ldr	r1, [pc, #136]	@ (80020d8 <HAL_TIM_MspPostInit+0x90>)
{
 800204e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002050:	2300      	movs	r3, #0
  if(htim->Instance==TIM5)
 8002052:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002058:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800205c:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM5)
 800205e:	d004      	beq.n	800206a <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(htim->Instance==TIM9)
 8002060:	491e      	ldr	r1, [pc, #120]	@ (80020dc <HAL_TIM_MspPostInit+0x94>)
 8002062:	428a      	cmp	r2, r1
 8002064:	d018      	beq.n	8002098 <HAL_TIM_MspPostInit+0x50>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002066:	b009      	add	sp, #36	@ 0x24
 8002068:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800206a:	4a1d      	ldr	r2, [pc, #116]	@ (80020e0 <HAL_TIM_MspPostInit+0x98>)
 800206c:	9300      	str	r3, [sp, #0]
 800206e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002070:	481c      	ldr	r0, [pc, #112]	@ (80020e4 <HAL_TIM_MspPostInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6313      	str	r3, [r2, #48]	@ 0x30
 8002078:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800207a:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 80020d0 <HAL_TIM_MspPostInit+0x88>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002084:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002086:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002088:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208c:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800208e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002090:	f000 fa3a 	bl	8002508 <HAL_GPIO_Init>
}
 8002094:	b009      	add	sp, #36	@ 0x24
 8002096:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002098:	4a11      	ldr	r2, [pc, #68]	@ (80020e0 <HAL_TIM_MspPostInit+0x98>)
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209e:	4811      	ldr	r0, [pc, #68]	@ (80020e4 <HAL_TIM_MspPostInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a0:	f041 0101 	orr.w	r1, r1, #1
 80020a4:	6311      	str	r1, [r2, #48]	@ 0x30
 80020a6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80020a8:	f002 0201 	and.w	r2, r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ae:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020b0:	2404      	movs	r4, #4
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80020b2:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b6:	e9cd 4302 	strd	r4, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ba:	e9cd 3304 	strd	r3, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020be:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80020c0:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	f000 fa21 	bl	8002508 <HAL_GPIO_Init>
}
 80020c6:	b009      	add	sp, #36	@ 0x24
 80020c8:	bd30      	pop	{r4, r5, pc}
 80020ca:	bf00      	nop
 80020cc:	f3af 8000 	nop.w
 80020d0:	00000001 	.word	0x00000001
 80020d4:	00000002 	.word	0x00000002
 80020d8:	40000c00 	.word	0x40000c00
 80020dc:	40014000 	.word	0x40014000
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020000 	.word	0x40020000

080020e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020e8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 80020ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002160 <HAL_UART_MspInit+0x78>)
 80020ec:	6802      	ldr	r2, [r0, #0]
{
 80020ee:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f0:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 80020f2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80020f8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80020fc:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 80020fe:	d001      	beq.n	8002104 <HAL_UART_MspInit+0x1c>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002100:	b009      	add	sp, #36	@ 0x24
 8002102:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002104:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8002108:	9400      	str	r4, [sp, #0]
 800210a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210c:	4815      	ldr	r0, [pc, #84]	@ (8002164 <HAL_UART_MspInit+0x7c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800210e:	f042 0210 	orr.w	r2, r2, #16
 8002112:	645a      	str	r2, [r3, #68]	@ 0x44
 8002114:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002116:	f002 0210 	and.w	r2, r2, #16
 800211a:	9200      	str	r2, [sp, #0]
 800211c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	9401      	str	r4, [sp, #4]
 8002120:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	631a      	str	r2, [r3, #48]	@ 0x30
 8002128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002130:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8002134:	2302      	movs	r3, #2
 8002136:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213c:	2307      	movs	r3, #7
 800213e:	2203      	movs	r2, #3
 8002140:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002144:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f000 f9df 	bl	8002508 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800214a:	4622      	mov	r2, r4
 800214c:	4621      	mov	r1, r4
 800214e:	2025      	movs	r0, #37	@ 0x25
 8002150:	f000 f91a 	bl	8002388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002154:	2025      	movs	r0, #37	@ 0x25
 8002156:	f000 f953 	bl	8002400 <HAL_NVIC_EnableIRQ>
}
 800215a:	b009      	add	sp, #36	@ 0x24
 800215c:	bd30      	pop	{r4, r5, pc}
 800215e:	bf00      	nop
 8002160:	40011000 	.word	0x40011000
 8002164:	40020000 	.word	0x40020000

08002168 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002168:	e7fe      	b.n	8002168 <NMI_Handler>
 800216a:	bf00      	nop

0800216c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800216c:	e7fe      	b.n	800216c <HardFault_Handler>
 800216e:	bf00      	nop

08002170 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002170:	e7fe      	b.n	8002170 <MemManage_Handler>
 8002172:	bf00      	nop

08002174 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002174:	e7fe      	b.n	8002174 <BusFault_Handler>
 8002176:	bf00      	nop

08002178 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002178:	e7fe      	b.n	8002178 <UsageFault_Handler>
 800217a:	bf00      	nop

0800217c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop

08002180 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop

08002184 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop

08002188 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002188:	f000 b8da 	b.w	8002340 <HAL_IncTick>

0800218c <TIM1_TRG_COM_TIM11_IRQHandler>:
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 800218c:	4801      	ldr	r0, [pc, #4]	@ (8002194 <TIM1_TRG_COM_TIM11_IRQHandler+0x8>)
 800218e:	f001 bdcb 	b.w	8003d28 <HAL_TIM_IRQHandler>
 8002192:	bf00      	nop
 8002194:	20000930 	.word	0x20000930

08002198 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002198:	4801      	ldr	r0, [pc, #4]	@ (80021a0 <USART1_IRQHandler+0x8>)
 800219a:	f002 b833 	b.w	8004204 <HAL_UART_IRQHandler>
 800219e:	bf00      	nop
 80021a0:	200008e8 	.word	0x200008e8

080021a4 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80021a4:	2001      	movs	r0, #1
 80021a6:	4770      	bx	lr

080021a8 <_kill>:

int _kill(int pid, int sig)
{
 80021a8:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021aa:	f004 fb5f 	bl	800686c <__errno>
 80021ae:	2316      	movs	r3, #22
 80021b0:	6003      	str	r3, [r0, #0]
  return -1;
}
 80021b2:	f04f 30ff 	mov.w	r0, #4294967295
 80021b6:	bd08      	pop	{r3, pc}

080021b8 <_exit>:

void _exit (int status)
{
 80021b8:	b508      	push	{r3, lr}
  errno = EINVAL;
 80021ba:	f004 fb57 	bl	800686c <__errno>
 80021be:	2316      	movs	r3, #22
 80021c0:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80021c2:	e7fe      	b.n	80021c2 <_exit+0xa>

080021c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021c4:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021c6:	1e16      	subs	r6, r2, #0
 80021c8:	dd07      	ble.n	80021da <_read+0x16>
 80021ca:	460c      	mov	r4, r1
 80021cc:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80021ce:	f3af 8000 	nop.w
 80021d2:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021d6:	42a5      	cmp	r5, r4
 80021d8:	d1f9      	bne.n	80021ce <_read+0xa>
  }

  return len;
}
 80021da:	4630      	mov	r0, r6
 80021dc:	bd70      	pop	{r4, r5, r6, pc}
 80021de:	bf00      	nop

080021e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021e0:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e2:	1e16      	subs	r6, r2, #0
 80021e4:	dd07      	ble.n	80021f6 <_write+0x16>
 80021e6:	460c      	mov	r4, r1
 80021e8:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80021ea:	f814 0b01 	ldrb.w	r0, [r4], #1
 80021ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f2:	42ac      	cmp	r4, r5
 80021f4:	d1f9      	bne.n	80021ea <_write+0xa>
  }
  return len;
}
 80021f6:	4630      	mov	r0, r6
 80021f8:	bd70      	pop	{r4, r5, r6, pc}
 80021fa:	bf00      	nop

080021fc <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop

08002204 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002204:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002208:	604b      	str	r3, [r1, #4]
  return 0;
}
 800220a:	2000      	movs	r0, #0
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop

08002210 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002210:	2001      	movs	r0, #1
 8002212:	4770      	bx	lr

08002214 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002214:	2000      	movs	r0, #0
 8002216:	4770      	bx	lr

08002218 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002218:	490c      	ldr	r1, [pc, #48]	@ (800224c <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800221a:	4a0d      	ldr	r2, [pc, #52]	@ (8002250 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 800221c:	680b      	ldr	r3, [r1, #0]
{
 800221e:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002220:	4c0c      	ldr	r4, [pc, #48]	@ (8002254 <_sbrk+0x3c>)
 8002222:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8002224:	b12b      	cbz	r3, 8002232 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002226:	4418      	add	r0, r3
 8002228:	4290      	cmp	r0, r2
 800222a:	d807      	bhi.n	800223c <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800222c:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 800222e:	4618      	mov	r0, r3
 8002230:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002232:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <_sbrk+0x40>)
 8002234:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8002236:	4418      	add	r0, r3
 8002238:	4290      	cmp	r0, r2
 800223a:	d9f7      	bls.n	800222c <_sbrk+0x14>
    errno = ENOMEM;
 800223c:	f004 fb16 	bl	800686c <__errno>
 8002240:	230c      	movs	r3, #12
 8002242:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd10      	pop	{r4, pc}
 800224c:	20000a5c 	.word	0x20000a5c
 8002250:	20020000 	.word	0x20020000
 8002254:	00000400 	.word	0x00000400
 8002258:	20000bb0 	.word	0x20000bb0

0800225c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800225c:	4a03      	ldr	r2, [pc, #12]	@ (800226c <SystemInit+0x10>)
 800225e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002262:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002266:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800226a:	4770      	bx	lr
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002270:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002274:	f7ff fff2 	bl	800225c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002278:	480c      	ldr	r0, [pc, #48]	@ (80022ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800227a:	490d      	ldr	r1, [pc, #52]	@ (80022b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800227c:	4a0d      	ldr	r2, [pc, #52]	@ (80022b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800227e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002280:	e002      	b.n	8002288 <LoopCopyDataInit>

08002282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002286:	3304      	adds	r3, #4

08002288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800228a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800228c:	d3f9      	bcc.n	8002282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800228e:	4a0a      	ldr	r2, [pc, #40]	@ (80022b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002290:	4c0a      	ldr	r4, [pc, #40]	@ (80022bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002294:	e001      	b.n	800229a <LoopFillZerobss>

08002296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002298:	3204      	adds	r2, #4

0800229a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800229a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800229c:	d3fb      	bcc.n	8002296 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800229e:	f004 faeb 	bl	8006878 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022a2:	f7ff fc29 	bl	8001af8 <main>
  bx  lr    
 80022a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80022b4:	0800e558 	.word	0x0800e558
  ldr r2, =_sbss
 80022b8:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80022bc:	20000bb0 	.word	0x20000bb0

080022c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022c0:	e7fe      	b.n	80022c0 <ADC_IRQHandler>
	...

080022c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002300 <HAL_InitTick+0x3c>)
 80022c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002304 <HAL_InitTick+0x40>)
 80022ca:	7812      	ldrb	r2, [r2, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
{
 80022ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022d4:	fbb0 f0f2 	udiv	r0, r0, r2
 80022d8:	fbb3 f0f0 	udiv	r0, r3, r0
 80022dc:	f000 f89e 	bl	800241c <HAL_SYSTICK_Config>
 80022e0:	b908      	cbnz	r0, 80022e6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022e2:	2d0f      	cmp	r5, #15
 80022e4:	d901      	bls.n	80022ea <HAL_InitTick+0x26>
    return HAL_ERROR;
 80022e6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80022e8:	bd38      	pop	{r3, r4, r5, pc}
 80022ea:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022ec:	4602      	mov	r2, r0
 80022ee:	4629      	mov	r1, r5
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	f000 f848 	bl	8002388 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f8:	4b03      	ldr	r3, [pc, #12]	@ (8002308 <HAL_InitTick+0x44>)
 80022fa:	4620      	mov	r0, r4
 80022fc:	601d      	str	r5, [r3, #0]
}
 80022fe:	bd38      	pop	{r3, r4, r5, pc}
 8002300:	20000024 	.word	0x20000024
 8002304:	20000020 	.word	0x20000020
 8002308:	20000028 	.word	0x20000028

0800230c <HAL_Init>:
{
 800230c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800230e:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <HAL_Init+0x30>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002316:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800231e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002326:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002328:	2003      	movs	r0, #3
 800232a:	f000 f81b 	bl	8002364 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800232e:	200f      	movs	r0, #15
 8002330:	f7ff ffc8 	bl	80022c4 <HAL_InitTick>
  HAL_MspInit();
 8002334:	f7ff fde6 	bl	8001f04 <HAL_MspInit>
}
 8002338:	2000      	movs	r0, #0
 800233a:	bd08      	pop	{r3, pc}
 800233c:	40023c00 	.word	0x40023c00

08002340 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002340:	4a03      	ldr	r2, [pc, #12]	@ (8002350 <HAL_IncTick+0x10>)
 8002342:	4b04      	ldr	r3, [pc, #16]	@ (8002354 <HAL_IncTick+0x14>)
 8002344:	6811      	ldr	r1, [r2, #0]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	440b      	add	r3, r1
 800234a:	6013      	str	r3, [r2, #0]
}
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20000a60 	.word	0x20000a60
 8002354:	20000024 	.word	0x20000024

08002358 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002358:	4b01      	ldr	r3, [pc, #4]	@ (8002360 <HAL_GetTick+0x8>)
 800235a:	6818      	ldr	r0, [r3, #0]
}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000a60 	.word	0x20000a60

08002364 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002364:	4907      	ldr	r1, [pc, #28]	@ (8002384 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002366:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002368:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236a:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800236e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002372:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002374:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002376:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800237a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800237e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002388:	4b1b      	ldr	r3, [pc, #108]	@ (80023f8 <HAL_NVIC_SetPriority+0x70>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002390:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002392:	f1c3 0e07 	rsb	lr, r3, #7
 8002396:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800239a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800239e:	bf28      	it	cs
 80023a0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a4:	f1bc 0f06 	cmp.w	ip, #6
 80023a8:	d91c      	bls.n	80023e4 <HAL_NVIC_SetPriority+0x5c>
 80023aa:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ae:	f04f 33ff 	mov.w	r3, #4294967295
 80023b2:	fa03 f30c 	lsl.w	r3, r3, ip
 80023b6:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ba:	f04f 33ff 	mov.w	r3, #4294967295
 80023be:	fa03 f30e 	lsl.w	r3, r3, lr
 80023c2:	ea21 0303 	bic.w	r3, r1, r3
 80023c6:	fa03 f30c 	lsl.w	r3, r3, ip
 80023ca:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023cc:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80023ce:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80023d2:	db0a      	blt.n	80023ea <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023d4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80023d8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80023dc:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80023e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80023e4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e6:	4694      	mov	ip, r2
 80023e8:	e7e7      	b.n	80023ba <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ea:	4a04      	ldr	r2, [pc, #16]	@ (80023fc <HAL_NVIC_SetPriority+0x74>)
 80023ec:	f000 000f 	and.w	r0, r0, #15
 80023f0:	4402      	add	r2, r0
 80023f2:	7613      	strb	r3, [r2, #24]
 80023f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80023f8:	e000ed00 	.word	0xe000ed00
 80023fc:	e000ecfc 	.word	0xe000ecfc

08002400 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002400:	2800      	cmp	r0, #0
 8002402:	db07      	blt.n	8002414 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002404:	4a04      	ldr	r2, [pc, #16]	@ (8002418 <HAL_NVIC_EnableIRQ+0x18>)
 8002406:	0941      	lsrs	r1, r0, #5
 8002408:	2301      	movs	r3, #1
 800240a:	f000 001f 	and.w	r0, r0, #31
 800240e:	4083      	lsls	r3, r0
 8002410:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000e100 	.word	0xe000e100

0800241c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800241c:	3801      	subs	r0, #1
 800241e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002422:	d301      	bcc.n	8002428 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002424:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002426:	4770      	bx	lr
{
 8002428:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242e:	4c07      	ldr	r4, [pc, #28]	@ (800244c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002430:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002432:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8002436:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800243a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800243c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800243e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002440:	619a      	str	r2, [r3, #24]
}
 8002442:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002446:	6119      	str	r1, [r3, #16]
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002450:	b570      	push	{r4, r5, r6, lr}
 8002452:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002454:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8002456:	f7ff ff7f 	bl	8002358 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800245a:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 800245e:	2b02      	cmp	r3, #2
 8002460:	d006      	beq.n	8002470 <HAL_DMA_Abort+0x20>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002462:	2380      	movs	r3, #128	@ 0x80
 8002464:	6563      	str	r3, [r4, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002466:	2300      	movs	r3, #0
 8002468:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    
    return HAL_ERROR;
 800246c:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 800246e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002470:	6823      	ldr	r3, [r4, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	f022 0216 	bic.w	r2, r2, #22
 8002478:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800247a:	695a      	ldr	r2, [r3, #20]
 800247c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002480:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002482:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002484:	4605      	mov	r5, r0
 8002486:	b342      	cbz	r2, 80024da <HAL_DMA_Abort+0x8a>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	f022 0208 	bic.w	r2, r2, #8
 800248e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	f022 0201 	bic.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002498:	e005      	b.n	80024a6 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800249a:	f7ff ff5d 	bl	8002358 <HAL_GetTick>
 800249e:	1b43      	subs	r3, r0, r5
 80024a0:	2b05      	cmp	r3, #5
 80024a2:	d810      	bhi.n	80024c6 <HAL_DMA_Abort+0x76>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024a4:	6823      	ldr	r3, [r4, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f013 0301 	ands.w	r3, r3, #1
 80024ac:	d1f5      	bne.n	800249a <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ae:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80024b0:	223f      	movs	r2, #63	@ 0x3f
 80024b2:	408a      	lsls	r2, r1
  return HAL_OK;
 80024b4:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 80024b6:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 80024b8:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ba:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80024bc:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80024c0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 80024c4:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024c8:	2220      	movs	r2, #32
 80024ca:	6562      	str	r2, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 80024cc:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ce:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80024d2:	2300      	movs	r3, #0
 80024d4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 80024d8:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024da:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80024dc:	2a00      	cmp	r2, #0
 80024de:	d1d3      	bne.n	8002488 <HAL_DMA_Abort+0x38>
 80024e0:	e7d6      	b.n	8002490 <HAL_DMA_Abort+0x40>
 80024e2:	bf00      	nop

080024e4 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024e4:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d003      	beq.n	80024f4 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ec:	2380      	movs	r3, #128	@ 0x80
 80024ee:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 80024f0:	2001      	movs	r0, #1
 80024f2:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024f4:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80024f6:	2305      	movs	r3, #5
 80024f8:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 80024fc:	6813      	ldr	r3, [r2, #0]
 80024fe:	f023 0301 	bic.w	r3, r3, #1
  }

  return HAL_OK;
 8002502:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8002504:	6013      	str	r3, [r2, #0]
}
 8002506:	4770      	bx	lr

08002508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800250c:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800250e:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002510:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 80026e8 <HAL_GPIO_Init+0x1e0>
{
 8002514:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 8002516:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800251a:	4689      	mov	r9, r1
 800251c:	e003      	b.n	8002526 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800251e:	3301      	adds	r3, #1
 8002520:	2b10      	cmp	r3, #16
 8002522:	f000 8082 	beq.w	800262a <HAL_GPIO_Init+0x122>
    ioposition = 0x01U << position;
 8002526:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800252a:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 800252e:	43a2      	bics	r2, r4
 8002530:	d1f5      	bne.n	800251e <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002532:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8002536:	f001 0203 	and.w	r2, r1, #3
 800253a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800253e:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002540:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002542:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002546:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002548:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800254c:	d970      	bls.n	8002630 <HAL_GPIO_Init+0x128>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800254e:	2a03      	cmp	r2, #3
 8002550:	f040 80a7 	bne.w	80026a2 <HAL_GPIO_Init+0x19a>
      temp = GPIOx->MODER;
 8002554:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002556:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800255a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800255c:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800255e:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8002562:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002564:	d0db      	beq.n	800251e <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002566:	2200      	movs	r2, #0
 8002568:	9203      	str	r2, [sp, #12]
 800256a:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 800256e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002572:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8002576:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 800257a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800257e:	9203      	str	r2, [sp, #12]
 8002580:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002582:	f023 0203 	bic.w	r2, r3, #3
 8002586:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800258a:	f003 0703 	and.w	r7, r3, #3
 800258e:	260f      	movs	r6, #15
 8002590:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8002594:	00bf      	lsls	r7, r7, #2
 8002596:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800259a:	4e50      	ldr	r6, [pc, #320]	@ (80026dc <HAL_GPIO_Init+0x1d4>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800259c:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800259e:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025a0:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025a4:	d018      	beq.n	80025d8 <HAL_GPIO_Init+0xd0>
 80025a6:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80025aa:	42b0      	cmp	r0, r6
 80025ac:	f000 8084 	beq.w	80026b8 <HAL_GPIO_Init+0x1b0>
 80025b0:	4e4b      	ldr	r6, [pc, #300]	@ (80026e0 <HAL_GPIO_Init+0x1d8>)
 80025b2:	42b0      	cmp	r0, r6
 80025b4:	f000 8086 	beq.w	80026c4 <HAL_GPIO_Init+0x1bc>
 80025b8:	f8df c130 	ldr.w	ip, [pc, #304]	@ 80026ec <HAL_GPIO_Init+0x1e4>
 80025bc:	4560      	cmp	r0, ip
 80025be:	f000 8087 	beq.w	80026d0 <HAL_GPIO_Init+0x1c8>
 80025c2:	f8df c12c 	ldr.w	ip, [pc, #300]	@ 80026f0 <HAL_GPIO_Init+0x1e8>
 80025c6:	4560      	cmp	r0, ip
 80025c8:	bf0c      	ite	eq
 80025ca:	f04f 0c04 	moveq.w	ip, #4
 80025ce:	f04f 0c07 	movne.w	ip, #7
 80025d2:	fa0c f707 	lsl.w	r7, ip, r7
 80025d6:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025d8:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025da:	4a42      	ldr	r2, [pc, #264]	@ (80026e4 <HAL_GPIO_Init+0x1dc>)
 80025dc:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025de:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 80025e0:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80025e4:	4e3f      	ldr	r6, [pc, #252]	@ (80026e4 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 80025e6:	bf54      	ite	pl
 80025e8:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80025ea:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 80025ee:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 80025f0:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80025f2:	4e3c      	ldr	r6, [pc, #240]	@ (80026e4 <HAL_GPIO_Init+0x1dc>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025f4:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 80025f6:	bf54      	ite	pl
 80025f8:	402a      	andpl	r2, r5
          temp |= iocurrent;
 80025fa:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 80025fe:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8002600:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002602:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8002604:	4e37      	ldr	r6, [pc, #220]	@ (80026e4 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 8002606:	bf54      	ite	pl
 8002608:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800260a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 800260e:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002610:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002612:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002614:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8002618:	4932      	ldr	r1, [pc, #200]	@ (80026e4 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 800261a:	bf54      	ite	pl
 800261c:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800261e:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002622:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8002624:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002626:	f47f af7e 	bne.w	8002526 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 800262a:	b005      	add	sp, #20
 800262c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8002630:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002632:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002636:	f8d9 700c 	ldr.w	r7, [r9, #12]
 800263a:	fa07 f70c 	lsl.w	r7, r7, ip
 800263e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002642:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002644:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002646:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800264a:	f3c1 1700 	ubfx	r7, r1, #4, #1
 800264e:	409f      	lsls	r7, r3
 8002650:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002654:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002656:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002658:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800265c:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8002660:	fa07 f70c 	lsl.w	r7, r7, ip
 8002664:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002668:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 800266a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800266c:	f47f af72 	bne.w	8002554 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8002670:	08df      	lsrs	r7, r3, #3
 8002672:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8002676:	9701      	str	r7, [sp, #4]
 8002678:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800267a:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 800267e:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002680:	f003 0e07 	and.w	lr, r3, #7
 8002684:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002688:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800268a:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800268e:	fa06 fe0e 	lsl.w	lr, r6, lr
 8002692:	9e00      	ldr	r6, [sp, #0]
 8002694:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002698:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800269a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800269e:	6237      	str	r7, [r6, #32]
 80026a0:	e758      	b.n	8002554 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 80026a2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026a4:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026a8:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80026ac:	fa07 f70c 	lsl.w	r7, r7, ip
 80026b0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 80026b4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026b6:	e74d      	b.n	8002554 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026b8:	f04f 0c01 	mov.w	ip, #1
 80026bc:	fa0c f707 	lsl.w	r7, ip, r7
 80026c0:	433d      	orrs	r5, r7
 80026c2:	e789      	b.n	80025d8 <HAL_GPIO_Init+0xd0>
 80026c4:	f04f 0c02 	mov.w	ip, #2
 80026c8:	fa0c f707 	lsl.w	r7, ip, r7
 80026cc:	433d      	orrs	r5, r7
 80026ce:	e783      	b.n	80025d8 <HAL_GPIO_Init+0xd0>
 80026d0:	f04f 0c03 	mov.w	ip, #3
 80026d4:	fa0c f707 	lsl.w	r7, ip, r7
 80026d8:	433d      	orrs	r5, r7
 80026da:	e77d      	b.n	80025d8 <HAL_GPIO_Init+0xd0>
 80026dc:	40020000 	.word	0x40020000
 80026e0:	40020800 	.word	0x40020800
 80026e4:	40013c00 	.word	0x40013c00
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40020c00 	.word	0x40020c00
 80026f0:	40021000 	.word	0x40021000

080026f4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f4:	b902      	cbnz	r2, 80026f8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026f6:	0409      	lsls	r1, r1, #16
 80026f8:	6181      	str	r1, [r0, #24]
  }
}
 80026fa:	4770      	bx	lr

080026fc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026fc:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026fe:	ea01 0203 	and.w	r2, r1, r3
 8002702:	ea21 0103 	bic.w	r1, r1, r3
 8002706:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800270a:	6181      	str	r1, [r0, #24]
}
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop

08002710 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002710:	b570      	push	{r4, r5, r6, lr}
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002712:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002714:	4604      	mov	r4, r0
 8002716:	1c48      	adds	r0, r1, #1
 8002718:	d003      	beq.n	8002722 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x12>
 800271a:	e01e      	b.n	800275a <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x4a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	0551      	lsls	r1, r2, #21
 8002720:	d404      	bmi.n	800272c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002722:	695a      	ldr	r2, [r3, #20]
 8002724:	0790      	lsls	r0, r2, #30
 8002726:	d5f9      	bpl.n	800271c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0xc>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002728:	2000      	movs	r0, #0
}
 800272a:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002732:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002734:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002736:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 800273a:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800273c:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800273e:	6321      	str	r1, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002740:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002744:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002748:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800274a:	f043 0304 	orr.w	r3, r3, #4
 800274e:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002750:	2300      	movs	r3, #0
 8002752:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8002756:	2001      	movs	r0, #1
}
 8002758:	bd70      	pop	{r4, r5, r6, pc}
 800275a:	460d      	mov	r5, r1
 800275c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	0792      	lsls	r2, r2, #30
 8002762:	d4e1      	bmi.n	8002728 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x18>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	0551      	lsls	r1, r2, #21
 8002768:	d4e0      	bmi.n	800272c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800276a:	f7ff fdf5 	bl	8002358 <HAL_GetTick>
 800276e:	1b80      	subs	r0, r0, r6
 8002770:	4285      	cmp	r5, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002772:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002774:	d301      	bcc.n	800277a <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x6a>
 8002776:	2d00      	cmp	r5, #0
 8002778:	d1f1      	bne.n	800275e <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x4e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800277a:	695a      	ldr	r2, [r3, #20]
 800277c:	0792      	lsls	r2, r2, #30
 800277e:	d4ee      	bmi.n	800275e <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x4e>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002780:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8002782:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002784:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002786:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800278a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800278e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002790:	4313      	orrs	r3, r2
 8002792:	6423      	str	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8002794:	e7dc      	b.n	8002750 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x40>
 8002796:	bf00      	nop

08002798 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002798:	b570      	push	{r4, r5, r6, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800279a:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 800279c:	4604      	mov	r4, r0
 800279e:	1c48      	adds	r0, r1, #1
 80027a0:	d003      	beq.n	80027aa <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x12>
 80027a2:	e01e      	b.n	80027e2 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	0551      	lsls	r1, r2, #21
 80027a8:	d404      	bmi.n	80027b4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	0710      	lsls	r0, r2, #28
 80027ae:	d5f9      	bpl.n	80027a4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0xc>
  return HAL_OK;
 80027b0:	2000      	movs	r0, #0
}
 80027b2:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80027bc:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027be:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80027c2:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027c4:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80027c6:	6321      	str	r1, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027c8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027cc:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80027d2:	f043 0304 	orr.w	r3, r3, #4
 80027d6:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80027d8:	2300      	movs	r3, #0
 80027da:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 80027de:	2001      	movs	r0, #1
}
 80027e0:	bd70      	pop	{r4, r5, r6, pc}
 80027e2:	460d      	mov	r5, r1
 80027e4:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	0712      	lsls	r2, r2, #28
 80027ea:	d4e1      	bmi.n	80027b0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x18>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	0551      	lsls	r1, r2, #21
 80027f0:	d4e0      	bmi.n	80027b4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f2:	f7ff fdb1 	bl	8002358 <HAL_GetTick>
 80027f6:	1b80      	subs	r0, r0, r6
 80027f8:	4285      	cmp	r5, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80027fa:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027fc:	d301      	bcc.n	8002802 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x6a>
 80027fe:	2d00      	cmp	r5, #0
 8002800:	d1f1      	bne.n	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x4e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	0712      	lsls	r2, r2, #28
 8002806:	d4ee      	bmi.n	80027e6 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x4e>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002808:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 800280a:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 800280c:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800280e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002812:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002816:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002818:	4313      	orrs	r3, r2
 800281a:	6423      	str	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 800281c:	e7dc      	b.n	80027d8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x40>
 800281e:	bf00      	nop

08002820 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002820:	2800      	cmp	r0, #0
 8002822:	f000 80b8 	beq.w	8002996 <HAL_I2C_Init+0x176>
{
 8002826:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002828:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800282c:	4604      	mov	r4, r0
 800282e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8098 	beq.w	8002968 <HAL_I2C_Init+0x148>
  __HAL_I2C_DISABLE(hi2c);
 8002838:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800283a:	2224      	movs	r2, #36	@ 0x24
 800283c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	f022 0201 	bic.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800284e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002856:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002858:	f000 ff08 	bl	800366c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800285c:	6865      	ldr	r5, [r4, #4]
 800285e:	4b4f      	ldr	r3, [pc, #316]	@ (800299c <HAL_I2C_Init+0x17c>)
 8002860:	429d      	cmp	r5, r3
 8002862:	d84f      	bhi.n	8002904 <HAL_I2C_Init+0xe4>
 8002864:	4b4e      	ldr	r3, [pc, #312]	@ (80029a0 <HAL_I2C_Init+0x180>)
 8002866:	4298      	cmp	r0, r3
 8002868:	d97c      	bls.n	8002964 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 800286a:	4b4e      	ldr	r3, [pc, #312]	@ (80029a4 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800286c:	006a      	lsls	r2, r5, #1
  freqrange = I2C_FREQRANGE(pclk1);
 800286e:	fba3 3500 	umull	r3, r5, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002872:	1e43      	subs	r3, r0, #1
 8002874:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002878:	6822      	ldr	r2, [r4, #0]
 800287a:	6851      	ldr	r1, [r2, #4]
 800287c:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8002880:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8002884:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002886:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8002888:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800288c:	f10c 0c01 	add.w	ip, ip, #1
 8002890:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8002894:	ea41 010c 	orr.w	r1, r1, ip
 8002898:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800289a:	69d1      	ldr	r1, [r2, #28]
 800289c:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80028a0:	3301      	adds	r3, #1
 80028a2:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 80028a6:	4203      	tst	r3, r0
 80028a8:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80028ac:	d161      	bne.n	8002972 <HAL_I2C_Init+0x152>
 80028ae:	2304      	movs	r3, #4
 80028b0:	430b      	orrs	r3, r1
 80028b2:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028b4:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80028b8:	6811      	ldr	r1, [r2, #0]
 80028ba:	4303      	orrs	r3, r0
 80028bc:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 80028c0:	430b      	orrs	r3, r1
 80028c2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028c4:	6891      	ldr	r1, [r2, #8]
 80028c6:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80028ca:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 80028ce:	4303      	orrs	r3, r0
 80028d0:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80028d4:	430b      	orrs	r3, r1
 80028d6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028d8:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80028dc:	68d1      	ldr	r1, [r2, #12]
 80028de:	4303      	orrs	r3, r0
 80028e0:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80028e4:	430b      	orrs	r3, r1
 80028e6:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80028e8:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ea:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 80028ec:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 80028f0:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 80028f2:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028f4:	6423      	str	r3, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028fa:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028fc:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  return HAL_OK;
 8002900:	4618      	mov	r0, r3
}
 8002902:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002904:	4b28      	ldr	r3, [pc, #160]	@ (80029a8 <HAL_I2C_Init+0x188>)
 8002906:	4298      	cmp	r0, r3
 8002908:	d92c      	bls.n	8002964 <HAL_I2C_Init+0x144>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800290a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800290c:	4b25      	ldr	r3, [pc, #148]	@ (80029a4 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800290e:	4e27      	ldr	r6, [pc, #156]	@ (80029ac <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8002910:	fba3 3c00 	umull	r3, ip, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002914:	1e43      	subs	r3, r0, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002916:	6850      	ldr	r0, [r2, #4]
 8002918:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 800291c:	ea40 409c 	orr.w	r0, r0, ip, lsr #18
 8002920:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002922:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002926:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800292a:	fb00 f101 	mul.w	r1, r0, r1
 800292e:	fba6 6101 	umull	r6, r1, r6, r1
 8002932:	6a10      	ldr	r0, [r2, #32]
 8002934:	0989      	lsrs	r1, r1, #6
 8002936:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 800293a:	3101      	adds	r1, #1
 800293c:	4301      	orrs	r1, r0
 800293e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002940:	69d1      	ldr	r1, [r2, #28]
 8002942:	68a0      	ldr	r0, [r4, #8]
 8002944:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8002948:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800294c:	b9a0      	cbnz	r0, 8002978 <HAL_I2C_Init+0x158>
 800294e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002952:	fbb3 f3f5 	udiv	r3, r3, r5
 8002956:	3301      	adds	r3, #1
 8002958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295c:	b1cb      	cbz	r3, 8002992 <HAL_I2C_Init+0x172>
 800295e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002962:	e7a5      	b.n	80028b0 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002964:	2001      	movs	r0, #1
}
 8002966:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002968:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 800296c:	f7ff fae6 	bl	8001f3c <HAL_I2C_MspInit>
 8002970:	e762      	b.n	8002838 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002976:	e79b      	b.n	80028b0 <HAL_I2C_Init+0x90>
 8002978:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800297c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002980:	fbb3 f3f5 	udiv	r3, r3, r5
 8002984:	3301      	adds	r3, #1
 8002986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298a:	b113      	cbz	r3, 8002992 <HAL_I2C_Init+0x172>
 800298c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002990:	e78e      	b.n	80028b0 <HAL_I2C_Init+0x90>
 8002992:	2301      	movs	r3, #1
 8002994:	e78c      	b.n	80028b0 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002996:	2001      	movs	r0, #1
}
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	000186a0 	.word	0x000186a0
 80029a0:	001e847f 	.word	0x001e847f
 80029a4:	431bde83 	.word	0x431bde83
 80029a8:	003d08ff 	.word	0x003d08ff
 80029ac:	10624dd3 	.word	0x10624dd3

080029b0 <HAL_I2C_Master_Transmit>:
{
 80029b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029b4:	4604      	mov	r4, r0
 80029b6:	b082      	sub	sp, #8
 80029b8:	4699      	mov	r9, r3
 80029ba:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80029bc:	4688      	mov	r8, r1
 80029be:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 80029c0:	f7ff fcca 	bl	8002358 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c4:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	d004      	beq.n	80029d6 <HAL_I2C_Master_Transmit+0x26>
      return HAL_BUSY;
 80029cc:	2502      	movs	r5, #2
}
 80029ce:	4628      	mov	r0, r5
 80029d0:	b002      	add	sp, #8
 80029d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029d6:	6825      	ldr	r5, [r4, #0]
 80029d8:	4606      	mov	r6, r0
 80029da:	69ab      	ldr	r3, [r5, #24]
 80029dc:	0798      	lsls	r0, r3, #30
 80029de:	d517      	bpl.n	8002a10 <HAL_I2C_Master_Transmit+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e0:	f7ff fcba 	bl	8002358 <HAL_GetTick>
 80029e4:	1b80      	subs	r0, r0, r6
 80029e6:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029e8:	6825      	ldr	r5, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ea:	d9f6      	bls.n	80029da <HAL_I2C_Master_Transmit+0x2a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029ec:	69ab      	ldr	r3, [r5, #24]
 80029ee:	43db      	mvns	r3, r3
 80029f0:	f013 0302 	ands.w	r3, r3, #2
 80029f4:	d1f1      	bne.n	80029da <HAL_I2C_Master_Transmit+0x2a>
          hi2c->State             = HAL_I2C_STATE_READY;
 80029f6:	2220      	movs	r2, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 80029f8:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80029fa:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029fe:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a02:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002a04:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a08:	f042 0220 	orr.w	r2, r2, #32
 8002a0c:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8002a0e:	e7dd      	b.n	80029cc <HAL_I2C_Master_Transmit+0x1c>
    __HAL_LOCK(hi2c);
 8002a10:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d0d9      	beq.n	80029cc <HAL_I2C_Master_Transmit+0x1c>
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a1e:	682b      	ldr	r3, [r5, #0]
 8002a20:	07d9      	lsls	r1, r3, #31
 8002a22:	d576      	bpl.n	8002b12 <HAL_I2C_Master_Transmit+0x162>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a24:	682b      	ldr	r3, [r5, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a26:	4a87      	ldr	r2, [pc, #540]	@ (8002c44 <HAL_I2C_Master_Transmit+0x294>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a28:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002a2c:	602b      	str	r3, [r5, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a2e:	2321      	movs	r3, #33	@ 0x21
 8002a30:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a34:	2310      	movs	r3, #16
 8002a36:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 8002a3e:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a42:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a44:	62e2      	str	r2, [r4, #44]	@ 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002a46:	8523      	strh	r3, [r4, #40]	@ 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a48:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    hi2c->pBuffPtr    = pData;
 8002a4a:	f8c4 a024 	str.w	sl, [r4, #36]	@ 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d006      	beq.n	8002a60 <HAL_I2C_Master_Transmit+0xb0>
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d004      	beq.n	8002a60 <HAL_I2C_Master_Transmit+0xb0>
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d002      	beq.n	8002a60 <HAL_I2C_Master_Transmit+0xb0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002a5a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002a5c:	2b12      	cmp	r3, #18
 8002a5e:	d103      	bne.n	8002a68 <HAL_I2C_Master_Transmit+0xb8>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a60:	682b      	ldr	r3, [r5, #0]
 8002a62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a66:	602b      	str	r3, [r5, #0]
 8002a68:	1c7a      	adds	r2, r7, #1
 8002a6a:	d145      	bne.n	8002af8 <HAL_I2C_Master_Transmit+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a6c:	696b      	ldr	r3, [r5, #20]
 8002a6e:	07d8      	lsls	r0, r3, #31
 8002a70:	d5fc      	bpl.n	8002a6c <HAL_I2C_Master_Transmit+0xbc>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002a72:	6923      	ldr	r3, [r4, #16]
 8002a74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a78:	d150      	bne.n	8002b1c <HAL_I2C_Master_Transmit+0x16c>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a7a:	f008 03fe 	and.w	r3, r8, #254	@ 0xfe
 8002a7e:	612b      	str	r3, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a80:	4632      	mov	r2, r6
 8002a82:	4639      	mov	r1, r7
 8002a84:	4620      	mov	r0, r4
 8002a86:	f7ff fe43 	bl	8002710 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8002a8a:	4605      	mov	r5, r0
 8002a8c:	2800      	cmp	r0, #0
 8002a8e:	d12a      	bne.n	8002ae6 <HAL_I2C_Master_Transmit+0x136>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	9001      	str	r0, [sp, #4]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	9201      	str	r2, [sp, #4]
 8002a98:	699a      	ldr	r2, [r3, #24]
    while (hi2c->XferSize > 0U)
 8002a9a:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a9c:	9201      	str	r2, [sp, #4]
 8002a9e:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8002aa0:	2800      	cmp	r0, #0
 8002aa2:	f000 80a3 	beq.w	8002bec <HAL_I2C_Master_Transmit+0x23c>
 8002aa6:	1c7a      	adds	r2, r7, #1
 8002aa8:	d14e      	bne.n	8002b48 <HAL_I2C_Master_Transmit+0x198>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	0611      	lsls	r1, r2, #24
 8002aae:	d46f      	bmi.n	8002b90 <HAL_I2C_Master_Transmit+0x1e0>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	0552      	lsls	r2, r2, #21
 8002ab4:	d5f9      	bpl.n	8002aaa <HAL_I2C_Master_Transmit+0xfa>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab6:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ab8:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8002abc:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002abe:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac0:	6322      	str	r2, [r4, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ac2:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac6:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002aca:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002acc:	f042 0204 	orr.w	r2, r2, #4
 8002ad0:	6422      	str	r2, [r4, #64]	@ 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002ad4:	2100      	movs	r1, #0
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad6:	2a04      	cmp	r2, #4
          __HAL_UNLOCK(hi2c);
 8002ad8:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002adc:	d103      	bne.n	8002ae6 <HAL_I2C_Master_Transmit+0x136>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ae4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8002ae6:	2501      	movs	r5, #1
}
 8002ae8:	4628      	mov	r0, r5
 8002aea:	b002      	add	sp, #8
 8002aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af0:	b917      	cbnz	r7, 8002af8 <HAL_I2C_Master_Transmit+0x148>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002af2:	696b      	ldr	r3, [r5, #20]
 8002af4:	07db      	lsls	r3, r3, #31
 8002af6:	d536      	bpl.n	8002b66 <HAL_I2C_Master_Transmit+0x1b6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af8:	696b      	ldr	r3, [r5, #20]
 8002afa:	07d9      	lsls	r1, r3, #31
 8002afc:	d4b9      	bmi.n	8002a72 <HAL_I2C_Master_Transmit+0xc2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afe:	f7ff fc2b 	bl	8002358 <HAL_GetTick>
 8002b02:	1b80      	subs	r0, r0, r6
 8002b04:	4287      	cmp	r7, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b06:	6825      	ldr	r5, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b08:	d2f2      	bcs.n	8002af0 <HAL_I2C_Master_Transmit+0x140>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b0a:	696b      	ldr	r3, [r5, #20]
 8002b0c:	07db      	lsls	r3, r3, #31
 8002b0e:	d4f3      	bmi.n	8002af8 <HAL_I2C_Master_Transmit+0x148>
 8002b10:	e029      	b.n	8002b66 <HAL_I2C_Master_Transmit+0x1b6>
      __HAL_I2C_ENABLE(hi2c);
 8002b12:	682b      	ldr	r3, [r5, #0]
 8002b14:	f043 0301 	orr.w	r3, r3, #1
 8002b18:	602b      	str	r3, [r5, #0]
 8002b1a:	e783      	b.n	8002a24 <HAL_I2C_Master_Transmit+0x74>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b1c:	ea4f 13e8 	mov.w	r3, r8, asr #7
 8002b20:	f003 0306 	and.w	r3, r3, #6
 8002b24:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8002b28:	612b      	str	r3, [r5, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b2a:	4632      	mov	r2, r6
 8002b2c:	4639      	mov	r1, r7
 8002b2e:	4620      	mov	r0, r4
 8002b30:	f7ff fe32 	bl	8002798 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
 8002b34:	2800      	cmp	r0, #0
 8002b36:	d1d6      	bne.n	8002ae6 <HAL_I2C_Master_Transmit+0x136>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b38:	6822      	ldr	r2, [r4, #0]
 8002b3a:	fa5f f388 	uxtb.w	r3, r8
 8002b3e:	6113      	str	r3, [r2, #16]
 8002b40:	e79e      	b.n	8002a80 <HAL_I2C_Master_Transmit+0xd0>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b42:	695a      	ldr	r2, [r3, #20]
 8002b44:	0610      	lsls	r0, r2, #24
 8002b46:	d571      	bpl.n	8002c2c <HAL_I2C_Master_Transmit+0x27c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b48:	695a      	ldr	r2, [r3, #20]
 8002b4a:	0610      	lsls	r0, r2, #24
 8002b4c:	d41f      	bmi.n	8002b8e <HAL_I2C_Master_Transmit+0x1de>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b4e:	695a      	ldr	r2, [r3, #20]
 8002b50:	0552      	lsls	r2, r2, #21
 8002b52:	d4b0      	bmi.n	8002ab6 <HAL_I2C_Master_Transmit+0x106>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b54:	f7ff fc00 	bl	8002358 <HAL_GetTick>
 8002b58:	1b80      	subs	r0, r0, r6
 8002b5a:	4287      	cmp	r7, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b5c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b5e:	d3f0      	bcc.n	8002b42 <HAL_I2C_Master_Transmit+0x192>
 8002b60:	2f00      	cmp	r7, #0
 8002b62:	d1f1      	bne.n	8002b48 <HAL_I2C_Master_Transmit+0x198>
 8002b64:	e7ed      	b.n	8002b42 <HAL_I2C_Master_Transmit+0x192>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b66:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b68:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b6a:	6322      	str	r2, [r4, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b6c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b70:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002b76:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b7a:	f043 0320 	orr.w	r3, r3, #32
 8002b7e:	6423      	str	r3, [r4, #64]	@ 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b80:	682b      	ldr	r3, [r5, #0]
 8002b82:	05dd      	lsls	r5, r3, #23
 8002b84:	d5af      	bpl.n	8002ae6 <HAL_I2C_Master_Transmit+0x136>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b8a:	6423      	str	r3, [r4, #64]	@ 0x40
 8002b8c:	e7ab      	b.n	8002ae6 <HAL_I2C_Master_Transmit+0x136>
 8002b8e:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b90:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
 8002b94:	4661      	mov	r1, ip
 8002b96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002b9a:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8002b9c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8002b9e:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002ba0:	3a01      	subs	r2, #1
 8002ba2:	b292      	uxth	r2, r2
 8002ba4:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ba6:	6959      	ldr	r1, [r3, #20]
      hi2c->XferSize--;
 8002ba8:	1e42      	subs	r2, r0, #1
 8002baa:	b292      	uxth	r2, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bac:	0749      	lsls	r1, r1, #29
      hi2c->XferSize--;
 8002bae:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bb0:	d50c      	bpl.n	8002bcc <HAL_I2C_Master_Transmit+0x21c>
 8002bb2:	b15a      	cbz	r2, 8002bcc <HAL_I2C_Master_Transmit+0x21c>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bb4:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8002bb8:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002bba:	f10c 0202 	add.w	r2, ip, #2
 8002bbe:	6262      	str	r2, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8002bc0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002bc2:	3a01      	subs	r2, #1
        hi2c->XferSize--;
 8002bc4:	3802      	subs	r0, #2
        hi2c->XferCount--;
 8002bc6:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 8002bc8:	8520      	strh	r0, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8002bca:	8562      	strh	r2, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8002bcc:	1c7a      	adds	r2, r7, #1
 8002bce:	d11d      	bne.n	8002c0c <HAL_I2C_Master_Transmit+0x25c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	0752      	lsls	r2, r2, #29
 8002bd4:	d406      	bmi.n	8002be4 <HAL_I2C_Master_Transmit+0x234>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bd6:	695a      	ldr	r2, [r3, #20]
 8002bd8:	0550      	lsls	r0, r2, #21
 8002bda:	f53f af6c 	bmi.w	8002ab6 <HAL_I2C_Master_Transmit+0x106>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	0752      	lsls	r2, r2, #29
 8002be2:	d5f8      	bpl.n	8002bd6 <HAL_I2C_Master_Transmit+0x226>
    while (hi2c->XferSize > 0U)
 8002be4:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 8002be6:	2800      	cmp	r0, #0
 8002be8:	f47f af5d 	bne.w	8002aa6 <HAL_I2C_Master_Transmit+0xf6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bec:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bee:	2100      	movs	r1, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 8002bf4:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bf6:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002bf8:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8002bfc:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c00:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
    return HAL_OK;
 8002c04:	e6e3      	b.n	80029ce <HAL_I2C_Master_Transmit+0x1e>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c06:	695a      	ldr	r2, [r3, #20]
 8002c08:	0751      	lsls	r1, r2, #29
 8002c0a:	d50f      	bpl.n	8002c2c <HAL_I2C_Master_Transmit+0x27c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c0c:	695a      	ldr	r2, [r3, #20]
 8002c0e:	0751      	lsls	r1, r2, #29
 8002c10:	d4e8      	bmi.n	8002be4 <HAL_I2C_Master_Transmit+0x234>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	0550      	lsls	r0, r2, #21
 8002c16:	f53f af4e 	bmi.w	8002ab6 <HAL_I2C_Master_Transmit+0x106>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c1a:	f7ff fb9d 	bl	8002358 <HAL_GetTick>
 8002c1e:	1b80      	subs	r0, r0, r6
 8002c20:	4287      	cmp	r7, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002c22:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c24:	d3ef      	bcc.n	8002c06 <HAL_I2C_Master_Transmit+0x256>
 8002c26:	2f00      	cmp	r7, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_I2C_Master_Transmit+0x25c>
 8002c2a:	e7ec      	b.n	8002c06 <HAL_I2C_Master_Transmit+0x256>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c2c:	2200      	movs	r2, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c2e:	2120      	movs	r1, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c30:	6322      	str	r2, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c32:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c36:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c3a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8002c40:	e747      	b.n	8002ad2 <HAL_I2C_Master_Transmit+0x122>
 8002c42:	bf00      	nop
 8002c44:	ffff0000 	.word	0xffff0000

08002c48 <HAL_I2C_Master_Receive>:
{
 8002c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c4c:	4604      	mov	r4, r0
 8002c4e:	b087      	sub	sp, #28
 8002c50:	4698      	mov	r8, r3
 8002c52:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8002c54:	460f      	mov	r7, r1
 8002c56:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8002c58:	f7ff fb7e 	bl	8002358 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c5c:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	d004      	beq.n	8002c6e <HAL_I2C_Master_Receive+0x26>
      return HAL_BUSY;
 8002c64:	2702      	movs	r7, #2
}
 8002c66:	4638      	mov	r0, r7
 8002c68:	b007      	add	sp, #28
 8002c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c6e:	4606      	mov	r6, r0
 8002c70:	6820      	ldr	r0, [r4, #0]
 8002c72:	6983      	ldr	r3, [r0, #24]
 8002c74:	079b      	lsls	r3, r3, #30
 8002c76:	d517      	bpl.n	8002ca8 <HAL_I2C_Master_Receive+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c78:	f7ff fb6e 	bl	8002358 <HAL_GetTick>
 8002c7c:	1b80      	subs	r0, r0, r6
 8002c7e:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c80:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c82:	d9f6      	bls.n	8002c72 <HAL_I2C_Master_Receive+0x2a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c84:	6983      	ldr	r3, [r0, #24]
 8002c86:	43db      	mvns	r3, r3
 8002c88:	f013 0302 	ands.w	r3, r3, #2
 8002c8c:	d1f1      	bne.n	8002c72 <HAL_I2C_Master_Receive+0x2a>
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c8e:	2220      	movs	r2, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002c90:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002c92:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c96:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c9a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002c9c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ca0:	f042 0220 	orr.w	r2, r2, #32
 8002ca4:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8002ca6:	e7dd      	b.n	8002c64 <HAL_I2C_Master_Receive+0x1c>
    __HAL_LOCK(hi2c);
 8002ca8:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d0d9      	beq.n	8002c64 <HAL_I2C_Master_Receive+0x1c>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cb6:	6803      	ldr	r3, [r0, #0]
 8002cb8:	07d9      	lsls	r1, r3, #31
 8002cba:	d563      	bpl.n	8002d84 <HAL_I2C_Master_Receive+0x13c>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cbc:	6803      	ldr	r3, [r0, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cbe:	4a9b      	ldr	r2, [pc, #620]	@ (8002f2c <HAL_I2C_Master_Receive+0x2e4>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cc0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002cc4:	6003      	str	r3, [r0, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002cc6:	2322      	movs	r3, #34	@ 0x22
 8002cc8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ccc:	2310      	movs	r3, #16
 8002cce:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 8002cd6:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cda:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cdc:	62e2      	str	r2, [r4, #44]	@ 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cde:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002ce0:	8523      	strh	r3, [r4, #40]	@ 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce2:	6803      	ldr	r3, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8002ce4:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cec:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cee:	6003      	str	r3, [r0, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cf0:	d007      	beq.n	8002d02 <HAL_I2C_Master_Receive+0xba>
 8002cf2:	2a01      	cmp	r2, #1
 8002cf4:	d005      	beq.n	8002d02 <HAL_I2C_Master_Receive+0xba>
 8002cf6:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 8002cfa:	d002      	beq.n	8002d02 <HAL_I2C_Master_Receive+0xba>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002cfc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002cfe:	2b11      	cmp	r3, #17
 8002d00:	d103      	bne.n	8002d0a <HAL_I2C_Master_Receive+0xc2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d02:	6803      	ldr	r3, [r0, #0]
 8002d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d08:	6003      	str	r3, [r0, #0]
 8002d0a:	1c6a      	adds	r2, r5, #1
 8002d0c:	d12d      	bne.n	8002d6a <HAL_I2C_Master_Receive+0x122>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d0e:	6943      	ldr	r3, [r0, #20]
 8002d10:	07d9      	lsls	r1, r3, #31
 8002d12:	d5fc      	bpl.n	8002d0e <HAL_I2C_Master_Receive+0xc6>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d14:	6923      	ldr	r3, [r4, #16]
 8002d16:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d1a:	d138      	bne.n	8002d8e <HAL_I2C_Master_Receive+0x146>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d1c:	f047 0301 	orr.w	r3, r7, #1
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	6103      	str	r3, [r0, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d24:	4632      	mov	r2, r6
 8002d26:	4629      	mov	r1, r5
 8002d28:	4620      	mov	r0, r4
 8002d2a:	f7ff fcf1 	bl	8002710 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8002d2e:	4607      	mov	r7, r0
 8002d30:	2800      	cmp	r0, #0
 8002d32:	d144      	bne.n	8002dbe <HAL_I2C_Master_Receive+0x176>
    if (hi2c->XferSize == 0U)
 8002d34:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d36:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 8002d38:	2a00      	cmp	r2, #0
 8002d3a:	d159      	bne.n	8002df0 <HAL_I2C_Master_Receive+0x1a8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d3c:	9001      	str	r0, [sp, #4]
 8002d3e:	695a      	ldr	r2, [r3, #20]
 8002d40:	9201      	str	r2, [sp, #4]
 8002d42:	699a      	ldr	r2, [r3, #24]
 8002d44:	9201      	str	r2, [sp, #4]
 8002d46:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d4e:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d50:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002d52:	2220      	movs	r2, #32
 8002d54:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8002d58:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8002d60:	e781      	b.n	8002c66 <HAL_I2C_Master_Receive+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d62:	b915      	cbnz	r5, 8002d6a <HAL_I2C_Master_Receive+0x122>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d64:	6943      	ldr	r3, [r0, #20]
 8002d66:	07db      	lsls	r3, r3, #31
 8002d68:	d52e      	bpl.n	8002dc8 <HAL_I2C_Master_Receive+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d6a:	6943      	ldr	r3, [r0, #20]
 8002d6c:	07da      	lsls	r2, r3, #31
 8002d6e:	d4d1      	bmi.n	8002d14 <HAL_I2C_Master_Receive+0xcc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d70:	f7ff faf2 	bl	8002358 <HAL_GetTick>
 8002d74:	1b83      	subs	r3, r0, r6
 8002d76:	429d      	cmp	r5, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d78:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d7a:	d2f2      	bcs.n	8002d62 <HAL_I2C_Master_Receive+0x11a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d7c:	6943      	ldr	r3, [r0, #20]
 8002d7e:	07db      	lsls	r3, r3, #31
 8002d80:	d4f3      	bmi.n	8002d6a <HAL_I2C_Master_Receive+0x122>
 8002d82:	e021      	b.n	8002dc8 <HAL_I2C_Master_Receive+0x180>
      __HAL_I2C_ENABLE(hi2c);
 8002d84:	6803      	ldr	r3, [r0, #0]
 8002d86:	f043 0301 	orr.w	r3, r3, #1
 8002d8a:	6003      	str	r3, [r0, #0]
 8002d8c:	e796      	b.n	8002cbc <HAL_I2C_Master_Receive+0x74>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d8e:	ea4f 18e7 	mov.w	r8, r7, asr #7
 8002d92:	f008 0806 	and.w	r8, r8, #6
 8002d96:	f048 03f0 	orr.w	r3, r8, #240	@ 0xf0
 8002d9a:	6103      	str	r3, [r0, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d9c:	4632      	mov	r2, r6
 8002d9e:	4629      	mov	r1, r5
 8002da0:	4620      	mov	r0, r4
 8002da2:	f7ff fcf9 	bl	8002798 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
 8002da6:	b950      	cbnz	r0, 8002dbe <HAL_I2C_Master_Receive+0x176>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002da8:	6823      	ldr	r3, [r4, #0]
 8002daa:	b2ff      	uxtb	r7, r7
 8002dac:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dae:	4632      	mov	r2, r6
 8002db0:	4629      	mov	r1, r5
 8002db2:	4620      	mov	r0, r4
 8002db4:	f7ff fcac 	bl	8002710 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8002db8:	2800      	cmp	r0, #0
 8002dba:	f000 80c9 	beq.w	8002f50 <HAL_I2C_Master_Receive+0x308>
      return HAL_ERROR;
 8002dbe:	2701      	movs	r7, #1
}
 8002dc0:	4638      	mov	r0, r7
 8002dc2:	b007      	add	sp, #28
 8002dc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002dc8:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8002dca:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002dcc:	6322      	str	r2, [r4, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002dce:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dd2:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dd6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002dd8:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ddc:	f043 0320 	orr.w	r3, r3, #32
 8002de0:	6423      	str	r3, [r4, #64]	@ 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002de2:	6803      	ldr	r3, [r0, #0]
 8002de4:	05d8      	lsls	r0, r3, #23
 8002de6:	d5ea      	bpl.n	8002dbe <HAL_I2C_Master_Receive+0x176>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002de8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dec:	6423      	str	r3, [r4, #64]	@ 0x40
 8002dee:	e7e6      	b.n	8002dbe <HAL_I2C_Master_Receive+0x176>
    else if (hi2c->XferSize == 1U)
 8002df0:	2a01      	cmp	r2, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df2:	6819      	ldr	r1, [r3, #0]
    else if (hi2c->XferSize == 1U)
 8002df4:	f000 8178 	beq.w	80030e8 <HAL_I2C_Master_Receive+0x4a0>
    else if (hi2c->XferSize == 2U)
 8002df8:	2a02      	cmp	r2, #2
 8002dfa:	f000 80bd 	beq.w	8002f78 <HAL_I2C_Master_Receive+0x330>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dfe:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 8002e02:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e04:	9004      	str	r0, [sp, #16]
 8002e06:	6959      	ldr	r1, [r3, #20]
 8002e08:	9104      	str	r1, [sp, #16]
 8002e0a:	6999      	ldr	r1, [r3, #24]
 8002e0c:	9104      	str	r1, [sp, #16]
 8002e0e:	9904      	ldr	r1, [sp, #16]
      if (hi2c->XferSize <= 3U)
 8002e10:	2a03      	cmp	r2, #3
 8002e12:	d847      	bhi.n	8002ea4 <HAL_I2C_Master_Receive+0x25c>
        if (hi2c->XferSize == 1U)
 8002e14:	2a01      	cmp	r2, #1
 8002e16:	f000 813c 	beq.w	8003092 <HAL_I2C_Master_Receive+0x44a>
        else if (hi2c->XferSize == 2U)
 8002e1a:	2a02      	cmp	r2, #2
 8002e1c:	f000 8110 	beq.w	8003040 <HAL_I2C_Master_Receive+0x3f8>
 8002e20:	1c68      	adds	r0, r5, #1
 8002e22:	d167      	bne.n	8002ef4 <HAL_I2C_Master_Receive+0x2ac>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	0751      	lsls	r1, r2, #29
 8002e28:	d5fc      	bpl.n	8002e24 <HAL_I2C_Master_Receive+0x1dc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2a:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e32:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8002e38:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 8002e3a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002e3c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002e3e:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 8002e40:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 8002e42:	3101      	adds	r1, #1
          hi2c->XferCount--;
 8002e44:	b29b      	uxth	r3, r3
 8002e46:	1c68      	adds	r0, r5, #1
          hi2c->XferSize--;
 8002e48:	8522      	strh	r2, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 8002e4a:	6261      	str	r1, [r4, #36]	@ 0x24
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e4c:	6822      	ldr	r2, [r4, #0]
          hi2c->XferCount--;
 8002e4e:	8563      	strh	r3, [r4, #42]	@ 0x2a
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8002e50:	d16e      	bne.n	8002f30 <HAL_I2C_Master_Receive+0x2e8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e52:	6953      	ldr	r3, [r2, #20]
 8002e54:	0758      	lsls	r0, r3, #29
 8002e56:	d5fc      	bpl.n	8002e52 <HAL_I2C_Master_Receive+0x20a>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e58:	6813      	ldr	r3, [r2, #0]
 8002e5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e5e:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e60:	6913      	ldr	r3, [r2, #16]
 8002e62:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8002e64:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 8002e66:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 8002e68:	6a60      	ldr	r0, [r4, #36]	@ 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e6a:	6821      	ldr	r1, [r4, #0]
          hi2c->XferCount--;
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e72:	6909      	ldr	r1, [r1, #16]
          hi2c->XferSize--;
 8002e74:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 8002e76:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 8002e7a:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 8002e7c:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e80:	7041      	strb	r1, [r0, #1]
          hi2c->XferSize--;
 8002e82:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002e84:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 8002e86:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002e88:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8002e8a:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8002e8c:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8002e8e:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8002e90:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8002e92:	6261      	str	r1, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002e94:	8522      	strh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002e96:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e98:	2a00      	cmp	r2, #0
 8002e9a:	f43f af59 	beq.w	8002d50 <HAL_I2C_Master_Receive+0x108>
      if (hi2c->XferSize <= 3U)
 8002e9e:	2a03      	cmp	r2, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ea0:	6823      	ldr	r3, [r4, #0]
      if (hi2c->XferSize <= 3U)
 8002ea2:	d9b7      	bls.n	8002e14 <HAL_I2C_Master_Receive+0x1cc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ea4:	695a      	ldr	r2, [r3, #20]
 8002ea6:	0652      	lsls	r2, r2, #25
 8002ea8:	f100 80a1 	bmi.w	8002fee <HAL_I2C_Master_Receive+0x3a6>
 8002eac:	2d00      	cmp	r5, #0
 8002eae:	f000 809a 	beq.w	8002fe6 <HAL_I2C_Master_Receive+0x39e>
 8002eb2:	e00c      	b.n	8002ece <HAL_I2C_Master_Receive+0x286>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb4:	f7ff fa50 	bl	8002358 <HAL_GetTick>
 8002eb8:	1b80      	subs	r0, r0, r6
 8002eba:	4285      	cmp	r5, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ebc:	6823      	ldr	r3, [r4, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ebe:	d202      	bcs.n	8002ec6 <HAL_I2C_Master_Receive+0x27e>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	0651      	lsls	r1, r2, #25
 8002ec4:	d524      	bpl.n	8002f10 <HAL_I2C_Master_Receive+0x2c8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	0652      	lsls	r2, r2, #25
 8002eca:	f100 8090 	bmi.w	8002fee <HAL_I2C_Master_Receive+0x3a6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ece:	695a      	ldr	r2, [r3, #20]
 8002ed0:	06d0      	lsls	r0, r2, #27
 8002ed2:	d5ef      	bpl.n	8002eb4 <HAL_I2C_Master_Receive+0x26c>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed4:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ed6:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eda:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002edc:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ede:	6322      	str	r2, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ee0:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ee4:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ee8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002eea:	6423      	str	r3, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8002eec:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8002ef0:	2701      	movs	r7, #1
 8002ef2:	e765      	b.n	8002dc0 <HAL_I2C_Master_Receive+0x178>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	0752      	lsls	r2, r2, #29
 8002ef8:	d497      	bmi.n	8002e2a <HAL_I2C_Master_Receive+0x1e2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efa:	f7ff fa2d 	bl	8002358 <HAL_GetTick>
 8002efe:	1b80      	subs	r0, r0, r6
 8002f00:	4285      	cmp	r5, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f02:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f04:	d301      	bcc.n	8002f0a <HAL_I2C_Master_Receive+0x2c2>
 8002f06:	2d00      	cmp	r5, #0
 8002f08:	d1f4      	bne.n	8002ef4 <HAL_I2C_Master_Receive+0x2ac>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	0752      	lsls	r2, r2, #29
 8002f0e:	d4f1      	bmi.n	8002ef4 <HAL_I2C_Master_Receive+0x2ac>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f10:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f12:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f14:	6322      	str	r2, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f16:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f1a:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002f20:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f24:	f043 0320 	orr.w	r3, r3, #32
 8002f28:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 8002f2a:	e748      	b.n	8002dbe <HAL_I2C_Master_Receive+0x176>
 8002f2c:	ffff0000 	.word	0xffff0000
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f30:	6953      	ldr	r3, [r2, #20]
 8002f32:	075b      	lsls	r3, r3, #29
 8002f34:	f100 80d6 	bmi.w	80030e4 <HAL_I2C_Master_Receive+0x49c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f38:	f7ff fa0e 	bl	8002358 <HAL_GetTick>
 8002f3c:	1b80      	subs	r0, r0, r6
 8002f3e:	4285      	cmp	r5, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f40:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f42:	d301      	bcc.n	8002f48 <HAL_I2C_Master_Receive+0x300>
 8002f44:	2d00      	cmp	r5, #0
 8002f46:	d1f3      	bne.n	8002f30 <HAL_I2C_Master_Receive+0x2e8>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f48:	6953      	ldr	r3, [r2, #20]
 8002f4a:	075b      	lsls	r3, r3, #29
 8002f4c:	d4f0      	bmi.n	8002f30 <HAL_I2C_Master_Receive+0x2e8>
 8002f4e:	e7df      	b.n	8002f10 <HAL_I2C_Master_Receive+0x2c8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f50:	6822      	ldr	r2, [r4, #0]
 8002f52:	9005      	str	r0, [sp, #20]
 8002f54:	6953      	ldr	r3, [r2, #20]
 8002f56:	9305      	str	r3, [sp, #20]
 8002f58:	6993      	ldr	r3, [r2, #24]
 8002f5a:	9305      	str	r3, [sp, #20]
 8002f5c:	9b05      	ldr	r3, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f5e:	6813      	ldr	r3, [r2, #0]
 8002f60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f64:	6013      	str	r3, [r2, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8002f66:	1c6b      	adds	r3, r5, #1
 8002f68:	d114      	bne.n	8002f94 <HAL_I2C_Master_Receive+0x34c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f6a:	6953      	ldr	r3, [r2, #20]
 8002f6c:	07d8      	lsls	r0, r3, #31
 8002f6e:	d5fc      	bpl.n	8002f6a <HAL_I2C_Master_Receive+0x322>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f70:	f048 03f1 	orr.w	r3, r8, #241	@ 0xf1
 8002f74:	6113      	str	r3, [r2, #16]
 8002f76:	e6d5      	b.n	8002d24 <HAL_I2C_Master_Receive+0xdc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f78:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8002f7c:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f7e:	6819      	ldr	r1, [r3, #0]
 8002f80:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 8002f84:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f86:	9003      	str	r0, [sp, #12]
 8002f88:	6959      	ldr	r1, [r3, #20]
 8002f8a:	9103      	str	r1, [sp, #12]
 8002f8c:	6999      	ldr	r1, [r3, #24]
 8002f8e:	9103      	str	r1, [sp, #12]
 8002f90:	9903      	ldr	r1, [sp, #12]
 8002f92:	e73d      	b.n	8002e10 <HAL_I2C_Master_Receive+0x1c8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f94:	6953      	ldr	r3, [r2, #20]
 8002f96:	07d9      	lsls	r1, r3, #31
 8002f98:	d4ea      	bmi.n	8002f70 <HAL_I2C_Master_Receive+0x328>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9a:	f7ff f9dd 	bl	8002358 <HAL_GetTick>
 8002f9e:	1b83      	subs	r3, r0, r6
 8002fa0:	429d      	cmp	r5, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fa2:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa4:	d301      	bcc.n	8002faa <HAL_I2C_Master_Receive+0x362>
 8002fa6:	2d00      	cmp	r5, #0
 8002fa8:	d1f4      	bne.n	8002f94 <HAL_I2C_Master_Receive+0x34c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002faa:	6953      	ldr	r3, [r2, #20]
 8002fac:	07df      	lsls	r7, r3, #31
 8002fae:	d4f1      	bmi.n	8002f94 <HAL_I2C_Master_Receive+0x34c>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fb0:	2100      	movs	r1, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fb2:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fb4:	6321      	str	r1, [r4, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fb6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fba:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fbe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002fc0:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fc4:	f043 0320 	orr.w	r3, r3, #32
 8002fc8:	6423      	str	r3, [r4, #64]	@ 0x40
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fca:	6813      	ldr	r3, [r2, #0]
 8002fcc:	05dd      	lsls	r5, r3, #23
 8002fce:	f53f af0b 	bmi.w	8002de8 <HAL_I2C_Master_Receive+0x1a0>
 8002fd2:	e6f4      	b.n	8002dbe <HAL_I2C_Master_Receive+0x176>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd4:	f7ff f9c0 	bl	8002358 <HAL_GetTick>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002fd8:	6823      	ldr	r3, [r4, #0]
 8002fda:	695a      	ldr	r2, [r3, #20]
 8002fdc:	0651      	lsls	r1, r2, #25
 8002fde:	d597      	bpl.n	8002f10 <HAL_I2C_Master_Receive+0x2c8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	0652      	lsls	r2, r2, #25
 8002fe4:	d403      	bmi.n	8002fee <HAL_I2C_Master_Receive+0x3a6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fe6:	695a      	ldr	r2, [r3, #20]
 8002fe8:	06d0      	lsls	r0, r2, #27
 8002fea:	d5f3      	bpl.n	8002fd4 <HAL_I2C_Master_Receive+0x38c>
 8002fec:	e772      	b.n	8002ed4 <HAL_I2C_Master_Receive+0x28c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fee:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 8002ff4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ff6:	6821      	ldr	r1, [r4, #0]
        hi2c->XferSize--;
 8002ff8:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
        hi2c->pBuffPtr++;
 8002ffa:	6a60      	ldr	r0, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003002:	694b      	ldr	r3, [r1, #20]
        hi2c->XferSize--;
 8003004:	3a01      	subs	r2, #1
 8003006:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8003008:	f100 0c01 	add.w	ip, r0, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800300c:	075b      	lsls	r3, r3, #29
        hi2c->XferSize--;
 800300e:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->pBuffPtr++;
 8003010:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003014:	f57f af40 	bpl.w	8002e98 <HAL_I2C_Master_Receive+0x250>
          if (hi2c->XferSize == 3U)
 8003018:	2a03      	cmp	r2, #3
 800301a:	d103      	bne.n	8003024 <HAL_I2C_Master_Receive+0x3dc>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800301c:	680b      	ldr	r3, [r1, #0]
 800301e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003022:	600b      	str	r3, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003024:	690b      	ldr	r3, [r1, #16]
 8003026:	7043      	strb	r3, [r0, #1]
          hi2c->pBuffPtr++;
 8003028:	6a63      	ldr	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800302a:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 800302c:	3301      	adds	r3, #1
 800302e:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferCount--;
 8003030:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 8003032:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8003034:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 8003036:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8003038:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 800303a:	8522      	strh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800303c:	8563      	strh	r3, [r4, #42]	@ 0x2a
 800303e:	e72b      	b.n	8002e98 <HAL_I2C_Master_Receive+0x250>
 8003040:	1c6a      	adds	r2, r5, #1
 8003042:	d117      	bne.n	8003074 <HAL_I2C_Master_Receive+0x42c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	0750      	lsls	r0, r2, #29
 8003048:	d5fc      	bpl.n	8003044 <HAL_I2C_Master_Receive+0x3fc>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003050:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003052:	691a      	ldr	r2, [r3, #16]
 8003054:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003056:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8003058:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 800305a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
          hi2c->XferCount--;
 800305c:	3b01      	subs	r3, #1
 800305e:	b29b      	uxth	r3, r3
 8003060:	8563      	strh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 8003062:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003064:	3b01      	subs	r3, #1
 8003066:	8523      	strh	r3, [r4, #40]	@ 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003068:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 800306a:	1c51      	adds	r1, r2, #1
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800306c:	691b      	ldr	r3, [r3, #16]
          hi2c->pBuffPtr++;
 800306e:	6261      	str	r1, [r4, #36]	@ 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003070:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8003072:	e7d9      	b.n	8003028 <HAL_I2C_Master_Receive+0x3e0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	0751      	lsls	r1, r2, #29
 8003078:	d4e7      	bmi.n	800304a <HAL_I2C_Master_Receive+0x402>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307a:	f7ff f96d 	bl	8002358 <HAL_GetTick>
 800307e:	1b80      	subs	r0, r0, r6
 8003080:	4285      	cmp	r5, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003082:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003084:	d301      	bcc.n	800308a <HAL_I2C_Master_Receive+0x442>
 8003086:	2d00      	cmp	r5, #0
 8003088:	d1f4      	bne.n	8003074 <HAL_I2C_Master_Receive+0x42c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800308a:	695a      	ldr	r2, [r3, #20]
 800308c:	0751      	lsls	r1, r2, #29
 800308e:	d4f1      	bmi.n	8003074 <HAL_I2C_Master_Receive+0x42c>
 8003090:	e73e      	b.n	8002f10 <HAL_I2C_Master_Receive+0x2c8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003092:	695a      	ldr	r2, [r3, #20]
 8003094:	0650      	lsls	r0, r2, #25
 8003096:	d421      	bmi.n	80030dc <HAL_I2C_Master_Receive+0x494>
 8003098:	b1e5      	cbz	r5, 80030d4 <HAL_I2C_Master_Receive+0x48c>
 800309a:	e00c      	b.n	80030b6 <HAL_I2C_Master_Receive+0x46e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309c:	f7ff f95c 	bl	8002358 <HAL_GetTick>
 80030a0:	1b80      	subs	r0, r0, r6
 80030a2:	42a8      	cmp	r0, r5
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030a4:	6823      	ldr	r3, [r4, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a6:	d903      	bls.n	80030b0 <HAL_I2C_Master_Receive+0x468>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	0652      	lsls	r2, r2, #25
 80030ac:	f57f af30 	bpl.w	8002f10 <HAL_I2C_Master_Receive+0x2c8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	0650      	lsls	r0, r2, #25
 80030b4:	d412      	bmi.n	80030dc <HAL_I2C_Master_Receive+0x494>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	06d1      	lsls	r1, r2, #27
 80030ba:	f53f af0b 	bmi.w	8002ed4 <HAL_I2C_Master_Receive+0x28c>
 80030be:	e7ed      	b.n	800309c <HAL_I2C_Master_Receive+0x454>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c0:	f7ff f94a 	bl	8002358 <HAL_GetTick>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80030c4:	6823      	ldr	r3, [r4, #0]
 80030c6:	695a      	ldr	r2, [r3, #20]
 80030c8:	0652      	lsls	r2, r2, #25
 80030ca:	f57f af21 	bpl.w	8002f10 <HAL_I2C_Master_Receive+0x2c8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030ce:	695a      	ldr	r2, [r3, #20]
 80030d0:	0650      	lsls	r0, r2, #25
 80030d2:	d403      	bmi.n	80030dc <HAL_I2C_Master_Receive+0x494>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030d4:	695a      	ldr	r2, [r3, #20]
 80030d6:	06d1      	lsls	r1, r2, #27
 80030d8:	d5f2      	bpl.n	80030c0 <HAL_I2C_Master_Receive+0x478>
 80030da:	e6fb      	b.n	8002ed4 <HAL_I2C_Master_Receive+0x28c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030dc:	691a      	ldr	r2, [r3, #16]
 80030de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80030e0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80030e2:	e7a1      	b.n	8003028 <HAL_I2C_Master_Receive+0x3e0>
 80030e4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80030e6:	e6b7      	b.n	8002e58 <HAL_I2C_Master_Receive+0x210>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030e8:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 80030ec:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ee:	9002      	str	r0, [sp, #8]
 80030f0:	6959      	ldr	r1, [r3, #20]
 80030f2:	9102      	str	r1, [sp, #8]
 80030f4:	6999      	ldr	r1, [r3, #24]
 80030f6:	9102      	str	r1, [sp, #8]
 80030f8:	9902      	ldr	r1, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030fa:	6819      	ldr	r1, [r3, #0]
 80030fc:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 8003100:	6019      	str	r1, [r3, #0]
 8003102:	e685      	b.n	8002e10 <HAL_I2C_Master_Receive+0x1c8>

08003104 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003104:	2800      	cmp	r0, #0
 8003106:	f000 81d8 	beq.w	80034ba <HAL_RCC_OscConfig+0x3b6>
{
 800310a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800310e:	6803      	ldr	r3, [r0, #0]
 8003110:	07dd      	lsls	r5, r3, #31
{
 8003112:	b082      	sub	sp, #8
 8003114:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003116:	d52f      	bpl.n	8003178 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003118:	499d      	ldr	r1, [pc, #628]	@ (8003390 <HAL_RCC_OscConfig+0x28c>)
 800311a:	688a      	ldr	r2, [r1, #8]
 800311c:	f002 020c 	and.w	r2, r2, #12
 8003120:	2a04      	cmp	r2, #4
 8003122:	f000 80ec 	beq.w	80032fe <HAL_RCC_OscConfig+0x1fa>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003126:	688a      	ldr	r2, [r1, #8]
 8003128:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800312c:	2a08      	cmp	r2, #8
 800312e:	f000 80e2 	beq.w	80032f6 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003132:	6863      	ldr	r3, [r4, #4]
 8003134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003138:	f000 80eb 	beq.w	8003312 <HAL_RCC_OscConfig+0x20e>
 800313c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003140:	f000 8173 	beq.w	800342a <HAL_RCC_OscConfig+0x326>
 8003144:	4d92      	ldr	r5, [pc, #584]	@ (8003390 <HAL_RCC_OscConfig+0x28c>)
 8003146:	682a      	ldr	r2, [r5, #0]
 8003148:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800314c:	602a      	str	r2, [r5, #0]
 800314e:	682a      	ldr	r2, [r5, #0]
 8003150:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003154:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003156:	2b00      	cmp	r3, #0
 8003158:	f040 80e0 	bne.w	800331c <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7ff f8fc 	bl	8002358 <HAL_GetTick>
 8003160:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003162:	e005      	b.n	8003170 <HAL_RCC_OscConfig+0x6c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003164:	f7ff f8f8 	bl	8002358 <HAL_GetTick>
 8003168:	1b80      	subs	r0, r0, r6
 800316a:	2864      	cmp	r0, #100	@ 0x64
 800316c:	f200 8100 	bhi.w	8003370 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003170:	682b      	ldr	r3, [r5, #0]
 8003172:	039f      	lsls	r7, r3, #14
 8003174:	d4f6      	bmi.n	8003164 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003176:	6823      	ldr	r3, [r4, #0]
 8003178:	079d      	lsls	r5, r3, #30
 800317a:	d528      	bpl.n	80031ce <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800317c:	4a84      	ldr	r2, [pc, #528]	@ (8003390 <HAL_RCC_OscConfig+0x28c>)
 800317e:	6891      	ldr	r1, [r2, #8]
 8003180:	f011 0f0c 	tst.w	r1, #12
 8003184:	f000 809b 	beq.w	80032be <HAL_RCC_OscConfig+0x1ba>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003188:	6891      	ldr	r1, [r2, #8]
 800318a:	f001 010c 	and.w	r1, r1, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800318e:	2908      	cmp	r1, #8
 8003190:	f000 8091 	beq.w	80032b6 <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003194:	68e3      	ldr	r3, [r4, #12]
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 810c 	beq.w	80033b4 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800319c:	4b7d      	ldr	r3, [pc, #500]	@ (8003394 <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319e:	4e7c      	ldr	r6, [pc, #496]	@ (8003390 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 80031a0:	2201      	movs	r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80031a4:	f7ff f8d8 	bl	8002358 <HAL_GetTick>
 80031a8:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031aa:	e005      	b.n	80031b8 <HAL_RCC_OscConfig+0xb4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031ac:	f7ff f8d4 	bl	8002358 <HAL_GetTick>
 80031b0:	1b40      	subs	r0, r0, r5
 80031b2:	2802      	cmp	r0, #2
 80031b4:	f200 80dc 	bhi.w	8003370 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b8:	6833      	ldr	r3, [r6, #0]
 80031ba:	079f      	lsls	r7, r3, #30
 80031bc:	d5f6      	bpl.n	80031ac <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031be:	6833      	ldr	r3, [r6, #0]
 80031c0:	6922      	ldr	r2, [r4, #16]
 80031c2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80031c6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80031ca:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	071a      	lsls	r2, r3, #28
 80031d0:	d45c      	bmi.n	800328c <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d2:	075d      	lsls	r5, r3, #29
 80031d4:	d53a      	bpl.n	800324c <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d6:	4a6e      	ldr	r2, [pc, #440]	@ (8003390 <HAL_RCC_OscConfig+0x28c>)
 80031d8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80031da:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 80031de:	f040 8088 	bne.w	80032f2 <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031e2:	9301      	str	r3, [sp, #4]
 80031e4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80031e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80031ec:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80031ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f2:	9301      	str	r3, [sp, #4]
 80031f4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80031f6:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f8:	4e67      	ldr	r6, [pc, #412]	@ (8003398 <HAL_RCC_OscConfig+0x294>)
 80031fa:	6833      	ldr	r3, [r6, #0]
 80031fc:	05d8      	lsls	r0, r3, #23
 80031fe:	f140 80a7 	bpl.w	8003350 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003202:	68a3      	ldr	r3, [r4, #8]
 8003204:	2b01      	cmp	r3, #1
 8003206:	f000 80b7 	beq.w	8003378 <HAL_RCC_OscConfig+0x274>
 800320a:	2b05      	cmp	r3, #5
 800320c:	f000 811d 	beq.w	800344a <HAL_RCC_OscConfig+0x346>
 8003210:	4e5f      	ldr	r6, [pc, #380]	@ (8003390 <HAL_RCC_OscConfig+0x28c>)
 8003212:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8003214:	f022 0201 	bic.w	r2, r2, #1
 8003218:	6732      	str	r2, [r6, #112]	@ 0x70
 800321a:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 800321c:	f022 0204 	bic.w	r2, r2, #4
 8003220:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003222:	2b00      	cmp	r3, #0
 8003224:	f040 80ad 	bne.w	8003382 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003228:	f7ff f896 	bl	8002358 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322c:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003230:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003232:	e005      	b.n	8003240 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003234:	f7ff f890 	bl	8002358 <HAL_GetTick>
 8003238:	1bc0      	subs	r0, r0, r7
 800323a:	4540      	cmp	r0, r8
 800323c:	f200 8098 	bhi.w	8003370 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003240:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8003242:	079b      	lsls	r3, r3, #30
 8003244:	d4f6      	bmi.n	8003234 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003246:	2d00      	cmp	r5, #0
 8003248:	f040 80f9 	bne.w	800343e <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800324c:	69a3      	ldr	r3, [r4, #24]
 800324e:	b1cb      	cbz	r3, 8003284 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003250:	4d4f      	ldr	r5, [pc, #316]	@ (8003390 <HAL_RCC_OscConfig+0x28c>)
 8003252:	68aa      	ldr	r2, [r5, #8]
 8003254:	f002 020c 	and.w	r2, r2, #12
 8003258:	2a08      	cmp	r2, #8
 800325a:	f000 80bc 	beq.w	80033d6 <HAL_RCC_OscConfig+0x2d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800325e:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003260:	4b4c      	ldr	r3, [pc, #304]	@ (8003394 <HAL_RCC_OscConfig+0x290>)
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003268:	f000 80f9 	beq.w	800345e <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7ff f874 	bl	8002358 <HAL_GetTick>
 8003270:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003272:	e004      	b.n	800327e <HAL_RCC_OscConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003274:	f7ff f870 	bl	8002358 <HAL_GetTick>
 8003278:	1b00      	subs	r0, r0, r4
 800327a:	2802      	cmp	r0, #2
 800327c:	d878      	bhi.n	8003370 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327e:	682b      	ldr	r3, [r5, #0]
 8003280:	019b      	lsls	r3, r3, #6
 8003282:	d4f7      	bmi.n	8003274 <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003284:	2000      	movs	r0, #0
}
 8003286:	b002      	add	sp, #8
 8003288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800328c:	6963      	ldr	r3, [r4, #20]
 800328e:	b1fb      	cbz	r3, 80032d0 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 8003290:	4b40      	ldr	r3, [pc, #256]	@ (8003394 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003292:	4e3f      	ldr	r6, [pc, #252]	@ (8003390 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 8003294:	2201      	movs	r2, #1
 8003296:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800329a:	f7ff f85d 	bl	8002358 <HAL_GetTick>
 800329e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a0:	e004      	b.n	80032ac <HAL_RCC_OscConfig+0x1a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a2:	f7ff f859 	bl	8002358 <HAL_GetTick>
 80032a6:	1b40      	subs	r0, r0, r5
 80032a8:	2802      	cmp	r0, #2
 80032aa:	d861      	bhi.n	8003370 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ac:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80032ae:	079b      	lsls	r3, r3, #30
 80032b0:	d5f7      	bpl.n	80032a2 <HAL_RCC_OscConfig+0x19e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032b2:	6823      	ldr	r3, [r4, #0]
 80032b4:	e78d      	b.n	80031d2 <HAL_RCC_OscConfig+0xce>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032b6:	6852      	ldr	r2, [r2, #4]
 80032b8:	0251      	lsls	r1, r2, #9
 80032ba:	f53f af6b 	bmi.w	8003194 <HAL_RCC_OscConfig+0x90>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032be:	4a34      	ldr	r2, [pc, #208]	@ (8003390 <HAL_RCC_OscConfig+0x28c>)
 80032c0:	6812      	ldr	r2, [r2, #0]
 80032c2:	0792      	lsls	r2, r2, #30
 80032c4:	d538      	bpl.n	8003338 <HAL_RCC_OscConfig+0x234>
 80032c6:	68e2      	ldr	r2, [r4, #12]
 80032c8:	2a01      	cmp	r2, #1
 80032ca:	d035      	beq.n	8003338 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 80032cc:	2001      	movs	r0, #1
 80032ce:	e7da      	b.n	8003286 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 80032d0:	4a30      	ldr	r2, [pc, #192]	@ (8003394 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d2:	4e2f      	ldr	r6, [pc, #188]	@ (8003390 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 80032d4:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80032d8:	f7ff f83e 	bl	8002358 <HAL_GetTick>
 80032dc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032de:	e004      	b.n	80032ea <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032e0:	f7ff f83a 	bl	8002358 <HAL_GetTick>
 80032e4:	1b40      	subs	r0, r0, r5
 80032e6:	2802      	cmp	r0, #2
 80032e8:	d842      	bhi.n	8003370 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ea:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80032ec:	079f      	lsls	r7, r3, #30
 80032ee:	d4f7      	bmi.n	80032e0 <HAL_RCC_OscConfig+0x1dc>
 80032f0:	e7df      	b.n	80032b2 <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 80032f2:	2500      	movs	r5, #0
 80032f4:	e780      	b.n	80031f8 <HAL_RCC_OscConfig+0xf4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032f6:	684a      	ldr	r2, [r1, #4]
 80032f8:	0251      	lsls	r1, r2, #9
 80032fa:	f57f af1a 	bpl.w	8003132 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032fe:	4a24      	ldr	r2, [pc, #144]	@ (8003390 <HAL_RCC_OscConfig+0x28c>)
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	0392      	lsls	r2, r2, #14
 8003304:	f57f af38 	bpl.w	8003178 <HAL_RCC_OscConfig+0x74>
 8003308:	6862      	ldr	r2, [r4, #4]
 800330a:	2a00      	cmp	r2, #0
 800330c:	f47f af34 	bne.w	8003178 <HAL_RCC_OscConfig+0x74>
 8003310:	e7dc      	b.n	80032cc <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003312:	4a1f      	ldr	r2, [pc, #124]	@ (8003390 <HAL_RCC_OscConfig+0x28c>)
 8003314:	6813      	ldr	r3, [r2, #0]
 8003316:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800331a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800331c:	f7ff f81c 	bl	8002358 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003320:	4e1b      	ldr	r6, [pc, #108]	@ (8003390 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8003322:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003324:	e004      	b.n	8003330 <HAL_RCC_OscConfig+0x22c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003326:	f7ff f817 	bl	8002358 <HAL_GetTick>
 800332a:	1b40      	subs	r0, r0, r5
 800332c:	2864      	cmp	r0, #100	@ 0x64
 800332e:	d81f      	bhi.n	8003370 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003330:	6833      	ldr	r3, [r6, #0]
 8003332:	039b      	lsls	r3, r3, #14
 8003334:	d5f7      	bpl.n	8003326 <HAL_RCC_OscConfig+0x222>
 8003336:	e71e      	b.n	8003176 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003338:	4915      	ldr	r1, [pc, #84]	@ (8003390 <HAL_RCC_OscConfig+0x28c>)
 800333a:	6920      	ldr	r0, [r4, #16]
 800333c:	680a      	ldr	r2, [r1, #0]
 800333e:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8003342:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003346:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003348:	071a      	lsls	r2, r3, #28
 800334a:	f57f af42 	bpl.w	80031d2 <HAL_RCC_OscConfig+0xce>
 800334e:	e79d      	b.n	800328c <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003350:	6833      	ldr	r3, [r6, #0]
 8003352:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003356:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003358:	f7fe fffe 	bl	8002358 <HAL_GetTick>
 800335c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335e:	6833      	ldr	r3, [r6, #0]
 8003360:	05d9      	lsls	r1, r3, #23
 8003362:	f53f af4e 	bmi.w	8003202 <HAL_RCC_OscConfig+0xfe>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003366:	f7fe fff7 	bl	8002358 <HAL_GetTick>
 800336a:	1bc0      	subs	r0, r0, r7
 800336c:	2802      	cmp	r0, #2
 800336e:	d9f6      	bls.n	800335e <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8003370:	2003      	movs	r0, #3
}
 8003372:	b002      	add	sp, #8
 8003374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003378:	4a05      	ldr	r2, [pc, #20]	@ (8003390 <HAL_RCC_OscConfig+0x28c>)
 800337a:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800337c:	f043 0301 	orr.w	r3, r3, #1
 8003380:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8003382:	f7fe ffe9 	bl	8002358 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003386:	4f02      	ldr	r7, [pc, #8]	@ (8003390 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8003388:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338a:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338e:	e00a      	b.n	80033a6 <HAL_RCC_OscConfig+0x2a2>
 8003390:	40023800 	.word	0x40023800
 8003394:	42470000 	.word	0x42470000
 8003398:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339c:	f7fe ffdc 	bl	8002358 <HAL_GetTick>
 80033a0:	1b80      	subs	r0, r0, r6
 80033a2:	4540      	cmp	r0, r8
 80033a4:	d8e4      	bhi.n	8003370 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80033a8:	079a      	lsls	r2, r3, #30
 80033aa:	d5f7      	bpl.n	800339c <HAL_RCC_OscConfig+0x298>
    if (pwrclkchanged == SET)
 80033ac:	2d00      	cmp	r5, #0
 80033ae:	f43f af4d 	beq.w	800324c <HAL_RCC_OscConfig+0x148>
 80033b2:	e044      	b.n	800343e <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 80033b4:	4a42      	ldr	r2, [pc, #264]	@ (80034c0 <HAL_RCC_OscConfig+0x3bc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033b6:	4e43      	ldr	r6, [pc, #268]	@ (80034c4 <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 80033b8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80033ba:	f7fe ffcd 	bl	8002358 <HAL_GetTick>
 80033be:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c0:	e004      	b.n	80033cc <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c2:	f7fe ffc9 	bl	8002358 <HAL_GetTick>
 80033c6:	1b40      	subs	r0, r0, r5
 80033c8:	2802      	cmp	r0, #2
 80033ca:	d8d1      	bhi.n	8003370 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033cc:	6833      	ldr	r3, [r6, #0]
 80033ce:	0799      	lsls	r1, r3, #30
 80033d0:	d4f7      	bmi.n	80033c2 <HAL_RCC_OscConfig+0x2be>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	e6fb      	b.n	80031ce <HAL_RCC_OscConfig+0xca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	f43f af78 	beq.w	80032cc <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 80033dc:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033de:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e0:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033e4:	4291      	cmp	r1, r2
 80033e6:	f47f af71 	bne.w	80032cc <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ea:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033ec:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f0:	4291      	cmp	r1, r2
 80033f2:	f47f af6b 	bne.w	80032cc <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033f6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80033f8:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80033fc:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033fe:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003402:	f47f af63 	bne.w	80032cc <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003406:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003408:	0852      	lsrs	r2, r2, #1
 800340a:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800340e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003410:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003414:	f47f af5a 	bne.w	80032cc <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003418:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800341a:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800341e:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8003422:	bf14      	ite	ne
 8003424:	2001      	movne	r0, #1
 8003426:	2000      	moveq	r0, #0
 8003428:	e72d      	b.n	8003286 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800342a:	4b26      	ldr	r3, [pc, #152]	@ (80034c4 <HAL_RCC_OscConfig+0x3c0>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800343a:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800343c:	e76e      	b.n	800331c <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 800343e:	4a21      	ldr	r2, [pc, #132]	@ (80034c4 <HAL_RCC_OscConfig+0x3c0>)
 8003440:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003442:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003446:	6413      	str	r3, [r2, #64]	@ 0x40
 8003448:	e700      	b.n	800324c <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800344a:	4b1e      	ldr	r3, [pc, #120]	@ (80034c4 <HAL_RCC_OscConfig+0x3c0>)
 800344c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800344e:	f042 0204 	orr.w	r2, r2, #4
 8003452:	671a      	str	r2, [r3, #112]	@ 0x70
 8003454:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003456:	f042 0201 	orr.w	r2, r2, #1
 800345a:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800345c:	e791      	b.n	8003382 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 800345e:	f7fe ff7b 	bl	8002358 <HAL_GetTick>
 8003462:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003464:	e005      	b.n	8003472 <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003466:	f7fe ff77 	bl	8002358 <HAL_GetTick>
 800346a:	1b80      	subs	r0, r0, r6
 800346c:	2802      	cmp	r0, #2
 800346e:	f63f af7f 	bhi.w	8003370 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003472:	682b      	ldr	r3, [r5, #0]
 8003474:	0199      	lsls	r1, r3, #6
 8003476:	d4f6      	bmi.n	8003466 <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003478:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800347c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800347e:	430b      	orrs	r3, r1
 8003480:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003484:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	@ 0x28
 8003488:	0852      	lsrs	r2, r2, #1
 800348a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800348e:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8003490:	490b      	ldr	r1, [pc, #44]	@ (80034c0 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003492:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8003496:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003498:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800349a:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800349c:	f7fe ff5c 	bl	8002358 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a0:	4d08      	ldr	r5, [pc, #32]	@ (80034c4 <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 80034a2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a4:	e005      	b.n	80034b2 <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a6:	f7fe ff57 	bl	8002358 <HAL_GetTick>
 80034aa:	1b00      	subs	r0, r0, r4
 80034ac:	2802      	cmp	r0, #2
 80034ae:	f63f af5f 	bhi.w	8003370 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b2:	682b      	ldr	r3, [r5, #0]
 80034b4:	019a      	lsls	r2, r3, #6
 80034b6:	d5f6      	bpl.n	80034a6 <HAL_RCC_OscConfig+0x3a2>
 80034b8:	e6e4      	b.n	8003284 <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 80034ba:	2001      	movs	r0, #1
}
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	42470000 	.word	0x42470000
 80034c4:	40023800 	.word	0x40023800

080034c8 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034c8:	4916      	ldr	r1, [pc, #88]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 80034ca:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034cc:	688b      	ldr	r3, [r1, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d01b      	beq.n	800350e <HAL_RCC_GetSysClockFreq+0x46>
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d117      	bne.n	800350a <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034da:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034dc:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034de:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034e0:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034e4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034e8:	d113      	bne.n	8003512 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ea:	480f      	ldr	r0, [pc, #60]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x60>)
 80034ec:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80034f0:	fba1 0100 	umull	r0, r1, r1, r0
 80034f4:	f7fd fbd0 	bl	8000c98 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80034f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003524 <HAL_RCC_GetSysClockFreq+0x5c>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003500:	3301      	adds	r3, #1
 8003502:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8003504:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003508:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800350a:	4807      	ldr	r0, [pc, #28]	@ (8003528 <HAL_RCC_GetSysClockFreq+0x60>)
}
 800350c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800350e:	4807      	ldr	r0, [pc, #28]	@ (800352c <HAL_RCC_GetSysClockFreq+0x64>)
}
 8003510:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003512:	4806      	ldr	r0, [pc, #24]	@ (800352c <HAL_RCC_GetSysClockFreq+0x64>)
 8003514:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003518:	2300      	movs	r3, #0
 800351a:	fba1 0100 	umull	r0, r1, r1, r0
 800351e:	f7fd fbbb 	bl	8000c98 <__aeabi_uldivmod>
 8003522:	e7e9      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x30>
 8003524:	40023800 	.word	0x40023800
 8003528:	00f42400 	.word	0x00f42400
 800352c:	017d7840 	.word	0x017d7840

08003530 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003530:	2800      	cmp	r0, #0
 8003532:	f000 8087 	beq.w	8003644 <HAL_RCC_ClockConfig+0x114>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003536:	4a48      	ldr	r2, [pc, #288]	@ (8003658 <HAL_RCC_ClockConfig+0x128>)
 8003538:	6813      	ldr	r3, [r2, #0]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	428b      	cmp	r3, r1
{
 8003540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003544:	460d      	mov	r5, r1
 8003546:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003548:	d209      	bcs.n	800355e <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354a:	b2cb      	uxtb	r3, r1
 800354c:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800354e:	6813      	ldr	r3, [r2, #0]
 8003550:	f003 0307 	and.w	r3, r3, #7
 8003554:	428b      	cmp	r3, r1
 8003556:	d002      	beq.n	800355e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003558:	2001      	movs	r0, #1
}
 800355a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800355e:	6823      	ldr	r3, [r4, #0]
 8003560:	0798      	lsls	r0, r3, #30
 8003562:	d514      	bpl.n	800358e <HAL_RCC_ClockConfig+0x5e>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003564:	0759      	lsls	r1, r3, #29
 8003566:	d504      	bpl.n	8003572 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003568:	493c      	ldr	r1, [pc, #240]	@ (800365c <HAL_RCC_ClockConfig+0x12c>)
 800356a:	688a      	ldr	r2, [r1, #8]
 800356c:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8003570:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003572:	071a      	lsls	r2, r3, #28
 8003574:	d504      	bpl.n	8003580 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003576:	4939      	ldr	r1, [pc, #228]	@ (800365c <HAL_RCC_ClockConfig+0x12c>)
 8003578:	688a      	ldr	r2, [r1, #8]
 800357a:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 800357e:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4936      	ldr	r1, [pc, #216]	@ (800365c <HAL_RCC_ClockConfig+0x12c>)
 8003582:	68a0      	ldr	r0, [r4, #8]
 8003584:	688a      	ldr	r2, [r1, #8]
 8003586:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800358a:	4302      	orrs	r2, r0
 800358c:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800358e:	07df      	lsls	r7, r3, #31
 8003590:	d521      	bpl.n	80035d6 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003592:	6862      	ldr	r2, [r4, #4]
 8003594:	2a01      	cmp	r2, #1
 8003596:	d057      	beq.n	8003648 <HAL_RCC_ClockConfig+0x118>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003598:	1e93      	subs	r3, r2, #2
 800359a:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359c:	4b2f      	ldr	r3, [pc, #188]	@ (800365c <HAL_RCC_ClockConfig+0x12c>)
 800359e:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035a0:	d94d      	bls.n	800363e <HAL_RCC_ClockConfig+0x10e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a2:	0799      	lsls	r1, r3, #30
 80035a4:	d5d8      	bpl.n	8003558 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035a6:	4e2d      	ldr	r6, [pc, #180]	@ (800365c <HAL_RCC_ClockConfig+0x12c>)
 80035a8:	68b3      	ldr	r3, [r6, #8]
 80035aa:	f023 0303 	bic.w	r3, r3, #3
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80035b2:	f7fe fed1 	bl	8002358 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b6:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80035ba:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035bc:	e004      	b.n	80035c8 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035be:	f7fe fecb 	bl	8002358 <HAL_GetTick>
 80035c2:	1bc0      	subs	r0, r0, r7
 80035c4:	4540      	cmp	r0, r8
 80035c6:	d844      	bhi.n	8003652 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c8:	68b3      	ldr	r3, [r6, #8]
 80035ca:	6862      	ldr	r2, [r4, #4]
 80035cc:	f003 030c 	and.w	r3, r3, #12
 80035d0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80035d4:	d1f3      	bne.n	80035be <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035d6:	4a20      	ldr	r2, [pc, #128]	@ (8003658 <HAL_RCC_ClockConfig+0x128>)
 80035d8:	6813      	ldr	r3, [r2, #0]
 80035da:	f003 0307 	and.w	r3, r3, #7
 80035de:	42ab      	cmp	r3, r5
 80035e0:	d906      	bls.n	80035f0 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e2:	b2eb      	uxtb	r3, r5
 80035e4:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e6:	6813      	ldr	r3, [r2, #0]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	42ab      	cmp	r3, r5
 80035ee:	d1b3      	bne.n	8003558 <HAL_RCC_ClockConfig+0x28>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f0:	6823      	ldr	r3, [r4, #0]
 80035f2:	075a      	lsls	r2, r3, #29
 80035f4:	d506      	bpl.n	8003604 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f6:	4919      	ldr	r1, [pc, #100]	@ (800365c <HAL_RCC_ClockConfig+0x12c>)
 80035f8:	68e0      	ldr	r0, [r4, #12]
 80035fa:	688a      	ldr	r2, [r1, #8]
 80035fc:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8003600:	4302      	orrs	r2, r0
 8003602:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003604:	071b      	lsls	r3, r3, #28
 8003606:	d507      	bpl.n	8003618 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003608:	4a14      	ldr	r2, [pc, #80]	@ (800365c <HAL_RCC_ClockConfig+0x12c>)
 800360a:	6921      	ldr	r1, [r4, #16]
 800360c:	6893      	ldr	r3, [r2, #8]
 800360e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8003612:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003616:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003618:	f7ff ff56 	bl	80034c8 <HAL_RCC_GetSysClockFreq>
 800361c:	4a0f      	ldr	r2, [pc, #60]	@ (800365c <HAL_RCC_ClockConfig+0x12c>)
 800361e:	4c10      	ldr	r4, [pc, #64]	@ (8003660 <HAL_RCC_ClockConfig+0x130>)
 8003620:	6892      	ldr	r2, [r2, #8]
 8003622:	4910      	ldr	r1, [pc, #64]	@ (8003664 <HAL_RCC_ClockConfig+0x134>)
 8003624:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003628:	4603      	mov	r3, r0
 800362a:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick(uwTickPrio);
 800362c:	480e      	ldr	r0, [pc, #56]	@ (8003668 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800362e:	40d3      	lsrs	r3, r2
  HAL_InitTick(uwTickPrio);
 8003630:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003632:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8003634:	f7fe fe46 	bl	80022c4 <HAL_InitTick>
  return HAL_OK;
 8003638:	2000      	movs	r0, #0
}
 800363a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800363e:	0198      	lsls	r0, r3, #6
 8003640:	d4b1      	bmi.n	80035a6 <HAL_RCC_ClockConfig+0x76>
 8003642:	e789      	b.n	8003558 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003644:	2001      	movs	r0, #1
}
 8003646:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003648:	4b04      	ldr	r3, [pc, #16]	@ (800365c <HAL_RCC_ClockConfig+0x12c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	039e      	lsls	r6, r3, #14
 800364e:	d4aa      	bmi.n	80035a6 <HAL_RCC_ClockConfig+0x76>
 8003650:	e782      	b.n	8003558 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8003652:	2003      	movs	r0, #3
 8003654:	e781      	b.n	800355a <HAL_RCC_ClockConfig+0x2a>
 8003656:	bf00      	nop
 8003658:	40023c00 	.word	0x40023c00
 800365c:	40023800 	.word	0x40023800
 8003660:	0800e10c 	.word	0x0800e10c
 8003664:	20000020 	.word	0x20000020
 8003668:	20000028 	.word	0x20000028

0800366c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800366c:	4b04      	ldr	r3, [pc, #16]	@ (8003680 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800366e:	4905      	ldr	r1, [pc, #20]	@ (8003684 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	4a05      	ldr	r2, [pc, #20]	@ (8003688 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003674:	6808      	ldr	r0, [r1, #0]
 8003676:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800367a:	5cd3      	ldrb	r3, [r2, r3]
}
 800367c:	40d8      	lsrs	r0, r3
 800367e:	4770      	bx	lr
 8003680:	40023800 	.word	0x40023800
 8003684:	20000020 	.word	0x20000020
 8003688:	0800e104 	.word	0x0800e104

0800368c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800368c:	4b04      	ldr	r3, [pc, #16]	@ (80036a0 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800368e:	4905      	ldr	r1, [pc, #20]	@ (80036a4 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	4a05      	ldr	r2, [pc, #20]	@ (80036a8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003694:	6808      	ldr	r0, [r1, #0]
 8003696:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800369a:	5cd3      	ldrb	r3, [r2, r3]
}
 800369c:	40d8      	lsrs	r0, r3
 800369e:	4770      	bx	lr
 80036a0:	40023800 	.word	0x40023800
 80036a4:	20000020 	.word	0x20000020
 80036a8:	0800e104 	.word	0x0800e104

080036ac <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036ac:	2800      	cmp	r0, #0
 80036ae:	d071      	beq.n	8003794 <HAL_TIM_Base_Init+0xe8>
{
 80036b0:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036b2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80036b6:	4604      	mov	r4, r0
 80036b8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d053      	beq.n	8003768 <HAL_TIM_Base_Init+0xbc>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c0:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036c2:	4e35      	ldr	r6, [pc, #212]	@ (8003798 <HAL_TIM_Base_Init+0xec>)

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036c4:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036c8:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 80036ca:	2302      	movs	r3, #2
 80036cc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036d0:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 80036d2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036d4:	d04d      	beq.n	8003772 <HAL_TIM_Base_Init+0xc6>
 80036d6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80036da:	d017      	beq.n	800370c <HAL_TIM_Base_Init+0x60>
 80036dc:	f5a6 467c 	sub.w	r6, r6, #64512	@ 0xfc00
 80036e0:	42b2      	cmp	r2, r6
 80036e2:	d013      	beq.n	800370c <HAL_TIM_Base_Init+0x60>
 80036e4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80036e8:	42b2      	cmp	r2, r6
 80036ea:	d00f      	beq.n	800370c <HAL_TIM_Base_Init+0x60>
 80036ec:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80036f0:	42b2      	cmp	r2, r6
 80036f2:	d00b      	beq.n	800370c <HAL_TIM_Base_Init+0x60>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036f4:	4e29      	ldr	r6, [pc, #164]	@ (800379c <HAL_TIM_Base_Init+0xf0>)
 80036f6:	42b2      	cmp	r2, r6
 80036f8:	d00c      	beq.n	8003714 <HAL_TIM_Base_Init+0x68>
 80036fa:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80036fe:	42b2      	cmp	r2, r6
 8003700:	d008      	beq.n	8003714 <HAL_TIM_Base_Init+0x68>
 8003702:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003706:	42b2      	cmp	r2, r6
 8003708:	d108      	bne.n	800371c <HAL_TIM_Base_Init+0x70>
 800370a:	e003      	b.n	8003714 <HAL_TIM_Base_Init+0x68>
    tmpcr1 |= Structure->CounterMode;
 800370c:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800370e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003712:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003714:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003716:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800371a:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800371c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003720:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003722:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003724:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003726:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003728:	2301      	movs	r3, #1
 800372a:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800372c:	6913      	ldr	r3, [r2, #16]
 800372e:	07db      	lsls	r3, r3, #31
 8003730:	d503      	bpl.n	800373a <HAL_TIM_Base_Init+0x8e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003732:	6913      	ldr	r3, [r2, #16]
 8003734:	f023 0301 	bic.w	r3, r3, #1
 8003738:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800373a:	2301      	movs	r3, #1
 800373c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003740:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003744:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003748:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800374c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003750:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003754:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003758:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800375c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003760:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003764:	2000      	movs	r0, #0
}
 8003766:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003768:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800376c:	f7fe fc20 	bl	8001fb0 <HAL_TIM_Base_MspInit>
 8003770:	e7a6      	b.n	80036c0 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8003772:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003774:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003778:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800377a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800377c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003780:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003782:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003786:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003788:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800378a:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800378c:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800378e:	6963      	ldr	r3, [r4, #20]
 8003790:	6313      	str	r3, [r2, #48]	@ 0x30
 8003792:	e7c9      	b.n	8003728 <HAL_TIM_Base_Init+0x7c>
    return HAL_ERROR;
 8003794:	2001      	movs	r0, #1
}
 8003796:	4770      	bx	lr
 8003798:	40010000 	.word	0x40010000
 800379c:	40014000 	.word	0x40014000

080037a0 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80037a0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d127      	bne.n	80037f8 <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037a8:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037aa:	4914      	ldr	r1, [pc, #80]	@ (80037fc <HAL_TIM_Base_Start_IT+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80037ac:	2202      	movs	r2, #2
 80037ae:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037b2:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037b4:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80037b6:	f042 0201 	orr.w	r2, r2, #1
 80037ba:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037bc:	d011      	beq.n	80037e2 <HAL_TIM_Base_Start_IT+0x42>
 80037be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c2:	d00e      	beq.n	80037e2 <HAL_TIM_Base_Start_IT+0x42>
 80037c4:	4a0e      	ldr	r2, [pc, #56]	@ (8003800 <HAL_TIM_Base_Start_IT+0x60>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00b      	beq.n	80037e2 <HAL_TIM_Base_Start_IT+0x42>
 80037ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d007      	beq.n	80037e2 <HAL_TIM_Base_Start_IT+0x42>
 80037d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d003      	beq.n	80037e2 <HAL_TIM_Base_Start_IT+0x42>
 80037da:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80037de:	4293      	cmp	r3, r2
 80037e0:	d104      	bne.n	80037ec <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e8:	2a06      	cmp	r2, #6
 80037ea:	d003      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	f042 0201 	orr.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80037f4:	2000      	movs	r0, #0
 80037f6:	4770      	bx	lr
    return HAL_ERROR;
 80037f8:	2001      	movs	r0, #1
}
 80037fa:	4770      	bx	lr
 80037fc:	40010000 	.word	0x40010000
 8003800:	40000400 	.word	0x40000400

08003804 <HAL_TIM_OC_MspInit>:
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop

08003808 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8003808:	2800      	cmp	r0, #0
 800380a:	d071      	beq.n	80038f0 <HAL_TIM_OC_Init+0xe8>
{
 800380c:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800380e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003812:	4604      	mov	r4, r0
 8003814:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003818:	2b00      	cmp	r3, #0
 800381a:	d053      	beq.n	80038c4 <HAL_TIM_OC_Init+0xbc>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800381c:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800381e:	4e35      	ldr	r6, [pc, #212]	@ (80038f4 <HAL_TIM_OC_Init+0xec>)
  TIMx->PSC = Structure->Prescaler;
 8003820:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003822:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003824:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8003826:	2302      	movs	r3, #2
 8003828:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800382c:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 800382e:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003830:	d04d      	beq.n	80038ce <HAL_TIM_OC_Init+0xc6>
 8003832:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003836:	d017      	beq.n	8003868 <HAL_TIM_OC_Init+0x60>
 8003838:	f5a6 467c 	sub.w	r6, r6, #64512	@ 0xfc00
 800383c:	42b2      	cmp	r2, r6
 800383e:	d013      	beq.n	8003868 <HAL_TIM_OC_Init+0x60>
 8003840:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003844:	42b2      	cmp	r2, r6
 8003846:	d00f      	beq.n	8003868 <HAL_TIM_OC_Init+0x60>
 8003848:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800384c:	42b2      	cmp	r2, r6
 800384e:	d00b      	beq.n	8003868 <HAL_TIM_OC_Init+0x60>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003850:	4e29      	ldr	r6, [pc, #164]	@ (80038f8 <HAL_TIM_OC_Init+0xf0>)
 8003852:	42b2      	cmp	r2, r6
 8003854:	d00c      	beq.n	8003870 <HAL_TIM_OC_Init+0x68>
 8003856:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800385a:	42b2      	cmp	r2, r6
 800385c:	d008      	beq.n	8003870 <HAL_TIM_OC_Init+0x68>
 800385e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003862:	42b2      	cmp	r2, r6
 8003864:	d108      	bne.n	8003878 <HAL_TIM_OC_Init+0x70>
 8003866:	e003      	b.n	8003870 <HAL_TIM_OC_Init+0x68>
    tmpcr1 |= Structure->CounterMode;
 8003868:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800386a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800386e:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003870:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003876:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003878:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800387c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800387e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003880:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003882:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003884:	2301      	movs	r3, #1
 8003886:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003888:	6913      	ldr	r3, [r2, #16]
 800388a:	07db      	lsls	r3, r3, #31
 800388c:	d503      	bpl.n	8003896 <HAL_TIM_OC_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800388e:	6913      	ldr	r3, [r2, #16]
 8003890:	f023 0301 	bic.w	r3, r3, #1
 8003894:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003896:	2301      	movs	r3, #1
 8003898:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80038a0:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80038a4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80038a8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80038b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038b4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80038b8:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80038bc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80038c0:	2000      	movs	r0, #0
}
 80038c2:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80038c4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 80038c8:	f7ff ff9c 	bl	8003804 <HAL_TIM_OC_MspInit>
 80038cc:	e7a6      	b.n	800381c <HAL_TIM_OC_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80038ce:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80038d4:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038d6:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80038d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038dc:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038e2:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80038e4:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038e6:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80038e8:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80038ea:	6963      	ldr	r3, [r4, #20]
 80038ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80038ee:	e7c9      	b.n	8003884 <HAL_TIM_OC_Init+0x7c>
    return HAL_ERROR;
 80038f0:	2001      	movs	r0, #1
}
 80038f2:	4770      	bx	lr
 80038f4:	40010000 	.word	0x40010000
 80038f8:	40014000 	.word	0x40014000

080038fc <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038fc:	bb91      	cbnz	r1, 8003964 <HAL_TIM_OC_Start+0x68>
 80038fe:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8003902:	2b01      	cmp	r3, #1
 8003904:	d136      	bne.n	8003974 <HAL_TIM_OC_Start+0x78>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003906:	2302      	movs	r3, #2
 8003908:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800390c:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800390e:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003912:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003914:	2201      	movs	r2, #1
 8003916:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8003918:	ea20 0002 	bic.w	r0, r0, r2
 800391c:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800391e:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003920:	4922      	ldr	r1, [pc, #136]	@ (80039ac <HAL_TIM_OC_Start+0xb0>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003922:	4302      	orrs	r2, r0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003924:	428b      	cmp	r3, r1
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003926:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003928:	d02a      	beq.n	8003980 <HAL_TIM_OC_Start+0x84>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800392a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800392e:	d00e      	beq.n	800394e <HAL_TIM_OC_Start+0x52>
 8003930:	4a1f      	ldr	r2, [pc, #124]	@ (80039b0 <HAL_TIM_OC_Start+0xb4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00b      	beq.n	800394e <HAL_TIM_OC_Start+0x52>
 8003936:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800393a:	4293      	cmp	r3, r2
 800393c:	d007      	beq.n	800394e <HAL_TIM_OC_Start+0x52>
 800393e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003942:	4293      	cmp	r3, r2
 8003944:	d003      	beq.n	800394e <HAL_TIM_OC_Start+0x52>
 8003946:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800394a:	4293      	cmp	r3, r2
 800394c:	d104      	bne.n	8003958 <HAL_TIM_OC_Start+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003954:	2a06      	cmp	r2, #6
 8003956:	d003      	beq.n	8003960 <HAL_TIM_OC_Start+0x64>
      __HAL_TIM_ENABLE(htim);
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003960:	2000      	movs	r0, #0
 8003962:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003964:	2904      	cmp	r1, #4
 8003966:	d010      	beq.n	800398a <HAL_TIM_OC_Start+0x8e>
 8003968:	2908      	cmp	r1, #8
 800396a:	d016      	beq.n	800399a <HAL_TIM_OC_Start+0x9e>
 800396c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003970:	2b01      	cmp	r3, #1
 8003972:	d001      	beq.n	8003978 <HAL_TIM_OC_Start+0x7c>
    return HAL_ERROR;
 8003974:	2001      	movs	r0, #1
}
 8003976:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003978:	2302      	movs	r3, #2
 800397a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 800397e:	e7c5      	b.n	800390c <HAL_TIM_OC_Start+0x10>
    __HAL_TIM_MOE_ENABLE(htim);
 8003980:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003982:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003986:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003988:	e7e1      	b.n	800394e <HAL_TIM_OC_Start+0x52>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800398a:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 800398e:	2b01      	cmp	r3, #1
 8003990:	d1f0      	bne.n	8003974 <HAL_TIM_OC_Start+0x78>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003992:	2302      	movs	r3, #2
 8003994:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 8003998:	e7b8      	b.n	800390c <HAL_TIM_OC_Start+0x10>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800399a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d1e8      	bne.n	8003974 <HAL_TIM_OC_Start+0x78>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039a2:	2302      	movs	r3, #2
 80039a4:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80039a8:	e7b0      	b.n	800390c <HAL_TIM_OC_Start+0x10>
 80039aa:	bf00      	nop
 80039ac:	40010000 	.word	0x40010000
 80039b0:	40000400 	.word	0x40000400

080039b4 <HAL_TIM_OC_Stop>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80039b4:	6803      	ldr	r3, [r0, #0]
{
 80039b6:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 80039b8:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039ba:	f001 041f 	and.w	r4, r1, #31
 80039be:	f04f 0c01 	mov.w	ip, #1
 80039c2:	fa0c fc04 	lsl.w	ip, ip, r4
  TIMx->CCER &= ~tmp;
 80039c6:	ea22 020c 	bic.w	r2, r2, ip
 80039ca:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003a48 <HAL_TIM_OC_Stop+0x94>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039ce:	6a1c      	ldr	r4, [r3, #32]
 80039d0:	621c      	str	r4, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d022      	beq.n	8003a1c <HAL_TIM_OC_Stop+0x68>
  __HAL_TIM_DISABLE(htim);
 80039d6:	6a1c      	ldr	r4, [r3, #32]
 80039d8:	f241 1211 	movw	r2, #4369	@ 0x1111
 80039dc:	4214      	tst	r4, r2
 80039de:	d104      	bne.n	80039ea <HAL_TIM_OC_Stop+0x36>
 80039e0:	6a1c      	ldr	r4, [r3, #32]
 80039e2:	f240 4244 	movw	r2, #1092	@ 0x444
 80039e6:	4214      	tst	r4, r2
 80039e8:	d013      	beq.n	8003a12 <HAL_TIM_OC_Stop+0x5e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80039ea:	2301      	movs	r3, #1
 80039ec:	b929      	cbnz	r1, 80039fa <HAL_TIM_OC_Stop+0x46>
 80039ee:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
}
 80039f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039f6:	2000      	movs	r0, #0
 80039f8:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80039fa:	2904      	cmp	r1, #4
 80039fc:	d01d      	beq.n	8003a3a <HAL_TIM_OC_Stop+0x86>
 80039fe:	2908      	cmp	r1, #8
 8003a00:	bf0c      	ite	eq
 8003a02:	f880 3040 	strbeq.w	r3, [r0, #64]	@ 0x40
 8003a06:	f880 3041 	strbne.w	r3, [r0, #65]	@ 0x41
}
 8003a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a0e:	2000      	movs	r0, #0
 8003a10:	4770      	bx	lr
  __HAL_TIM_DISABLE(htim);
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	f022 0201 	bic.w	r2, r2, #1
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	e7e6      	b.n	80039ea <HAL_TIM_OC_Stop+0x36>
    __HAL_TIM_MOE_DISABLE(htim);
 8003a1c:	6a1c      	ldr	r4, [r3, #32]
 8003a1e:	f241 1211 	movw	r2, #4369	@ 0x1111
 8003a22:	4214      	tst	r4, r2
 8003a24:	d1d7      	bne.n	80039d6 <HAL_TIM_OC_Stop+0x22>
 8003a26:	6a1c      	ldr	r4, [r3, #32]
 8003a28:	f240 4244 	movw	r2, #1092	@ 0x444
 8003a2c:	4214      	tst	r4, r2
 8003a2e:	d1d2      	bne.n	80039d6 <HAL_TIM_OC_Stop+0x22>
 8003a30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a36:	645a      	str	r2, [r3, #68]	@ 0x44
 8003a38:	e7cd      	b.n	80039d6 <HAL_TIM_OC_Stop+0x22>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a3a:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
}
 8003a3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a42:	2000      	movs	r0, #0
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40010000 	.word	0x40010000

08003a4c <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8003a4c:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	f000 8081 	beq.w	8003b58 <HAL_TIM_OC_ConfigChannel+0x10c>
{
 8003a56:	b470      	push	{r4, r5, r6}
 8003a58:	4684      	mov	ip, r0
  switch (Channel)
 8003a5a:	2a0c      	cmp	r2, #12
 8003a5c:	d808      	bhi.n	8003a70 <HAL_TIM_OC_ConfigChannel+0x24>
 8003a5e:	e8df f002 	tbb	[pc, r2]
 8003a62:	072d      	.short	0x072d
 8003a64:	07460707 	.word	0x07460707
 8003a68:	07610707 	.word	0x07610707
 8003a6c:	0707      	.short	0x0707
 8003a6e:	0d          	.byte	0x0d
 8003a6f:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8003a70:	2300      	movs	r3, #0
 8003a72:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  switch (Channel)
 8003a76:	2001      	movs	r0, #1
}
 8003a78:	bc70      	pop	{r4, r5, r6}
 8003a7a:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a7c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a7e:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8003a80:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a82:	6a18      	ldr	r0, [r3, #32]
 8003a84:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003a88:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003a8a:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003a8c:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a8e:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a92:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a96:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8003a98:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a9c:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aa0:	4d47      	ldr	r5, [pc, #284]	@ (8003bc0 <HAL_TIM_OC_ConfigChannel+0x174>)
 8003aa2:	42ab      	cmp	r3, r5
 8003aa4:	d076      	beq.n	8003b94 <HAL_TIM_OC_ConfigChannel+0x148>
  TIMx->CCR4 = OC_Config->Pulse;
 8003aa6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003aa8:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003aaa:	61d8      	str	r0, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8003aac:	6419      	str	r1, [r3, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8003aae:	621a      	str	r2, [r3, #32]
  __HAL_UNLOCK(htim);
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8003ab6:	2000      	movs	r0, #0
}
 8003ab8:	bc70      	pop	{r4, r5, r6}
 8003aba:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003abc:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8003abe:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8003ac0:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ac2:	6a18      	ldr	r0, [r3, #32]
 8003ac4:	f020 0001 	bic.w	r0, r0, #1
 8003ac8:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003aca:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8003acc:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ace:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003ad2:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8003ad4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8003ad6:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 8003ada:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003adc:	4d38      	ldr	r5, [pc, #224]	@ (8003bc0 <HAL_TIM_OC_ConfigChannel+0x174>)
 8003ade:	42ab      	cmp	r3, r5
 8003ae0:	d03c      	beq.n	8003b5c <HAL_TIM_OC_ConfigChannel+0x110>
  TIMx->CCR1 = OC_Config->Pulse;
 8003ae2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003ae4:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003ae6:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8003ae8:	6359      	str	r1, [r3, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8003aea:	621a      	str	r2, [r3, #32]
}
 8003aec:	e7e0      	b.n	8003ab0 <HAL_TIM_OC_ConfigChannel+0x64>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003aee:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003af0:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8003af2:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003af4:	6a18      	ldr	r0, [r3, #32]
 8003af6:	f020 0010 	bic.w	r0, r0, #16
 8003afa:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003afc:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8003afe:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b00:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b04:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b08:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003b0a:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b0e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b12:	4d2b      	ldr	r5, [pc, #172]	@ (8003bc0 <HAL_TIM_OC_ConfigChannel+0x174>)
 8003b14:	42ab      	cmp	r3, r5
 8003b16:	d02e      	beq.n	8003b76 <HAL_TIM_OC_ConfigChannel+0x12a>
  TIMx->CCR2 = OC_Config->Pulse;
 8003b18:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003b1a:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8003b1c:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8003b1e:	6399      	str	r1, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8003b20:	621a      	str	r2, [r3, #32]
}
 8003b22:	e7c5      	b.n	8003ab0 <HAL_TIM_OC_ConfigChannel+0x64>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b24:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8003b26:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8003b28:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b2a:	6a18      	ldr	r0, [r3, #32]
 8003b2c:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8003b30:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003b32:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003b34:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b36:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003b3a:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b3c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8003b3e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003b42:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003b46:	4d1e      	ldr	r5, [pc, #120]	@ (8003bc0 <HAL_TIM_OC_ConfigChannel+0x174>)
 8003b48:	42ab      	cmp	r3, r5
 8003b4a:	d029      	beq.n	8003ba0 <HAL_TIM_OC_ConfigChannel+0x154>
  TIMx->CCR3 = OC_Config->Pulse;
 8003b4c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8003b4e:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003b50:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003b52:	63d9      	str	r1, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8003b54:	621a      	str	r2, [r3, #32]
}
 8003b56:	e7ab      	b.n	8003ab0 <HAL_TIM_OC_ConfigChannel+0x64>
  __HAL_LOCK(htim);
 8003b58:	2002      	movs	r0, #2
}
 8003b5a:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8003b5c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b5e:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8003b62:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b64:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b68:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b6c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b6e:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b72:	432c      	orrs	r4, r5
 8003b74:	e7b5      	b.n	8003ae2 <HAL_TIM_OC_ConfigChannel+0x96>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b76:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b7c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b80:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b84:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b88:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b8e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8003b92:	e7c1      	b.n	8003b18 <HAL_TIM_OC_ConfigChannel+0xcc>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b94:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b96:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b9a:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8003b9e:	e782      	b.n	8003aa6 <HAL_TIM_OC_ConfigChannel+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ba0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ba2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ba6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003baa:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003bae:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bb2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003bb8:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8003bbc:	e7c6      	b.n	8003b4c <HAL_TIM_OC_ConfigChannel+0x100>
 8003bbe:	bf00      	nop
 8003bc0:	40010000 	.word	0x40010000

08003bc4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003bc4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d071      	beq.n	8003cb0 <HAL_TIM_ConfigClockSource+0xec>
 8003bcc:	4602      	mov	r2, r0
{
 8003bce:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd0:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8003bd2:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd4:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8003bd8:	2001      	movs	r0, #1
 8003bda:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003bde:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003be0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003be4:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8003be8:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8003bea:	680b      	ldr	r3, [r1, #0]
 8003bec:	2b60      	cmp	r3, #96	@ 0x60
 8003bee:	d061      	beq.n	8003cb4 <HAL_TIM_ConfigClockSource+0xf0>
 8003bf0:	d824      	bhi.n	8003c3c <HAL_TIM_ConfigClockSource+0x78>
 8003bf2:	2b40      	cmp	r3, #64	@ 0x40
 8003bf4:	d077      	beq.n	8003ce6 <HAL_TIM_ConfigClockSource+0x122>
 8003bf6:	d94a      	bls.n	8003c8e <HAL_TIM_ConfigClockSource+0xca>
 8003bf8:	2b50      	cmp	r3, #80	@ 0x50
 8003bfa:	d117      	bne.n	8003c2c <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 8003bfc:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003bfe:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8003c00:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c02:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003c06:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c08:	6a23      	ldr	r3, [r4, #32]
 8003c0a:	f023 0301 	bic.w	r3, r3, #1
 8003c0e:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c10:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c16:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003c1a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003c1c:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003c1e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c24:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8003c28:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003c2a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003c2c:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8003c2e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003c30:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003c34:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8003c38:	bc30      	pop	{r4, r5}
 8003c3a:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c40:	d0f3      	beq.n	8003c2a <HAL_TIM_ConfigClockSource+0x66>
 8003c42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c46:	d110      	bne.n	8003c6a <HAL_TIM_ConfigClockSource+0xa6>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c48:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003c4c:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c4e:	432b      	orrs	r3, r5
 8003c50:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c52:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c56:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003c5a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003c5c:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c5e:	68a3      	ldr	r3, [r4, #8]
 8003c60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c64:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003c66:	2000      	movs	r0, #0
 8003c68:	e7e0      	b.n	8003c2c <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8003c6a:	2b70      	cmp	r3, #112	@ 0x70
 8003c6c:	d1de      	bne.n	8003c2c <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c6e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003c72:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c74:	432b      	orrs	r3, r5
 8003c76:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c78:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c7c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003c80:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003c82:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003c84:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c86:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003c8a:	60a3      	str	r3, [r4, #8]
      break;
 8003c8c:	e7cd      	b.n	8003c2a <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d002      	beq.n	8003c98 <HAL_TIM_ConfigClockSource+0xd4>
 8003c92:	d909      	bls.n	8003ca8 <HAL_TIM_ConfigClockSource+0xe4>
 8003c94:	2b30      	cmp	r3, #48	@ 0x30
 8003c96:	d1c9      	bne.n	8003c2c <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 8003c98:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c9a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c9e:	430b      	orrs	r3, r1
 8003ca0:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003ca4:	60a3      	str	r3, [r4, #8]
}
 8003ca6:	e7c0      	b.n	8003c2a <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8003ca8:	f033 0110 	bics.w	r1, r3, #16
 8003cac:	d1be      	bne.n	8003c2c <HAL_TIM_ConfigClockSource+0x68>
 8003cae:	e7f3      	b.n	8003c98 <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 8003cb0:	2002      	movs	r0, #2
}
 8003cb2:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8003cb4:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 8003cb6:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003cb8:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cba:	6a21      	ldr	r1, [r4, #32]
 8003cbc:	f021 0110 	bic.w	r1, r1, #16
 8003cc0:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cc2:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cc4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cc8:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ccc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cd0:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003cd4:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 8003cd6:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003cd8:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cde:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8003ce2:	60a3      	str	r3, [r4, #8]
}
 8003ce4:	e7a1      	b.n	8003c2a <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 8003ce6:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8003ce8:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 8003cea:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cec:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003cf0:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cf2:	6a23      	ldr	r3, [r4, #32]
 8003cf4:	f023 0301 	bic.w	r3, r3, #1
 8003cf8:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cfa:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cfc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d00:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003d04:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003d06:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003d08:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d0e:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8003d12:	60a3      	str	r3, [r4, #8]
}
 8003d14:	e789      	b.n	8003c2a <HAL_TIM_ConfigClockSource+0x66>
 8003d16:	bf00      	nop

08003d18 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop

08003d1c <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop

08003d20 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop

08003d24 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop

08003d28 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8003d28:	6803      	ldr	r3, [r0, #0]
{
 8003d2a:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8003d2c:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d2e:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d30:	07a9      	lsls	r1, r5, #30
{
 8003d32:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d34:	d501      	bpl.n	8003d3a <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d36:	07b2      	lsls	r2, r6, #30
 8003d38:	d451      	bmi.n	8003dde <HAL_TIM_IRQHandler+0xb6>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d3a:	0769      	lsls	r1, r5, #29
 8003d3c:	d501      	bpl.n	8003d42 <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d3e:	0772      	lsls	r2, r6, #29
 8003d40:	d43a      	bmi.n	8003db8 <HAL_TIM_IRQHandler+0x90>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003d42:	072b      	lsls	r3, r5, #28
 8003d44:	d501      	bpl.n	8003d4a <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003d46:	0730      	lsls	r0, r6, #28
 8003d48:	d424      	bmi.n	8003d94 <HAL_TIM_IRQHandler+0x6c>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d4a:	06ea      	lsls	r2, r5, #27
 8003d4c:	d501      	bpl.n	8003d52 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d4e:	06f3      	lsls	r3, r6, #27
 8003d50:	d410      	bmi.n	8003d74 <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d52:	07e8      	lsls	r0, r5, #31
 8003d54:	d501      	bpl.n	8003d5a <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d56:	07f1      	lsls	r1, r6, #31
 8003d58:	d457      	bmi.n	8003e0a <HAL_TIM_IRQHandler+0xe2>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d5a:	062a      	lsls	r2, r5, #24
 8003d5c:	d501      	bpl.n	8003d62 <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d5e:	0633      	lsls	r3, r6, #24
 8003d60:	d45b      	bmi.n	8003e1a <HAL_TIM_IRQHandler+0xf2>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d62:	0668      	lsls	r0, r5, #25
 8003d64:	d501      	bpl.n	8003d6a <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d66:	0671      	lsls	r1, r6, #25
 8003d68:	d45f      	bmi.n	8003e2a <HAL_TIM_IRQHandler+0x102>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d6a:	06aa      	lsls	r2, r5, #26
 8003d6c:	d501      	bpl.n	8003d72 <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d6e:	06b3      	lsls	r3, r6, #26
 8003d70:	d442      	bmi.n	8003df8 <HAL_TIM_IRQHandler+0xd0>
}
 8003d72:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d74:	6823      	ldr	r3, [r4, #0]
 8003d76:	f06f 0210 	mvn.w	r2, #16
 8003d7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d80:	69db      	ldr	r3, [r3, #28]
 8003d82:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003d86:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d88:	d063      	beq.n	8003e52 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003d8a:	f7ff ffc7 	bl	8003d1c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	7723      	strb	r3, [r4, #28]
 8003d92:	e7de      	b.n	8003d52 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d94:	6823      	ldr	r3, [r4, #0]
 8003d96:	f06f 0208 	mvn.w	r2, #8
 8003d9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d9c:	2204      	movs	r2, #4
 8003d9e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8003da4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003da6:	d151      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003da8:	f7ff ffb6 	bl	8003d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dac:	4620      	mov	r0, r4
 8003dae:	f7ff ffb7 	bl	8003d20 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003db2:	2300      	movs	r3, #0
 8003db4:	7723      	strb	r3, [r4, #28]
 8003db6:	e7c8      	b.n	8003d4a <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	f06f 0204 	mvn.w	r2, #4
 8003dbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003dca:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003dcc:	d13b      	bne.n	8003e46 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dce:	f7ff ffa3 	bl	8003d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd2:	4620      	mov	r0, r4
 8003dd4:	f7ff ffa4 	bl	8003d20 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	7723      	strb	r3, [r4, #28]
 8003ddc:	e7b1      	b.n	8003d42 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003dde:	f06f 0202 	mvn.w	r2, #2
 8003de2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003de4:	2201      	movs	r2, #1
 8003de6:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	079b      	lsls	r3, r3, #30
 8003dec:	d025      	beq.n	8003e3a <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8003dee:	f7ff ff95 	bl	8003d1c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003df2:	2300      	movs	r3, #0
 8003df4:	7723      	strb	r3, [r4, #28]
 8003df6:	e7a0      	b.n	8003d3a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003df8:	6823      	ldr	r3, [r4, #0]
 8003dfa:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8003dfe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e00:	611a      	str	r2, [r3, #16]
}
 8003e02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003e06:	f000 b863 	b.w	8003ed0 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	f06f 0201 	mvn.w	r2, #1
 8003e10:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e12:	4620      	mov	r0, r4
 8003e14:	f7fd fe24 	bl	8001a60 <HAL_TIM_PeriodElapsedCallback>
 8003e18:	e79f      	b.n	8003d5a <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e20:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003e22:	4620      	mov	r0, r4
 8003e24:	f000 f856 	bl	8003ed4 <HAL_TIMEx_BreakCallback>
 8003e28:	e79b      	b.n	8003d62 <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003e30:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003e32:	4620      	mov	r0, r4
 8003e34:	f7ff ff76 	bl	8003d24 <HAL_TIM_TriggerCallback>
 8003e38:	e797      	b.n	8003d6a <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e3a:	f7ff ff6d 	bl	8003d18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e3e:	4620      	mov	r0, r4
 8003e40:	f7ff ff6e 	bl	8003d20 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e44:	e7d5      	b.n	8003df2 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8003e46:	f7ff ff69 	bl	8003d1c <HAL_TIM_IC_CaptureCallback>
 8003e4a:	e7c5      	b.n	8003dd8 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_IC_CaptureCallback(htim);
 8003e4c:	f7ff ff66 	bl	8003d1c <HAL_TIM_IC_CaptureCallback>
 8003e50:	e7af      	b.n	8003db2 <HAL_TIM_IRQHandler+0x8a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e52:	f7ff ff61 	bl	8003d18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e56:	4620      	mov	r0, r4
 8003e58:	f7ff ff62 	bl	8003d20 <HAL_TIM_PWM_PulseFinishedCallback>
 8003e5c:	e797      	b.n	8003d8e <HAL_TIM_IRQHandler+0x66>
 8003e5e:	bf00      	nop

08003e60 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e60:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003e64:	2a01      	cmp	r2, #1
 8003e66:	d02f      	beq.n	8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003e68:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e6a:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003e6c:	2002      	movs	r0, #2
{
 8003e6e:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003e74:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e76:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003e78:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e7a:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e7e:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e80:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e82:	4812      	ldr	r0, [pc, #72]	@ (8003ecc <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8003e84:	4282      	cmp	r2, r0
 8003e86:	d012      	beq.n	8003eae <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8003e88:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003e8c:	d00f      	beq.n	8003eae <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8003e8e:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8003e92:	4282      	cmp	r2, r0
 8003e94:	d00b      	beq.n	8003eae <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8003e96:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003e9a:	4282      	cmp	r2, r0
 8003e9c:	d007      	beq.n	8003eae <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8003e9e:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8003ea2:	4282      	cmp	r2, r0
 8003ea4:	d003      	beq.n	8003eae <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8003ea6:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8003eaa:	4282      	cmp	r2, r0
 8003eac:	d104      	bne.n	8003eb8 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eae:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003eb0:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003eb4:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003eb6:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003eb8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003ec0:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8003ec4:	bc30      	pop	{r4, r5}
 8003ec6:	4770      	bx	lr
  __HAL_LOCK(htim);
 8003ec8:	2002      	movs	r0, #2
}
 8003eca:	4770      	bx	lr
 8003ecc:	40010000 	.word	0x40010000

08003ed0 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop

08003ed4 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop

08003ed8 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	f000 8087 	beq.w	8003fec <HAL_UART_Init+0x114>
{
 8003ede:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ee0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003ee4:	4604      	mov	r4, r0
 8003ee6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d079      	beq.n	8003fe2 <HAL_UART_Init+0x10a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003eee:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef0:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8003ef2:	2224      	movs	r2, #36	@ 0x24
 8003ef4:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003efe:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f00:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f02:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f04:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8003f08:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f0a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f0c:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f0e:	4302      	orrs	r2, r0
 8003f10:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003f12:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f14:	4302      	orrs	r2, r0
 8003f16:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003f18:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8003f1c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f20:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003f22:	430a      	orrs	r2, r1
 8003f24:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f26:	695a      	ldr	r2, [r3, #20]
 8003f28:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f2a:	4931      	ldr	r1, [pc, #196]	@ (8003ff0 <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f2c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003f30:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f32:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f34:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f36:	d036      	beq.n	8003fa6 <HAL_UART_Init+0xce>
 8003f38:	4a2e      	ldr	r2, [pc, #184]	@ (8003ff4 <HAL_UART_Init+0x11c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d033      	beq.n	8003fa6 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f3e:	f7ff fb95 	bl	800366c <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f42:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f44:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f46:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f4a:	e9d4 5300 	ldrd	r5, r3, [r4]
 8003f4e:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f52:	d02b      	beq.n	8003fac <HAL_UART_Init+0xd4>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f54:	009a      	lsls	r2, r3, #2
 8003f56:	0f9b      	lsrs	r3, r3, #30
 8003f58:	f7fc fe9e 	bl	8000c98 <__aeabi_uldivmod>
 8003f5c:	4a26      	ldr	r2, [pc, #152]	@ (8003ff8 <HAL_UART_Init+0x120>)
 8003f5e:	fba2 1300 	umull	r1, r3, r2, r0
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	2164      	movs	r1, #100	@ 0x64
 8003f66:	fb01 0013 	mls	r0, r1, r3, r0
 8003f6a:	0100      	lsls	r0, r0, #4
 8003f6c:	3032      	adds	r0, #50	@ 0x32
 8003f6e:	fba2 2000 	umull	r2, r0, r2, r0
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8003f78:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f7a:	692a      	ldr	r2, [r5, #16]
 8003f7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f80:	612a      	str	r2, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f82:	696a      	ldr	r2, [r5, #20]
 8003f84:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f88:	616a      	str	r2, [r5, #20]
  __HAL_UART_ENABLE(huart);
 8003f8a:	68ea      	ldr	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8003f8e:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8003f90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f94:	60ea      	str	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f96:	6463      	str	r3, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f98:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f9c:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  return HAL_OK;
 8003fa0:	4618      	mov	r0, r3
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fa2:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8003fa4:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fa6:	f7ff fb71 	bl	800368c <HAL_RCC_GetPCLK2Freq>
 8003faa:	e7ca      	b.n	8003f42 <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fac:	18da      	adds	r2, r3, r3
 8003fae:	f04f 0300 	mov.w	r3, #0
 8003fb2:	415b      	adcs	r3, r3
 8003fb4:	f7fc fe70 	bl	8000c98 <__aeabi_uldivmod>
 8003fb8:	4a0f      	ldr	r2, [pc, #60]	@ (8003ff8 <HAL_UART_Init+0x120>)
 8003fba:	fba2 3100 	umull	r3, r1, r2, r0
 8003fbe:	0949      	lsrs	r1, r1, #5
 8003fc0:	2364      	movs	r3, #100	@ 0x64
 8003fc2:	fb03 0311 	mls	r3, r3, r1, r0
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	3332      	adds	r3, #50	@ 0x32
 8003fca:	fba2 2303 	umull	r2, r3, r2, r3
 8003fce:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8003fd2:	091b      	lsrs	r3, r3, #4
 8003fd4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003fd8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003fdc:	4413      	add	r3, r2
 8003fde:	60ab      	str	r3, [r5, #8]
 8003fe0:	e7cb      	b.n	8003f7a <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 8003fe2:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8003fe6:	f7fe f87f 	bl	80020e8 <HAL_UART_MspInit>
 8003fea:	e780      	b.n	8003eee <HAL_UART_Init+0x16>
    return HAL_ERROR;
 8003fec:	2001      	movs	r0, #1
}
 8003fee:	4770      	bx	lr
 8003ff0:	40011000 	.word	0x40011000
 8003ff4:	40011400 	.word	0x40011400
 8003ff8:	51eb851f 	.word	0x51eb851f

08003ffc <HAL_UART_Transmit>:
{
 8003ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004000:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8004002:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8004006:	2820      	cmp	r0, #32
 8004008:	d14b      	bne.n	80040a2 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 800400a:	4688      	mov	r8, r1
 800400c:	b109      	cbz	r1, 8004012 <HAL_UART_Transmit+0x16>
 800400e:	4617      	mov	r7, r2
 8004010:	b912      	cbnz	r2, 8004018 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 8004012:	2001      	movs	r0, #1
}
 8004014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004018:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401a:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800401e:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004020:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004024:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8004028:	f7fe f996 	bl	8002358 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800402c:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 800402e:	84a7      	strh	r7, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004030:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 8004034:	84e7      	strh	r7, [r4, #38]	@ 0x26
    tickstart = HAL_GetTick();
 8004036:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004038:	d042      	beq.n	80040c0 <HAL_UART_Transmit+0xc4>
    while (huart->TxXferCount > 0U)
 800403a:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800403c:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 800403e:	b292      	uxth	r2, r2
 8004040:	b192      	cbz	r2, 8004068 <HAL_UART_Transmit+0x6c>
 8004042:	1c68      	adds	r0, r5, #1
 8004044:	d122      	bne.n	800408c <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	0612      	lsls	r2, r2, #24
 800404a:	d5fc      	bpl.n	8004046 <HAL_UART_Transmit+0x4a>
      if (pdata8bits == NULL)
 800404c:	f1b8 0f00 	cmp.w	r8, #0
 8004050:	d022      	beq.n	8004098 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004052:	f818 2b01 	ldrb.w	r2, [r8], #1
 8004056:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 8004058:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 800405a:	3a01      	subs	r2, #1
 800405c:	b292      	uxth	r2, r2
 800405e:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004060:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8004062:	b292      	uxth	r2, r2
 8004064:	2a00      	cmp	r2, #0
 8004066:	d1ec      	bne.n	8004042 <HAL_UART_Transmit+0x46>
 8004068:	1c69      	adds	r1, r5, #1
 800406a:	d125      	bne.n	80040b8 <HAL_UART_Transmit+0xbc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	0652      	lsls	r2, r2, #25
 8004070:	d5fc      	bpl.n	800406c <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8004072:	2320      	movs	r3, #32
 8004074:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8004078:	2000      	movs	r0, #0
 800407a:	e7cb      	b.n	8004014 <HAL_UART_Transmit+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800407c:	f7fe f96c 	bl	8002358 <HAL_GetTick>
 8004080:	1b80      	subs	r0, r0, r6
 8004082:	4285      	cmp	r5, r0
 8004084:	d322      	bcc.n	80040cc <HAL_UART_Transmit+0xd0>
 8004086:	b30d      	cbz	r5, 80040cc <HAL_UART_Transmit+0xd0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	68da      	ldr	r2, [r3, #12]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	0617      	lsls	r7, r2, #24
 8004090:	d5f4      	bpl.n	800407c <HAL_UART_Transmit+0x80>
      if (pdata8bits == NULL)
 8004092:	f1b8 0f00 	cmp.w	r8, #0
 8004096:	d1dc      	bne.n	8004052 <HAL_UART_Transmit+0x56>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004098:	f839 2b02 	ldrh.w	r2, [r9], #2
 800409c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a0:	e7d9      	b.n	8004056 <HAL_UART_Transmit+0x5a>
    return HAL_BUSY;
 80040a2:	2002      	movs	r0, #2
}
 80040a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a8:	f7fe f956 	bl	8002358 <HAL_GetTick>
 80040ac:	1b83      	subs	r3, r0, r6
 80040ae:	429d      	cmp	r5, r3
 80040b0:	d30c      	bcc.n	80040cc <HAL_UART_Transmit+0xd0>
 80040b2:	b15d      	cbz	r5, 80040cc <HAL_UART_Transmit+0xd0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040b4:	6823      	ldr	r3, [r4, #0]
 80040b6:	68da      	ldr	r2, [r3, #12]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	065b      	lsls	r3, r3, #25
 80040bc:	d5f4      	bpl.n	80040a8 <HAL_UART_Transmit+0xac>
 80040be:	e7d8      	b.n	8004072 <HAL_UART_Transmit+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c0:	6923      	ldr	r3, [r4, #16]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1b9      	bne.n	800403a <HAL_UART_Transmit+0x3e>
 80040c6:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 80040c8:	4698      	mov	r8, r3
 80040ca:	e7b6      	b.n	800403a <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 80040cc:	2320      	movs	r3, #32
 80040ce:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 80040d2:	2003      	movs	r0, #3
}
 80040d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080040d8 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80040d8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80040dc:	2b20      	cmp	r3, #32
 80040de:	d120      	bne.n	8004122 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80040e0:	b101      	cbz	r1, 80040e4 <HAL_UART_Receive_IT+0xc>
 80040e2:	b90a      	cbnz	r2, 80040e8 <HAL_UART_Receive_IT+0x10>
      return HAL_ERROR;
 80040e4:	2001      	movs	r0, #1
}
 80040e6:	4770      	bx	lr
{
 80040e8:	b410      	push	{r4}
  if (huart->Init.Parity != UART_PARITY_NONE)
 80040ea:	6904      	ldr	r4, [r0, #16]
  huart->pRxBuffPtr = pData;
 80040ec:	6281      	str	r1, [r0, #40]	@ 0x28
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ee:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040f0:	2122      	movs	r1, #34	@ 0x22
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f2:	6303      	str	r3, [r0, #48]	@ 0x30
  huart->RxXferSize = Size;
 80040f4:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80040f6:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040f8:	6443      	str	r3, [r0, #68]	@ 0x44
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040fa:	6803      	ldr	r3, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040fc:	f880 1042 	strb.w	r1, [r0, #66]	@ 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004100:	b11c      	cbz	r4, 800410a <HAL_UART_Receive_IT+0x32>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004108:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800410a:	695a      	ldr	r2, [r3, #20]
}
 800410c:	f85d 4b04 	ldr.w	r4, [sp], #4
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004110:	f042 0201 	orr.w	r2, r2, #1
 8004114:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004116:	68da      	ldr	r2, [r3, #12]
 8004118:	f042 0220 	orr.w	r2, r2, #32
    return (UART_Start_Receive_IT(huart, pData, Size));
 800411c:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800411e:	60da      	str	r2, [r3, #12]
}
 8004120:	4770      	bx	lr
    return HAL_BUSY;
 8004122:	2002      	movs	r0, #2
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop

08004128 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop

0800412c <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop

08004130 <UART_DMAAbortOnError>:
{
 8004130:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004132:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8004134:	2300      	movs	r3, #0
 8004136:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004138:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 800413a:	f7ff fff7 	bl	800412c <HAL_UART_ErrorCallback>
}
 800413e:	bd08      	pop	{r3, pc}

08004140 <HAL_UARTEx_RxEventCallback>:
}
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop

08004144 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004144:	6883      	ldr	r3, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004146:	6801      	ldr	r1, [r0, #0]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004148:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800414a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800414e:	d042      	beq.n	80041d6 <UART_Receive_IT.part.0.isra.0+0x92>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004150:	2b00      	cmp	r3, #0
 8004152:	d039      	beq.n	80041c8 <UART_Receive_IT.part.0.isra.0+0x84>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004154:	684b      	ldr	r3, [r1, #4]
 8004156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800415a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800415c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800415e:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 8004160:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
      huart->pRxBuffPtr += 2U;
 8004162:	6282      	str	r2, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8004164:	3b01      	subs	r3, #1
 8004166:	b29b      	uxth	r3, r3
 8004168:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800416a:	2b00      	cmp	r3, #0
 800416c:	d132      	bne.n	80041d4 <UART_Receive_IT.part.0.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800416e:	6802      	ldr	r2, [r0, #0]
 8004170:	68d1      	ldr	r1, [r2, #12]
 8004172:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004176:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004178:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800417a:	68d1      	ldr	r1, [r2, #12]
 800417c:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8004180:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004182:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004184:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004188:	f021 0101 	bic.w	r1, r1, #1
 800418c:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800418e:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004192:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004194:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8004196:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004198:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800419a:	d125      	bne.n	80041e8 <UART_Receive_IT.part.0.isra.0+0xa4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419c:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419e:	f102 030c 	add.w	r3, r2, #12
 80041a2:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041a6:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	f102 0c0c 	add.w	ip, r2, #12
 80041ae:	e84c 3100 	strex	r1, r3, [ip]
 80041b2:	2900      	cmp	r1, #0
 80041b4:	d1f3      	bne.n	800419e <UART_Receive_IT.part.0.isra.0+0x5a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041b6:	6813      	ldr	r3, [r2, #0]
 80041b8:	06db      	lsls	r3, r3, #27
 80041ba:	d41a      	bmi.n	80041f2 <UART_Receive_IT.part.0.isra.0+0xae>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041bc:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80041be:	f7ff ffbf 	bl	8004140 <HAL_UARTEx_RxEventCallback>
}
 80041c2:	b003      	add	sp, #12
 80041c4:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80041c8:	6903      	ldr	r3, [r0, #16]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1c2      	bne.n	8004154 <UART_Receive_IT.part.0.isra.0+0x10>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80041ce:	684b      	ldr	r3, [r1, #4]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	e7c2      	b.n	800415a <UART_Receive_IT.part.0.isra.0+0x16>
 80041d4:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d6:	6903      	ldr	r3, [r0, #16]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f8      	bne.n	80041ce <UART_Receive_IT.part.0.isra.0+0x8a>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80041dc:	684b      	ldr	r3, [r1, #4]
 80041de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041e2:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 80041e6:	e7bb      	b.n	8004160 <UART_Receive_IT.part.0.isra.0+0x1c>
        HAL_UART_RxCpltCallback(huart);
 80041e8:	f7fd fc20 	bl	8001a2c <HAL_UART_RxCpltCallback>
}
 80041ec:	b003      	add	sp, #12
 80041ee:	f85d fb04 	ldr.w	pc, [sp], #4
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041f2:	2300      	movs	r3, #0
 80041f4:	9301      	str	r3, [sp, #4]
 80041f6:	6813      	ldr	r3, [r2, #0]
 80041f8:	9301      	str	r3, [sp, #4]
 80041fa:	6853      	ldr	r3, [r2, #4]
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	9b01      	ldr	r3, [sp, #4]
 8004200:	e7dc      	b.n	80041bc <UART_Receive_IT.part.0.isra.0+0x78>
 8004202:	bf00      	nop

08004204 <HAL_UART_IRQHandler>:
{
 8004204:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004206:	6803      	ldr	r3, [r0, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800420a:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800420c:	6959      	ldr	r1, [r3, #20]
  if (errorflags == RESET)
 800420e:	f012 0f0f 	tst.w	r2, #15
{
 8004212:	b083      	sub	sp, #12
 8004214:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8004216:	d170      	bne.n	80042fa <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004218:	0691      	lsls	r1, r2, #26
 800421a:	d502      	bpl.n	8004222 <HAL_UART_IRQHandler+0x1e>
 800421c:	06a9      	lsls	r1, r5, #26
 800421e:	f100 80a1 	bmi.w	8004364 <HAL_UART_IRQHandler+0x160>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004222:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004224:	2901      	cmp	r1, #1
 8004226:	d00b      	beq.n	8004240 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004228:	0610      	lsls	r0, r2, #24
 800422a:	d502      	bpl.n	8004232 <HAL_UART_IRQHandler+0x2e>
 800422c:	0629      	lsls	r1, r5, #24
 800422e:	f100 80a3 	bmi.w	8004378 <HAL_UART_IRQHandler+0x174>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004232:	0652      	lsls	r2, r2, #25
 8004234:	d502      	bpl.n	800423c <HAL_UART_IRQHandler+0x38>
 8004236:	0668      	lsls	r0, r5, #25
 8004238:	f100 80bd 	bmi.w	80043b6 <HAL_UART_IRQHandler+0x1b2>
}
 800423c:	b003      	add	sp, #12
 800423e:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004240:	06d0      	lsls	r0, r2, #27
 8004242:	d5f1      	bpl.n	8004228 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004244:	06e9      	lsls	r1, r5, #27
 8004246:	d5ef      	bpl.n	8004228 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004248:	2200      	movs	r2, #0
 800424a:	9201      	str	r2, [sp, #4]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	9201      	str	r2, [sp, #4]
 8004250:	685a      	ldr	r2, [r3, #4]
 8004252:	9201      	str	r2, [sp, #4]
 8004254:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004256:	695a      	ldr	r2, [r3, #20]
 8004258:	0655      	lsls	r5, r2, #25
 800425a:	f140 8136 	bpl.w	80044ca <HAL_UART_IRQHandler+0x2c6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800425e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004260:	6802      	ldr	r2, [r0, #0]
 8004262:	6852      	ldr	r2, [r2, #4]
 8004264:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8004266:	2a00      	cmp	r2, #0
 8004268:	d0e8      	beq.n	800423c <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800426a:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800426c:	4291      	cmp	r1, r2
 800426e:	d9e5      	bls.n	800423c <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8004270:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004272:	69c2      	ldr	r2, [r0, #28]
 8004274:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8004278:	d036      	beq.n	80042e8 <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800427a:	f103 020c 	add.w	r2, r3, #12
 800427e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004282:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	f103 050c 	add.w	r5, r3, #12
 800428a:	e845 2100 	strex	r1, r2, [r5]
 800428e:	2900      	cmp	r1, #0
 8004290:	d1f3      	bne.n	800427a <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	f103 0214 	add.w	r2, r3, #20
 8004296:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800429a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	f103 0514 	add.w	r5, r3, #20
 80042a2:	e845 2100 	strex	r1, r2, [r5]
 80042a6:	2900      	cmp	r1, #0
 80042a8:	d1f3      	bne.n	8004292 <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042aa:	f103 0214 	add.w	r2, r3, #20
 80042ae:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b6:	f103 0514 	add.w	r5, r3, #20
 80042ba:	e845 2100 	strex	r1, r2, [r5]
 80042be:	2900      	cmp	r1, #0
 80042c0:	d1f3      	bne.n	80042aa <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 80042c2:	2220      	movs	r2, #32
 80042c4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c8:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ca:	f103 020c 	add.w	r2, r3, #12
 80042ce:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d6:	f103 050c 	add.w	r5, r3, #12
 80042da:	e845 2100 	strex	r1, r2, [r5]
 80042de:	2900      	cmp	r1, #0
 80042e0:	d1f3      	bne.n	80042ca <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042e2:	f7fe f8b5 	bl	8002450 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042e6:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042e8:	2302      	movs	r3, #2
 80042ea:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042ec:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80042ee:	1ac9      	subs	r1, r1, r3
 80042f0:	4620      	mov	r0, r4
 80042f2:	b289      	uxth	r1, r1
 80042f4:	f7ff ff24 	bl	8004140 <HAL_UARTEx_RxEventCallback>
 80042f8:	e7a0      	b.n	800423c <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042fa:	f011 0101 	ands.w	r1, r1, #1
 80042fe:	d178      	bne.n	80043f2 <HAL_UART_IRQHandler+0x1ee>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004300:	f415 7f90 	tst.w	r5, #288	@ 0x120
 8004304:	d08d      	beq.n	8004222 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004306:	07d0      	lsls	r0, r2, #31
 8004308:	d50a      	bpl.n	8004320 <HAL_UART_IRQHandler+0x11c>
 800430a:	05e8      	lsls	r0, r5, #23
 800430c:	f140 80d9 	bpl.w	80044c2 <HAL_UART_IRQHandler+0x2be>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004310:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8004312:	f040 0001 	orr.w	r0, r0, #1
 8004316:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004318:	0750      	lsls	r0, r2, #29
 800431a:	d55b      	bpl.n	80043d4 <HAL_UART_IRQHandler+0x1d0>
 800431c:	2900      	cmp	r1, #0
 800431e:	d16c      	bne.n	80043fa <HAL_UART_IRQHandler+0x1f6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004320:	0790      	lsls	r0, r2, #30
 8004322:	d570      	bpl.n	8004406 <HAL_UART_IRQHandler+0x202>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004324:	0710      	lsls	r0, r2, #28
 8004326:	f100 80c9 	bmi.w	80044bc <HAL_UART_IRQHandler+0x2b8>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800432a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800432c:	2900      	cmp	r1, #0
 800432e:	d085      	beq.n	800423c <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004330:	0691      	lsls	r1, r2, #26
 8004332:	d509      	bpl.n	8004348 <HAL_UART_IRQHandler+0x144>
 8004334:	06aa      	lsls	r2, r5, #26
 8004336:	d507      	bpl.n	8004348 <HAL_UART_IRQHandler+0x144>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004338:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 800433c:	2a22      	cmp	r2, #34	@ 0x22
 800433e:	d103      	bne.n	8004348 <HAL_UART_IRQHandler+0x144>
 8004340:	4620      	mov	r0, r4
 8004342:	f7ff feff 	bl	8004144 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004346:	6823      	ldr	r3, [r4, #0]
 8004348:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800434a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800434c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004350:	f001 0108 	and.w	r1, r1, #8
 8004354:	ea52 0501 	orrs.w	r5, r2, r1
 8004358:	d15c      	bne.n	8004414 <HAL_UART_IRQHandler+0x210>
        HAL_UART_ErrorCallback(huart);
 800435a:	4620      	mov	r0, r4
 800435c:	f7ff fee6 	bl	800412c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004360:	6465      	str	r5, [r4, #68]	@ 0x44
 8004362:	e76b      	b.n	800423c <HAL_UART_IRQHandler+0x38>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004364:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8004368:	2b22      	cmp	r3, #34	@ 0x22
 800436a:	f47f af67 	bne.w	800423c <HAL_UART_IRQHandler+0x38>
}
 800436e:	b003      	add	sp, #12
 8004370:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004374:	f7ff bee6 	b.w	8004144 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004378:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800437c:	2a21      	cmp	r2, #33	@ 0x21
 800437e:	f47f af5d 	bne.w	800423c <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004382:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004384:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004386:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800438a:	f000 80d9 	beq.w	8004540 <HAL_UART_IRQHandler+0x33c>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800438e:	1c51      	adds	r1, r2, #1
 8004390:	6221      	str	r1, [r4, #32]
 8004392:	7812      	ldrb	r2, [r2, #0]
 8004394:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8004396:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8004398:	3a01      	subs	r2, #1
 800439a:	b292      	uxth	r2, r2
 800439c:	84e2      	strh	r2, [r4, #38]	@ 0x26
 800439e:	2a00      	cmp	r2, #0
 80043a0:	f47f af4c 	bne.w	800423c <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043aa:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80043b2:	60da      	str	r2, [r3, #12]
 80043b4:	e742      	b.n	800423c <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043b6:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80043b8:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80043ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043be:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80043c0:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80043c2:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 80043c6:	f7ff feaf 	bl	8004128 <HAL_UART_TxCpltCallback>
    return;
 80043ca:	e737      	b.n	800423c <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043cc:	05e8      	lsls	r0, r5, #23
 80043ce:	d49f      	bmi.n	8004310 <HAL_UART_IRQHandler+0x10c>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043d0:	0750      	lsls	r0, r2, #29
 80043d2:	d412      	bmi.n	80043fa <HAL_UART_IRQHandler+0x1f6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043d4:	0790      	lsls	r0, r2, #30
 80043d6:	d516      	bpl.n	8004406 <HAL_UART_IRQHandler+0x202>
 80043d8:	2900      	cmp	r1, #0
 80043da:	d0a3      	beq.n	8004324 <HAL_UART_IRQHandler+0x120>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043dc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80043de:	f041 0104 	orr.w	r1, r1, #4
 80043e2:	6461      	str	r1, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043e4:	0711      	lsls	r1, r2, #28
 80043e6:	d5a0      	bpl.n	800432a <HAL_UART_IRQHandler+0x126>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043e8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80043ea:	f041 0108 	orr.w	r1, r1, #8
 80043ee:	6461      	str	r1, [r4, #68]	@ 0x44
 80043f0:	e79b      	b.n	800432a <HAL_UART_IRQHandler+0x126>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043f2:	07d0      	lsls	r0, r2, #31
 80043f4:	d4ea      	bmi.n	80043cc <HAL_UART_IRQHandler+0x1c8>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043f6:	0750      	lsls	r0, r2, #29
 80043f8:	d55b      	bpl.n	80044b2 <HAL_UART_IRQHandler+0x2ae>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043fa:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80043fc:	f040 0002 	orr.w	r0, r0, #2
 8004400:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004402:	0790      	lsls	r0, r2, #30
 8004404:	d4ea      	bmi.n	80043dc <HAL_UART_IRQHandler+0x1d8>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004406:	0710      	lsls	r0, r2, #28
 8004408:	d58f      	bpl.n	800432a <HAL_UART_IRQHandler+0x126>
 800440a:	f005 0020 	and.w	r0, r5, #32
 800440e:	4308      	orrs	r0, r1
 8004410:	d08b      	beq.n	800432a <HAL_UART_IRQHandler+0x126>
 8004412:	e7e9      	b.n	80043e8 <HAL_UART_IRQHandler+0x1e4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	f103 020c 	add.w	r2, r3, #12
 8004418:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800441c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004420:	f103 000c 	add.w	r0, r3, #12
 8004424:	e840 2100 	strex	r1, r2, [r0]
 8004428:	2900      	cmp	r1, #0
 800442a:	d1f3      	bne.n	8004414 <HAL_UART_IRQHandler+0x210>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442c:	f103 0214 	add.w	r2, r3, #20
 8004430:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004434:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004438:	f103 0014 	add.w	r0, r3, #20
 800443c:	e840 2100 	strex	r1, r2, [r0]
 8004440:	2900      	cmp	r1, #0
 8004442:	d1f3      	bne.n	800442c <HAL_UART_IRQHandler+0x228>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004444:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004446:	2a01      	cmp	r2, #1
 8004448:	d022      	beq.n	8004490 <HAL_UART_IRQHandler+0x28c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800444a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800444c:	2120      	movs	r1, #32
 800444e:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004452:	6322      	str	r2, [r4, #48]	@ 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004454:	695a      	ldr	r2, [r3, #20]
 8004456:	0655      	lsls	r5, r2, #25
 8004458:	d527      	bpl.n	80044aa <HAL_UART_IRQHandler+0x2a6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445a:	f103 0214 	add.w	r2, r3, #20
 800445e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004462:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004466:	f103 0014 	add.w	r0, r3, #20
 800446a:	e840 2100 	strex	r1, r2, [r0]
 800446e:	2900      	cmp	r1, #0
 8004470:	d1f3      	bne.n	800445a <HAL_UART_IRQHandler+0x256>
          if (huart->hdmarx != NULL)
 8004472:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004474:	b1c8      	cbz	r0, 80044aa <HAL_UART_IRQHandler+0x2a6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004476:	4b38      	ldr	r3, [pc, #224]	@ (8004558 <HAL_UART_IRQHandler+0x354>)
 8004478:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800447a:	f7fe f833 	bl	80024e4 <HAL_DMA_Abort_IT>
 800447e:	2800      	cmp	r0, #0
 8004480:	f43f aedc 	beq.w	800423c <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004484:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004486:	6d03      	ldr	r3, [r0, #80]	@ 0x50
}
 8004488:	b003      	add	sp, #12
 800448a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800448e:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004490:	f103 020c 	add.w	r2, r3, #12
 8004494:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004498:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449c:	f103 000c 	add.w	r0, r3, #12
 80044a0:	e840 2100 	strex	r1, r2, [r0]
 80044a4:	2900      	cmp	r1, #0
 80044a6:	d1f3      	bne.n	8004490 <HAL_UART_IRQHandler+0x28c>
 80044a8:	e7cf      	b.n	800444a <HAL_UART_IRQHandler+0x246>
            HAL_UART_ErrorCallback(huart);
 80044aa:	4620      	mov	r0, r4
 80044ac:	f7ff fe3e 	bl	800412c <HAL_UART_ErrorCallback>
 80044b0:	e6c4      	b.n	800423c <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044b2:	0791      	lsls	r1, r2, #30
 80044b4:	d492      	bmi.n	80043dc <HAL_UART_IRQHandler+0x1d8>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80044b6:	0711      	lsls	r1, r2, #28
 80044b8:	d496      	bmi.n	80043e8 <HAL_UART_IRQHandler+0x1e4>
 80044ba:	e736      	b.n	800432a <HAL_UART_IRQHandler+0x126>
 80044bc:	06a9      	lsls	r1, r5, #26
 80044be:	d493      	bmi.n	80043e8 <HAL_UART_IRQHandler+0x1e4>
 80044c0:	e733      	b.n	800432a <HAL_UART_IRQHandler+0x126>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80044c2:	0750      	lsls	r0, r2, #29
 80044c4:	f53f af2c 	bmi.w	8004320 <HAL_UART_IRQHandler+0x11c>
 80044c8:	e784      	b.n	80043d4 <HAL_UART_IRQHandler+0x1d0>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044ca:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 80044cc:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044ce:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 80044d0:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044d2:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80044d4:	2a00      	cmp	r2, #0
 80044d6:	f43f aeb1 	beq.w	800423c <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044da:	1a41      	subs	r1, r0, r1
 80044dc:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80044de:	2900      	cmp	r1, #0
 80044e0:	f43f aeac 	beq.w	800423c <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	f103 020c 	add.w	r2, r3, #12
 80044e8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ec:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	f103 050c 	add.w	r5, r3, #12
 80044f4:	e845 2000 	strex	r0, r2, [r5]
 80044f8:	2800      	cmp	r0, #0
 80044fa:	d1f3      	bne.n	80044e4 <HAL_UART_IRQHandler+0x2e0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fc:	f103 0214 	add.w	r2, r3, #20
 8004500:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004504:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004508:	f103 0514 	add.w	r5, r3, #20
 800450c:	e845 2000 	strex	r0, r2, [r5]
 8004510:	2800      	cmp	r0, #0
 8004512:	d1f3      	bne.n	80044fc <HAL_UART_IRQHandler+0x2f8>
        huart->RxState = HAL_UART_STATE_READY;
 8004514:	2220      	movs	r2, #32
 8004516:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451a:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451c:	f103 020c 	add.w	r2, r3, #12
 8004520:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004524:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	f103 050c 	add.w	r5, r3, #12
 800452c:	e845 2000 	strex	r0, r2, [r5]
 8004530:	2800      	cmp	r0, #0
 8004532:	d1f3      	bne.n	800451c <HAL_UART_IRQHandler+0x318>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004534:	2302      	movs	r3, #2
 8004536:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004538:	4620      	mov	r0, r4
 800453a:	f7ff fe01 	bl	8004140 <HAL_UARTEx_RxEventCallback>
 800453e:	e67d      	b.n	800423c <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004540:	6921      	ldr	r1, [r4, #16]
 8004542:	2900      	cmp	r1, #0
 8004544:	f47f af23 	bne.w	800438e <HAL_UART_IRQHandler+0x18a>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004548:	f832 1b02 	ldrh.w	r1, [r2], #2
 800454c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004550:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004552:	6222      	str	r2, [r4, #32]
 8004554:	e71f      	b.n	8004396 <HAL_UART_IRQHandler+0x192>
 8004556:	bf00      	nop
 8004558:	08004131 	.word	0x08004131

0800455c <arm_copy_f32>:
 800455c:	b4f0      	push	{r4, r5, r6, r7}
 800455e:	0897      	lsrs	r7, r2, #2
 8004560:	d01e      	beq.n	80045a0 <arm_copy_f32+0x44>
 8004562:	f100 0410 	add.w	r4, r0, #16
 8004566:	f101 0310 	add.w	r3, r1, #16
 800456a:	463d      	mov	r5, r7
 800456c:	f854 6c10 	ldr.w	r6, [r4, #-16]
 8004570:	f843 6c10 	str.w	r6, [r3, #-16]
 8004574:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 8004578:	f843 6c0c 	str.w	r6, [r3, #-12]
 800457c:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8004580:	f843 6c08 	str.w	r6, [r3, #-8]
 8004584:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8004588:	f843 6c04 	str.w	r6, [r3, #-4]
 800458c:	3d01      	subs	r5, #1
 800458e:	f104 0410 	add.w	r4, r4, #16
 8004592:	f103 0310 	add.w	r3, r3, #16
 8004596:	d1e9      	bne.n	800456c <arm_copy_f32+0x10>
 8004598:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 800459c:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 80045a0:	f012 0203 	ands.w	r2, r2, #3
 80045a4:	d009      	beq.n	80045ba <arm_copy_f32+0x5e>
 80045a6:	6803      	ldr	r3, [r0, #0]
 80045a8:	600b      	str	r3, [r1, #0]
 80045aa:	3a01      	subs	r2, #1
 80045ac:	d005      	beq.n	80045ba <arm_copy_f32+0x5e>
 80045ae:	6843      	ldr	r3, [r0, #4]
 80045b0:	604b      	str	r3, [r1, #4]
 80045b2:	2a01      	cmp	r2, #1
 80045b4:	bf1c      	itt	ne
 80045b6:	6883      	ldrne	r3, [r0, #8]
 80045b8:	608b      	strne	r3, [r1, #8]
 80045ba:	bcf0      	pop	{r4, r5, r6, r7}
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop

080045c0 <arm_mat_sub_f32>:
 80045c0:	b4f0      	push	{r4, r5, r6, r7}
 80045c2:	e9d1 4600 	ldrd	r4, r6, [r1]
 80045c6:	6803      	ldr	r3, [r0, #0]
 80045c8:	6847      	ldr	r7, [r0, #4]
 80045ca:	6855      	ldr	r5, [r2, #4]
 80045cc:	42a3      	cmp	r3, r4
 80045ce:	d160      	bne.n	8004692 <arm_mat_sub_f32+0xd2>
 80045d0:	6812      	ldr	r2, [r2, #0]
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d15d      	bne.n	8004692 <arm_mat_sub_f32+0xd2>
 80045d6:	8803      	ldrh	r3, [r0, #0]
 80045d8:	8844      	ldrh	r4, [r0, #2]
 80045da:	fb04 f403 	mul.w	r4, r4, r3
 80045de:	ea5f 0c94 	movs.w	ip, r4, lsr #2
 80045e2:	d034      	beq.n	800464e <arm_mat_sub_f32+0x8e>
 80045e4:	f107 0110 	add.w	r1, r7, #16
 80045e8:	f106 0210 	add.w	r2, r6, #16
 80045ec:	f105 0310 	add.w	r3, r5, #16
 80045f0:	4660      	mov	r0, ip
 80045f2:	ed12 7a04 	vldr	s14, [r2, #-16]
 80045f6:	ed51 7a04 	vldr	s15, [r1, #-16]
 80045fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80045fe:	3801      	subs	r0, #1
 8004600:	ed43 7a04 	vstr	s15, [r3, #-16]
 8004604:	ed12 7a03 	vldr	s14, [r2, #-12]
 8004608:	ed51 7a03 	vldr	s15, [r1, #-12]
 800460c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004610:	f101 0110 	add.w	r1, r1, #16
 8004614:	ed43 7a03 	vstr	s15, [r3, #-12]
 8004618:	ed12 7a02 	vldr	s14, [r2, #-8]
 800461c:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 8004620:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004624:	f102 0210 	add.w	r2, r2, #16
 8004628:	ed43 7a02 	vstr	s15, [r3, #-8]
 800462c:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 8004630:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8004634:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004638:	f103 0310 	add.w	r3, r3, #16
 800463c:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8004640:	d1d7      	bne.n	80045f2 <arm_mat_sub_f32+0x32>
 8004642:	eb07 170c 	add.w	r7, r7, ip, lsl #4
 8004646:	eb06 160c 	add.w	r6, r6, ip, lsl #4
 800464a:	eb05 150c 	add.w	r5, r5, ip, lsl #4
 800464e:	f014 0403 	ands.w	r4, r4, #3
 8004652:	d01b      	beq.n	800468c <arm_mat_sub_f32+0xcc>
 8004654:	edd7 7a00 	vldr	s15, [r7]
 8004658:	ed96 7a00 	vldr	s14, [r6]
 800465c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004660:	3c01      	subs	r4, #1
 8004662:	edc5 7a00 	vstr	s15, [r5]
 8004666:	d011      	beq.n	800468c <arm_mat_sub_f32+0xcc>
 8004668:	edd7 7a01 	vldr	s15, [r7, #4]
 800466c:	ed96 7a01 	vldr	s14, [r6, #4]
 8004670:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004674:	2c01      	cmp	r4, #1
 8004676:	edc5 7a01 	vstr	s15, [r5, #4]
 800467a:	d007      	beq.n	800468c <arm_mat_sub_f32+0xcc>
 800467c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004680:	ed96 7a02 	vldr	s14, [r6, #8]
 8004684:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004688:	edc5 7a02 	vstr	s15, [r5, #8]
 800468c:	2000      	movs	r0, #0
 800468e:	bcf0      	pop	{r4, r5, r6, r7}
 8004690:	4770      	bx	lr
 8004692:	f06f 0002 	mvn.w	r0, #2
 8004696:	e7fa      	b.n	800468e <arm_mat_sub_f32+0xce>

08004698 <arm_mat_mult_f32>:
 8004698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800469c:	460c      	mov	r4, r1
 800469e:	b08b      	sub	sp, #44	@ 0x2c
 80046a0:	8825      	ldrh	r5, [r4, #0]
 80046a2:	9107      	str	r1, [sp, #28]
 80046a4:	8841      	ldrh	r1, [r0, #2]
 80046a6:	8806      	ldrh	r6, [r0, #0]
 80046a8:	6843      	ldr	r3, [r0, #4]
 80046aa:	6857      	ldr	r7, [r2, #4]
 80046ac:	6860      	ldr	r0, [r4, #4]
 80046ae:	9602      	str	r6, [sp, #8]
 80046b0:	428d      	cmp	r5, r1
 80046b2:	8864      	ldrh	r4, [r4, #2]
 80046b4:	f040 80f9 	bne.w	80048aa <arm_mat_mult_f32+0x212>
 80046b8:	8811      	ldrh	r1, [r2, #0]
 80046ba:	42b1      	cmp	r1, r6
 80046bc:	f040 80f5 	bne.w	80048aa <arm_mat_mult_f32+0x212>
 80046c0:	8851      	ldrh	r1, [r2, #2]
 80046c2:	42a1      	cmp	r1, r4
 80046c4:	f040 80f1 	bne.w	80048aa <arm_mat_mult_f32+0x212>
 80046c8:	00aa      	lsls	r2, r5, #2
 80046ca:	2901      	cmp	r1, #1
 80046cc:	ea4f 0c95 	mov.w	ip, r5, lsr #2
 80046d0:	ea4f 0481 	mov.w	r4, r1, lsl #2
 80046d4:	f005 0e03 	and.w	lr, r5, #3
 80046d8:	9206      	str	r2, [sp, #24]
 80046da:	d170      	bne.n	80047be <arm_mat_mult_f32+0x126>
 80046dc:	1d01      	adds	r1, r0, #4
 80046de:	9105      	str	r1, [sp, #20]
 80046e0:	ea4f 110c 	mov.w	r1, ip, lsl #4
 80046e4:	4602      	mov	r2, r0
 80046e6:	f107 0904 	add.w	r9, r7, #4
 80046ea:	9101      	str	r1, [sp, #4]
 80046ec:	eb03 1b0c 	add.w	fp, r3, ip, lsl #4
 80046f0:	f103 0a10 	add.w	sl, r3, #16
 80046f4:	f1aa 0310 	sub.w	r3, sl, #16
 80046f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80046fc:	9303      	str	r3, [sp, #12]
 80046fe:	f1a9 0704 	sub.w	r7, r9, #4
 8004702:	eddf 7a6c 	vldr	s15, [pc, #432]	@ 80048b4 <arm_mat_mult_f32+0x21c>
 8004706:	f1bc 0f00 	cmp.w	ip, #0
 800470a:	d052      	beq.n	80047b2 <arm_mat_mult_f32+0x11a>
 800470c:	f102 0008 	add.w	r0, r2, #8
 8004710:	4653      	mov	r3, sl
 8004712:	4665      	mov	r5, ip
 8004714:	4611      	mov	r1, r2
 8004716:	ed13 6a04 	vldr	s12, [r3, #-16]
 800471a:	ed91 7a00 	vldr	s14, [r1]
 800471e:	ed53 4a03 	vldr	s9, [r3, #-12]
 8004722:	edd0 6a00 	vldr	s13, [r0]
 8004726:	ed13 5a02 	vldr	s10, [r3, #-8]
 800472a:	ed53 5a01 	vldr	s11, [r3, #-4]
 800472e:	190e      	adds	r6, r1, r4
 8004730:	ee27 7a06 	vmul.f32	s14, s14, s12
 8004734:	ed96 6a00 	vldr	s12, [r6]
 8004738:	ee77 7a27 	vadd.f32	s15, s14, s15
 800473c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8004740:	1906      	adds	r6, r0, r4
 8004742:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004746:	ee26 7a85 	vmul.f32	s14, s13, s10
 800474a:	edd6 7a00 	vldr	s15, [r6]
 800474e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004752:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004756:	3d01      	subs	r5, #1
 8004758:	ee77 7a87 	vadd.f32	s15, s15, s14
 800475c:	f101 0110 	add.w	r1, r1, #16
 8004760:	f100 0010 	add.w	r0, r0, #16
 8004764:	f103 0310 	add.w	r3, r3, #16
 8004768:	d1d5      	bne.n	8004716 <arm_mat_mult_f32+0x7e>
 800476a:	9b01      	ldr	r3, [sp, #4]
 800476c:	4659      	mov	r1, fp
 800476e:	441a      	add	r2, r3
 8004770:	f1be 0f00 	cmp.w	lr, #0
 8004774:	d00b      	beq.n	800478e <arm_mat_mult_f32+0xf6>
 8004776:	4673      	mov	r3, lr
 8004778:	ed92 7a00 	vldr	s14, [r2]
 800477c:	ecf1 6a01 	vldmia	r1!, {s13}
 8004780:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004784:	3b01      	subs	r3, #1
 8004786:	ee77 7a87 	vadd.f32	s15, s15, s14
 800478a:	4422      	add	r2, r4
 800478c:	d1f4      	bne.n	8004778 <arm_mat_mult_f32+0xe0>
 800478e:	ece7 7a01 	vstmia	r7!, {s15}
 8004792:	454f      	cmp	r7, r9
 8004794:	4642      	mov	r2, r8
 8004796:	f108 0804 	add.w	r8, r8, #4
 800479a:	d1b2      	bne.n	8004702 <arm_mat_mult_f32+0x6a>
 800479c:	9b06      	ldr	r3, [sp, #24]
 800479e:	449b      	add	fp, r3
 80047a0:	449a      	add	sl, r3
 80047a2:	9b02      	ldr	r3, [sp, #8]
 80047a4:	3b01      	subs	r3, #1
 80047a6:	44a1      	add	r9, r4
 80047a8:	9302      	str	r3, [sp, #8]
 80047aa:	d004      	beq.n	80047b6 <arm_mat_mult_f32+0x11e>
 80047ac:	9b07      	ldr	r3, [sp, #28]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	e7a0      	b.n	80046f4 <arm_mat_mult_f32+0x5c>
 80047b2:	9903      	ldr	r1, [sp, #12]
 80047b4:	e7dc      	b.n	8004770 <arm_mat_mult_f32+0xd8>
 80047b6:	4618      	mov	r0, r3
 80047b8:	b00b      	add	sp, #44	@ 0x2c
 80047ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047be:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
 80047c2:	0092      	lsls	r2, r2, #2
 80047c4:	010e      	lsls	r6, r1, #4
 80047c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80047c8:	00ca      	lsls	r2, r1, #3
 80047ca:	9204      	str	r2, [sp, #16]
 80047cc:	fb06 f20c 	mul.w	r2, r6, ip
 80047d0:	1d05      	adds	r5, r0, #4
 80047d2:	9203      	str	r2, [sp, #12]
 80047d4:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 80047d8:	eb07 0b04 	add.w	fp, r7, r4
 80047dc:	9505      	str	r5, [sp, #20]
 80047de:	9201      	str	r2, [sp, #4]
 80047e0:	f103 0a10 	add.w	sl, r3, #16
 80047e4:	f1aa 0310 	sub.w	r3, sl, #16
 80047e8:	9308      	str	r3, [sp, #32]
 80047ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047ec:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80047f0:	eb0b 0803 	add.w	r8, fp, r3
 80047f4:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 80048b4 <arm_mat_mult_f32+0x21c>
 80047f8:	f1bc 0f00 	cmp.w	ip, #0
 80047fc:	d053      	beq.n	80048a6 <arm_mat_mult_f32+0x20e>
 80047fe:	9b04      	ldr	r3, [sp, #16]
 8004800:	4665      	mov	r5, ip
 8004802:	18c1      	adds	r1, r0, r3
 8004804:	4602      	mov	r2, r0
 8004806:	4653      	mov	r3, sl
 8004808:	ed92 6a00 	vldr	s12, [r2]
 800480c:	ed13 7a04 	vldr	s14, [r3, #-16]
 8004810:	ed53 4a03 	vldr	s9, [r3, #-12]
 8004814:	ed53 6a02 	vldr	s13, [r3, #-8]
 8004818:	ed91 5a00 	vldr	s10, [r1]
 800481c:	ed53 5a01 	vldr	s11, [r3, #-4]
 8004820:	1917      	adds	r7, r2, r4
 8004822:	ee27 7a06 	vmul.f32	s14, s14, s12
 8004826:	ed97 6a00 	vldr	s12, [r7]
 800482a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800482e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8004832:	190f      	adds	r7, r1, r4
 8004834:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004838:	ee26 7a85 	vmul.f32	s14, s13, s10
 800483c:	edd7 7a00 	vldr	s15, [r7]
 8004840:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004844:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004848:	3d01      	subs	r5, #1
 800484a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800484e:	4432      	add	r2, r6
 8004850:	4431      	add	r1, r6
 8004852:	f103 0310 	add.w	r3, r3, #16
 8004856:	d1d7      	bne.n	8004808 <arm_mat_mult_f32+0x170>
 8004858:	9b03      	ldr	r3, [sp, #12]
 800485a:	9a01      	ldr	r2, [sp, #4]
 800485c:	4418      	add	r0, r3
 800485e:	f1be 0f00 	cmp.w	lr, #0
 8004862:	d00b      	beq.n	800487c <arm_mat_mult_f32+0x1e4>
 8004864:	4673      	mov	r3, lr
 8004866:	edd0 6a00 	vldr	s13, [r0]
 800486a:	ecb2 7a01 	vldmia	r2!, {s14}
 800486e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004872:	3b01      	subs	r3, #1
 8004874:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004878:	4420      	add	r0, r4
 800487a:	d1f4      	bne.n	8004866 <arm_mat_mult_f32+0x1ce>
 800487c:	ece8 7a01 	vstmia	r8!, {s15}
 8004880:	45d8      	cmp	r8, fp
 8004882:	4648      	mov	r0, r9
 8004884:	f109 0904 	add.w	r9, r9, #4
 8004888:	d1b4      	bne.n	80047f4 <arm_mat_mult_f32+0x15c>
 800488a:	9a01      	ldr	r2, [sp, #4]
 800488c:	9b06      	ldr	r3, [sp, #24]
 800488e:	4611      	mov	r1, r2
 8004890:	4419      	add	r1, r3
 8004892:	449a      	add	sl, r3
 8004894:	9b02      	ldr	r3, [sp, #8]
 8004896:	9101      	str	r1, [sp, #4]
 8004898:	3b01      	subs	r3, #1
 800489a:	44a3      	add	fp, r4
 800489c:	9302      	str	r3, [sp, #8]
 800489e:	d08a      	beq.n	80047b6 <arm_mat_mult_f32+0x11e>
 80048a0:	9b07      	ldr	r3, [sp, #28]
 80048a2:	6858      	ldr	r0, [r3, #4]
 80048a4:	e79e      	b.n	80047e4 <arm_mat_mult_f32+0x14c>
 80048a6:	9a08      	ldr	r2, [sp, #32]
 80048a8:	e7d9      	b.n	800485e <arm_mat_mult_f32+0x1c6>
 80048aa:	f06f 0002 	mvn.w	r0, #2
 80048ae:	b00b      	add	sp, #44	@ 0x2c
 80048b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048b4:	00000000 	.word	0x00000000

080048b8 <arm_mat_init_f32>:
 80048b8:	8001      	strh	r1, [r0, #0]
 80048ba:	8042      	strh	r2, [r0, #2]
 80048bc:	6043      	str	r3, [r0, #4]
 80048be:	4770      	bx	lr

080048c0 <arm_mat_add_f32>:
 80048c0:	b4f0      	push	{r4, r5, r6, r7}
 80048c2:	e9d1 4600 	ldrd	r4, r6, [r1]
 80048c6:	6803      	ldr	r3, [r0, #0]
 80048c8:	6847      	ldr	r7, [r0, #4]
 80048ca:	6855      	ldr	r5, [r2, #4]
 80048cc:	42a3      	cmp	r3, r4
 80048ce:	d160      	bne.n	8004992 <arm_mat_add_f32+0xd2>
 80048d0:	6812      	ldr	r2, [r2, #0]
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d15d      	bne.n	8004992 <arm_mat_add_f32+0xd2>
 80048d6:	8803      	ldrh	r3, [r0, #0]
 80048d8:	8844      	ldrh	r4, [r0, #2]
 80048da:	fb04 f403 	mul.w	r4, r4, r3
 80048de:	ea5f 0c94 	movs.w	ip, r4, lsr #2
 80048e2:	d034      	beq.n	800494e <arm_mat_add_f32+0x8e>
 80048e4:	f107 0110 	add.w	r1, r7, #16
 80048e8:	f106 0210 	add.w	r2, r6, #16
 80048ec:	f105 0310 	add.w	r3, r5, #16
 80048f0:	4660      	mov	r0, ip
 80048f2:	ed12 7a04 	vldr	s14, [r2, #-16]
 80048f6:	ed51 7a04 	vldr	s15, [r1, #-16]
 80048fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80048fe:	3801      	subs	r0, #1
 8004900:	ed43 7a04 	vstr	s15, [r3, #-16]
 8004904:	ed12 7a03 	vldr	s14, [r2, #-12]
 8004908:	ed51 7a03 	vldr	s15, [r1, #-12]
 800490c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004910:	f101 0110 	add.w	r1, r1, #16
 8004914:	ed43 7a03 	vstr	s15, [r3, #-12]
 8004918:	ed12 7a02 	vldr	s14, [r2, #-8]
 800491c:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 8004920:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004924:	f102 0210 	add.w	r2, r2, #16
 8004928:	ed43 7a02 	vstr	s15, [r3, #-8]
 800492c:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 8004930:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8004934:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004938:	f103 0310 	add.w	r3, r3, #16
 800493c:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8004940:	d1d7      	bne.n	80048f2 <arm_mat_add_f32+0x32>
 8004942:	eb07 170c 	add.w	r7, r7, ip, lsl #4
 8004946:	eb06 160c 	add.w	r6, r6, ip, lsl #4
 800494a:	eb05 150c 	add.w	r5, r5, ip, lsl #4
 800494e:	f014 0403 	ands.w	r4, r4, #3
 8004952:	d01b      	beq.n	800498c <arm_mat_add_f32+0xcc>
 8004954:	edd6 7a00 	vldr	s15, [r6]
 8004958:	ed97 7a00 	vldr	s14, [r7]
 800495c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004960:	3c01      	subs	r4, #1
 8004962:	edc5 7a00 	vstr	s15, [r5]
 8004966:	d011      	beq.n	800498c <arm_mat_add_f32+0xcc>
 8004968:	edd7 7a01 	vldr	s15, [r7, #4]
 800496c:	ed96 7a01 	vldr	s14, [r6, #4]
 8004970:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004974:	2c01      	cmp	r4, #1
 8004976:	edc5 7a01 	vstr	s15, [r5, #4]
 800497a:	d007      	beq.n	800498c <arm_mat_add_f32+0xcc>
 800497c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004980:	ed96 7a02 	vldr	s14, [r6, #8]
 8004984:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004988:	edc5 7a02 	vstr	s15, [r5, #8]
 800498c:	2000      	movs	r0, #0
 800498e:	bcf0      	pop	{r4, r5, r6, r7}
 8004990:	4770      	bx	lr
 8004992:	f06f 0002 	mvn.w	r0, #2
 8004996:	e7fa      	b.n	800498e <arm_mat_add_f32+0xce>

08004998 <arm_scale_f32>:
 8004998:	b470      	push	{r4, r5, r6}
 800499a:	0896      	lsrs	r6, r2, #2
 800499c:	d026      	beq.n	80049ec <arm_scale_f32+0x54>
 800499e:	f100 0410 	add.w	r4, r0, #16
 80049a2:	f101 0310 	add.w	r3, r1, #16
 80049a6:	4635      	mov	r5, r6
 80049a8:	ed14 6a03 	vldr	s12, [r4, #-12]
 80049ac:	ed54 6a02 	vldr	s13, [r4, #-8]
 80049b0:	ed14 7a01 	vldr	s14, [r4, #-4]
 80049b4:	ed54 7a04 	vldr	s15, [r4, #-16]
 80049b8:	ee20 6a06 	vmul.f32	s12, s0, s12
 80049bc:	ee60 6a26 	vmul.f32	s13, s0, s13
 80049c0:	ee20 7a07 	vmul.f32	s14, s0, s14
 80049c4:	ee67 7a80 	vmul.f32	s15, s15, s0
 80049c8:	3d01      	subs	r5, #1
 80049ca:	ed03 6a03 	vstr	s12, [r3, #-12]
 80049ce:	ed43 6a02 	vstr	s13, [r3, #-8]
 80049d2:	ed03 7a01 	vstr	s14, [r3, #-4]
 80049d6:	ed43 7a04 	vstr	s15, [r3, #-16]
 80049da:	f104 0410 	add.w	r4, r4, #16
 80049de:	f103 0310 	add.w	r3, r3, #16
 80049e2:	d1e1      	bne.n	80049a8 <arm_scale_f32+0x10>
 80049e4:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 80049e8:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 80049ec:	f012 0203 	ands.w	r2, r2, #3
 80049f0:	d015      	beq.n	8004a1e <arm_scale_f32+0x86>
 80049f2:	edd0 7a00 	vldr	s15, [r0]
 80049f6:	ee67 7a80 	vmul.f32	s15, s15, s0
 80049fa:	3a01      	subs	r2, #1
 80049fc:	edc1 7a00 	vstr	s15, [r1]
 8004a00:	d00d      	beq.n	8004a1e <arm_scale_f32+0x86>
 8004a02:	edd0 7a01 	vldr	s15, [r0, #4]
 8004a06:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004a0a:	2a01      	cmp	r2, #1
 8004a0c:	edc1 7a01 	vstr	s15, [r1, #4]
 8004a10:	d005      	beq.n	8004a1e <arm_scale_f32+0x86>
 8004a12:	edd0 7a02 	vldr	s15, [r0, #8]
 8004a16:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004a1a:	ed81 0a02 	vstr	s0, [r1, #8]
 8004a1e:	bc70      	pop	{r4, r5, r6}
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop

08004a24 <atof>:
 8004a24:	2100      	movs	r1, #0
 8004a26:	f000 bec9 	b.w	80057bc <strtod>
	...

08004a2c <malloc>:
 8004a2c:	4b02      	ldr	r3, [pc, #8]	@ (8004a38 <malloc+0xc>)
 8004a2e:	4601      	mov	r1, r0
 8004a30:	6818      	ldr	r0, [r3, #0]
 8004a32:	f000 b82d 	b.w	8004a90 <_malloc_r>
 8004a36:	bf00      	nop
 8004a38:	200001a4 	.word	0x200001a4

08004a3c <free>:
 8004a3c:	4b02      	ldr	r3, [pc, #8]	@ (8004a48 <free+0xc>)
 8004a3e:	4601      	mov	r1, r0
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	f002 bdad 	b.w	80075a0 <_free_r>
 8004a46:	bf00      	nop
 8004a48:	200001a4 	.word	0x200001a4

08004a4c <sbrk_aligned>:
 8004a4c:	b570      	push	{r4, r5, r6, lr}
 8004a4e:	4e0f      	ldr	r6, [pc, #60]	@ (8004a8c <sbrk_aligned+0x40>)
 8004a50:	460c      	mov	r4, r1
 8004a52:	6831      	ldr	r1, [r6, #0]
 8004a54:	4605      	mov	r5, r0
 8004a56:	b911      	cbnz	r1, 8004a5e <sbrk_aligned+0x12>
 8004a58:	f001 fee6 	bl	8006828 <_sbrk_r>
 8004a5c:	6030      	str	r0, [r6, #0]
 8004a5e:	4621      	mov	r1, r4
 8004a60:	4628      	mov	r0, r5
 8004a62:	f001 fee1 	bl	8006828 <_sbrk_r>
 8004a66:	1c43      	adds	r3, r0, #1
 8004a68:	d103      	bne.n	8004a72 <sbrk_aligned+0x26>
 8004a6a:	f04f 34ff 	mov.w	r4, #4294967295
 8004a6e:	4620      	mov	r0, r4
 8004a70:	bd70      	pop	{r4, r5, r6, pc}
 8004a72:	1cc4      	adds	r4, r0, #3
 8004a74:	f024 0403 	bic.w	r4, r4, #3
 8004a78:	42a0      	cmp	r0, r4
 8004a7a:	d0f8      	beq.n	8004a6e <sbrk_aligned+0x22>
 8004a7c:	1a21      	subs	r1, r4, r0
 8004a7e:	4628      	mov	r0, r5
 8004a80:	f001 fed2 	bl	8006828 <_sbrk_r>
 8004a84:	3001      	adds	r0, #1
 8004a86:	d1f2      	bne.n	8004a6e <sbrk_aligned+0x22>
 8004a88:	e7ef      	b.n	8004a6a <sbrk_aligned+0x1e>
 8004a8a:	bf00      	nop
 8004a8c:	20000a64 	.word	0x20000a64

08004a90 <_malloc_r>:
 8004a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a94:	1ccd      	adds	r5, r1, #3
 8004a96:	f025 0503 	bic.w	r5, r5, #3
 8004a9a:	3508      	adds	r5, #8
 8004a9c:	2d0c      	cmp	r5, #12
 8004a9e:	bf38      	it	cc
 8004aa0:	250c      	movcc	r5, #12
 8004aa2:	2d00      	cmp	r5, #0
 8004aa4:	4606      	mov	r6, r0
 8004aa6:	db01      	blt.n	8004aac <_malloc_r+0x1c>
 8004aa8:	42a9      	cmp	r1, r5
 8004aaa:	d904      	bls.n	8004ab6 <_malloc_r+0x26>
 8004aac:	230c      	movs	r3, #12
 8004aae:	6033      	str	r3, [r6, #0]
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ab6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b8c <_malloc_r+0xfc>
 8004aba:	f000 f869 	bl	8004b90 <__malloc_lock>
 8004abe:	f8d8 3000 	ldr.w	r3, [r8]
 8004ac2:	461c      	mov	r4, r3
 8004ac4:	bb44      	cbnz	r4, 8004b18 <_malloc_r+0x88>
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f7ff ffbf 	bl	8004a4c <sbrk_aligned>
 8004ace:	1c43      	adds	r3, r0, #1
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	d158      	bne.n	8004b86 <_malloc_r+0xf6>
 8004ad4:	f8d8 4000 	ldr.w	r4, [r8]
 8004ad8:	4627      	mov	r7, r4
 8004ada:	2f00      	cmp	r7, #0
 8004adc:	d143      	bne.n	8004b66 <_malloc_r+0xd6>
 8004ade:	2c00      	cmp	r4, #0
 8004ae0:	d04b      	beq.n	8004b7a <_malloc_r+0xea>
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	4639      	mov	r1, r7
 8004ae6:	4630      	mov	r0, r6
 8004ae8:	eb04 0903 	add.w	r9, r4, r3
 8004aec:	f001 fe9c 	bl	8006828 <_sbrk_r>
 8004af0:	4581      	cmp	r9, r0
 8004af2:	d142      	bne.n	8004b7a <_malloc_r+0xea>
 8004af4:	6821      	ldr	r1, [r4, #0]
 8004af6:	1a6d      	subs	r5, r5, r1
 8004af8:	4629      	mov	r1, r5
 8004afa:	4630      	mov	r0, r6
 8004afc:	f7ff ffa6 	bl	8004a4c <sbrk_aligned>
 8004b00:	3001      	adds	r0, #1
 8004b02:	d03a      	beq.n	8004b7a <_malloc_r+0xea>
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	442b      	add	r3, r5
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	bb62      	cbnz	r2, 8004b6c <_malloc_r+0xdc>
 8004b12:	f8c8 7000 	str.w	r7, [r8]
 8004b16:	e00f      	b.n	8004b38 <_malloc_r+0xa8>
 8004b18:	6822      	ldr	r2, [r4, #0]
 8004b1a:	1b52      	subs	r2, r2, r5
 8004b1c:	d420      	bmi.n	8004b60 <_malloc_r+0xd0>
 8004b1e:	2a0b      	cmp	r2, #11
 8004b20:	d917      	bls.n	8004b52 <_malloc_r+0xc2>
 8004b22:	1961      	adds	r1, r4, r5
 8004b24:	42a3      	cmp	r3, r4
 8004b26:	6025      	str	r5, [r4, #0]
 8004b28:	bf18      	it	ne
 8004b2a:	6059      	strne	r1, [r3, #4]
 8004b2c:	6863      	ldr	r3, [r4, #4]
 8004b2e:	bf08      	it	eq
 8004b30:	f8c8 1000 	streq.w	r1, [r8]
 8004b34:	5162      	str	r2, [r4, r5]
 8004b36:	604b      	str	r3, [r1, #4]
 8004b38:	4630      	mov	r0, r6
 8004b3a:	f000 f82f 	bl	8004b9c <__malloc_unlock>
 8004b3e:	f104 000b 	add.w	r0, r4, #11
 8004b42:	1d23      	adds	r3, r4, #4
 8004b44:	f020 0007 	bic.w	r0, r0, #7
 8004b48:	1ac2      	subs	r2, r0, r3
 8004b4a:	bf1c      	itt	ne
 8004b4c:	1a1b      	subne	r3, r3, r0
 8004b4e:	50a3      	strne	r3, [r4, r2]
 8004b50:	e7af      	b.n	8004ab2 <_malloc_r+0x22>
 8004b52:	6862      	ldr	r2, [r4, #4]
 8004b54:	42a3      	cmp	r3, r4
 8004b56:	bf0c      	ite	eq
 8004b58:	f8c8 2000 	streq.w	r2, [r8]
 8004b5c:	605a      	strne	r2, [r3, #4]
 8004b5e:	e7eb      	b.n	8004b38 <_malloc_r+0xa8>
 8004b60:	4623      	mov	r3, r4
 8004b62:	6864      	ldr	r4, [r4, #4]
 8004b64:	e7ae      	b.n	8004ac4 <_malloc_r+0x34>
 8004b66:	463c      	mov	r4, r7
 8004b68:	687f      	ldr	r7, [r7, #4]
 8004b6a:	e7b6      	b.n	8004ada <_malloc_r+0x4a>
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	42a3      	cmp	r3, r4
 8004b72:	d1fb      	bne.n	8004b6c <_malloc_r+0xdc>
 8004b74:	2300      	movs	r3, #0
 8004b76:	6053      	str	r3, [r2, #4]
 8004b78:	e7de      	b.n	8004b38 <_malloc_r+0xa8>
 8004b7a:	230c      	movs	r3, #12
 8004b7c:	6033      	str	r3, [r6, #0]
 8004b7e:	4630      	mov	r0, r6
 8004b80:	f000 f80c 	bl	8004b9c <__malloc_unlock>
 8004b84:	e794      	b.n	8004ab0 <_malloc_r+0x20>
 8004b86:	6005      	str	r5, [r0, #0]
 8004b88:	e7d6      	b.n	8004b38 <_malloc_r+0xa8>
 8004b8a:	bf00      	nop
 8004b8c:	20000a68 	.word	0x20000a68

08004b90 <__malloc_lock>:
 8004b90:	4801      	ldr	r0, [pc, #4]	@ (8004b98 <__malloc_lock+0x8>)
 8004b92:	f001 be96 	b.w	80068c2 <__retarget_lock_acquire_recursive>
 8004b96:	bf00      	nop
 8004b98:	20000bac 	.word	0x20000bac

08004b9c <__malloc_unlock>:
 8004b9c:	4801      	ldr	r0, [pc, #4]	@ (8004ba4 <__malloc_unlock+0x8>)
 8004b9e:	f001 be91 	b.w	80068c4 <__retarget_lock_release_recursive>
 8004ba2:	bf00      	nop
 8004ba4:	20000bac 	.word	0x20000bac

08004ba8 <sulp>:
 8004ba8:	b570      	push	{r4, r5, r6, lr}
 8004baa:	4604      	mov	r4, r0
 8004bac:	460d      	mov	r5, r1
 8004bae:	ec45 4b10 	vmov	d0, r4, r5
 8004bb2:	4616      	mov	r6, r2
 8004bb4:	f003 fbfe 	bl	80083b4 <__ulp>
 8004bb8:	ec51 0b10 	vmov	r0, r1, d0
 8004bbc:	b17e      	cbz	r6, 8004bde <sulp+0x36>
 8004bbe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004bc2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	dd09      	ble.n	8004bde <sulp+0x36>
 8004bca:	051b      	lsls	r3, r3, #20
 8004bcc:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8004bd0:	2400      	movs	r4, #0
 8004bd2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8004bd6:	4622      	mov	r2, r4
 8004bd8:	462b      	mov	r3, r5
 8004bda:	f7fb fd15 	bl	8000608 <__aeabi_dmul>
 8004bde:	ec41 0b10 	vmov	d0, r0, r1
 8004be2:	bd70      	pop	{r4, r5, r6, pc}
 8004be4:	0000      	movs	r0, r0
	...

08004be8 <_strtod_l>:
 8004be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bec:	b09f      	sub	sp, #124	@ 0x7c
 8004bee:	460c      	mov	r4, r1
 8004bf0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	921a      	str	r2, [sp, #104]	@ 0x68
 8004bf6:	9005      	str	r0, [sp, #20]
 8004bf8:	f04f 0a00 	mov.w	sl, #0
 8004bfc:	f04f 0b00 	mov.w	fp, #0
 8004c00:	460a      	mov	r2, r1
 8004c02:	9219      	str	r2, [sp, #100]	@ 0x64
 8004c04:	7811      	ldrb	r1, [r2, #0]
 8004c06:	292b      	cmp	r1, #43	@ 0x2b
 8004c08:	d04a      	beq.n	8004ca0 <_strtod_l+0xb8>
 8004c0a:	d838      	bhi.n	8004c7e <_strtod_l+0x96>
 8004c0c:	290d      	cmp	r1, #13
 8004c0e:	d832      	bhi.n	8004c76 <_strtod_l+0x8e>
 8004c10:	2908      	cmp	r1, #8
 8004c12:	d832      	bhi.n	8004c7a <_strtod_l+0x92>
 8004c14:	2900      	cmp	r1, #0
 8004c16:	d03b      	beq.n	8004c90 <_strtod_l+0xa8>
 8004c18:	2200      	movs	r2, #0
 8004c1a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8004c1c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8004c1e:	782a      	ldrb	r2, [r5, #0]
 8004c20:	2a30      	cmp	r2, #48	@ 0x30
 8004c22:	f040 80b3 	bne.w	8004d8c <_strtod_l+0x1a4>
 8004c26:	786a      	ldrb	r2, [r5, #1]
 8004c28:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004c2c:	2a58      	cmp	r2, #88	@ 0x58
 8004c2e:	d16e      	bne.n	8004d0e <_strtod_l+0x126>
 8004c30:	9302      	str	r3, [sp, #8]
 8004c32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	ab1a      	add	r3, sp, #104	@ 0x68
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	4a8e      	ldr	r2, [pc, #568]	@ (8004e74 <_strtod_l+0x28c>)
 8004c3c:	9805      	ldr	r0, [sp, #20]
 8004c3e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004c40:	a919      	add	r1, sp, #100	@ 0x64
 8004c42:	f002 fd5f 	bl	8007704 <__gethex>
 8004c46:	f010 060f 	ands.w	r6, r0, #15
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	d005      	beq.n	8004c5a <_strtod_l+0x72>
 8004c4e:	2e06      	cmp	r6, #6
 8004c50:	d128      	bne.n	8004ca4 <_strtod_l+0xbc>
 8004c52:	3501      	adds	r5, #1
 8004c54:	2300      	movs	r3, #0
 8004c56:	9519      	str	r5, [sp, #100]	@ 0x64
 8004c58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f040 858e 	bne.w	800577e <_strtod_l+0xb96>
 8004c62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c64:	b1cb      	cbz	r3, 8004c9a <_strtod_l+0xb2>
 8004c66:	4652      	mov	r2, sl
 8004c68:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8004c6c:	ec43 2b10 	vmov	d0, r2, r3
 8004c70:	b01f      	add	sp, #124	@ 0x7c
 8004c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c76:	2920      	cmp	r1, #32
 8004c78:	d1ce      	bne.n	8004c18 <_strtod_l+0x30>
 8004c7a:	3201      	adds	r2, #1
 8004c7c:	e7c1      	b.n	8004c02 <_strtod_l+0x1a>
 8004c7e:	292d      	cmp	r1, #45	@ 0x2d
 8004c80:	d1ca      	bne.n	8004c18 <_strtod_l+0x30>
 8004c82:	2101      	movs	r1, #1
 8004c84:	910b      	str	r1, [sp, #44]	@ 0x2c
 8004c86:	1c51      	adds	r1, r2, #1
 8004c88:	9119      	str	r1, [sp, #100]	@ 0x64
 8004c8a:	7852      	ldrb	r2, [r2, #1]
 8004c8c:	2a00      	cmp	r2, #0
 8004c8e:	d1c5      	bne.n	8004c1c <_strtod_l+0x34>
 8004c90:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004c92:	9419      	str	r4, [sp, #100]	@ 0x64
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f040 8570 	bne.w	800577a <_strtod_l+0xb92>
 8004c9a:	4652      	mov	r2, sl
 8004c9c:	465b      	mov	r3, fp
 8004c9e:	e7e5      	b.n	8004c6c <_strtod_l+0x84>
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	e7ef      	b.n	8004c84 <_strtod_l+0x9c>
 8004ca4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004ca6:	b13a      	cbz	r2, 8004cb8 <_strtod_l+0xd0>
 8004ca8:	2135      	movs	r1, #53	@ 0x35
 8004caa:	a81c      	add	r0, sp, #112	@ 0x70
 8004cac:	f003 fc7c 	bl	80085a8 <__copybits>
 8004cb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004cb2:	9805      	ldr	r0, [sp, #20]
 8004cb4:	f003 f84a 	bl	8007d4c <_Bfree>
 8004cb8:	3e01      	subs	r6, #1
 8004cba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8004cbc:	2e04      	cmp	r6, #4
 8004cbe:	d806      	bhi.n	8004cce <_strtod_l+0xe6>
 8004cc0:	e8df f006 	tbb	[pc, r6]
 8004cc4:	201d0314 	.word	0x201d0314
 8004cc8:	14          	.byte	0x14
 8004cc9:	00          	.byte	0x00
 8004cca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8004cce:	05e1      	lsls	r1, r4, #23
 8004cd0:	bf48      	it	mi
 8004cd2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8004cd6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004cda:	0d1b      	lsrs	r3, r3, #20
 8004cdc:	051b      	lsls	r3, r3, #20
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1bb      	bne.n	8004c5a <_strtod_l+0x72>
 8004ce2:	f001 fdc3 	bl	800686c <__errno>
 8004ce6:	2322      	movs	r3, #34	@ 0x22
 8004ce8:	6003      	str	r3, [r0, #0]
 8004cea:	e7b6      	b.n	8004c5a <_strtod_l+0x72>
 8004cec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8004cf0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004cf4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004cf8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004cfc:	e7e7      	b.n	8004cce <_strtod_l+0xe6>
 8004cfe:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8004e7c <_strtod_l+0x294>
 8004d02:	e7e4      	b.n	8004cce <_strtod_l+0xe6>
 8004d04:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8004d08:	f04f 3aff 	mov.w	sl, #4294967295
 8004d0c:	e7df      	b.n	8004cce <_strtod_l+0xe6>
 8004d0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	9219      	str	r2, [sp, #100]	@ 0x64
 8004d14:	785b      	ldrb	r3, [r3, #1]
 8004d16:	2b30      	cmp	r3, #48	@ 0x30
 8004d18:	d0f9      	beq.n	8004d0e <_strtod_l+0x126>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d09d      	beq.n	8004c5a <_strtod_l+0x72>
 8004d1e:	2301      	movs	r3, #1
 8004d20:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004d24:	930c      	str	r3, [sp, #48]	@ 0x30
 8004d26:	2300      	movs	r3, #0
 8004d28:	9308      	str	r3, [sp, #32]
 8004d2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d2c:	461f      	mov	r7, r3
 8004d2e:	220a      	movs	r2, #10
 8004d30:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004d32:	7805      	ldrb	r5, [r0, #0]
 8004d34:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8004d38:	b2d9      	uxtb	r1, r3
 8004d3a:	2909      	cmp	r1, #9
 8004d3c:	d928      	bls.n	8004d90 <_strtod_l+0x1a8>
 8004d3e:	494e      	ldr	r1, [pc, #312]	@ (8004e78 <_strtod_l+0x290>)
 8004d40:	2201      	movs	r2, #1
 8004d42:	f001 fcfc 	bl	800673e <strncmp>
 8004d46:	2800      	cmp	r0, #0
 8004d48:	d032      	beq.n	8004db0 <_strtod_l+0x1c8>
 8004d4a:	2000      	movs	r0, #0
 8004d4c:	462a      	mov	r2, r5
 8004d4e:	4681      	mov	r9, r0
 8004d50:	463d      	mov	r5, r7
 8004d52:	4603      	mov	r3, r0
 8004d54:	2a65      	cmp	r2, #101	@ 0x65
 8004d56:	d001      	beq.n	8004d5c <_strtod_l+0x174>
 8004d58:	2a45      	cmp	r2, #69	@ 0x45
 8004d5a:	d114      	bne.n	8004d86 <_strtod_l+0x19e>
 8004d5c:	b91d      	cbnz	r5, 8004d66 <_strtod_l+0x17e>
 8004d5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d60:	4302      	orrs	r2, r0
 8004d62:	d095      	beq.n	8004c90 <_strtod_l+0xa8>
 8004d64:	2500      	movs	r5, #0
 8004d66:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8004d68:	1c62      	adds	r2, r4, #1
 8004d6a:	9219      	str	r2, [sp, #100]	@ 0x64
 8004d6c:	7862      	ldrb	r2, [r4, #1]
 8004d6e:	2a2b      	cmp	r2, #43	@ 0x2b
 8004d70:	d077      	beq.n	8004e62 <_strtod_l+0x27a>
 8004d72:	2a2d      	cmp	r2, #45	@ 0x2d
 8004d74:	d07b      	beq.n	8004e6e <_strtod_l+0x286>
 8004d76:	f04f 0c00 	mov.w	ip, #0
 8004d7a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8004d7e:	2909      	cmp	r1, #9
 8004d80:	f240 8082 	bls.w	8004e88 <_strtod_l+0x2a0>
 8004d84:	9419      	str	r4, [sp, #100]	@ 0x64
 8004d86:	f04f 0800 	mov.w	r8, #0
 8004d8a:	e0a2      	b.n	8004ed2 <_strtod_l+0x2ea>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	e7c7      	b.n	8004d20 <_strtod_l+0x138>
 8004d90:	2f08      	cmp	r7, #8
 8004d92:	bfd5      	itete	le
 8004d94:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8004d96:	9908      	ldrgt	r1, [sp, #32]
 8004d98:	fb02 3301 	mlale	r3, r2, r1, r3
 8004d9c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004da0:	f100 0001 	add.w	r0, r0, #1
 8004da4:	bfd4      	ite	le
 8004da6:	930a      	strle	r3, [sp, #40]	@ 0x28
 8004da8:	9308      	strgt	r3, [sp, #32]
 8004daa:	3701      	adds	r7, #1
 8004dac:	9019      	str	r0, [sp, #100]	@ 0x64
 8004dae:	e7bf      	b.n	8004d30 <_strtod_l+0x148>
 8004db0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004db2:	1c5a      	adds	r2, r3, #1
 8004db4:	9219      	str	r2, [sp, #100]	@ 0x64
 8004db6:	785a      	ldrb	r2, [r3, #1]
 8004db8:	b37f      	cbz	r7, 8004e1a <_strtod_l+0x232>
 8004dba:	4681      	mov	r9, r0
 8004dbc:	463d      	mov	r5, r7
 8004dbe:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8004dc2:	2b09      	cmp	r3, #9
 8004dc4:	d912      	bls.n	8004dec <_strtod_l+0x204>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e7c4      	b.n	8004d54 <_strtod_l+0x16c>
 8004dca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004dcc:	1c5a      	adds	r2, r3, #1
 8004dce:	9219      	str	r2, [sp, #100]	@ 0x64
 8004dd0:	785a      	ldrb	r2, [r3, #1]
 8004dd2:	3001      	adds	r0, #1
 8004dd4:	2a30      	cmp	r2, #48	@ 0x30
 8004dd6:	d0f8      	beq.n	8004dca <_strtod_l+0x1e2>
 8004dd8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8004ddc:	2b08      	cmp	r3, #8
 8004dde:	f200 84d3 	bhi.w	8005788 <_strtod_l+0xba0>
 8004de2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004de4:	930c      	str	r3, [sp, #48]	@ 0x30
 8004de6:	4681      	mov	r9, r0
 8004de8:	2000      	movs	r0, #0
 8004dea:	4605      	mov	r5, r0
 8004dec:	3a30      	subs	r2, #48	@ 0x30
 8004dee:	f100 0301 	add.w	r3, r0, #1
 8004df2:	d02a      	beq.n	8004e4a <_strtod_l+0x262>
 8004df4:	4499      	add	r9, r3
 8004df6:	eb00 0c05 	add.w	ip, r0, r5
 8004dfa:	462b      	mov	r3, r5
 8004dfc:	210a      	movs	r1, #10
 8004dfe:	4563      	cmp	r3, ip
 8004e00:	d10d      	bne.n	8004e1e <_strtod_l+0x236>
 8004e02:	1c69      	adds	r1, r5, #1
 8004e04:	4401      	add	r1, r0
 8004e06:	4428      	add	r0, r5
 8004e08:	2808      	cmp	r0, #8
 8004e0a:	dc16      	bgt.n	8004e3a <_strtod_l+0x252>
 8004e0c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004e0e:	230a      	movs	r3, #10
 8004e10:	fb03 2300 	mla	r3, r3, r0, r2
 8004e14:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e16:	2300      	movs	r3, #0
 8004e18:	e018      	b.n	8004e4c <_strtod_l+0x264>
 8004e1a:	4638      	mov	r0, r7
 8004e1c:	e7da      	b.n	8004dd4 <_strtod_l+0x1ec>
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	f103 0301 	add.w	r3, r3, #1
 8004e24:	dc03      	bgt.n	8004e2e <_strtod_l+0x246>
 8004e26:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8004e28:	434e      	muls	r6, r1
 8004e2a:	960a      	str	r6, [sp, #40]	@ 0x28
 8004e2c:	e7e7      	b.n	8004dfe <_strtod_l+0x216>
 8004e2e:	2b10      	cmp	r3, #16
 8004e30:	bfde      	ittt	le
 8004e32:	9e08      	ldrle	r6, [sp, #32]
 8004e34:	434e      	mulle	r6, r1
 8004e36:	9608      	strle	r6, [sp, #32]
 8004e38:	e7e1      	b.n	8004dfe <_strtod_l+0x216>
 8004e3a:	280f      	cmp	r0, #15
 8004e3c:	dceb      	bgt.n	8004e16 <_strtod_l+0x22e>
 8004e3e:	9808      	ldr	r0, [sp, #32]
 8004e40:	230a      	movs	r3, #10
 8004e42:	fb03 2300 	mla	r3, r3, r0, r2
 8004e46:	9308      	str	r3, [sp, #32]
 8004e48:	e7e5      	b.n	8004e16 <_strtod_l+0x22e>
 8004e4a:	4629      	mov	r1, r5
 8004e4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004e4e:	1c50      	adds	r0, r2, #1
 8004e50:	9019      	str	r0, [sp, #100]	@ 0x64
 8004e52:	7852      	ldrb	r2, [r2, #1]
 8004e54:	4618      	mov	r0, r3
 8004e56:	460d      	mov	r5, r1
 8004e58:	e7b1      	b.n	8004dbe <_strtod_l+0x1d6>
 8004e5a:	f04f 0900 	mov.w	r9, #0
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e77d      	b.n	8004d5e <_strtod_l+0x176>
 8004e62:	f04f 0c00 	mov.w	ip, #0
 8004e66:	1ca2      	adds	r2, r4, #2
 8004e68:	9219      	str	r2, [sp, #100]	@ 0x64
 8004e6a:	78a2      	ldrb	r2, [r4, #2]
 8004e6c:	e785      	b.n	8004d7a <_strtod_l+0x192>
 8004e6e:	f04f 0c01 	mov.w	ip, #1
 8004e72:	e7f8      	b.n	8004e66 <_strtod_l+0x27e>
 8004e74:	0800e134 	.word	0x0800e134
 8004e78:	0800e11c 	.word	0x0800e11c
 8004e7c:	7ff00000 	.word	0x7ff00000
 8004e80:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004e82:	1c51      	adds	r1, r2, #1
 8004e84:	9119      	str	r1, [sp, #100]	@ 0x64
 8004e86:	7852      	ldrb	r2, [r2, #1]
 8004e88:	2a30      	cmp	r2, #48	@ 0x30
 8004e8a:	d0f9      	beq.n	8004e80 <_strtod_l+0x298>
 8004e8c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8004e90:	2908      	cmp	r1, #8
 8004e92:	f63f af78 	bhi.w	8004d86 <_strtod_l+0x19e>
 8004e96:	3a30      	subs	r2, #48	@ 0x30
 8004e98:	920e      	str	r2, [sp, #56]	@ 0x38
 8004e9a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004e9c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8004e9e:	f04f 080a 	mov.w	r8, #10
 8004ea2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004ea4:	1c56      	adds	r6, r2, #1
 8004ea6:	9619      	str	r6, [sp, #100]	@ 0x64
 8004ea8:	7852      	ldrb	r2, [r2, #1]
 8004eaa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8004eae:	f1be 0f09 	cmp.w	lr, #9
 8004eb2:	d939      	bls.n	8004f28 <_strtod_l+0x340>
 8004eb4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004eb6:	1a76      	subs	r6, r6, r1
 8004eb8:	2e08      	cmp	r6, #8
 8004eba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8004ebe:	dc03      	bgt.n	8004ec8 <_strtod_l+0x2e0>
 8004ec0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004ec2:	4588      	cmp	r8, r1
 8004ec4:	bfa8      	it	ge
 8004ec6:	4688      	movge	r8, r1
 8004ec8:	f1bc 0f00 	cmp.w	ip, #0
 8004ecc:	d001      	beq.n	8004ed2 <_strtod_l+0x2ea>
 8004ece:	f1c8 0800 	rsb	r8, r8, #0
 8004ed2:	2d00      	cmp	r5, #0
 8004ed4:	d14e      	bne.n	8004f74 <_strtod_l+0x38c>
 8004ed6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004ed8:	4308      	orrs	r0, r1
 8004eda:	f47f aebe 	bne.w	8004c5a <_strtod_l+0x72>
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f47f aed6 	bne.w	8004c90 <_strtod_l+0xa8>
 8004ee4:	2a69      	cmp	r2, #105	@ 0x69
 8004ee6:	d028      	beq.n	8004f3a <_strtod_l+0x352>
 8004ee8:	dc25      	bgt.n	8004f36 <_strtod_l+0x34e>
 8004eea:	2a49      	cmp	r2, #73	@ 0x49
 8004eec:	d025      	beq.n	8004f3a <_strtod_l+0x352>
 8004eee:	2a4e      	cmp	r2, #78	@ 0x4e
 8004ef0:	f47f aece 	bne.w	8004c90 <_strtod_l+0xa8>
 8004ef4:	499b      	ldr	r1, [pc, #620]	@ (8005164 <_strtod_l+0x57c>)
 8004ef6:	a819      	add	r0, sp, #100	@ 0x64
 8004ef8:	f002 fe26 	bl	8007b48 <__match>
 8004efc:	2800      	cmp	r0, #0
 8004efe:	f43f aec7 	beq.w	8004c90 <_strtod_l+0xa8>
 8004f02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b28      	cmp	r3, #40	@ 0x28
 8004f08:	d12e      	bne.n	8004f68 <_strtod_l+0x380>
 8004f0a:	4997      	ldr	r1, [pc, #604]	@ (8005168 <_strtod_l+0x580>)
 8004f0c:	aa1c      	add	r2, sp, #112	@ 0x70
 8004f0e:	a819      	add	r0, sp, #100	@ 0x64
 8004f10:	f002 fe2e 	bl	8007b70 <__hexnan>
 8004f14:	2805      	cmp	r0, #5
 8004f16:	d127      	bne.n	8004f68 <_strtod_l+0x380>
 8004f18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004f1a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8004f1e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8004f22:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8004f26:	e698      	b.n	8004c5a <_strtod_l+0x72>
 8004f28:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004f2a:	fb08 2101 	mla	r1, r8, r1, r2
 8004f2e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8004f32:	920e      	str	r2, [sp, #56]	@ 0x38
 8004f34:	e7b5      	b.n	8004ea2 <_strtod_l+0x2ba>
 8004f36:	2a6e      	cmp	r2, #110	@ 0x6e
 8004f38:	e7da      	b.n	8004ef0 <_strtod_l+0x308>
 8004f3a:	498c      	ldr	r1, [pc, #560]	@ (800516c <_strtod_l+0x584>)
 8004f3c:	a819      	add	r0, sp, #100	@ 0x64
 8004f3e:	f002 fe03 	bl	8007b48 <__match>
 8004f42:	2800      	cmp	r0, #0
 8004f44:	f43f aea4 	beq.w	8004c90 <_strtod_l+0xa8>
 8004f48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004f4a:	4989      	ldr	r1, [pc, #548]	@ (8005170 <_strtod_l+0x588>)
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	a819      	add	r0, sp, #100	@ 0x64
 8004f50:	9319      	str	r3, [sp, #100]	@ 0x64
 8004f52:	f002 fdf9 	bl	8007b48 <__match>
 8004f56:	b910      	cbnz	r0, 8004f5e <_strtod_l+0x376>
 8004f58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	9319      	str	r3, [sp, #100]	@ 0x64
 8004f5e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8005180 <_strtod_l+0x598>
 8004f62:	f04f 0a00 	mov.w	sl, #0
 8004f66:	e678      	b.n	8004c5a <_strtod_l+0x72>
 8004f68:	4882      	ldr	r0, [pc, #520]	@ (8005174 <_strtod_l+0x58c>)
 8004f6a:	f001 fcbd 	bl	80068e8 <nan>
 8004f6e:	ec5b ab10 	vmov	sl, fp, d0
 8004f72:	e672      	b.n	8004c5a <_strtod_l+0x72>
 8004f74:	eba8 0309 	sub.w	r3, r8, r9
 8004f78:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004f7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f7c:	2f00      	cmp	r7, #0
 8004f7e:	bf08      	it	eq
 8004f80:	462f      	moveq	r7, r5
 8004f82:	2d10      	cmp	r5, #16
 8004f84:	462c      	mov	r4, r5
 8004f86:	bfa8      	it	ge
 8004f88:	2410      	movge	r4, #16
 8004f8a:	f7fb fac3 	bl	8000514 <__aeabi_ui2d>
 8004f8e:	2d09      	cmp	r5, #9
 8004f90:	4682      	mov	sl, r0
 8004f92:	468b      	mov	fp, r1
 8004f94:	dc13      	bgt.n	8004fbe <_strtod_l+0x3d6>
 8004f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f43f ae5e 	beq.w	8004c5a <_strtod_l+0x72>
 8004f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fa0:	dd78      	ble.n	8005094 <_strtod_l+0x4ac>
 8004fa2:	2b16      	cmp	r3, #22
 8004fa4:	dc5f      	bgt.n	8005066 <_strtod_l+0x47e>
 8004fa6:	4974      	ldr	r1, [pc, #464]	@ (8005178 <_strtod_l+0x590>)
 8004fa8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004fac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fb0:	4652      	mov	r2, sl
 8004fb2:	465b      	mov	r3, fp
 8004fb4:	f7fb fb28 	bl	8000608 <__aeabi_dmul>
 8004fb8:	4682      	mov	sl, r0
 8004fba:	468b      	mov	fp, r1
 8004fbc:	e64d      	b.n	8004c5a <_strtod_l+0x72>
 8004fbe:	4b6e      	ldr	r3, [pc, #440]	@ (8005178 <_strtod_l+0x590>)
 8004fc0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004fc4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8004fc8:	f7fb fb1e 	bl	8000608 <__aeabi_dmul>
 8004fcc:	4682      	mov	sl, r0
 8004fce:	9808      	ldr	r0, [sp, #32]
 8004fd0:	468b      	mov	fp, r1
 8004fd2:	f7fb fa9f 	bl	8000514 <__aeabi_ui2d>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4650      	mov	r0, sl
 8004fdc:	4659      	mov	r1, fp
 8004fde:	f7fb f95d 	bl	800029c <__adddf3>
 8004fe2:	2d0f      	cmp	r5, #15
 8004fe4:	4682      	mov	sl, r0
 8004fe6:	468b      	mov	fp, r1
 8004fe8:	ddd5      	ble.n	8004f96 <_strtod_l+0x3ae>
 8004fea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fec:	1b2c      	subs	r4, r5, r4
 8004fee:	441c      	add	r4, r3
 8004ff0:	2c00      	cmp	r4, #0
 8004ff2:	f340 8096 	ble.w	8005122 <_strtod_l+0x53a>
 8004ff6:	f014 030f 	ands.w	r3, r4, #15
 8004ffa:	d00a      	beq.n	8005012 <_strtod_l+0x42a>
 8004ffc:	495e      	ldr	r1, [pc, #376]	@ (8005178 <_strtod_l+0x590>)
 8004ffe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005002:	4652      	mov	r2, sl
 8005004:	465b      	mov	r3, fp
 8005006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800500a:	f7fb fafd 	bl	8000608 <__aeabi_dmul>
 800500e:	4682      	mov	sl, r0
 8005010:	468b      	mov	fp, r1
 8005012:	f034 040f 	bics.w	r4, r4, #15
 8005016:	d073      	beq.n	8005100 <_strtod_l+0x518>
 8005018:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800501c:	dd48      	ble.n	80050b0 <_strtod_l+0x4c8>
 800501e:	2400      	movs	r4, #0
 8005020:	46a0      	mov	r8, r4
 8005022:	940a      	str	r4, [sp, #40]	@ 0x28
 8005024:	46a1      	mov	r9, r4
 8005026:	9a05      	ldr	r2, [sp, #20]
 8005028:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8005180 <_strtod_l+0x598>
 800502c:	2322      	movs	r3, #34	@ 0x22
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	f04f 0a00 	mov.w	sl, #0
 8005034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005036:	2b00      	cmp	r3, #0
 8005038:	f43f ae0f 	beq.w	8004c5a <_strtod_l+0x72>
 800503c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800503e:	9805      	ldr	r0, [sp, #20]
 8005040:	f002 fe84 	bl	8007d4c <_Bfree>
 8005044:	9805      	ldr	r0, [sp, #20]
 8005046:	4649      	mov	r1, r9
 8005048:	f002 fe80 	bl	8007d4c <_Bfree>
 800504c:	9805      	ldr	r0, [sp, #20]
 800504e:	4641      	mov	r1, r8
 8005050:	f002 fe7c 	bl	8007d4c <_Bfree>
 8005054:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005056:	9805      	ldr	r0, [sp, #20]
 8005058:	f002 fe78 	bl	8007d4c <_Bfree>
 800505c:	9805      	ldr	r0, [sp, #20]
 800505e:	4621      	mov	r1, r4
 8005060:	f002 fe74 	bl	8007d4c <_Bfree>
 8005064:	e5f9      	b.n	8004c5a <_strtod_l+0x72>
 8005066:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005068:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800506c:	4293      	cmp	r3, r2
 800506e:	dbbc      	blt.n	8004fea <_strtod_l+0x402>
 8005070:	4c41      	ldr	r4, [pc, #260]	@ (8005178 <_strtod_l+0x590>)
 8005072:	f1c5 050f 	rsb	r5, r5, #15
 8005076:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800507a:	4652      	mov	r2, sl
 800507c:	465b      	mov	r3, fp
 800507e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005082:	f7fb fac1 	bl	8000608 <__aeabi_dmul>
 8005086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005088:	1b5d      	subs	r5, r3, r5
 800508a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800508e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005092:	e78f      	b.n	8004fb4 <_strtod_l+0x3cc>
 8005094:	3316      	adds	r3, #22
 8005096:	dba8      	blt.n	8004fea <_strtod_l+0x402>
 8005098:	4b37      	ldr	r3, [pc, #220]	@ (8005178 <_strtod_l+0x590>)
 800509a:	eba9 0808 	sub.w	r8, r9, r8
 800509e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80050a2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80050a6:	4650      	mov	r0, sl
 80050a8:	4659      	mov	r1, fp
 80050aa:	f7fb fbd7 	bl	800085c <__aeabi_ddiv>
 80050ae:	e783      	b.n	8004fb8 <_strtod_l+0x3d0>
 80050b0:	4b32      	ldr	r3, [pc, #200]	@ (800517c <_strtod_l+0x594>)
 80050b2:	9308      	str	r3, [sp, #32]
 80050b4:	2300      	movs	r3, #0
 80050b6:	1124      	asrs	r4, r4, #4
 80050b8:	4650      	mov	r0, sl
 80050ba:	4659      	mov	r1, fp
 80050bc:	461e      	mov	r6, r3
 80050be:	2c01      	cmp	r4, #1
 80050c0:	dc21      	bgt.n	8005106 <_strtod_l+0x51e>
 80050c2:	b10b      	cbz	r3, 80050c8 <_strtod_l+0x4e0>
 80050c4:	4682      	mov	sl, r0
 80050c6:	468b      	mov	fp, r1
 80050c8:	492c      	ldr	r1, [pc, #176]	@ (800517c <_strtod_l+0x594>)
 80050ca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80050ce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80050d2:	4652      	mov	r2, sl
 80050d4:	465b      	mov	r3, fp
 80050d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050da:	f7fb fa95 	bl	8000608 <__aeabi_dmul>
 80050de:	4b28      	ldr	r3, [pc, #160]	@ (8005180 <_strtod_l+0x598>)
 80050e0:	460a      	mov	r2, r1
 80050e2:	400b      	ands	r3, r1
 80050e4:	4927      	ldr	r1, [pc, #156]	@ (8005184 <_strtod_l+0x59c>)
 80050e6:	428b      	cmp	r3, r1
 80050e8:	4682      	mov	sl, r0
 80050ea:	d898      	bhi.n	800501e <_strtod_l+0x436>
 80050ec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80050f0:	428b      	cmp	r3, r1
 80050f2:	bf86      	itte	hi
 80050f4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8005188 <_strtod_l+0x5a0>
 80050f8:	f04f 3aff 	movhi.w	sl, #4294967295
 80050fc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005100:	2300      	movs	r3, #0
 8005102:	9308      	str	r3, [sp, #32]
 8005104:	e07a      	b.n	80051fc <_strtod_l+0x614>
 8005106:	07e2      	lsls	r2, r4, #31
 8005108:	d505      	bpl.n	8005116 <_strtod_l+0x52e>
 800510a:	9b08      	ldr	r3, [sp, #32]
 800510c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005110:	f7fb fa7a 	bl	8000608 <__aeabi_dmul>
 8005114:	2301      	movs	r3, #1
 8005116:	9a08      	ldr	r2, [sp, #32]
 8005118:	3208      	adds	r2, #8
 800511a:	3601      	adds	r6, #1
 800511c:	1064      	asrs	r4, r4, #1
 800511e:	9208      	str	r2, [sp, #32]
 8005120:	e7cd      	b.n	80050be <_strtod_l+0x4d6>
 8005122:	d0ed      	beq.n	8005100 <_strtod_l+0x518>
 8005124:	4264      	negs	r4, r4
 8005126:	f014 020f 	ands.w	r2, r4, #15
 800512a:	d00a      	beq.n	8005142 <_strtod_l+0x55a>
 800512c:	4b12      	ldr	r3, [pc, #72]	@ (8005178 <_strtod_l+0x590>)
 800512e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005132:	4650      	mov	r0, sl
 8005134:	4659      	mov	r1, fp
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	f7fb fb8f 	bl	800085c <__aeabi_ddiv>
 800513e:	4682      	mov	sl, r0
 8005140:	468b      	mov	fp, r1
 8005142:	1124      	asrs	r4, r4, #4
 8005144:	d0dc      	beq.n	8005100 <_strtod_l+0x518>
 8005146:	2c1f      	cmp	r4, #31
 8005148:	dd20      	ble.n	800518c <_strtod_l+0x5a4>
 800514a:	2400      	movs	r4, #0
 800514c:	46a0      	mov	r8, r4
 800514e:	940a      	str	r4, [sp, #40]	@ 0x28
 8005150:	46a1      	mov	r9, r4
 8005152:	9a05      	ldr	r2, [sp, #20]
 8005154:	2322      	movs	r3, #34	@ 0x22
 8005156:	f04f 0a00 	mov.w	sl, #0
 800515a:	f04f 0b00 	mov.w	fp, #0
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	e768      	b.n	8005034 <_strtod_l+0x44c>
 8005162:	bf00      	nop
 8005164:	0800e17d 	.word	0x0800e17d
 8005168:	0800e120 	.word	0x0800e120
 800516c:	0800e175 	.word	0x0800e175
 8005170:	0800e1b4 	.word	0x0800e1b4
 8005174:	0800e545 	.word	0x0800e545
 8005178:	0800e330 	.word	0x0800e330
 800517c:	0800e308 	.word	0x0800e308
 8005180:	7ff00000 	.word	0x7ff00000
 8005184:	7ca00000 	.word	0x7ca00000
 8005188:	7fefffff 	.word	0x7fefffff
 800518c:	f014 0310 	ands.w	r3, r4, #16
 8005190:	bf18      	it	ne
 8005192:	236a      	movne	r3, #106	@ 0x6a
 8005194:	4ea9      	ldr	r6, [pc, #676]	@ (800543c <_strtod_l+0x854>)
 8005196:	9308      	str	r3, [sp, #32]
 8005198:	4650      	mov	r0, sl
 800519a:	4659      	mov	r1, fp
 800519c:	2300      	movs	r3, #0
 800519e:	07e2      	lsls	r2, r4, #31
 80051a0:	d504      	bpl.n	80051ac <_strtod_l+0x5c4>
 80051a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80051a6:	f7fb fa2f 	bl	8000608 <__aeabi_dmul>
 80051aa:	2301      	movs	r3, #1
 80051ac:	1064      	asrs	r4, r4, #1
 80051ae:	f106 0608 	add.w	r6, r6, #8
 80051b2:	d1f4      	bne.n	800519e <_strtod_l+0x5b6>
 80051b4:	b10b      	cbz	r3, 80051ba <_strtod_l+0x5d2>
 80051b6:	4682      	mov	sl, r0
 80051b8:	468b      	mov	fp, r1
 80051ba:	9b08      	ldr	r3, [sp, #32]
 80051bc:	b1b3      	cbz	r3, 80051ec <_strtod_l+0x604>
 80051be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80051c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	4659      	mov	r1, fp
 80051ca:	dd0f      	ble.n	80051ec <_strtod_l+0x604>
 80051cc:	2b1f      	cmp	r3, #31
 80051ce:	dd55      	ble.n	800527c <_strtod_l+0x694>
 80051d0:	2b34      	cmp	r3, #52	@ 0x34
 80051d2:	bfde      	ittt	le
 80051d4:	f04f 33ff 	movle.w	r3, #4294967295
 80051d8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80051dc:	4093      	lslle	r3, r2
 80051de:	f04f 0a00 	mov.w	sl, #0
 80051e2:	bfcc      	ite	gt
 80051e4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80051e8:	ea03 0b01 	andle.w	fp, r3, r1
 80051ec:	2200      	movs	r2, #0
 80051ee:	2300      	movs	r3, #0
 80051f0:	4650      	mov	r0, sl
 80051f2:	4659      	mov	r1, fp
 80051f4:	f7fb fc70 	bl	8000ad8 <__aeabi_dcmpeq>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	d1a6      	bne.n	800514a <_strtod_l+0x562>
 80051fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005202:	9805      	ldr	r0, [sp, #20]
 8005204:	462b      	mov	r3, r5
 8005206:	463a      	mov	r2, r7
 8005208:	f002 fe08 	bl	8007e1c <__s2b>
 800520c:	900a      	str	r0, [sp, #40]	@ 0x28
 800520e:	2800      	cmp	r0, #0
 8005210:	f43f af05 	beq.w	800501e <_strtod_l+0x436>
 8005214:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005216:	2a00      	cmp	r2, #0
 8005218:	eba9 0308 	sub.w	r3, r9, r8
 800521c:	bfa8      	it	ge
 800521e:	2300      	movge	r3, #0
 8005220:	9312      	str	r3, [sp, #72]	@ 0x48
 8005222:	2400      	movs	r4, #0
 8005224:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005228:	9316      	str	r3, [sp, #88]	@ 0x58
 800522a:	46a0      	mov	r8, r4
 800522c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800522e:	9805      	ldr	r0, [sp, #20]
 8005230:	6859      	ldr	r1, [r3, #4]
 8005232:	f002 fd4b 	bl	8007ccc <_Balloc>
 8005236:	4681      	mov	r9, r0
 8005238:	2800      	cmp	r0, #0
 800523a:	f43f aef4 	beq.w	8005026 <_strtod_l+0x43e>
 800523e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005240:	691a      	ldr	r2, [r3, #16]
 8005242:	3202      	adds	r2, #2
 8005244:	f103 010c 	add.w	r1, r3, #12
 8005248:	0092      	lsls	r2, r2, #2
 800524a:	300c      	adds	r0, #12
 800524c:	f001 fb3b 	bl	80068c6 <memcpy>
 8005250:	ec4b ab10 	vmov	d0, sl, fp
 8005254:	9805      	ldr	r0, [sp, #20]
 8005256:	aa1c      	add	r2, sp, #112	@ 0x70
 8005258:	a91b      	add	r1, sp, #108	@ 0x6c
 800525a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800525e:	f003 f919 	bl	8008494 <__d2b>
 8005262:	901a      	str	r0, [sp, #104]	@ 0x68
 8005264:	2800      	cmp	r0, #0
 8005266:	f43f aede 	beq.w	8005026 <_strtod_l+0x43e>
 800526a:	9805      	ldr	r0, [sp, #20]
 800526c:	2101      	movs	r1, #1
 800526e:	f002 fe6b 	bl	8007f48 <__i2b>
 8005272:	4680      	mov	r8, r0
 8005274:	b948      	cbnz	r0, 800528a <_strtod_l+0x6a2>
 8005276:	f04f 0800 	mov.w	r8, #0
 800527a:	e6d4      	b.n	8005026 <_strtod_l+0x43e>
 800527c:	f04f 32ff 	mov.w	r2, #4294967295
 8005280:	fa02 f303 	lsl.w	r3, r2, r3
 8005284:	ea03 0a0a 	and.w	sl, r3, sl
 8005288:	e7b0      	b.n	80051ec <_strtod_l+0x604>
 800528a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800528c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800528e:	2d00      	cmp	r5, #0
 8005290:	bfab      	itete	ge
 8005292:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005294:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005296:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005298:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800529a:	bfac      	ite	ge
 800529c:	18ef      	addge	r7, r5, r3
 800529e:	1b5e      	sublt	r6, r3, r5
 80052a0:	9b08      	ldr	r3, [sp, #32]
 80052a2:	1aed      	subs	r5, r5, r3
 80052a4:	4415      	add	r5, r2
 80052a6:	4b66      	ldr	r3, [pc, #408]	@ (8005440 <_strtod_l+0x858>)
 80052a8:	3d01      	subs	r5, #1
 80052aa:	429d      	cmp	r5, r3
 80052ac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80052b0:	da50      	bge.n	8005354 <_strtod_l+0x76c>
 80052b2:	1b5b      	subs	r3, r3, r5
 80052b4:	2b1f      	cmp	r3, #31
 80052b6:	eba2 0203 	sub.w	r2, r2, r3
 80052ba:	f04f 0101 	mov.w	r1, #1
 80052be:	dc3d      	bgt.n	800533c <_strtod_l+0x754>
 80052c0:	fa01 f303 	lsl.w	r3, r1, r3
 80052c4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80052c6:	2300      	movs	r3, #0
 80052c8:	9310      	str	r3, [sp, #64]	@ 0x40
 80052ca:	18bd      	adds	r5, r7, r2
 80052cc:	9b08      	ldr	r3, [sp, #32]
 80052ce:	42af      	cmp	r7, r5
 80052d0:	4416      	add	r6, r2
 80052d2:	441e      	add	r6, r3
 80052d4:	463b      	mov	r3, r7
 80052d6:	bfa8      	it	ge
 80052d8:	462b      	movge	r3, r5
 80052da:	42b3      	cmp	r3, r6
 80052dc:	bfa8      	it	ge
 80052de:	4633      	movge	r3, r6
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	bfc2      	ittt	gt
 80052e4:	1aed      	subgt	r5, r5, r3
 80052e6:	1af6      	subgt	r6, r6, r3
 80052e8:	1aff      	subgt	r7, r7, r3
 80052ea:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	dd16      	ble.n	800531e <_strtod_l+0x736>
 80052f0:	4641      	mov	r1, r8
 80052f2:	9805      	ldr	r0, [sp, #20]
 80052f4:	461a      	mov	r2, r3
 80052f6:	f002 fee7 	bl	80080c8 <__pow5mult>
 80052fa:	4680      	mov	r8, r0
 80052fc:	2800      	cmp	r0, #0
 80052fe:	d0ba      	beq.n	8005276 <_strtod_l+0x68e>
 8005300:	4601      	mov	r1, r0
 8005302:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005304:	9805      	ldr	r0, [sp, #20]
 8005306:	f002 fe35 	bl	8007f74 <__multiply>
 800530a:	900e      	str	r0, [sp, #56]	@ 0x38
 800530c:	2800      	cmp	r0, #0
 800530e:	f43f ae8a 	beq.w	8005026 <_strtod_l+0x43e>
 8005312:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005314:	9805      	ldr	r0, [sp, #20]
 8005316:	f002 fd19 	bl	8007d4c <_Bfree>
 800531a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800531c:	931a      	str	r3, [sp, #104]	@ 0x68
 800531e:	2d00      	cmp	r5, #0
 8005320:	dc1d      	bgt.n	800535e <_strtod_l+0x776>
 8005322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005324:	2b00      	cmp	r3, #0
 8005326:	dd23      	ble.n	8005370 <_strtod_l+0x788>
 8005328:	4649      	mov	r1, r9
 800532a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800532c:	9805      	ldr	r0, [sp, #20]
 800532e:	f002 fecb 	bl	80080c8 <__pow5mult>
 8005332:	4681      	mov	r9, r0
 8005334:	b9e0      	cbnz	r0, 8005370 <_strtod_l+0x788>
 8005336:	f04f 0900 	mov.w	r9, #0
 800533a:	e674      	b.n	8005026 <_strtod_l+0x43e>
 800533c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005340:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005344:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005348:	35e2      	adds	r5, #226	@ 0xe2
 800534a:	fa01 f305 	lsl.w	r3, r1, r5
 800534e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005350:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005352:	e7ba      	b.n	80052ca <_strtod_l+0x6e2>
 8005354:	2300      	movs	r3, #0
 8005356:	9310      	str	r3, [sp, #64]	@ 0x40
 8005358:	2301      	movs	r3, #1
 800535a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800535c:	e7b5      	b.n	80052ca <_strtod_l+0x6e2>
 800535e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005360:	9805      	ldr	r0, [sp, #20]
 8005362:	462a      	mov	r2, r5
 8005364:	f002 ff0a 	bl	800817c <__lshift>
 8005368:	901a      	str	r0, [sp, #104]	@ 0x68
 800536a:	2800      	cmp	r0, #0
 800536c:	d1d9      	bne.n	8005322 <_strtod_l+0x73a>
 800536e:	e65a      	b.n	8005026 <_strtod_l+0x43e>
 8005370:	2e00      	cmp	r6, #0
 8005372:	dd07      	ble.n	8005384 <_strtod_l+0x79c>
 8005374:	4649      	mov	r1, r9
 8005376:	9805      	ldr	r0, [sp, #20]
 8005378:	4632      	mov	r2, r6
 800537a:	f002 feff 	bl	800817c <__lshift>
 800537e:	4681      	mov	r9, r0
 8005380:	2800      	cmp	r0, #0
 8005382:	d0d8      	beq.n	8005336 <_strtod_l+0x74e>
 8005384:	2f00      	cmp	r7, #0
 8005386:	dd08      	ble.n	800539a <_strtod_l+0x7b2>
 8005388:	4641      	mov	r1, r8
 800538a:	9805      	ldr	r0, [sp, #20]
 800538c:	463a      	mov	r2, r7
 800538e:	f002 fef5 	bl	800817c <__lshift>
 8005392:	4680      	mov	r8, r0
 8005394:	2800      	cmp	r0, #0
 8005396:	f43f ae46 	beq.w	8005026 <_strtod_l+0x43e>
 800539a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800539c:	9805      	ldr	r0, [sp, #20]
 800539e:	464a      	mov	r2, r9
 80053a0:	f002 ff74 	bl	800828c <__mdiff>
 80053a4:	4604      	mov	r4, r0
 80053a6:	2800      	cmp	r0, #0
 80053a8:	f43f ae3d 	beq.w	8005026 <_strtod_l+0x43e>
 80053ac:	68c3      	ldr	r3, [r0, #12]
 80053ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 80053b0:	2300      	movs	r3, #0
 80053b2:	60c3      	str	r3, [r0, #12]
 80053b4:	4641      	mov	r1, r8
 80053b6:	f002 ff4d 	bl	8008254 <__mcmp>
 80053ba:	2800      	cmp	r0, #0
 80053bc:	da46      	bge.n	800544c <_strtod_l+0x864>
 80053be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053c0:	ea53 030a 	orrs.w	r3, r3, sl
 80053c4:	d16c      	bne.n	80054a0 <_strtod_l+0x8b8>
 80053c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d168      	bne.n	80054a0 <_strtod_l+0x8b8>
 80053ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80053d2:	0d1b      	lsrs	r3, r3, #20
 80053d4:	051b      	lsls	r3, r3, #20
 80053d6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80053da:	d961      	bls.n	80054a0 <_strtod_l+0x8b8>
 80053dc:	6963      	ldr	r3, [r4, #20]
 80053de:	b913      	cbnz	r3, 80053e6 <_strtod_l+0x7fe>
 80053e0:	6923      	ldr	r3, [r4, #16]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	dd5c      	ble.n	80054a0 <_strtod_l+0x8b8>
 80053e6:	4621      	mov	r1, r4
 80053e8:	2201      	movs	r2, #1
 80053ea:	9805      	ldr	r0, [sp, #20]
 80053ec:	f002 fec6 	bl	800817c <__lshift>
 80053f0:	4641      	mov	r1, r8
 80053f2:	4604      	mov	r4, r0
 80053f4:	f002 ff2e 	bl	8008254 <__mcmp>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	dd51      	ble.n	80054a0 <_strtod_l+0x8b8>
 80053fc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005400:	9a08      	ldr	r2, [sp, #32]
 8005402:	0d1b      	lsrs	r3, r3, #20
 8005404:	051b      	lsls	r3, r3, #20
 8005406:	2a00      	cmp	r2, #0
 8005408:	d06b      	beq.n	80054e2 <_strtod_l+0x8fa>
 800540a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800540e:	d868      	bhi.n	80054e2 <_strtod_l+0x8fa>
 8005410:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005414:	f67f ae9d 	bls.w	8005152 <_strtod_l+0x56a>
 8005418:	4b0a      	ldr	r3, [pc, #40]	@ (8005444 <_strtod_l+0x85c>)
 800541a:	4650      	mov	r0, sl
 800541c:	4659      	mov	r1, fp
 800541e:	2200      	movs	r2, #0
 8005420:	f7fb f8f2 	bl	8000608 <__aeabi_dmul>
 8005424:	4b08      	ldr	r3, [pc, #32]	@ (8005448 <_strtod_l+0x860>)
 8005426:	400b      	ands	r3, r1
 8005428:	4682      	mov	sl, r0
 800542a:	468b      	mov	fp, r1
 800542c:	2b00      	cmp	r3, #0
 800542e:	f47f ae05 	bne.w	800503c <_strtod_l+0x454>
 8005432:	9a05      	ldr	r2, [sp, #20]
 8005434:	2322      	movs	r3, #34	@ 0x22
 8005436:	6013      	str	r3, [r2, #0]
 8005438:	e600      	b.n	800503c <_strtod_l+0x454>
 800543a:	bf00      	nop
 800543c:	0800e148 	.word	0x0800e148
 8005440:	fffffc02 	.word	0xfffffc02
 8005444:	39500000 	.word	0x39500000
 8005448:	7ff00000 	.word	0x7ff00000
 800544c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005450:	d165      	bne.n	800551e <_strtod_l+0x936>
 8005452:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005454:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005458:	b35a      	cbz	r2, 80054b2 <_strtod_l+0x8ca>
 800545a:	4a9f      	ldr	r2, [pc, #636]	@ (80056d8 <_strtod_l+0xaf0>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d12b      	bne.n	80054b8 <_strtod_l+0x8d0>
 8005460:	9b08      	ldr	r3, [sp, #32]
 8005462:	4651      	mov	r1, sl
 8005464:	b303      	cbz	r3, 80054a8 <_strtod_l+0x8c0>
 8005466:	4b9d      	ldr	r3, [pc, #628]	@ (80056dc <_strtod_l+0xaf4>)
 8005468:	465a      	mov	r2, fp
 800546a:	4013      	ands	r3, r2
 800546c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005470:	f04f 32ff 	mov.w	r2, #4294967295
 8005474:	d81b      	bhi.n	80054ae <_strtod_l+0x8c6>
 8005476:	0d1b      	lsrs	r3, r3, #20
 8005478:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800547c:	fa02 f303 	lsl.w	r3, r2, r3
 8005480:	4299      	cmp	r1, r3
 8005482:	d119      	bne.n	80054b8 <_strtod_l+0x8d0>
 8005484:	4b96      	ldr	r3, [pc, #600]	@ (80056e0 <_strtod_l+0xaf8>)
 8005486:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005488:	429a      	cmp	r2, r3
 800548a:	d102      	bne.n	8005492 <_strtod_l+0x8aa>
 800548c:	3101      	adds	r1, #1
 800548e:	f43f adca 	beq.w	8005026 <_strtod_l+0x43e>
 8005492:	4b92      	ldr	r3, [pc, #584]	@ (80056dc <_strtod_l+0xaf4>)
 8005494:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005496:	401a      	ands	r2, r3
 8005498:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800549c:	f04f 0a00 	mov.w	sl, #0
 80054a0:	9b08      	ldr	r3, [sp, #32]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1b8      	bne.n	8005418 <_strtod_l+0x830>
 80054a6:	e5c9      	b.n	800503c <_strtod_l+0x454>
 80054a8:	f04f 33ff 	mov.w	r3, #4294967295
 80054ac:	e7e8      	b.n	8005480 <_strtod_l+0x898>
 80054ae:	4613      	mov	r3, r2
 80054b0:	e7e6      	b.n	8005480 <_strtod_l+0x898>
 80054b2:	ea53 030a 	orrs.w	r3, r3, sl
 80054b6:	d0a1      	beq.n	80053fc <_strtod_l+0x814>
 80054b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80054ba:	b1db      	cbz	r3, 80054f4 <_strtod_l+0x90c>
 80054bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80054be:	4213      	tst	r3, r2
 80054c0:	d0ee      	beq.n	80054a0 <_strtod_l+0x8b8>
 80054c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80054c4:	9a08      	ldr	r2, [sp, #32]
 80054c6:	4650      	mov	r0, sl
 80054c8:	4659      	mov	r1, fp
 80054ca:	b1bb      	cbz	r3, 80054fc <_strtod_l+0x914>
 80054cc:	f7ff fb6c 	bl	8004ba8 <sulp>
 80054d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054d4:	ec53 2b10 	vmov	r2, r3, d0
 80054d8:	f7fa fee0 	bl	800029c <__adddf3>
 80054dc:	4682      	mov	sl, r0
 80054de:	468b      	mov	fp, r1
 80054e0:	e7de      	b.n	80054a0 <_strtod_l+0x8b8>
 80054e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80054e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80054ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80054ee:	f04f 3aff 	mov.w	sl, #4294967295
 80054f2:	e7d5      	b.n	80054a0 <_strtod_l+0x8b8>
 80054f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80054f6:	ea13 0f0a 	tst.w	r3, sl
 80054fa:	e7e1      	b.n	80054c0 <_strtod_l+0x8d8>
 80054fc:	f7ff fb54 	bl	8004ba8 <sulp>
 8005500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005504:	ec53 2b10 	vmov	r2, r3, d0
 8005508:	f7fa fec6 	bl	8000298 <__aeabi_dsub>
 800550c:	2200      	movs	r2, #0
 800550e:	2300      	movs	r3, #0
 8005510:	4682      	mov	sl, r0
 8005512:	468b      	mov	fp, r1
 8005514:	f7fb fae0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005518:	2800      	cmp	r0, #0
 800551a:	d0c1      	beq.n	80054a0 <_strtod_l+0x8b8>
 800551c:	e619      	b.n	8005152 <_strtod_l+0x56a>
 800551e:	4641      	mov	r1, r8
 8005520:	4620      	mov	r0, r4
 8005522:	f003 f80f 	bl	8008544 <__ratio>
 8005526:	ec57 6b10 	vmov	r6, r7, d0
 800552a:	2200      	movs	r2, #0
 800552c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005530:	4630      	mov	r0, r6
 8005532:	4639      	mov	r1, r7
 8005534:	f7fb fae4 	bl	8000b00 <__aeabi_dcmple>
 8005538:	2800      	cmp	r0, #0
 800553a:	d06f      	beq.n	800561c <_strtod_l+0xa34>
 800553c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800553e:	2b00      	cmp	r3, #0
 8005540:	d17a      	bne.n	8005638 <_strtod_l+0xa50>
 8005542:	f1ba 0f00 	cmp.w	sl, #0
 8005546:	d158      	bne.n	80055fa <_strtod_l+0xa12>
 8005548:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800554a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800554e:	2b00      	cmp	r3, #0
 8005550:	d15a      	bne.n	8005608 <_strtod_l+0xa20>
 8005552:	4b64      	ldr	r3, [pc, #400]	@ (80056e4 <_strtod_l+0xafc>)
 8005554:	2200      	movs	r2, #0
 8005556:	4630      	mov	r0, r6
 8005558:	4639      	mov	r1, r7
 800555a:	f7fb fac7 	bl	8000aec <__aeabi_dcmplt>
 800555e:	2800      	cmp	r0, #0
 8005560:	d159      	bne.n	8005616 <_strtod_l+0xa2e>
 8005562:	4630      	mov	r0, r6
 8005564:	4639      	mov	r1, r7
 8005566:	4b60      	ldr	r3, [pc, #384]	@ (80056e8 <_strtod_l+0xb00>)
 8005568:	2200      	movs	r2, #0
 800556a:	f7fb f84d 	bl	8000608 <__aeabi_dmul>
 800556e:	4606      	mov	r6, r0
 8005570:	460f      	mov	r7, r1
 8005572:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005576:	9606      	str	r6, [sp, #24]
 8005578:	9307      	str	r3, [sp, #28]
 800557a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800557e:	4d57      	ldr	r5, [pc, #348]	@ (80056dc <_strtod_l+0xaf4>)
 8005580:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005584:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005586:	401d      	ands	r5, r3
 8005588:	4b58      	ldr	r3, [pc, #352]	@ (80056ec <_strtod_l+0xb04>)
 800558a:	429d      	cmp	r5, r3
 800558c:	f040 80b2 	bne.w	80056f4 <_strtod_l+0xb0c>
 8005590:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005592:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005596:	ec4b ab10 	vmov	d0, sl, fp
 800559a:	f002 ff0b 	bl	80083b4 <__ulp>
 800559e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80055a2:	ec51 0b10 	vmov	r0, r1, d0
 80055a6:	f7fb f82f 	bl	8000608 <__aeabi_dmul>
 80055aa:	4652      	mov	r2, sl
 80055ac:	465b      	mov	r3, fp
 80055ae:	f7fa fe75 	bl	800029c <__adddf3>
 80055b2:	460b      	mov	r3, r1
 80055b4:	4949      	ldr	r1, [pc, #292]	@ (80056dc <_strtod_l+0xaf4>)
 80055b6:	4a4e      	ldr	r2, [pc, #312]	@ (80056f0 <_strtod_l+0xb08>)
 80055b8:	4019      	ands	r1, r3
 80055ba:	4291      	cmp	r1, r2
 80055bc:	4682      	mov	sl, r0
 80055be:	d942      	bls.n	8005646 <_strtod_l+0xa5e>
 80055c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80055c2:	4b47      	ldr	r3, [pc, #284]	@ (80056e0 <_strtod_l+0xaf8>)
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d103      	bne.n	80055d0 <_strtod_l+0x9e8>
 80055c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80055ca:	3301      	adds	r3, #1
 80055cc:	f43f ad2b 	beq.w	8005026 <_strtod_l+0x43e>
 80055d0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80056e0 <_strtod_l+0xaf8>
 80055d4:	f04f 3aff 	mov.w	sl, #4294967295
 80055d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80055da:	9805      	ldr	r0, [sp, #20]
 80055dc:	f002 fbb6 	bl	8007d4c <_Bfree>
 80055e0:	9805      	ldr	r0, [sp, #20]
 80055e2:	4649      	mov	r1, r9
 80055e4:	f002 fbb2 	bl	8007d4c <_Bfree>
 80055e8:	9805      	ldr	r0, [sp, #20]
 80055ea:	4641      	mov	r1, r8
 80055ec:	f002 fbae 	bl	8007d4c <_Bfree>
 80055f0:	9805      	ldr	r0, [sp, #20]
 80055f2:	4621      	mov	r1, r4
 80055f4:	f002 fbaa 	bl	8007d4c <_Bfree>
 80055f8:	e618      	b.n	800522c <_strtod_l+0x644>
 80055fa:	f1ba 0f01 	cmp.w	sl, #1
 80055fe:	d103      	bne.n	8005608 <_strtod_l+0xa20>
 8005600:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005602:	2b00      	cmp	r3, #0
 8005604:	f43f ada5 	beq.w	8005152 <_strtod_l+0x56a>
 8005608:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80056b8 <_strtod_l+0xad0>
 800560c:	4f35      	ldr	r7, [pc, #212]	@ (80056e4 <_strtod_l+0xafc>)
 800560e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005612:	2600      	movs	r6, #0
 8005614:	e7b1      	b.n	800557a <_strtod_l+0x992>
 8005616:	4f34      	ldr	r7, [pc, #208]	@ (80056e8 <_strtod_l+0xb00>)
 8005618:	2600      	movs	r6, #0
 800561a:	e7aa      	b.n	8005572 <_strtod_l+0x98a>
 800561c:	4b32      	ldr	r3, [pc, #200]	@ (80056e8 <_strtod_l+0xb00>)
 800561e:	4630      	mov	r0, r6
 8005620:	4639      	mov	r1, r7
 8005622:	2200      	movs	r2, #0
 8005624:	f7fa fff0 	bl	8000608 <__aeabi_dmul>
 8005628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800562a:	4606      	mov	r6, r0
 800562c:	460f      	mov	r7, r1
 800562e:	2b00      	cmp	r3, #0
 8005630:	d09f      	beq.n	8005572 <_strtod_l+0x98a>
 8005632:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005636:	e7a0      	b.n	800557a <_strtod_l+0x992>
 8005638:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80056c0 <_strtod_l+0xad8>
 800563c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005640:	ec57 6b17 	vmov	r6, r7, d7
 8005644:	e799      	b.n	800557a <_strtod_l+0x992>
 8005646:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800564a:	9b08      	ldr	r3, [sp, #32]
 800564c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1c1      	bne.n	80055d8 <_strtod_l+0x9f0>
 8005654:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005658:	0d1b      	lsrs	r3, r3, #20
 800565a:	051b      	lsls	r3, r3, #20
 800565c:	429d      	cmp	r5, r3
 800565e:	d1bb      	bne.n	80055d8 <_strtod_l+0x9f0>
 8005660:	4630      	mov	r0, r6
 8005662:	4639      	mov	r1, r7
 8005664:	f7fb fb30 	bl	8000cc8 <__aeabi_d2lz>
 8005668:	f7fa ffa0 	bl	80005ac <__aeabi_l2d>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4630      	mov	r0, r6
 8005672:	4639      	mov	r1, r7
 8005674:	f7fa fe10 	bl	8000298 <__aeabi_dsub>
 8005678:	460b      	mov	r3, r1
 800567a:	4602      	mov	r2, r0
 800567c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005680:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005684:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005686:	ea46 060a 	orr.w	r6, r6, sl
 800568a:	431e      	orrs	r6, r3
 800568c:	d06f      	beq.n	800576e <_strtod_l+0xb86>
 800568e:	a30e      	add	r3, pc, #56	@ (adr r3, 80056c8 <_strtod_l+0xae0>)
 8005690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005694:	f7fb fa2a 	bl	8000aec <__aeabi_dcmplt>
 8005698:	2800      	cmp	r0, #0
 800569a:	f47f accf 	bne.w	800503c <_strtod_l+0x454>
 800569e:	a30c      	add	r3, pc, #48	@ (adr r3, 80056d0 <_strtod_l+0xae8>)
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056a8:	f7fb fa3e 	bl	8000b28 <__aeabi_dcmpgt>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	d093      	beq.n	80055d8 <_strtod_l+0x9f0>
 80056b0:	e4c4      	b.n	800503c <_strtod_l+0x454>
 80056b2:	bf00      	nop
 80056b4:	f3af 8000 	nop.w
 80056b8:	00000000 	.word	0x00000000
 80056bc:	bff00000 	.word	0xbff00000
 80056c0:	00000000 	.word	0x00000000
 80056c4:	3ff00000 	.word	0x3ff00000
 80056c8:	94a03595 	.word	0x94a03595
 80056cc:	3fdfffff 	.word	0x3fdfffff
 80056d0:	35afe535 	.word	0x35afe535
 80056d4:	3fe00000 	.word	0x3fe00000
 80056d8:	000fffff 	.word	0x000fffff
 80056dc:	7ff00000 	.word	0x7ff00000
 80056e0:	7fefffff 	.word	0x7fefffff
 80056e4:	3ff00000 	.word	0x3ff00000
 80056e8:	3fe00000 	.word	0x3fe00000
 80056ec:	7fe00000 	.word	0x7fe00000
 80056f0:	7c9fffff 	.word	0x7c9fffff
 80056f4:	9b08      	ldr	r3, [sp, #32]
 80056f6:	b323      	cbz	r3, 8005742 <_strtod_l+0xb5a>
 80056f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80056fc:	d821      	bhi.n	8005742 <_strtod_l+0xb5a>
 80056fe:	a328      	add	r3, pc, #160	@ (adr r3, 80057a0 <_strtod_l+0xbb8>)
 8005700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005704:	4630      	mov	r0, r6
 8005706:	4639      	mov	r1, r7
 8005708:	f7fb f9fa 	bl	8000b00 <__aeabi_dcmple>
 800570c:	b1a0      	cbz	r0, 8005738 <_strtod_l+0xb50>
 800570e:	4639      	mov	r1, r7
 8005710:	4630      	mov	r0, r6
 8005712:	f7fb fa51 	bl	8000bb8 <__aeabi_d2uiz>
 8005716:	2801      	cmp	r0, #1
 8005718:	bf38      	it	cc
 800571a:	2001      	movcc	r0, #1
 800571c:	f7fa fefa 	bl	8000514 <__aeabi_ui2d>
 8005720:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005722:	4606      	mov	r6, r0
 8005724:	460f      	mov	r7, r1
 8005726:	b9fb      	cbnz	r3, 8005768 <_strtod_l+0xb80>
 8005728:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800572c:	9014      	str	r0, [sp, #80]	@ 0x50
 800572e:	9315      	str	r3, [sp, #84]	@ 0x54
 8005730:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005734:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005738:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800573a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800573e:	1b5b      	subs	r3, r3, r5
 8005740:	9311      	str	r3, [sp, #68]	@ 0x44
 8005742:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005746:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800574a:	f002 fe33 	bl	80083b4 <__ulp>
 800574e:	4650      	mov	r0, sl
 8005750:	ec53 2b10 	vmov	r2, r3, d0
 8005754:	4659      	mov	r1, fp
 8005756:	f7fa ff57 	bl	8000608 <__aeabi_dmul>
 800575a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800575e:	f7fa fd9d 	bl	800029c <__adddf3>
 8005762:	4682      	mov	sl, r0
 8005764:	468b      	mov	fp, r1
 8005766:	e770      	b.n	800564a <_strtod_l+0xa62>
 8005768:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800576c:	e7e0      	b.n	8005730 <_strtod_l+0xb48>
 800576e:	a30e      	add	r3, pc, #56	@ (adr r3, 80057a8 <_strtod_l+0xbc0>)
 8005770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005774:	f7fb f9ba 	bl	8000aec <__aeabi_dcmplt>
 8005778:	e798      	b.n	80056ac <_strtod_l+0xac4>
 800577a:	2300      	movs	r3, #0
 800577c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800577e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005780:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	f7ff ba6d 	b.w	8004c62 <_strtod_l+0x7a>
 8005788:	2a65      	cmp	r2, #101	@ 0x65
 800578a:	f43f ab66 	beq.w	8004e5a <_strtod_l+0x272>
 800578e:	2a45      	cmp	r2, #69	@ 0x45
 8005790:	f43f ab63 	beq.w	8004e5a <_strtod_l+0x272>
 8005794:	2301      	movs	r3, #1
 8005796:	f7ff bb9e 	b.w	8004ed6 <_strtod_l+0x2ee>
 800579a:	bf00      	nop
 800579c:	f3af 8000 	nop.w
 80057a0:	ffc00000 	.word	0xffc00000
 80057a4:	41dfffff 	.word	0x41dfffff
 80057a8:	94a03595 	.word	0x94a03595
 80057ac:	3fcfffff 	.word	0x3fcfffff

080057b0 <_strtod_r>:
 80057b0:	4b01      	ldr	r3, [pc, #4]	@ (80057b8 <_strtod_r+0x8>)
 80057b2:	f7ff ba19 	b.w	8004be8 <_strtod_l>
 80057b6:	bf00      	nop
 80057b8:	20000038 	.word	0x20000038

080057bc <strtod>:
 80057bc:	460a      	mov	r2, r1
 80057be:	4601      	mov	r1, r0
 80057c0:	4802      	ldr	r0, [pc, #8]	@ (80057cc <strtod+0x10>)
 80057c2:	4b03      	ldr	r3, [pc, #12]	@ (80057d0 <strtod+0x14>)
 80057c4:	6800      	ldr	r0, [r0, #0]
 80057c6:	f7ff ba0f 	b.w	8004be8 <_strtod_l>
 80057ca:	bf00      	nop
 80057cc:	200001a4 	.word	0x200001a4
 80057d0:	20000038 	.word	0x20000038

080057d4 <__cvt>:
 80057d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057d8:	ec57 6b10 	vmov	r6, r7, d0
 80057dc:	2f00      	cmp	r7, #0
 80057de:	460c      	mov	r4, r1
 80057e0:	4619      	mov	r1, r3
 80057e2:	463b      	mov	r3, r7
 80057e4:	bfbb      	ittet	lt
 80057e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80057ea:	461f      	movlt	r7, r3
 80057ec:	2300      	movge	r3, #0
 80057ee:	232d      	movlt	r3, #45	@ 0x2d
 80057f0:	700b      	strb	r3, [r1, #0]
 80057f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80057f8:	4691      	mov	r9, r2
 80057fa:	f023 0820 	bic.w	r8, r3, #32
 80057fe:	bfbc      	itt	lt
 8005800:	4632      	movlt	r2, r6
 8005802:	4616      	movlt	r6, r2
 8005804:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005808:	d005      	beq.n	8005816 <__cvt+0x42>
 800580a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800580e:	d100      	bne.n	8005812 <__cvt+0x3e>
 8005810:	3401      	adds	r4, #1
 8005812:	2102      	movs	r1, #2
 8005814:	e000      	b.n	8005818 <__cvt+0x44>
 8005816:	2103      	movs	r1, #3
 8005818:	ab03      	add	r3, sp, #12
 800581a:	9301      	str	r3, [sp, #4]
 800581c:	ab02      	add	r3, sp, #8
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	ec47 6b10 	vmov	d0, r6, r7
 8005824:	4653      	mov	r3, sl
 8005826:	4622      	mov	r2, r4
 8005828:	f001 f8f6 	bl	8006a18 <_dtoa_r>
 800582c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005830:	4605      	mov	r5, r0
 8005832:	d119      	bne.n	8005868 <__cvt+0x94>
 8005834:	f019 0f01 	tst.w	r9, #1
 8005838:	d00e      	beq.n	8005858 <__cvt+0x84>
 800583a:	eb00 0904 	add.w	r9, r0, r4
 800583e:	2200      	movs	r2, #0
 8005840:	2300      	movs	r3, #0
 8005842:	4630      	mov	r0, r6
 8005844:	4639      	mov	r1, r7
 8005846:	f7fb f947 	bl	8000ad8 <__aeabi_dcmpeq>
 800584a:	b108      	cbz	r0, 8005850 <__cvt+0x7c>
 800584c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005850:	2230      	movs	r2, #48	@ 0x30
 8005852:	9b03      	ldr	r3, [sp, #12]
 8005854:	454b      	cmp	r3, r9
 8005856:	d31e      	bcc.n	8005896 <__cvt+0xc2>
 8005858:	9b03      	ldr	r3, [sp, #12]
 800585a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800585c:	1b5b      	subs	r3, r3, r5
 800585e:	4628      	mov	r0, r5
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	b004      	add	sp, #16
 8005864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005868:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800586c:	eb00 0904 	add.w	r9, r0, r4
 8005870:	d1e5      	bne.n	800583e <__cvt+0x6a>
 8005872:	7803      	ldrb	r3, [r0, #0]
 8005874:	2b30      	cmp	r3, #48	@ 0x30
 8005876:	d10a      	bne.n	800588e <__cvt+0xba>
 8005878:	2200      	movs	r2, #0
 800587a:	2300      	movs	r3, #0
 800587c:	4630      	mov	r0, r6
 800587e:	4639      	mov	r1, r7
 8005880:	f7fb f92a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005884:	b918      	cbnz	r0, 800588e <__cvt+0xba>
 8005886:	f1c4 0401 	rsb	r4, r4, #1
 800588a:	f8ca 4000 	str.w	r4, [sl]
 800588e:	f8da 3000 	ldr.w	r3, [sl]
 8005892:	4499      	add	r9, r3
 8005894:	e7d3      	b.n	800583e <__cvt+0x6a>
 8005896:	1c59      	adds	r1, r3, #1
 8005898:	9103      	str	r1, [sp, #12]
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	e7d9      	b.n	8005852 <__cvt+0x7e>

0800589e <__exponent>:
 800589e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058a0:	2900      	cmp	r1, #0
 80058a2:	bfba      	itte	lt
 80058a4:	4249      	neglt	r1, r1
 80058a6:	232d      	movlt	r3, #45	@ 0x2d
 80058a8:	232b      	movge	r3, #43	@ 0x2b
 80058aa:	2909      	cmp	r1, #9
 80058ac:	7002      	strb	r2, [r0, #0]
 80058ae:	7043      	strb	r3, [r0, #1]
 80058b0:	dd29      	ble.n	8005906 <__exponent+0x68>
 80058b2:	f10d 0307 	add.w	r3, sp, #7
 80058b6:	461d      	mov	r5, r3
 80058b8:	270a      	movs	r7, #10
 80058ba:	461a      	mov	r2, r3
 80058bc:	fbb1 f6f7 	udiv	r6, r1, r7
 80058c0:	fb07 1416 	mls	r4, r7, r6, r1
 80058c4:	3430      	adds	r4, #48	@ 0x30
 80058c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80058ca:	460c      	mov	r4, r1
 80058cc:	2c63      	cmp	r4, #99	@ 0x63
 80058ce:	f103 33ff 	add.w	r3, r3, #4294967295
 80058d2:	4631      	mov	r1, r6
 80058d4:	dcf1      	bgt.n	80058ba <__exponent+0x1c>
 80058d6:	3130      	adds	r1, #48	@ 0x30
 80058d8:	1e94      	subs	r4, r2, #2
 80058da:	f803 1c01 	strb.w	r1, [r3, #-1]
 80058de:	1c41      	adds	r1, r0, #1
 80058e0:	4623      	mov	r3, r4
 80058e2:	42ab      	cmp	r3, r5
 80058e4:	d30a      	bcc.n	80058fc <__exponent+0x5e>
 80058e6:	f10d 0309 	add.w	r3, sp, #9
 80058ea:	1a9b      	subs	r3, r3, r2
 80058ec:	42ac      	cmp	r4, r5
 80058ee:	bf88      	it	hi
 80058f0:	2300      	movhi	r3, #0
 80058f2:	3302      	adds	r3, #2
 80058f4:	4403      	add	r3, r0
 80058f6:	1a18      	subs	r0, r3, r0
 80058f8:	b003      	add	sp, #12
 80058fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005900:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005904:	e7ed      	b.n	80058e2 <__exponent+0x44>
 8005906:	2330      	movs	r3, #48	@ 0x30
 8005908:	3130      	adds	r1, #48	@ 0x30
 800590a:	7083      	strb	r3, [r0, #2]
 800590c:	70c1      	strb	r1, [r0, #3]
 800590e:	1d03      	adds	r3, r0, #4
 8005910:	e7f1      	b.n	80058f6 <__exponent+0x58>
	...

08005914 <_printf_float>:
 8005914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005918:	b08d      	sub	sp, #52	@ 0x34
 800591a:	460c      	mov	r4, r1
 800591c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005920:	4616      	mov	r6, r2
 8005922:	461f      	mov	r7, r3
 8005924:	4605      	mov	r5, r0
 8005926:	f000 ff47 	bl	80067b8 <_localeconv_r>
 800592a:	6803      	ldr	r3, [r0, #0]
 800592c:	9304      	str	r3, [sp, #16]
 800592e:	4618      	mov	r0, r3
 8005930:	f7fa fca6 	bl	8000280 <strlen>
 8005934:	2300      	movs	r3, #0
 8005936:	930a      	str	r3, [sp, #40]	@ 0x28
 8005938:	f8d8 3000 	ldr.w	r3, [r8]
 800593c:	9005      	str	r0, [sp, #20]
 800593e:	3307      	adds	r3, #7
 8005940:	f023 0307 	bic.w	r3, r3, #7
 8005944:	f103 0208 	add.w	r2, r3, #8
 8005948:	f894 a018 	ldrb.w	sl, [r4, #24]
 800594c:	f8d4 b000 	ldr.w	fp, [r4]
 8005950:	f8c8 2000 	str.w	r2, [r8]
 8005954:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005958:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800595c:	9307      	str	r3, [sp, #28]
 800595e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005962:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005966:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800596a:	4b9c      	ldr	r3, [pc, #624]	@ (8005bdc <_printf_float+0x2c8>)
 800596c:	f04f 32ff 	mov.w	r2, #4294967295
 8005970:	f7fb f8e4 	bl	8000b3c <__aeabi_dcmpun>
 8005974:	bb70      	cbnz	r0, 80059d4 <_printf_float+0xc0>
 8005976:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800597a:	4b98      	ldr	r3, [pc, #608]	@ (8005bdc <_printf_float+0x2c8>)
 800597c:	f04f 32ff 	mov.w	r2, #4294967295
 8005980:	f7fb f8be 	bl	8000b00 <__aeabi_dcmple>
 8005984:	bb30      	cbnz	r0, 80059d4 <_printf_float+0xc0>
 8005986:	2200      	movs	r2, #0
 8005988:	2300      	movs	r3, #0
 800598a:	4640      	mov	r0, r8
 800598c:	4649      	mov	r1, r9
 800598e:	f7fb f8ad 	bl	8000aec <__aeabi_dcmplt>
 8005992:	b110      	cbz	r0, 800599a <_printf_float+0x86>
 8005994:	232d      	movs	r3, #45	@ 0x2d
 8005996:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800599a:	4a91      	ldr	r2, [pc, #580]	@ (8005be0 <_printf_float+0x2cc>)
 800599c:	4b91      	ldr	r3, [pc, #580]	@ (8005be4 <_printf_float+0x2d0>)
 800599e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80059a2:	bf94      	ite	ls
 80059a4:	4690      	movls	r8, r2
 80059a6:	4698      	movhi	r8, r3
 80059a8:	2303      	movs	r3, #3
 80059aa:	6123      	str	r3, [r4, #16]
 80059ac:	f02b 0304 	bic.w	r3, fp, #4
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	f04f 0900 	mov.w	r9, #0
 80059b6:	9700      	str	r7, [sp, #0]
 80059b8:	4633      	mov	r3, r6
 80059ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 80059bc:	4621      	mov	r1, r4
 80059be:	4628      	mov	r0, r5
 80059c0:	f000 f9d2 	bl	8005d68 <_printf_common>
 80059c4:	3001      	adds	r0, #1
 80059c6:	f040 808d 	bne.w	8005ae4 <_printf_float+0x1d0>
 80059ca:	f04f 30ff 	mov.w	r0, #4294967295
 80059ce:	b00d      	add	sp, #52	@ 0x34
 80059d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d4:	4642      	mov	r2, r8
 80059d6:	464b      	mov	r3, r9
 80059d8:	4640      	mov	r0, r8
 80059da:	4649      	mov	r1, r9
 80059dc:	f7fb f8ae 	bl	8000b3c <__aeabi_dcmpun>
 80059e0:	b140      	cbz	r0, 80059f4 <_printf_float+0xe0>
 80059e2:	464b      	mov	r3, r9
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	bfbc      	itt	lt
 80059e8:	232d      	movlt	r3, #45	@ 0x2d
 80059ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80059ee:	4a7e      	ldr	r2, [pc, #504]	@ (8005be8 <_printf_float+0x2d4>)
 80059f0:	4b7e      	ldr	r3, [pc, #504]	@ (8005bec <_printf_float+0x2d8>)
 80059f2:	e7d4      	b.n	800599e <_printf_float+0x8a>
 80059f4:	6863      	ldr	r3, [r4, #4]
 80059f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80059fa:	9206      	str	r2, [sp, #24]
 80059fc:	1c5a      	adds	r2, r3, #1
 80059fe:	d13b      	bne.n	8005a78 <_printf_float+0x164>
 8005a00:	2306      	movs	r3, #6
 8005a02:	6063      	str	r3, [r4, #4]
 8005a04:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005a08:	2300      	movs	r3, #0
 8005a0a:	6022      	str	r2, [r4, #0]
 8005a0c:	9303      	str	r3, [sp, #12]
 8005a0e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005a10:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005a14:	ab09      	add	r3, sp, #36	@ 0x24
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	6861      	ldr	r1, [r4, #4]
 8005a1a:	ec49 8b10 	vmov	d0, r8, r9
 8005a1e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005a22:	4628      	mov	r0, r5
 8005a24:	f7ff fed6 	bl	80057d4 <__cvt>
 8005a28:	9b06      	ldr	r3, [sp, #24]
 8005a2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a2c:	2b47      	cmp	r3, #71	@ 0x47
 8005a2e:	4680      	mov	r8, r0
 8005a30:	d129      	bne.n	8005a86 <_printf_float+0x172>
 8005a32:	1cc8      	adds	r0, r1, #3
 8005a34:	db02      	blt.n	8005a3c <_printf_float+0x128>
 8005a36:	6863      	ldr	r3, [r4, #4]
 8005a38:	4299      	cmp	r1, r3
 8005a3a:	dd41      	ble.n	8005ac0 <_printf_float+0x1ac>
 8005a3c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005a40:	fa5f fa8a 	uxtb.w	sl, sl
 8005a44:	3901      	subs	r1, #1
 8005a46:	4652      	mov	r2, sl
 8005a48:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005a4c:	9109      	str	r1, [sp, #36]	@ 0x24
 8005a4e:	f7ff ff26 	bl	800589e <__exponent>
 8005a52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a54:	1813      	adds	r3, r2, r0
 8005a56:	2a01      	cmp	r2, #1
 8005a58:	4681      	mov	r9, r0
 8005a5a:	6123      	str	r3, [r4, #16]
 8005a5c:	dc02      	bgt.n	8005a64 <_printf_float+0x150>
 8005a5e:	6822      	ldr	r2, [r4, #0]
 8005a60:	07d2      	lsls	r2, r2, #31
 8005a62:	d501      	bpl.n	8005a68 <_printf_float+0x154>
 8005a64:	3301      	adds	r3, #1
 8005a66:	6123      	str	r3, [r4, #16]
 8005a68:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d0a2      	beq.n	80059b6 <_printf_float+0xa2>
 8005a70:	232d      	movs	r3, #45	@ 0x2d
 8005a72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a76:	e79e      	b.n	80059b6 <_printf_float+0xa2>
 8005a78:	9a06      	ldr	r2, [sp, #24]
 8005a7a:	2a47      	cmp	r2, #71	@ 0x47
 8005a7c:	d1c2      	bne.n	8005a04 <_printf_float+0xf0>
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1c0      	bne.n	8005a04 <_printf_float+0xf0>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e7bd      	b.n	8005a02 <_printf_float+0xee>
 8005a86:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a8a:	d9db      	bls.n	8005a44 <_printf_float+0x130>
 8005a8c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005a90:	d118      	bne.n	8005ac4 <_printf_float+0x1b0>
 8005a92:	2900      	cmp	r1, #0
 8005a94:	6863      	ldr	r3, [r4, #4]
 8005a96:	dd0b      	ble.n	8005ab0 <_printf_float+0x19c>
 8005a98:	6121      	str	r1, [r4, #16]
 8005a9a:	b913      	cbnz	r3, 8005aa2 <_printf_float+0x18e>
 8005a9c:	6822      	ldr	r2, [r4, #0]
 8005a9e:	07d0      	lsls	r0, r2, #31
 8005aa0:	d502      	bpl.n	8005aa8 <_printf_float+0x194>
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	440b      	add	r3, r1
 8005aa6:	6123      	str	r3, [r4, #16]
 8005aa8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005aaa:	f04f 0900 	mov.w	r9, #0
 8005aae:	e7db      	b.n	8005a68 <_printf_float+0x154>
 8005ab0:	b913      	cbnz	r3, 8005ab8 <_printf_float+0x1a4>
 8005ab2:	6822      	ldr	r2, [r4, #0]
 8005ab4:	07d2      	lsls	r2, r2, #31
 8005ab6:	d501      	bpl.n	8005abc <_printf_float+0x1a8>
 8005ab8:	3302      	adds	r3, #2
 8005aba:	e7f4      	b.n	8005aa6 <_printf_float+0x192>
 8005abc:	2301      	movs	r3, #1
 8005abe:	e7f2      	b.n	8005aa6 <_printf_float+0x192>
 8005ac0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005ac4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ac6:	4299      	cmp	r1, r3
 8005ac8:	db05      	blt.n	8005ad6 <_printf_float+0x1c2>
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	6121      	str	r1, [r4, #16]
 8005ace:	07d8      	lsls	r0, r3, #31
 8005ad0:	d5ea      	bpl.n	8005aa8 <_printf_float+0x194>
 8005ad2:	1c4b      	adds	r3, r1, #1
 8005ad4:	e7e7      	b.n	8005aa6 <_printf_float+0x192>
 8005ad6:	2900      	cmp	r1, #0
 8005ad8:	bfd4      	ite	le
 8005ada:	f1c1 0202 	rsble	r2, r1, #2
 8005ade:	2201      	movgt	r2, #1
 8005ae0:	4413      	add	r3, r2
 8005ae2:	e7e0      	b.n	8005aa6 <_printf_float+0x192>
 8005ae4:	6823      	ldr	r3, [r4, #0]
 8005ae6:	055a      	lsls	r2, r3, #21
 8005ae8:	d407      	bmi.n	8005afa <_printf_float+0x1e6>
 8005aea:	6923      	ldr	r3, [r4, #16]
 8005aec:	4642      	mov	r2, r8
 8005aee:	4631      	mov	r1, r6
 8005af0:	4628      	mov	r0, r5
 8005af2:	47b8      	blx	r7
 8005af4:	3001      	adds	r0, #1
 8005af6:	d12b      	bne.n	8005b50 <_printf_float+0x23c>
 8005af8:	e767      	b.n	80059ca <_printf_float+0xb6>
 8005afa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005afe:	f240 80dd 	bls.w	8005cbc <_printf_float+0x3a8>
 8005b02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b06:	2200      	movs	r2, #0
 8005b08:	2300      	movs	r3, #0
 8005b0a:	f7fa ffe5 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	d033      	beq.n	8005b7a <_printf_float+0x266>
 8005b12:	4a37      	ldr	r2, [pc, #220]	@ (8005bf0 <_printf_float+0x2dc>)
 8005b14:	2301      	movs	r3, #1
 8005b16:	4631      	mov	r1, r6
 8005b18:	4628      	mov	r0, r5
 8005b1a:	47b8      	blx	r7
 8005b1c:	3001      	adds	r0, #1
 8005b1e:	f43f af54 	beq.w	80059ca <_printf_float+0xb6>
 8005b22:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005b26:	4543      	cmp	r3, r8
 8005b28:	db02      	blt.n	8005b30 <_printf_float+0x21c>
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	07d8      	lsls	r0, r3, #31
 8005b2e:	d50f      	bpl.n	8005b50 <_printf_float+0x23c>
 8005b30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b34:	4631      	mov	r1, r6
 8005b36:	4628      	mov	r0, r5
 8005b38:	47b8      	blx	r7
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	f43f af45 	beq.w	80059ca <_printf_float+0xb6>
 8005b40:	f04f 0900 	mov.w	r9, #0
 8005b44:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b48:	f104 0a1a 	add.w	sl, r4, #26
 8005b4c:	45c8      	cmp	r8, r9
 8005b4e:	dc09      	bgt.n	8005b64 <_printf_float+0x250>
 8005b50:	6823      	ldr	r3, [r4, #0]
 8005b52:	079b      	lsls	r3, r3, #30
 8005b54:	f100 8103 	bmi.w	8005d5e <_printf_float+0x44a>
 8005b58:	68e0      	ldr	r0, [r4, #12]
 8005b5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b5c:	4298      	cmp	r0, r3
 8005b5e:	bfb8      	it	lt
 8005b60:	4618      	movlt	r0, r3
 8005b62:	e734      	b.n	80059ce <_printf_float+0xba>
 8005b64:	2301      	movs	r3, #1
 8005b66:	4652      	mov	r2, sl
 8005b68:	4631      	mov	r1, r6
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	47b8      	blx	r7
 8005b6e:	3001      	adds	r0, #1
 8005b70:	f43f af2b 	beq.w	80059ca <_printf_float+0xb6>
 8005b74:	f109 0901 	add.w	r9, r9, #1
 8005b78:	e7e8      	b.n	8005b4c <_printf_float+0x238>
 8005b7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	dc39      	bgt.n	8005bf4 <_printf_float+0x2e0>
 8005b80:	4a1b      	ldr	r2, [pc, #108]	@ (8005bf0 <_printf_float+0x2dc>)
 8005b82:	2301      	movs	r3, #1
 8005b84:	4631      	mov	r1, r6
 8005b86:	4628      	mov	r0, r5
 8005b88:	47b8      	blx	r7
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	f43f af1d 	beq.w	80059ca <_printf_float+0xb6>
 8005b90:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005b94:	ea59 0303 	orrs.w	r3, r9, r3
 8005b98:	d102      	bne.n	8005ba0 <_printf_float+0x28c>
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	07d9      	lsls	r1, r3, #31
 8005b9e:	d5d7      	bpl.n	8005b50 <_printf_float+0x23c>
 8005ba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ba4:	4631      	mov	r1, r6
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	47b8      	blx	r7
 8005baa:	3001      	adds	r0, #1
 8005bac:	f43f af0d 	beq.w	80059ca <_printf_float+0xb6>
 8005bb0:	f04f 0a00 	mov.w	sl, #0
 8005bb4:	f104 0b1a 	add.w	fp, r4, #26
 8005bb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bba:	425b      	negs	r3, r3
 8005bbc:	4553      	cmp	r3, sl
 8005bbe:	dc01      	bgt.n	8005bc4 <_printf_float+0x2b0>
 8005bc0:	464b      	mov	r3, r9
 8005bc2:	e793      	b.n	8005aec <_printf_float+0x1d8>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	465a      	mov	r2, fp
 8005bc8:	4631      	mov	r1, r6
 8005bca:	4628      	mov	r0, r5
 8005bcc:	47b8      	blx	r7
 8005bce:	3001      	adds	r0, #1
 8005bd0:	f43f aefb 	beq.w	80059ca <_printf_float+0xb6>
 8005bd4:	f10a 0a01 	add.w	sl, sl, #1
 8005bd8:	e7ee      	b.n	8005bb8 <_printf_float+0x2a4>
 8005bda:	bf00      	nop
 8005bdc:	7fefffff 	.word	0x7fefffff
 8005be0:	0800e170 	.word	0x0800e170
 8005be4:	0800e174 	.word	0x0800e174
 8005be8:	0800e178 	.word	0x0800e178
 8005bec:	0800e17c 	.word	0x0800e17c
 8005bf0:	0800e180 	.word	0x0800e180
 8005bf4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005bf6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005bfa:	4553      	cmp	r3, sl
 8005bfc:	bfa8      	it	ge
 8005bfe:	4653      	movge	r3, sl
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	4699      	mov	r9, r3
 8005c04:	dc36      	bgt.n	8005c74 <_printf_float+0x360>
 8005c06:	f04f 0b00 	mov.w	fp, #0
 8005c0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c0e:	f104 021a 	add.w	r2, r4, #26
 8005c12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c14:	9306      	str	r3, [sp, #24]
 8005c16:	eba3 0309 	sub.w	r3, r3, r9
 8005c1a:	455b      	cmp	r3, fp
 8005c1c:	dc31      	bgt.n	8005c82 <_printf_float+0x36e>
 8005c1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c20:	459a      	cmp	sl, r3
 8005c22:	dc3a      	bgt.n	8005c9a <_printf_float+0x386>
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	07da      	lsls	r2, r3, #31
 8005c28:	d437      	bmi.n	8005c9a <_printf_float+0x386>
 8005c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c2c:	ebaa 0903 	sub.w	r9, sl, r3
 8005c30:	9b06      	ldr	r3, [sp, #24]
 8005c32:	ebaa 0303 	sub.w	r3, sl, r3
 8005c36:	4599      	cmp	r9, r3
 8005c38:	bfa8      	it	ge
 8005c3a:	4699      	movge	r9, r3
 8005c3c:	f1b9 0f00 	cmp.w	r9, #0
 8005c40:	dc33      	bgt.n	8005caa <_printf_float+0x396>
 8005c42:	f04f 0800 	mov.w	r8, #0
 8005c46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c4a:	f104 0b1a 	add.w	fp, r4, #26
 8005c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c50:	ebaa 0303 	sub.w	r3, sl, r3
 8005c54:	eba3 0309 	sub.w	r3, r3, r9
 8005c58:	4543      	cmp	r3, r8
 8005c5a:	f77f af79 	ble.w	8005b50 <_printf_float+0x23c>
 8005c5e:	2301      	movs	r3, #1
 8005c60:	465a      	mov	r2, fp
 8005c62:	4631      	mov	r1, r6
 8005c64:	4628      	mov	r0, r5
 8005c66:	47b8      	blx	r7
 8005c68:	3001      	adds	r0, #1
 8005c6a:	f43f aeae 	beq.w	80059ca <_printf_float+0xb6>
 8005c6e:	f108 0801 	add.w	r8, r8, #1
 8005c72:	e7ec      	b.n	8005c4e <_printf_float+0x33a>
 8005c74:	4642      	mov	r2, r8
 8005c76:	4631      	mov	r1, r6
 8005c78:	4628      	mov	r0, r5
 8005c7a:	47b8      	blx	r7
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	d1c2      	bne.n	8005c06 <_printf_float+0x2f2>
 8005c80:	e6a3      	b.n	80059ca <_printf_float+0xb6>
 8005c82:	2301      	movs	r3, #1
 8005c84:	4631      	mov	r1, r6
 8005c86:	4628      	mov	r0, r5
 8005c88:	9206      	str	r2, [sp, #24]
 8005c8a:	47b8      	blx	r7
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	f43f ae9c 	beq.w	80059ca <_printf_float+0xb6>
 8005c92:	9a06      	ldr	r2, [sp, #24]
 8005c94:	f10b 0b01 	add.w	fp, fp, #1
 8005c98:	e7bb      	b.n	8005c12 <_printf_float+0x2fe>
 8005c9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c9e:	4631      	mov	r1, r6
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	47b8      	blx	r7
 8005ca4:	3001      	adds	r0, #1
 8005ca6:	d1c0      	bne.n	8005c2a <_printf_float+0x316>
 8005ca8:	e68f      	b.n	80059ca <_printf_float+0xb6>
 8005caa:	9a06      	ldr	r2, [sp, #24]
 8005cac:	464b      	mov	r3, r9
 8005cae:	4442      	add	r2, r8
 8005cb0:	4631      	mov	r1, r6
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	47b8      	blx	r7
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	d1c3      	bne.n	8005c42 <_printf_float+0x32e>
 8005cba:	e686      	b.n	80059ca <_printf_float+0xb6>
 8005cbc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005cc0:	f1ba 0f01 	cmp.w	sl, #1
 8005cc4:	dc01      	bgt.n	8005cca <_printf_float+0x3b6>
 8005cc6:	07db      	lsls	r3, r3, #31
 8005cc8:	d536      	bpl.n	8005d38 <_printf_float+0x424>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	4642      	mov	r2, r8
 8005cce:	4631      	mov	r1, r6
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	47b8      	blx	r7
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	f43f ae78 	beq.w	80059ca <_printf_float+0xb6>
 8005cda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cde:	4631      	mov	r1, r6
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	47b8      	blx	r7
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	f43f ae70 	beq.w	80059ca <_printf_float+0xb6>
 8005cea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005cee:	2200      	movs	r2, #0
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cf6:	f7fa feef 	bl	8000ad8 <__aeabi_dcmpeq>
 8005cfa:	b9c0      	cbnz	r0, 8005d2e <_printf_float+0x41a>
 8005cfc:	4653      	mov	r3, sl
 8005cfe:	f108 0201 	add.w	r2, r8, #1
 8005d02:	4631      	mov	r1, r6
 8005d04:	4628      	mov	r0, r5
 8005d06:	47b8      	blx	r7
 8005d08:	3001      	adds	r0, #1
 8005d0a:	d10c      	bne.n	8005d26 <_printf_float+0x412>
 8005d0c:	e65d      	b.n	80059ca <_printf_float+0xb6>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	465a      	mov	r2, fp
 8005d12:	4631      	mov	r1, r6
 8005d14:	4628      	mov	r0, r5
 8005d16:	47b8      	blx	r7
 8005d18:	3001      	adds	r0, #1
 8005d1a:	f43f ae56 	beq.w	80059ca <_printf_float+0xb6>
 8005d1e:	f108 0801 	add.w	r8, r8, #1
 8005d22:	45d0      	cmp	r8, sl
 8005d24:	dbf3      	blt.n	8005d0e <_printf_float+0x3fa>
 8005d26:	464b      	mov	r3, r9
 8005d28:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005d2c:	e6df      	b.n	8005aee <_printf_float+0x1da>
 8005d2e:	f04f 0800 	mov.w	r8, #0
 8005d32:	f104 0b1a 	add.w	fp, r4, #26
 8005d36:	e7f4      	b.n	8005d22 <_printf_float+0x40e>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	4642      	mov	r2, r8
 8005d3c:	e7e1      	b.n	8005d02 <_printf_float+0x3ee>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	464a      	mov	r2, r9
 8005d42:	4631      	mov	r1, r6
 8005d44:	4628      	mov	r0, r5
 8005d46:	47b8      	blx	r7
 8005d48:	3001      	adds	r0, #1
 8005d4a:	f43f ae3e 	beq.w	80059ca <_printf_float+0xb6>
 8005d4e:	f108 0801 	add.w	r8, r8, #1
 8005d52:	68e3      	ldr	r3, [r4, #12]
 8005d54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d56:	1a5b      	subs	r3, r3, r1
 8005d58:	4543      	cmp	r3, r8
 8005d5a:	dcf0      	bgt.n	8005d3e <_printf_float+0x42a>
 8005d5c:	e6fc      	b.n	8005b58 <_printf_float+0x244>
 8005d5e:	f04f 0800 	mov.w	r8, #0
 8005d62:	f104 0919 	add.w	r9, r4, #25
 8005d66:	e7f4      	b.n	8005d52 <_printf_float+0x43e>

08005d68 <_printf_common>:
 8005d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d6c:	4616      	mov	r6, r2
 8005d6e:	4698      	mov	r8, r3
 8005d70:	688a      	ldr	r2, [r1, #8]
 8005d72:	690b      	ldr	r3, [r1, #16]
 8005d74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	bfb8      	it	lt
 8005d7c:	4613      	movlt	r3, r2
 8005d7e:	6033      	str	r3, [r6, #0]
 8005d80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d84:	4607      	mov	r7, r0
 8005d86:	460c      	mov	r4, r1
 8005d88:	b10a      	cbz	r2, 8005d8e <_printf_common+0x26>
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	6033      	str	r3, [r6, #0]
 8005d8e:	6823      	ldr	r3, [r4, #0]
 8005d90:	0699      	lsls	r1, r3, #26
 8005d92:	bf42      	ittt	mi
 8005d94:	6833      	ldrmi	r3, [r6, #0]
 8005d96:	3302      	addmi	r3, #2
 8005d98:	6033      	strmi	r3, [r6, #0]
 8005d9a:	6825      	ldr	r5, [r4, #0]
 8005d9c:	f015 0506 	ands.w	r5, r5, #6
 8005da0:	d106      	bne.n	8005db0 <_printf_common+0x48>
 8005da2:	f104 0a19 	add.w	sl, r4, #25
 8005da6:	68e3      	ldr	r3, [r4, #12]
 8005da8:	6832      	ldr	r2, [r6, #0]
 8005daa:	1a9b      	subs	r3, r3, r2
 8005dac:	42ab      	cmp	r3, r5
 8005dae:	dc26      	bgt.n	8005dfe <_printf_common+0x96>
 8005db0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005db4:	6822      	ldr	r2, [r4, #0]
 8005db6:	3b00      	subs	r3, #0
 8005db8:	bf18      	it	ne
 8005dba:	2301      	movne	r3, #1
 8005dbc:	0692      	lsls	r2, r2, #26
 8005dbe:	d42b      	bmi.n	8005e18 <_printf_common+0xb0>
 8005dc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005dc4:	4641      	mov	r1, r8
 8005dc6:	4638      	mov	r0, r7
 8005dc8:	47c8      	blx	r9
 8005dca:	3001      	adds	r0, #1
 8005dcc:	d01e      	beq.n	8005e0c <_printf_common+0xa4>
 8005dce:	6823      	ldr	r3, [r4, #0]
 8005dd0:	6922      	ldr	r2, [r4, #16]
 8005dd2:	f003 0306 	and.w	r3, r3, #6
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	bf02      	ittt	eq
 8005dda:	68e5      	ldreq	r5, [r4, #12]
 8005ddc:	6833      	ldreq	r3, [r6, #0]
 8005dde:	1aed      	subeq	r5, r5, r3
 8005de0:	68a3      	ldr	r3, [r4, #8]
 8005de2:	bf0c      	ite	eq
 8005de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005de8:	2500      	movne	r5, #0
 8005dea:	4293      	cmp	r3, r2
 8005dec:	bfc4      	itt	gt
 8005dee:	1a9b      	subgt	r3, r3, r2
 8005df0:	18ed      	addgt	r5, r5, r3
 8005df2:	2600      	movs	r6, #0
 8005df4:	341a      	adds	r4, #26
 8005df6:	42b5      	cmp	r5, r6
 8005df8:	d11a      	bne.n	8005e30 <_printf_common+0xc8>
 8005dfa:	2000      	movs	r0, #0
 8005dfc:	e008      	b.n	8005e10 <_printf_common+0xa8>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	4652      	mov	r2, sl
 8005e02:	4641      	mov	r1, r8
 8005e04:	4638      	mov	r0, r7
 8005e06:	47c8      	blx	r9
 8005e08:	3001      	adds	r0, #1
 8005e0a:	d103      	bne.n	8005e14 <_printf_common+0xac>
 8005e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e14:	3501      	adds	r5, #1
 8005e16:	e7c6      	b.n	8005da6 <_printf_common+0x3e>
 8005e18:	18e1      	adds	r1, r4, r3
 8005e1a:	1c5a      	adds	r2, r3, #1
 8005e1c:	2030      	movs	r0, #48	@ 0x30
 8005e1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e22:	4422      	add	r2, r4
 8005e24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e2c:	3302      	adds	r3, #2
 8005e2e:	e7c7      	b.n	8005dc0 <_printf_common+0x58>
 8005e30:	2301      	movs	r3, #1
 8005e32:	4622      	mov	r2, r4
 8005e34:	4641      	mov	r1, r8
 8005e36:	4638      	mov	r0, r7
 8005e38:	47c8      	blx	r9
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	d0e6      	beq.n	8005e0c <_printf_common+0xa4>
 8005e3e:	3601      	adds	r6, #1
 8005e40:	e7d9      	b.n	8005df6 <_printf_common+0x8e>
	...

08005e44 <_printf_i>:
 8005e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e48:	7e0f      	ldrb	r7, [r1, #24]
 8005e4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e4c:	2f78      	cmp	r7, #120	@ 0x78
 8005e4e:	4691      	mov	r9, r2
 8005e50:	4680      	mov	r8, r0
 8005e52:	460c      	mov	r4, r1
 8005e54:	469a      	mov	sl, r3
 8005e56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e5a:	d807      	bhi.n	8005e6c <_printf_i+0x28>
 8005e5c:	2f62      	cmp	r7, #98	@ 0x62
 8005e5e:	d80a      	bhi.n	8005e76 <_printf_i+0x32>
 8005e60:	2f00      	cmp	r7, #0
 8005e62:	f000 80d2 	beq.w	800600a <_printf_i+0x1c6>
 8005e66:	2f58      	cmp	r7, #88	@ 0x58
 8005e68:	f000 80b9 	beq.w	8005fde <_printf_i+0x19a>
 8005e6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e74:	e03a      	b.n	8005eec <_printf_i+0xa8>
 8005e76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e7a:	2b15      	cmp	r3, #21
 8005e7c:	d8f6      	bhi.n	8005e6c <_printf_i+0x28>
 8005e7e:	a101      	add	r1, pc, #4	@ (adr r1, 8005e84 <_printf_i+0x40>)
 8005e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e84:	08005edd 	.word	0x08005edd
 8005e88:	08005ef1 	.word	0x08005ef1
 8005e8c:	08005e6d 	.word	0x08005e6d
 8005e90:	08005e6d 	.word	0x08005e6d
 8005e94:	08005e6d 	.word	0x08005e6d
 8005e98:	08005e6d 	.word	0x08005e6d
 8005e9c:	08005ef1 	.word	0x08005ef1
 8005ea0:	08005e6d 	.word	0x08005e6d
 8005ea4:	08005e6d 	.word	0x08005e6d
 8005ea8:	08005e6d 	.word	0x08005e6d
 8005eac:	08005e6d 	.word	0x08005e6d
 8005eb0:	08005ff1 	.word	0x08005ff1
 8005eb4:	08005f1b 	.word	0x08005f1b
 8005eb8:	08005fab 	.word	0x08005fab
 8005ebc:	08005e6d 	.word	0x08005e6d
 8005ec0:	08005e6d 	.word	0x08005e6d
 8005ec4:	08006013 	.word	0x08006013
 8005ec8:	08005e6d 	.word	0x08005e6d
 8005ecc:	08005f1b 	.word	0x08005f1b
 8005ed0:	08005e6d 	.word	0x08005e6d
 8005ed4:	08005e6d 	.word	0x08005e6d
 8005ed8:	08005fb3 	.word	0x08005fb3
 8005edc:	6833      	ldr	r3, [r6, #0]
 8005ede:	1d1a      	adds	r2, r3, #4
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6032      	str	r2, [r6, #0]
 8005ee4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ee8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005eec:	2301      	movs	r3, #1
 8005eee:	e09d      	b.n	800602c <_printf_i+0x1e8>
 8005ef0:	6833      	ldr	r3, [r6, #0]
 8005ef2:	6820      	ldr	r0, [r4, #0]
 8005ef4:	1d19      	adds	r1, r3, #4
 8005ef6:	6031      	str	r1, [r6, #0]
 8005ef8:	0606      	lsls	r6, r0, #24
 8005efa:	d501      	bpl.n	8005f00 <_printf_i+0xbc>
 8005efc:	681d      	ldr	r5, [r3, #0]
 8005efe:	e003      	b.n	8005f08 <_printf_i+0xc4>
 8005f00:	0645      	lsls	r5, r0, #25
 8005f02:	d5fb      	bpl.n	8005efc <_printf_i+0xb8>
 8005f04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f08:	2d00      	cmp	r5, #0
 8005f0a:	da03      	bge.n	8005f14 <_printf_i+0xd0>
 8005f0c:	232d      	movs	r3, #45	@ 0x2d
 8005f0e:	426d      	negs	r5, r5
 8005f10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f14:	4859      	ldr	r0, [pc, #356]	@ (800607c <_printf_i+0x238>)
 8005f16:	230a      	movs	r3, #10
 8005f18:	e011      	b.n	8005f3e <_printf_i+0xfa>
 8005f1a:	6821      	ldr	r1, [r4, #0]
 8005f1c:	6833      	ldr	r3, [r6, #0]
 8005f1e:	0608      	lsls	r0, r1, #24
 8005f20:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f24:	d402      	bmi.n	8005f2c <_printf_i+0xe8>
 8005f26:	0649      	lsls	r1, r1, #25
 8005f28:	bf48      	it	mi
 8005f2a:	b2ad      	uxthmi	r5, r5
 8005f2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f2e:	4853      	ldr	r0, [pc, #332]	@ (800607c <_printf_i+0x238>)
 8005f30:	6033      	str	r3, [r6, #0]
 8005f32:	bf14      	ite	ne
 8005f34:	230a      	movne	r3, #10
 8005f36:	2308      	moveq	r3, #8
 8005f38:	2100      	movs	r1, #0
 8005f3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f3e:	6866      	ldr	r6, [r4, #4]
 8005f40:	60a6      	str	r6, [r4, #8]
 8005f42:	2e00      	cmp	r6, #0
 8005f44:	bfa2      	ittt	ge
 8005f46:	6821      	ldrge	r1, [r4, #0]
 8005f48:	f021 0104 	bicge.w	r1, r1, #4
 8005f4c:	6021      	strge	r1, [r4, #0]
 8005f4e:	b90d      	cbnz	r5, 8005f54 <_printf_i+0x110>
 8005f50:	2e00      	cmp	r6, #0
 8005f52:	d04b      	beq.n	8005fec <_printf_i+0x1a8>
 8005f54:	4616      	mov	r6, r2
 8005f56:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f5a:	fb03 5711 	mls	r7, r3, r1, r5
 8005f5e:	5dc7      	ldrb	r7, [r0, r7]
 8005f60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f64:	462f      	mov	r7, r5
 8005f66:	42bb      	cmp	r3, r7
 8005f68:	460d      	mov	r5, r1
 8005f6a:	d9f4      	bls.n	8005f56 <_printf_i+0x112>
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d10b      	bne.n	8005f88 <_printf_i+0x144>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	07df      	lsls	r7, r3, #31
 8005f74:	d508      	bpl.n	8005f88 <_printf_i+0x144>
 8005f76:	6923      	ldr	r3, [r4, #16]
 8005f78:	6861      	ldr	r1, [r4, #4]
 8005f7a:	4299      	cmp	r1, r3
 8005f7c:	bfde      	ittt	le
 8005f7e:	2330      	movle	r3, #48	@ 0x30
 8005f80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f88:	1b92      	subs	r2, r2, r6
 8005f8a:	6122      	str	r2, [r4, #16]
 8005f8c:	f8cd a000 	str.w	sl, [sp]
 8005f90:	464b      	mov	r3, r9
 8005f92:	aa03      	add	r2, sp, #12
 8005f94:	4621      	mov	r1, r4
 8005f96:	4640      	mov	r0, r8
 8005f98:	f7ff fee6 	bl	8005d68 <_printf_common>
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	d14a      	bne.n	8006036 <_printf_i+0x1f2>
 8005fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa4:	b004      	add	sp, #16
 8005fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005faa:	6823      	ldr	r3, [r4, #0]
 8005fac:	f043 0320 	orr.w	r3, r3, #32
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	4833      	ldr	r0, [pc, #204]	@ (8006080 <_printf_i+0x23c>)
 8005fb4:	2778      	movs	r7, #120	@ 0x78
 8005fb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	6831      	ldr	r1, [r6, #0]
 8005fbe:	061f      	lsls	r7, r3, #24
 8005fc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005fc4:	d402      	bmi.n	8005fcc <_printf_i+0x188>
 8005fc6:	065f      	lsls	r7, r3, #25
 8005fc8:	bf48      	it	mi
 8005fca:	b2ad      	uxthmi	r5, r5
 8005fcc:	6031      	str	r1, [r6, #0]
 8005fce:	07d9      	lsls	r1, r3, #31
 8005fd0:	bf44      	itt	mi
 8005fd2:	f043 0320 	orrmi.w	r3, r3, #32
 8005fd6:	6023      	strmi	r3, [r4, #0]
 8005fd8:	b11d      	cbz	r5, 8005fe2 <_printf_i+0x19e>
 8005fda:	2310      	movs	r3, #16
 8005fdc:	e7ac      	b.n	8005f38 <_printf_i+0xf4>
 8005fde:	4827      	ldr	r0, [pc, #156]	@ (800607c <_printf_i+0x238>)
 8005fe0:	e7e9      	b.n	8005fb6 <_printf_i+0x172>
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	f023 0320 	bic.w	r3, r3, #32
 8005fe8:	6023      	str	r3, [r4, #0]
 8005fea:	e7f6      	b.n	8005fda <_printf_i+0x196>
 8005fec:	4616      	mov	r6, r2
 8005fee:	e7bd      	b.n	8005f6c <_printf_i+0x128>
 8005ff0:	6833      	ldr	r3, [r6, #0]
 8005ff2:	6825      	ldr	r5, [r4, #0]
 8005ff4:	6961      	ldr	r1, [r4, #20]
 8005ff6:	1d18      	adds	r0, r3, #4
 8005ff8:	6030      	str	r0, [r6, #0]
 8005ffa:	062e      	lsls	r6, r5, #24
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	d501      	bpl.n	8006004 <_printf_i+0x1c0>
 8006000:	6019      	str	r1, [r3, #0]
 8006002:	e002      	b.n	800600a <_printf_i+0x1c6>
 8006004:	0668      	lsls	r0, r5, #25
 8006006:	d5fb      	bpl.n	8006000 <_printf_i+0x1bc>
 8006008:	8019      	strh	r1, [r3, #0]
 800600a:	2300      	movs	r3, #0
 800600c:	6123      	str	r3, [r4, #16]
 800600e:	4616      	mov	r6, r2
 8006010:	e7bc      	b.n	8005f8c <_printf_i+0x148>
 8006012:	6833      	ldr	r3, [r6, #0]
 8006014:	1d1a      	adds	r2, r3, #4
 8006016:	6032      	str	r2, [r6, #0]
 8006018:	681e      	ldr	r6, [r3, #0]
 800601a:	6862      	ldr	r2, [r4, #4]
 800601c:	2100      	movs	r1, #0
 800601e:	4630      	mov	r0, r6
 8006020:	f7fa f8de 	bl	80001e0 <memchr>
 8006024:	b108      	cbz	r0, 800602a <_printf_i+0x1e6>
 8006026:	1b80      	subs	r0, r0, r6
 8006028:	6060      	str	r0, [r4, #4]
 800602a:	6863      	ldr	r3, [r4, #4]
 800602c:	6123      	str	r3, [r4, #16]
 800602e:	2300      	movs	r3, #0
 8006030:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006034:	e7aa      	b.n	8005f8c <_printf_i+0x148>
 8006036:	6923      	ldr	r3, [r4, #16]
 8006038:	4632      	mov	r2, r6
 800603a:	4649      	mov	r1, r9
 800603c:	4640      	mov	r0, r8
 800603e:	47d0      	blx	sl
 8006040:	3001      	adds	r0, #1
 8006042:	d0ad      	beq.n	8005fa0 <_printf_i+0x15c>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	079b      	lsls	r3, r3, #30
 8006048:	d413      	bmi.n	8006072 <_printf_i+0x22e>
 800604a:	68e0      	ldr	r0, [r4, #12]
 800604c:	9b03      	ldr	r3, [sp, #12]
 800604e:	4298      	cmp	r0, r3
 8006050:	bfb8      	it	lt
 8006052:	4618      	movlt	r0, r3
 8006054:	e7a6      	b.n	8005fa4 <_printf_i+0x160>
 8006056:	2301      	movs	r3, #1
 8006058:	4632      	mov	r2, r6
 800605a:	4649      	mov	r1, r9
 800605c:	4640      	mov	r0, r8
 800605e:	47d0      	blx	sl
 8006060:	3001      	adds	r0, #1
 8006062:	d09d      	beq.n	8005fa0 <_printf_i+0x15c>
 8006064:	3501      	adds	r5, #1
 8006066:	68e3      	ldr	r3, [r4, #12]
 8006068:	9903      	ldr	r1, [sp, #12]
 800606a:	1a5b      	subs	r3, r3, r1
 800606c:	42ab      	cmp	r3, r5
 800606e:	dcf2      	bgt.n	8006056 <_printf_i+0x212>
 8006070:	e7eb      	b.n	800604a <_printf_i+0x206>
 8006072:	2500      	movs	r5, #0
 8006074:	f104 0619 	add.w	r6, r4, #25
 8006078:	e7f5      	b.n	8006066 <_printf_i+0x222>
 800607a:	bf00      	nop
 800607c:	0800e182 	.word	0x0800e182
 8006080:	0800e193 	.word	0x0800e193

08006084 <_scanf_float>:
 8006084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006088:	b087      	sub	sp, #28
 800608a:	4617      	mov	r7, r2
 800608c:	9303      	str	r3, [sp, #12]
 800608e:	688b      	ldr	r3, [r1, #8]
 8006090:	1e5a      	subs	r2, r3, #1
 8006092:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006096:	bf81      	itttt	hi
 8006098:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800609c:	eb03 0b05 	addhi.w	fp, r3, r5
 80060a0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80060a4:	608b      	strhi	r3, [r1, #8]
 80060a6:	680b      	ldr	r3, [r1, #0]
 80060a8:	460a      	mov	r2, r1
 80060aa:	f04f 0500 	mov.w	r5, #0
 80060ae:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80060b2:	f842 3b1c 	str.w	r3, [r2], #28
 80060b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80060ba:	4680      	mov	r8, r0
 80060bc:	460c      	mov	r4, r1
 80060be:	bf98      	it	ls
 80060c0:	f04f 0b00 	movls.w	fp, #0
 80060c4:	9201      	str	r2, [sp, #4]
 80060c6:	4616      	mov	r6, r2
 80060c8:	46aa      	mov	sl, r5
 80060ca:	46a9      	mov	r9, r5
 80060cc:	9502      	str	r5, [sp, #8]
 80060ce:	68a2      	ldr	r2, [r4, #8]
 80060d0:	b152      	cbz	r2, 80060e8 <_scanf_float+0x64>
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	2b4e      	cmp	r3, #78	@ 0x4e
 80060d8:	d864      	bhi.n	80061a4 <_scanf_float+0x120>
 80060da:	2b40      	cmp	r3, #64	@ 0x40
 80060dc:	d83c      	bhi.n	8006158 <_scanf_float+0xd4>
 80060de:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80060e2:	b2c8      	uxtb	r0, r1
 80060e4:	280e      	cmp	r0, #14
 80060e6:	d93a      	bls.n	800615e <_scanf_float+0xda>
 80060e8:	f1b9 0f00 	cmp.w	r9, #0
 80060ec:	d003      	beq.n	80060f6 <_scanf_float+0x72>
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80060fa:	f1ba 0f01 	cmp.w	sl, #1
 80060fe:	f200 8117 	bhi.w	8006330 <_scanf_float+0x2ac>
 8006102:	9b01      	ldr	r3, [sp, #4]
 8006104:	429e      	cmp	r6, r3
 8006106:	f200 8108 	bhi.w	800631a <_scanf_float+0x296>
 800610a:	2001      	movs	r0, #1
 800610c:	b007      	add	sp, #28
 800610e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006112:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006116:	2a0d      	cmp	r2, #13
 8006118:	d8e6      	bhi.n	80060e8 <_scanf_float+0x64>
 800611a:	a101      	add	r1, pc, #4	@ (adr r1, 8006120 <_scanf_float+0x9c>)
 800611c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006120:	08006267 	.word	0x08006267
 8006124:	080060e9 	.word	0x080060e9
 8006128:	080060e9 	.word	0x080060e9
 800612c:	080060e9 	.word	0x080060e9
 8006130:	080062c7 	.word	0x080062c7
 8006134:	0800629f 	.word	0x0800629f
 8006138:	080060e9 	.word	0x080060e9
 800613c:	080060e9 	.word	0x080060e9
 8006140:	08006275 	.word	0x08006275
 8006144:	080060e9 	.word	0x080060e9
 8006148:	080060e9 	.word	0x080060e9
 800614c:	080060e9 	.word	0x080060e9
 8006150:	080060e9 	.word	0x080060e9
 8006154:	0800622d 	.word	0x0800622d
 8006158:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800615c:	e7db      	b.n	8006116 <_scanf_float+0x92>
 800615e:	290e      	cmp	r1, #14
 8006160:	d8c2      	bhi.n	80060e8 <_scanf_float+0x64>
 8006162:	a001      	add	r0, pc, #4	@ (adr r0, 8006168 <_scanf_float+0xe4>)
 8006164:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006168:	0800621d 	.word	0x0800621d
 800616c:	080060e9 	.word	0x080060e9
 8006170:	0800621d 	.word	0x0800621d
 8006174:	080062b3 	.word	0x080062b3
 8006178:	080060e9 	.word	0x080060e9
 800617c:	080061c5 	.word	0x080061c5
 8006180:	08006203 	.word	0x08006203
 8006184:	08006203 	.word	0x08006203
 8006188:	08006203 	.word	0x08006203
 800618c:	08006203 	.word	0x08006203
 8006190:	08006203 	.word	0x08006203
 8006194:	08006203 	.word	0x08006203
 8006198:	08006203 	.word	0x08006203
 800619c:	08006203 	.word	0x08006203
 80061a0:	08006203 	.word	0x08006203
 80061a4:	2b6e      	cmp	r3, #110	@ 0x6e
 80061a6:	d809      	bhi.n	80061bc <_scanf_float+0x138>
 80061a8:	2b60      	cmp	r3, #96	@ 0x60
 80061aa:	d8b2      	bhi.n	8006112 <_scanf_float+0x8e>
 80061ac:	2b54      	cmp	r3, #84	@ 0x54
 80061ae:	d07b      	beq.n	80062a8 <_scanf_float+0x224>
 80061b0:	2b59      	cmp	r3, #89	@ 0x59
 80061b2:	d199      	bne.n	80060e8 <_scanf_float+0x64>
 80061b4:	2d07      	cmp	r5, #7
 80061b6:	d197      	bne.n	80060e8 <_scanf_float+0x64>
 80061b8:	2508      	movs	r5, #8
 80061ba:	e02c      	b.n	8006216 <_scanf_float+0x192>
 80061bc:	2b74      	cmp	r3, #116	@ 0x74
 80061be:	d073      	beq.n	80062a8 <_scanf_float+0x224>
 80061c0:	2b79      	cmp	r3, #121	@ 0x79
 80061c2:	e7f6      	b.n	80061b2 <_scanf_float+0x12e>
 80061c4:	6821      	ldr	r1, [r4, #0]
 80061c6:	05c8      	lsls	r0, r1, #23
 80061c8:	d51b      	bpl.n	8006202 <_scanf_float+0x17e>
 80061ca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80061ce:	6021      	str	r1, [r4, #0]
 80061d0:	f109 0901 	add.w	r9, r9, #1
 80061d4:	f1bb 0f00 	cmp.w	fp, #0
 80061d8:	d003      	beq.n	80061e2 <_scanf_float+0x15e>
 80061da:	3201      	adds	r2, #1
 80061dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80061e0:	60a2      	str	r2, [r4, #8]
 80061e2:	68a3      	ldr	r3, [r4, #8]
 80061e4:	3b01      	subs	r3, #1
 80061e6:	60a3      	str	r3, [r4, #8]
 80061e8:	6923      	ldr	r3, [r4, #16]
 80061ea:	3301      	adds	r3, #1
 80061ec:	6123      	str	r3, [r4, #16]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	607b      	str	r3, [r7, #4]
 80061f6:	f340 8087 	ble.w	8006308 <_scanf_float+0x284>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	3301      	adds	r3, #1
 80061fe:	603b      	str	r3, [r7, #0]
 8006200:	e765      	b.n	80060ce <_scanf_float+0x4a>
 8006202:	eb1a 0105 	adds.w	r1, sl, r5
 8006206:	f47f af6f 	bne.w	80060e8 <_scanf_float+0x64>
 800620a:	6822      	ldr	r2, [r4, #0]
 800620c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006210:	6022      	str	r2, [r4, #0]
 8006212:	460d      	mov	r5, r1
 8006214:	468a      	mov	sl, r1
 8006216:	f806 3b01 	strb.w	r3, [r6], #1
 800621a:	e7e2      	b.n	80061e2 <_scanf_float+0x15e>
 800621c:	6822      	ldr	r2, [r4, #0]
 800621e:	0610      	lsls	r0, r2, #24
 8006220:	f57f af62 	bpl.w	80060e8 <_scanf_float+0x64>
 8006224:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006228:	6022      	str	r2, [r4, #0]
 800622a:	e7f4      	b.n	8006216 <_scanf_float+0x192>
 800622c:	f1ba 0f00 	cmp.w	sl, #0
 8006230:	d10e      	bne.n	8006250 <_scanf_float+0x1cc>
 8006232:	f1b9 0f00 	cmp.w	r9, #0
 8006236:	d10e      	bne.n	8006256 <_scanf_float+0x1d2>
 8006238:	6822      	ldr	r2, [r4, #0]
 800623a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800623e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006242:	d108      	bne.n	8006256 <_scanf_float+0x1d2>
 8006244:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006248:	6022      	str	r2, [r4, #0]
 800624a:	f04f 0a01 	mov.w	sl, #1
 800624e:	e7e2      	b.n	8006216 <_scanf_float+0x192>
 8006250:	f1ba 0f02 	cmp.w	sl, #2
 8006254:	d055      	beq.n	8006302 <_scanf_float+0x27e>
 8006256:	2d01      	cmp	r5, #1
 8006258:	d002      	beq.n	8006260 <_scanf_float+0x1dc>
 800625a:	2d04      	cmp	r5, #4
 800625c:	f47f af44 	bne.w	80060e8 <_scanf_float+0x64>
 8006260:	3501      	adds	r5, #1
 8006262:	b2ed      	uxtb	r5, r5
 8006264:	e7d7      	b.n	8006216 <_scanf_float+0x192>
 8006266:	f1ba 0f01 	cmp.w	sl, #1
 800626a:	f47f af3d 	bne.w	80060e8 <_scanf_float+0x64>
 800626e:	f04f 0a02 	mov.w	sl, #2
 8006272:	e7d0      	b.n	8006216 <_scanf_float+0x192>
 8006274:	b97d      	cbnz	r5, 8006296 <_scanf_float+0x212>
 8006276:	f1b9 0f00 	cmp.w	r9, #0
 800627a:	f47f af38 	bne.w	80060ee <_scanf_float+0x6a>
 800627e:	6822      	ldr	r2, [r4, #0]
 8006280:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006284:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006288:	f040 8108 	bne.w	800649c <_scanf_float+0x418>
 800628c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006290:	6022      	str	r2, [r4, #0]
 8006292:	2501      	movs	r5, #1
 8006294:	e7bf      	b.n	8006216 <_scanf_float+0x192>
 8006296:	2d03      	cmp	r5, #3
 8006298:	d0e2      	beq.n	8006260 <_scanf_float+0x1dc>
 800629a:	2d05      	cmp	r5, #5
 800629c:	e7de      	b.n	800625c <_scanf_float+0x1d8>
 800629e:	2d02      	cmp	r5, #2
 80062a0:	f47f af22 	bne.w	80060e8 <_scanf_float+0x64>
 80062a4:	2503      	movs	r5, #3
 80062a6:	e7b6      	b.n	8006216 <_scanf_float+0x192>
 80062a8:	2d06      	cmp	r5, #6
 80062aa:	f47f af1d 	bne.w	80060e8 <_scanf_float+0x64>
 80062ae:	2507      	movs	r5, #7
 80062b0:	e7b1      	b.n	8006216 <_scanf_float+0x192>
 80062b2:	6822      	ldr	r2, [r4, #0]
 80062b4:	0591      	lsls	r1, r2, #22
 80062b6:	f57f af17 	bpl.w	80060e8 <_scanf_float+0x64>
 80062ba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80062be:	6022      	str	r2, [r4, #0]
 80062c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80062c4:	e7a7      	b.n	8006216 <_scanf_float+0x192>
 80062c6:	6822      	ldr	r2, [r4, #0]
 80062c8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80062cc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80062d0:	d006      	beq.n	80062e0 <_scanf_float+0x25c>
 80062d2:	0550      	lsls	r0, r2, #21
 80062d4:	f57f af08 	bpl.w	80060e8 <_scanf_float+0x64>
 80062d8:	f1b9 0f00 	cmp.w	r9, #0
 80062dc:	f000 80de 	beq.w	800649c <_scanf_float+0x418>
 80062e0:	0591      	lsls	r1, r2, #22
 80062e2:	bf58      	it	pl
 80062e4:	9902      	ldrpl	r1, [sp, #8]
 80062e6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80062ea:	bf58      	it	pl
 80062ec:	eba9 0101 	subpl.w	r1, r9, r1
 80062f0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80062f4:	bf58      	it	pl
 80062f6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80062fa:	6022      	str	r2, [r4, #0]
 80062fc:	f04f 0900 	mov.w	r9, #0
 8006300:	e789      	b.n	8006216 <_scanf_float+0x192>
 8006302:	f04f 0a03 	mov.w	sl, #3
 8006306:	e786      	b.n	8006216 <_scanf_float+0x192>
 8006308:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800630c:	4639      	mov	r1, r7
 800630e:	4640      	mov	r0, r8
 8006310:	4798      	blx	r3
 8006312:	2800      	cmp	r0, #0
 8006314:	f43f aedb 	beq.w	80060ce <_scanf_float+0x4a>
 8006318:	e6e6      	b.n	80060e8 <_scanf_float+0x64>
 800631a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800631e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006322:	463a      	mov	r2, r7
 8006324:	4640      	mov	r0, r8
 8006326:	4798      	blx	r3
 8006328:	6923      	ldr	r3, [r4, #16]
 800632a:	3b01      	subs	r3, #1
 800632c:	6123      	str	r3, [r4, #16]
 800632e:	e6e8      	b.n	8006102 <_scanf_float+0x7e>
 8006330:	1e6b      	subs	r3, r5, #1
 8006332:	2b06      	cmp	r3, #6
 8006334:	d824      	bhi.n	8006380 <_scanf_float+0x2fc>
 8006336:	2d02      	cmp	r5, #2
 8006338:	d836      	bhi.n	80063a8 <_scanf_float+0x324>
 800633a:	9b01      	ldr	r3, [sp, #4]
 800633c:	429e      	cmp	r6, r3
 800633e:	f67f aee4 	bls.w	800610a <_scanf_float+0x86>
 8006342:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006346:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800634a:	463a      	mov	r2, r7
 800634c:	4640      	mov	r0, r8
 800634e:	4798      	blx	r3
 8006350:	6923      	ldr	r3, [r4, #16]
 8006352:	3b01      	subs	r3, #1
 8006354:	6123      	str	r3, [r4, #16]
 8006356:	e7f0      	b.n	800633a <_scanf_float+0x2b6>
 8006358:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800635c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006360:	463a      	mov	r2, r7
 8006362:	4640      	mov	r0, r8
 8006364:	4798      	blx	r3
 8006366:	6923      	ldr	r3, [r4, #16]
 8006368:	3b01      	subs	r3, #1
 800636a:	6123      	str	r3, [r4, #16]
 800636c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006370:	fa5f fa8a 	uxtb.w	sl, sl
 8006374:	f1ba 0f02 	cmp.w	sl, #2
 8006378:	d1ee      	bne.n	8006358 <_scanf_float+0x2d4>
 800637a:	3d03      	subs	r5, #3
 800637c:	b2ed      	uxtb	r5, r5
 800637e:	1b76      	subs	r6, r6, r5
 8006380:	6823      	ldr	r3, [r4, #0]
 8006382:	05da      	lsls	r2, r3, #23
 8006384:	d530      	bpl.n	80063e8 <_scanf_float+0x364>
 8006386:	055b      	lsls	r3, r3, #21
 8006388:	d511      	bpl.n	80063ae <_scanf_float+0x32a>
 800638a:	9b01      	ldr	r3, [sp, #4]
 800638c:	429e      	cmp	r6, r3
 800638e:	f67f aebc 	bls.w	800610a <_scanf_float+0x86>
 8006392:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006396:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800639a:	463a      	mov	r2, r7
 800639c:	4640      	mov	r0, r8
 800639e:	4798      	blx	r3
 80063a0:	6923      	ldr	r3, [r4, #16]
 80063a2:	3b01      	subs	r3, #1
 80063a4:	6123      	str	r3, [r4, #16]
 80063a6:	e7f0      	b.n	800638a <_scanf_float+0x306>
 80063a8:	46aa      	mov	sl, r5
 80063aa:	46b3      	mov	fp, r6
 80063ac:	e7de      	b.n	800636c <_scanf_float+0x2e8>
 80063ae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80063b2:	6923      	ldr	r3, [r4, #16]
 80063b4:	2965      	cmp	r1, #101	@ 0x65
 80063b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80063ba:	f106 35ff 	add.w	r5, r6, #4294967295
 80063be:	6123      	str	r3, [r4, #16]
 80063c0:	d00c      	beq.n	80063dc <_scanf_float+0x358>
 80063c2:	2945      	cmp	r1, #69	@ 0x45
 80063c4:	d00a      	beq.n	80063dc <_scanf_float+0x358>
 80063c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80063ca:	463a      	mov	r2, r7
 80063cc:	4640      	mov	r0, r8
 80063ce:	4798      	blx	r3
 80063d0:	6923      	ldr	r3, [r4, #16]
 80063d2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	1eb5      	subs	r5, r6, #2
 80063da:	6123      	str	r3, [r4, #16]
 80063dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80063e0:	463a      	mov	r2, r7
 80063e2:	4640      	mov	r0, r8
 80063e4:	4798      	blx	r3
 80063e6:	462e      	mov	r6, r5
 80063e8:	6822      	ldr	r2, [r4, #0]
 80063ea:	f012 0210 	ands.w	r2, r2, #16
 80063ee:	d001      	beq.n	80063f4 <_scanf_float+0x370>
 80063f0:	2000      	movs	r0, #0
 80063f2:	e68b      	b.n	800610c <_scanf_float+0x88>
 80063f4:	7032      	strb	r2, [r6, #0]
 80063f6:	6823      	ldr	r3, [r4, #0]
 80063f8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80063fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006400:	d11c      	bne.n	800643c <_scanf_float+0x3b8>
 8006402:	9b02      	ldr	r3, [sp, #8]
 8006404:	454b      	cmp	r3, r9
 8006406:	eba3 0209 	sub.w	r2, r3, r9
 800640a:	d123      	bne.n	8006454 <_scanf_float+0x3d0>
 800640c:	9901      	ldr	r1, [sp, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	4640      	mov	r0, r8
 8006412:	f7ff f9cd 	bl	80057b0 <_strtod_r>
 8006416:	9b03      	ldr	r3, [sp, #12]
 8006418:	6821      	ldr	r1, [r4, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f011 0f02 	tst.w	r1, #2
 8006420:	ec57 6b10 	vmov	r6, r7, d0
 8006424:	f103 0204 	add.w	r2, r3, #4
 8006428:	d01f      	beq.n	800646a <_scanf_float+0x3e6>
 800642a:	9903      	ldr	r1, [sp, #12]
 800642c:	600a      	str	r2, [r1, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	e9c3 6700 	strd	r6, r7, [r3]
 8006434:	68e3      	ldr	r3, [r4, #12]
 8006436:	3301      	adds	r3, #1
 8006438:	60e3      	str	r3, [r4, #12]
 800643a:	e7d9      	b.n	80063f0 <_scanf_float+0x36c>
 800643c:	9b04      	ldr	r3, [sp, #16]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d0e4      	beq.n	800640c <_scanf_float+0x388>
 8006442:	9905      	ldr	r1, [sp, #20]
 8006444:	230a      	movs	r3, #10
 8006446:	3101      	adds	r1, #1
 8006448:	4640      	mov	r0, r8
 800644a:	f002 f96b 	bl	8008724 <_strtol_r>
 800644e:	9b04      	ldr	r3, [sp, #16]
 8006450:	9e05      	ldr	r6, [sp, #20]
 8006452:	1ac2      	subs	r2, r0, r3
 8006454:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006458:	429e      	cmp	r6, r3
 800645a:	bf28      	it	cs
 800645c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006460:	4910      	ldr	r1, [pc, #64]	@ (80064a4 <_scanf_float+0x420>)
 8006462:	4630      	mov	r0, r6
 8006464:	f000 f8e4 	bl	8006630 <siprintf>
 8006468:	e7d0      	b.n	800640c <_scanf_float+0x388>
 800646a:	f011 0f04 	tst.w	r1, #4
 800646e:	9903      	ldr	r1, [sp, #12]
 8006470:	600a      	str	r2, [r1, #0]
 8006472:	d1dc      	bne.n	800642e <_scanf_float+0x3aa>
 8006474:	681d      	ldr	r5, [r3, #0]
 8006476:	4632      	mov	r2, r6
 8006478:	463b      	mov	r3, r7
 800647a:	4630      	mov	r0, r6
 800647c:	4639      	mov	r1, r7
 800647e:	f7fa fb5d 	bl	8000b3c <__aeabi_dcmpun>
 8006482:	b128      	cbz	r0, 8006490 <_scanf_float+0x40c>
 8006484:	4808      	ldr	r0, [pc, #32]	@ (80064a8 <_scanf_float+0x424>)
 8006486:	f000 fa37 	bl	80068f8 <nanf>
 800648a:	ed85 0a00 	vstr	s0, [r5]
 800648e:	e7d1      	b.n	8006434 <_scanf_float+0x3b0>
 8006490:	4630      	mov	r0, r6
 8006492:	4639      	mov	r1, r7
 8006494:	f7fa fbb0 	bl	8000bf8 <__aeabi_d2f>
 8006498:	6028      	str	r0, [r5, #0]
 800649a:	e7cb      	b.n	8006434 <_scanf_float+0x3b0>
 800649c:	f04f 0900 	mov.w	r9, #0
 80064a0:	e629      	b.n	80060f6 <_scanf_float+0x72>
 80064a2:	bf00      	nop
 80064a4:	0800e1a4 	.word	0x0800e1a4
 80064a8:	0800e545 	.word	0x0800e545

080064ac <std>:
 80064ac:	2300      	movs	r3, #0
 80064ae:	b510      	push	{r4, lr}
 80064b0:	4604      	mov	r4, r0
 80064b2:	e9c0 3300 	strd	r3, r3, [r0]
 80064b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064ba:	6083      	str	r3, [r0, #8]
 80064bc:	8181      	strh	r1, [r0, #12]
 80064be:	6643      	str	r3, [r0, #100]	@ 0x64
 80064c0:	81c2      	strh	r2, [r0, #14]
 80064c2:	6183      	str	r3, [r0, #24]
 80064c4:	4619      	mov	r1, r3
 80064c6:	2208      	movs	r2, #8
 80064c8:	305c      	adds	r0, #92	@ 0x5c
 80064ca:	f000 f914 	bl	80066f6 <memset>
 80064ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006504 <std+0x58>)
 80064d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80064d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006508 <std+0x5c>)
 80064d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80064d6:	4b0d      	ldr	r3, [pc, #52]	@ (800650c <std+0x60>)
 80064d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80064da:	4b0d      	ldr	r3, [pc, #52]	@ (8006510 <std+0x64>)
 80064dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80064de:	4b0d      	ldr	r3, [pc, #52]	@ (8006514 <std+0x68>)
 80064e0:	6224      	str	r4, [r4, #32]
 80064e2:	429c      	cmp	r4, r3
 80064e4:	d006      	beq.n	80064f4 <std+0x48>
 80064e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80064ea:	4294      	cmp	r4, r2
 80064ec:	d002      	beq.n	80064f4 <std+0x48>
 80064ee:	33d0      	adds	r3, #208	@ 0xd0
 80064f0:	429c      	cmp	r4, r3
 80064f2:	d105      	bne.n	8006500 <std+0x54>
 80064f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80064f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064fc:	f000 b9e0 	b.w	80068c0 <__retarget_lock_init_recursive>
 8006500:	bd10      	pop	{r4, pc}
 8006502:	bf00      	nop
 8006504:	08006671 	.word	0x08006671
 8006508:	08006693 	.word	0x08006693
 800650c:	080066cb 	.word	0x080066cb
 8006510:	080066ef 	.word	0x080066ef
 8006514:	20000a6c 	.word	0x20000a6c

08006518 <stdio_exit_handler>:
 8006518:	4a02      	ldr	r2, [pc, #8]	@ (8006524 <stdio_exit_handler+0xc>)
 800651a:	4903      	ldr	r1, [pc, #12]	@ (8006528 <stdio_exit_handler+0x10>)
 800651c:	4803      	ldr	r0, [pc, #12]	@ (800652c <stdio_exit_handler+0x14>)
 800651e:	f000 b869 	b.w	80065f4 <_fwalk_sglue>
 8006522:	bf00      	nop
 8006524:	2000002c 	.word	0x2000002c
 8006528:	08008af9 	.word	0x08008af9
 800652c:	200001a8 	.word	0x200001a8

08006530 <cleanup_stdio>:
 8006530:	6841      	ldr	r1, [r0, #4]
 8006532:	4b0c      	ldr	r3, [pc, #48]	@ (8006564 <cleanup_stdio+0x34>)
 8006534:	4299      	cmp	r1, r3
 8006536:	b510      	push	{r4, lr}
 8006538:	4604      	mov	r4, r0
 800653a:	d001      	beq.n	8006540 <cleanup_stdio+0x10>
 800653c:	f002 fadc 	bl	8008af8 <_fflush_r>
 8006540:	68a1      	ldr	r1, [r4, #8]
 8006542:	4b09      	ldr	r3, [pc, #36]	@ (8006568 <cleanup_stdio+0x38>)
 8006544:	4299      	cmp	r1, r3
 8006546:	d002      	beq.n	800654e <cleanup_stdio+0x1e>
 8006548:	4620      	mov	r0, r4
 800654a:	f002 fad5 	bl	8008af8 <_fflush_r>
 800654e:	68e1      	ldr	r1, [r4, #12]
 8006550:	4b06      	ldr	r3, [pc, #24]	@ (800656c <cleanup_stdio+0x3c>)
 8006552:	4299      	cmp	r1, r3
 8006554:	d004      	beq.n	8006560 <cleanup_stdio+0x30>
 8006556:	4620      	mov	r0, r4
 8006558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800655c:	f002 bacc 	b.w	8008af8 <_fflush_r>
 8006560:	bd10      	pop	{r4, pc}
 8006562:	bf00      	nop
 8006564:	20000a6c 	.word	0x20000a6c
 8006568:	20000ad4 	.word	0x20000ad4
 800656c:	20000b3c 	.word	0x20000b3c

08006570 <global_stdio_init.part.0>:
 8006570:	b510      	push	{r4, lr}
 8006572:	4b0b      	ldr	r3, [pc, #44]	@ (80065a0 <global_stdio_init.part.0+0x30>)
 8006574:	4c0b      	ldr	r4, [pc, #44]	@ (80065a4 <global_stdio_init.part.0+0x34>)
 8006576:	4a0c      	ldr	r2, [pc, #48]	@ (80065a8 <global_stdio_init.part.0+0x38>)
 8006578:	601a      	str	r2, [r3, #0]
 800657a:	4620      	mov	r0, r4
 800657c:	2200      	movs	r2, #0
 800657e:	2104      	movs	r1, #4
 8006580:	f7ff ff94 	bl	80064ac <std>
 8006584:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006588:	2201      	movs	r2, #1
 800658a:	2109      	movs	r1, #9
 800658c:	f7ff ff8e 	bl	80064ac <std>
 8006590:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006594:	2202      	movs	r2, #2
 8006596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800659a:	2112      	movs	r1, #18
 800659c:	f7ff bf86 	b.w	80064ac <std>
 80065a0:	20000ba4 	.word	0x20000ba4
 80065a4:	20000a6c 	.word	0x20000a6c
 80065a8:	08006519 	.word	0x08006519

080065ac <__sfp_lock_acquire>:
 80065ac:	4801      	ldr	r0, [pc, #4]	@ (80065b4 <__sfp_lock_acquire+0x8>)
 80065ae:	f000 b988 	b.w	80068c2 <__retarget_lock_acquire_recursive>
 80065b2:	bf00      	nop
 80065b4:	20000bad 	.word	0x20000bad

080065b8 <__sfp_lock_release>:
 80065b8:	4801      	ldr	r0, [pc, #4]	@ (80065c0 <__sfp_lock_release+0x8>)
 80065ba:	f000 b983 	b.w	80068c4 <__retarget_lock_release_recursive>
 80065be:	bf00      	nop
 80065c0:	20000bad 	.word	0x20000bad

080065c4 <__sinit>:
 80065c4:	b510      	push	{r4, lr}
 80065c6:	4604      	mov	r4, r0
 80065c8:	f7ff fff0 	bl	80065ac <__sfp_lock_acquire>
 80065cc:	6a23      	ldr	r3, [r4, #32]
 80065ce:	b11b      	cbz	r3, 80065d8 <__sinit+0x14>
 80065d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065d4:	f7ff bff0 	b.w	80065b8 <__sfp_lock_release>
 80065d8:	4b04      	ldr	r3, [pc, #16]	@ (80065ec <__sinit+0x28>)
 80065da:	6223      	str	r3, [r4, #32]
 80065dc:	4b04      	ldr	r3, [pc, #16]	@ (80065f0 <__sinit+0x2c>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1f5      	bne.n	80065d0 <__sinit+0xc>
 80065e4:	f7ff ffc4 	bl	8006570 <global_stdio_init.part.0>
 80065e8:	e7f2      	b.n	80065d0 <__sinit+0xc>
 80065ea:	bf00      	nop
 80065ec:	08006531 	.word	0x08006531
 80065f0:	20000ba4 	.word	0x20000ba4

080065f4 <_fwalk_sglue>:
 80065f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065f8:	4607      	mov	r7, r0
 80065fa:	4688      	mov	r8, r1
 80065fc:	4614      	mov	r4, r2
 80065fe:	2600      	movs	r6, #0
 8006600:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006604:	f1b9 0901 	subs.w	r9, r9, #1
 8006608:	d505      	bpl.n	8006616 <_fwalk_sglue+0x22>
 800660a:	6824      	ldr	r4, [r4, #0]
 800660c:	2c00      	cmp	r4, #0
 800660e:	d1f7      	bne.n	8006600 <_fwalk_sglue+0xc>
 8006610:	4630      	mov	r0, r6
 8006612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006616:	89ab      	ldrh	r3, [r5, #12]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d907      	bls.n	800662c <_fwalk_sglue+0x38>
 800661c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006620:	3301      	adds	r3, #1
 8006622:	d003      	beq.n	800662c <_fwalk_sglue+0x38>
 8006624:	4629      	mov	r1, r5
 8006626:	4638      	mov	r0, r7
 8006628:	47c0      	blx	r8
 800662a:	4306      	orrs	r6, r0
 800662c:	3568      	adds	r5, #104	@ 0x68
 800662e:	e7e9      	b.n	8006604 <_fwalk_sglue+0x10>

08006630 <siprintf>:
 8006630:	b40e      	push	{r1, r2, r3}
 8006632:	b500      	push	{lr}
 8006634:	b09c      	sub	sp, #112	@ 0x70
 8006636:	ab1d      	add	r3, sp, #116	@ 0x74
 8006638:	9002      	str	r0, [sp, #8]
 800663a:	9006      	str	r0, [sp, #24]
 800663c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006640:	4809      	ldr	r0, [pc, #36]	@ (8006668 <siprintf+0x38>)
 8006642:	9107      	str	r1, [sp, #28]
 8006644:	9104      	str	r1, [sp, #16]
 8006646:	4909      	ldr	r1, [pc, #36]	@ (800666c <siprintf+0x3c>)
 8006648:	f853 2b04 	ldr.w	r2, [r3], #4
 800664c:	9105      	str	r1, [sp, #20]
 800664e:	6800      	ldr	r0, [r0, #0]
 8006650:	9301      	str	r3, [sp, #4]
 8006652:	a902      	add	r1, sp, #8
 8006654:	f002 f8d0 	bl	80087f8 <_svfiprintf_r>
 8006658:	9b02      	ldr	r3, [sp, #8]
 800665a:	2200      	movs	r2, #0
 800665c:	701a      	strb	r2, [r3, #0]
 800665e:	b01c      	add	sp, #112	@ 0x70
 8006660:	f85d eb04 	ldr.w	lr, [sp], #4
 8006664:	b003      	add	sp, #12
 8006666:	4770      	bx	lr
 8006668:	200001a4 	.word	0x200001a4
 800666c:	ffff0208 	.word	0xffff0208

08006670 <__sread>:
 8006670:	b510      	push	{r4, lr}
 8006672:	460c      	mov	r4, r1
 8006674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006678:	f000 f8c4 	bl	8006804 <_read_r>
 800667c:	2800      	cmp	r0, #0
 800667e:	bfab      	itete	ge
 8006680:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006682:	89a3      	ldrhlt	r3, [r4, #12]
 8006684:	181b      	addge	r3, r3, r0
 8006686:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800668a:	bfac      	ite	ge
 800668c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800668e:	81a3      	strhlt	r3, [r4, #12]
 8006690:	bd10      	pop	{r4, pc}

08006692 <__swrite>:
 8006692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006696:	461f      	mov	r7, r3
 8006698:	898b      	ldrh	r3, [r1, #12]
 800669a:	05db      	lsls	r3, r3, #23
 800669c:	4605      	mov	r5, r0
 800669e:	460c      	mov	r4, r1
 80066a0:	4616      	mov	r6, r2
 80066a2:	d505      	bpl.n	80066b0 <__swrite+0x1e>
 80066a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a8:	2302      	movs	r3, #2
 80066aa:	2200      	movs	r2, #0
 80066ac:	f000 f898 	bl	80067e0 <_lseek_r>
 80066b0:	89a3      	ldrh	r3, [r4, #12]
 80066b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066ba:	81a3      	strh	r3, [r4, #12]
 80066bc:	4632      	mov	r2, r6
 80066be:	463b      	mov	r3, r7
 80066c0:	4628      	mov	r0, r5
 80066c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066c6:	f000 b8bf 	b.w	8006848 <_write_r>

080066ca <__sseek>:
 80066ca:	b510      	push	{r4, lr}
 80066cc:	460c      	mov	r4, r1
 80066ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d2:	f000 f885 	bl	80067e0 <_lseek_r>
 80066d6:	1c43      	adds	r3, r0, #1
 80066d8:	89a3      	ldrh	r3, [r4, #12]
 80066da:	bf15      	itete	ne
 80066dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066e6:	81a3      	strheq	r3, [r4, #12]
 80066e8:	bf18      	it	ne
 80066ea:	81a3      	strhne	r3, [r4, #12]
 80066ec:	bd10      	pop	{r4, pc}

080066ee <__sclose>:
 80066ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066f2:	f000 b865 	b.w	80067c0 <_close_r>

080066f6 <memset>:
 80066f6:	4402      	add	r2, r0
 80066f8:	4603      	mov	r3, r0
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d100      	bne.n	8006700 <memset+0xa>
 80066fe:	4770      	bx	lr
 8006700:	f803 1b01 	strb.w	r1, [r3], #1
 8006704:	e7f9      	b.n	80066fa <memset+0x4>
	...

08006708 <strdup>:
 8006708:	4b02      	ldr	r3, [pc, #8]	@ (8006714 <strdup+0xc>)
 800670a:	4601      	mov	r1, r0
 800670c:	6818      	ldr	r0, [r3, #0]
 800670e:	f000 b803 	b.w	8006718 <_strdup_r>
 8006712:	bf00      	nop
 8006714:	200001a4 	.word	0x200001a4

08006718 <_strdup_r>:
 8006718:	b570      	push	{r4, r5, r6, lr}
 800671a:	4604      	mov	r4, r0
 800671c:	4608      	mov	r0, r1
 800671e:	460d      	mov	r5, r1
 8006720:	f7f9 fdae 	bl	8000280 <strlen>
 8006724:	1c46      	adds	r6, r0, #1
 8006726:	4631      	mov	r1, r6
 8006728:	4620      	mov	r0, r4
 800672a:	f7fe f9b1 	bl	8004a90 <_malloc_r>
 800672e:	4604      	mov	r4, r0
 8006730:	b118      	cbz	r0, 800673a <_strdup_r+0x22>
 8006732:	4632      	mov	r2, r6
 8006734:	4629      	mov	r1, r5
 8006736:	f000 f8c6 	bl	80068c6 <memcpy>
 800673a:	4620      	mov	r0, r4
 800673c:	bd70      	pop	{r4, r5, r6, pc}

0800673e <strncmp>:
 800673e:	b510      	push	{r4, lr}
 8006740:	b16a      	cbz	r2, 800675e <strncmp+0x20>
 8006742:	3901      	subs	r1, #1
 8006744:	1884      	adds	r4, r0, r2
 8006746:	f810 2b01 	ldrb.w	r2, [r0], #1
 800674a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800674e:	429a      	cmp	r2, r3
 8006750:	d103      	bne.n	800675a <strncmp+0x1c>
 8006752:	42a0      	cmp	r0, r4
 8006754:	d001      	beq.n	800675a <strncmp+0x1c>
 8006756:	2a00      	cmp	r2, #0
 8006758:	d1f5      	bne.n	8006746 <strncmp+0x8>
 800675a:	1ad0      	subs	r0, r2, r3
 800675c:	bd10      	pop	{r4, pc}
 800675e:	4610      	mov	r0, r2
 8006760:	e7fc      	b.n	800675c <strncmp+0x1e>

08006762 <__strtok_r>:
 8006762:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006764:	4604      	mov	r4, r0
 8006766:	b908      	cbnz	r0, 800676c <__strtok_r+0xa>
 8006768:	6814      	ldr	r4, [r2, #0]
 800676a:	b144      	cbz	r4, 800677e <__strtok_r+0x1c>
 800676c:	4620      	mov	r0, r4
 800676e:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006772:	460f      	mov	r7, r1
 8006774:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006778:	b91e      	cbnz	r6, 8006782 <__strtok_r+0x20>
 800677a:	b965      	cbnz	r5, 8006796 <__strtok_r+0x34>
 800677c:	6015      	str	r5, [r2, #0]
 800677e:	2000      	movs	r0, #0
 8006780:	e005      	b.n	800678e <__strtok_r+0x2c>
 8006782:	42b5      	cmp	r5, r6
 8006784:	d1f6      	bne.n	8006774 <__strtok_r+0x12>
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1f0      	bne.n	800676c <__strtok_r+0xa>
 800678a:	6014      	str	r4, [r2, #0]
 800678c:	7003      	strb	r3, [r0, #0]
 800678e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006790:	461c      	mov	r4, r3
 8006792:	e00c      	b.n	80067ae <__strtok_r+0x4c>
 8006794:	b915      	cbnz	r5, 800679c <__strtok_r+0x3a>
 8006796:	f814 3b01 	ldrb.w	r3, [r4], #1
 800679a:	460e      	mov	r6, r1
 800679c:	f816 5b01 	ldrb.w	r5, [r6], #1
 80067a0:	42ab      	cmp	r3, r5
 80067a2:	d1f7      	bne.n	8006794 <__strtok_r+0x32>
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0f3      	beq.n	8006790 <__strtok_r+0x2e>
 80067a8:	2300      	movs	r3, #0
 80067aa:	f804 3c01 	strb.w	r3, [r4, #-1]
 80067ae:	6014      	str	r4, [r2, #0]
 80067b0:	e7ed      	b.n	800678e <__strtok_r+0x2c>

080067b2 <strtok_r>:
 80067b2:	2301      	movs	r3, #1
 80067b4:	f7ff bfd5 	b.w	8006762 <__strtok_r>

080067b8 <_localeconv_r>:
 80067b8:	4800      	ldr	r0, [pc, #0]	@ (80067bc <_localeconv_r+0x4>)
 80067ba:	4770      	bx	lr
 80067bc:	20000128 	.word	0x20000128

080067c0 <_close_r>:
 80067c0:	b538      	push	{r3, r4, r5, lr}
 80067c2:	4d06      	ldr	r5, [pc, #24]	@ (80067dc <_close_r+0x1c>)
 80067c4:	2300      	movs	r3, #0
 80067c6:	4604      	mov	r4, r0
 80067c8:	4608      	mov	r0, r1
 80067ca:	602b      	str	r3, [r5, #0]
 80067cc:	f7fb fd16 	bl	80021fc <_close>
 80067d0:	1c43      	adds	r3, r0, #1
 80067d2:	d102      	bne.n	80067da <_close_r+0x1a>
 80067d4:	682b      	ldr	r3, [r5, #0]
 80067d6:	b103      	cbz	r3, 80067da <_close_r+0x1a>
 80067d8:	6023      	str	r3, [r4, #0]
 80067da:	bd38      	pop	{r3, r4, r5, pc}
 80067dc:	20000ba8 	.word	0x20000ba8

080067e0 <_lseek_r>:
 80067e0:	b538      	push	{r3, r4, r5, lr}
 80067e2:	4d07      	ldr	r5, [pc, #28]	@ (8006800 <_lseek_r+0x20>)
 80067e4:	4604      	mov	r4, r0
 80067e6:	4608      	mov	r0, r1
 80067e8:	4611      	mov	r1, r2
 80067ea:	2200      	movs	r2, #0
 80067ec:	602a      	str	r2, [r5, #0]
 80067ee:	461a      	mov	r2, r3
 80067f0:	f7fb fd10 	bl	8002214 <_lseek>
 80067f4:	1c43      	adds	r3, r0, #1
 80067f6:	d102      	bne.n	80067fe <_lseek_r+0x1e>
 80067f8:	682b      	ldr	r3, [r5, #0]
 80067fa:	b103      	cbz	r3, 80067fe <_lseek_r+0x1e>
 80067fc:	6023      	str	r3, [r4, #0]
 80067fe:	bd38      	pop	{r3, r4, r5, pc}
 8006800:	20000ba8 	.word	0x20000ba8

08006804 <_read_r>:
 8006804:	b538      	push	{r3, r4, r5, lr}
 8006806:	4d07      	ldr	r5, [pc, #28]	@ (8006824 <_read_r+0x20>)
 8006808:	4604      	mov	r4, r0
 800680a:	4608      	mov	r0, r1
 800680c:	4611      	mov	r1, r2
 800680e:	2200      	movs	r2, #0
 8006810:	602a      	str	r2, [r5, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	f7fb fcd6 	bl	80021c4 <_read>
 8006818:	1c43      	adds	r3, r0, #1
 800681a:	d102      	bne.n	8006822 <_read_r+0x1e>
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	b103      	cbz	r3, 8006822 <_read_r+0x1e>
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	bd38      	pop	{r3, r4, r5, pc}
 8006824:	20000ba8 	.word	0x20000ba8

08006828 <_sbrk_r>:
 8006828:	b538      	push	{r3, r4, r5, lr}
 800682a:	4d06      	ldr	r5, [pc, #24]	@ (8006844 <_sbrk_r+0x1c>)
 800682c:	2300      	movs	r3, #0
 800682e:	4604      	mov	r4, r0
 8006830:	4608      	mov	r0, r1
 8006832:	602b      	str	r3, [r5, #0]
 8006834:	f7fb fcf0 	bl	8002218 <_sbrk>
 8006838:	1c43      	adds	r3, r0, #1
 800683a:	d102      	bne.n	8006842 <_sbrk_r+0x1a>
 800683c:	682b      	ldr	r3, [r5, #0]
 800683e:	b103      	cbz	r3, 8006842 <_sbrk_r+0x1a>
 8006840:	6023      	str	r3, [r4, #0]
 8006842:	bd38      	pop	{r3, r4, r5, pc}
 8006844:	20000ba8 	.word	0x20000ba8

08006848 <_write_r>:
 8006848:	b538      	push	{r3, r4, r5, lr}
 800684a:	4d07      	ldr	r5, [pc, #28]	@ (8006868 <_write_r+0x20>)
 800684c:	4604      	mov	r4, r0
 800684e:	4608      	mov	r0, r1
 8006850:	4611      	mov	r1, r2
 8006852:	2200      	movs	r2, #0
 8006854:	602a      	str	r2, [r5, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	f7fb fcc2 	bl	80021e0 <_write>
 800685c:	1c43      	adds	r3, r0, #1
 800685e:	d102      	bne.n	8006866 <_write_r+0x1e>
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	b103      	cbz	r3, 8006866 <_write_r+0x1e>
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	bd38      	pop	{r3, r4, r5, pc}
 8006868:	20000ba8 	.word	0x20000ba8

0800686c <__errno>:
 800686c:	4b01      	ldr	r3, [pc, #4]	@ (8006874 <__errno+0x8>)
 800686e:	6818      	ldr	r0, [r3, #0]
 8006870:	4770      	bx	lr
 8006872:	bf00      	nop
 8006874:	200001a4 	.word	0x200001a4

08006878 <__libc_init_array>:
 8006878:	b570      	push	{r4, r5, r6, lr}
 800687a:	4d0d      	ldr	r5, [pc, #52]	@ (80068b0 <__libc_init_array+0x38>)
 800687c:	4c0d      	ldr	r4, [pc, #52]	@ (80068b4 <__libc_init_array+0x3c>)
 800687e:	1b64      	subs	r4, r4, r5
 8006880:	10a4      	asrs	r4, r4, #2
 8006882:	2600      	movs	r6, #0
 8006884:	42a6      	cmp	r6, r4
 8006886:	d109      	bne.n	800689c <__libc_init_array+0x24>
 8006888:	4d0b      	ldr	r5, [pc, #44]	@ (80068b8 <__libc_init_array+0x40>)
 800688a:	4c0c      	ldr	r4, [pc, #48]	@ (80068bc <__libc_init_array+0x44>)
 800688c:	f002 fc94 	bl	80091b8 <_init>
 8006890:	1b64      	subs	r4, r4, r5
 8006892:	10a4      	asrs	r4, r4, #2
 8006894:	2600      	movs	r6, #0
 8006896:	42a6      	cmp	r6, r4
 8006898:	d105      	bne.n	80068a6 <__libc_init_array+0x2e>
 800689a:	bd70      	pop	{r4, r5, r6, pc}
 800689c:	f855 3b04 	ldr.w	r3, [r5], #4
 80068a0:	4798      	blx	r3
 80068a2:	3601      	adds	r6, #1
 80068a4:	e7ee      	b.n	8006884 <__libc_init_array+0xc>
 80068a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068aa:	4798      	blx	r3
 80068ac:	3601      	adds	r6, #1
 80068ae:	e7f2      	b.n	8006896 <__libc_init_array+0x1e>
 80068b0:	0800e550 	.word	0x0800e550
 80068b4:	0800e550 	.word	0x0800e550
 80068b8:	0800e550 	.word	0x0800e550
 80068bc:	0800e554 	.word	0x0800e554

080068c0 <__retarget_lock_init_recursive>:
 80068c0:	4770      	bx	lr

080068c2 <__retarget_lock_acquire_recursive>:
 80068c2:	4770      	bx	lr

080068c4 <__retarget_lock_release_recursive>:
 80068c4:	4770      	bx	lr

080068c6 <memcpy>:
 80068c6:	440a      	add	r2, r1
 80068c8:	4291      	cmp	r1, r2
 80068ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80068ce:	d100      	bne.n	80068d2 <memcpy+0xc>
 80068d0:	4770      	bx	lr
 80068d2:	b510      	push	{r4, lr}
 80068d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068dc:	4291      	cmp	r1, r2
 80068de:	d1f9      	bne.n	80068d4 <memcpy+0xe>
 80068e0:	bd10      	pop	{r4, pc}
 80068e2:	0000      	movs	r0, r0
 80068e4:	0000      	movs	r0, r0
	...

080068e8 <nan>:
 80068e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80068f0 <nan+0x8>
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	00000000 	.word	0x00000000
 80068f4:	7ff80000 	.word	0x7ff80000

080068f8 <nanf>:
 80068f8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006900 <nanf+0x8>
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	7fc00000 	.word	0x7fc00000

08006904 <quorem>:
 8006904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006908:	6903      	ldr	r3, [r0, #16]
 800690a:	690c      	ldr	r4, [r1, #16]
 800690c:	42a3      	cmp	r3, r4
 800690e:	4607      	mov	r7, r0
 8006910:	db7e      	blt.n	8006a10 <quorem+0x10c>
 8006912:	3c01      	subs	r4, #1
 8006914:	f101 0814 	add.w	r8, r1, #20
 8006918:	00a3      	lsls	r3, r4, #2
 800691a:	f100 0514 	add.w	r5, r0, #20
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006924:	9301      	str	r3, [sp, #4]
 8006926:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800692a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800692e:	3301      	adds	r3, #1
 8006930:	429a      	cmp	r2, r3
 8006932:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006936:	fbb2 f6f3 	udiv	r6, r2, r3
 800693a:	d32e      	bcc.n	800699a <quorem+0x96>
 800693c:	f04f 0a00 	mov.w	sl, #0
 8006940:	46c4      	mov	ip, r8
 8006942:	46ae      	mov	lr, r5
 8006944:	46d3      	mov	fp, sl
 8006946:	f85c 3b04 	ldr.w	r3, [ip], #4
 800694a:	b298      	uxth	r0, r3
 800694c:	fb06 a000 	mla	r0, r6, r0, sl
 8006950:	0c02      	lsrs	r2, r0, #16
 8006952:	0c1b      	lsrs	r3, r3, #16
 8006954:	fb06 2303 	mla	r3, r6, r3, r2
 8006958:	f8de 2000 	ldr.w	r2, [lr]
 800695c:	b280      	uxth	r0, r0
 800695e:	b292      	uxth	r2, r2
 8006960:	1a12      	subs	r2, r2, r0
 8006962:	445a      	add	r2, fp
 8006964:	f8de 0000 	ldr.w	r0, [lr]
 8006968:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800696c:	b29b      	uxth	r3, r3
 800696e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006972:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006976:	b292      	uxth	r2, r2
 8006978:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800697c:	45e1      	cmp	r9, ip
 800697e:	f84e 2b04 	str.w	r2, [lr], #4
 8006982:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006986:	d2de      	bcs.n	8006946 <quorem+0x42>
 8006988:	9b00      	ldr	r3, [sp, #0]
 800698a:	58eb      	ldr	r3, [r5, r3]
 800698c:	b92b      	cbnz	r3, 800699a <quorem+0x96>
 800698e:	9b01      	ldr	r3, [sp, #4]
 8006990:	3b04      	subs	r3, #4
 8006992:	429d      	cmp	r5, r3
 8006994:	461a      	mov	r2, r3
 8006996:	d32f      	bcc.n	80069f8 <quorem+0xf4>
 8006998:	613c      	str	r4, [r7, #16]
 800699a:	4638      	mov	r0, r7
 800699c:	f001 fc5a 	bl	8008254 <__mcmp>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	db25      	blt.n	80069f0 <quorem+0xec>
 80069a4:	4629      	mov	r1, r5
 80069a6:	2000      	movs	r0, #0
 80069a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80069ac:	f8d1 c000 	ldr.w	ip, [r1]
 80069b0:	fa1f fe82 	uxth.w	lr, r2
 80069b4:	fa1f f38c 	uxth.w	r3, ip
 80069b8:	eba3 030e 	sub.w	r3, r3, lr
 80069bc:	4403      	add	r3, r0
 80069be:	0c12      	lsrs	r2, r2, #16
 80069c0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80069c4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069ce:	45c1      	cmp	r9, r8
 80069d0:	f841 3b04 	str.w	r3, [r1], #4
 80069d4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80069d8:	d2e6      	bcs.n	80069a8 <quorem+0xa4>
 80069da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069e2:	b922      	cbnz	r2, 80069ee <quorem+0xea>
 80069e4:	3b04      	subs	r3, #4
 80069e6:	429d      	cmp	r5, r3
 80069e8:	461a      	mov	r2, r3
 80069ea:	d30b      	bcc.n	8006a04 <quorem+0x100>
 80069ec:	613c      	str	r4, [r7, #16]
 80069ee:	3601      	adds	r6, #1
 80069f0:	4630      	mov	r0, r6
 80069f2:	b003      	add	sp, #12
 80069f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f8:	6812      	ldr	r2, [r2, #0]
 80069fa:	3b04      	subs	r3, #4
 80069fc:	2a00      	cmp	r2, #0
 80069fe:	d1cb      	bne.n	8006998 <quorem+0x94>
 8006a00:	3c01      	subs	r4, #1
 8006a02:	e7c6      	b.n	8006992 <quorem+0x8e>
 8006a04:	6812      	ldr	r2, [r2, #0]
 8006a06:	3b04      	subs	r3, #4
 8006a08:	2a00      	cmp	r2, #0
 8006a0a:	d1ef      	bne.n	80069ec <quorem+0xe8>
 8006a0c:	3c01      	subs	r4, #1
 8006a0e:	e7ea      	b.n	80069e6 <quorem+0xe2>
 8006a10:	2000      	movs	r0, #0
 8006a12:	e7ee      	b.n	80069f2 <quorem+0xee>
 8006a14:	0000      	movs	r0, r0
	...

08006a18 <_dtoa_r>:
 8006a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1c:	69c7      	ldr	r7, [r0, #28]
 8006a1e:	b099      	sub	sp, #100	@ 0x64
 8006a20:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006a24:	ec55 4b10 	vmov	r4, r5, d0
 8006a28:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006a2a:	9109      	str	r1, [sp, #36]	@ 0x24
 8006a2c:	4683      	mov	fp, r0
 8006a2e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a32:	b97f      	cbnz	r7, 8006a54 <_dtoa_r+0x3c>
 8006a34:	2010      	movs	r0, #16
 8006a36:	f7fd fff9 	bl	8004a2c <malloc>
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006a40:	b920      	cbnz	r0, 8006a4c <_dtoa_r+0x34>
 8006a42:	4ba7      	ldr	r3, [pc, #668]	@ (8006ce0 <_dtoa_r+0x2c8>)
 8006a44:	21ef      	movs	r1, #239	@ 0xef
 8006a46:	48a7      	ldr	r0, [pc, #668]	@ (8006ce4 <_dtoa_r+0x2cc>)
 8006a48:	f002 f898 	bl	8008b7c <__assert_func>
 8006a4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006a50:	6007      	str	r7, [r0, #0]
 8006a52:	60c7      	str	r7, [r0, #12]
 8006a54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a58:	6819      	ldr	r1, [r3, #0]
 8006a5a:	b159      	cbz	r1, 8006a74 <_dtoa_r+0x5c>
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	604a      	str	r2, [r1, #4]
 8006a60:	2301      	movs	r3, #1
 8006a62:	4093      	lsls	r3, r2
 8006a64:	608b      	str	r3, [r1, #8]
 8006a66:	4658      	mov	r0, fp
 8006a68:	f001 f970 	bl	8007d4c <_Bfree>
 8006a6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006a70:	2200      	movs	r2, #0
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	1e2b      	subs	r3, r5, #0
 8006a76:	bfb9      	ittee	lt
 8006a78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006a7c:	9303      	strlt	r3, [sp, #12]
 8006a7e:	2300      	movge	r3, #0
 8006a80:	6033      	strge	r3, [r6, #0]
 8006a82:	9f03      	ldr	r7, [sp, #12]
 8006a84:	4b98      	ldr	r3, [pc, #608]	@ (8006ce8 <_dtoa_r+0x2d0>)
 8006a86:	bfbc      	itt	lt
 8006a88:	2201      	movlt	r2, #1
 8006a8a:	6032      	strlt	r2, [r6, #0]
 8006a8c:	43bb      	bics	r3, r7
 8006a8e:	d112      	bne.n	8006ab6 <_dtoa_r+0x9e>
 8006a90:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006a92:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a9c:	4323      	orrs	r3, r4
 8006a9e:	f000 854d 	beq.w	800753c <_dtoa_r+0xb24>
 8006aa2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006aa4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006cfc <_dtoa_r+0x2e4>
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f000 854f 	beq.w	800754c <_dtoa_r+0xb34>
 8006aae:	f10a 0303 	add.w	r3, sl, #3
 8006ab2:	f000 bd49 	b.w	8007548 <_dtoa_r+0xb30>
 8006ab6:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006aba:	2200      	movs	r2, #0
 8006abc:	ec51 0b17 	vmov	r0, r1, d7
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006ac6:	f7fa f807 	bl	8000ad8 <__aeabi_dcmpeq>
 8006aca:	4680      	mov	r8, r0
 8006acc:	b158      	cbz	r0, 8006ae6 <_dtoa_r+0xce>
 8006ace:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ad6:	b113      	cbz	r3, 8006ade <_dtoa_r+0xc6>
 8006ad8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006ada:	4b84      	ldr	r3, [pc, #528]	@ (8006cec <_dtoa_r+0x2d4>)
 8006adc:	6013      	str	r3, [r2, #0]
 8006ade:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006d00 <_dtoa_r+0x2e8>
 8006ae2:	f000 bd33 	b.w	800754c <_dtoa_r+0xb34>
 8006ae6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006aea:	aa16      	add	r2, sp, #88	@ 0x58
 8006aec:	a917      	add	r1, sp, #92	@ 0x5c
 8006aee:	4658      	mov	r0, fp
 8006af0:	f001 fcd0 	bl	8008494 <__d2b>
 8006af4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006af8:	4681      	mov	r9, r0
 8006afa:	2e00      	cmp	r6, #0
 8006afc:	d077      	beq.n	8006bee <_dtoa_r+0x1d6>
 8006afe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006b00:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006b04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006b08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b0c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006b10:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006b14:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006b18:	4619      	mov	r1, r3
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	4b74      	ldr	r3, [pc, #464]	@ (8006cf0 <_dtoa_r+0x2d8>)
 8006b1e:	f7f9 fbbb 	bl	8000298 <__aeabi_dsub>
 8006b22:	a369      	add	r3, pc, #420	@ (adr r3, 8006cc8 <_dtoa_r+0x2b0>)
 8006b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b28:	f7f9 fd6e 	bl	8000608 <__aeabi_dmul>
 8006b2c:	a368      	add	r3, pc, #416	@ (adr r3, 8006cd0 <_dtoa_r+0x2b8>)
 8006b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b32:	f7f9 fbb3 	bl	800029c <__adddf3>
 8006b36:	4604      	mov	r4, r0
 8006b38:	4630      	mov	r0, r6
 8006b3a:	460d      	mov	r5, r1
 8006b3c:	f7f9 fcfa 	bl	8000534 <__aeabi_i2d>
 8006b40:	a365      	add	r3, pc, #404	@ (adr r3, 8006cd8 <_dtoa_r+0x2c0>)
 8006b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b46:	f7f9 fd5f 	bl	8000608 <__aeabi_dmul>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	4620      	mov	r0, r4
 8006b50:	4629      	mov	r1, r5
 8006b52:	f7f9 fba3 	bl	800029c <__adddf3>
 8006b56:	4604      	mov	r4, r0
 8006b58:	460d      	mov	r5, r1
 8006b5a:	f7fa f805 	bl	8000b68 <__aeabi_d2iz>
 8006b5e:	2200      	movs	r2, #0
 8006b60:	4607      	mov	r7, r0
 8006b62:	2300      	movs	r3, #0
 8006b64:	4620      	mov	r0, r4
 8006b66:	4629      	mov	r1, r5
 8006b68:	f7f9 ffc0 	bl	8000aec <__aeabi_dcmplt>
 8006b6c:	b140      	cbz	r0, 8006b80 <_dtoa_r+0x168>
 8006b6e:	4638      	mov	r0, r7
 8006b70:	f7f9 fce0 	bl	8000534 <__aeabi_i2d>
 8006b74:	4622      	mov	r2, r4
 8006b76:	462b      	mov	r3, r5
 8006b78:	f7f9 ffae 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b7c:	b900      	cbnz	r0, 8006b80 <_dtoa_r+0x168>
 8006b7e:	3f01      	subs	r7, #1
 8006b80:	2f16      	cmp	r7, #22
 8006b82:	d851      	bhi.n	8006c28 <_dtoa_r+0x210>
 8006b84:	4b5b      	ldr	r3, [pc, #364]	@ (8006cf4 <_dtoa_r+0x2dc>)
 8006b86:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b92:	f7f9 ffab 	bl	8000aec <__aeabi_dcmplt>
 8006b96:	2800      	cmp	r0, #0
 8006b98:	d048      	beq.n	8006c2c <_dtoa_r+0x214>
 8006b9a:	3f01      	subs	r7, #1
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006ba0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006ba2:	1b9b      	subs	r3, r3, r6
 8006ba4:	1e5a      	subs	r2, r3, #1
 8006ba6:	bf44      	itt	mi
 8006ba8:	f1c3 0801 	rsbmi	r8, r3, #1
 8006bac:	2300      	movmi	r3, #0
 8006bae:	9208      	str	r2, [sp, #32]
 8006bb0:	bf54      	ite	pl
 8006bb2:	f04f 0800 	movpl.w	r8, #0
 8006bb6:	9308      	strmi	r3, [sp, #32]
 8006bb8:	2f00      	cmp	r7, #0
 8006bba:	db39      	blt.n	8006c30 <_dtoa_r+0x218>
 8006bbc:	9b08      	ldr	r3, [sp, #32]
 8006bbe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006bc0:	443b      	add	r3, r7
 8006bc2:	9308      	str	r3, [sp, #32]
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bca:	2b09      	cmp	r3, #9
 8006bcc:	d864      	bhi.n	8006c98 <_dtoa_r+0x280>
 8006bce:	2b05      	cmp	r3, #5
 8006bd0:	bfc4      	itt	gt
 8006bd2:	3b04      	subgt	r3, #4
 8006bd4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bd8:	f1a3 0302 	sub.w	r3, r3, #2
 8006bdc:	bfcc      	ite	gt
 8006bde:	2400      	movgt	r4, #0
 8006be0:	2401      	movle	r4, #1
 8006be2:	2b03      	cmp	r3, #3
 8006be4:	d863      	bhi.n	8006cae <_dtoa_r+0x296>
 8006be6:	e8df f003 	tbb	[pc, r3]
 8006bea:	372a      	.short	0x372a
 8006bec:	5535      	.short	0x5535
 8006bee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006bf2:	441e      	add	r6, r3
 8006bf4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006bf8:	2b20      	cmp	r3, #32
 8006bfa:	bfc1      	itttt	gt
 8006bfc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006c00:	409f      	lslgt	r7, r3
 8006c02:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006c06:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006c0a:	bfd6      	itet	le
 8006c0c:	f1c3 0320 	rsble	r3, r3, #32
 8006c10:	ea47 0003 	orrgt.w	r0, r7, r3
 8006c14:	fa04 f003 	lslle.w	r0, r4, r3
 8006c18:	f7f9 fc7c 	bl	8000514 <__aeabi_ui2d>
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006c22:	3e01      	subs	r6, #1
 8006c24:	9214      	str	r2, [sp, #80]	@ 0x50
 8006c26:	e777      	b.n	8006b18 <_dtoa_r+0x100>
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e7b8      	b.n	8006b9e <_dtoa_r+0x186>
 8006c2c:	9012      	str	r0, [sp, #72]	@ 0x48
 8006c2e:	e7b7      	b.n	8006ba0 <_dtoa_r+0x188>
 8006c30:	427b      	negs	r3, r7
 8006c32:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c34:	2300      	movs	r3, #0
 8006c36:	eba8 0807 	sub.w	r8, r8, r7
 8006c3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006c3c:	e7c4      	b.n	8006bc8 <_dtoa_r+0x1b0>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	dc35      	bgt.n	8006cb4 <_dtoa_r+0x29c>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	9307      	str	r3, [sp, #28]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	920e      	str	r2, [sp, #56]	@ 0x38
 8006c52:	e00b      	b.n	8006c6c <_dtoa_r+0x254>
 8006c54:	2301      	movs	r3, #1
 8006c56:	e7f3      	b.n	8006c40 <_dtoa_r+0x228>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c5e:	18fb      	adds	r3, r7, r3
 8006c60:	9300      	str	r3, [sp, #0]
 8006c62:	3301      	adds	r3, #1
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	9307      	str	r3, [sp, #28]
 8006c68:	bfb8      	it	lt
 8006c6a:	2301      	movlt	r3, #1
 8006c6c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006c70:	2100      	movs	r1, #0
 8006c72:	2204      	movs	r2, #4
 8006c74:	f102 0514 	add.w	r5, r2, #20
 8006c78:	429d      	cmp	r5, r3
 8006c7a:	d91f      	bls.n	8006cbc <_dtoa_r+0x2a4>
 8006c7c:	6041      	str	r1, [r0, #4]
 8006c7e:	4658      	mov	r0, fp
 8006c80:	f001 f824 	bl	8007ccc <_Balloc>
 8006c84:	4682      	mov	sl, r0
 8006c86:	2800      	cmp	r0, #0
 8006c88:	d13c      	bne.n	8006d04 <_dtoa_r+0x2ec>
 8006c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8006cf8 <_dtoa_r+0x2e0>)
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006c92:	e6d8      	b.n	8006a46 <_dtoa_r+0x2e>
 8006c94:	2301      	movs	r3, #1
 8006c96:	e7e0      	b.n	8006c5a <_dtoa_r+0x242>
 8006c98:	2401      	movs	r4, #1
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c9e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	9307      	str	r3, [sp, #28]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	2312      	movs	r3, #18
 8006cac:	e7d0      	b.n	8006c50 <_dtoa_r+0x238>
 8006cae:	2301      	movs	r3, #1
 8006cb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cb2:	e7f5      	b.n	8006ca0 <_dtoa_r+0x288>
 8006cb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	9307      	str	r3, [sp, #28]
 8006cba:	e7d7      	b.n	8006c6c <_dtoa_r+0x254>
 8006cbc:	3101      	adds	r1, #1
 8006cbe:	0052      	lsls	r2, r2, #1
 8006cc0:	e7d8      	b.n	8006c74 <_dtoa_r+0x25c>
 8006cc2:	bf00      	nop
 8006cc4:	f3af 8000 	nop.w
 8006cc8:	636f4361 	.word	0x636f4361
 8006ccc:	3fd287a7 	.word	0x3fd287a7
 8006cd0:	8b60c8b3 	.word	0x8b60c8b3
 8006cd4:	3fc68a28 	.word	0x3fc68a28
 8006cd8:	509f79fb 	.word	0x509f79fb
 8006cdc:	3fd34413 	.word	0x3fd34413
 8006ce0:	0800e1be 	.word	0x0800e1be
 8006ce4:	0800e1d5 	.word	0x0800e1d5
 8006ce8:	7ff00000 	.word	0x7ff00000
 8006cec:	0800e181 	.word	0x0800e181
 8006cf0:	3ff80000 	.word	0x3ff80000
 8006cf4:	0800e330 	.word	0x0800e330
 8006cf8:	0800e22d 	.word	0x0800e22d
 8006cfc:	0800e1ba 	.word	0x0800e1ba
 8006d00:	0800e180 	.word	0x0800e180
 8006d04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006d08:	6018      	str	r0, [r3, #0]
 8006d0a:	9b07      	ldr	r3, [sp, #28]
 8006d0c:	2b0e      	cmp	r3, #14
 8006d0e:	f200 80a4 	bhi.w	8006e5a <_dtoa_r+0x442>
 8006d12:	2c00      	cmp	r4, #0
 8006d14:	f000 80a1 	beq.w	8006e5a <_dtoa_r+0x442>
 8006d18:	2f00      	cmp	r7, #0
 8006d1a:	dd33      	ble.n	8006d84 <_dtoa_r+0x36c>
 8006d1c:	4bad      	ldr	r3, [pc, #692]	@ (8006fd4 <_dtoa_r+0x5bc>)
 8006d1e:	f007 020f 	and.w	r2, r7, #15
 8006d22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d26:	ed93 7b00 	vldr	d7, [r3]
 8006d2a:	05f8      	lsls	r0, r7, #23
 8006d2c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006d30:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006d34:	d516      	bpl.n	8006d64 <_dtoa_r+0x34c>
 8006d36:	4ba8      	ldr	r3, [pc, #672]	@ (8006fd8 <_dtoa_r+0x5c0>)
 8006d38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d3c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d40:	f7f9 fd8c 	bl	800085c <__aeabi_ddiv>
 8006d44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d48:	f004 040f 	and.w	r4, r4, #15
 8006d4c:	2603      	movs	r6, #3
 8006d4e:	4da2      	ldr	r5, [pc, #648]	@ (8006fd8 <_dtoa_r+0x5c0>)
 8006d50:	b954      	cbnz	r4, 8006d68 <_dtoa_r+0x350>
 8006d52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d5a:	f7f9 fd7f 	bl	800085c <__aeabi_ddiv>
 8006d5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d62:	e028      	b.n	8006db6 <_dtoa_r+0x39e>
 8006d64:	2602      	movs	r6, #2
 8006d66:	e7f2      	b.n	8006d4e <_dtoa_r+0x336>
 8006d68:	07e1      	lsls	r1, r4, #31
 8006d6a:	d508      	bpl.n	8006d7e <_dtoa_r+0x366>
 8006d6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d70:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d74:	f7f9 fc48 	bl	8000608 <__aeabi_dmul>
 8006d78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d7c:	3601      	adds	r6, #1
 8006d7e:	1064      	asrs	r4, r4, #1
 8006d80:	3508      	adds	r5, #8
 8006d82:	e7e5      	b.n	8006d50 <_dtoa_r+0x338>
 8006d84:	f000 80d2 	beq.w	8006f2c <_dtoa_r+0x514>
 8006d88:	427c      	negs	r4, r7
 8006d8a:	4b92      	ldr	r3, [pc, #584]	@ (8006fd4 <_dtoa_r+0x5bc>)
 8006d8c:	4d92      	ldr	r5, [pc, #584]	@ (8006fd8 <_dtoa_r+0x5c0>)
 8006d8e:	f004 020f 	and.w	r2, r4, #15
 8006d92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006d9e:	f7f9 fc33 	bl	8000608 <__aeabi_dmul>
 8006da2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006da6:	1124      	asrs	r4, r4, #4
 8006da8:	2300      	movs	r3, #0
 8006daa:	2602      	movs	r6, #2
 8006dac:	2c00      	cmp	r4, #0
 8006dae:	f040 80b2 	bne.w	8006f16 <_dtoa_r+0x4fe>
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1d3      	bne.n	8006d5e <_dtoa_r+0x346>
 8006db6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006db8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 80b7 	beq.w	8006f30 <_dtoa_r+0x518>
 8006dc2:	4b86      	ldr	r3, [pc, #536]	@ (8006fdc <_dtoa_r+0x5c4>)
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	4629      	mov	r1, r5
 8006dca:	f7f9 fe8f 	bl	8000aec <__aeabi_dcmplt>
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	f000 80ae 	beq.w	8006f30 <_dtoa_r+0x518>
 8006dd4:	9b07      	ldr	r3, [sp, #28]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	f000 80aa 	beq.w	8006f30 <_dtoa_r+0x518>
 8006ddc:	9b00      	ldr	r3, [sp, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	dd37      	ble.n	8006e52 <_dtoa_r+0x43a>
 8006de2:	1e7b      	subs	r3, r7, #1
 8006de4:	9304      	str	r3, [sp, #16]
 8006de6:	4620      	mov	r0, r4
 8006de8:	4b7d      	ldr	r3, [pc, #500]	@ (8006fe0 <_dtoa_r+0x5c8>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	4629      	mov	r1, r5
 8006dee:	f7f9 fc0b 	bl	8000608 <__aeabi_dmul>
 8006df2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006df6:	9c00      	ldr	r4, [sp, #0]
 8006df8:	3601      	adds	r6, #1
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	f7f9 fb9a 	bl	8000534 <__aeabi_i2d>
 8006e00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e04:	f7f9 fc00 	bl	8000608 <__aeabi_dmul>
 8006e08:	4b76      	ldr	r3, [pc, #472]	@ (8006fe4 <_dtoa_r+0x5cc>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f7f9 fa46 	bl	800029c <__adddf3>
 8006e10:	4605      	mov	r5, r0
 8006e12:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006e16:	2c00      	cmp	r4, #0
 8006e18:	f040 808d 	bne.w	8006f36 <_dtoa_r+0x51e>
 8006e1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e20:	4b71      	ldr	r3, [pc, #452]	@ (8006fe8 <_dtoa_r+0x5d0>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	f7f9 fa38 	bl	8000298 <__aeabi_dsub>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e30:	462a      	mov	r2, r5
 8006e32:	4633      	mov	r3, r6
 8006e34:	f7f9 fe78 	bl	8000b28 <__aeabi_dcmpgt>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	f040 828b 	bne.w	8007354 <_dtoa_r+0x93c>
 8006e3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e42:	462a      	mov	r2, r5
 8006e44:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006e48:	f7f9 fe50 	bl	8000aec <__aeabi_dcmplt>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	f040 8128 	bne.w	80070a2 <_dtoa_r+0x68a>
 8006e52:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006e56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006e5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f2c0 815a 	blt.w	8007116 <_dtoa_r+0x6fe>
 8006e62:	2f0e      	cmp	r7, #14
 8006e64:	f300 8157 	bgt.w	8007116 <_dtoa_r+0x6fe>
 8006e68:	4b5a      	ldr	r3, [pc, #360]	@ (8006fd4 <_dtoa_r+0x5bc>)
 8006e6a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006e6e:	ed93 7b00 	vldr	d7, [r3]
 8006e72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	ed8d 7b00 	vstr	d7, [sp]
 8006e7a:	da03      	bge.n	8006e84 <_dtoa_r+0x46c>
 8006e7c:	9b07      	ldr	r3, [sp, #28]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f340 8101 	ble.w	8007086 <_dtoa_r+0x66e>
 8006e84:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006e88:	4656      	mov	r6, sl
 8006e8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e8e:	4620      	mov	r0, r4
 8006e90:	4629      	mov	r1, r5
 8006e92:	f7f9 fce3 	bl	800085c <__aeabi_ddiv>
 8006e96:	f7f9 fe67 	bl	8000b68 <__aeabi_d2iz>
 8006e9a:	4680      	mov	r8, r0
 8006e9c:	f7f9 fb4a 	bl	8000534 <__aeabi_i2d>
 8006ea0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ea4:	f7f9 fbb0 	bl	8000608 <__aeabi_dmul>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	460b      	mov	r3, r1
 8006eac:	4620      	mov	r0, r4
 8006eae:	4629      	mov	r1, r5
 8006eb0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006eb4:	f7f9 f9f0 	bl	8000298 <__aeabi_dsub>
 8006eb8:	f806 4b01 	strb.w	r4, [r6], #1
 8006ebc:	9d07      	ldr	r5, [sp, #28]
 8006ebe:	eba6 040a 	sub.w	r4, r6, sl
 8006ec2:	42a5      	cmp	r5, r4
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	f040 8117 	bne.w	80070fa <_dtoa_r+0x6e2>
 8006ecc:	f7f9 f9e6 	bl	800029c <__adddf3>
 8006ed0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	460d      	mov	r5, r1
 8006ed8:	f7f9 fe26 	bl	8000b28 <__aeabi_dcmpgt>
 8006edc:	2800      	cmp	r0, #0
 8006ede:	f040 80f9 	bne.w	80070d4 <_dtoa_r+0x6bc>
 8006ee2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	4629      	mov	r1, r5
 8006eea:	f7f9 fdf5 	bl	8000ad8 <__aeabi_dcmpeq>
 8006eee:	b118      	cbz	r0, 8006ef8 <_dtoa_r+0x4e0>
 8006ef0:	f018 0f01 	tst.w	r8, #1
 8006ef4:	f040 80ee 	bne.w	80070d4 <_dtoa_r+0x6bc>
 8006ef8:	4649      	mov	r1, r9
 8006efa:	4658      	mov	r0, fp
 8006efc:	f000 ff26 	bl	8007d4c <_Bfree>
 8006f00:	2300      	movs	r3, #0
 8006f02:	7033      	strb	r3, [r6, #0]
 8006f04:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f06:	3701      	adds	r7, #1
 8006f08:	601f      	str	r7, [r3, #0]
 8006f0a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 831d 	beq.w	800754c <_dtoa_r+0xb34>
 8006f12:	601e      	str	r6, [r3, #0]
 8006f14:	e31a      	b.n	800754c <_dtoa_r+0xb34>
 8006f16:	07e2      	lsls	r2, r4, #31
 8006f18:	d505      	bpl.n	8006f26 <_dtoa_r+0x50e>
 8006f1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006f1e:	f7f9 fb73 	bl	8000608 <__aeabi_dmul>
 8006f22:	3601      	adds	r6, #1
 8006f24:	2301      	movs	r3, #1
 8006f26:	1064      	asrs	r4, r4, #1
 8006f28:	3508      	adds	r5, #8
 8006f2a:	e73f      	b.n	8006dac <_dtoa_r+0x394>
 8006f2c:	2602      	movs	r6, #2
 8006f2e:	e742      	b.n	8006db6 <_dtoa_r+0x39e>
 8006f30:	9c07      	ldr	r4, [sp, #28]
 8006f32:	9704      	str	r7, [sp, #16]
 8006f34:	e761      	b.n	8006dfa <_dtoa_r+0x3e2>
 8006f36:	4b27      	ldr	r3, [pc, #156]	@ (8006fd4 <_dtoa_r+0x5bc>)
 8006f38:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f3e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006f42:	4454      	add	r4, sl
 8006f44:	2900      	cmp	r1, #0
 8006f46:	d053      	beq.n	8006ff0 <_dtoa_r+0x5d8>
 8006f48:	4928      	ldr	r1, [pc, #160]	@ (8006fec <_dtoa_r+0x5d4>)
 8006f4a:	2000      	movs	r0, #0
 8006f4c:	f7f9 fc86 	bl	800085c <__aeabi_ddiv>
 8006f50:	4633      	mov	r3, r6
 8006f52:	462a      	mov	r2, r5
 8006f54:	f7f9 f9a0 	bl	8000298 <__aeabi_dsub>
 8006f58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006f5c:	4656      	mov	r6, sl
 8006f5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f62:	f7f9 fe01 	bl	8000b68 <__aeabi_d2iz>
 8006f66:	4605      	mov	r5, r0
 8006f68:	f7f9 fae4 	bl	8000534 <__aeabi_i2d>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	460b      	mov	r3, r1
 8006f70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f74:	f7f9 f990 	bl	8000298 <__aeabi_dsub>
 8006f78:	3530      	adds	r5, #48	@ 0x30
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006f82:	f806 5b01 	strb.w	r5, [r6], #1
 8006f86:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006f8a:	f7f9 fdaf 	bl	8000aec <__aeabi_dcmplt>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d171      	bne.n	8007076 <_dtoa_r+0x65e>
 8006f92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f96:	4911      	ldr	r1, [pc, #68]	@ (8006fdc <_dtoa_r+0x5c4>)
 8006f98:	2000      	movs	r0, #0
 8006f9a:	f7f9 f97d 	bl	8000298 <__aeabi_dsub>
 8006f9e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006fa2:	f7f9 fda3 	bl	8000aec <__aeabi_dcmplt>
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	f040 8095 	bne.w	80070d6 <_dtoa_r+0x6be>
 8006fac:	42a6      	cmp	r6, r4
 8006fae:	f43f af50 	beq.w	8006e52 <_dtoa_r+0x43a>
 8006fb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006fb6:	4b0a      	ldr	r3, [pc, #40]	@ (8006fe0 <_dtoa_r+0x5c8>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f7f9 fb25 	bl	8000608 <__aeabi_dmul>
 8006fbe:	4b08      	ldr	r3, [pc, #32]	@ (8006fe0 <_dtoa_r+0x5c8>)
 8006fc0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006fca:	f7f9 fb1d 	bl	8000608 <__aeabi_dmul>
 8006fce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fd2:	e7c4      	b.n	8006f5e <_dtoa_r+0x546>
 8006fd4:	0800e330 	.word	0x0800e330
 8006fd8:	0800e308 	.word	0x0800e308
 8006fdc:	3ff00000 	.word	0x3ff00000
 8006fe0:	40240000 	.word	0x40240000
 8006fe4:	401c0000 	.word	0x401c0000
 8006fe8:	40140000 	.word	0x40140000
 8006fec:	3fe00000 	.word	0x3fe00000
 8006ff0:	4631      	mov	r1, r6
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	f7f9 fb08 	bl	8000608 <__aeabi_dmul>
 8006ff8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ffc:	9415      	str	r4, [sp, #84]	@ 0x54
 8006ffe:	4656      	mov	r6, sl
 8007000:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007004:	f7f9 fdb0 	bl	8000b68 <__aeabi_d2iz>
 8007008:	4605      	mov	r5, r0
 800700a:	f7f9 fa93 	bl	8000534 <__aeabi_i2d>
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007016:	f7f9 f93f 	bl	8000298 <__aeabi_dsub>
 800701a:	3530      	adds	r5, #48	@ 0x30
 800701c:	f806 5b01 	strb.w	r5, [r6], #1
 8007020:	4602      	mov	r2, r0
 8007022:	460b      	mov	r3, r1
 8007024:	42a6      	cmp	r6, r4
 8007026:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800702a:	f04f 0200 	mov.w	r2, #0
 800702e:	d124      	bne.n	800707a <_dtoa_r+0x662>
 8007030:	4bac      	ldr	r3, [pc, #688]	@ (80072e4 <_dtoa_r+0x8cc>)
 8007032:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007036:	f7f9 f931 	bl	800029c <__adddf3>
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007042:	f7f9 fd71 	bl	8000b28 <__aeabi_dcmpgt>
 8007046:	2800      	cmp	r0, #0
 8007048:	d145      	bne.n	80070d6 <_dtoa_r+0x6be>
 800704a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800704e:	49a5      	ldr	r1, [pc, #660]	@ (80072e4 <_dtoa_r+0x8cc>)
 8007050:	2000      	movs	r0, #0
 8007052:	f7f9 f921 	bl	8000298 <__aeabi_dsub>
 8007056:	4602      	mov	r2, r0
 8007058:	460b      	mov	r3, r1
 800705a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800705e:	f7f9 fd45 	bl	8000aec <__aeabi_dcmplt>
 8007062:	2800      	cmp	r0, #0
 8007064:	f43f aef5 	beq.w	8006e52 <_dtoa_r+0x43a>
 8007068:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800706a:	1e73      	subs	r3, r6, #1
 800706c:	9315      	str	r3, [sp, #84]	@ 0x54
 800706e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007072:	2b30      	cmp	r3, #48	@ 0x30
 8007074:	d0f8      	beq.n	8007068 <_dtoa_r+0x650>
 8007076:	9f04      	ldr	r7, [sp, #16]
 8007078:	e73e      	b.n	8006ef8 <_dtoa_r+0x4e0>
 800707a:	4b9b      	ldr	r3, [pc, #620]	@ (80072e8 <_dtoa_r+0x8d0>)
 800707c:	f7f9 fac4 	bl	8000608 <__aeabi_dmul>
 8007080:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007084:	e7bc      	b.n	8007000 <_dtoa_r+0x5e8>
 8007086:	d10c      	bne.n	80070a2 <_dtoa_r+0x68a>
 8007088:	4b98      	ldr	r3, [pc, #608]	@ (80072ec <_dtoa_r+0x8d4>)
 800708a:	2200      	movs	r2, #0
 800708c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007090:	f7f9 faba 	bl	8000608 <__aeabi_dmul>
 8007094:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007098:	f7f9 fd3c 	bl	8000b14 <__aeabi_dcmpge>
 800709c:	2800      	cmp	r0, #0
 800709e:	f000 8157 	beq.w	8007350 <_dtoa_r+0x938>
 80070a2:	2400      	movs	r4, #0
 80070a4:	4625      	mov	r5, r4
 80070a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070a8:	43db      	mvns	r3, r3
 80070aa:	9304      	str	r3, [sp, #16]
 80070ac:	4656      	mov	r6, sl
 80070ae:	2700      	movs	r7, #0
 80070b0:	4621      	mov	r1, r4
 80070b2:	4658      	mov	r0, fp
 80070b4:	f000 fe4a 	bl	8007d4c <_Bfree>
 80070b8:	2d00      	cmp	r5, #0
 80070ba:	d0dc      	beq.n	8007076 <_dtoa_r+0x65e>
 80070bc:	b12f      	cbz	r7, 80070ca <_dtoa_r+0x6b2>
 80070be:	42af      	cmp	r7, r5
 80070c0:	d003      	beq.n	80070ca <_dtoa_r+0x6b2>
 80070c2:	4639      	mov	r1, r7
 80070c4:	4658      	mov	r0, fp
 80070c6:	f000 fe41 	bl	8007d4c <_Bfree>
 80070ca:	4629      	mov	r1, r5
 80070cc:	4658      	mov	r0, fp
 80070ce:	f000 fe3d 	bl	8007d4c <_Bfree>
 80070d2:	e7d0      	b.n	8007076 <_dtoa_r+0x65e>
 80070d4:	9704      	str	r7, [sp, #16]
 80070d6:	4633      	mov	r3, r6
 80070d8:	461e      	mov	r6, r3
 80070da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070de:	2a39      	cmp	r2, #57	@ 0x39
 80070e0:	d107      	bne.n	80070f2 <_dtoa_r+0x6da>
 80070e2:	459a      	cmp	sl, r3
 80070e4:	d1f8      	bne.n	80070d8 <_dtoa_r+0x6c0>
 80070e6:	9a04      	ldr	r2, [sp, #16]
 80070e8:	3201      	adds	r2, #1
 80070ea:	9204      	str	r2, [sp, #16]
 80070ec:	2230      	movs	r2, #48	@ 0x30
 80070ee:	f88a 2000 	strb.w	r2, [sl]
 80070f2:	781a      	ldrb	r2, [r3, #0]
 80070f4:	3201      	adds	r2, #1
 80070f6:	701a      	strb	r2, [r3, #0]
 80070f8:	e7bd      	b.n	8007076 <_dtoa_r+0x65e>
 80070fa:	4b7b      	ldr	r3, [pc, #492]	@ (80072e8 <_dtoa_r+0x8d0>)
 80070fc:	2200      	movs	r2, #0
 80070fe:	f7f9 fa83 	bl	8000608 <__aeabi_dmul>
 8007102:	2200      	movs	r2, #0
 8007104:	2300      	movs	r3, #0
 8007106:	4604      	mov	r4, r0
 8007108:	460d      	mov	r5, r1
 800710a:	f7f9 fce5 	bl	8000ad8 <__aeabi_dcmpeq>
 800710e:	2800      	cmp	r0, #0
 8007110:	f43f aebb 	beq.w	8006e8a <_dtoa_r+0x472>
 8007114:	e6f0      	b.n	8006ef8 <_dtoa_r+0x4e0>
 8007116:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007118:	2a00      	cmp	r2, #0
 800711a:	f000 80db 	beq.w	80072d4 <_dtoa_r+0x8bc>
 800711e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007120:	2a01      	cmp	r2, #1
 8007122:	f300 80bf 	bgt.w	80072a4 <_dtoa_r+0x88c>
 8007126:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007128:	2a00      	cmp	r2, #0
 800712a:	f000 80b7 	beq.w	800729c <_dtoa_r+0x884>
 800712e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007132:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007134:	4646      	mov	r6, r8
 8007136:	9a08      	ldr	r2, [sp, #32]
 8007138:	2101      	movs	r1, #1
 800713a:	441a      	add	r2, r3
 800713c:	4658      	mov	r0, fp
 800713e:	4498      	add	r8, r3
 8007140:	9208      	str	r2, [sp, #32]
 8007142:	f000 ff01 	bl	8007f48 <__i2b>
 8007146:	4605      	mov	r5, r0
 8007148:	b15e      	cbz	r6, 8007162 <_dtoa_r+0x74a>
 800714a:	9b08      	ldr	r3, [sp, #32]
 800714c:	2b00      	cmp	r3, #0
 800714e:	dd08      	ble.n	8007162 <_dtoa_r+0x74a>
 8007150:	42b3      	cmp	r3, r6
 8007152:	9a08      	ldr	r2, [sp, #32]
 8007154:	bfa8      	it	ge
 8007156:	4633      	movge	r3, r6
 8007158:	eba8 0803 	sub.w	r8, r8, r3
 800715c:	1af6      	subs	r6, r6, r3
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	9308      	str	r3, [sp, #32]
 8007162:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007164:	b1f3      	cbz	r3, 80071a4 <_dtoa_r+0x78c>
 8007166:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007168:	2b00      	cmp	r3, #0
 800716a:	f000 80b7 	beq.w	80072dc <_dtoa_r+0x8c4>
 800716e:	b18c      	cbz	r4, 8007194 <_dtoa_r+0x77c>
 8007170:	4629      	mov	r1, r5
 8007172:	4622      	mov	r2, r4
 8007174:	4658      	mov	r0, fp
 8007176:	f000 ffa7 	bl	80080c8 <__pow5mult>
 800717a:	464a      	mov	r2, r9
 800717c:	4601      	mov	r1, r0
 800717e:	4605      	mov	r5, r0
 8007180:	4658      	mov	r0, fp
 8007182:	f000 fef7 	bl	8007f74 <__multiply>
 8007186:	4649      	mov	r1, r9
 8007188:	9004      	str	r0, [sp, #16]
 800718a:	4658      	mov	r0, fp
 800718c:	f000 fdde 	bl	8007d4c <_Bfree>
 8007190:	9b04      	ldr	r3, [sp, #16]
 8007192:	4699      	mov	r9, r3
 8007194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007196:	1b1a      	subs	r2, r3, r4
 8007198:	d004      	beq.n	80071a4 <_dtoa_r+0x78c>
 800719a:	4649      	mov	r1, r9
 800719c:	4658      	mov	r0, fp
 800719e:	f000 ff93 	bl	80080c8 <__pow5mult>
 80071a2:	4681      	mov	r9, r0
 80071a4:	2101      	movs	r1, #1
 80071a6:	4658      	mov	r0, fp
 80071a8:	f000 fece 	bl	8007f48 <__i2b>
 80071ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071ae:	4604      	mov	r4, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 81cf 	beq.w	8007554 <_dtoa_r+0xb3c>
 80071b6:	461a      	mov	r2, r3
 80071b8:	4601      	mov	r1, r0
 80071ba:	4658      	mov	r0, fp
 80071bc:	f000 ff84 	bl	80080c8 <__pow5mult>
 80071c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	4604      	mov	r4, r0
 80071c6:	f300 8095 	bgt.w	80072f4 <_dtoa_r+0x8dc>
 80071ca:	9b02      	ldr	r3, [sp, #8]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f040 8087 	bne.w	80072e0 <_dtoa_r+0x8c8>
 80071d2:	9b03      	ldr	r3, [sp, #12]
 80071d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071d8:	2b00      	cmp	r3, #0
 80071da:	f040 8089 	bne.w	80072f0 <_dtoa_r+0x8d8>
 80071de:	9b03      	ldr	r3, [sp, #12]
 80071e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071e4:	0d1b      	lsrs	r3, r3, #20
 80071e6:	051b      	lsls	r3, r3, #20
 80071e8:	b12b      	cbz	r3, 80071f6 <_dtoa_r+0x7de>
 80071ea:	9b08      	ldr	r3, [sp, #32]
 80071ec:	3301      	adds	r3, #1
 80071ee:	9308      	str	r3, [sp, #32]
 80071f0:	f108 0801 	add.w	r8, r8, #1
 80071f4:	2301      	movs	r3, #1
 80071f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80071f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 81b0 	beq.w	8007560 <_dtoa_r+0xb48>
 8007200:	6923      	ldr	r3, [r4, #16]
 8007202:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007206:	6918      	ldr	r0, [r3, #16]
 8007208:	f000 fe52 	bl	8007eb0 <__hi0bits>
 800720c:	f1c0 0020 	rsb	r0, r0, #32
 8007210:	9b08      	ldr	r3, [sp, #32]
 8007212:	4418      	add	r0, r3
 8007214:	f010 001f 	ands.w	r0, r0, #31
 8007218:	d077      	beq.n	800730a <_dtoa_r+0x8f2>
 800721a:	f1c0 0320 	rsb	r3, r0, #32
 800721e:	2b04      	cmp	r3, #4
 8007220:	dd6b      	ble.n	80072fa <_dtoa_r+0x8e2>
 8007222:	9b08      	ldr	r3, [sp, #32]
 8007224:	f1c0 001c 	rsb	r0, r0, #28
 8007228:	4403      	add	r3, r0
 800722a:	4480      	add	r8, r0
 800722c:	4406      	add	r6, r0
 800722e:	9308      	str	r3, [sp, #32]
 8007230:	f1b8 0f00 	cmp.w	r8, #0
 8007234:	dd05      	ble.n	8007242 <_dtoa_r+0x82a>
 8007236:	4649      	mov	r1, r9
 8007238:	4642      	mov	r2, r8
 800723a:	4658      	mov	r0, fp
 800723c:	f000 ff9e 	bl	800817c <__lshift>
 8007240:	4681      	mov	r9, r0
 8007242:	9b08      	ldr	r3, [sp, #32]
 8007244:	2b00      	cmp	r3, #0
 8007246:	dd05      	ble.n	8007254 <_dtoa_r+0x83c>
 8007248:	4621      	mov	r1, r4
 800724a:	461a      	mov	r2, r3
 800724c:	4658      	mov	r0, fp
 800724e:	f000 ff95 	bl	800817c <__lshift>
 8007252:	4604      	mov	r4, r0
 8007254:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007256:	2b00      	cmp	r3, #0
 8007258:	d059      	beq.n	800730e <_dtoa_r+0x8f6>
 800725a:	4621      	mov	r1, r4
 800725c:	4648      	mov	r0, r9
 800725e:	f000 fff9 	bl	8008254 <__mcmp>
 8007262:	2800      	cmp	r0, #0
 8007264:	da53      	bge.n	800730e <_dtoa_r+0x8f6>
 8007266:	1e7b      	subs	r3, r7, #1
 8007268:	9304      	str	r3, [sp, #16]
 800726a:	4649      	mov	r1, r9
 800726c:	2300      	movs	r3, #0
 800726e:	220a      	movs	r2, #10
 8007270:	4658      	mov	r0, fp
 8007272:	f000 fd8d 	bl	8007d90 <__multadd>
 8007276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007278:	4681      	mov	r9, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 8172 	beq.w	8007564 <_dtoa_r+0xb4c>
 8007280:	2300      	movs	r3, #0
 8007282:	4629      	mov	r1, r5
 8007284:	220a      	movs	r2, #10
 8007286:	4658      	mov	r0, fp
 8007288:	f000 fd82 	bl	8007d90 <__multadd>
 800728c:	9b00      	ldr	r3, [sp, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	4605      	mov	r5, r0
 8007292:	dc67      	bgt.n	8007364 <_dtoa_r+0x94c>
 8007294:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007296:	2b02      	cmp	r3, #2
 8007298:	dc41      	bgt.n	800731e <_dtoa_r+0x906>
 800729a:	e063      	b.n	8007364 <_dtoa_r+0x94c>
 800729c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800729e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80072a2:	e746      	b.n	8007132 <_dtoa_r+0x71a>
 80072a4:	9b07      	ldr	r3, [sp, #28]
 80072a6:	1e5c      	subs	r4, r3, #1
 80072a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072aa:	42a3      	cmp	r3, r4
 80072ac:	bfbf      	itttt	lt
 80072ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80072b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80072b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80072b4:	1ae3      	sublt	r3, r4, r3
 80072b6:	bfb4      	ite	lt
 80072b8:	18d2      	addlt	r2, r2, r3
 80072ba:	1b1c      	subge	r4, r3, r4
 80072bc:	9b07      	ldr	r3, [sp, #28]
 80072be:	bfbc      	itt	lt
 80072c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80072c2:	2400      	movlt	r4, #0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	bfb5      	itete	lt
 80072c8:	eba8 0603 	sublt.w	r6, r8, r3
 80072cc:	9b07      	ldrge	r3, [sp, #28]
 80072ce:	2300      	movlt	r3, #0
 80072d0:	4646      	movge	r6, r8
 80072d2:	e730      	b.n	8007136 <_dtoa_r+0x71e>
 80072d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80072d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80072d8:	4646      	mov	r6, r8
 80072da:	e735      	b.n	8007148 <_dtoa_r+0x730>
 80072dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80072de:	e75c      	b.n	800719a <_dtoa_r+0x782>
 80072e0:	2300      	movs	r3, #0
 80072e2:	e788      	b.n	80071f6 <_dtoa_r+0x7de>
 80072e4:	3fe00000 	.word	0x3fe00000
 80072e8:	40240000 	.word	0x40240000
 80072ec:	40140000 	.word	0x40140000
 80072f0:	9b02      	ldr	r3, [sp, #8]
 80072f2:	e780      	b.n	80071f6 <_dtoa_r+0x7de>
 80072f4:	2300      	movs	r3, #0
 80072f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80072f8:	e782      	b.n	8007200 <_dtoa_r+0x7e8>
 80072fa:	d099      	beq.n	8007230 <_dtoa_r+0x818>
 80072fc:	9a08      	ldr	r2, [sp, #32]
 80072fe:	331c      	adds	r3, #28
 8007300:	441a      	add	r2, r3
 8007302:	4498      	add	r8, r3
 8007304:	441e      	add	r6, r3
 8007306:	9208      	str	r2, [sp, #32]
 8007308:	e792      	b.n	8007230 <_dtoa_r+0x818>
 800730a:	4603      	mov	r3, r0
 800730c:	e7f6      	b.n	80072fc <_dtoa_r+0x8e4>
 800730e:	9b07      	ldr	r3, [sp, #28]
 8007310:	9704      	str	r7, [sp, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	dc20      	bgt.n	8007358 <_dtoa_r+0x940>
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800731a:	2b02      	cmp	r3, #2
 800731c:	dd1e      	ble.n	800735c <_dtoa_r+0x944>
 800731e:	9b00      	ldr	r3, [sp, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	f47f aec0 	bne.w	80070a6 <_dtoa_r+0x68e>
 8007326:	4621      	mov	r1, r4
 8007328:	2205      	movs	r2, #5
 800732a:	4658      	mov	r0, fp
 800732c:	f000 fd30 	bl	8007d90 <__multadd>
 8007330:	4601      	mov	r1, r0
 8007332:	4604      	mov	r4, r0
 8007334:	4648      	mov	r0, r9
 8007336:	f000 ff8d 	bl	8008254 <__mcmp>
 800733a:	2800      	cmp	r0, #0
 800733c:	f77f aeb3 	ble.w	80070a6 <_dtoa_r+0x68e>
 8007340:	4656      	mov	r6, sl
 8007342:	2331      	movs	r3, #49	@ 0x31
 8007344:	f806 3b01 	strb.w	r3, [r6], #1
 8007348:	9b04      	ldr	r3, [sp, #16]
 800734a:	3301      	adds	r3, #1
 800734c:	9304      	str	r3, [sp, #16]
 800734e:	e6ae      	b.n	80070ae <_dtoa_r+0x696>
 8007350:	9c07      	ldr	r4, [sp, #28]
 8007352:	9704      	str	r7, [sp, #16]
 8007354:	4625      	mov	r5, r4
 8007356:	e7f3      	b.n	8007340 <_dtoa_r+0x928>
 8007358:	9b07      	ldr	r3, [sp, #28]
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 8104 	beq.w	800756c <_dtoa_r+0xb54>
 8007364:	2e00      	cmp	r6, #0
 8007366:	dd05      	ble.n	8007374 <_dtoa_r+0x95c>
 8007368:	4629      	mov	r1, r5
 800736a:	4632      	mov	r2, r6
 800736c:	4658      	mov	r0, fp
 800736e:	f000 ff05 	bl	800817c <__lshift>
 8007372:	4605      	mov	r5, r0
 8007374:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007376:	2b00      	cmp	r3, #0
 8007378:	d05a      	beq.n	8007430 <_dtoa_r+0xa18>
 800737a:	6869      	ldr	r1, [r5, #4]
 800737c:	4658      	mov	r0, fp
 800737e:	f000 fca5 	bl	8007ccc <_Balloc>
 8007382:	4606      	mov	r6, r0
 8007384:	b928      	cbnz	r0, 8007392 <_dtoa_r+0x97a>
 8007386:	4b84      	ldr	r3, [pc, #528]	@ (8007598 <_dtoa_r+0xb80>)
 8007388:	4602      	mov	r2, r0
 800738a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800738e:	f7ff bb5a 	b.w	8006a46 <_dtoa_r+0x2e>
 8007392:	692a      	ldr	r2, [r5, #16]
 8007394:	3202      	adds	r2, #2
 8007396:	0092      	lsls	r2, r2, #2
 8007398:	f105 010c 	add.w	r1, r5, #12
 800739c:	300c      	adds	r0, #12
 800739e:	f7ff fa92 	bl	80068c6 <memcpy>
 80073a2:	2201      	movs	r2, #1
 80073a4:	4631      	mov	r1, r6
 80073a6:	4658      	mov	r0, fp
 80073a8:	f000 fee8 	bl	800817c <__lshift>
 80073ac:	f10a 0301 	add.w	r3, sl, #1
 80073b0:	9307      	str	r3, [sp, #28]
 80073b2:	9b00      	ldr	r3, [sp, #0]
 80073b4:	4453      	add	r3, sl
 80073b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073b8:	9b02      	ldr	r3, [sp, #8]
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	462f      	mov	r7, r5
 80073c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80073c2:	4605      	mov	r5, r0
 80073c4:	9b07      	ldr	r3, [sp, #28]
 80073c6:	4621      	mov	r1, r4
 80073c8:	3b01      	subs	r3, #1
 80073ca:	4648      	mov	r0, r9
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	f7ff fa99 	bl	8006904 <quorem>
 80073d2:	4639      	mov	r1, r7
 80073d4:	9002      	str	r0, [sp, #8]
 80073d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80073da:	4648      	mov	r0, r9
 80073dc:	f000 ff3a 	bl	8008254 <__mcmp>
 80073e0:	462a      	mov	r2, r5
 80073e2:	9008      	str	r0, [sp, #32]
 80073e4:	4621      	mov	r1, r4
 80073e6:	4658      	mov	r0, fp
 80073e8:	f000 ff50 	bl	800828c <__mdiff>
 80073ec:	68c2      	ldr	r2, [r0, #12]
 80073ee:	4606      	mov	r6, r0
 80073f0:	bb02      	cbnz	r2, 8007434 <_dtoa_r+0xa1c>
 80073f2:	4601      	mov	r1, r0
 80073f4:	4648      	mov	r0, r9
 80073f6:	f000 ff2d 	bl	8008254 <__mcmp>
 80073fa:	4602      	mov	r2, r0
 80073fc:	4631      	mov	r1, r6
 80073fe:	4658      	mov	r0, fp
 8007400:	920e      	str	r2, [sp, #56]	@ 0x38
 8007402:	f000 fca3 	bl	8007d4c <_Bfree>
 8007406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007408:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800740a:	9e07      	ldr	r6, [sp, #28]
 800740c:	ea43 0102 	orr.w	r1, r3, r2
 8007410:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007412:	4319      	orrs	r1, r3
 8007414:	d110      	bne.n	8007438 <_dtoa_r+0xa20>
 8007416:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800741a:	d029      	beq.n	8007470 <_dtoa_r+0xa58>
 800741c:	9b08      	ldr	r3, [sp, #32]
 800741e:	2b00      	cmp	r3, #0
 8007420:	dd02      	ble.n	8007428 <_dtoa_r+0xa10>
 8007422:	9b02      	ldr	r3, [sp, #8]
 8007424:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007428:	9b00      	ldr	r3, [sp, #0]
 800742a:	f883 8000 	strb.w	r8, [r3]
 800742e:	e63f      	b.n	80070b0 <_dtoa_r+0x698>
 8007430:	4628      	mov	r0, r5
 8007432:	e7bb      	b.n	80073ac <_dtoa_r+0x994>
 8007434:	2201      	movs	r2, #1
 8007436:	e7e1      	b.n	80073fc <_dtoa_r+0x9e4>
 8007438:	9b08      	ldr	r3, [sp, #32]
 800743a:	2b00      	cmp	r3, #0
 800743c:	db04      	blt.n	8007448 <_dtoa_r+0xa30>
 800743e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007440:	430b      	orrs	r3, r1
 8007442:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007444:	430b      	orrs	r3, r1
 8007446:	d120      	bne.n	800748a <_dtoa_r+0xa72>
 8007448:	2a00      	cmp	r2, #0
 800744a:	dded      	ble.n	8007428 <_dtoa_r+0xa10>
 800744c:	4649      	mov	r1, r9
 800744e:	2201      	movs	r2, #1
 8007450:	4658      	mov	r0, fp
 8007452:	f000 fe93 	bl	800817c <__lshift>
 8007456:	4621      	mov	r1, r4
 8007458:	4681      	mov	r9, r0
 800745a:	f000 fefb 	bl	8008254 <__mcmp>
 800745e:	2800      	cmp	r0, #0
 8007460:	dc03      	bgt.n	800746a <_dtoa_r+0xa52>
 8007462:	d1e1      	bne.n	8007428 <_dtoa_r+0xa10>
 8007464:	f018 0f01 	tst.w	r8, #1
 8007468:	d0de      	beq.n	8007428 <_dtoa_r+0xa10>
 800746a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800746e:	d1d8      	bne.n	8007422 <_dtoa_r+0xa0a>
 8007470:	9a00      	ldr	r2, [sp, #0]
 8007472:	2339      	movs	r3, #57	@ 0x39
 8007474:	7013      	strb	r3, [r2, #0]
 8007476:	4633      	mov	r3, r6
 8007478:	461e      	mov	r6, r3
 800747a:	3b01      	subs	r3, #1
 800747c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007480:	2a39      	cmp	r2, #57	@ 0x39
 8007482:	d052      	beq.n	800752a <_dtoa_r+0xb12>
 8007484:	3201      	adds	r2, #1
 8007486:	701a      	strb	r2, [r3, #0]
 8007488:	e612      	b.n	80070b0 <_dtoa_r+0x698>
 800748a:	2a00      	cmp	r2, #0
 800748c:	dd07      	ble.n	800749e <_dtoa_r+0xa86>
 800748e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007492:	d0ed      	beq.n	8007470 <_dtoa_r+0xa58>
 8007494:	9a00      	ldr	r2, [sp, #0]
 8007496:	f108 0301 	add.w	r3, r8, #1
 800749a:	7013      	strb	r3, [r2, #0]
 800749c:	e608      	b.n	80070b0 <_dtoa_r+0x698>
 800749e:	9b07      	ldr	r3, [sp, #28]
 80074a0:	9a07      	ldr	r2, [sp, #28]
 80074a2:	f803 8c01 	strb.w	r8, [r3, #-1]
 80074a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d028      	beq.n	80074fe <_dtoa_r+0xae6>
 80074ac:	4649      	mov	r1, r9
 80074ae:	2300      	movs	r3, #0
 80074b0:	220a      	movs	r2, #10
 80074b2:	4658      	mov	r0, fp
 80074b4:	f000 fc6c 	bl	8007d90 <__multadd>
 80074b8:	42af      	cmp	r7, r5
 80074ba:	4681      	mov	r9, r0
 80074bc:	f04f 0300 	mov.w	r3, #0
 80074c0:	f04f 020a 	mov.w	r2, #10
 80074c4:	4639      	mov	r1, r7
 80074c6:	4658      	mov	r0, fp
 80074c8:	d107      	bne.n	80074da <_dtoa_r+0xac2>
 80074ca:	f000 fc61 	bl	8007d90 <__multadd>
 80074ce:	4607      	mov	r7, r0
 80074d0:	4605      	mov	r5, r0
 80074d2:	9b07      	ldr	r3, [sp, #28]
 80074d4:	3301      	adds	r3, #1
 80074d6:	9307      	str	r3, [sp, #28]
 80074d8:	e774      	b.n	80073c4 <_dtoa_r+0x9ac>
 80074da:	f000 fc59 	bl	8007d90 <__multadd>
 80074de:	4629      	mov	r1, r5
 80074e0:	4607      	mov	r7, r0
 80074e2:	2300      	movs	r3, #0
 80074e4:	220a      	movs	r2, #10
 80074e6:	4658      	mov	r0, fp
 80074e8:	f000 fc52 	bl	8007d90 <__multadd>
 80074ec:	4605      	mov	r5, r0
 80074ee:	e7f0      	b.n	80074d2 <_dtoa_r+0xaba>
 80074f0:	9b00      	ldr	r3, [sp, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	bfcc      	ite	gt
 80074f6:	461e      	movgt	r6, r3
 80074f8:	2601      	movle	r6, #1
 80074fa:	4456      	add	r6, sl
 80074fc:	2700      	movs	r7, #0
 80074fe:	4649      	mov	r1, r9
 8007500:	2201      	movs	r2, #1
 8007502:	4658      	mov	r0, fp
 8007504:	f000 fe3a 	bl	800817c <__lshift>
 8007508:	4621      	mov	r1, r4
 800750a:	4681      	mov	r9, r0
 800750c:	f000 fea2 	bl	8008254 <__mcmp>
 8007510:	2800      	cmp	r0, #0
 8007512:	dcb0      	bgt.n	8007476 <_dtoa_r+0xa5e>
 8007514:	d102      	bne.n	800751c <_dtoa_r+0xb04>
 8007516:	f018 0f01 	tst.w	r8, #1
 800751a:	d1ac      	bne.n	8007476 <_dtoa_r+0xa5e>
 800751c:	4633      	mov	r3, r6
 800751e:	461e      	mov	r6, r3
 8007520:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007524:	2a30      	cmp	r2, #48	@ 0x30
 8007526:	d0fa      	beq.n	800751e <_dtoa_r+0xb06>
 8007528:	e5c2      	b.n	80070b0 <_dtoa_r+0x698>
 800752a:	459a      	cmp	sl, r3
 800752c:	d1a4      	bne.n	8007478 <_dtoa_r+0xa60>
 800752e:	9b04      	ldr	r3, [sp, #16]
 8007530:	3301      	adds	r3, #1
 8007532:	9304      	str	r3, [sp, #16]
 8007534:	2331      	movs	r3, #49	@ 0x31
 8007536:	f88a 3000 	strb.w	r3, [sl]
 800753a:	e5b9      	b.n	80070b0 <_dtoa_r+0x698>
 800753c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800753e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800759c <_dtoa_r+0xb84>
 8007542:	b11b      	cbz	r3, 800754c <_dtoa_r+0xb34>
 8007544:	f10a 0308 	add.w	r3, sl, #8
 8007548:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800754a:	6013      	str	r3, [r2, #0]
 800754c:	4650      	mov	r0, sl
 800754e:	b019      	add	sp, #100	@ 0x64
 8007550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007556:	2b01      	cmp	r3, #1
 8007558:	f77f ae37 	ble.w	80071ca <_dtoa_r+0x7b2>
 800755c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800755e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007560:	2001      	movs	r0, #1
 8007562:	e655      	b.n	8007210 <_dtoa_r+0x7f8>
 8007564:	9b00      	ldr	r3, [sp, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	f77f aed6 	ble.w	8007318 <_dtoa_r+0x900>
 800756c:	4656      	mov	r6, sl
 800756e:	4621      	mov	r1, r4
 8007570:	4648      	mov	r0, r9
 8007572:	f7ff f9c7 	bl	8006904 <quorem>
 8007576:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800757a:	f806 8b01 	strb.w	r8, [r6], #1
 800757e:	9b00      	ldr	r3, [sp, #0]
 8007580:	eba6 020a 	sub.w	r2, r6, sl
 8007584:	4293      	cmp	r3, r2
 8007586:	ddb3      	ble.n	80074f0 <_dtoa_r+0xad8>
 8007588:	4649      	mov	r1, r9
 800758a:	2300      	movs	r3, #0
 800758c:	220a      	movs	r2, #10
 800758e:	4658      	mov	r0, fp
 8007590:	f000 fbfe 	bl	8007d90 <__multadd>
 8007594:	4681      	mov	r9, r0
 8007596:	e7ea      	b.n	800756e <_dtoa_r+0xb56>
 8007598:	0800e22d 	.word	0x0800e22d
 800759c:	0800e1b1 	.word	0x0800e1b1

080075a0 <_free_r>:
 80075a0:	b538      	push	{r3, r4, r5, lr}
 80075a2:	4605      	mov	r5, r0
 80075a4:	2900      	cmp	r1, #0
 80075a6:	d041      	beq.n	800762c <_free_r+0x8c>
 80075a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075ac:	1f0c      	subs	r4, r1, #4
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	bfb8      	it	lt
 80075b2:	18e4      	addlt	r4, r4, r3
 80075b4:	f7fd faec 	bl	8004b90 <__malloc_lock>
 80075b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007630 <_free_r+0x90>)
 80075ba:	6813      	ldr	r3, [r2, #0]
 80075bc:	b933      	cbnz	r3, 80075cc <_free_r+0x2c>
 80075be:	6063      	str	r3, [r4, #4]
 80075c0:	6014      	str	r4, [r2, #0]
 80075c2:	4628      	mov	r0, r5
 80075c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075c8:	f7fd bae8 	b.w	8004b9c <__malloc_unlock>
 80075cc:	42a3      	cmp	r3, r4
 80075ce:	d908      	bls.n	80075e2 <_free_r+0x42>
 80075d0:	6820      	ldr	r0, [r4, #0]
 80075d2:	1821      	adds	r1, r4, r0
 80075d4:	428b      	cmp	r3, r1
 80075d6:	bf01      	itttt	eq
 80075d8:	6819      	ldreq	r1, [r3, #0]
 80075da:	685b      	ldreq	r3, [r3, #4]
 80075dc:	1809      	addeq	r1, r1, r0
 80075de:	6021      	streq	r1, [r4, #0]
 80075e0:	e7ed      	b.n	80075be <_free_r+0x1e>
 80075e2:	461a      	mov	r2, r3
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	b10b      	cbz	r3, 80075ec <_free_r+0x4c>
 80075e8:	42a3      	cmp	r3, r4
 80075ea:	d9fa      	bls.n	80075e2 <_free_r+0x42>
 80075ec:	6811      	ldr	r1, [r2, #0]
 80075ee:	1850      	adds	r0, r2, r1
 80075f0:	42a0      	cmp	r0, r4
 80075f2:	d10b      	bne.n	800760c <_free_r+0x6c>
 80075f4:	6820      	ldr	r0, [r4, #0]
 80075f6:	4401      	add	r1, r0
 80075f8:	1850      	adds	r0, r2, r1
 80075fa:	4283      	cmp	r3, r0
 80075fc:	6011      	str	r1, [r2, #0]
 80075fe:	d1e0      	bne.n	80075c2 <_free_r+0x22>
 8007600:	6818      	ldr	r0, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	6053      	str	r3, [r2, #4]
 8007606:	4408      	add	r0, r1
 8007608:	6010      	str	r0, [r2, #0]
 800760a:	e7da      	b.n	80075c2 <_free_r+0x22>
 800760c:	d902      	bls.n	8007614 <_free_r+0x74>
 800760e:	230c      	movs	r3, #12
 8007610:	602b      	str	r3, [r5, #0]
 8007612:	e7d6      	b.n	80075c2 <_free_r+0x22>
 8007614:	6820      	ldr	r0, [r4, #0]
 8007616:	1821      	adds	r1, r4, r0
 8007618:	428b      	cmp	r3, r1
 800761a:	bf04      	itt	eq
 800761c:	6819      	ldreq	r1, [r3, #0]
 800761e:	685b      	ldreq	r3, [r3, #4]
 8007620:	6063      	str	r3, [r4, #4]
 8007622:	bf04      	itt	eq
 8007624:	1809      	addeq	r1, r1, r0
 8007626:	6021      	streq	r1, [r4, #0]
 8007628:	6054      	str	r4, [r2, #4]
 800762a:	e7ca      	b.n	80075c2 <_free_r+0x22>
 800762c:	bd38      	pop	{r3, r4, r5, pc}
 800762e:	bf00      	nop
 8007630:	20000a68 	.word	0x20000a68

08007634 <rshift>:
 8007634:	6903      	ldr	r3, [r0, #16]
 8007636:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800763a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800763e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007642:	f100 0414 	add.w	r4, r0, #20
 8007646:	dd45      	ble.n	80076d4 <rshift+0xa0>
 8007648:	f011 011f 	ands.w	r1, r1, #31
 800764c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007650:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007654:	d10c      	bne.n	8007670 <rshift+0x3c>
 8007656:	f100 0710 	add.w	r7, r0, #16
 800765a:	4629      	mov	r1, r5
 800765c:	42b1      	cmp	r1, r6
 800765e:	d334      	bcc.n	80076ca <rshift+0x96>
 8007660:	1a9b      	subs	r3, r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	1eea      	subs	r2, r5, #3
 8007666:	4296      	cmp	r6, r2
 8007668:	bf38      	it	cc
 800766a:	2300      	movcc	r3, #0
 800766c:	4423      	add	r3, r4
 800766e:	e015      	b.n	800769c <rshift+0x68>
 8007670:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007674:	f1c1 0820 	rsb	r8, r1, #32
 8007678:	40cf      	lsrs	r7, r1
 800767a:	f105 0e04 	add.w	lr, r5, #4
 800767e:	46a1      	mov	r9, r4
 8007680:	4576      	cmp	r6, lr
 8007682:	46f4      	mov	ip, lr
 8007684:	d815      	bhi.n	80076b2 <rshift+0x7e>
 8007686:	1a9a      	subs	r2, r3, r2
 8007688:	0092      	lsls	r2, r2, #2
 800768a:	3a04      	subs	r2, #4
 800768c:	3501      	adds	r5, #1
 800768e:	42ae      	cmp	r6, r5
 8007690:	bf38      	it	cc
 8007692:	2200      	movcc	r2, #0
 8007694:	18a3      	adds	r3, r4, r2
 8007696:	50a7      	str	r7, [r4, r2]
 8007698:	b107      	cbz	r7, 800769c <rshift+0x68>
 800769a:	3304      	adds	r3, #4
 800769c:	1b1a      	subs	r2, r3, r4
 800769e:	42a3      	cmp	r3, r4
 80076a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80076a4:	bf08      	it	eq
 80076a6:	2300      	moveq	r3, #0
 80076a8:	6102      	str	r2, [r0, #16]
 80076aa:	bf08      	it	eq
 80076ac:	6143      	streq	r3, [r0, #20]
 80076ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076b2:	f8dc c000 	ldr.w	ip, [ip]
 80076b6:	fa0c fc08 	lsl.w	ip, ip, r8
 80076ba:	ea4c 0707 	orr.w	r7, ip, r7
 80076be:	f849 7b04 	str.w	r7, [r9], #4
 80076c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80076c6:	40cf      	lsrs	r7, r1
 80076c8:	e7da      	b.n	8007680 <rshift+0x4c>
 80076ca:	f851 cb04 	ldr.w	ip, [r1], #4
 80076ce:	f847 cf04 	str.w	ip, [r7, #4]!
 80076d2:	e7c3      	b.n	800765c <rshift+0x28>
 80076d4:	4623      	mov	r3, r4
 80076d6:	e7e1      	b.n	800769c <rshift+0x68>

080076d8 <__hexdig_fun>:
 80076d8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80076dc:	2b09      	cmp	r3, #9
 80076de:	d802      	bhi.n	80076e6 <__hexdig_fun+0xe>
 80076e0:	3820      	subs	r0, #32
 80076e2:	b2c0      	uxtb	r0, r0
 80076e4:	4770      	bx	lr
 80076e6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80076ea:	2b05      	cmp	r3, #5
 80076ec:	d801      	bhi.n	80076f2 <__hexdig_fun+0x1a>
 80076ee:	3847      	subs	r0, #71	@ 0x47
 80076f0:	e7f7      	b.n	80076e2 <__hexdig_fun+0xa>
 80076f2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80076f6:	2b05      	cmp	r3, #5
 80076f8:	d801      	bhi.n	80076fe <__hexdig_fun+0x26>
 80076fa:	3827      	subs	r0, #39	@ 0x27
 80076fc:	e7f1      	b.n	80076e2 <__hexdig_fun+0xa>
 80076fe:	2000      	movs	r0, #0
 8007700:	4770      	bx	lr
	...

08007704 <__gethex>:
 8007704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007708:	b085      	sub	sp, #20
 800770a:	468a      	mov	sl, r1
 800770c:	9302      	str	r3, [sp, #8]
 800770e:	680b      	ldr	r3, [r1, #0]
 8007710:	9001      	str	r0, [sp, #4]
 8007712:	4690      	mov	r8, r2
 8007714:	1c9c      	adds	r4, r3, #2
 8007716:	46a1      	mov	r9, r4
 8007718:	f814 0b01 	ldrb.w	r0, [r4], #1
 800771c:	2830      	cmp	r0, #48	@ 0x30
 800771e:	d0fa      	beq.n	8007716 <__gethex+0x12>
 8007720:	eba9 0303 	sub.w	r3, r9, r3
 8007724:	f1a3 0b02 	sub.w	fp, r3, #2
 8007728:	f7ff ffd6 	bl	80076d8 <__hexdig_fun>
 800772c:	4605      	mov	r5, r0
 800772e:	2800      	cmp	r0, #0
 8007730:	d168      	bne.n	8007804 <__gethex+0x100>
 8007732:	49a0      	ldr	r1, [pc, #640]	@ (80079b4 <__gethex+0x2b0>)
 8007734:	2201      	movs	r2, #1
 8007736:	4648      	mov	r0, r9
 8007738:	f7ff f801 	bl	800673e <strncmp>
 800773c:	4607      	mov	r7, r0
 800773e:	2800      	cmp	r0, #0
 8007740:	d167      	bne.n	8007812 <__gethex+0x10e>
 8007742:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007746:	4626      	mov	r6, r4
 8007748:	f7ff ffc6 	bl	80076d8 <__hexdig_fun>
 800774c:	2800      	cmp	r0, #0
 800774e:	d062      	beq.n	8007816 <__gethex+0x112>
 8007750:	4623      	mov	r3, r4
 8007752:	7818      	ldrb	r0, [r3, #0]
 8007754:	2830      	cmp	r0, #48	@ 0x30
 8007756:	4699      	mov	r9, r3
 8007758:	f103 0301 	add.w	r3, r3, #1
 800775c:	d0f9      	beq.n	8007752 <__gethex+0x4e>
 800775e:	f7ff ffbb 	bl	80076d8 <__hexdig_fun>
 8007762:	fab0 f580 	clz	r5, r0
 8007766:	096d      	lsrs	r5, r5, #5
 8007768:	f04f 0b01 	mov.w	fp, #1
 800776c:	464a      	mov	r2, r9
 800776e:	4616      	mov	r6, r2
 8007770:	3201      	adds	r2, #1
 8007772:	7830      	ldrb	r0, [r6, #0]
 8007774:	f7ff ffb0 	bl	80076d8 <__hexdig_fun>
 8007778:	2800      	cmp	r0, #0
 800777a:	d1f8      	bne.n	800776e <__gethex+0x6a>
 800777c:	498d      	ldr	r1, [pc, #564]	@ (80079b4 <__gethex+0x2b0>)
 800777e:	2201      	movs	r2, #1
 8007780:	4630      	mov	r0, r6
 8007782:	f7fe ffdc 	bl	800673e <strncmp>
 8007786:	2800      	cmp	r0, #0
 8007788:	d13f      	bne.n	800780a <__gethex+0x106>
 800778a:	b944      	cbnz	r4, 800779e <__gethex+0x9a>
 800778c:	1c74      	adds	r4, r6, #1
 800778e:	4622      	mov	r2, r4
 8007790:	4616      	mov	r6, r2
 8007792:	3201      	adds	r2, #1
 8007794:	7830      	ldrb	r0, [r6, #0]
 8007796:	f7ff ff9f 	bl	80076d8 <__hexdig_fun>
 800779a:	2800      	cmp	r0, #0
 800779c:	d1f8      	bne.n	8007790 <__gethex+0x8c>
 800779e:	1ba4      	subs	r4, r4, r6
 80077a0:	00a7      	lsls	r7, r4, #2
 80077a2:	7833      	ldrb	r3, [r6, #0]
 80077a4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80077a8:	2b50      	cmp	r3, #80	@ 0x50
 80077aa:	d13e      	bne.n	800782a <__gethex+0x126>
 80077ac:	7873      	ldrb	r3, [r6, #1]
 80077ae:	2b2b      	cmp	r3, #43	@ 0x2b
 80077b0:	d033      	beq.n	800781a <__gethex+0x116>
 80077b2:	2b2d      	cmp	r3, #45	@ 0x2d
 80077b4:	d034      	beq.n	8007820 <__gethex+0x11c>
 80077b6:	1c71      	adds	r1, r6, #1
 80077b8:	2400      	movs	r4, #0
 80077ba:	7808      	ldrb	r0, [r1, #0]
 80077bc:	f7ff ff8c 	bl	80076d8 <__hexdig_fun>
 80077c0:	1e43      	subs	r3, r0, #1
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b18      	cmp	r3, #24
 80077c6:	d830      	bhi.n	800782a <__gethex+0x126>
 80077c8:	f1a0 0210 	sub.w	r2, r0, #16
 80077cc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80077d0:	f7ff ff82 	bl	80076d8 <__hexdig_fun>
 80077d4:	f100 3cff 	add.w	ip, r0, #4294967295
 80077d8:	fa5f fc8c 	uxtb.w	ip, ip
 80077dc:	f1bc 0f18 	cmp.w	ip, #24
 80077e0:	f04f 030a 	mov.w	r3, #10
 80077e4:	d91e      	bls.n	8007824 <__gethex+0x120>
 80077e6:	b104      	cbz	r4, 80077ea <__gethex+0xe6>
 80077e8:	4252      	negs	r2, r2
 80077ea:	4417      	add	r7, r2
 80077ec:	f8ca 1000 	str.w	r1, [sl]
 80077f0:	b1ed      	cbz	r5, 800782e <__gethex+0x12a>
 80077f2:	f1bb 0f00 	cmp.w	fp, #0
 80077f6:	bf0c      	ite	eq
 80077f8:	2506      	moveq	r5, #6
 80077fa:	2500      	movne	r5, #0
 80077fc:	4628      	mov	r0, r5
 80077fe:	b005      	add	sp, #20
 8007800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007804:	2500      	movs	r5, #0
 8007806:	462c      	mov	r4, r5
 8007808:	e7b0      	b.n	800776c <__gethex+0x68>
 800780a:	2c00      	cmp	r4, #0
 800780c:	d1c7      	bne.n	800779e <__gethex+0x9a>
 800780e:	4627      	mov	r7, r4
 8007810:	e7c7      	b.n	80077a2 <__gethex+0x9e>
 8007812:	464e      	mov	r6, r9
 8007814:	462f      	mov	r7, r5
 8007816:	2501      	movs	r5, #1
 8007818:	e7c3      	b.n	80077a2 <__gethex+0x9e>
 800781a:	2400      	movs	r4, #0
 800781c:	1cb1      	adds	r1, r6, #2
 800781e:	e7cc      	b.n	80077ba <__gethex+0xb6>
 8007820:	2401      	movs	r4, #1
 8007822:	e7fb      	b.n	800781c <__gethex+0x118>
 8007824:	fb03 0002 	mla	r0, r3, r2, r0
 8007828:	e7ce      	b.n	80077c8 <__gethex+0xc4>
 800782a:	4631      	mov	r1, r6
 800782c:	e7de      	b.n	80077ec <__gethex+0xe8>
 800782e:	eba6 0309 	sub.w	r3, r6, r9
 8007832:	3b01      	subs	r3, #1
 8007834:	4629      	mov	r1, r5
 8007836:	2b07      	cmp	r3, #7
 8007838:	dc0a      	bgt.n	8007850 <__gethex+0x14c>
 800783a:	9801      	ldr	r0, [sp, #4]
 800783c:	f000 fa46 	bl	8007ccc <_Balloc>
 8007840:	4604      	mov	r4, r0
 8007842:	b940      	cbnz	r0, 8007856 <__gethex+0x152>
 8007844:	4b5c      	ldr	r3, [pc, #368]	@ (80079b8 <__gethex+0x2b4>)
 8007846:	4602      	mov	r2, r0
 8007848:	21e4      	movs	r1, #228	@ 0xe4
 800784a:	485c      	ldr	r0, [pc, #368]	@ (80079bc <__gethex+0x2b8>)
 800784c:	f001 f996 	bl	8008b7c <__assert_func>
 8007850:	3101      	adds	r1, #1
 8007852:	105b      	asrs	r3, r3, #1
 8007854:	e7ef      	b.n	8007836 <__gethex+0x132>
 8007856:	f100 0a14 	add.w	sl, r0, #20
 800785a:	2300      	movs	r3, #0
 800785c:	4655      	mov	r5, sl
 800785e:	469b      	mov	fp, r3
 8007860:	45b1      	cmp	r9, r6
 8007862:	d337      	bcc.n	80078d4 <__gethex+0x1d0>
 8007864:	f845 bb04 	str.w	fp, [r5], #4
 8007868:	eba5 050a 	sub.w	r5, r5, sl
 800786c:	10ad      	asrs	r5, r5, #2
 800786e:	6125      	str	r5, [r4, #16]
 8007870:	4658      	mov	r0, fp
 8007872:	f000 fb1d 	bl	8007eb0 <__hi0bits>
 8007876:	016d      	lsls	r5, r5, #5
 8007878:	f8d8 6000 	ldr.w	r6, [r8]
 800787c:	1a2d      	subs	r5, r5, r0
 800787e:	42b5      	cmp	r5, r6
 8007880:	dd54      	ble.n	800792c <__gethex+0x228>
 8007882:	1bad      	subs	r5, r5, r6
 8007884:	4629      	mov	r1, r5
 8007886:	4620      	mov	r0, r4
 8007888:	f000 feb1 	bl	80085ee <__any_on>
 800788c:	4681      	mov	r9, r0
 800788e:	b178      	cbz	r0, 80078b0 <__gethex+0x1ac>
 8007890:	1e6b      	subs	r3, r5, #1
 8007892:	1159      	asrs	r1, r3, #5
 8007894:	f003 021f 	and.w	r2, r3, #31
 8007898:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800789c:	f04f 0901 	mov.w	r9, #1
 80078a0:	fa09 f202 	lsl.w	r2, r9, r2
 80078a4:	420a      	tst	r2, r1
 80078a6:	d003      	beq.n	80078b0 <__gethex+0x1ac>
 80078a8:	454b      	cmp	r3, r9
 80078aa:	dc36      	bgt.n	800791a <__gethex+0x216>
 80078ac:	f04f 0902 	mov.w	r9, #2
 80078b0:	4629      	mov	r1, r5
 80078b2:	4620      	mov	r0, r4
 80078b4:	f7ff febe 	bl	8007634 <rshift>
 80078b8:	442f      	add	r7, r5
 80078ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80078be:	42bb      	cmp	r3, r7
 80078c0:	da42      	bge.n	8007948 <__gethex+0x244>
 80078c2:	9801      	ldr	r0, [sp, #4]
 80078c4:	4621      	mov	r1, r4
 80078c6:	f000 fa41 	bl	8007d4c <_Bfree>
 80078ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078cc:	2300      	movs	r3, #0
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	25a3      	movs	r5, #163	@ 0xa3
 80078d2:	e793      	b.n	80077fc <__gethex+0xf8>
 80078d4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80078d8:	2a2e      	cmp	r2, #46	@ 0x2e
 80078da:	d012      	beq.n	8007902 <__gethex+0x1fe>
 80078dc:	2b20      	cmp	r3, #32
 80078de:	d104      	bne.n	80078ea <__gethex+0x1e6>
 80078e0:	f845 bb04 	str.w	fp, [r5], #4
 80078e4:	f04f 0b00 	mov.w	fp, #0
 80078e8:	465b      	mov	r3, fp
 80078ea:	7830      	ldrb	r0, [r6, #0]
 80078ec:	9303      	str	r3, [sp, #12]
 80078ee:	f7ff fef3 	bl	80076d8 <__hexdig_fun>
 80078f2:	9b03      	ldr	r3, [sp, #12]
 80078f4:	f000 000f 	and.w	r0, r0, #15
 80078f8:	4098      	lsls	r0, r3
 80078fa:	ea4b 0b00 	orr.w	fp, fp, r0
 80078fe:	3304      	adds	r3, #4
 8007900:	e7ae      	b.n	8007860 <__gethex+0x15c>
 8007902:	45b1      	cmp	r9, r6
 8007904:	d8ea      	bhi.n	80078dc <__gethex+0x1d8>
 8007906:	492b      	ldr	r1, [pc, #172]	@ (80079b4 <__gethex+0x2b0>)
 8007908:	9303      	str	r3, [sp, #12]
 800790a:	2201      	movs	r2, #1
 800790c:	4630      	mov	r0, r6
 800790e:	f7fe ff16 	bl	800673e <strncmp>
 8007912:	9b03      	ldr	r3, [sp, #12]
 8007914:	2800      	cmp	r0, #0
 8007916:	d1e1      	bne.n	80078dc <__gethex+0x1d8>
 8007918:	e7a2      	b.n	8007860 <__gethex+0x15c>
 800791a:	1ea9      	subs	r1, r5, #2
 800791c:	4620      	mov	r0, r4
 800791e:	f000 fe66 	bl	80085ee <__any_on>
 8007922:	2800      	cmp	r0, #0
 8007924:	d0c2      	beq.n	80078ac <__gethex+0x1a8>
 8007926:	f04f 0903 	mov.w	r9, #3
 800792a:	e7c1      	b.n	80078b0 <__gethex+0x1ac>
 800792c:	da09      	bge.n	8007942 <__gethex+0x23e>
 800792e:	1b75      	subs	r5, r6, r5
 8007930:	4621      	mov	r1, r4
 8007932:	9801      	ldr	r0, [sp, #4]
 8007934:	462a      	mov	r2, r5
 8007936:	f000 fc21 	bl	800817c <__lshift>
 800793a:	1b7f      	subs	r7, r7, r5
 800793c:	4604      	mov	r4, r0
 800793e:	f100 0a14 	add.w	sl, r0, #20
 8007942:	f04f 0900 	mov.w	r9, #0
 8007946:	e7b8      	b.n	80078ba <__gethex+0x1b6>
 8007948:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800794c:	42bd      	cmp	r5, r7
 800794e:	dd6f      	ble.n	8007a30 <__gethex+0x32c>
 8007950:	1bed      	subs	r5, r5, r7
 8007952:	42ae      	cmp	r6, r5
 8007954:	dc34      	bgt.n	80079c0 <__gethex+0x2bc>
 8007956:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800795a:	2b02      	cmp	r3, #2
 800795c:	d022      	beq.n	80079a4 <__gethex+0x2a0>
 800795e:	2b03      	cmp	r3, #3
 8007960:	d024      	beq.n	80079ac <__gethex+0x2a8>
 8007962:	2b01      	cmp	r3, #1
 8007964:	d115      	bne.n	8007992 <__gethex+0x28e>
 8007966:	42ae      	cmp	r6, r5
 8007968:	d113      	bne.n	8007992 <__gethex+0x28e>
 800796a:	2e01      	cmp	r6, #1
 800796c:	d10b      	bne.n	8007986 <__gethex+0x282>
 800796e:	9a02      	ldr	r2, [sp, #8]
 8007970:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	2301      	movs	r3, #1
 8007978:	6123      	str	r3, [r4, #16]
 800797a:	f8ca 3000 	str.w	r3, [sl]
 800797e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007980:	2562      	movs	r5, #98	@ 0x62
 8007982:	601c      	str	r4, [r3, #0]
 8007984:	e73a      	b.n	80077fc <__gethex+0xf8>
 8007986:	1e71      	subs	r1, r6, #1
 8007988:	4620      	mov	r0, r4
 800798a:	f000 fe30 	bl	80085ee <__any_on>
 800798e:	2800      	cmp	r0, #0
 8007990:	d1ed      	bne.n	800796e <__gethex+0x26a>
 8007992:	9801      	ldr	r0, [sp, #4]
 8007994:	4621      	mov	r1, r4
 8007996:	f000 f9d9 	bl	8007d4c <_Bfree>
 800799a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800799c:	2300      	movs	r3, #0
 800799e:	6013      	str	r3, [r2, #0]
 80079a0:	2550      	movs	r5, #80	@ 0x50
 80079a2:	e72b      	b.n	80077fc <__gethex+0xf8>
 80079a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1f3      	bne.n	8007992 <__gethex+0x28e>
 80079aa:	e7e0      	b.n	800796e <__gethex+0x26a>
 80079ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d1dd      	bne.n	800796e <__gethex+0x26a>
 80079b2:	e7ee      	b.n	8007992 <__gethex+0x28e>
 80079b4:	0800e11c 	.word	0x0800e11c
 80079b8:	0800e22d 	.word	0x0800e22d
 80079bc:	0800e23e 	.word	0x0800e23e
 80079c0:	1e6f      	subs	r7, r5, #1
 80079c2:	f1b9 0f00 	cmp.w	r9, #0
 80079c6:	d130      	bne.n	8007a2a <__gethex+0x326>
 80079c8:	b127      	cbz	r7, 80079d4 <__gethex+0x2d0>
 80079ca:	4639      	mov	r1, r7
 80079cc:	4620      	mov	r0, r4
 80079ce:	f000 fe0e 	bl	80085ee <__any_on>
 80079d2:	4681      	mov	r9, r0
 80079d4:	117a      	asrs	r2, r7, #5
 80079d6:	2301      	movs	r3, #1
 80079d8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80079dc:	f007 071f 	and.w	r7, r7, #31
 80079e0:	40bb      	lsls	r3, r7
 80079e2:	4213      	tst	r3, r2
 80079e4:	4629      	mov	r1, r5
 80079e6:	4620      	mov	r0, r4
 80079e8:	bf18      	it	ne
 80079ea:	f049 0902 	orrne.w	r9, r9, #2
 80079ee:	f7ff fe21 	bl	8007634 <rshift>
 80079f2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80079f6:	1b76      	subs	r6, r6, r5
 80079f8:	2502      	movs	r5, #2
 80079fa:	f1b9 0f00 	cmp.w	r9, #0
 80079fe:	d047      	beq.n	8007a90 <__gethex+0x38c>
 8007a00:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d015      	beq.n	8007a34 <__gethex+0x330>
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	d017      	beq.n	8007a3c <__gethex+0x338>
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d109      	bne.n	8007a24 <__gethex+0x320>
 8007a10:	f019 0f02 	tst.w	r9, #2
 8007a14:	d006      	beq.n	8007a24 <__gethex+0x320>
 8007a16:	f8da 3000 	ldr.w	r3, [sl]
 8007a1a:	ea49 0903 	orr.w	r9, r9, r3
 8007a1e:	f019 0f01 	tst.w	r9, #1
 8007a22:	d10e      	bne.n	8007a42 <__gethex+0x33e>
 8007a24:	f045 0510 	orr.w	r5, r5, #16
 8007a28:	e032      	b.n	8007a90 <__gethex+0x38c>
 8007a2a:	f04f 0901 	mov.w	r9, #1
 8007a2e:	e7d1      	b.n	80079d4 <__gethex+0x2d0>
 8007a30:	2501      	movs	r5, #1
 8007a32:	e7e2      	b.n	80079fa <__gethex+0x2f6>
 8007a34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a36:	f1c3 0301 	rsb	r3, r3, #1
 8007a3a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007a3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d0f0      	beq.n	8007a24 <__gethex+0x320>
 8007a42:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007a46:	f104 0314 	add.w	r3, r4, #20
 8007a4a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007a4e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007a52:	f04f 0c00 	mov.w	ip, #0
 8007a56:	4618      	mov	r0, r3
 8007a58:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a5c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007a60:	d01b      	beq.n	8007a9a <__gethex+0x396>
 8007a62:	3201      	adds	r2, #1
 8007a64:	6002      	str	r2, [r0, #0]
 8007a66:	2d02      	cmp	r5, #2
 8007a68:	f104 0314 	add.w	r3, r4, #20
 8007a6c:	d13c      	bne.n	8007ae8 <__gethex+0x3e4>
 8007a6e:	f8d8 2000 	ldr.w	r2, [r8]
 8007a72:	3a01      	subs	r2, #1
 8007a74:	42b2      	cmp	r2, r6
 8007a76:	d109      	bne.n	8007a8c <__gethex+0x388>
 8007a78:	1171      	asrs	r1, r6, #5
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007a80:	f006 061f 	and.w	r6, r6, #31
 8007a84:	fa02 f606 	lsl.w	r6, r2, r6
 8007a88:	421e      	tst	r6, r3
 8007a8a:	d13a      	bne.n	8007b02 <__gethex+0x3fe>
 8007a8c:	f045 0520 	orr.w	r5, r5, #32
 8007a90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a92:	601c      	str	r4, [r3, #0]
 8007a94:	9b02      	ldr	r3, [sp, #8]
 8007a96:	601f      	str	r7, [r3, #0]
 8007a98:	e6b0      	b.n	80077fc <__gethex+0xf8>
 8007a9a:	4299      	cmp	r1, r3
 8007a9c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007aa0:	d8d9      	bhi.n	8007a56 <__gethex+0x352>
 8007aa2:	68a3      	ldr	r3, [r4, #8]
 8007aa4:	459b      	cmp	fp, r3
 8007aa6:	db17      	blt.n	8007ad8 <__gethex+0x3d4>
 8007aa8:	6861      	ldr	r1, [r4, #4]
 8007aaa:	9801      	ldr	r0, [sp, #4]
 8007aac:	3101      	adds	r1, #1
 8007aae:	f000 f90d 	bl	8007ccc <_Balloc>
 8007ab2:	4681      	mov	r9, r0
 8007ab4:	b918      	cbnz	r0, 8007abe <__gethex+0x3ba>
 8007ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8007b20 <__gethex+0x41c>)
 8007ab8:	4602      	mov	r2, r0
 8007aba:	2184      	movs	r1, #132	@ 0x84
 8007abc:	e6c5      	b.n	800784a <__gethex+0x146>
 8007abe:	6922      	ldr	r2, [r4, #16]
 8007ac0:	3202      	adds	r2, #2
 8007ac2:	f104 010c 	add.w	r1, r4, #12
 8007ac6:	0092      	lsls	r2, r2, #2
 8007ac8:	300c      	adds	r0, #12
 8007aca:	f7fe fefc 	bl	80068c6 <memcpy>
 8007ace:	4621      	mov	r1, r4
 8007ad0:	9801      	ldr	r0, [sp, #4]
 8007ad2:	f000 f93b 	bl	8007d4c <_Bfree>
 8007ad6:	464c      	mov	r4, r9
 8007ad8:	6923      	ldr	r3, [r4, #16]
 8007ada:	1c5a      	adds	r2, r3, #1
 8007adc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ae0:	6122      	str	r2, [r4, #16]
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	615a      	str	r2, [r3, #20]
 8007ae6:	e7be      	b.n	8007a66 <__gethex+0x362>
 8007ae8:	6922      	ldr	r2, [r4, #16]
 8007aea:	455a      	cmp	r2, fp
 8007aec:	dd0b      	ble.n	8007b06 <__gethex+0x402>
 8007aee:	2101      	movs	r1, #1
 8007af0:	4620      	mov	r0, r4
 8007af2:	f7ff fd9f 	bl	8007634 <rshift>
 8007af6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007afa:	3701      	adds	r7, #1
 8007afc:	42bb      	cmp	r3, r7
 8007afe:	f6ff aee0 	blt.w	80078c2 <__gethex+0x1be>
 8007b02:	2501      	movs	r5, #1
 8007b04:	e7c2      	b.n	8007a8c <__gethex+0x388>
 8007b06:	f016 061f 	ands.w	r6, r6, #31
 8007b0a:	d0fa      	beq.n	8007b02 <__gethex+0x3fe>
 8007b0c:	4453      	add	r3, sl
 8007b0e:	f1c6 0620 	rsb	r6, r6, #32
 8007b12:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007b16:	f000 f9cb 	bl	8007eb0 <__hi0bits>
 8007b1a:	42b0      	cmp	r0, r6
 8007b1c:	dbe7      	blt.n	8007aee <__gethex+0x3ea>
 8007b1e:	e7f0      	b.n	8007b02 <__gethex+0x3fe>
 8007b20:	0800e22d 	.word	0x0800e22d

08007b24 <L_shift>:
 8007b24:	f1c2 0208 	rsb	r2, r2, #8
 8007b28:	0092      	lsls	r2, r2, #2
 8007b2a:	b570      	push	{r4, r5, r6, lr}
 8007b2c:	f1c2 0620 	rsb	r6, r2, #32
 8007b30:	6843      	ldr	r3, [r0, #4]
 8007b32:	6804      	ldr	r4, [r0, #0]
 8007b34:	fa03 f506 	lsl.w	r5, r3, r6
 8007b38:	432c      	orrs	r4, r5
 8007b3a:	40d3      	lsrs	r3, r2
 8007b3c:	6004      	str	r4, [r0, #0]
 8007b3e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007b42:	4288      	cmp	r0, r1
 8007b44:	d3f4      	bcc.n	8007b30 <L_shift+0xc>
 8007b46:	bd70      	pop	{r4, r5, r6, pc}

08007b48 <__match>:
 8007b48:	b530      	push	{r4, r5, lr}
 8007b4a:	6803      	ldr	r3, [r0, #0]
 8007b4c:	3301      	adds	r3, #1
 8007b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b52:	b914      	cbnz	r4, 8007b5a <__match+0x12>
 8007b54:	6003      	str	r3, [r0, #0]
 8007b56:	2001      	movs	r0, #1
 8007b58:	bd30      	pop	{r4, r5, pc}
 8007b5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b5e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007b62:	2d19      	cmp	r5, #25
 8007b64:	bf98      	it	ls
 8007b66:	3220      	addls	r2, #32
 8007b68:	42a2      	cmp	r2, r4
 8007b6a:	d0f0      	beq.n	8007b4e <__match+0x6>
 8007b6c:	2000      	movs	r0, #0
 8007b6e:	e7f3      	b.n	8007b58 <__match+0x10>

08007b70 <__hexnan>:
 8007b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b74:	680b      	ldr	r3, [r1, #0]
 8007b76:	6801      	ldr	r1, [r0, #0]
 8007b78:	115e      	asrs	r6, r3, #5
 8007b7a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007b7e:	f013 031f 	ands.w	r3, r3, #31
 8007b82:	b087      	sub	sp, #28
 8007b84:	bf18      	it	ne
 8007b86:	3604      	addne	r6, #4
 8007b88:	2500      	movs	r5, #0
 8007b8a:	1f37      	subs	r7, r6, #4
 8007b8c:	4682      	mov	sl, r0
 8007b8e:	4690      	mov	r8, r2
 8007b90:	9301      	str	r3, [sp, #4]
 8007b92:	f846 5c04 	str.w	r5, [r6, #-4]
 8007b96:	46b9      	mov	r9, r7
 8007b98:	463c      	mov	r4, r7
 8007b9a:	9502      	str	r5, [sp, #8]
 8007b9c:	46ab      	mov	fp, r5
 8007b9e:	784a      	ldrb	r2, [r1, #1]
 8007ba0:	1c4b      	adds	r3, r1, #1
 8007ba2:	9303      	str	r3, [sp, #12]
 8007ba4:	b342      	cbz	r2, 8007bf8 <__hexnan+0x88>
 8007ba6:	4610      	mov	r0, r2
 8007ba8:	9105      	str	r1, [sp, #20]
 8007baa:	9204      	str	r2, [sp, #16]
 8007bac:	f7ff fd94 	bl	80076d8 <__hexdig_fun>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	d151      	bne.n	8007c58 <__hexnan+0xe8>
 8007bb4:	9a04      	ldr	r2, [sp, #16]
 8007bb6:	9905      	ldr	r1, [sp, #20]
 8007bb8:	2a20      	cmp	r2, #32
 8007bba:	d818      	bhi.n	8007bee <__hexnan+0x7e>
 8007bbc:	9b02      	ldr	r3, [sp, #8]
 8007bbe:	459b      	cmp	fp, r3
 8007bc0:	dd13      	ble.n	8007bea <__hexnan+0x7a>
 8007bc2:	454c      	cmp	r4, r9
 8007bc4:	d206      	bcs.n	8007bd4 <__hexnan+0x64>
 8007bc6:	2d07      	cmp	r5, #7
 8007bc8:	dc04      	bgt.n	8007bd4 <__hexnan+0x64>
 8007bca:	462a      	mov	r2, r5
 8007bcc:	4649      	mov	r1, r9
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f7ff ffa8 	bl	8007b24 <L_shift>
 8007bd4:	4544      	cmp	r4, r8
 8007bd6:	d952      	bls.n	8007c7e <__hexnan+0x10e>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	f1a4 0904 	sub.w	r9, r4, #4
 8007bde:	f844 3c04 	str.w	r3, [r4, #-4]
 8007be2:	f8cd b008 	str.w	fp, [sp, #8]
 8007be6:	464c      	mov	r4, r9
 8007be8:	461d      	mov	r5, r3
 8007bea:	9903      	ldr	r1, [sp, #12]
 8007bec:	e7d7      	b.n	8007b9e <__hexnan+0x2e>
 8007bee:	2a29      	cmp	r2, #41	@ 0x29
 8007bf0:	d157      	bne.n	8007ca2 <__hexnan+0x132>
 8007bf2:	3102      	adds	r1, #2
 8007bf4:	f8ca 1000 	str.w	r1, [sl]
 8007bf8:	f1bb 0f00 	cmp.w	fp, #0
 8007bfc:	d051      	beq.n	8007ca2 <__hexnan+0x132>
 8007bfe:	454c      	cmp	r4, r9
 8007c00:	d206      	bcs.n	8007c10 <__hexnan+0xa0>
 8007c02:	2d07      	cmp	r5, #7
 8007c04:	dc04      	bgt.n	8007c10 <__hexnan+0xa0>
 8007c06:	462a      	mov	r2, r5
 8007c08:	4649      	mov	r1, r9
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	f7ff ff8a 	bl	8007b24 <L_shift>
 8007c10:	4544      	cmp	r4, r8
 8007c12:	d936      	bls.n	8007c82 <__hexnan+0x112>
 8007c14:	f1a8 0204 	sub.w	r2, r8, #4
 8007c18:	4623      	mov	r3, r4
 8007c1a:	f853 1b04 	ldr.w	r1, [r3], #4
 8007c1e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007c22:	429f      	cmp	r7, r3
 8007c24:	d2f9      	bcs.n	8007c1a <__hexnan+0xaa>
 8007c26:	1b3b      	subs	r3, r7, r4
 8007c28:	f023 0303 	bic.w	r3, r3, #3
 8007c2c:	3304      	adds	r3, #4
 8007c2e:	3401      	adds	r4, #1
 8007c30:	3e03      	subs	r6, #3
 8007c32:	42b4      	cmp	r4, r6
 8007c34:	bf88      	it	hi
 8007c36:	2304      	movhi	r3, #4
 8007c38:	4443      	add	r3, r8
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f843 2b04 	str.w	r2, [r3], #4
 8007c40:	429f      	cmp	r7, r3
 8007c42:	d2fb      	bcs.n	8007c3c <__hexnan+0xcc>
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	b91b      	cbnz	r3, 8007c50 <__hexnan+0xe0>
 8007c48:	4547      	cmp	r7, r8
 8007c4a:	d128      	bne.n	8007c9e <__hexnan+0x12e>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	603b      	str	r3, [r7, #0]
 8007c50:	2005      	movs	r0, #5
 8007c52:	b007      	add	sp, #28
 8007c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c58:	3501      	adds	r5, #1
 8007c5a:	2d08      	cmp	r5, #8
 8007c5c:	f10b 0b01 	add.w	fp, fp, #1
 8007c60:	dd06      	ble.n	8007c70 <__hexnan+0x100>
 8007c62:	4544      	cmp	r4, r8
 8007c64:	d9c1      	bls.n	8007bea <__hexnan+0x7a>
 8007c66:	2300      	movs	r3, #0
 8007c68:	f844 3c04 	str.w	r3, [r4, #-4]
 8007c6c:	2501      	movs	r5, #1
 8007c6e:	3c04      	subs	r4, #4
 8007c70:	6822      	ldr	r2, [r4, #0]
 8007c72:	f000 000f 	and.w	r0, r0, #15
 8007c76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007c7a:	6020      	str	r0, [r4, #0]
 8007c7c:	e7b5      	b.n	8007bea <__hexnan+0x7a>
 8007c7e:	2508      	movs	r5, #8
 8007c80:	e7b3      	b.n	8007bea <__hexnan+0x7a>
 8007c82:	9b01      	ldr	r3, [sp, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d0dd      	beq.n	8007c44 <__hexnan+0xd4>
 8007c88:	f1c3 0320 	rsb	r3, r3, #32
 8007c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c90:	40da      	lsrs	r2, r3
 8007c92:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007c96:	4013      	ands	r3, r2
 8007c98:	f846 3c04 	str.w	r3, [r6, #-4]
 8007c9c:	e7d2      	b.n	8007c44 <__hexnan+0xd4>
 8007c9e:	3f04      	subs	r7, #4
 8007ca0:	e7d0      	b.n	8007c44 <__hexnan+0xd4>
 8007ca2:	2004      	movs	r0, #4
 8007ca4:	e7d5      	b.n	8007c52 <__hexnan+0xe2>

08007ca6 <__ascii_mbtowc>:
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	b901      	cbnz	r1, 8007cac <__ascii_mbtowc+0x6>
 8007caa:	a901      	add	r1, sp, #4
 8007cac:	b142      	cbz	r2, 8007cc0 <__ascii_mbtowc+0x1a>
 8007cae:	b14b      	cbz	r3, 8007cc4 <__ascii_mbtowc+0x1e>
 8007cb0:	7813      	ldrb	r3, [r2, #0]
 8007cb2:	600b      	str	r3, [r1, #0]
 8007cb4:	7812      	ldrb	r2, [r2, #0]
 8007cb6:	1e10      	subs	r0, r2, #0
 8007cb8:	bf18      	it	ne
 8007cba:	2001      	movne	r0, #1
 8007cbc:	b002      	add	sp, #8
 8007cbe:	4770      	bx	lr
 8007cc0:	4610      	mov	r0, r2
 8007cc2:	e7fb      	b.n	8007cbc <__ascii_mbtowc+0x16>
 8007cc4:	f06f 0001 	mvn.w	r0, #1
 8007cc8:	e7f8      	b.n	8007cbc <__ascii_mbtowc+0x16>
	...

08007ccc <_Balloc>:
 8007ccc:	b570      	push	{r4, r5, r6, lr}
 8007cce:	69c6      	ldr	r6, [r0, #28]
 8007cd0:	4604      	mov	r4, r0
 8007cd2:	460d      	mov	r5, r1
 8007cd4:	b976      	cbnz	r6, 8007cf4 <_Balloc+0x28>
 8007cd6:	2010      	movs	r0, #16
 8007cd8:	f7fc fea8 	bl	8004a2c <malloc>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	61e0      	str	r0, [r4, #28]
 8007ce0:	b920      	cbnz	r0, 8007cec <_Balloc+0x20>
 8007ce2:	4b18      	ldr	r3, [pc, #96]	@ (8007d44 <_Balloc+0x78>)
 8007ce4:	4818      	ldr	r0, [pc, #96]	@ (8007d48 <_Balloc+0x7c>)
 8007ce6:	216b      	movs	r1, #107	@ 0x6b
 8007ce8:	f000 ff48 	bl	8008b7c <__assert_func>
 8007cec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cf0:	6006      	str	r6, [r0, #0]
 8007cf2:	60c6      	str	r6, [r0, #12]
 8007cf4:	69e6      	ldr	r6, [r4, #28]
 8007cf6:	68f3      	ldr	r3, [r6, #12]
 8007cf8:	b183      	cbz	r3, 8007d1c <_Balloc+0x50>
 8007cfa:	69e3      	ldr	r3, [r4, #28]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007d02:	b9b8      	cbnz	r0, 8007d34 <_Balloc+0x68>
 8007d04:	2101      	movs	r1, #1
 8007d06:	fa01 f605 	lsl.w	r6, r1, r5
 8007d0a:	1d72      	adds	r2, r6, #5
 8007d0c:	0092      	lsls	r2, r2, #2
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f000 ff52 	bl	8008bb8 <_calloc_r>
 8007d14:	b160      	cbz	r0, 8007d30 <_Balloc+0x64>
 8007d16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007d1a:	e00e      	b.n	8007d3a <_Balloc+0x6e>
 8007d1c:	2221      	movs	r2, #33	@ 0x21
 8007d1e:	2104      	movs	r1, #4
 8007d20:	4620      	mov	r0, r4
 8007d22:	f000 ff49 	bl	8008bb8 <_calloc_r>
 8007d26:	69e3      	ldr	r3, [r4, #28]
 8007d28:	60f0      	str	r0, [r6, #12]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1e4      	bne.n	8007cfa <_Balloc+0x2e>
 8007d30:	2000      	movs	r0, #0
 8007d32:	bd70      	pop	{r4, r5, r6, pc}
 8007d34:	6802      	ldr	r2, [r0, #0]
 8007d36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007d40:	e7f7      	b.n	8007d32 <_Balloc+0x66>
 8007d42:	bf00      	nop
 8007d44:	0800e1be 	.word	0x0800e1be
 8007d48:	0800e29e 	.word	0x0800e29e

08007d4c <_Bfree>:
 8007d4c:	b570      	push	{r4, r5, r6, lr}
 8007d4e:	69c6      	ldr	r6, [r0, #28]
 8007d50:	4605      	mov	r5, r0
 8007d52:	460c      	mov	r4, r1
 8007d54:	b976      	cbnz	r6, 8007d74 <_Bfree+0x28>
 8007d56:	2010      	movs	r0, #16
 8007d58:	f7fc fe68 	bl	8004a2c <malloc>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	61e8      	str	r0, [r5, #28]
 8007d60:	b920      	cbnz	r0, 8007d6c <_Bfree+0x20>
 8007d62:	4b09      	ldr	r3, [pc, #36]	@ (8007d88 <_Bfree+0x3c>)
 8007d64:	4809      	ldr	r0, [pc, #36]	@ (8007d8c <_Bfree+0x40>)
 8007d66:	218f      	movs	r1, #143	@ 0x8f
 8007d68:	f000 ff08 	bl	8008b7c <__assert_func>
 8007d6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d70:	6006      	str	r6, [r0, #0]
 8007d72:	60c6      	str	r6, [r0, #12]
 8007d74:	b13c      	cbz	r4, 8007d86 <_Bfree+0x3a>
 8007d76:	69eb      	ldr	r3, [r5, #28]
 8007d78:	6862      	ldr	r2, [r4, #4]
 8007d7a:	68db      	ldr	r3, [r3, #12]
 8007d7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d80:	6021      	str	r1, [r4, #0]
 8007d82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d86:	bd70      	pop	{r4, r5, r6, pc}
 8007d88:	0800e1be 	.word	0x0800e1be
 8007d8c:	0800e29e 	.word	0x0800e29e

08007d90 <__multadd>:
 8007d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d94:	690d      	ldr	r5, [r1, #16]
 8007d96:	4607      	mov	r7, r0
 8007d98:	460c      	mov	r4, r1
 8007d9a:	461e      	mov	r6, r3
 8007d9c:	f101 0c14 	add.w	ip, r1, #20
 8007da0:	2000      	movs	r0, #0
 8007da2:	f8dc 3000 	ldr.w	r3, [ip]
 8007da6:	b299      	uxth	r1, r3
 8007da8:	fb02 6101 	mla	r1, r2, r1, r6
 8007dac:	0c1e      	lsrs	r6, r3, #16
 8007dae:	0c0b      	lsrs	r3, r1, #16
 8007db0:	fb02 3306 	mla	r3, r2, r6, r3
 8007db4:	b289      	uxth	r1, r1
 8007db6:	3001      	adds	r0, #1
 8007db8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007dbc:	4285      	cmp	r5, r0
 8007dbe:	f84c 1b04 	str.w	r1, [ip], #4
 8007dc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007dc6:	dcec      	bgt.n	8007da2 <__multadd+0x12>
 8007dc8:	b30e      	cbz	r6, 8007e0e <__multadd+0x7e>
 8007dca:	68a3      	ldr	r3, [r4, #8]
 8007dcc:	42ab      	cmp	r3, r5
 8007dce:	dc19      	bgt.n	8007e04 <__multadd+0x74>
 8007dd0:	6861      	ldr	r1, [r4, #4]
 8007dd2:	4638      	mov	r0, r7
 8007dd4:	3101      	adds	r1, #1
 8007dd6:	f7ff ff79 	bl	8007ccc <_Balloc>
 8007dda:	4680      	mov	r8, r0
 8007ddc:	b928      	cbnz	r0, 8007dea <__multadd+0x5a>
 8007dde:	4602      	mov	r2, r0
 8007de0:	4b0c      	ldr	r3, [pc, #48]	@ (8007e14 <__multadd+0x84>)
 8007de2:	480d      	ldr	r0, [pc, #52]	@ (8007e18 <__multadd+0x88>)
 8007de4:	21ba      	movs	r1, #186	@ 0xba
 8007de6:	f000 fec9 	bl	8008b7c <__assert_func>
 8007dea:	6922      	ldr	r2, [r4, #16]
 8007dec:	3202      	adds	r2, #2
 8007dee:	f104 010c 	add.w	r1, r4, #12
 8007df2:	0092      	lsls	r2, r2, #2
 8007df4:	300c      	adds	r0, #12
 8007df6:	f7fe fd66 	bl	80068c6 <memcpy>
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	4638      	mov	r0, r7
 8007dfe:	f7ff ffa5 	bl	8007d4c <_Bfree>
 8007e02:	4644      	mov	r4, r8
 8007e04:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007e08:	3501      	adds	r5, #1
 8007e0a:	615e      	str	r6, [r3, #20]
 8007e0c:	6125      	str	r5, [r4, #16]
 8007e0e:	4620      	mov	r0, r4
 8007e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e14:	0800e22d 	.word	0x0800e22d
 8007e18:	0800e29e 	.word	0x0800e29e

08007e1c <__s2b>:
 8007e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e20:	460c      	mov	r4, r1
 8007e22:	4615      	mov	r5, r2
 8007e24:	461f      	mov	r7, r3
 8007e26:	2209      	movs	r2, #9
 8007e28:	3308      	adds	r3, #8
 8007e2a:	4606      	mov	r6, r0
 8007e2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e30:	2100      	movs	r1, #0
 8007e32:	2201      	movs	r2, #1
 8007e34:	429a      	cmp	r2, r3
 8007e36:	db09      	blt.n	8007e4c <__s2b+0x30>
 8007e38:	4630      	mov	r0, r6
 8007e3a:	f7ff ff47 	bl	8007ccc <_Balloc>
 8007e3e:	b940      	cbnz	r0, 8007e52 <__s2b+0x36>
 8007e40:	4602      	mov	r2, r0
 8007e42:	4b19      	ldr	r3, [pc, #100]	@ (8007ea8 <__s2b+0x8c>)
 8007e44:	4819      	ldr	r0, [pc, #100]	@ (8007eac <__s2b+0x90>)
 8007e46:	21d3      	movs	r1, #211	@ 0xd3
 8007e48:	f000 fe98 	bl	8008b7c <__assert_func>
 8007e4c:	0052      	lsls	r2, r2, #1
 8007e4e:	3101      	adds	r1, #1
 8007e50:	e7f0      	b.n	8007e34 <__s2b+0x18>
 8007e52:	9b08      	ldr	r3, [sp, #32]
 8007e54:	6143      	str	r3, [r0, #20]
 8007e56:	2d09      	cmp	r5, #9
 8007e58:	f04f 0301 	mov.w	r3, #1
 8007e5c:	6103      	str	r3, [r0, #16]
 8007e5e:	dd16      	ble.n	8007e8e <__s2b+0x72>
 8007e60:	f104 0909 	add.w	r9, r4, #9
 8007e64:	46c8      	mov	r8, r9
 8007e66:	442c      	add	r4, r5
 8007e68:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007e6c:	4601      	mov	r1, r0
 8007e6e:	3b30      	subs	r3, #48	@ 0x30
 8007e70:	220a      	movs	r2, #10
 8007e72:	4630      	mov	r0, r6
 8007e74:	f7ff ff8c 	bl	8007d90 <__multadd>
 8007e78:	45a0      	cmp	r8, r4
 8007e7a:	d1f5      	bne.n	8007e68 <__s2b+0x4c>
 8007e7c:	f1a5 0408 	sub.w	r4, r5, #8
 8007e80:	444c      	add	r4, r9
 8007e82:	1b2d      	subs	r5, r5, r4
 8007e84:	1963      	adds	r3, r4, r5
 8007e86:	42bb      	cmp	r3, r7
 8007e88:	db04      	blt.n	8007e94 <__s2b+0x78>
 8007e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e8e:	340a      	adds	r4, #10
 8007e90:	2509      	movs	r5, #9
 8007e92:	e7f6      	b.n	8007e82 <__s2b+0x66>
 8007e94:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e98:	4601      	mov	r1, r0
 8007e9a:	3b30      	subs	r3, #48	@ 0x30
 8007e9c:	220a      	movs	r2, #10
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	f7ff ff76 	bl	8007d90 <__multadd>
 8007ea4:	e7ee      	b.n	8007e84 <__s2b+0x68>
 8007ea6:	bf00      	nop
 8007ea8:	0800e22d 	.word	0x0800e22d
 8007eac:	0800e29e 	.word	0x0800e29e

08007eb0 <__hi0bits>:
 8007eb0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	bf36      	itet	cc
 8007eb8:	0403      	lslcc	r3, r0, #16
 8007eba:	2000      	movcs	r0, #0
 8007ebc:	2010      	movcc	r0, #16
 8007ebe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ec2:	bf3c      	itt	cc
 8007ec4:	021b      	lslcc	r3, r3, #8
 8007ec6:	3008      	addcc	r0, #8
 8007ec8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007ecc:	bf3c      	itt	cc
 8007ece:	011b      	lslcc	r3, r3, #4
 8007ed0:	3004      	addcc	r0, #4
 8007ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ed6:	bf3c      	itt	cc
 8007ed8:	009b      	lslcc	r3, r3, #2
 8007eda:	3002      	addcc	r0, #2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	db05      	blt.n	8007eec <__hi0bits+0x3c>
 8007ee0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007ee4:	f100 0001 	add.w	r0, r0, #1
 8007ee8:	bf08      	it	eq
 8007eea:	2020      	moveq	r0, #32
 8007eec:	4770      	bx	lr

08007eee <__lo0bits>:
 8007eee:	6803      	ldr	r3, [r0, #0]
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	f013 0007 	ands.w	r0, r3, #7
 8007ef6:	d00b      	beq.n	8007f10 <__lo0bits+0x22>
 8007ef8:	07d9      	lsls	r1, r3, #31
 8007efa:	d421      	bmi.n	8007f40 <__lo0bits+0x52>
 8007efc:	0798      	lsls	r0, r3, #30
 8007efe:	bf49      	itett	mi
 8007f00:	085b      	lsrmi	r3, r3, #1
 8007f02:	089b      	lsrpl	r3, r3, #2
 8007f04:	2001      	movmi	r0, #1
 8007f06:	6013      	strmi	r3, [r2, #0]
 8007f08:	bf5c      	itt	pl
 8007f0a:	6013      	strpl	r3, [r2, #0]
 8007f0c:	2002      	movpl	r0, #2
 8007f0e:	4770      	bx	lr
 8007f10:	b299      	uxth	r1, r3
 8007f12:	b909      	cbnz	r1, 8007f18 <__lo0bits+0x2a>
 8007f14:	0c1b      	lsrs	r3, r3, #16
 8007f16:	2010      	movs	r0, #16
 8007f18:	b2d9      	uxtb	r1, r3
 8007f1a:	b909      	cbnz	r1, 8007f20 <__lo0bits+0x32>
 8007f1c:	3008      	adds	r0, #8
 8007f1e:	0a1b      	lsrs	r3, r3, #8
 8007f20:	0719      	lsls	r1, r3, #28
 8007f22:	bf04      	itt	eq
 8007f24:	091b      	lsreq	r3, r3, #4
 8007f26:	3004      	addeq	r0, #4
 8007f28:	0799      	lsls	r1, r3, #30
 8007f2a:	bf04      	itt	eq
 8007f2c:	089b      	lsreq	r3, r3, #2
 8007f2e:	3002      	addeq	r0, #2
 8007f30:	07d9      	lsls	r1, r3, #31
 8007f32:	d403      	bmi.n	8007f3c <__lo0bits+0x4e>
 8007f34:	085b      	lsrs	r3, r3, #1
 8007f36:	f100 0001 	add.w	r0, r0, #1
 8007f3a:	d003      	beq.n	8007f44 <__lo0bits+0x56>
 8007f3c:	6013      	str	r3, [r2, #0]
 8007f3e:	4770      	bx	lr
 8007f40:	2000      	movs	r0, #0
 8007f42:	4770      	bx	lr
 8007f44:	2020      	movs	r0, #32
 8007f46:	4770      	bx	lr

08007f48 <__i2b>:
 8007f48:	b510      	push	{r4, lr}
 8007f4a:	460c      	mov	r4, r1
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	f7ff febd 	bl	8007ccc <_Balloc>
 8007f52:	4602      	mov	r2, r0
 8007f54:	b928      	cbnz	r0, 8007f62 <__i2b+0x1a>
 8007f56:	4b05      	ldr	r3, [pc, #20]	@ (8007f6c <__i2b+0x24>)
 8007f58:	4805      	ldr	r0, [pc, #20]	@ (8007f70 <__i2b+0x28>)
 8007f5a:	f240 1145 	movw	r1, #325	@ 0x145
 8007f5e:	f000 fe0d 	bl	8008b7c <__assert_func>
 8007f62:	2301      	movs	r3, #1
 8007f64:	6144      	str	r4, [r0, #20]
 8007f66:	6103      	str	r3, [r0, #16]
 8007f68:	bd10      	pop	{r4, pc}
 8007f6a:	bf00      	nop
 8007f6c:	0800e22d 	.word	0x0800e22d
 8007f70:	0800e29e 	.word	0x0800e29e

08007f74 <__multiply>:
 8007f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f78:	4614      	mov	r4, r2
 8007f7a:	690a      	ldr	r2, [r1, #16]
 8007f7c:	6923      	ldr	r3, [r4, #16]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	bfa8      	it	ge
 8007f82:	4623      	movge	r3, r4
 8007f84:	460f      	mov	r7, r1
 8007f86:	bfa4      	itt	ge
 8007f88:	460c      	movge	r4, r1
 8007f8a:	461f      	movge	r7, r3
 8007f8c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007f90:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007f94:	68a3      	ldr	r3, [r4, #8]
 8007f96:	6861      	ldr	r1, [r4, #4]
 8007f98:	eb0a 0609 	add.w	r6, sl, r9
 8007f9c:	42b3      	cmp	r3, r6
 8007f9e:	b085      	sub	sp, #20
 8007fa0:	bfb8      	it	lt
 8007fa2:	3101      	addlt	r1, #1
 8007fa4:	f7ff fe92 	bl	8007ccc <_Balloc>
 8007fa8:	b930      	cbnz	r0, 8007fb8 <__multiply+0x44>
 8007faa:	4602      	mov	r2, r0
 8007fac:	4b44      	ldr	r3, [pc, #272]	@ (80080c0 <__multiply+0x14c>)
 8007fae:	4845      	ldr	r0, [pc, #276]	@ (80080c4 <__multiply+0x150>)
 8007fb0:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007fb4:	f000 fde2 	bl	8008b7c <__assert_func>
 8007fb8:	f100 0514 	add.w	r5, r0, #20
 8007fbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007fc0:	462b      	mov	r3, r5
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	4543      	cmp	r3, r8
 8007fc6:	d321      	bcc.n	800800c <__multiply+0x98>
 8007fc8:	f107 0114 	add.w	r1, r7, #20
 8007fcc:	f104 0214 	add.w	r2, r4, #20
 8007fd0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007fd4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007fd8:	9302      	str	r3, [sp, #8]
 8007fda:	1b13      	subs	r3, r2, r4
 8007fdc:	3b15      	subs	r3, #21
 8007fde:	f023 0303 	bic.w	r3, r3, #3
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	f104 0715 	add.w	r7, r4, #21
 8007fe8:	42ba      	cmp	r2, r7
 8007fea:	bf38      	it	cc
 8007fec:	2304      	movcc	r3, #4
 8007fee:	9301      	str	r3, [sp, #4]
 8007ff0:	9b02      	ldr	r3, [sp, #8]
 8007ff2:	9103      	str	r1, [sp, #12]
 8007ff4:	428b      	cmp	r3, r1
 8007ff6:	d80c      	bhi.n	8008012 <__multiply+0x9e>
 8007ff8:	2e00      	cmp	r6, #0
 8007ffa:	dd03      	ble.n	8008004 <__multiply+0x90>
 8007ffc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008000:	2b00      	cmp	r3, #0
 8008002:	d05b      	beq.n	80080bc <__multiply+0x148>
 8008004:	6106      	str	r6, [r0, #16]
 8008006:	b005      	add	sp, #20
 8008008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800c:	f843 2b04 	str.w	r2, [r3], #4
 8008010:	e7d8      	b.n	8007fc4 <__multiply+0x50>
 8008012:	f8b1 a000 	ldrh.w	sl, [r1]
 8008016:	f1ba 0f00 	cmp.w	sl, #0
 800801a:	d024      	beq.n	8008066 <__multiply+0xf2>
 800801c:	f104 0e14 	add.w	lr, r4, #20
 8008020:	46a9      	mov	r9, r5
 8008022:	f04f 0c00 	mov.w	ip, #0
 8008026:	f85e 7b04 	ldr.w	r7, [lr], #4
 800802a:	f8d9 3000 	ldr.w	r3, [r9]
 800802e:	fa1f fb87 	uxth.w	fp, r7
 8008032:	b29b      	uxth	r3, r3
 8008034:	fb0a 330b 	mla	r3, sl, fp, r3
 8008038:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800803c:	f8d9 7000 	ldr.w	r7, [r9]
 8008040:	4463      	add	r3, ip
 8008042:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008046:	fb0a c70b 	mla	r7, sl, fp, ip
 800804a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800804e:	b29b      	uxth	r3, r3
 8008050:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008054:	4572      	cmp	r2, lr
 8008056:	f849 3b04 	str.w	r3, [r9], #4
 800805a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800805e:	d8e2      	bhi.n	8008026 <__multiply+0xb2>
 8008060:	9b01      	ldr	r3, [sp, #4]
 8008062:	f845 c003 	str.w	ip, [r5, r3]
 8008066:	9b03      	ldr	r3, [sp, #12]
 8008068:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800806c:	3104      	adds	r1, #4
 800806e:	f1b9 0f00 	cmp.w	r9, #0
 8008072:	d021      	beq.n	80080b8 <__multiply+0x144>
 8008074:	682b      	ldr	r3, [r5, #0]
 8008076:	f104 0c14 	add.w	ip, r4, #20
 800807a:	46ae      	mov	lr, r5
 800807c:	f04f 0a00 	mov.w	sl, #0
 8008080:	f8bc b000 	ldrh.w	fp, [ip]
 8008084:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008088:	fb09 770b 	mla	r7, r9, fp, r7
 800808c:	4457      	add	r7, sl
 800808e:	b29b      	uxth	r3, r3
 8008090:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008094:	f84e 3b04 	str.w	r3, [lr], #4
 8008098:	f85c 3b04 	ldr.w	r3, [ip], #4
 800809c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080a0:	f8be 3000 	ldrh.w	r3, [lr]
 80080a4:	fb09 330a 	mla	r3, r9, sl, r3
 80080a8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80080ac:	4562      	cmp	r2, ip
 80080ae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080b2:	d8e5      	bhi.n	8008080 <__multiply+0x10c>
 80080b4:	9f01      	ldr	r7, [sp, #4]
 80080b6:	51eb      	str	r3, [r5, r7]
 80080b8:	3504      	adds	r5, #4
 80080ba:	e799      	b.n	8007ff0 <__multiply+0x7c>
 80080bc:	3e01      	subs	r6, #1
 80080be:	e79b      	b.n	8007ff8 <__multiply+0x84>
 80080c0:	0800e22d 	.word	0x0800e22d
 80080c4:	0800e29e 	.word	0x0800e29e

080080c8 <__pow5mult>:
 80080c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080cc:	4615      	mov	r5, r2
 80080ce:	f012 0203 	ands.w	r2, r2, #3
 80080d2:	4607      	mov	r7, r0
 80080d4:	460e      	mov	r6, r1
 80080d6:	d007      	beq.n	80080e8 <__pow5mult+0x20>
 80080d8:	4c25      	ldr	r4, [pc, #148]	@ (8008170 <__pow5mult+0xa8>)
 80080da:	3a01      	subs	r2, #1
 80080dc:	2300      	movs	r3, #0
 80080de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080e2:	f7ff fe55 	bl	8007d90 <__multadd>
 80080e6:	4606      	mov	r6, r0
 80080e8:	10ad      	asrs	r5, r5, #2
 80080ea:	d03d      	beq.n	8008168 <__pow5mult+0xa0>
 80080ec:	69fc      	ldr	r4, [r7, #28]
 80080ee:	b97c      	cbnz	r4, 8008110 <__pow5mult+0x48>
 80080f0:	2010      	movs	r0, #16
 80080f2:	f7fc fc9b 	bl	8004a2c <malloc>
 80080f6:	4602      	mov	r2, r0
 80080f8:	61f8      	str	r0, [r7, #28]
 80080fa:	b928      	cbnz	r0, 8008108 <__pow5mult+0x40>
 80080fc:	4b1d      	ldr	r3, [pc, #116]	@ (8008174 <__pow5mult+0xac>)
 80080fe:	481e      	ldr	r0, [pc, #120]	@ (8008178 <__pow5mult+0xb0>)
 8008100:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008104:	f000 fd3a 	bl	8008b7c <__assert_func>
 8008108:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800810c:	6004      	str	r4, [r0, #0]
 800810e:	60c4      	str	r4, [r0, #12]
 8008110:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008114:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008118:	b94c      	cbnz	r4, 800812e <__pow5mult+0x66>
 800811a:	f240 2171 	movw	r1, #625	@ 0x271
 800811e:	4638      	mov	r0, r7
 8008120:	f7ff ff12 	bl	8007f48 <__i2b>
 8008124:	2300      	movs	r3, #0
 8008126:	f8c8 0008 	str.w	r0, [r8, #8]
 800812a:	4604      	mov	r4, r0
 800812c:	6003      	str	r3, [r0, #0]
 800812e:	f04f 0900 	mov.w	r9, #0
 8008132:	07eb      	lsls	r3, r5, #31
 8008134:	d50a      	bpl.n	800814c <__pow5mult+0x84>
 8008136:	4631      	mov	r1, r6
 8008138:	4622      	mov	r2, r4
 800813a:	4638      	mov	r0, r7
 800813c:	f7ff ff1a 	bl	8007f74 <__multiply>
 8008140:	4631      	mov	r1, r6
 8008142:	4680      	mov	r8, r0
 8008144:	4638      	mov	r0, r7
 8008146:	f7ff fe01 	bl	8007d4c <_Bfree>
 800814a:	4646      	mov	r6, r8
 800814c:	106d      	asrs	r5, r5, #1
 800814e:	d00b      	beq.n	8008168 <__pow5mult+0xa0>
 8008150:	6820      	ldr	r0, [r4, #0]
 8008152:	b938      	cbnz	r0, 8008164 <__pow5mult+0x9c>
 8008154:	4622      	mov	r2, r4
 8008156:	4621      	mov	r1, r4
 8008158:	4638      	mov	r0, r7
 800815a:	f7ff ff0b 	bl	8007f74 <__multiply>
 800815e:	6020      	str	r0, [r4, #0]
 8008160:	f8c0 9000 	str.w	r9, [r0]
 8008164:	4604      	mov	r4, r0
 8008166:	e7e4      	b.n	8008132 <__pow5mult+0x6a>
 8008168:	4630      	mov	r0, r6
 800816a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800816e:	bf00      	nop
 8008170:	0800e2f8 	.word	0x0800e2f8
 8008174:	0800e1be 	.word	0x0800e1be
 8008178:	0800e29e 	.word	0x0800e29e

0800817c <__lshift>:
 800817c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008180:	460c      	mov	r4, r1
 8008182:	6849      	ldr	r1, [r1, #4]
 8008184:	6923      	ldr	r3, [r4, #16]
 8008186:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800818a:	68a3      	ldr	r3, [r4, #8]
 800818c:	4607      	mov	r7, r0
 800818e:	4691      	mov	r9, r2
 8008190:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008194:	f108 0601 	add.w	r6, r8, #1
 8008198:	42b3      	cmp	r3, r6
 800819a:	db0b      	blt.n	80081b4 <__lshift+0x38>
 800819c:	4638      	mov	r0, r7
 800819e:	f7ff fd95 	bl	8007ccc <_Balloc>
 80081a2:	4605      	mov	r5, r0
 80081a4:	b948      	cbnz	r0, 80081ba <__lshift+0x3e>
 80081a6:	4602      	mov	r2, r0
 80081a8:	4b28      	ldr	r3, [pc, #160]	@ (800824c <__lshift+0xd0>)
 80081aa:	4829      	ldr	r0, [pc, #164]	@ (8008250 <__lshift+0xd4>)
 80081ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80081b0:	f000 fce4 	bl	8008b7c <__assert_func>
 80081b4:	3101      	adds	r1, #1
 80081b6:	005b      	lsls	r3, r3, #1
 80081b8:	e7ee      	b.n	8008198 <__lshift+0x1c>
 80081ba:	2300      	movs	r3, #0
 80081bc:	f100 0114 	add.w	r1, r0, #20
 80081c0:	f100 0210 	add.w	r2, r0, #16
 80081c4:	4618      	mov	r0, r3
 80081c6:	4553      	cmp	r3, sl
 80081c8:	db33      	blt.n	8008232 <__lshift+0xb6>
 80081ca:	6920      	ldr	r0, [r4, #16]
 80081cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081d0:	f104 0314 	add.w	r3, r4, #20
 80081d4:	f019 091f 	ands.w	r9, r9, #31
 80081d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80081dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80081e0:	d02b      	beq.n	800823a <__lshift+0xbe>
 80081e2:	f1c9 0e20 	rsb	lr, r9, #32
 80081e6:	468a      	mov	sl, r1
 80081e8:	2200      	movs	r2, #0
 80081ea:	6818      	ldr	r0, [r3, #0]
 80081ec:	fa00 f009 	lsl.w	r0, r0, r9
 80081f0:	4310      	orrs	r0, r2
 80081f2:	f84a 0b04 	str.w	r0, [sl], #4
 80081f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80081fa:	459c      	cmp	ip, r3
 80081fc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008200:	d8f3      	bhi.n	80081ea <__lshift+0x6e>
 8008202:	ebac 0304 	sub.w	r3, ip, r4
 8008206:	3b15      	subs	r3, #21
 8008208:	f023 0303 	bic.w	r3, r3, #3
 800820c:	3304      	adds	r3, #4
 800820e:	f104 0015 	add.w	r0, r4, #21
 8008212:	4584      	cmp	ip, r0
 8008214:	bf38      	it	cc
 8008216:	2304      	movcc	r3, #4
 8008218:	50ca      	str	r2, [r1, r3]
 800821a:	b10a      	cbz	r2, 8008220 <__lshift+0xa4>
 800821c:	f108 0602 	add.w	r6, r8, #2
 8008220:	3e01      	subs	r6, #1
 8008222:	4638      	mov	r0, r7
 8008224:	612e      	str	r6, [r5, #16]
 8008226:	4621      	mov	r1, r4
 8008228:	f7ff fd90 	bl	8007d4c <_Bfree>
 800822c:	4628      	mov	r0, r5
 800822e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008232:	f842 0f04 	str.w	r0, [r2, #4]!
 8008236:	3301      	adds	r3, #1
 8008238:	e7c5      	b.n	80081c6 <__lshift+0x4a>
 800823a:	3904      	subs	r1, #4
 800823c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008240:	f841 2f04 	str.w	r2, [r1, #4]!
 8008244:	459c      	cmp	ip, r3
 8008246:	d8f9      	bhi.n	800823c <__lshift+0xc0>
 8008248:	e7ea      	b.n	8008220 <__lshift+0xa4>
 800824a:	bf00      	nop
 800824c:	0800e22d 	.word	0x0800e22d
 8008250:	0800e29e 	.word	0x0800e29e

08008254 <__mcmp>:
 8008254:	690a      	ldr	r2, [r1, #16]
 8008256:	4603      	mov	r3, r0
 8008258:	6900      	ldr	r0, [r0, #16]
 800825a:	1a80      	subs	r0, r0, r2
 800825c:	b530      	push	{r4, r5, lr}
 800825e:	d10e      	bne.n	800827e <__mcmp+0x2a>
 8008260:	3314      	adds	r3, #20
 8008262:	3114      	adds	r1, #20
 8008264:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008268:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800826c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008270:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008274:	4295      	cmp	r5, r2
 8008276:	d003      	beq.n	8008280 <__mcmp+0x2c>
 8008278:	d205      	bcs.n	8008286 <__mcmp+0x32>
 800827a:	f04f 30ff 	mov.w	r0, #4294967295
 800827e:	bd30      	pop	{r4, r5, pc}
 8008280:	42a3      	cmp	r3, r4
 8008282:	d3f3      	bcc.n	800826c <__mcmp+0x18>
 8008284:	e7fb      	b.n	800827e <__mcmp+0x2a>
 8008286:	2001      	movs	r0, #1
 8008288:	e7f9      	b.n	800827e <__mcmp+0x2a>
	...

0800828c <__mdiff>:
 800828c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008290:	4689      	mov	r9, r1
 8008292:	4606      	mov	r6, r0
 8008294:	4611      	mov	r1, r2
 8008296:	4648      	mov	r0, r9
 8008298:	4614      	mov	r4, r2
 800829a:	f7ff ffdb 	bl	8008254 <__mcmp>
 800829e:	1e05      	subs	r5, r0, #0
 80082a0:	d112      	bne.n	80082c8 <__mdiff+0x3c>
 80082a2:	4629      	mov	r1, r5
 80082a4:	4630      	mov	r0, r6
 80082a6:	f7ff fd11 	bl	8007ccc <_Balloc>
 80082aa:	4602      	mov	r2, r0
 80082ac:	b928      	cbnz	r0, 80082ba <__mdiff+0x2e>
 80082ae:	4b3f      	ldr	r3, [pc, #252]	@ (80083ac <__mdiff+0x120>)
 80082b0:	f240 2137 	movw	r1, #567	@ 0x237
 80082b4:	483e      	ldr	r0, [pc, #248]	@ (80083b0 <__mdiff+0x124>)
 80082b6:	f000 fc61 	bl	8008b7c <__assert_func>
 80082ba:	2301      	movs	r3, #1
 80082bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80082c0:	4610      	mov	r0, r2
 80082c2:	b003      	add	sp, #12
 80082c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c8:	bfbc      	itt	lt
 80082ca:	464b      	movlt	r3, r9
 80082cc:	46a1      	movlt	r9, r4
 80082ce:	4630      	mov	r0, r6
 80082d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80082d4:	bfba      	itte	lt
 80082d6:	461c      	movlt	r4, r3
 80082d8:	2501      	movlt	r5, #1
 80082da:	2500      	movge	r5, #0
 80082dc:	f7ff fcf6 	bl	8007ccc <_Balloc>
 80082e0:	4602      	mov	r2, r0
 80082e2:	b918      	cbnz	r0, 80082ec <__mdiff+0x60>
 80082e4:	4b31      	ldr	r3, [pc, #196]	@ (80083ac <__mdiff+0x120>)
 80082e6:	f240 2145 	movw	r1, #581	@ 0x245
 80082ea:	e7e3      	b.n	80082b4 <__mdiff+0x28>
 80082ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80082f0:	6926      	ldr	r6, [r4, #16]
 80082f2:	60c5      	str	r5, [r0, #12]
 80082f4:	f109 0310 	add.w	r3, r9, #16
 80082f8:	f109 0514 	add.w	r5, r9, #20
 80082fc:	f104 0e14 	add.w	lr, r4, #20
 8008300:	f100 0b14 	add.w	fp, r0, #20
 8008304:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008308:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800830c:	9301      	str	r3, [sp, #4]
 800830e:	46d9      	mov	r9, fp
 8008310:	f04f 0c00 	mov.w	ip, #0
 8008314:	9b01      	ldr	r3, [sp, #4]
 8008316:	f85e 0b04 	ldr.w	r0, [lr], #4
 800831a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800831e:	9301      	str	r3, [sp, #4]
 8008320:	fa1f f38a 	uxth.w	r3, sl
 8008324:	4619      	mov	r1, r3
 8008326:	b283      	uxth	r3, r0
 8008328:	1acb      	subs	r3, r1, r3
 800832a:	0c00      	lsrs	r0, r0, #16
 800832c:	4463      	add	r3, ip
 800832e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008332:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008336:	b29b      	uxth	r3, r3
 8008338:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800833c:	4576      	cmp	r6, lr
 800833e:	f849 3b04 	str.w	r3, [r9], #4
 8008342:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008346:	d8e5      	bhi.n	8008314 <__mdiff+0x88>
 8008348:	1b33      	subs	r3, r6, r4
 800834a:	3b15      	subs	r3, #21
 800834c:	f023 0303 	bic.w	r3, r3, #3
 8008350:	3415      	adds	r4, #21
 8008352:	3304      	adds	r3, #4
 8008354:	42a6      	cmp	r6, r4
 8008356:	bf38      	it	cc
 8008358:	2304      	movcc	r3, #4
 800835a:	441d      	add	r5, r3
 800835c:	445b      	add	r3, fp
 800835e:	461e      	mov	r6, r3
 8008360:	462c      	mov	r4, r5
 8008362:	4544      	cmp	r4, r8
 8008364:	d30e      	bcc.n	8008384 <__mdiff+0xf8>
 8008366:	f108 0103 	add.w	r1, r8, #3
 800836a:	1b49      	subs	r1, r1, r5
 800836c:	f021 0103 	bic.w	r1, r1, #3
 8008370:	3d03      	subs	r5, #3
 8008372:	45a8      	cmp	r8, r5
 8008374:	bf38      	it	cc
 8008376:	2100      	movcc	r1, #0
 8008378:	440b      	add	r3, r1
 800837a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800837e:	b191      	cbz	r1, 80083a6 <__mdiff+0x11a>
 8008380:	6117      	str	r7, [r2, #16]
 8008382:	e79d      	b.n	80082c0 <__mdiff+0x34>
 8008384:	f854 1b04 	ldr.w	r1, [r4], #4
 8008388:	46e6      	mov	lr, ip
 800838a:	0c08      	lsrs	r0, r1, #16
 800838c:	fa1c fc81 	uxtah	ip, ip, r1
 8008390:	4471      	add	r1, lr
 8008392:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008396:	b289      	uxth	r1, r1
 8008398:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800839c:	f846 1b04 	str.w	r1, [r6], #4
 80083a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80083a4:	e7dd      	b.n	8008362 <__mdiff+0xd6>
 80083a6:	3f01      	subs	r7, #1
 80083a8:	e7e7      	b.n	800837a <__mdiff+0xee>
 80083aa:	bf00      	nop
 80083ac:	0800e22d 	.word	0x0800e22d
 80083b0:	0800e29e 	.word	0x0800e29e

080083b4 <__ulp>:
 80083b4:	b082      	sub	sp, #8
 80083b6:	ed8d 0b00 	vstr	d0, [sp]
 80083ba:	9a01      	ldr	r2, [sp, #4]
 80083bc:	4b0f      	ldr	r3, [pc, #60]	@ (80083fc <__ulp+0x48>)
 80083be:	4013      	ands	r3, r2
 80083c0:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	dc08      	bgt.n	80083da <__ulp+0x26>
 80083c8:	425b      	negs	r3, r3
 80083ca:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80083ce:	ea4f 5223 	mov.w	r2, r3, asr #20
 80083d2:	da04      	bge.n	80083de <__ulp+0x2a>
 80083d4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80083d8:	4113      	asrs	r3, r2
 80083da:	2200      	movs	r2, #0
 80083dc:	e008      	b.n	80083f0 <__ulp+0x3c>
 80083de:	f1a2 0314 	sub.w	r3, r2, #20
 80083e2:	2b1e      	cmp	r3, #30
 80083e4:	bfda      	itte	le
 80083e6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80083ea:	40da      	lsrle	r2, r3
 80083ec:	2201      	movgt	r2, #1
 80083ee:	2300      	movs	r3, #0
 80083f0:	4619      	mov	r1, r3
 80083f2:	4610      	mov	r0, r2
 80083f4:	ec41 0b10 	vmov	d0, r0, r1
 80083f8:	b002      	add	sp, #8
 80083fa:	4770      	bx	lr
 80083fc:	7ff00000 	.word	0x7ff00000

08008400 <__b2d>:
 8008400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008404:	6906      	ldr	r6, [r0, #16]
 8008406:	f100 0814 	add.w	r8, r0, #20
 800840a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800840e:	1f37      	subs	r7, r6, #4
 8008410:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008414:	4610      	mov	r0, r2
 8008416:	f7ff fd4b 	bl	8007eb0 <__hi0bits>
 800841a:	f1c0 0320 	rsb	r3, r0, #32
 800841e:	280a      	cmp	r0, #10
 8008420:	600b      	str	r3, [r1, #0]
 8008422:	491b      	ldr	r1, [pc, #108]	@ (8008490 <__b2d+0x90>)
 8008424:	dc15      	bgt.n	8008452 <__b2d+0x52>
 8008426:	f1c0 0c0b 	rsb	ip, r0, #11
 800842a:	fa22 f30c 	lsr.w	r3, r2, ip
 800842e:	45b8      	cmp	r8, r7
 8008430:	ea43 0501 	orr.w	r5, r3, r1
 8008434:	bf34      	ite	cc
 8008436:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800843a:	2300      	movcs	r3, #0
 800843c:	3015      	adds	r0, #21
 800843e:	fa02 f000 	lsl.w	r0, r2, r0
 8008442:	fa23 f30c 	lsr.w	r3, r3, ip
 8008446:	4303      	orrs	r3, r0
 8008448:	461c      	mov	r4, r3
 800844a:	ec45 4b10 	vmov	d0, r4, r5
 800844e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008452:	45b8      	cmp	r8, r7
 8008454:	bf3a      	itte	cc
 8008456:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800845a:	f1a6 0708 	subcc.w	r7, r6, #8
 800845e:	2300      	movcs	r3, #0
 8008460:	380b      	subs	r0, #11
 8008462:	d012      	beq.n	800848a <__b2d+0x8a>
 8008464:	f1c0 0120 	rsb	r1, r0, #32
 8008468:	fa23 f401 	lsr.w	r4, r3, r1
 800846c:	4082      	lsls	r2, r0
 800846e:	4322      	orrs	r2, r4
 8008470:	4547      	cmp	r7, r8
 8008472:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008476:	bf8c      	ite	hi
 8008478:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800847c:	2200      	movls	r2, #0
 800847e:	4083      	lsls	r3, r0
 8008480:	40ca      	lsrs	r2, r1
 8008482:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008486:	4313      	orrs	r3, r2
 8008488:	e7de      	b.n	8008448 <__b2d+0x48>
 800848a:	ea42 0501 	orr.w	r5, r2, r1
 800848e:	e7db      	b.n	8008448 <__b2d+0x48>
 8008490:	3ff00000 	.word	0x3ff00000

08008494 <__d2b>:
 8008494:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008498:	460f      	mov	r7, r1
 800849a:	2101      	movs	r1, #1
 800849c:	ec59 8b10 	vmov	r8, r9, d0
 80084a0:	4616      	mov	r6, r2
 80084a2:	f7ff fc13 	bl	8007ccc <_Balloc>
 80084a6:	4604      	mov	r4, r0
 80084a8:	b930      	cbnz	r0, 80084b8 <__d2b+0x24>
 80084aa:	4602      	mov	r2, r0
 80084ac:	4b23      	ldr	r3, [pc, #140]	@ (800853c <__d2b+0xa8>)
 80084ae:	4824      	ldr	r0, [pc, #144]	@ (8008540 <__d2b+0xac>)
 80084b0:	f240 310f 	movw	r1, #783	@ 0x30f
 80084b4:	f000 fb62 	bl	8008b7c <__assert_func>
 80084b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80084bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084c0:	b10d      	cbz	r5, 80084c6 <__d2b+0x32>
 80084c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084c6:	9301      	str	r3, [sp, #4]
 80084c8:	f1b8 0300 	subs.w	r3, r8, #0
 80084cc:	d023      	beq.n	8008516 <__d2b+0x82>
 80084ce:	4668      	mov	r0, sp
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	f7ff fd0c 	bl	8007eee <__lo0bits>
 80084d6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80084da:	b1d0      	cbz	r0, 8008512 <__d2b+0x7e>
 80084dc:	f1c0 0320 	rsb	r3, r0, #32
 80084e0:	fa02 f303 	lsl.w	r3, r2, r3
 80084e4:	430b      	orrs	r3, r1
 80084e6:	40c2      	lsrs	r2, r0
 80084e8:	6163      	str	r3, [r4, #20]
 80084ea:	9201      	str	r2, [sp, #4]
 80084ec:	9b01      	ldr	r3, [sp, #4]
 80084ee:	61a3      	str	r3, [r4, #24]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	bf0c      	ite	eq
 80084f4:	2201      	moveq	r2, #1
 80084f6:	2202      	movne	r2, #2
 80084f8:	6122      	str	r2, [r4, #16]
 80084fa:	b1a5      	cbz	r5, 8008526 <__d2b+0x92>
 80084fc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008500:	4405      	add	r5, r0
 8008502:	603d      	str	r5, [r7, #0]
 8008504:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008508:	6030      	str	r0, [r6, #0]
 800850a:	4620      	mov	r0, r4
 800850c:	b003      	add	sp, #12
 800850e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008512:	6161      	str	r1, [r4, #20]
 8008514:	e7ea      	b.n	80084ec <__d2b+0x58>
 8008516:	a801      	add	r0, sp, #4
 8008518:	f7ff fce9 	bl	8007eee <__lo0bits>
 800851c:	9b01      	ldr	r3, [sp, #4]
 800851e:	6163      	str	r3, [r4, #20]
 8008520:	3020      	adds	r0, #32
 8008522:	2201      	movs	r2, #1
 8008524:	e7e8      	b.n	80084f8 <__d2b+0x64>
 8008526:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800852a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800852e:	6038      	str	r0, [r7, #0]
 8008530:	6918      	ldr	r0, [r3, #16]
 8008532:	f7ff fcbd 	bl	8007eb0 <__hi0bits>
 8008536:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800853a:	e7e5      	b.n	8008508 <__d2b+0x74>
 800853c:	0800e22d 	.word	0x0800e22d
 8008540:	0800e29e 	.word	0x0800e29e

08008544 <__ratio>:
 8008544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008548:	b085      	sub	sp, #20
 800854a:	e9cd 1000 	strd	r1, r0, [sp]
 800854e:	a902      	add	r1, sp, #8
 8008550:	f7ff ff56 	bl	8008400 <__b2d>
 8008554:	9800      	ldr	r0, [sp, #0]
 8008556:	a903      	add	r1, sp, #12
 8008558:	ec55 4b10 	vmov	r4, r5, d0
 800855c:	f7ff ff50 	bl	8008400 <__b2d>
 8008560:	9b01      	ldr	r3, [sp, #4]
 8008562:	6919      	ldr	r1, [r3, #16]
 8008564:	9b00      	ldr	r3, [sp, #0]
 8008566:	691b      	ldr	r3, [r3, #16]
 8008568:	1ac9      	subs	r1, r1, r3
 800856a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800856e:	1a9b      	subs	r3, r3, r2
 8008570:	ec5b ab10 	vmov	sl, fp, d0
 8008574:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008578:	2b00      	cmp	r3, #0
 800857a:	bfce      	itee	gt
 800857c:	462a      	movgt	r2, r5
 800857e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008582:	465a      	movle	r2, fp
 8008584:	462f      	mov	r7, r5
 8008586:	46d9      	mov	r9, fp
 8008588:	bfcc      	ite	gt
 800858a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800858e:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008592:	464b      	mov	r3, r9
 8008594:	4652      	mov	r2, sl
 8008596:	4620      	mov	r0, r4
 8008598:	4639      	mov	r1, r7
 800859a:	f7f8 f95f 	bl	800085c <__aeabi_ddiv>
 800859e:	ec41 0b10 	vmov	d0, r0, r1
 80085a2:	b005      	add	sp, #20
 80085a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080085a8 <__copybits>:
 80085a8:	3901      	subs	r1, #1
 80085aa:	b570      	push	{r4, r5, r6, lr}
 80085ac:	1149      	asrs	r1, r1, #5
 80085ae:	6914      	ldr	r4, [r2, #16]
 80085b0:	3101      	adds	r1, #1
 80085b2:	f102 0314 	add.w	r3, r2, #20
 80085b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80085ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80085be:	1f05      	subs	r5, r0, #4
 80085c0:	42a3      	cmp	r3, r4
 80085c2:	d30c      	bcc.n	80085de <__copybits+0x36>
 80085c4:	1aa3      	subs	r3, r4, r2
 80085c6:	3b11      	subs	r3, #17
 80085c8:	f023 0303 	bic.w	r3, r3, #3
 80085cc:	3211      	adds	r2, #17
 80085ce:	42a2      	cmp	r2, r4
 80085d0:	bf88      	it	hi
 80085d2:	2300      	movhi	r3, #0
 80085d4:	4418      	add	r0, r3
 80085d6:	2300      	movs	r3, #0
 80085d8:	4288      	cmp	r0, r1
 80085da:	d305      	bcc.n	80085e8 <__copybits+0x40>
 80085dc:	bd70      	pop	{r4, r5, r6, pc}
 80085de:	f853 6b04 	ldr.w	r6, [r3], #4
 80085e2:	f845 6f04 	str.w	r6, [r5, #4]!
 80085e6:	e7eb      	b.n	80085c0 <__copybits+0x18>
 80085e8:	f840 3b04 	str.w	r3, [r0], #4
 80085ec:	e7f4      	b.n	80085d8 <__copybits+0x30>

080085ee <__any_on>:
 80085ee:	f100 0214 	add.w	r2, r0, #20
 80085f2:	6900      	ldr	r0, [r0, #16]
 80085f4:	114b      	asrs	r3, r1, #5
 80085f6:	4298      	cmp	r0, r3
 80085f8:	b510      	push	{r4, lr}
 80085fa:	db11      	blt.n	8008620 <__any_on+0x32>
 80085fc:	dd0a      	ble.n	8008614 <__any_on+0x26>
 80085fe:	f011 011f 	ands.w	r1, r1, #31
 8008602:	d007      	beq.n	8008614 <__any_on+0x26>
 8008604:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008608:	fa24 f001 	lsr.w	r0, r4, r1
 800860c:	fa00 f101 	lsl.w	r1, r0, r1
 8008610:	428c      	cmp	r4, r1
 8008612:	d10b      	bne.n	800862c <__any_on+0x3e>
 8008614:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008618:	4293      	cmp	r3, r2
 800861a:	d803      	bhi.n	8008624 <__any_on+0x36>
 800861c:	2000      	movs	r0, #0
 800861e:	bd10      	pop	{r4, pc}
 8008620:	4603      	mov	r3, r0
 8008622:	e7f7      	b.n	8008614 <__any_on+0x26>
 8008624:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008628:	2900      	cmp	r1, #0
 800862a:	d0f5      	beq.n	8008618 <__any_on+0x2a>
 800862c:	2001      	movs	r0, #1
 800862e:	e7f6      	b.n	800861e <__any_on+0x30>

08008630 <_strtol_l.constprop.0>:
 8008630:	2b24      	cmp	r3, #36	@ 0x24
 8008632:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008636:	4686      	mov	lr, r0
 8008638:	4690      	mov	r8, r2
 800863a:	d801      	bhi.n	8008640 <_strtol_l.constprop.0+0x10>
 800863c:	2b01      	cmp	r3, #1
 800863e:	d106      	bne.n	800864e <_strtol_l.constprop.0+0x1e>
 8008640:	f7fe f914 	bl	800686c <__errno>
 8008644:	2316      	movs	r3, #22
 8008646:	6003      	str	r3, [r0, #0]
 8008648:	2000      	movs	r0, #0
 800864a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800864e:	4834      	ldr	r0, [pc, #208]	@ (8008720 <_strtol_l.constprop.0+0xf0>)
 8008650:	460d      	mov	r5, r1
 8008652:	462a      	mov	r2, r5
 8008654:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008658:	5d06      	ldrb	r6, [r0, r4]
 800865a:	f016 0608 	ands.w	r6, r6, #8
 800865e:	d1f8      	bne.n	8008652 <_strtol_l.constprop.0+0x22>
 8008660:	2c2d      	cmp	r4, #45	@ 0x2d
 8008662:	d12d      	bne.n	80086c0 <_strtol_l.constprop.0+0x90>
 8008664:	782c      	ldrb	r4, [r5, #0]
 8008666:	2601      	movs	r6, #1
 8008668:	1c95      	adds	r5, r2, #2
 800866a:	f033 0210 	bics.w	r2, r3, #16
 800866e:	d109      	bne.n	8008684 <_strtol_l.constprop.0+0x54>
 8008670:	2c30      	cmp	r4, #48	@ 0x30
 8008672:	d12a      	bne.n	80086ca <_strtol_l.constprop.0+0x9a>
 8008674:	782a      	ldrb	r2, [r5, #0]
 8008676:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800867a:	2a58      	cmp	r2, #88	@ 0x58
 800867c:	d125      	bne.n	80086ca <_strtol_l.constprop.0+0x9a>
 800867e:	786c      	ldrb	r4, [r5, #1]
 8008680:	2310      	movs	r3, #16
 8008682:	3502      	adds	r5, #2
 8008684:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008688:	f10c 3cff 	add.w	ip, ip, #4294967295
 800868c:	2200      	movs	r2, #0
 800868e:	fbbc f9f3 	udiv	r9, ip, r3
 8008692:	4610      	mov	r0, r2
 8008694:	fb03 ca19 	mls	sl, r3, r9, ip
 8008698:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800869c:	2f09      	cmp	r7, #9
 800869e:	d81b      	bhi.n	80086d8 <_strtol_l.constprop.0+0xa8>
 80086a0:	463c      	mov	r4, r7
 80086a2:	42a3      	cmp	r3, r4
 80086a4:	dd27      	ble.n	80086f6 <_strtol_l.constprop.0+0xc6>
 80086a6:	1c57      	adds	r7, r2, #1
 80086a8:	d007      	beq.n	80086ba <_strtol_l.constprop.0+0x8a>
 80086aa:	4581      	cmp	r9, r0
 80086ac:	d320      	bcc.n	80086f0 <_strtol_l.constprop.0+0xc0>
 80086ae:	d101      	bne.n	80086b4 <_strtol_l.constprop.0+0x84>
 80086b0:	45a2      	cmp	sl, r4
 80086b2:	db1d      	blt.n	80086f0 <_strtol_l.constprop.0+0xc0>
 80086b4:	fb00 4003 	mla	r0, r0, r3, r4
 80086b8:	2201      	movs	r2, #1
 80086ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80086be:	e7eb      	b.n	8008698 <_strtol_l.constprop.0+0x68>
 80086c0:	2c2b      	cmp	r4, #43	@ 0x2b
 80086c2:	bf04      	itt	eq
 80086c4:	782c      	ldrbeq	r4, [r5, #0]
 80086c6:	1c95      	addeq	r5, r2, #2
 80086c8:	e7cf      	b.n	800866a <_strtol_l.constprop.0+0x3a>
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1da      	bne.n	8008684 <_strtol_l.constprop.0+0x54>
 80086ce:	2c30      	cmp	r4, #48	@ 0x30
 80086d0:	bf0c      	ite	eq
 80086d2:	2308      	moveq	r3, #8
 80086d4:	230a      	movne	r3, #10
 80086d6:	e7d5      	b.n	8008684 <_strtol_l.constprop.0+0x54>
 80086d8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80086dc:	2f19      	cmp	r7, #25
 80086de:	d801      	bhi.n	80086e4 <_strtol_l.constprop.0+0xb4>
 80086e0:	3c37      	subs	r4, #55	@ 0x37
 80086e2:	e7de      	b.n	80086a2 <_strtol_l.constprop.0+0x72>
 80086e4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80086e8:	2f19      	cmp	r7, #25
 80086ea:	d804      	bhi.n	80086f6 <_strtol_l.constprop.0+0xc6>
 80086ec:	3c57      	subs	r4, #87	@ 0x57
 80086ee:	e7d8      	b.n	80086a2 <_strtol_l.constprop.0+0x72>
 80086f0:	f04f 32ff 	mov.w	r2, #4294967295
 80086f4:	e7e1      	b.n	80086ba <_strtol_l.constprop.0+0x8a>
 80086f6:	1c53      	adds	r3, r2, #1
 80086f8:	d108      	bne.n	800870c <_strtol_l.constprop.0+0xdc>
 80086fa:	2322      	movs	r3, #34	@ 0x22
 80086fc:	f8ce 3000 	str.w	r3, [lr]
 8008700:	4660      	mov	r0, ip
 8008702:	f1b8 0f00 	cmp.w	r8, #0
 8008706:	d0a0      	beq.n	800864a <_strtol_l.constprop.0+0x1a>
 8008708:	1e69      	subs	r1, r5, #1
 800870a:	e006      	b.n	800871a <_strtol_l.constprop.0+0xea>
 800870c:	b106      	cbz	r6, 8008710 <_strtol_l.constprop.0+0xe0>
 800870e:	4240      	negs	r0, r0
 8008710:	f1b8 0f00 	cmp.w	r8, #0
 8008714:	d099      	beq.n	800864a <_strtol_l.constprop.0+0x1a>
 8008716:	2a00      	cmp	r2, #0
 8008718:	d1f6      	bne.n	8008708 <_strtol_l.constprop.0+0xd8>
 800871a:	f8c8 1000 	str.w	r1, [r8]
 800871e:	e794      	b.n	800864a <_strtol_l.constprop.0+0x1a>
 8008720:	0800e3f9 	.word	0x0800e3f9

08008724 <_strtol_r>:
 8008724:	f7ff bf84 	b.w	8008630 <_strtol_l.constprop.0>

08008728 <__ascii_wctomb>:
 8008728:	4603      	mov	r3, r0
 800872a:	4608      	mov	r0, r1
 800872c:	b141      	cbz	r1, 8008740 <__ascii_wctomb+0x18>
 800872e:	2aff      	cmp	r2, #255	@ 0xff
 8008730:	d904      	bls.n	800873c <__ascii_wctomb+0x14>
 8008732:	228a      	movs	r2, #138	@ 0x8a
 8008734:	601a      	str	r2, [r3, #0]
 8008736:	f04f 30ff 	mov.w	r0, #4294967295
 800873a:	4770      	bx	lr
 800873c:	700a      	strb	r2, [r1, #0]
 800873e:	2001      	movs	r0, #1
 8008740:	4770      	bx	lr

08008742 <__ssputs_r>:
 8008742:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008746:	688e      	ldr	r6, [r1, #8]
 8008748:	461f      	mov	r7, r3
 800874a:	42be      	cmp	r6, r7
 800874c:	680b      	ldr	r3, [r1, #0]
 800874e:	4682      	mov	sl, r0
 8008750:	460c      	mov	r4, r1
 8008752:	4690      	mov	r8, r2
 8008754:	d82d      	bhi.n	80087b2 <__ssputs_r+0x70>
 8008756:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800875a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800875e:	d026      	beq.n	80087ae <__ssputs_r+0x6c>
 8008760:	6965      	ldr	r5, [r4, #20]
 8008762:	6909      	ldr	r1, [r1, #16]
 8008764:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008768:	eba3 0901 	sub.w	r9, r3, r1
 800876c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008770:	1c7b      	adds	r3, r7, #1
 8008772:	444b      	add	r3, r9
 8008774:	106d      	asrs	r5, r5, #1
 8008776:	429d      	cmp	r5, r3
 8008778:	bf38      	it	cc
 800877a:	461d      	movcc	r5, r3
 800877c:	0553      	lsls	r3, r2, #21
 800877e:	d527      	bpl.n	80087d0 <__ssputs_r+0x8e>
 8008780:	4629      	mov	r1, r5
 8008782:	f7fc f985 	bl	8004a90 <_malloc_r>
 8008786:	4606      	mov	r6, r0
 8008788:	b360      	cbz	r0, 80087e4 <__ssputs_r+0xa2>
 800878a:	6921      	ldr	r1, [r4, #16]
 800878c:	464a      	mov	r2, r9
 800878e:	f7fe f89a 	bl	80068c6 <memcpy>
 8008792:	89a3      	ldrh	r3, [r4, #12]
 8008794:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800879c:	81a3      	strh	r3, [r4, #12]
 800879e:	6126      	str	r6, [r4, #16]
 80087a0:	6165      	str	r5, [r4, #20]
 80087a2:	444e      	add	r6, r9
 80087a4:	eba5 0509 	sub.w	r5, r5, r9
 80087a8:	6026      	str	r6, [r4, #0]
 80087aa:	60a5      	str	r5, [r4, #8]
 80087ac:	463e      	mov	r6, r7
 80087ae:	42be      	cmp	r6, r7
 80087b0:	d900      	bls.n	80087b4 <__ssputs_r+0x72>
 80087b2:	463e      	mov	r6, r7
 80087b4:	6820      	ldr	r0, [r4, #0]
 80087b6:	4632      	mov	r2, r6
 80087b8:	4641      	mov	r1, r8
 80087ba:	f000 f9c5 	bl	8008b48 <memmove>
 80087be:	68a3      	ldr	r3, [r4, #8]
 80087c0:	1b9b      	subs	r3, r3, r6
 80087c2:	60a3      	str	r3, [r4, #8]
 80087c4:	6823      	ldr	r3, [r4, #0]
 80087c6:	4433      	add	r3, r6
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	2000      	movs	r0, #0
 80087cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d0:	462a      	mov	r2, r5
 80087d2:	f000 fa05 	bl	8008be0 <_realloc_r>
 80087d6:	4606      	mov	r6, r0
 80087d8:	2800      	cmp	r0, #0
 80087da:	d1e0      	bne.n	800879e <__ssputs_r+0x5c>
 80087dc:	6921      	ldr	r1, [r4, #16]
 80087de:	4650      	mov	r0, sl
 80087e0:	f7fe fede 	bl	80075a0 <_free_r>
 80087e4:	230c      	movs	r3, #12
 80087e6:	f8ca 3000 	str.w	r3, [sl]
 80087ea:	89a3      	ldrh	r3, [r4, #12]
 80087ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087f0:	81a3      	strh	r3, [r4, #12]
 80087f2:	f04f 30ff 	mov.w	r0, #4294967295
 80087f6:	e7e9      	b.n	80087cc <__ssputs_r+0x8a>

080087f8 <_svfiprintf_r>:
 80087f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fc:	4698      	mov	r8, r3
 80087fe:	898b      	ldrh	r3, [r1, #12]
 8008800:	061b      	lsls	r3, r3, #24
 8008802:	b09d      	sub	sp, #116	@ 0x74
 8008804:	4607      	mov	r7, r0
 8008806:	460d      	mov	r5, r1
 8008808:	4614      	mov	r4, r2
 800880a:	d510      	bpl.n	800882e <_svfiprintf_r+0x36>
 800880c:	690b      	ldr	r3, [r1, #16]
 800880e:	b973      	cbnz	r3, 800882e <_svfiprintf_r+0x36>
 8008810:	2140      	movs	r1, #64	@ 0x40
 8008812:	f7fc f93d 	bl	8004a90 <_malloc_r>
 8008816:	6028      	str	r0, [r5, #0]
 8008818:	6128      	str	r0, [r5, #16]
 800881a:	b930      	cbnz	r0, 800882a <_svfiprintf_r+0x32>
 800881c:	230c      	movs	r3, #12
 800881e:	603b      	str	r3, [r7, #0]
 8008820:	f04f 30ff 	mov.w	r0, #4294967295
 8008824:	b01d      	add	sp, #116	@ 0x74
 8008826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800882a:	2340      	movs	r3, #64	@ 0x40
 800882c:	616b      	str	r3, [r5, #20]
 800882e:	2300      	movs	r3, #0
 8008830:	9309      	str	r3, [sp, #36]	@ 0x24
 8008832:	2320      	movs	r3, #32
 8008834:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008838:	f8cd 800c 	str.w	r8, [sp, #12]
 800883c:	2330      	movs	r3, #48	@ 0x30
 800883e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089dc <_svfiprintf_r+0x1e4>
 8008842:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008846:	f04f 0901 	mov.w	r9, #1
 800884a:	4623      	mov	r3, r4
 800884c:	469a      	mov	sl, r3
 800884e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008852:	b10a      	cbz	r2, 8008858 <_svfiprintf_r+0x60>
 8008854:	2a25      	cmp	r2, #37	@ 0x25
 8008856:	d1f9      	bne.n	800884c <_svfiprintf_r+0x54>
 8008858:	ebba 0b04 	subs.w	fp, sl, r4
 800885c:	d00b      	beq.n	8008876 <_svfiprintf_r+0x7e>
 800885e:	465b      	mov	r3, fp
 8008860:	4622      	mov	r2, r4
 8008862:	4629      	mov	r1, r5
 8008864:	4638      	mov	r0, r7
 8008866:	f7ff ff6c 	bl	8008742 <__ssputs_r>
 800886a:	3001      	adds	r0, #1
 800886c:	f000 80a7 	beq.w	80089be <_svfiprintf_r+0x1c6>
 8008870:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008872:	445a      	add	r2, fp
 8008874:	9209      	str	r2, [sp, #36]	@ 0x24
 8008876:	f89a 3000 	ldrb.w	r3, [sl]
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 809f 	beq.w	80089be <_svfiprintf_r+0x1c6>
 8008880:	2300      	movs	r3, #0
 8008882:	f04f 32ff 	mov.w	r2, #4294967295
 8008886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800888a:	f10a 0a01 	add.w	sl, sl, #1
 800888e:	9304      	str	r3, [sp, #16]
 8008890:	9307      	str	r3, [sp, #28]
 8008892:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008896:	931a      	str	r3, [sp, #104]	@ 0x68
 8008898:	4654      	mov	r4, sl
 800889a:	2205      	movs	r2, #5
 800889c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a0:	484e      	ldr	r0, [pc, #312]	@ (80089dc <_svfiprintf_r+0x1e4>)
 80088a2:	f7f7 fc9d 	bl	80001e0 <memchr>
 80088a6:	9a04      	ldr	r2, [sp, #16]
 80088a8:	b9d8      	cbnz	r0, 80088e2 <_svfiprintf_r+0xea>
 80088aa:	06d0      	lsls	r0, r2, #27
 80088ac:	bf44      	itt	mi
 80088ae:	2320      	movmi	r3, #32
 80088b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088b4:	0711      	lsls	r1, r2, #28
 80088b6:	bf44      	itt	mi
 80088b8:	232b      	movmi	r3, #43	@ 0x2b
 80088ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088be:	f89a 3000 	ldrb.w	r3, [sl]
 80088c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80088c4:	d015      	beq.n	80088f2 <_svfiprintf_r+0xfa>
 80088c6:	9a07      	ldr	r2, [sp, #28]
 80088c8:	4654      	mov	r4, sl
 80088ca:	2000      	movs	r0, #0
 80088cc:	f04f 0c0a 	mov.w	ip, #10
 80088d0:	4621      	mov	r1, r4
 80088d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088d6:	3b30      	subs	r3, #48	@ 0x30
 80088d8:	2b09      	cmp	r3, #9
 80088da:	d94b      	bls.n	8008974 <_svfiprintf_r+0x17c>
 80088dc:	b1b0      	cbz	r0, 800890c <_svfiprintf_r+0x114>
 80088de:	9207      	str	r2, [sp, #28]
 80088e0:	e014      	b.n	800890c <_svfiprintf_r+0x114>
 80088e2:	eba0 0308 	sub.w	r3, r0, r8
 80088e6:	fa09 f303 	lsl.w	r3, r9, r3
 80088ea:	4313      	orrs	r3, r2
 80088ec:	9304      	str	r3, [sp, #16]
 80088ee:	46a2      	mov	sl, r4
 80088f0:	e7d2      	b.n	8008898 <_svfiprintf_r+0xa0>
 80088f2:	9b03      	ldr	r3, [sp, #12]
 80088f4:	1d19      	adds	r1, r3, #4
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	9103      	str	r1, [sp, #12]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	bfbb      	ittet	lt
 80088fe:	425b      	neglt	r3, r3
 8008900:	f042 0202 	orrlt.w	r2, r2, #2
 8008904:	9307      	strge	r3, [sp, #28]
 8008906:	9307      	strlt	r3, [sp, #28]
 8008908:	bfb8      	it	lt
 800890a:	9204      	strlt	r2, [sp, #16]
 800890c:	7823      	ldrb	r3, [r4, #0]
 800890e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008910:	d10a      	bne.n	8008928 <_svfiprintf_r+0x130>
 8008912:	7863      	ldrb	r3, [r4, #1]
 8008914:	2b2a      	cmp	r3, #42	@ 0x2a
 8008916:	d132      	bne.n	800897e <_svfiprintf_r+0x186>
 8008918:	9b03      	ldr	r3, [sp, #12]
 800891a:	1d1a      	adds	r2, r3, #4
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	9203      	str	r2, [sp, #12]
 8008920:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008924:	3402      	adds	r4, #2
 8008926:	9305      	str	r3, [sp, #20]
 8008928:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80089ec <_svfiprintf_r+0x1f4>
 800892c:	7821      	ldrb	r1, [r4, #0]
 800892e:	2203      	movs	r2, #3
 8008930:	4650      	mov	r0, sl
 8008932:	f7f7 fc55 	bl	80001e0 <memchr>
 8008936:	b138      	cbz	r0, 8008948 <_svfiprintf_r+0x150>
 8008938:	9b04      	ldr	r3, [sp, #16]
 800893a:	eba0 000a 	sub.w	r0, r0, sl
 800893e:	2240      	movs	r2, #64	@ 0x40
 8008940:	4082      	lsls	r2, r0
 8008942:	4313      	orrs	r3, r2
 8008944:	3401      	adds	r4, #1
 8008946:	9304      	str	r3, [sp, #16]
 8008948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800894c:	4824      	ldr	r0, [pc, #144]	@ (80089e0 <_svfiprintf_r+0x1e8>)
 800894e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008952:	2206      	movs	r2, #6
 8008954:	f7f7 fc44 	bl	80001e0 <memchr>
 8008958:	2800      	cmp	r0, #0
 800895a:	d036      	beq.n	80089ca <_svfiprintf_r+0x1d2>
 800895c:	4b21      	ldr	r3, [pc, #132]	@ (80089e4 <_svfiprintf_r+0x1ec>)
 800895e:	bb1b      	cbnz	r3, 80089a8 <_svfiprintf_r+0x1b0>
 8008960:	9b03      	ldr	r3, [sp, #12]
 8008962:	3307      	adds	r3, #7
 8008964:	f023 0307 	bic.w	r3, r3, #7
 8008968:	3308      	adds	r3, #8
 800896a:	9303      	str	r3, [sp, #12]
 800896c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800896e:	4433      	add	r3, r6
 8008970:	9309      	str	r3, [sp, #36]	@ 0x24
 8008972:	e76a      	b.n	800884a <_svfiprintf_r+0x52>
 8008974:	fb0c 3202 	mla	r2, ip, r2, r3
 8008978:	460c      	mov	r4, r1
 800897a:	2001      	movs	r0, #1
 800897c:	e7a8      	b.n	80088d0 <_svfiprintf_r+0xd8>
 800897e:	2300      	movs	r3, #0
 8008980:	3401      	adds	r4, #1
 8008982:	9305      	str	r3, [sp, #20]
 8008984:	4619      	mov	r1, r3
 8008986:	f04f 0c0a 	mov.w	ip, #10
 800898a:	4620      	mov	r0, r4
 800898c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008990:	3a30      	subs	r2, #48	@ 0x30
 8008992:	2a09      	cmp	r2, #9
 8008994:	d903      	bls.n	800899e <_svfiprintf_r+0x1a6>
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0c6      	beq.n	8008928 <_svfiprintf_r+0x130>
 800899a:	9105      	str	r1, [sp, #20]
 800899c:	e7c4      	b.n	8008928 <_svfiprintf_r+0x130>
 800899e:	fb0c 2101 	mla	r1, ip, r1, r2
 80089a2:	4604      	mov	r4, r0
 80089a4:	2301      	movs	r3, #1
 80089a6:	e7f0      	b.n	800898a <_svfiprintf_r+0x192>
 80089a8:	ab03      	add	r3, sp, #12
 80089aa:	9300      	str	r3, [sp, #0]
 80089ac:	462a      	mov	r2, r5
 80089ae:	4b0e      	ldr	r3, [pc, #56]	@ (80089e8 <_svfiprintf_r+0x1f0>)
 80089b0:	a904      	add	r1, sp, #16
 80089b2:	4638      	mov	r0, r7
 80089b4:	f7fc ffae 	bl	8005914 <_printf_float>
 80089b8:	1c42      	adds	r2, r0, #1
 80089ba:	4606      	mov	r6, r0
 80089bc:	d1d6      	bne.n	800896c <_svfiprintf_r+0x174>
 80089be:	89ab      	ldrh	r3, [r5, #12]
 80089c0:	065b      	lsls	r3, r3, #25
 80089c2:	f53f af2d 	bmi.w	8008820 <_svfiprintf_r+0x28>
 80089c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089c8:	e72c      	b.n	8008824 <_svfiprintf_r+0x2c>
 80089ca:	ab03      	add	r3, sp, #12
 80089cc:	9300      	str	r3, [sp, #0]
 80089ce:	462a      	mov	r2, r5
 80089d0:	4b05      	ldr	r3, [pc, #20]	@ (80089e8 <_svfiprintf_r+0x1f0>)
 80089d2:	a904      	add	r1, sp, #16
 80089d4:	4638      	mov	r0, r7
 80089d6:	f7fd fa35 	bl	8005e44 <_printf_i>
 80089da:	e7ed      	b.n	80089b8 <_svfiprintf_r+0x1c0>
 80089dc:	0800e4f9 	.word	0x0800e4f9
 80089e0:	0800e503 	.word	0x0800e503
 80089e4:	08005915 	.word	0x08005915
 80089e8:	08008743 	.word	0x08008743
 80089ec:	0800e4ff 	.word	0x0800e4ff

080089f0 <__sflush_r>:
 80089f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f8:	0716      	lsls	r6, r2, #28
 80089fa:	4605      	mov	r5, r0
 80089fc:	460c      	mov	r4, r1
 80089fe:	d454      	bmi.n	8008aaa <__sflush_r+0xba>
 8008a00:	684b      	ldr	r3, [r1, #4]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	dc02      	bgt.n	8008a0c <__sflush_r+0x1c>
 8008a06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	dd48      	ble.n	8008a9e <__sflush_r+0xae>
 8008a0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a0e:	2e00      	cmp	r6, #0
 8008a10:	d045      	beq.n	8008a9e <__sflush_r+0xae>
 8008a12:	2300      	movs	r3, #0
 8008a14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008a18:	682f      	ldr	r7, [r5, #0]
 8008a1a:	6a21      	ldr	r1, [r4, #32]
 8008a1c:	602b      	str	r3, [r5, #0]
 8008a1e:	d030      	beq.n	8008a82 <__sflush_r+0x92>
 8008a20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008a22:	89a3      	ldrh	r3, [r4, #12]
 8008a24:	0759      	lsls	r1, r3, #29
 8008a26:	d505      	bpl.n	8008a34 <__sflush_r+0x44>
 8008a28:	6863      	ldr	r3, [r4, #4]
 8008a2a:	1ad2      	subs	r2, r2, r3
 8008a2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008a2e:	b10b      	cbz	r3, 8008a34 <__sflush_r+0x44>
 8008a30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008a32:	1ad2      	subs	r2, r2, r3
 8008a34:	2300      	movs	r3, #0
 8008a36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008a38:	6a21      	ldr	r1, [r4, #32]
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	47b0      	blx	r6
 8008a3e:	1c43      	adds	r3, r0, #1
 8008a40:	89a3      	ldrh	r3, [r4, #12]
 8008a42:	d106      	bne.n	8008a52 <__sflush_r+0x62>
 8008a44:	6829      	ldr	r1, [r5, #0]
 8008a46:	291d      	cmp	r1, #29
 8008a48:	d82b      	bhi.n	8008aa2 <__sflush_r+0xb2>
 8008a4a:	4a2a      	ldr	r2, [pc, #168]	@ (8008af4 <__sflush_r+0x104>)
 8008a4c:	410a      	asrs	r2, r1
 8008a4e:	07d6      	lsls	r6, r2, #31
 8008a50:	d427      	bmi.n	8008aa2 <__sflush_r+0xb2>
 8008a52:	2200      	movs	r2, #0
 8008a54:	6062      	str	r2, [r4, #4]
 8008a56:	04d9      	lsls	r1, r3, #19
 8008a58:	6922      	ldr	r2, [r4, #16]
 8008a5a:	6022      	str	r2, [r4, #0]
 8008a5c:	d504      	bpl.n	8008a68 <__sflush_r+0x78>
 8008a5e:	1c42      	adds	r2, r0, #1
 8008a60:	d101      	bne.n	8008a66 <__sflush_r+0x76>
 8008a62:	682b      	ldr	r3, [r5, #0]
 8008a64:	b903      	cbnz	r3, 8008a68 <__sflush_r+0x78>
 8008a66:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a6a:	602f      	str	r7, [r5, #0]
 8008a6c:	b1b9      	cbz	r1, 8008a9e <__sflush_r+0xae>
 8008a6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a72:	4299      	cmp	r1, r3
 8008a74:	d002      	beq.n	8008a7c <__sflush_r+0x8c>
 8008a76:	4628      	mov	r0, r5
 8008a78:	f7fe fd92 	bl	80075a0 <_free_r>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a80:	e00d      	b.n	8008a9e <__sflush_r+0xae>
 8008a82:	2301      	movs	r3, #1
 8008a84:	4628      	mov	r0, r5
 8008a86:	47b0      	blx	r6
 8008a88:	4602      	mov	r2, r0
 8008a8a:	1c50      	adds	r0, r2, #1
 8008a8c:	d1c9      	bne.n	8008a22 <__sflush_r+0x32>
 8008a8e:	682b      	ldr	r3, [r5, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d0c6      	beq.n	8008a22 <__sflush_r+0x32>
 8008a94:	2b1d      	cmp	r3, #29
 8008a96:	d001      	beq.n	8008a9c <__sflush_r+0xac>
 8008a98:	2b16      	cmp	r3, #22
 8008a9a:	d11e      	bne.n	8008ada <__sflush_r+0xea>
 8008a9c:	602f      	str	r7, [r5, #0]
 8008a9e:	2000      	movs	r0, #0
 8008aa0:	e022      	b.n	8008ae8 <__sflush_r+0xf8>
 8008aa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008aa6:	b21b      	sxth	r3, r3
 8008aa8:	e01b      	b.n	8008ae2 <__sflush_r+0xf2>
 8008aaa:	690f      	ldr	r7, [r1, #16]
 8008aac:	2f00      	cmp	r7, #0
 8008aae:	d0f6      	beq.n	8008a9e <__sflush_r+0xae>
 8008ab0:	0793      	lsls	r3, r2, #30
 8008ab2:	680e      	ldr	r6, [r1, #0]
 8008ab4:	bf08      	it	eq
 8008ab6:	694b      	ldreq	r3, [r1, #20]
 8008ab8:	600f      	str	r7, [r1, #0]
 8008aba:	bf18      	it	ne
 8008abc:	2300      	movne	r3, #0
 8008abe:	eba6 0807 	sub.w	r8, r6, r7
 8008ac2:	608b      	str	r3, [r1, #8]
 8008ac4:	f1b8 0f00 	cmp.w	r8, #0
 8008ac8:	dde9      	ble.n	8008a9e <__sflush_r+0xae>
 8008aca:	6a21      	ldr	r1, [r4, #32]
 8008acc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008ace:	4643      	mov	r3, r8
 8008ad0:	463a      	mov	r2, r7
 8008ad2:	4628      	mov	r0, r5
 8008ad4:	47b0      	blx	r6
 8008ad6:	2800      	cmp	r0, #0
 8008ad8:	dc08      	bgt.n	8008aec <__sflush_r+0xfc>
 8008ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ae2:	81a3      	strh	r3, [r4, #12]
 8008ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aec:	4407      	add	r7, r0
 8008aee:	eba8 0800 	sub.w	r8, r8, r0
 8008af2:	e7e7      	b.n	8008ac4 <__sflush_r+0xd4>
 8008af4:	dfbffffe 	.word	0xdfbffffe

08008af8 <_fflush_r>:
 8008af8:	b538      	push	{r3, r4, r5, lr}
 8008afa:	690b      	ldr	r3, [r1, #16]
 8008afc:	4605      	mov	r5, r0
 8008afe:	460c      	mov	r4, r1
 8008b00:	b913      	cbnz	r3, 8008b08 <_fflush_r+0x10>
 8008b02:	2500      	movs	r5, #0
 8008b04:	4628      	mov	r0, r5
 8008b06:	bd38      	pop	{r3, r4, r5, pc}
 8008b08:	b118      	cbz	r0, 8008b12 <_fflush_r+0x1a>
 8008b0a:	6a03      	ldr	r3, [r0, #32]
 8008b0c:	b90b      	cbnz	r3, 8008b12 <_fflush_r+0x1a>
 8008b0e:	f7fd fd59 	bl	80065c4 <__sinit>
 8008b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d0f3      	beq.n	8008b02 <_fflush_r+0xa>
 8008b1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008b1c:	07d0      	lsls	r0, r2, #31
 8008b1e:	d404      	bmi.n	8008b2a <_fflush_r+0x32>
 8008b20:	0599      	lsls	r1, r3, #22
 8008b22:	d402      	bmi.n	8008b2a <_fflush_r+0x32>
 8008b24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b26:	f7fd fecc 	bl	80068c2 <__retarget_lock_acquire_recursive>
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	4621      	mov	r1, r4
 8008b2e:	f7ff ff5f 	bl	80089f0 <__sflush_r>
 8008b32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b34:	07da      	lsls	r2, r3, #31
 8008b36:	4605      	mov	r5, r0
 8008b38:	d4e4      	bmi.n	8008b04 <_fflush_r+0xc>
 8008b3a:	89a3      	ldrh	r3, [r4, #12]
 8008b3c:	059b      	lsls	r3, r3, #22
 8008b3e:	d4e1      	bmi.n	8008b04 <_fflush_r+0xc>
 8008b40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b42:	f7fd febf 	bl	80068c4 <__retarget_lock_release_recursive>
 8008b46:	e7dd      	b.n	8008b04 <_fflush_r+0xc>

08008b48 <memmove>:
 8008b48:	4288      	cmp	r0, r1
 8008b4a:	b510      	push	{r4, lr}
 8008b4c:	eb01 0402 	add.w	r4, r1, r2
 8008b50:	d902      	bls.n	8008b58 <memmove+0x10>
 8008b52:	4284      	cmp	r4, r0
 8008b54:	4623      	mov	r3, r4
 8008b56:	d807      	bhi.n	8008b68 <memmove+0x20>
 8008b58:	1e43      	subs	r3, r0, #1
 8008b5a:	42a1      	cmp	r1, r4
 8008b5c:	d008      	beq.n	8008b70 <memmove+0x28>
 8008b5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b66:	e7f8      	b.n	8008b5a <memmove+0x12>
 8008b68:	4402      	add	r2, r0
 8008b6a:	4601      	mov	r1, r0
 8008b6c:	428a      	cmp	r2, r1
 8008b6e:	d100      	bne.n	8008b72 <memmove+0x2a>
 8008b70:	bd10      	pop	{r4, pc}
 8008b72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b7a:	e7f7      	b.n	8008b6c <memmove+0x24>

08008b7c <__assert_func>:
 8008b7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b7e:	4614      	mov	r4, r2
 8008b80:	461a      	mov	r2, r3
 8008b82:	4b09      	ldr	r3, [pc, #36]	@ (8008ba8 <__assert_func+0x2c>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4605      	mov	r5, r0
 8008b88:	68d8      	ldr	r0, [r3, #12]
 8008b8a:	b954      	cbnz	r4, 8008ba2 <__assert_func+0x26>
 8008b8c:	4b07      	ldr	r3, [pc, #28]	@ (8008bac <__assert_func+0x30>)
 8008b8e:	461c      	mov	r4, r3
 8008b90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b94:	9100      	str	r1, [sp, #0]
 8008b96:	462b      	mov	r3, r5
 8008b98:	4905      	ldr	r1, [pc, #20]	@ (8008bb0 <__assert_func+0x34>)
 8008b9a:	f000 f84f 	bl	8008c3c <fiprintf>
 8008b9e:	f000 f85f 	bl	8008c60 <abort>
 8008ba2:	4b04      	ldr	r3, [pc, #16]	@ (8008bb4 <__assert_func+0x38>)
 8008ba4:	e7f4      	b.n	8008b90 <__assert_func+0x14>
 8008ba6:	bf00      	nop
 8008ba8:	200001a4 	.word	0x200001a4
 8008bac:	0800e545 	.word	0x0800e545
 8008bb0:	0800e517 	.word	0x0800e517
 8008bb4:	0800e50a 	.word	0x0800e50a

08008bb8 <_calloc_r>:
 8008bb8:	b570      	push	{r4, r5, r6, lr}
 8008bba:	fba1 5402 	umull	r5, r4, r1, r2
 8008bbe:	b93c      	cbnz	r4, 8008bd0 <_calloc_r+0x18>
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	f7fb ff65 	bl	8004a90 <_malloc_r>
 8008bc6:	4606      	mov	r6, r0
 8008bc8:	b928      	cbnz	r0, 8008bd6 <_calloc_r+0x1e>
 8008bca:	2600      	movs	r6, #0
 8008bcc:	4630      	mov	r0, r6
 8008bce:	bd70      	pop	{r4, r5, r6, pc}
 8008bd0:	220c      	movs	r2, #12
 8008bd2:	6002      	str	r2, [r0, #0]
 8008bd4:	e7f9      	b.n	8008bca <_calloc_r+0x12>
 8008bd6:	462a      	mov	r2, r5
 8008bd8:	4621      	mov	r1, r4
 8008bda:	f7fd fd8c 	bl	80066f6 <memset>
 8008bde:	e7f5      	b.n	8008bcc <_calloc_r+0x14>

08008be0 <_realloc_r>:
 8008be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be4:	4680      	mov	r8, r0
 8008be6:	4615      	mov	r5, r2
 8008be8:	460c      	mov	r4, r1
 8008bea:	b921      	cbnz	r1, 8008bf6 <_realloc_r+0x16>
 8008bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bf0:	4611      	mov	r1, r2
 8008bf2:	f7fb bf4d 	b.w	8004a90 <_malloc_r>
 8008bf6:	b92a      	cbnz	r2, 8008c04 <_realloc_r+0x24>
 8008bf8:	f7fe fcd2 	bl	80075a0 <_free_r>
 8008bfc:	2400      	movs	r4, #0
 8008bfe:	4620      	mov	r0, r4
 8008c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c04:	f000 f833 	bl	8008c6e <_malloc_usable_size_r>
 8008c08:	4285      	cmp	r5, r0
 8008c0a:	4606      	mov	r6, r0
 8008c0c:	d802      	bhi.n	8008c14 <_realloc_r+0x34>
 8008c0e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008c12:	d8f4      	bhi.n	8008bfe <_realloc_r+0x1e>
 8008c14:	4629      	mov	r1, r5
 8008c16:	4640      	mov	r0, r8
 8008c18:	f7fb ff3a 	bl	8004a90 <_malloc_r>
 8008c1c:	4607      	mov	r7, r0
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	d0ec      	beq.n	8008bfc <_realloc_r+0x1c>
 8008c22:	42b5      	cmp	r5, r6
 8008c24:	462a      	mov	r2, r5
 8008c26:	4621      	mov	r1, r4
 8008c28:	bf28      	it	cs
 8008c2a:	4632      	movcs	r2, r6
 8008c2c:	f7fd fe4b 	bl	80068c6 <memcpy>
 8008c30:	4621      	mov	r1, r4
 8008c32:	4640      	mov	r0, r8
 8008c34:	f7fe fcb4 	bl	80075a0 <_free_r>
 8008c38:	463c      	mov	r4, r7
 8008c3a:	e7e0      	b.n	8008bfe <_realloc_r+0x1e>

08008c3c <fiprintf>:
 8008c3c:	b40e      	push	{r1, r2, r3}
 8008c3e:	b503      	push	{r0, r1, lr}
 8008c40:	4601      	mov	r1, r0
 8008c42:	ab03      	add	r3, sp, #12
 8008c44:	4805      	ldr	r0, [pc, #20]	@ (8008c5c <fiprintf+0x20>)
 8008c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c4a:	6800      	ldr	r0, [r0, #0]
 8008c4c:	9301      	str	r3, [sp, #4]
 8008c4e:	f000 f83f 	bl	8008cd0 <_vfiprintf_r>
 8008c52:	b002      	add	sp, #8
 8008c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c58:	b003      	add	sp, #12
 8008c5a:	4770      	bx	lr
 8008c5c:	200001a4 	.word	0x200001a4

08008c60 <abort>:
 8008c60:	b508      	push	{r3, lr}
 8008c62:	2006      	movs	r0, #6
 8008c64:	f000 fa08 	bl	8009078 <raise>
 8008c68:	2001      	movs	r0, #1
 8008c6a:	f7f9 faa5 	bl	80021b8 <_exit>

08008c6e <_malloc_usable_size_r>:
 8008c6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c72:	1f18      	subs	r0, r3, #4
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	bfbc      	itt	lt
 8008c78:	580b      	ldrlt	r3, [r1, r0]
 8008c7a:	18c0      	addlt	r0, r0, r3
 8008c7c:	4770      	bx	lr

08008c7e <__sfputc_r>:
 8008c7e:	6893      	ldr	r3, [r2, #8]
 8008c80:	3b01      	subs	r3, #1
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	b410      	push	{r4}
 8008c86:	6093      	str	r3, [r2, #8]
 8008c88:	da08      	bge.n	8008c9c <__sfputc_r+0x1e>
 8008c8a:	6994      	ldr	r4, [r2, #24]
 8008c8c:	42a3      	cmp	r3, r4
 8008c8e:	db01      	blt.n	8008c94 <__sfputc_r+0x16>
 8008c90:	290a      	cmp	r1, #10
 8008c92:	d103      	bne.n	8008c9c <__sfputc_r+0x1e>
 8008c94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c98:	f000 b932 	b.w	8008f00 <__swbuf_r>
 8008c9c:	6813      	ldr	r3, [r2, #0]
 8008c9e:	1c58      	adds	r0, r3, #1
 8008ca0:	6010      	str	r0, [r2, #0]
 8008ca2:	7019      	strb	r1, [r3, #0]
 8008ca4:	4608      	mov	r0, r1
 8008ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <__sfputs_r>:
 8008cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cae:	4606      	mov	r6, r0
 8008cb0:	460f      	mov	r7, r1
 8008cb2:	4614      	mov	r4, r2
 8008cb4:	18d5      	adds	r5, r2, r3
 8008cb6:	42ac      	cmp	r4, r5
 8008cb8:	d101      	bne.n	8008cbe <__sfputs_r+0x12>
 8008cba:	2000      	movs	r0, #0
 8008cbc:	e007      	b.n	8008cce <__sfputs_r+0x22>
 8008cbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cc2:	463a      	mov	r2, r7
 8008cc4:	4630      	mov	r0, r6
 8008cc6:	f7ff ffda 	bl	8008c7e <__sfputc_r>
 8008cca:	1c43      	adds	r3, r0, #1
 8008ccc:	d1f3      	bne.n	8008cb6 <__sfputs_r+0xa>
 8008cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008cd0 <_vfiprintf_r>:
 8008cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd4:	460d      	mov	r5, r1
 8008cd6:	b09d      	sub	sp, #116	@ 0x74
 8008cd8:	4614      	mov	r4, r2
 8008cda:	4698      	mov	r8, r3
 8008cdc:	4606      	mov	r6, r0
 8008cde:	b118      	cbz	r0, 8008ce8 <_vfiprintf_r+0x18>
 8008ce0:	6a03      	ldr	r3, [r0, #32]
 8008ce2:	b90b      	cbnz	r3, 8008ce8 <_vfiprintf_r+0x18>
 8008ce4:	f7fd fc6e 	bl	80065c4 <__sinit>
 8008ce8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cea:	07d9      	lsls	r1, r3, #31
 8008cec:	d405      	bmi.n	8008cfa <_vfiprintf_r+0x2a>
 8008cee:	89ab      	ldrh	r3, [r5, #12]
 8008cf0:	059a      	lsls	r2, r3, #22
 8008cf2:	d402      	bmi.n	8008cfa <_vfiprintf_r+0x2a>
 8008cf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cf6:	f7fd fde4 	bl	80068c2 <__retarget_lock_acquire_recursive>
 8008cfa:	89ab      	ldrh	r3, [r5, #12]
 8008cfc:	071b      	lsls	r3, r3, #28
 8008cfe:	d501      	bpl.n	8008d04 <_vfiprintf_r+0x34>
 8008d00:	692b      	ldr	r3, [r5, #16]
 8008d02:	b99b      	cbnz	r3, 8008d2c <_vfiprintf_r+0x5c>
 8008d04:	4629      	mov	r1, r5
 8008d06:	4630      	mov	r0, r6
 8008d08:	f000 f938 	bl	8008f7c <__swsetup_r>
 8008d0c:	b170      	cbz	r0, 8008d2c <_vfiprintf_r+0x5c>
 8008d0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d10:	07dc      	lsls	r4, r3, #31
 8008d12:	d504      	bpl.n	8008d1e <_vfiprintf_r+0x4e>
 8008d14:	f04f 30ff 	mov.w	r0, #4294967295
 8008d18:	b01d      	add	sp, #116	@ 0x74
 8008d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d1e:	89ab      	ldrh	r3, [r5, #12]
 8008d20:	0598      	lsls	r0, r3, #22
 8008d22:	d4f7      	bmi.n	8008d14 <_vfiprintf_r+0x44>
 8008d24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d26:	f7fd fdcd 	bl	80068c4 <__retarget_lock_release_recursive>
 8008d2a:	e7f3      	b.n	8008d14 <_vfiprintf_r+0x44>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d30:	2320      	movs	r3, #32
 8008d32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d3a:	2330      	movs	r3, #48	@ 0x30
 8008d3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008eec <_vfiprintf_r+0x21c>
 8008d40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d44:	f04f 0901 	mov.w	r9, #1
 8008d48:	4623      	mov	r3, r4
 8008d4a:	469a      	mov	sl, r3
 8008d4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d50:	b10a      	cbz	r2, 8008d56 <_vfiprintf_r+0x86>
 8008d52:	2a25      	cmp	r2, #37	@ 0x25
 8008d54:	d1f9      	bne.n	8008d4a <_vfiprintf_r+0x7a>
 8008d56:	ebba 0b04 	subs.w	fp, sl, r4
 8008d5a:	d00b      	beq.n	8008d74 <_vfiprintf_r+0xa4>
 8008d5c:	465b      	mov	r3, fp
 8008d5e:	4622      	mov	r2, r4
 8008d60:	4629      	mov	r1, r5
 8008d62:	4630      	mov	r0, r6
 8008d64:	f7ff ffa2 	bl	8008cac <__sfputs_r>
 8008d68:	3001      	adds	r0, #1
 8008d6a:	f000 80a7 	beq.w	8008ebc <_vfiprintf_r+0x1ec>
 8008d6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d70:	445a      	add	r2, fp
 8008d72:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d74:	f89a 3000 	ldrb.w	r3, [sl]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	f000 809f 	beq.w	8008ebc <_vfiprintf_r+0x1ec>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	f04f 32ff 	mov.w	r2, #4294967295
 8008d84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d88:	f10a 0a01 	add.w	sl, sl, #1
 8008d8c:	9304      	str	r3, [sp, #16]
 8008d8e:	9307      	str	r3, [sp, #28]
 8008d90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d94:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d96:	4654      	mov	r4, sl
 8008d98:	2205      	movs	r2, #5
 8008d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d9e:	4853      	ldr	r0, [pc, #332]	@ (8008eec <_vfiprintf_r+0x21c>)
 8008da0:	f7f7 fa1e 	bl	80001e0 <memchr>
 8008da4:	9a04      	ldr	r2, [sp, #16]
 8008da6:	b9d8      	cbnz	r0, 8008de0 <_vfiprintf_r+0x110>
 8008da8:	06d1      	lsls	r1, r2, #27
 8008daa:	bf44      	itt	mi
 8008dac:	2320      	movmi	r3, #32
 8008dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008db2:	0713      	lsls	r3, r2, #28
 8008db4:	bf44      	itt	mi
 8008db6:	232b      	movmi	r3, #43	@ 0x2b
 8008db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8008dc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dc2:	d015      	beq.n	8008df0 <_vfiprintf_r+0x120>
 8008dc4:	9a07      	ldr	r2, [sp, #28]
 8008dc6:	4654      	mov	r4, sl
 8008dc8:	2000      	movs	r0, #0
 8008dca:	f04f 0c0a 	mov.w	ip, #10
 8008dce:	4621      	mov	r1, r4
 8008dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dd4:	3b30      	subs	r3, #48	@ 0x30
 8008dd6:	2b09      	cmp	r3, #9
 8008dd8:	d94b      	bls.n	8008e72 <_vfiprintf_r+0x1a2>
 8008dda:	b1b0      	cbz	r0, 8008e0a <_vfiprintf_r+0x13a>
 8008ddc:	9207      	str	r2, [sp, #28]
 8008dde:	e014      	b.n	8008e0a <_vfiprintf_r+0x13a>
 8008de0:	eba0 0308 	sub.w	r3, r0, r8
 8008de4:	fa09 f303 	lsl.w	r3, r9, r3
 8008de8:	4313      	orrs	r3, r2
 8008dea:	9304      	str	r3, [sp, #16]
 8008dec:	46a2      	mov	sl, r4
 8008dee:	e7d2      	b.n	8008d96 <_vfiprintf_r+0xc6>
 8008df0:	9b03      	ldr	r3, [sp, #12]
 8008df2:	1d19      	adds	r1, r3, #4
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	9103      	str	r1, [sp, #12]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	bfbb      	ittet	lt
 8008dfc:	425b      	neglt	r3, r3
 8008dfe:	f042 0202 	orrlt.w	r2, r2, #2
 8008e02:	9307      	strge	r3, [sp, #28]
 8008e04:	9307      	strlt	r3, [sp, #28]
 8008e06:	bfb8      	it	lt
 8008e08:	9204      	strlt	r2, [sp, #16]
 8008e0a:	7823      	ldrb	r3, [r4, #0]
 8008e0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e0e:	d10a      	bne.n	8008e26 <_vfiprintf_r+0x156>
 8008e10:	7863      	ldrb	r3, [r4, #1]
 8008e12:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e14:	d132      	bne.n	8008e7c <_vfiprintf_r+0x1ac>
 8008e16:	9b03      	ldr	r3, [sp, #12]
 8008e18:	1d1a      	adds	r2, r3, #4
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	9203      	str	r2, [sp, #12]
 8008e1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e22:	3402      	adds	r4, #2
 8008e24:	9305      	str	r3, [sp, #20]
 8008e26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008efc <_vfiprintf_r+0x22c>
 8008e2a:	7821      	ldrb	r1, [r4, #0]
 8008e2c:	2203      	movs	r2, #3
 8008e2e:	4650      	mov	r0, sl
 8008e30:	f7f7 f9d6 	bl	80001e0 <memchr>
 8008e34:	b138      	cbz	r0, 8008e46 <_vfiprintf_r+0x176>
 8008e36:	9b04      	ldr	r3, [sp, #16]
 8008e38:	eba0 000a 	sub.w	r0, r0, sl
 8008e3c:	2240      	movs	r2, #64	@ 0x40
 8008e3e:	4082      	lsls	r2, r0
 8008e40:	4313      	orrs	r3, r2
 8008e42:	3401      	adds	r4, #1
 8008e44:	9304      	str	r3, [sp, #16]
 8008e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e4a:	4829      	ldr	r0, [pc, #164]	@ (8008ef0 <_vfiprintf_r+0x220>)
 8008e4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e50:	2206      	movs	r2, #6
 8008e52:	f7f7 f9c5 	bl	80001e0 <memchr>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d03f      	beq.n	8008eda <_vfiprintf_r+0x20a>
 8008e5a:	4b26      	ldr	r3, [pc, #152]	@ (8008ef4 <_vfiprintf_r+0x224>)
 8008e5c:	bb1b      	cbnz	r3, 8008ea6 <_vfiprintf_r+0x1d6>
 8008e5e:	9b03      	ldr	r3, [sp, #12]
 8008e60:	3307      	adds	r3, #7
 8008e62:	f023 0307 	bic.w	r3, r3, #7
 8008e66:	3308      	adds	r3, #8
 8008e68:	9303      	str	r3, [sp, #12]
 8008e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e6c:	443b      	add	r3, r7
 8008e6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e70:	e76a      	b.n	8008d48 <_vfiprintf_r+0x78>
 8008e72:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e76:	460c      	mov	r4, r1
 8008e78:	2001      	movs	r0, #1
 8008e7a:	e7a8      	b.n	8008dce <_vfiprintf_r+0xfe>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	3401      	adds	r4, #1
 8008e80:	9305      	str	r3, [sp, #20]
 8008e82:	4619      	mov	r1, r3
 8008e84:	f04f 0c0a 	mov.w	ip, #10
 8008e88:	4620      	mov	r0, r4
 8008e8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e8e:	3a30      	subs	r2, #48	@ 0x30
 8008e90:	2a09      	cmp	r2, #9
 8008e92:	d903      	bls.n	8008e9c <_vfiprintf_r+0x1cc>
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d0c6      	beq.n	8008e26 <_vfiprintf_r+0x156>
 8008e98:	9105      	str	r1, [sp, #20]
 8008e9a:	e7c4      	b.n	8008e26 <_vfiprintf_r+0x156>
 8008e9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ea0:	4604      	mov	r4, r0
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e7f0      	b.n	8008e88 <_vfiprintf_r+0x1b8>
 8008ea6:	ab03      	add	r3, sp, #12
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	462a      	mov	r2, r5
 8008eac:	4b12      	ldr	r3, [pc, #72]	@ (8008ef8 <_vfiprintf_r+0x228>)
 8008eae:	a904      	add	r1, sp, #16
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	f7fc fd2f 	bl	8005914 <_printf_float>
 8008eb6:	4607      	mov	r7, r0
 8008eb8:	1c78      	adds	r0, r7, #1
 8008eba:	d1d6      	bne.n	8008e6a <_vfiprintf_r+0x19a>
 8008ebc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ebe:	07d9      	lsls	r1, r3, #31
 8008ec0:	d405      	bmi.n	8008ece <_vfiprintf_r+0x1fe>
 8008ec2:	89ab      	ldrh	r3, [r5, #12]
 8008ec4:	059a      	lsls	r2, r3, #22
 8008ec6:	d402      	bmi.n	8008ece <_vfiprintf_r+0x1fe>
 8008ec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008eca:	f7fd fcfb 	bl	80068c4 <__retarget_lock_release_recursive>
 8008ece:	89ab      	ldrh	r3, [r5, #12]
 8008ed0:	065b      	lsls	r3, r3, #25
 8008ed2:	f53f af1f 	bmi.w	8008d14 <_vfiprintf_r+0x44>
 8008ed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ed8:	e71e      	b.n	8008d18 <_vfiprintf_r+0x48>
 8008eda:	ab03      	add	r3, sp, #12
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	462a      	mov	r2, r5
 8008ee0:	4b05      	ldr	r3, [pc, #20]	@ (8008ef8 <_vfiprintf_r+0x228>)
 8008ee2:	a904      	add	r1, sp, #16
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f7fc ffad 	bl	8005e44 <_printf_i>
 8008eea:	e7e4      	b.n	8008eb6 <_vfiprintf_r+0x1e6>
 8008eec:	0800e4f9 	.word	0x0800e4f9
 8008ef0:	0800e503 	.word	0x0800e503
 8008ef4:	08005915 	.word	0x08005915
 8008ef8:	08008cad 	.word	0x08008cad
 8008efc:	0800e4ff 	.word	0x0800e4ff

08008f00 <__swbuf_r>:
 8008f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f02:	460e      	mov	r6, r1
 8008f04:	4614      	mov	r4, r2
 8008f06:	4605      	mov	r5, r0
 8008f08:	b118      	cbz	r0, 8008f12 <__swbuf_r+0x12>
 8008f0a:	6a03      	ldr	r3, [r0, #32]
 8008f0c:	b90b      	cbnz	r3, 8008f12 <__swbuf_r+0x12>
 8008f0e:	f7fd fb59 	bl	80065c4 <__sinit>
 8008f12:	69a3      	ldr	r3, [r4, #24]
 8008f14:	60a3      	str	r3, [r4, #8]
 8008f16:	89a3      	ldrh	r3, [r4, #12]
 8008f18:	071a      	lsls	r2, r3, #28
 8008f1a:	d501      	bpl.n	8008f20 <__swbuf_r+0x20>
 8008f1c:	6923      	ldr	r3, [r4, #16]
 8008f1e:	b943      	cbnz	r3, 8008f32 <__swbuf_r+0x32>
 8008f20:	4621      	mov	r1, r4
 8008f22:	4628      	mov	r0, r5
 8008f24:	f000 f82a 	bl	8008f7c <__swsetup_r>
 8008f28:	b118      	cbz	r0, 8008f32 <__swbuf_r+0x32>
 8008f2a:	f04f 37ff 	mov.w	r7, #4294967295
 8008f2e:	4638      	mov	r0, r7
 8008f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	6922      	ldr	r2, [r4, #16]
 8008f36:	1a98      	subs	r0, r3, r2
 8008f38:	6963      	ldr	r3, [r4, #20]
 8008f3a:	b2f6      	uxtb	r6, r6
 8008f3c:	4283      	cmp	r3, r0
 8008f3e:	4637      	mov	r7, r6
 8008f40:	dc05      	bgt.n	8008f4e <__swbuf_r+0x4e>
 8008f42:	4621      	mov	r1, r4
 8008f44:	4628      	mov	r0, r5
 8008f46:	f7ff fdd7 	bl	8008af8 <_fflush_r>
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d1ed      	bne.n	8008f2a <__swbuf_r+0x2a>
 8008f4e:	68a3      	ldr	r3, [r4, #8]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	60a3      	str	r3, [r4, #8]
 8008f54:	6823      	ldr	r3, [r4, #0]
 8008f56:	1c5a      	adds	r2, r3, #1
 8008f58:	6022      	str	r2, [r4, #0]
 8008f5a:	701e      	strb	r6, [r3, #0]
 8008f5c:	6962      	ldr	r2, [r4, #20]
 8008f5e:	1c43      	adds	r3, r0, #1
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d004      	beq.n	8008f6e <__swbuf_r+0x6e>
 8008f64:	89a3      	ldrh	r3, [r4, #12]
 8008f66:	07db      	lsls	r3, r3, #31
 8008f68:	d5e1      	bpl.n	8008f2e <__swbuf_r+0x2e>
 8008f6a:	2e0a      	cmp	r6, #10
 8008f6c:	d1df      	bne.n	8008f2e <__swbuf_r+0x2e>
 8008f6e:	4621      	mov	r1, r4
 8008f70:	4628      	mov	r0, r5
 8008f72:	f7ff fdc1 	bl	8008af8 <_fflush_r>
 8008f76:	2800      	cmp	r0, #0
 8008f78:	d0d9      	beq.n	8008f2e <__swbuf_r+0x2e>
 8008f7a:	e7d6      	b.n	8008f2a <__swbuf_r+0x2a>

08008f7c <__swsetup_r>:
 8008f7c:	b538      	push	{r3, r4, r5, lr}
 8008f7e:	4b29      	ldr	r3, [pc, #164]	@ (8009024 <__swsetup_r+0xa8>)
 8008f80:	4605      	mov	r5, r0
 8008f82:	6818      	ldr	r0, [r3, #0]
 8008f84:	460c      	mov	r4, r1
 8008f86:	b118      	cbz	r0, 8008f90 <__swsetup_r+0x14>
 8008f88:	6a03      	ldr	r3, [r0, #32]
 8008f8a:	b90b      	cbnz	r3, 8008f90 <__swsetup_r+0x14>
 8008f8c:	f7fd fb1a 	bl	80065c4 <__sinit>
 8008f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f94:	0719      	lsls	r1, r3, #28
 8008f96:	d422      	bmi.n	8008fde <__swsetup_r+0x62>
 8008f98:	06da      	lsls	r2, r3, #27
 8008f9a:	d407      	bmi.n	8008fac <__swsetup_r+0x30>
 8008f9c:	2209      	movs	r2, #9
 8008f9e:	602a      	str	r2, [r5, #0]
 8008fa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fa4:	81a3      	strh	r3, [r4, #12]
 8008fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8008faa:	e033      	b.n	8009014 <__swsetup_r+0x98>
 8008fac:	0758      	lsls	r0, r3, #29
 8008fae:	d512      	bpl.n	8008fd6 <__swsetup_r+0x5a>
 8008fb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fb2:	b141      	cbz	r1, 8008fc6 <__swsetup_r+0x4a>
 8008fb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fb8:	4299      	cmp	r1, r3
 8008fba:	d002      	beq.n	8008fc2 <__swsetup_r+0x46>
 8008fbc:	4628      	mov	r0, r5
 8008fbe:	f7fe faef 	bl	80075a0 <_free_r>
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fc6:	89a3      	ldrh	r3, [r4, #12]
 8008fc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008fcc:	81a3      	strh	r3, [r4, #12]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	6063      	str	r3, [r4, #4]
 8008fd2:	6923      	ldr	r3, [r4, #16]
 8008fd4:	6023      	str	r3, [r4, #0]
 8008fd6:	89a3      	ldrh	r3, [r4, #12]
 8008fd8:	f043 0308 	orr.w	r3, r3, #8
 8008fdc:	81a3      	strh	r3, [r4, #12]
 8008fde:	6923      	ldr	r3, [r4, #16]
 8008fe0:	b94b      	cbnz	r3, 8008ff6 <__swsetup_r+0x7a>
 8008fe2:	89a3      	ldrh	r3, [r4, #12]
 8008fe4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008fe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008fec:	d003      	beq.n	8008ff6 <__swsetup_r+0x7a>
 8008fee:	4621      	mov	r1, r4
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	f000 f883 	bl	80090fc <__smakebuf_r>
 8008ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ffa:	f013 0201 	ands.w	r2, r3, #1
 8008ffe:	d00a      	beq.n	8009016 <__swsetup_r+0x9a>
 8009000:	2200      	movs	r2, #0
 8009002:	60a2      	str	r2, [r4, #8]
 8009004:	6962      	ldr	r2, [r4, #20]
 8009006:	4252      	negs	r2, r2
 8009008:	61a2      	str	r2, [r4, #24]
 800900a:	6922      	ldr	r2, [r4, #16]
 800900c:	b942      	cbnz	r2, 8009020 <__swsetup_r+0xa4>
 800900e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009012:	d1c5      	bne.n	8008fa0 <__swsetup_r+0x24>
 8009014:	bd38      	pop	{r3, r4, r5, pc}
 8009016:	0799      	lsls	r1, r3, #30
 8009018:	bf58      	it	pl
 800901a:	6962      	ldrpl	r2, [r4, #20]
 800901c:	60a2      	str	r2, [r4, #8]
 800901e:	e7f4      	b.n	800900a <__swsetup_r+0x8e>
 8009020:	2000      	movs	r0, #0
 8009022:	e7f7      	b.n	8009014 <__swsetup_r+0x98>
 8009024:	200001a4 	.word	0x200001a4

08009028 <_raise_r>:
 8009028:	291f      	cmp	r1, #31
 800902a:	b538      	push	{r3, r4, r5, lr}
 800902c:	4605      	mov	r5, r0
 800902e:	460c      	mov	r4, r1
 8009030:	d904      	bls.n	800903c <_raise_r+0x14>
 8009032:	2316      	movs	r3, #22
 8009034:	6003      	str	r3, [r0, #0]
 8009036:	f04f 30ff 	mov.w	r0, #4294967295
 800903a:	bd38      	pop	{r3, r4, r5, pc}
 800903c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800903e:	b112      	cbz	r2, 8009046 <_raise_r+0x1e>
 8009040:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009044:	b94b      	cbnz	r3, 800905a <_raise_r+0x32>
 8009046:	4628      	mov	r0, r5
 8009048:	f000 f830 	bl	80090ac <_getpid_r>
 800904c:	4622      	mov	r2, r4
 800904e:	4601      	mov	r1, r0
 8009050:	4628      	mov	r0, r5
 8009052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009056:	f000 b817 	b.w	8009088 <_kill_r>
 800905a:	2b01      	cmp	r3, #1
 800905c:	d00a      	beq.n	8009074 <_raise_r+0x4c>
 800905e:	1c59      	adds	r1, r3, #1
 8009060:	d103      	bne.n	800906a <_raise_r+0x42>
 8009062:	2316      	movs	r3, #22
 8009064:	6003      	str	r3, [r0, #0]
 8009066:	2001      	movs	r0, #1
 8009068:	e7e7      	b.n	800903a <_raise_r+0x12>
 800906a:	2100      	movs	r1, #0
 800906c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009070:	4620      	mov	r0, r4
 8009072:	4798      	blx	r3
 8009074:	2000      	movs	r0, #0
 8009076:	e7e0      	b.n	800903a <_raise_r+0x12>

08009078 <raise>:
 8009078:	4b02      	ldr	r3, [pc, #8]	@ (8009084 <raise+0xc>)
 800907a:	4601      	mov	r1, r0
 800907c:	6818      	ldr	r0, [r3, #0]
 800907e:	f7ff bfd3 	b.w	8009028 <_raise_r>
 8009082:	bf00      	nop
 8009084:	200001a4 	.word	0x200001a4

08009088 <_kill_r>:
 8009088:	b538      	push	{r3, r4, r5, lr}
 800908a:	4d07      	ldr	r5, [pc, #28]	@ (80090a8 <_kill_r+0x20>)
 800908c:	2300      	movs	r3, #0
 800908e:	4604      	mov	r4, r0
 8009090:	4608      	mov	r0, r1
 8009092:	4611      	mov	r1, r2
 8009094:	602b      	str	r3, [r5, #0]
 8009096:	f7f9 f887 	bl	80021a8 <_kill>
 800909a:	1c43      	adds	r3, r0, #1
 800909c:	d102      	bne.n	80090a4 <_kill_r+0x1c>
 800909e:	682b      	ldr	r3, [r5, #0]
 80090a0:	b103      	cbz	r3, 80090a4 <_kill_r+0x1c>
 80090a2:	6023      	str	r3, [r4, #0]
 80090a4:	bd38      	pop	{r3, r4, r5, pc}
 80090a6:	bf00      	nop
 80090a8:	20000ba8 	.word	0x20000ba8

080090ac <_getpid_r>:
 80090ac:	f7f9 b87a 	b.w	80021a4 <_getpid>

080090b0 <__swhatbuf_r>:
 80090b0:	b570      	push	{r4, r5, r6, lr}
 80090b2:	460c      	mov	r4, r1
 80090b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b8:	2900      	cmp	r1, #0
 80090ba:	b096      	sub	sp, #88	@ 0x58
 80090bc:	4615      	mov	r5, r2
 80090be:	461e      	mov	r6, r3
 80090c0:	da0d      	bge.n	80090de <__swhatbuf_r+0x2e>
 80090c2:	89a3      	ldrh	r3, [r4, #12]
 80090c4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80090c8:	f04f 0100 	mov.w	r1, #0
 80090cc:	bf14      	ite	ne
 80090ce:	2340      	movne	r3, #64	@ 0x40
 80090d0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80090d4:	2000      	movs	r0, #0
 80090d6:	6031      	str	r1, [r6, #0]
 80090d8:	602b      	str	r3, [r5, #0]
 80090da:	b016      	add	sp, #88	@ 0x58
 80090dc:	bd70      	pop	{r4, r5, r6, pc}
 80090de:	466a      	mov	r2, sp
 80090e0:	f000 f848 	bl	8009174 <_fstat_r>
 80090e4:	2800      	cmp	r0, #0
 80090e6:	dbec      	blt.n	80090c2 <__swhatbuf_r+0x12>
 80090e8:	9901      	ldr	r1, [sp, #4]
 80090ea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090ee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80090f2:	4259      	negs	r1, r3
 80090f4:	4159      	adcs	r1, r3
 80090f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090fa:	e7eb      	b.n	80090d4 <__swhatbuf_r+0x24>

080090fc <__smakebuf_r>:
 80090fc:	898b      	ldrh	r3, [r1, #12]
 80090fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009100:	079d      	lsls	r5, r3, #30
 8009102:	4606      	mov	r6, r0
 8009104:	460c      	mov	r4, r1
 8009106:	d507      	bpl.n	8009118 <__smakebuf_r+0x1c>
 8009108:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800910c:	6023      	str	r3, [r4, #0]
 800910e:	6123      	str	r3, [r4, #16]
 8009110:	2301      	movs	r3, #1
 8009112:	6163      	str	r3, [r4, #20]
 8009114:	b003      	add	sp, #12
 8009116:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009118:	ab01      	add	r3, sp, #4
 800911a:	466a      	mov	r2, sp
 800911c:	f7ff ffc8 	bl	80090b0 <__swhatbuf_r>
 8009120:	9f00      	ldr	r7, [sp, #0]
 8009122:	4605      	mov	r5, r0
 8009124:	4639      	mov	r1, r7
 8009126:	4630      	mov	r0, r6
 8009128:	f7fb fcb2 	bl	8004a90 <_malloc_r>
 800912c:	b948      	cbnz	r0, 8009142 <__smakebuf_r+0x46>
 800912e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009132:	059a      	lsls	r2, r3, #22
 8009134:	d4ee      	bmi.n	8009114 <__smakebuf_r+0x18>
 8009136:	f023 0303 	bic.w	r3, r3, #3
 800913a:	f043 0302 	orr.w	r3, r3, #2
 800913e:	81a3      	strh	r3, [r4, #12]
 8009140:	e7e2      	b.n	8009108 <__smakebuf_r+0xc>
 8009142:	89a3      	ldrh	r3, [r4, #12]
 8009144:	6020      	str	r0, [r4, #0]
 8009146:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800914a:	81a3      	strh	r3, [r4, #12]
 800914c:	9b01      	ldr	r3, [sp, #4]
 800914e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009152:	b15b      	cbz	r3, 800916c <__smakebuf_r+0x70>
 8009154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009158:	4630      	mov	r0, r6
 800915a:	f000 f81d 	bl	8009198 <_isatty_r>
 800915e:	b128      	cbz	r0, 800916c <__smakebuf_r+0x70>
 8009160:	89a3      	ldrh	r3, [r4, #12]
 8009162:	f023 0303 	bic.w	r3, r3, #3
 8009166:	f043 0301 	orr.w	r3, r3, #1
 800916a:	81a3      	strh	r3, [r4, #12]
 800916c:	89a3      	ldrh	r3, [r4, #12]
 800916e:	431d      	orrs	r5, r3
 8009170:	81a5      	strh	r5, [r4, #12]
 8009172:	e7cf      	b.n	8009114 <__smakebuf_r+0x18>

08009174 <_fstat_r>:
 8009174:	b538      	push	{r3, r4, r5, lr}
 8009176:	4d07      	ldr	r5, [pc, #28]	@ (8009194 <_fstat_r+0x20>)
 8009178:	2300      	movs	r3, #0
 800917a:	4604      	mov	r4, r0
 800917c:	4608      	mov	r0, r1
 800917e:	4611      	mov	r1, r2
 8009180:	602b      	str	r3, [r5, #0]
 8009182:	f7f9 f83f 	bl	8002204 <_fstat>
 8009186:	1c43      	adds	r3, r0, #1
 8009188:	d102      	bne.n	8009190 <_fstat_r+0x1c>
 800918a:	682b      	ldr	r3, [r5, #0]
 800918c:	b103      	cbz	r3, 8009190 <_fstat_r+0x1c>
 800918e:	6023      	str	r3, [r4, #0]
 8009190:	bd38      	pop	{r3, r4, r5, pc}
 8009192:	bf00      	nop
 8009194:	20000ba8 	.word	0x20000ba8

08009198 <_isatty_r>:
 8009198:	b538      	push	{r3, r4, r5, lr}
 800919a:	4d06      	ldr	r5, [pc, #24]	@ (80091b4 <_isatty_r+0x1c>)
 800919c:	2300      	movs	r3, #0
 800919e:	4604      	mov	r4, r0
 80091a0:	4608      	mov	r0, r1
 80091a2:	602b      	str	r3, [r5, #0]
 80091a4:	f7f9 f834 	bl	8002210 <_isatty>
 80091a8:	1c43      	adds	r3, r0, #1
 80091aa:	d102      	bne.n	80091b2 <_isatty_r+0x1a>
 80091ac:	682b      	ldr	r3, [r5, #0]
 80091ae:	b103      	cbz	r3, 80091b2 <_isatty_r+0x1a>
 80091b0:	6023      	str	r3, [r4, #0]
 80091b2:	bd38      	pop	{r3, r4, r5, pc}
 80091b4:	20000ba8 	.word	0x20000ba8

080091b8 <_init>:
 80091b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ba:	bf00      	nop
 80091bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091be:	bc08      	pop	{r3}
 80091c0:	469e      	mov	lr, r3
 80091c2:	4770      	bx	lr

080091c4 <_fini>:
 80091c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091c6:	bf00      	nop
 80091c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ca:	bc08      	pop	{r3}
 80091cc:	469e      	mov	lr, r3
 80091ce:	4770      	bx	lr
