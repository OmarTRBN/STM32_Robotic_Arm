
ra_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f1c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000052c0  080080c0  080080c0  000090c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d380  0800d380  0000f1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d380  0800d380  0000e380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d388  0800d388  0000f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d388  0800d388  0000e388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d38c  0800d38c  0000e38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800d390  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  200001d8  0800d564  0000f1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  0800d564  0000f510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018bf6  00000000  00000000  0000f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000312f  00000000  00000000  00027dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000d040  00000000  00000000  0002af29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  00037f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001731  00000000  00000000  00038df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000182f5  00000000  00000000  0003a521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001df80  00000000  00000000  00052816  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092c0f  00000000  00000000  00070796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001033a5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fc8  00000000  00000000  001033e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  001073b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080080a4 	.word	0x080080a4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	080080a4 	.word	0x080080a4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <AS5600_Init>:
 *      Author: omart
 */

#include "AS5600_Multi.h"

int AS5600_Init(AS5600_HandleTypeDef *as5600, I2C_HandleTypeDef *hi2c) {
 8000ff4:	b530      	push	{r4, r5, lr}
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	b087      	sub	sp, #28
 8000ffa:	4608      	mov	r0, r1
    // Setup handle
    as5600->hi2c = hi2c;
    as5600->addr = AS5600_ADDR << 1; // Shift address for HAL

    // Check if magnet is detected
    if(HAL_I2C_Mem_Read(hi2c, as5600->addr, AS5600_REGISTER_STATUS, 1, &status, 1, 100) != HAL_OK) {
 8000ffc:	2564      	movs	r5, #100	@ 0x64
    as5600->addr = AS5600_ADDR << 1; // Shift address for HAL
 8000ffe:	216c      	movs	r1, #108	@ 0x6c
    if(HAL_I2C_Mem_Read(hi2c, as5600->addr, AS5600_REGISTER_STATUS, 1, &status, 1, 100) != HAL_OK) {
 8001000:	2401      	movs	r4, #1
    uint8_t status = 0;
 8001002:	2200      	movs	r2, #0
    if(HAL_I2C_Mem_Read(hi2c, as5600->addr, AS5600_REGISTER_STATUS, 1, &status, 1, 100) != HAL_OK) {
 8001004:	9502      	str	r5, [sp, #8]
    as5600->hi2c = hi2c;
 8001006:	6018      	str	r0, [r3, #0]
    as5600->addr = AS5600_ADDR << 1; // Shift address for HAL
 8001008:	7119      	strb	r1, [r3, #4]
    if(HAL_I2C_Mem_Read(hi2c, as5600->addr, AS5600_REGISTER_STATUS, 1, &status, 1, 100) != HAL_OK) {
 800100a:	f10d 0317 	add.w	r3, sp, #23
 800100e:	e9cd 3400 	strd	r3, r4, [sp]
    uint8_t status = 0;
 8001012:	f88d 2017 	strb.w	r2, [sp, #23]
    if(HAL_I2C_Mem_Read(hi2c, as5600->addr, AS5600_REGISTER_STATUS, 1, &status, 1, 100) != HAL_OK) {
 8001016:	4623      	mov	r3, r4
 8001018:	220b      	movs	r2, #11
 800101a:	f001 f8f7 	bl	800220c <HAL_I2C_Mem_Read>
 800101e:	b940      	cbnz	r0, 8001032 <AS5600_Init+0x3e>
        return 1;
    }

    if(!(status & AS5600_MAGNET_DETECTED)) {
 8001020:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8001024:	f080 0020 	eor.w	r0, r0, #32
 8001028:	f3c0 1040 	ubfx	r0, r0, #5, #1
 800102c:	40a0      	lsls	r0, r4
        return 2;  // No magnet detected
    }

    return 0;
}
 800102e:	b007      	add	sp, #28
 8001030:	bd30      	pop	{r4, r5, pc}
        return 1;
 8001032:	4620      	mov	r0, r4
}
 8001034:	b007      	add	sp, #28
 8001036:	bd30      	pop	{r4, r5, pc}

08001038 <AS5600_ReadAngle>:
int AS5600_ReadAngle(AS5600_HandleTypeDef *as5600, uint16_t *angle) {
 8001038:	b510      	push	{r4, lr}
    uint8_t data[2];

    // Read angle registers
    if(HAL_I2C_Mem_Read(as5600->hi2c, as5600->addr, AS5600_REGISTER_ANGLE_HIGH, 1, data, 2, 100) != HAL_OK) {
 800103a:	2202      	movs	r2, #2
int AS5600_ReadAngle(AS5600_HandleTypeDef *as5600, uint16_t *angle) {
 800103c:	b086      	sub	sp, #24
    if(HAL_I2C_Mem_Read(as5600->hi2c, as5600->addr, AS5600_REGISTER_ANGLE_HIGH, 1, data, 2, 100) != HAL_OK) {
 800103e:	2464      	movs	r4, #100	@ 0x64
 8001040:	e9cd 2401 	strd	r2, r4, [sp, #4]
 8001044:	ab05      	add	r3, sp, #20
int AS5600_ReadAngle(AS5600_HandleTypeDef *as5600, uint16_t *angle) {
 8001046:	468c      	mov	ip, r1
    if(HAL_I2C_Mem_Read(as5600->hi2c, as5600->addr, AS5600_REGISTER_ANGLE_HIGH, 1, data, 2, 100) != HAL_OK) {
 8001048:	220e      	movs	r2, #14
 800104a:	7901      	ldrb	r1, [r0, #4]
 800104c:	6800      	ldr	r0, [r0, #0]
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
int AS5600_ReadAngle(AS5600_HandleTypeDef *as5600, uint16_t *angle) {
 8001052:	4664      	mov	r4, ip
    if(HAL_I2C_Mem_Read(as5600->hi2c, as5600->addr, AS5600_REGISTER_ANGLE_HIGH, 1, data, 2, 100) != HAL_OK) {
 8001054:	f001 f8da 	bl	800220c <HAL_I2C_Mem_Read>
 8001058:	b928      	cbnz	r0, 8001066 <AS5600_ReadAngle+0x2e>
        return 1;
    }

    // Combine high and low bytes
    *angle = ((uint16_t)data[0] << 8) | data[1];
 800105a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800105e:	ba5b      	rev16	r3, r3
 8001060:	8023      	strh	r3, [r4, #0]

    return 0;
}
 8001062:	b006      	add	sp, #24
 8001064:	bd10      	pop	{r4, pc}
        return 1;
 8001066:	2001      	movs	r0, #1
}
 8001068:	b006      	add	sp, #24
 800106a:	bd10      	pop	{r4, pc}

0800106c <CommandProtocol_SetCommandProcessor>:
#include "StepMotor.h"

static ProcessCommandFn CustomProcessCommand = NULL;

void CommandProtocol_SetCommandProcessor(ProcessCommandFn processFn) {
    CustomProcessCommand = processFn;
 800106c:	4b01      	ldr	r3, [pc, #4]	@ (8001074 <CommandProtocol_SetCommandProcessor+0x8>)
 800106e:	6018      	str	r0, [r3, #0]
}
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	200001f4 	.word	0x200001f4

08001078 <CommandProtocol_Init>:

HAL_StatusTypeDef CommandProtocol_Init(CommandProtocol_Handle* handle, UART_HandleTypeDef* huart, uint32_t timeout) {
 8001078:	4603      	mov	r3, r0
 800107a:	4608      	mov	r0, r1
    if (handle == NULL || huart == NULL) {
 800107c:	b153      	cbz	r3, 8001094 <CommandProtocol_Init+0x1c>
 800107e:	b149      	cbz	r1, 8001094 <CommandProtocol_Init+0x1c>
        return HAL_ERROR;
    }

    handle->huart = huart;
	handle->timeout = timeout;
    handle->rxIndex = 0;
 8001080:	f44f 7180 	mov.w	r1, #256	@ 0x100
	handle->timeout = timeout;
 8001084:	e9c3 0200 	strd	r0, r2, [r3]
    handle->rxIndex = 0;
 8001088:	8759      	strh	r1, [r3, #58]	@ 0x3a
    handle->isInitialized = true;

    return HAL_UART_Receive_IT(handle->huart, &handle->rxBuffer[0], 1);
 800108a:	2201      	movs	r2, #1
 800108c:	f103 0108 	add.w	r1, r3, #8
 8001090:	f002 ba52 	b.w	8003538 <HAL_UART_Receive_IT>
}
 8001094:	2001      	movs	r0, #1
 8001096:	4770      	bx	lr

08001098 <CommandProtocol_ProcessByte>:

HAL_StatusTypeDef CommandProtocol_ProcessByte(CommandProtocol_Handle* handle, uint8_t byte, char* dataArray) {
    if (!handle->isInitialized) {
 8001098:	f890 303b 	ldrb.w	r3, [r0, #59]	@ 0x3b
 800109c:	b31b      	cbz	r3, 80010e6 <CommandProtocol_ProcessByte+0x4e>
HAL_StatusTypeDef CommandProtocol_ProcessByte(CommandProtocol_Handle* handle, uint8_t byte, char* dataArray) {
 800109e:	b570      	push	{r4, r5, r6, lr}
        return HAL_ERROR;
    }

    if (handle->rxIndex < sizeof(handle->rxBuffer) - 1)
 80010a0:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 80010a4:	2b30      	cmp	r3, #48	@ 0x30
 80010a6:	4604      	mov	r4, r0
 80010a8:	d80a      	bhi.n	80010c0 <CommandProtocol_ProcessByte+0x28>
    {
        if (byte == '\n' || byte == '\r')
 80010aa:	290a      	cmp	r1, #10
 80010ac:	d00d      	beq.n	80010ca <CommandProtocol_ProcessByte+0x32>
 80010ae:	290d      	cmp	r1, #13
 80010b0:	d00b      	beq.n	80010ca <CommandProtocol_ProcessByte+0x32>

            handle->rxIndex = 0;
        }
        else
        {
            handle->rxBuffer[handle->rxIndex++] = byte;
 80010b2:	18c2      	adds	r2, r0, r3
 80010b4:	3301      	adds	r3, #1
 80010b6:	f880 303a 	strb.w	r3, [r0, #58]	@ 0x3a
 80010ba:	7211      	strb	r1, [r2, #8]
    }
    else
    {
        handle->rxIndex = 0;
    }
    return HAL_OK;
 80010bc:	2000      	movs	r0, #0
}
 80010be:	bd70      	pop	{r4, r5, r6, pc}
        handle->rxIndex = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	f880 303a 	strb.w	r3, [r0, #58]	@ 0x3a
    return HAL_OK;
 80010c6:	2000      	movs	r0, #0
}
 80010c8:	bd70      	pop	{r4, r5, r6, pc}
            if (CustomProcessCommand != NULL)
 80010ca:	4908      	ldr	r1, [pc, #32]	@ (80010ec <CommandProtocol_ProcessByte+0x54>)
            handle->rxBuffer[handle->rxIndex] = '\0';
 80010cc:	4423      	add	r3, r4
            if (CustomProcessCommand != NULL)
 80010ce:	680e      	ldr	r6, [r1, #0]
            handle->rxBuffer[handle->rxIndex] = '\0';
 80010d0:	2500      	movs	r5, #0
 80010d2:	721d      	strb	r5, [r3, #8]
            if (CustomProcessCommand != NULL)
 80010d4:	b12e      	cbz	r6, 80010e2 <CommandProtocol_ProcessByte+0x4a>
                CustomProcessCommand(handle, dataArray);
 80010d6:	4611      	mov	r1, r2
 80010d8:	4620      	mov	r0, r4
 80010da:	47b0      	blx	r6
            handle->rxIndex = 0;
 80010dc:	f884 503a 	strb.w	r5, [r4, #58]	@ 0x3a
 80010e0:	e7f1      	b.n	80010c6 <CommandProtocol_ProcessByte+0x2e>
        return HAL_ERROR;
 80010e2:	2001      	movs	r0, #1
}
 80010e4:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80010e6:	2001      	movs	r0, #1
}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	200001f4 	.word	0x200001f4

080010f0 <CommandProtocol_SendResponse>:

HAL_StatusTypeDef CommandProtocol_SendResponse(CommandProtocol_Handle* handle, const char* response) {
    if (!handle->isInitialized || response == NULL) {
 80010f0:	f890 303b 	ldrb.w	r3, [r0, #59]	@ 0x3b
 80010f4:	b18b      	cbz	r3, 800111a <CommandProtocol_SendResponse+0x2a>
HAL_StatusTypeDef CommandProtocol_SendResponse(CommandProtocol_Handle* handle, const char* response) {
 80010f6:	b570      	push	{r4, r5, r6, lr}
 80010f8:	460d      	mov	r5, r1
    if (!handle->isInitialized || response == NULL) {
 80010fa:	b161      	cbz	r1, 8001116 <CommandProtocol_SendResponse+0x26>
        return HAL_ERROR;
    }

    return HAL_UART_Transmit(handle->huart, (uint8_t*)response, strlen(response),
 80010fc:	4604      	mov	r4, r0
 80010fe:	4608      	mov	r0, r1
 8001100:	f7ff f8be 	bl	8000280 <strlen>
 8001104:	4602      	mov	r2, r0
 8001106:	4629      	mov	r1, r5
 8001108:	e9d4 0300 	ldrd	r0, r3, [r4]
 800110c:	b292      	uxth	r2, r2
                            handle->timeout);
}
 800110e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return HAL_UART_Transmit(handle->huart, (uint8_t*)response, strlen(response),
 8001112:	f002 b9a3 	b.w	800345c <HAL_UART_Transmit>
}
 8001116:	2001      	movs	r0, #1
 8001118:	bd70      	pop	{r4, r5, r6, pc}
 800111a:	2001      	movs	r0, #1
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop

08001120 <StepMotor_Init>:
 *      Author: omart
 */

#include "StepMotor.h"

HAL_StatusTypeDef StepMotor_Init(StepMotor* motor, TIM_HandleTypeDef* timer, uint32_t tim_channel, GPIO_TypeDef* gpio_port, uint16_t gpio_pin){
 8001120:	4684      	mov	ip, r0
 8001122:	4608      	mov	r0, r1
 8001124:	4611      	mov	r1, r2
 8001126:	f8bd 2000 	ldrh.w	r2, [sp]
	motor->timer = timer;
	motor->channel = tim_channel;
	motor->dir_gpio_port = gpio_port;
 800112a:	f8cc 3008 	str.w	r3, [ip, #8]
	motor->channel = tim_channel;
 800112e:	e9cc 0100 	strd	r0, r1, [ip]
	motor->dir_gpio_pin = gpio_pin;
 8001132:	f8ac 200c 	strh.w	r2, [ip, #12]

	return HAL_TIM_OC_Start(motor->timer, motor->channel);
 8001136:	f001 be33 	b.w	8002da0 <HAL_TIM_OC_Start>
 800113a:	bf00      	nop

0800113c <StepMotor_SetSpeedLUT>:
}

void StepMotor_SetSpeedLUT(StepMotor* motor, int16_t speed, int direction) {
 800113c:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(motor->dir_gpio_port, motor->dir_gpio_pin, direction);
 800113e:	b2d2      	uxtb	r2, r2
void StepMotor_SetSpeedLUT(StepMotor* motor, int16_t speed, int direction) {
 8001140:	460c      	mov	r4, r1
 8001142:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(motor->dir_gpio_port, motor->dir_gpio_pin, direction);
 8001144:	8981      	ldrh	r1, [r0, #12]
 8001146:	6880      	ldr	r0, [r0, #8]
 8001148:	f000 fe3a 	bl	8001dc0 <HAL_GPIO_WritePin>

	if (speed == 0)
 800114c:	b1dc      	cbz	r4, 8001186 <StepMotor_SetSpeedLUT+0x4a>
	else if (speed < MIN_LUT_SPEED)
	{
		speed = MIN_LUT_SPEED;
	}

	__HAL_TIM_SET_PRESCALER(motor->timer, LUT_PSC[speed - 1]);
 800114e:	2c01      	cmp	r4, #1
 8001150:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001154:	bfb8      	it	lt
 8001156:	2401      	movlt	r4, #1
 8001158:	429c      	cmp	r4, r3
 800115a:	bfa8      	it	ge
 800115c:	461c      	movge	r4, r3
 800115e:	682a      	ldr	r2, [r5, #0]
 8001160:	480f      	ldr	r0, [pc, #60]	@ (80011a0 <StepMotor_SetSpeedLUT+0x64>)
	__HAL_TIM_SET_AUTORELOAD(motor->timer, LUT_ARR[speed - 1]);
 8001162:	4910      	ldr	r1, [pc, #64]	@ (80011a4 <StepMotor_SetSpeedLUT+0x68>)
	__HAL_TIM_SET_PRESCALER(motor->timer, LUT_PSC[speed - 1]);
 8001164:	6813      	ldr	r3, [r2, #0]
 8001166:	3c01      	subs	r4, #1
 8001168:	b224      	sxth	r4, r4
	__HAL_TIM_SET_AUTORELOAD(motor->timer, LUT_ARR[speed - 1]);
 800116a:	f831 1014 	ldrh.w	r1, [r1, r4, lsl #1]
	__HAL_TIM_SET_PRESCALER(motor->timer, LUT_PSC[speed - 1]);
 800116e:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
 8001172:	629c      	str	r4, [r3, #40]	@ 0x28

	motor->timer->Instance->CNT = 0;
 8001174:	2000      	movs	r0, #0
	__HAL_TIM_SET_AUTORELOAD(motor->timer, LUT_ARR[speed - 1]);
 8001176:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8001178:	60d1      	str	r1, [r2, #12]
	motor->timer->Instance->CNT = 0;
 800117a:	6258      	str	r0, [r3, #36]	@ 0x24
	motor->timer->Instance->EGR |= TIM_EGR_UG;
 800117c:	695a      	ldr	r2, [r3, #20]
 800117e:	f042 0201 	orr.w	r2, r2, #1
 8001182:	615a      	str	r2, [r3, #20]
}
 8001184:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_TIM_SET_PRESCALER(motor->timer, 0xFFFF);
 8001186:	6829      	ldr	r1, [r5, #0]
 8001188:	680b      	ldr	r3, [r1, #0]
 800118a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800118e:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(motor->timer, 0xFFFF);
 8001190:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001192:	60ca      	str	r2, [r1, #12]
		motor->timer->Instance->CNT = 0;  // Optional: reset counter
 8001194:	625c      	str	r4, [r3, #36]	@ 0x24
		motor->timer->Instance->EGR |= TIM_EGR_UG;
 8001196:	695a      	ldr	r2, [r3, #20]
 8001198:	f042 0201 	orr.w	r2, r2, #1
 800119c:	615a      	str	r2, [r3, #20]
}
 800119e:	bd38      	pop	{r3, r4, r5, pc}
 80011a0:	0800a7d0 	.word	0x0800a7d0
 80011a4:	080080c0 	.word	0x080080c0

080011a8 <MyProcessCommand>:
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void MyProcessCommand(CommandProtocol_Handle* handle, char *dataArray) {
 80011a8:	b530      	push	{r4, r5, lr}
    CommandID cmdId = handle->rxBuffer[0];
 80011aa:	7a03      	ldrb	r3, [r0, #8]
    char response[50];

    switch(cmdId) {
 80011ac:	2b42      	cmp	r3, #66	@ 0x42
void MyProcessCommand(CommandProtocol_Handle* handle, char *dataArray) {
 80011ae:	b08f      	sub	sp, #60	@ 0x3c
 80011b0:	4604      	mov	r4, r0
    switch(cmdId) {
 80011b2:	d005      	beq.n	80011c0 <MyProcessCommand+0x18>
 80011b4:	2b46      	cmp	r3, #70	@ 0x46
 80011b6:	d01b      	beq.n	80011f0 <MyProcessCommand+0x48>
 80011b8:	2b41      	cmp	r3, #65	@ 0x41
 80011ba:	d00d      	beq.n	80011d8 <MyProcessCommand+0x30>
				sprintf(response, "Frequency set to: %d\n", freq);
				CommandProtocol_SendResponse(handle, response);
            }
            break;
    }
}
 80011bc:	b00f      	add	sp, #60	@ 0x3c
 80011be:	bd30      	pop	{r4, r5, pc}
            sprintf(response, "AS5600 Angle: %d\n", angle);
 80011c0:	4b17      	ldr	r3, [pc, #92]	@ (8001220 <MyProcessCommand+0x78>)
 80011c2:	4918      	ldr	r1, [pc, #96]	@ (8001224 <MyProcessCommand+0x7c>)
 80011c4:	881a      	ldrh	r2, [r3, #0]
 80011c6:	a801      	add	r0, sp, #4
 80011c8:	f003 fbb0 	bl	800492c <siprintf>
            CommandProtocol_SendResponse(handle, response);
 80011cc:	a901      	add	r1, sp, #4
 80011ce:	4620      	mov	r0, r4
 80011d0:	f7ff ff8e 	bl	80010f0 <CommandProtocol_SendResponse>
}
 80011d4:	b00f      	add	sp, #60	@ 0x3c
 80011d6:	bd30      	pop	{r4, r5, pc}
            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80011d8:	4813      	ldr	r0, [pc, #76]	@ (8001228 <MyProcessCommand+0x80>)
 80011da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011de:	f000 fdf3 	bl	8001dc8 <HAL_GPIO_TogglePin>
            CommandProtocol_SendResponse(handle, "LED TOGGLED!\n");
 80011e2:	4912      	ldr	r1, [pc, #72]	@ (800122c <MyProcessCommand+0x84>)
 80011e4:	4620      	mov	r0, r4
}
 80011e6:	b00f      	add	sp, #60	@ 0x3c
 80011e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            CommandProtocol_SendResponse(handle, "LED TOGGLED!\n");
 80011ec:	f7ff bf80 	b.w	80010f0 <CommandProtocol_SendResponse>
            if(handle->rxIndex > 1)
 80011f0:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d9e1      	bls.n	80011bc <MyProcessCommand+0x14>
                uint16_t freq = atoi((const char*)&handle->rxBuffer[1]);
 80011f8:	3009      	adds	r0, #9
 80011fa:	f002 fbdf 	bl	80039bc <atoi>
 80011fe:	4605      	mov	r5, r0
				StepMotor_SetSpeedLUT(&l1_motor, freq, STEP_MOTOR_CW);
 8001200:	b229      	sxth	r1, r5
 8001202:	480b      	ldr	r0, [pc, #44]	@ (8001230 <MyProcessCommand+0x88>)
 8001204:	2200      	movs	r2, #0
 8001206:	f7ff ff99 	bl	800113c <StepMotor_SetSpeedLUT>
				sprintf(response, "Frequency set to: %d\n", freq);
 800120a:	b2aa      	uxth	r2, r5
 800120c:	4909      	ldr	r1, [pc, #36]	@ (8001234 <MyProcessCommand+0x8c>)
 800120e:	a801      	add	r0, sp, #4
 8001210:	f003 fb8c 	bl	800492c <siprintf>
				CommandProtocol_SendResponse(handle, response);
 8001214:	a901      	add	r1, sp, #4
 8001216:	4620      	mov	r0, r4
 8001218:	f7ff ff6a 	bl	80010f0 <CommandProtocol_SendResponse>
}
 800121c:	b00f      	add	sp, #60	@ 0x3c
 800121e:	bd30      	pop	{r4, r5, pc}
 8001220:	20000208 	.word	0x20000208
 8001224:	0800cef0 	.word	0x0800cef0
 8001228:	40020800 	.word	0x40020800
 800122c:	0800cee0 	.word	0x0800cee0
 8001230:	200001f8 	.word	0x200001f8
 8001234:	0800cf04 	.word	0x0800cf04

08001238 <SystemClock_Config>:
{
 8001238:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123a:	2300      	movs	r3, #0
{
 800123c:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123e:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8001242:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001246:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800124a:	e9cd 3305 	strd	r3, r3, [sp, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124e:	4920      	ldr	r1, [pc, #128]	@ (80012d0 <SystemClock_Config+0x98>)
 8001250:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001252:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001254:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001256:	4a1f      	ldr	r2, [pc, #124]	@ (80012d4 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001258:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 800125c:	6408      	str	r0, [r1, #64]	@ 0x40
 800125e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001260:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8001264:	9101      	str	r1, [sp, #4]
 8001266:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001268:	9302      	str	r3, [sp, #8]
 800126a:	6813      	ldr	r3, [r2, #0]
 800126c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001274:	2001      	movs	r0, #1
 8001276:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800127a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800127e:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001282:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001284:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001288:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800128a:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800128e:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001290:	2104      	movs	r1, #4
 8001292:	2002      	movs	r0, #2
 8001294:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001298:	220c      	movs	r2, #12
  RCC_OscInitStruct.PLL.PLLN = 96;
 800129a:	2360      	movs	r3, #96	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800129c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 12;
 800129e:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80012a0:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a2:	f001 f981 	bl	80025a8 <HAL_RCC_OscConfig>
 80012a6:	b108      	cbz	r0, 80012ac <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012aa:	e7fe      	b.n	80012aa <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ac:	210f      	movs	r1, #15
 80012ae:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b0:	e9cd 1403 	strd	r1, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80012b4:	2280      	movs	r2, #128	@ 0x80
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012b6:	a803      	add	r0, sp, #12
 80012b8:	2101      	movs	r1, #1
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012be:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012c0:	f001 fb88 	bl	80029d4 <HAL_RCC_ClockConfig>
 80012c4:	b108      	cbz	r0, 80012ca <SystemClock_Config+0x92>
 80012c6:	b672      	cpsid	i
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <SystemClock_Config+0x90>
}
 80012ca:	b014      	add	sp, #80	@ 0x50
 80012cc:	bd10      	pop	{r4, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800
 80012d4:	40007000 	.word	0x40007000

080012d8 <main>:
{
 80012d8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	2400      	movs	r4, #0
{
 80012de:	b09d      	sub	sp, #116	@ 0x74
	CommandProtocol_SetCommandProcessor(MyProcessCommand);
 80012e0:	489a      	ldr	r0, [pc, #616]	@ (800154c <main+0x274>)
  huart1.Instance = USART1;
 80012e2:	4d9b      	ldr	r5, [pc, #620]	@ (8001550 <main+0x278>)
	CommandProtocol_SetCommandProcessor(MyProcessCommand);
 80012e4:	f7ff fec2 	bl	800106c <CommandProtocol_SetCommandProcessor>
  HAL_Init();
 80012e8:	f000 fb76 	bl	80019d8 <HAL_Init>
  SystemClock_Config();
 80012ec:	f7ff ffa4 	bl	8001238 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	e9cd 4414 	strd	r4, r4, [sp, #80]	@ 0x50
 80012f4:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012f8:	4b96      	ldr	r3, [pc, #600]	@ (8001554 <main+0x27c>)
 80012fa:	9402      	str	r4, [sp, #8]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	9418      	str	r4, [sp, #96]	@ 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001300:	4895      	ldr	r0, [pc, #596]	@ (8001558 <main+0x280>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001302:	f042 0204 	orr.w	r2, r2, #4
 8001306:	631a      	str	r2, [r3, #48]	@ 0x30
 8001308:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800130a:	f002 0204 	and.w	r2, r2, #4
 800130e:	9202      	str	r2, [sp, #8]
 8001310:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001312:	9403      	str	r4, [sp, #12]
 8001314:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001316:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800131a:	631a      	str	r2, [r3, #48]	@ 0x30
 800131c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800131e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001322:	9203      	str	r2, [sp, #12]
 8001324:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	9404      	str	r4, [sp, #16]
 8001328:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800132a:	f042 0201 	orr.w	r2, r2, #1
 800132e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001330:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001332:	f002 0201 	and.w	r2, r2, #1
 8001336:	9204      	str	r2, [sp, #16]
 8001338:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	9405      	str	r4, [sp, #20]
 800133c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800133e:	f042 0202 	orr.w	r2, r2, #2
 8001342:	631a      	str	r2, [r3, #48]	@ 0x30
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800134a:	4622      	mov	r2, r4
 800134c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001350:	9305      	str	r3, [sp, #20]
 8001352:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001354:	f000 fd34 	bl	8001dc0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, GPIO_PIN_RESET);
 8001358:	4622      	mov	r2, r4
 800135a:	4880      	ldr	r0, [pc, #512]	@ (800155c <main+0x284>)
 800135c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001360:	f000 fd2e 	bl	8001dc0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TEST_LED_GPIO_Port, TEST_LED_Pin, GPIO_PIN_RESET);
 8001364:	4622      	mov	r2, r4
 8001366:	487e      	ldr	r0, [pc, #504]	@ (8001560 <main+0x288>)
 8001368:	2108      	movs	r1, #8
 800136a:	f000 fd29 	bl	8001dc0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001370:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001374:	4878      	ldr	r0, [pc, #480]	@ (8001558 <main+0x280>)
 8001376:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	e9cd 3614 	strd	r3, r6, [sp, #80]	@ 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  GPIO_InitStruct.Pin = M1_DIR_Pin;
 8001380:	f44f 6700 	mov.w	r7, #2048	@ 0x800
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001384:	f000 fc26 	bl	8001bd4 <HAL_GPIO_Init>
  HAL_GPIO_Init(M1_DIR_GPIO_Port, &GPIO_InitStruct);
 8001388:	4874      	ldr	r0, [pc, #464]	@ (800155c <main+0x284>)
 800138a:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800138c:	e9cd 7614 	strd	r7, r6, [sp, #80]	@ 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  HAL_GPIO_Init(M1_DIR_GPIO_Port, &GPIO_InitStruct);
 8001394:	f000 fc1e 	bl	8001bd4 <HAL_GPIO_Init>
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 8001398:	4871      	ldr	r0, [pc, #452]	@ (8001560 <main+0x288>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139a:	9615      	str	r6, [sp, #84]	@ 0x54
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 800139c:	a914      	add	r1, sp, #80	@ 0x50
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 800139e:	2608      	movs	r6, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  GPIO_InitStruct.Pin = TEST_LED_Pin;
 80013a4:	9614      	str	r6, [sp, #80]	@ 0x50
  HAL_GPIO_Init(TEST_LED_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f000 fc15 	bl	8001bd4 <HAL_GPIO_Init>
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013aa:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ae:	e9c5 4406 	strd	r4, r4, [r5, #24]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013b2:	612c      	str	r4, [r5, #16]
  huart1.Init.BaudRate = 115200;
 80013b4:	4c6b      	ldr	r4, [pc, #428]	@ (8001564 <main+0x28c>)
 80013b6:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80013ba:	e9c5 4300 	strd	r4, r3, [r5]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013be:	4628      	mov	r0, r5
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013c0:	230c      	movs	r3, #12
 80013c2:	616b      	str	r3, [r5, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013c4:	f001 ffb8 	bl	8003338 <HAL_UART_Init>
 80013c8:	b108      	cbz	r0, 80013ce <main+0xf6>
 80013ca:	b672      	cpsid	i
  while (1)
 80013cc:	e7fe      	b.n	80013cc <main+0xf4>
  hi2c1.Instance = I2C1;
 80013ce:	f8df 81bc 	ldr.w	r8, [pc, #444]	@ 800158c <main+0x2b4>
  hi2c1.Init.ClockSpeed = 400000;
 80013d2:	4b65      	ldr	r3, [pc, #404]	@ (8001568 <main+0x290>)
  hi2c1.Init.OwnAddress1 = 0;
 80013d4:	e9c8 0002 	strd	r0, r0, [r8, #8]
  hi2c1.Init.OwnAddress2 = 0;
 80013d8:	e9c8 0005 	strd	r0, r0, [r8, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013dc:	e9c8 0007 	strd	r0, r0, [r8, #28]
  hi2c1.Init.ClockSpeed = 400000;
 80013e0:	4862      	ldr	r0, [pc, #392]	@ (800156c <main+0x294>)
 80013e2:	e9c8 0300 	strd	r0, r3, [r8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013ea:	4640      	mov	r0, r8
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ec:	f8c8 3010 	str.w	r3, [r8, #16]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013f0:	f000 fe44 	bl	800207c <HAL_I2C_Init>
 80013f4:	4604      	mov	r4, r0
 80013f6:	b108      	cbz	r0, 80013fc <main+0x124>
 80013f8:	b672      	cpsid	i
  while (1)
 80013fa:	e7fe      	b.n	80013fa <main+0x122>
  htim1.Instance = TIM1;
 80013fc:	f8df 9190 	ldr.w	r9, [pc, #400]	@ 8001590 <main+0x2b8>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001400:	9008      	str	r0, [sp, #32]
 8001402:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001406:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
 800140a:	e9cd 000f 	strd	r0, r0, [sp, #60]	@ 0x3c
 800140e:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001412:	9006      	str	r0, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001414:	900c      	str	r0, [sp, #48]	@ 0x30
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001416:	900b      	str	r0, [sp, #44]	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001418:	9007      	str	r0, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800141a:	4601      	mov	r1, r0
 800141c:	2220      	movs	r2, #32
 800141e:	a814      	add	r0, sp, #80	@ 0x50
 8001420:	f003 fae7 	bl	80049f2 <memset>
  htim1.Instance = TIM1;
 8001424:	4b52      	ldr	r3, [pc, #328]	@ (8001570 <main+0x298>)
 8001426:	f8c9 3000 	str.w	r3, [r9]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142a:	e9c9 4401 	strd	r4, r4, [r9, #4]
  htim1.Init.RepetitionCounter = 0;
 800142e:	e9c9 4404 	strd	r4, r4, [r9, #16]
  htim1.Init.Period = 4999;
 8001432:	f241 3387 	movw	r3, #4999	@ 0x1387
  htim1.Init.RepetitionCounter = 0;
 8001436:	2480      	movs	r4, #128	@ 0x80
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001438:	4648      	mov	r0, r9
  htim1.Init.Period = 4999;
 800143a:	f8c9 300c 	str.w	r3, [r9, #12]
  htim1.Init.RepetitionCounter = 0;
 800143e:	f8c9 4018 	str.w	r4, [r9, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001442:	f001 fb85 	bl	8002b50 <HAL_TIM_Base_Init>
 8001446:	b108      	cbz	r0, 800144c <main+0x174>
 8001448:	b672      	cpsid	i
  while (1)
 800144a:	e7fe      	b.n	800144a <main+0x172>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001450:	a908      	add	r1, sp, #32
 8001452:	4648      	mov	r0, r9
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001454:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001456:	f001 fdbb 	bl	8002fd0 <HAL_TIM_ConfigClockSource>
 800145a:	b108      	cbz	r0, 8001460 <main+0x188>
 800145c:	b672      	cpsid	i
  while (1)
 800145e:	e7fe      	b.n	800145e <main+0x186>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001460:	4648      	mov	r0, r9
 8001462:	f001 fc23 	bl	8002cac <HAL_TIM_OC_Init>
 8001466:	b108      	cbz	r0, 800146c <main+0x194>
 8001468:	b672      	cpsid	i
  while (1)
 800146a:	e7fe      	b.n	800146a <main+0x192>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146c:	f04f 0a00 	mov.w	sl, #0
 8001470:	f04f 0b00 	mov.w	fp, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001474:	a906      	add	r1, sp, #24
 8001476:	4648      	mov	r0, r9
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	e9cd ab06 	strd	sl, fp, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800147c:	f001 fef6 	bl	800326c <HAL_TIMEx_MasterConfigSynchronization>
 8001480:	b108      	cbz	r0, 8001486 <main+0x1ae>
 8001482:	b672      	cpsid	i
  while (1)
 8001484:	e7fe      	b.n	8001484 <main+0x1ac>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001486:	2330      	movs	r3, #48	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001488:	e9cd 000d 	strd	r0, r0, [sp, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800148c:	900f      	str	r0, [sp, #60]	@ 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800148e:	9012      	str	r0, [sp, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001490:	a90c      	add	r1, sp, #48	@ 0x30
 8001492:	4632      	mov	r2, r6
 8001494:	4648      	mov	r0, r9
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001496:	930c      	str	r3, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001498:	e9cd ab10 	strd	sl, fp, [sp, #64]	@ 0x40
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800149c:	f001 fcdc 	bl	8002e58 <HAL_TIM_OC_ConfigChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	b108      	cbz	r0, 80014a8 <main+0x1d0>
 80014a4:	b672      	cpsid	i
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <main+0x1ce>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_3);
 80014a8:	f8d9 c000 	ldr.w	ip, [r9]
 80014ac:	f8dc 201c 	ldr.w	r2, [ip, #28]
 80014b0:	f042 0208 	orr.w	r2, r2, #8
 80014b4:	f8cc 201c 	str.w	r2, [ip, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014b8:	a914      	add	r1, sp, #80	@ 0x50
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014ba:	e9cd 3314 	strd	r3, r3, [sp, #80]	@ 0x50
  sBreakDeadTimeConfig.DeadTime = 0;
 80014be:	e9cd 3316 	strd	r3, r3, [sp, #88]	@ 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014c2:	931b      	str	r3, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014c4:	2200      	movs	r2, #0
 80014c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014ca:	4648      	mov	r0, r9
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014cc:	e9cd 2318 	strd	r2, r3, [sp, #96]	@ 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014d0:	f001 ff04 	bl	80032dc <HAL_TIMEx_ConfigBreakDeadTime>
 80014d4:	4683      	mov	fp, r0
 80014d6:	b108      	cbz	r0, 80014dc <main+0x204>
 80014d8:	b672      	cpsid	i
  while (1)
 80014da:	e7fe      	b.n	80014da <main+0x202>
  HAL_TIM_MspPostInit(&htim1);
 80014dc:	4648      	mov	r0, r9
 80014de:	f000 f933 	bl	8001748 <HAL_TIM_MspPostInit>
  htim11.Instance = TIM11;
 80014e2:	f8df a0b0 	ldr.w	sl, [pc, #176]	@ 8001594 <main+0x2bc>
  htim11.Init.Prescaler = 1000-1;
 80014e6:	4a23      	ldr	r2, [pc, #140]	@ (8001574 <main+0x29c>)
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014e8:	f8ca 4018 	str.w	r4, [sl, #24]
  htim11.Init.Prescaler = 1000-1;
 80014ec:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80014f0:	e9ca 2300 	strd	r2, r3, [sl]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80014f4:	4650      	mov	r0, sl
  htim11.Init.Period = 10000-1;
 80014f6:	f242 730f 	movw	r3, #9999	@ 0x270f
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fa:	f8ca b008 	str.w	fp, [sl, #8]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fe:	f8ca b010 	str.w	fp, [sl, #16]
  htim11.Init.Period = 10000-1;
 8001502:	f8ca 300c 	str.w	r3, [sl, #12]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001506:	f001 fb23 	bl	8002b50 <HAL_TIM_Base_Init>
 800150a:	4604      	mov	r4, r0
 800150c:	b108      	cbz	r0, 8001512 <main+0x23a>
 800150e:	b672      	cpsid	i
  while (1)
 8001510:	e7fe      	b.n	8001510 <main+0x238>
  HAL_TIM_Base_Start_IT(&htim11); // Start controller timer
 8001512:	4650      	mov	r0, sl
 8001514:	f001 fb96 	bl	8002c44 <HAL_TIM_Base_Start_IT>
  statusCheck = CommandProtocol_Init(&cmdHandle, &huart1, 100);
 8001518:	4629      	mov	r1, r5
 800151a:	2264      	movs	r2, #100	@ 0x64
 800151c:	4816      	ldr	r0, [pc, #88]	@ (8001578 <main+0x2a0>)
 800151e:	4d17      	ldr	r5, [pc, #92]	@ (800157c <main+0x2a4>)
 8001520:	f7ff fdaa 	bl	8001078 <CommandProtocol_Init>
  statusCheck = AS5600_Init(&as5600, &hi2c1);
 8001524:	4641      	mov	r1, r8
  statusCheck = CommandProtocol_Init(&cmdHandle, &huart1, 100);
 8001526:	6028      	str	r0, [r5, #0]
  statusCheck = AS5600_Init(&as5600, &hi2c1);
 8001528:	4815      	ldr	r0, [pc, #84]	@ (8001580 <main+0x2a8>)
 800152a:	f7ff fd63 	bl	8000ff4 <AS5600_Init>
  statusCheck = StepMotor_Init(&l1_motor, &htim1, TIM_CHANNEL_3, M1_DIR_GPIO_Port, M1_DIR_Pin);
 800152e:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <main+0x284>)
 8001530:	9700      	str	r7, [sp, #0]
 8001532:	4632      	mov	r2, r6
  statusCheck = AS5600_Init(&as5600, &hi2c1);
 8001534:	6028      	str	r0, [r5, #0]
  statusCheck = StepMotor_Init(&l1_motor, &htim1, TIM_CHANNEL_3, M1_DIR_GPIO_Port, M1_DIR_Pin);
 8001536:	4649      	mov	r1, r9
 8001538:	4812      	ldr	r0, [pc, #72]	@ (8001584 <main+0x2ac>)
 800153a:	f7ff fdf1 	bl	8001120 <StepMotor_Init>
 800153e:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <main+0x2b0>)
	  if(globalControllerFlag) {
 8001540:	781a      	ldrb	r2, [r3, #0]
 8001542:	2a00      	cmp	r2, #0
 8001544:	d0fc      	beq.n	8001540 <main+0x268>
		  globalControllerFlag = 0;
 8001546:	701c      	strb	r4, [r3, #0]
 8001548:	e7fa      	b.n	8001540 <main+0x268>
 800154a:	bf00      	nop
 800154c:	080011a9 	.word	0x080011a9
 8001550:	20000290 	.word	0x20000290
 8001554:	40023800 	.word	0x40023800
 8001558:	40020800 	.word	0x40020800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400
 8001564:	40011000 	.word	0x40011000
 8001568:	00061a80 	.word	0x00061a80
 800156c:	40005400 	.word	0x40005400
 8001570:	40010000 	.word	0x40010000
 8001574:	40014800 	.word	0x40014800
 8001578:	20000214 	.word	0x20000214
 800157c:	20000250 	.word	0x20000250
 8001580:	2000020c 	.word	0x2000020c
 8001584:	200001f8 	.word	0x200001f8
 8001588:	20000254 	.word	0x20000254
 800158c:	20000368 	.word	0x20000368
 8001590:	20000320 	.word	0x20000320
 8001594:	200002d8 	.word	0x200002d8

08001598 <HAL_UART_RxCpltCallback>:
{
 8001598:	b538      	push	{r3, r4, r5, lr}
	if (huart == cmdHandle.huart) {
 800159a:	4c0b      	ldr	r4, [pc, #44]	@ (80015c8 <HAL_UART_RxCpltCallback+0x30>)
 800159c:	6825      	ldr	r5, [r4, #0]
 800159e:	4285      	cmp	r5, r0
 80015a0:	d000      	beq.n	80015a4 <HAL_UART_RxCpltCallback+0xc>
}
 80015a2:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t receivedByte = cmdHandle.rxBuffer[cmdHandle.rxIndex];
 80015a4:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
		CommandProtocol_ProcessByte(&cmdHandle, receivedByte, globalDataArray);
 80015a8:	4a08      	ldr	r2, [pc, #32]	@ (80015cc <HAL_UART_RxCpltCallback+0x34>)
		uint8_t receivedByte = cmdHandle.rxBuffer[cmdHandle.rxIndex];
 80015aa:	4423      	add	r3, r4
		CommandProtocol_ProcessByte(&cmdHandle, receivedByte, globalDataArray);
 80015ac:	4620      	mov	r0, r4
 80015ae:	7a19      	ldrb	r1, [r3, #8]
 80015b0:	f7ff fd72 	bl	8001098 <CommandProtocol_ProcessByte>
		HAL_UART_Receive_IT(huart, &cmdHandle.rxBuffer[cmdHandle.rxIndex], 1);
 80015b4:	f894 103a 	ldrb.w	r1, [r4, #58]	@ 0x3a
 80015b8:	3108      	adds	r1, #8
 80015ba:	4421      	add	r1, r4
 80015bc:	4628      	mov	r0, r5
 80015be:	2201      	movs	r2, #1
}
 80015c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_UART_Receive_IT(huart, &cmdHandle.rxBuffer[cmdHandle.rxIndex], 1);
 80015c4:	f001 bfb8 	b.w	8003538 <HAL_UART_Receive_IT>
 80015c8:	20000214 	.word	0x20000214
 80015cc:	20000258 	.word	0x20000258

080015d0 <HAL_TIM_PeriodElapsedCallback>:
{
 80015d0:	b508      	push	{r3, lr}
    if (htim->Instance == TIM11)
 80015d2:	6802      	ldr	r2, [r0, #0]
 80015d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d000      	beq.n	80015dc <HAL_TIM_PeriodElapsedCallback+0xc>
}
 80015da:	bd08      	pop	{r3, pc}
    	HAL_GPIO_TogglePin(TEST_LED_GPIO_Port, TEST_LED_Pin);
 80015dc:	480b      	ldr	r0, [pc, #44]	@ (800160c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80015de:	2108      	movs	r1, #8
 80015e0:	f000 fbf2 	bl	8001dc8 <HAL_GPIO_TogglePin>
    	statusCheck = AS5600_ReadAngle(&as5600, &angle);
 80015e4:	490a      	ldr	r1, [pc, #40]	@ (8001610 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80015e6:	480b      	ldr	r0, [pc, #44]	@ (8001614 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80015e8:	f7ff fd26 	bl	8001038 <AS5600_ReadAngle>
 80015ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80015ee:	6018      	str	r0, [r3, #0]
    	if (statusCheck != HAL_OK)
 80015f0:	b918      	cbnz	r0, 80015fa <HAL_TIM_PeriodElapsedCallback+0x2a>
    		globalControllerFlag = 1;
 80015f2:	4b0a      	ldr	r3, [pc, #40]	@ (800161c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	701a      	strb	r2, [r3, #0]
}
 80015f8:	bd08      	pop	{r3, pc}
 80015fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    		CommandProtocol_SendResponse(&cmdHandle, "AS5600 reading gone wrong!\n");
 80015fe:	4908      	ldr	r1, [pc, #32]	@ (8001620 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001600:	4808      	ldr	r0, [pc, #32]	@ (8001624 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001602:	f7ff bd75 	b.w	80010f0 <CommandProtocol_SendResponse>
 8001606:	bf00      	nop
 8001608:	40014800 	.word	0x40014800
 800160c:	40020400 	.word	0x40020400
 8001610:	20000208 	.word	0x20000208
 8001614:	2000020c 	.word	0x2000020c
 8001618:	20000250 	.word	0x20000250
 800161c:	20000254 	.word	0x20000254
 8001620:	0800cf1c 	.word	0x0800cf1c
 8001624:	20000214 	.word	0x20000214

08001628 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001628:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <HAL_MspInit+0x34>)
 800162c:	2100      	movs	r1, #0
 800162e:	9100      	str	r1, [sp, #0]
 8001630:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001632:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001636:	645a      	str	r2, [r3, #68]	@ 0x44
 8001638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800163a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800163e:	9200      	str	r2, [sp, #0]
 8001640:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	9101      	str	r1, [sp, #4]
 8001644:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001646:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800164a:	641a      	str	r2, [r3, #64]	@ 0x40
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001656:	b002      	add	sp, #8
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800

08001660 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001660:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 8001662:	4b19      	ldr	r3, [pc, #100]	@ (80016c8 <HAL_I2C_MspInit+0x68>)
 8001664:	6802      	ldr	r2, [r0, #0]
{
 8001666:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 800166a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001670:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001674:	9406      	str	r4, [sp, #24]
  if(hi2c->Instance==I2C1)
 8001676:	d001      	beq.n	800167c <HAL_I2C_MspInit+0x1c>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001678:	b009      	add	sp, #36	@ 0x24
 800167a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167c:	4d13      	ldr	r5, [pc, #76]	@ (80016cc <HAL_I2C_MspInit+0x6c>)
 800167e:	9400      	str	r4, [sp, #0]
 8001680:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001682:	4813      	ldr	r0, [pc, #76]	@ (80016d0 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	632b      	str	r3, [r5, #48]	@ 0x30
 800168a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001692:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8001696:	2312      	movs	r3, #18
 8001698:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800169c:	2201      	movs	r2, #1
 800169e:	2303      	movs	r3, #3
 80016a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016a6:	2304      	movs	r3, #4
 80016a8:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ac:	f000 fa92 	bl	8001bd4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016b0:	9401      	str	r4, [sp, #4]
 80016b2:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80016b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016b8:	642b      	str	r3, [r5, #64]	@ 0x40
 80016ba:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80016bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	9b01      	ldr	r3, [sp, #4]
}
 80016c4:	b009      	add	sp, #36	@ 0x24
 80016c6:	bd30      	pop	{r4, r5, pc}
 80016c8:	40005400 	.word	0x40005400
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020400 	.word	0x40020400

080016d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d4:	b500      	push	{lr}
  if(htim_base->Instance==TIM1)
 80016d6:	4a18      	ldr	r2, [pc, #96]	@ (8001738 <HAL_TIM_Base_MspInit+0x64>)
 80016d8:	6803      	ldr	r3, [r0, #0]
 80016da:	4293      	cmp	r3, r2
{
 80016dc:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM1)
 80016de:	d005      	beq.n	80016ec <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 80016e0:	4a16      	ldr	r2, [pc, #88]	@ (800173c <HAL_TIM_Base_MspInit+0x68>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d018      	beq.n	8001718 <HAL_TIM_Base_MspInit+0x44>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80016e6:	b003      	add	sp, #12
 80016e8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016ec:	4b14      	ldr	r3, [pc, #80]	@ (8001740 <HAL_TIM_Base_MspInit+0x6c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	9200      	str	r2, [sp, #0]
 80016f2:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 80016f4:	f041 0101 	orr.w	r1, r1, #1
 80016f8:	6459      	str	r1, [r3, #68]	@ 0x44
 80016fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001704:	201a      	movs	r0, #26
 8001706:	4611      	mov	r1, r2
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001708:	f000 f9a4 	bl	8001a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800170c:	201a      	movs	r0, #26
}
 800170e:	b003      	add	sp, #12
 8001710:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001714:	f000 b9da 	b.w	8001acc <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001718:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <HAL_TIM_Base_MspInit+0x6c>)
 800171a:	2200      	movs	r2, #0
 800171c:	9201      	str	r2, [sp, #4]
 800171e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001720:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
 8001724:	6459      	str	r1, [r3, #68]	@ 0x44
 8001726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001728:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001730:	201a      	movs	r0, #26
 8001732:	4611      	mov	r1, r2
 8001734:	e7e8      	b.n	8001708 <HAL_TIM_Base_MspInit+0x34>
 8001736:	bf00      	nop
 8001738:	40010000 	.word	0x40010000
 800173c:	40014800 	.word	0x40014800
 8001740:	40023800 	.word	0x40023800
 8001744:	00000000 	.word	0x00000000

08001748 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001748:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800174a:	4a15      	ldr	r2, [pc, #84]	@ (80017a0 <HAL_TIM_MspPostInit+0x58>)
 800174c:	6801      	ldr	r1, [r0, #0]
{
 800174e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8001752:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001758:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800175c:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 800175e:	d002      	beq.n	8001766 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001760:	b009      	add	sp, #36	@ 0x24
 8001762:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 800176a:	9301      	str	r3, [sp, #4]
 800176c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176e:	480d      	ldr	r0, [pc, #52]	@ (80017a4 <HAL_TIM_MspPostInit+0x5c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6313      	str	r3, [r2, #48]	@ 0x30
 8001776:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001778:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 8001798 <HAL_TIM_MspPostInit+0x50>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001782:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001784:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001786:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178a:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800178c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178e:	f000 fa21 	bl	8001bd4 <HAL_GPIO_Init>
}
 8001792:	b009      	add	sp, #36	@ 0x24
 8001794:	f85d fb04 	ldr.w	pc, [sp], #4
 8001798:	00000400 	.word	0x00000400
 800179c:	00000002 	.word	0x00000002
 80017a0:	40010000 	.word	0x40010000
 80017a4:	40020000 	.word	0x40020000

080017a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017a8:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 80017aa:	4b1c      	ldr	r3, [pc, #112]	@ (800181c <HAL_UART_MspInit+0x74>)
 80017ac:	6802      	ldr	r2, [r0, #0]
{
 80017ae:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 80017b2:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80017b8:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80017bc:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 80017be:	d001      	beq.n	80017c4 <HAL_UART_MspInit+0x1c>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80017c0:	b009      	add	sp, #36	@ 0x24
 80017c2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80017c4:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 80017c8:	9400      	str	r4, [sp, #0]
 80017ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017cc:	4814      	ldr	r0, [pc, #80]	@ (8001820 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80017ce:	f042 0210 	orr.w	r2, r2, #16
 80017d2:	645a      	str	r2, [r3, #68]	@ 0x44
 80017d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80017d6:	f002 0210 	and.w	r2, r2, #16
 80017da:	9200      	str	r2, [sp, #0]
 80017dc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	9401      	str	r4, [sp, #4]
 80017e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017e2:	f042 0202 	orr.w	r2, r2, #2
 80017e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017f0:	22c0      	movs	r2, #192	@ 0xc0
 80017f2:	2302      	movs	r3, #2
 80017f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fa:	2307      	movs	r3, #7
 80017fc:	2203      	movs	r2, #3
 80017fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f000 f9e6 	bl	8001bd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001808:	4622      	mov	r2, r4
 800180a:	4621      	mov	r1, r4
 800180c:	2025      	movs	r0, #37	@ 0x25
 800180e:	f000 f921 	bl	8001a54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001812:	2025      	movs	r0, #37	@ 0x25
 8001814:	f000 f95a 	bl	8001acc <HAL_NVIC_EnableIRQ>
}
 8001818:	b009      	add	sp, #36	@ 0x24
 800181a:	bd30      	pop	{r4, r5, pc}
 800181c:	40011000 	.word	0x40011000
 8001820:	40020400 	.word	0x40020400

08001824 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001824:	e7fe      	b.n	8001824 <NMI_Handler>
 8001826:	bf00      	nop

08001828 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001828:	e7fe      	b.n	8001828 <HardFault_Handler>
 800182a:	bf00      	nop

0800182c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800182c:	e7fe      	b.n	800182c <MemManage_Handler>
 800182e:	bf00      	nop

08001830 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <BusFault_Handler>
 8001832:	bf00      	nop

08001834 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001834:	e7fe      	b.n	8001834 <UsageFault_Handler>
 8001836:	bf00      	nop

08001838 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop

0800183c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop

08001840 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop

08001844 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001844:	f000 b8e2 	b.w	8001a0c <HAL_IncTick>

08001848 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001848:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800184a:	4804      	ldr	r0, [pc, #16]	@ (800185c <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800184c:	f001 fc72 	bl	8003134 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001850:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim11);
 8001854:	4802      	ldr	r0, [pc, #8]	@ (8001860 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001856:	f001 bc6d 	b.w	8003134 <HAL_TIM_IRQHandler>
 800185a:	bf00      	nop
 800185c:	20000320 	.word	0x20000320
 8001860:	200002d8 	.word	0x200002d8

08001864 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001864:	4801      	ldr	r0, [pc, #4]	@ (800186c <USART1_IRQHandler+0x8>)
 8001866:	f001 befd 	b.w	8003664 <HAL_UART_IRQHandler>
 800186a:	bf00      	nop
 800186c:	20000290 	.word	0x20000290

08001870 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001870:	2001      	movs	r0, #1
 8001872:	4770      	bx	lr

08001874 <_kill>:

int _kill(int pid, int sig)
{
 8001874:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001876:	f003 f90f 	bl	8004a98 <__errno>
 800187a:	2316      	movs	r3, #22
 800187c:	6003      	str	r3, [r0, #0]
  return -1;
}
 800187e:	f04f 30ff 	mov.w	r0, #4294967295
 8001882:	bd08      	pop	{r3, pc}

08001884 <_exit>:

void _exit (int status)
{
 8001884:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001886:	f003 f907 	bl	8004a98 <__errno>
 800188a:	2316      	movs	r3, #22
 800188c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800188e:	e7fe      	b.n	800188e <_exit+0xa>

08001890 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001890:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001892:	1e16      	subs	r6, r2, #0
 8001894:	dd07      	ble.n	80018a6 <_read+0x16>
 8001896:	460c      	mov	r4, r1
 8001898:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 800189a:	f3af 8000 	nop.w
 800189e:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a2:	42a5      	cmp	r5, r4
 80018a4:	d1f9      	bne.n	800189a <_read+0xa>
  }

  return len;
}
 80018a6:	4630      	mov	r0, r6
 80018a8:	bd70      	pop	{r4, r5, r6, pc}
 80018aa:	bf00      	nop

080018ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ac:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ae:	1e16      	subs	r6, r2, #0
 80018b0:	dd07      	ble.n	80018c2 <_write+0x16>
 80018b2:	460c      	mov	r4, r1
 80018b4:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80018b6:	f814 0b01 	ldrb.w	r0, [r4], #1
 80018ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018be:	42ac      	cmp	r4, r5
 80018c0:	d1f9      	bne.n	80018b6 <_write+0xa>
  }
  return len;
}
 80018c2:	4630      	mov	r0, r6
 80018c4:	bd70      	pop	{r4, r5, r6, pc}
 80018c6:	bf00      	nop

080018c8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop

080018d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80018d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018d4:	604b      	str	r3, [r1, #4]
  return 0;
}
 80018d6:	2000      	movs	r0, #0
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop

080018dc <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80018dc:	2001      	movs	r0, #1
 80018de:	4770      	bx	lr

080018e0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80018e0:	2000      	movs	r0, #0
 80018e2:	4770      	bx	lr

080018e4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e4:	490c      	ldr	r1, [pc, #48]	@ (8001918 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e6:	4a0d      	ldr	r2, [pc, #52]	@ (800191c <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80018e8:	680b      	ldr	r3, [r1, #0]
{
 80018ea:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018ec:	4c0c      	ldr	r4, [pc, #48]	@ (8001920 <_sbrk+0x3c>)
 80018ee:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80018f0:	b12b      	cbz	r3, 80018fe <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f2:	4418      	add	r0, r3
 80018f4:	4290      	cmp	r0, r2
 80018f6:	d807      	bhi.n	8001908 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80018f8:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80018fe:	4b09      	ldr	r3, [pc, #36]	@ (8001924 <_sbrk+0x40>)
 8001900:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001902:	4418      	add	r0, r3
 8001904:	4290      	cmp	r0, r2
 8001906:	d9f7      	bls.n	80018f8 <_sbrk+0x14>
    errno = ENOMEM;
 8001908:	f003 f8c6 	bl	8004a98 <__errno>
 800190c:	230c      	movs	r3, #12
 800190e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001910:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001914:	4618      	mov	r0, r3
 8001916:	bd10      	pop	{r4, pc}
 8001918:	200003bc 	.word	0x200003bc
 800191c:	20020000 	.word	0x20020000
 8001920:	00000400 	.word	0x00000400
 8001924:	20000510 	.word	0x20000510

08001928 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001928:	4a03      	ldr	r2, [pc, #12]	@ (8001938 <SystemInit+0x10>)
 800192a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800192e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001932:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800193c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001974 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001940:	f7ff fff2 	bl	8001928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001944:	480c      	ldr	r0, [pc, #48]	@ (8001978 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001946:	490d      	ldr	r1, [pc, #52]	@ (800197c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001948:	4a0d      	ldr	r2, [pc, #52]	@ (8001980 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800194c:	e002      	b.n	8001954 <LoopCopyDataInit>

0800194e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800194e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001950:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001952:	3304      	adds	r3, #4

08001954 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001954:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001956:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001958:	d3f9      	bcc.n	800194e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800195a:	4a0a      	ldr	r2, [pc, #40]	@ (8001984 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800195c:	4c0a      	ldr	r4, [pc, #40]	@ (8001988 <LoopFillZerobss+0x22>)
  movs r3, #0
 800195e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001960:	e001      	b.n	8001966 <LoopFillZerobss>

08001962 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001962:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001964:	3204      	adds	r2, #4

08001966 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001966:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001968:	d3fb      	bcc.n	8001962 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800196a:	f003 f89b 	bl	8004aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800196e:	f7ff fcb3 	bl	80012d8 <main>
  bx  lr    
 8001972:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001974:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800197c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001980:	0800d390 	.word	0x0800d390
  ldr r2, =_sbss
 8001984:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001988:	20000510 	.word	0x20000510

0800198c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800198c:	e7fe      	b.n	800198c <ADC_IRQHandler>
	...

08001990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001990:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001992:	4a0e      	ldr	r2, [pc, #56]	@ (80019cc <HAL_InitTick+0x3c>)
 8001994:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <HAL_InitTick+0x40>)
 8001996:	7812      	ldrb	r2, [r2, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
{
 800199a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800199c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019a0:	fbb0 f0f2 	udiv	r0, r0, r2
 80019a4:	fbb3 f0f0 	udiv	r0, r3, r0
 80019a8:	f000 f89e 	bl	8001ae8 <HAL_SYSTICK_Config>
 80019ac:	b908      	cbnz	r0, 80019b2 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ae:	2d0f      	cmp	r5, #15
 80019b0:	d901      	bls.n	80019b6 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80019b2:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80019b4:	bd38      	pop	{r3, r4, r5, pc}
 80019b6:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b8:	4602      	mov	r2, r0
 80019ba:	4629      	mov	r1, r5
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	f000 f848 	bl	8001a54 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c4:	4b03      	ldr	r3, [pc, #12]	@ (80019d4 <HAL_InitTick+0x44>)
 80019c6:	4620      	mov	r0, r4
 80019c8:	601d      	str	r5, [r3, #0]
}
 80019ca:	bd38      	pop	{r3, r4, r5, pc}
 80019cc:	20000004 	.word	0x20000004
 80019d0:	20000000 	.word	0x20000000
 80019d4:	20000008 	.word	0x20000008

080019d8 <HAL_Init>:
{
 80019d8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019da:	4b0b      	ldr	r3, [pc, #44]	@ (8001a08 <HAL_Init+0x30>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019e2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80019ea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019f2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f4:	2003      	movs	r0, #3
 80019f6:	f000 f81b 	bl	8001a30 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80019fa:	200f      	movs	r0, #15
 80019fc:	f7ff ffc8 	bl	8001990 <HAL_InitTick>
  HAL_MspInit();
 8001a00:	f7ff fe12 	bl	8001628 <HAL_MspInit>
}
 8001a04:	2000      	movs	r0, #0
 8001a06:	bd08      	pop	{r3, pc}
 8001a08:	40023c00 	.word	0x40023c00

08001a0c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001a0c:	4a03      	ldr	r2, [pc, #12]	@ (8001a1c <HAL_IncTick+0x10>)
 8001a0e:	4b04      	ldr	r3, [pc, #16]	@ (8001a20 <HAL_IncTick+0x14>)
 8001a10:	6811      	ldr	r1, [r2, #0]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	440b      	add	r3, r1
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	200003c0 	.word	0x200003c0
 8001a20:	20000004 	.word	0x20000004

08001a24 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a24:	4b01      	ldr	r3, [pc, #4]	@ (8001a2c <HAL_GetTick+0x8>)
 8001a26:	6818      	ldr	r0, [r3, #0]
}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	200003c0 	.word	0x200003c0

08001a30 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a30:	4907      	ldr	r1, [pc, #28]	@ (8001a50 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001a32:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a34:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a36:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a3a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3e:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a40:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a42:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001a4a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a54:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac4 <HAL_NVIC_SetPriority+0x70>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a5c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a5e:	f1c3 0e07 	rsb	lr, r3, #7
 8001a62:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a66:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a6a:	bf28      	it	cs
 8001a6c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a70:	f1bc 0f06 	cmp.w	ip, #6
 8001a74:	d91c      	bls.n	8001ab0 <HAL_NVIC_SetPriority+0x5c>
 8001a76:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a7e:	fa03 f30c 	lsl.w	r3, r3, ip
 8001a82:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a86:	f04f 33ff 	mov.w	r3, #4294967295
 8001a8a:	fa03 f30e 	lsl.w	r3, r3, lr
 8001a8e:	ea21 0303 	bic.w	r3, r1, r3
 8001a92:	fa03 f30c 	lsl.w	r3, r3, ip
 8001a96:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8001a9a:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001a9e:	db0a      	blt.n	8001ab6 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa0:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001aa4:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001aa8:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001aac:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ab0:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab2:	4694      	mov	ip, r2
 8001ab4:	e7e7      	b.n	8001a86 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab6:	4a04      	ldr	r2, [pc, #16]	@ (8001ac8 <HAL_NVIC_SetPriority+0x74>)
 8001ab8:	f000 000f 	and.w	r0, r0, #15
 8001abc:	4402      	add	r2, r0
 8001abe:	7613      	strb	r3, [r2, #24]
 8001ac0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ac4:	e000ed00 	.word	0xe000ed00
 8001ac8:	e000ecfc 	.word	0xe000ecfc

08001acc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001acc:	2800      	cmp	r0, #0
 8001ace:	db07      	blt.n	8001ae0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad0:	4a04      	ldr	r2, [pc, #16]	@ (8001ae4 <HAL_NVIC_EnableIRQ+0x18>)
 8001ad2:	0941      	lsrs	r1, r0, #5
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	f000 001f 	and.w	r0, r0, #31
 8001ada:	4083      	lsls	r3, r0
 8001adc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000e100 	.word	0xe000e100

08001ae8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae8:	3801      	subs	r0, #1
 8001aea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001aee:	d301      	bcc.n	8001af4 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001af2:	4770      	bx	lr
{
 8001af4:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	4c07      	ldr	r4, [pc, #28]	@ (8001b18 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afc:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afe:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8001b02:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b06:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b08:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b0a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	619a      	str	r2, [r3, #24]
}
 8001b0e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	6119      	str	r1, [r3, #16]
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b570      	push	{r4, r5, r6, lr}
 8001b1e:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b20:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  
  uint32_t tickstart = HAL_GetTick();
 8001b22:	f7ff ff7f 	bl	8001a24 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b26:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d006      	beq.n	8001b3c <HAL_DMA_Abort+0x20>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b2e:	2380      	movs	r3, #128	@ 0x80
 8001b30:	6563      	str	r3, [r4, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b32:	2300      	movs	r3, #0
 8001b34:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b38:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 8001b3a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b3c:	6823      	ldr	r3, [r4, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	f022 0216 	bic.w	r2, r2, #22
 8001b44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b46:	695a      	ldr	r2, [r3, #20]
 8001b48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b4c:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b4e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001b50:	4605      	mov	r5, r0
 8001b52:	b342      	cbz	r2, 8001ba6 <HAL_DMA_Abort+0x8a>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	f022 0208 	bic.w	r2, r2, #8
 8001b5a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	f022 0201 	bic.w	r2, r2, #1
 8001b62:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b64:	e005      	b.n	8001b72 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b66:	f7ff ff5d 	bl	8001a24 <HAL_GetTick>
 8001b6a:	1b43      	subs	r3, r0, r5
 8001b6c:	2b05      	cmp	r3, #5
 8001b6e:	d810      	bhi.n	8001b92 <HAL_DMA_Abort+0x76>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f013 0301 	ands.w	r3, r3, #1
 8001b78:	d1f5      	bne.n	8001b66 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b7a:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8001b7c:	223f      	movs	r2, #63	@ 0x3f
 8001b7e:	408a      	lsls	r2, r1
  return HAL_OK;
 8001b80:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8001b82:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8001b84:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b86:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8001b88:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001b8c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8001b90:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b94:	2220      	movs	r2, #32
 8001b96:	6562      	str	r2, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8001b98:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b9a:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8001ba4:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ba6:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8001ba8:	2a00      	cmp	r2, #0
 8001baa:	d1d3      	bne.n	8001b54 <HAL_DMA_Abort+0x38>
 8001bac:	e7d6      	b.n	8001b5c <HAL_DMA_Abort+0x40>
 8001bae:	bf00      	nop

08001bb0 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bb0:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d003      	beq.n	8001bc0 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb8:	2380      	movs	r3, #128	@ 0x80
 8001bba:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8001bbc:	2001      	movs	r0, #1
 8001bbe:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bc0:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bc2:	2305      	movs	r3, #5
 8001bc4:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8001bc8:	6813      	ldr	r3, [r2, #0]
 8001bca:	f023 0301 	bic.w	r3, r3, #1
  }

  return HAL_OK;
 8001bce:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8001bd0:	6013      	str	r3, [r2, #0]
}
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd8:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bda:	680c      	ldr	r4, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bdc:	f8df a1d4 	ldr.w	sl, [pc, #468]	@ 8001db4 <HAL_GPIO_Init+0x1e0>
{
 8001be0:	b085      	sub	sp, #20
    ioposition = 0x01U << position;
 8001be2:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be6:	4689      	mov	r9, r1
 8001be8:	e003      	b.n	8001bf2 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bea:	3301      	adds	r3, #1
 8001bec:	2b10      	cmp	r3, #16
 8001bee:	f000 8082 	beq.w	8001cf6 <HAL_GPIO_Init+0x122>
    ioposition = 0x01U << position;
 8001bf2:	fa0b f203 	lsl.w	r2, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bf6:	ea02 0804 	and.w	r8, r2, r4
    if(iocurrent == ioposition)
 8001bfa:	43a2      	bics	r2, r4
 8001bfc:	d1f5      	bne.n	8001bea <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bfe:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001c02:	f001 0203 	and.w	r2, r1, #3
 8001c06:	ea4f 0c43 	mov.w	ip, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c0a:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c0c:	1e57      	subs	r7, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c0e:	fa05 f50c 	lsl.w	r5, r5, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c12:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c14:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c18:	d970      	bls.n	8001cfc <HAL_GPIO_Init+0x128>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c1a:	2a03      	cmp	r2, #3
 8001c1c:	f040 80a7 	bne.w	8001d6e <HAL_GPIO_Init+0x19a>
      temp = GPIOx->MODER;
 8001c20:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c22:	fa02 f20c 	lsl.w	r2, r2, ip
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c26:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c28:	432a      	orrs	r2, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c2a:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8001c2e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c30:	d0db      	beq.n	8001bea <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	2200      	movs	r2, #0
 8001c34:	9203      	str	r2, [sp, #12]
 8001c36:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8001c3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c3e:	f8ca 2044 	str.w	r2, [sl, #68]	@ 0x44
 8001c42:	f8da 2044 	ldr.w	r2, [sl, #68]	@ 0x44
 8001c46:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001c4a:	9203      	str	r2, [sp, #12]
 8001c4c:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c4e:	f023 0203 	bic.w	r2, r3, #3
 8001c52:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c56:	f003 0703 	and.w	r7, r3, #3
 8001c5a:	260f      	movs	r6, #15
 8001c5c:	f502 329c 	add.w	r2, r2, #79872	@ 0x13800
 8001c60:	00bf      	lsls	r7, r7, #2
 8001c62:	fa06 fc07 	lsl.w	ip, r6, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c66:	4e50      	ldr	r6, [pc, #320]	@ (8001da8 <HAL_GPIO_Init+0x1d4>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8001c68:	6895      	ldr	r5, [r2, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c6a:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c6c:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c70:	d018      	beq.n	8001ca4 <HAL_GPIO_Init+0xd0>
 8001c72:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8001c76:	42b0      	cmp	r0, r6
 8001c78:	f000 8084 	beq.w	8001d84 <HAL_GPIO_Init+0x1b0>
 8001c7c:	4e4b      	ldr	r6, [pc, #300]	@ (8001dac <HAL_GPIO_Init+0x1d8>)
 8001c7e:	42b0      	cmp	r0, r6
 8001c80:	f000 8086 	beq.w	8001d90 <HAL_GPIO_Init+0x1bc>
 8001c84:	f8df c130 	ldr.w	ip, [pc, #304]	@ 8001db8 <HAL_GPIO_Init+0x1e4>
 8001c88:	4560      	cmp	r0, ip
 8001c8a:	f000 8087 	beq.w	8001d9c <HAL_GPIO_Init+0x1c8>
 8001c8e:	f8df c12c 	ldr.w	ip, [pc, #300]	@ 8001dbc <HAL_GPIO_Init+0x1e8>
 8001c92:	4560      	cmp	r0, ip
 8001c94:	bf0c      	ite	eq
 8001c96:	f04f 0c04 	moveq.w	ip, #4
 8001c9a:	f04f 0c07 	movne.w	ip, #7
 8001c9e:	fa0c f707 	lsl.w	r7, ip, r7
 8001ca2:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ca4:	6095      	str	r5, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca6:	4a42      	ldr	r2, [pc, #264]	@ (8001db0 <HAL_GPIO_Init+0x1dc>)
 8001ca8:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001caa:	02ce      	lsls	r6, r1, #11
        temp &= ~((uint32_t)iocurrent);
 8001cac:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001cb0:	4e3f      	ldr	r6, [pc, #252]	@ (8001db0 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 8001cb2:	bf54      	ite	pl
 8001cb4:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001cb6:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR = temp;
 8001cba:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8001cbc:	68f2      	ldr	r2, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001cbe:	4e3c      	ldr	r6, [pc, #240]	@ (8001db0 <HAL_GPIO_Init+0x1dc>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cc0:	028f      	lsls	r7, r1, #10
        temp &= ~((uint32_t)iocurrent);
 8001cc2:	bf54      	ite	pl
 8001cc4:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001cc6:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR = temp;
 8001cca:	60f2      	str	r2, [r6, #12]

        temp = EXTI->EMR;
 8001ccc:	6872      	ldr	r2, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cce:	038e      	lsls	r6, r1, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001cd0:	4e37      	ldr	r6, [pc, #220]	@ (8001db0 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 8001cd2:	bf54      	ite	pl
 8001cd4:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001cd6:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->EMR = temp;
 8001cda:	6072      	str	r2, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cdc:	6832      	ldr	r2, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cde:	03c9      	lsls	r1, r1, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce0:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001ce4:	4932      	ldr	r1, [pc, #200]	@ (8001db0 <HAL_GPIO_Init+0x1dc>)
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	bf54      	ite	pl
 8001ce8:	402a      	andpl	r2, r5
          temp |= iocurrent;
 8001cea:	ea48 0202 	orrmi.w	r2, r8, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cee:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8001cf0:	600a      	str	r2, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf2:	f47f af7e 	bne.w	8001bf2 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8001cf6:	b005      	add	sp, #20
 8001cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8001cfc:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cfe:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d02:	f8d9 700c 	ldr.w	r7, [r9, #12]
 8001d06:	fa07 f70c 	lsl.w	r7, r7, ip
 8001d0a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001d0e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001d10:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d12:	ea27 0e08 	bic.w	lr, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d16:	f3c1 1700 	ubfx	r7, r1, #4, #1
 8001d1a:	409f      	lsls	r7, r3
 8001d1c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001d20:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001d22:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d24:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d28:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8001d2c:	fa07 f70c 	lsl.w	r7, r7, ip
 8001d30:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d34:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8001d36:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d38:	f47f af72 	bne.w	8001c20 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->AFR[position >> 3U];
 8001d3c:	08df      	lsrs	r7, r3, #3
 8001d3e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8001d42:	9701      	str	r7, [sp, #4]
 8001d44:	6a3e      	ldr	r6, [r7, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d46:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8001d4a:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d4c:	f003 0e07 	and.w	lr, r3, #7
 8001d50:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001d54:	260f      	movs	r6, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d56:	fa07 f70e 	lsl.w	r7, r7, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d5a:	fa06 fe0e 	lsl.w	lr, r6, lr
 8001d5e:	9e00      	ldr	r6, [sp, #0]
 8001d60:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001d64:	9e01      	ldr	r6, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d66:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001d6a:	6237      	str	r7, [r6, #32]
 8001d6c:	e758      	b.n	8001c20 <HAL_GPIO_Init+0x4c>
        temp = GPIOx->PUPDR;
 8001d6e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d70:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d74:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8001d78:	fa07 f70c 	lsl.w	r7, r7, ip
 8001d7c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001d80:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d82:	e74d      	b.n	8001c20 <HAL_GPIO_Init+0x4c>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d84:	f04f 0c01 	mov.w	ip, #1
 8001d88:	fa0c f707 	lsl.w	r7, ip, r7
 8001d8c:	433d      	orrs	r5, r7
 8001d8e:	e789      	b.n	8001ca4 <HAL_GPIO_Init+0xd0>
 8001d90:	f04f 0c02 	mov.w	ip, #2
 8001d94:	fa0c f707 	lsl.w	r7, ip, r7
 8001d98:	433d      	orrs	r5, r7
 8001d9a:	e783      	b.n	8001ca4 <HAL_GPIO_Init+0xd0>
 8001d9c:	f04f 0c03 	mov.w	ip, #3
 8001da0:	fa0c f707 	lsl.w	r7, ip, r7
 8001da4:	433d      	orrs	r5, r7
 8001da6:	e77d      	b.n	8001ca4 <HAL_GPIO_Init+0xd0>
 8001da8:	40020000 	.word	0x40020000
 8001dac:	40020800 	.word	0x40020800
 8001db0:	40013c00 	.word	0x40013c00
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40020c00 	.word	0x40020c00
 8001dbc:	40021000 	.word	0x40021000

08001dc0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc0:	b902      	cbnz	r2, 8001dc4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dc2:	0409      	lsls	r1, r1, #16
 8001dc4:	6181      	str	r1, [r0, #24]
  }
}
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dc8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001dca:	ea01 0203 	and.w	r2, r1, r3
 8001dce:	ea21 0103 	bic.w	r1, r1, r3
 8001dd2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001dd6:	6181      	str	r1, [r0, #24]
}
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop

08001ddc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8001ddc:	b570      	push	{r4, r5, r6, lr}
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001dde:	6803      	ldr	r3, [r0, #0]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8001de0:	4604      	mov	r4, r0
 8001de2:	1c48      	adds	r0, r1, #1
 8001de4:	d003      	beq.n	8001dee <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x12>
 8001de6:	e01e      	b.n	8001e26 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x4a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001de8:	695a      	ldr	r2, [r3, #20]
 8001dea:	0551      	lsls	r1, r2, #21
 8001dec:	d404      	bmi.n	8001df8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x1c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001dee:	695a      	ldr	r2, [r3, #20]
 8001df0:	0790      	lsls	r0, r2, #30
 8001df2:	d5f9      	bpl.n	8001de8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0xc>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001df4:	2000      	movs	r0, #0
}
 8001df6:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dfe:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e00:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e02:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e06:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e08:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001e0a:	6321      	str	r1, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001e0c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e10:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8001e22:	2001      	movs	r0, #1
}
 8001e24:	bd70      	pop	{r4, r5, r6, pc}
 8001e26:	460d      	mov	r5, r1
 8001e28:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e2a:	695a      	ldr	r2, [r3, #20]
 8001e2c:	0792      	lsls	r2, r2, #30
 8001e2e:	d4e1      	bmi.n	8001df4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x18>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	0551      	lsls	r1, r2, #21
 8001e34:	d4e0      	bmi.n	8001df8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e36:	f7ff fdf5 	bl	8001a24 <HAL_GetTick>
 8001e3a:	1b80      	subs	r0, r0, r6
 8001e3c:	4285      	cmp	r5, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e3e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e40:	d301      	bcc.n	8001e46 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x6a>
 8001e42:	2d00      	cmp	r5, #0
 8001e44:	d1f1      	bne.n	8001e2a <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x4e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e46:	695a      	ldr	r2, [r3, #20]
 8001e48:	0792      	lsls	r2, r2, #30
 8001e4a:	d4ee      	bmi.n	8001e2a <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x4e>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e4c:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e4e:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e50:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e52:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e56:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e5a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	6423      	str	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8001e60:	e7dc      	b.n	8001e1c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x40>
 8001e62:	bf00      	nop

08001e64 <I2C_RequestMemoryRead>:
{
 8001e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e68:	6805      	ldr	r5, [r0, #0]
{
 8001e6a:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e6c:	682b      	ldr	r3, [r5, #0]
{
 8001e6e:	b083      	sub	sp, #12
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e70:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e74:	602b      	str	r3, [r5, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e76:	682b      	ldr	r3, [r5, #0]
{
 8001e78:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8001e7a:	f8dd a034 	ldr.w	sl, [sp, #52]	@ 0x34
 8001e7e:	4690      	mov	r8, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e84:	1c7a      	adds	r2, r7, #1
{
 8001e86:	4606      	mov	r6, r0
 8001e88:	468b      	mov	fp, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e8a:	602b      	str	r3, [r5, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8001e8c:	d13d      	bne.n	8001f0a <I2C_RequestMemoryRead+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e8e:	696c      	ldr	r4, [r5, #20]
 8001e90:	07e4      	lsls	r4, r4, #31
 8001e92:	d5fc      	bpl.n	8001e8e <I2C_RequestMemoryRead+0x2a>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001e94:	f00b 03fe 	and.w	r3, fp, #254	@ 0xfe
 8001e98:	612b      	str	r3, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e9a:	4652      	mov	r2, sl
 8001e9c:	4639      	mov	r1, r7
 8001e9e:	4630      	mov	r0, r6
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ea0:	fa5f fb8b 	uxtb.w	fp, fp
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ea4:	f7ff ff9a 	bl	8001ddc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8001ea8:	bb38      	cbnz	r0, 8001efa <I2C_RequestMemoryRead+0x96>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eaa:	9001      	str	r0, [sp, #4]
 8001eac:	6830      	ldr	r0, [r6, #0]
 8001eae:	6943      	ldr	r3, [r0, #20]
 8001eb0:	9301      	str	r3, [sp, #4]
 8001eb2:	6983      	ldr	r3, [r0, #24]
 8001eb4:	9301      	str	r3, [sp, #4]
 8001eb6:	1c79      	adds	r1, r7, #1
 8001eb8:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001eba:	f040 8087 	bne.w	8001fcc <I2C_RequestMemoryRead+0x168>
 8001ebe:	6943      	ldr	r3, [r0, #20]
 8001ec0:	061d      	lsls	r5, r3, #24
 8001ec2:	d444      	bmi.n	8001f4e <I2C_RequestMemoryRead+0xea>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ec4:	6943      	ldr	r3, [r0, #20]
 8001ec6:	055c      	lsls	r4, r3, #21
 8001ec8:	d5f9      	bpl.n	8001ebe <I2C_RequestMemoryRead+0x5a>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001eca:	2300      	movs	r3, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ecc:	f46f 6180 	mvn.w	r1, #1024	@ 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ed0:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ed2:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001ed4:	6333      	str	r3, [r6, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001ed6:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001eda:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ede:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8001ee0:	f043 0304 	orr.w	r3, r3, #4
 8001ee4:	6433      	str	r3, [r6, #64]	@ 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ee6:	6c33      	ldr	r3, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001ee8:	2200      	movs	r2, #0
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001eea:	2b04      	cmp	r3, #4
          __HAL_UNLOCK(hi2c);
 8001eec:	f886 203c 	strb.w	r2, [r6, #60]	@ 0x3c
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ef0:	d103      	bne.n	8001efa <I2C_RequestMemoryRead+0x96>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef2:	6803      	ldr	r3, [r0, #0]
 8001ef4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ef8:	6003      	str	r3, [r0, #0]
    return HAL_ERROR;
 8001efa:	2001      	movs	r0, #1
}
 8001efc:	b003      	add	sp, #12
 8001efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f02:	b917      	cbnz	r7, 8001f0a <I2C_RequestMemoryRead+0xa6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f04:	696b      	ldr	r3, [r5, #20]
 8001f06:	07db      	lsls	r3, r3, #31
 8001f08:	d50c      	bpl.n	8001f24 <I2C_RequestMemoryRead+0xc0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f0a:	696b      	ldr	r3, [r5, #20]
 8001f0c:	07d8      	lsls	r0, r3, #31
 8001f0e:	d4c1      	bmi.n	8001e94 <I2C_RequestMemoryRead+0x30>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f10:	f7ff fd88 	bl	8001a24 <HAL_GetTick>
 8001f14:	eba0 000a 	sub.w	r0, r0, sl
 8001f18:	4287      	cmp	r7, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f1a:	6835      	ldr	r5, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f1c:	d2f1      	bcs.n	8001f02 <I2C_RequestMemoryRead+0x9e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001f1e:	696b      	ldr	r3, [r5, #20]
 8001f20:	07db      	lsls	r3, r3, #31
 8001f22:	d4f2      	bmi.n	8001f0a <I2C_RequestMemoryRead+0xa6>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001f24:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8001f26:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001f28:	6332      	str	r2, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001f2a:	f886 303d 	strb.w	r3, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f2e:	f886 203e 	strb.w	r2, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f32:	6c33      	ldr	r3, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001f34:	f886 203c 	strb.w	r2, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f38:	f043 0320 	orr.w	r3, r3, #32
 8001f3c:	6433      	str	r3, [r6, #64]	@ 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f3e:	682b      	ldr	r3, [r5, #0]
 8001f40:	05dd      	lsls	r5, r3, #23
 8001f42:	d502      	bpl.n	8001f4a <I2C_RequestMemoryRead+0xe6>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f48:	6433      	str	r3, [r6, #64]	@ 0x40
    return HAL_TIMEOUT;
 8001f4a:	2003      	movs	r0, #3
 8001f4c:	e7d6      	b.n	8001efc <I2C_RequestMemoryRead+0x98>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f4e:	f1b9 0f01 	cmp.w	r9, #1
 8001f52:	d10b      	bne.n	8001f6c <I2C_RequestMemoryRead+0x108>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f54:	fa5f f388 	uxtb.w	r3, r8
 8001f58:	1c7c      	adds	r4, r7, #1
 8001f5a:	6103      	str	r3, [r0, #16]
 8001f5c:	d154      	bne.n	8002008 <I2C_RequestMemoryRead+0x1a4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f5e:	6943      	ldr	r3, [r0, #20]
 8001f60:	0619      	lsls	r1, r3, #24
 8001f62:	d40f      	bmi.n	8001f84 <I2C_RequestMemoryRead+0x120>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f64:	6943      	ldr	r3, [r0, #20]
 8001f66:	055a      	lsls	r2, r3, #21
 8001f68:	d5f9      	bpl.n	8001f5e <I2C_RequestMemoryRead+0xfa>
 8001f6a:	e7ae      	b.n	8001eca <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f6c:	ea4f 2318 	mov.w	r3, r8, lsr #8
 8001f70:	1c7a      	adds	r2, r7, #1
 8001f72:	6103      	str	r3, [r0, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f74:	d15c      	bne.n	8002030 <I2C_RequestMemoryRead+0x1cc>
 8001f76:	6943      	ldr	r3, [r0, #20]
 8001f78:	061c      	lsls	r4, r3, #24
 8001f7a:	d4eb      	bmi.n	8001f54 <I2C_RequestMemoryRead+0xf0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f7c:	6943      	ldr	r3, [r0, #20]
 8001f7e:	0559      	lsls	r1, r3, #21
 8001f80:	d5f9      	bpl.n	8001f76 <I2C_RequestMemoryRead+0x112>
 8001f82:	e7a2      	b.n	8001eca <I2C_RequestMemoryRead+0x66>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f84:	6803      	ldr	r3, [r0, #0]
 8001f86:	1c7d      	adds	r5, r7, #1
 8001f88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f8c:	6003      	str	r3, [r0, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8001f8e:	d112      	bne.n	8001fb6 <I2C_RequestMemoryRead+0x152>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f90:	6943      	ldr	r3, [r0, #20]
 8001f92:	07da      	lsls	r2, r3, #31
 8001f94:	d5fc      	bpl.n	8001f90 <I2C_RequestMemoryRead+0x12c>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001f96:	f04b 0301 	orr.w	r3, fp, #1
 8001f9a:	6103      	str	r3, [r0, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f9c:	4652      	mov	r2, sl
 8001f9e:	4639      	mov	r1, r7
 8001fa0:	4630      	mov	r0, r6
 8001fa2:	f7ff ff1b 	bl	8001ddc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8001fa6:	3800      	subs	r0, #0
 8001fa8:	bf18      	it	ne
 8001faa:	2001      	movne	r0, #1
 8001fac:	e7a6      	b.n	8001efc <I2C_RequestMemoryRead+0x98>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fae:	b917      	cbnz	r7, 8001fb6 <I2C_RequestMemoryRead+0x152>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fb0:	6943      	ldr	r3, [r0, #20]
 8001fb2:	07dc      	lsls	r4, r3, #31
 8001fb4:	d550      	bpl.n	8002058 <I2C_RequestMemoryRead+0x1f4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fb6:	6943      	ldr	r3, [r0, #20]
 8001fb8:	07db      	lsls	r3, r3, #31
 8001fba:	d4ec      	bmi.n	8001f96 <I2C_RequestMemoryRead+0x132>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fbc:	f7ff fd32 	bl	8001a24 <HAL_GetTick>
 8001fc0:	eba0 030a 	sub.w	r3, r0, sl
 8001fc4:	429f      	cmp	r7, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fc6:	6830      	ldr	r0, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc8:	d2f1      	bcs.n	8001fae <I2C_RequestMemoryRead+0x14a>
 8001fca:	e7f1      	b.n	8001fb0 <I2C_RequestMemoryRead+0x14c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fcc:	6943      	ldr	r3, [r0, #20]
 8001fce:	0619      	lsls	r1, r3, #24
 8001fd0:	d4bd      	bmi.n	8001f4e <I2C_RequestMemoryRead+0xea>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fd2:	6943      	ldr	r3, [r0, #20]
 8001fd4:	055a      	lsls	r2, r3, #21
 8001fd6:	f53f af78 	bmi.w	8001eca <I2C_RequestMemoryRead+0x66>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fda:	f7ff fd23 	bl	8001a24 <HAL_GetTick>
 8001fde:	eba0 030a 	sub.w	r3, r0, sl
 8001fe2:	429f      	cmp	r7, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001fe4:	6830      	ldr	r0, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fe6:	d301      	bcc.n	8001fec <I2C_RequestMemoryRead+0x188>
 8001fe8:	2f00      	cmp	r7, #0
 8001fea:	d1ef      	bne.n	8001fcc <I2C_RequestMemoryRead+0x168>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001fec:	6943      	ldr	r3, [r0, #20]
 8001fee:	061b      	lsls	r3, r3, #24
 8001ff0:	d4ec      	bmi.n	8001fcc <I2C_RequestMemoryRead+0x168>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ff2:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ff4:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ff6:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ff8:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ffc:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002000:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8002002:	4313      	orrs	r3, r2
 8002004:	6433      	str	r3, [r6, #64]	@ 0x40
          return HAL_ERROR;
 8002006:	e76e      	b.n	8001ee6 <I2C_RequestMemoryRead+0x82>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002008:	6943      	ldr	r3, [r0, #20]
 800200a:	061b      	lsls	r3, r3, #24
 800200c:	d4ba      	bmi.n	8001f84 <I2C_RequestMemoryRead+0x120>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800200e:	6943      	ldr	r3, [r0, #20]
 8002010:	055b      	lsls	r3, r3, #21
 8002012:	f53f af5a 	bmi.w	8001eca <I2C_RequestMemoryRead+0x66>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002016:	f7ff fd05 	bl	8001a24 <HAL_GetTick>
 800201a:	eba0 030a 	sub.w	r3, r0, sl
 800201e:	429f      	cmp	r7, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002020:	6830      	ldr	r0, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002022:	d301      	bcc.n	8002028 <I2C_RequestMemoryRead+0x1c4>
 8002024:	2f00      	cmp	r7, #0
 8002026:	d1ef      	bne.n	8002008 <I2C_RequestMemoryRead+0x1a4>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002028:	6943      	ldr	r3, [r0, #20]
 800202a:	061d      	lsls	r5, r3, #24
 800202c:	d4ec      	bmi.n	8002008 <I2C_RequestMemoryRead+0x1a4>
 800202e:	e7e0      	b.n	8001ff2 <I2C_RequestMemoryRead+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002030:	6943      	ldr	r3, [r0, #20]
 8002032:	061a      	lsls	r2, r3, #24
 8002034:	d48e      	bmi.n	8001f54 <I2C_RequestMemoryRead+0xf0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002036:	6943      	ldr	r3, [r0, #20]
 8002038:	055b      	lsls	r3, r3, #21
 800203a:	f53f af46 	bmi.w	8001eca <I2C_RequestMemoryRead+0x66>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800203e:	f7ff fcf1 	bl	8001a24 <HAL_GetTick>
 8002042:	eba0 030a 	sub.w	r3, r0, sl
 8002046:	429f      	cmp	r7, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002048:	6830      	ldr	r0, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800204a:	d301      	bcc.n	8002050 <I2C_RequestMemoryRead+0x1ec>
 800204c:	2f00      	cmp	r7, #0
 800204e:	d1ef      	bne.n	8002030 <I2C_RequestMemoryRead+0x1cc>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002050:	6943      	ldr	r3, [r0, #20]
 8002052:	061d      	lsls	r5, r3, #24
 8002054:	d4ec      	bmi.n	8002030 <I2C_RequestMemoryRead+0x1cc>
 8002056:	e7cc      	b.n	8001ff2 <I2C_RequestMemoryRead+0x18e>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002058:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 800205a:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 800205c:	6332      	str	r2, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800205e:	f886 303d 	strb.w	r3, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002062:	f886 203e 	strb.w	r2, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002066:	6c33      	ldr	r3, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002068:	f886 203c 	strb.w	r2, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800206c:	f043 0320 	orr.w	r3, r3, #32
 8002070:	6433      	str	r3, [r6, #64]	@ 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002072:	6803      	ldr	r3, [r0, #0]
 8002074:	05d9      	lsls	r1, r3, #23
 8002076:	f53f af65 	bmi.w	8001f44 <I2C_RequestMemoryRead+0xe0>
 800207a:	e766      	b.n	8001f4a <I2C_RequestMemoryRead+0xe6>

0800207c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800207c:	2800      	cmp	r0, #0
 800207e:	f000 80b8 	beq.w	80021f2 <HAL_I2C_Init+0x176>
{
 8002082:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002084:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002088:	4604      	mov	r4, r0
 800208a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 8098 	beq.w	80021c4 <HAL_I2C_Init+0x148>
  __HAL_I2C_DISABLE(hi2c);
 8002094:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002096:	2224      	movs	r2, #36	@ 0x24
 8002098:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	f022 0201 	bic.w	r2, r2, #1
 80020a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020b2:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020b4:	f000 fd2c 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020b8:	6865      	ldr	r5, [r4, #4]
 80020ba:	4b4f      	ldr	r3, [pc, #316]	@ (80021f8 <HAL_I2C_Init+0x17c>)
 80020bc:	429d      	cmp	r5, r3
 80020be:	d84f      	bhi.n	8002160 <HAL_I2C_Init+0xe4>
 80020c0:	4b4e      	ldr	r3, [pc, #312]	@ (80021fc <HAL_I2C_Init+0x180>)
 80020c2:	4298      	cmp	r0, r3
 80020c4:	d97c      	bls.n	80021c0 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 80020c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002200 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020c8:	006a      	lsls	r2, r5, #1
  freqrange = I2C_FREQRANGE(pclk1);
 80020ca:	fba3 3500 	umull	r3, r5, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020ce:	1e43      	subs	r3, r0, #1
 80020d0:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020d4:	6822      	ldr	r2, [r4, #0]
 80020d6:	6851      	ldr	r1, [r2, #4]
 80020d8:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80020dc:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 80020e0:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020e2:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 80020e4:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020e8:	f10c 0c01 	add.w	ip, ip, #1
 80020ec:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80020f0:	ea41 010c 	orr.w	r1, r1, ip
 80020f4:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020f6:	69d1      	ldr	r1, [r2, #28]
 80020f8:	f640 70fc 	movw	r0, #4092	@ 0xffc
 80020fc:	3301      	adds	r3, #1
 80020fe:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8002102:	4203      	tst	r3, r0
 8002104:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002108:	d161      	bne.n	80021ce <HAL_I2C_Init+0x152>
 800210a:	2304      	movs	r3, #4
 800210c:	430b      	orrs	r3, r1
 800210e:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002110:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002114:	6811      	ldr	r1, [r2, #0]
 8002116:	4303      	orrs	r3, r0
 8002118:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 800211c:	430b      	orrs	r3, r1
 800211e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002120:	6891      	ldr	r1, [r2, #8]
 8002122:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002126:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 800212a:	4303      	orrs	r3, r0
 800212c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002130:	430b      	orrs	r3, r1
 8002132:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002134:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002138:	68d1      	ldr	r1, [r2, #12]
 800213a:	4303      	orrs	r3, r0
 800213c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002140:	430b      	orrs	r3, r1
 8002142:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002144:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002146:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8002148:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 800214c:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 800214e:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002150:	6423      	str	r3, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002152:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002156:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002158:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  return HAL_OK;
 800215c:	4618      	mov	r0, r3
}
 800215e:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002160:	4b28      	ldr	r3, [pc, #160]	@ (8002204 <HAL_I2C_Init+0x188>)
 8002162:	4298      	cmp	r0, r3
 8002164:	d92c      	bls.n	80021c0 <HAL_I2C_Init+0x144>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002166:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002168:	4b25      	ldr	r3, [pc, #148]	@ (8002200 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800216a:	4e27      	ldr	r6, [pc, #156]	@ (8002208 <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 800216c:	fba3 3c00 	umull	r3, ip, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002170:	1e43      	subs	r3, r0, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002172:	6850      	ldr	r0, [r2, #4]
 8002174:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 8002178:	ea40 409c 	orr.w	r0, r0, ip, lsr #18
 800217c:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800217e:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002182:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002186:	fb00 f101 	mul.w	r1, r0, r1
 800218a:	fba6 6101 	umull	r6, r1, r6, r1
 800218e:	6a10      	ldr	r0, [r2, #32]
 8002190:	0989      	lsrs	r1, r1, #6
 8002192:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 8002196:	3101      	adds	r1, #1
 8002198:	4301      	orrs	r1, r0
 800219a:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800219c:	69d1      	ldr	r1, [r2, #28]
 800219e:	68a0      	ldr	r0, [r4, #8]
 80021a0:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 80021a4:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80021a8:	b9a0      	cbnz	r0, 80021d4 <HAL_I2C_Init+0x158>
 80021aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80021ae:	fbb3 f3f5 	udiv	r3, r3, r5
 80021b2:	3301      	adds	r3, #1
 80021b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b8:	b1cb      	cbz	r3, 80021ee <HAL_I2C_Init+0x172>
 80021ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021be:	e7a5      	b.n	800210c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80021c0:	2001      	movs	r0, #1
}
 80021c2:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80021c4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80021c8:	f7ff fa4a 	bl	8001660 <HAL_I2C_MspInit>
 80021cc:	e762      	b.n	8002094 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d2:	e79b      	b.n	800210c <HAL_I2C_Init+0x90>
 80021d4:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80021d8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80021dc:	fbb3 f3f5 	udiv	r3, r3, r5
 80021e0:	3301      	adds	r3, #1
 80021e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e6:	b113      	cbz	r3, 80021ee <HAL_I2C_Init+0x172>
 80021e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80021ec:	e78e      	b.n	800210c <HAL_I2C_Init+0x90>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e78c      	b.n	800210c <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 80021f2:	2001      	movs	r0, #1
}
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	000186a0 	.word	0x000186a0
 80021fc:	001e847f 	.word	0x001e847f
 8002200:	431bde83 	.word	0x431bde83
 8002204:	003d08ff 	.word	0x003d08ff
 8002208:	10624dd3 	.word	0x10624dd3

0800220c <HAL_I2C_Mem_Read>:
{
 800220c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002210:	4604      	mov	r4, r0
 8002212:	b086      	sub	sp, #24
 8002214:	4699      	mov	r9, r3
 8002216:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 800221a:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800221c:	460f      	mov	r7, r1
 800221e:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002220:	f7ff fc00 	bl	8001a24 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002224:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8002228:	2b20      	cmp	r3, #32
 800222a:	d004      	beq.n	8002236 <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 800222c:	2702      	movs	r7, #2
}
 800222e:	4638      	mov	r0, r7
 8002230:	b006      	add	sp, #24
 8002232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002236:	4606      	mov	r6, r0
 8002238:	6820      	ldr	r0, [r4, #0]
 800223a:	6983      	ldr	r3, [r0, #24]
 800223c:	079b      	lsls	r3, r3, #30
 800223e:	d517      	bpl.n	8002270 <HAL_I2C_Mem_Read+0x64>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002240:	f7ff fbf0 	bl	8001a24 <HAL_GetTick>
 8002244:	1b80      	subs	r0, r0, r6
 8002246:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002248:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224a:	d9f6      	bls.n	800223a <HAL_I2C_Mem_Read+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800224c:	6983      	ldr	r3, [r0, #24]
 800224e:	43db      	mvns	r3, r3
 8002250:	f013 0302 	ands.w	r3, r3, #2
 8002254:	d1f1      	bne.n	800223a <HAL_I2C_Mem_Read+0x2e>
          hi2c->State             = HAL_I2C_STATE_READY;
 8002256:	2220      	movs	r2, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002258:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800225a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800225e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002262:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002264:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002268:	f042 0220 	orr.w	r2, r2, #32
 800226c:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_ERROR;
 800226e:	e7dd      	b.n	800222c <HAL_I2C_Mem_Read+0x20>
    __HAL_LOCK(hi2c);
 8002270:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002274:	2b01      	cmp	r3, #1
 8002276:	d0d9      	beq.n	800222c <HAL_I2C_Mem_Read+0x20>
 8002278:	2301      	movs	r3, #1
 800227a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800227e:	6803      	ldr	r3, [r0, #0]
 8002280:	07d9      	lsls	r1, r3, #31
 8002282:	d561      	bpl.n	8002348 <HAL_I2C_Mem_Read+0x13c>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002284:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002286:	6807      	ldr	r7, [r0, #0]
 8002288:	f427 6700 	bic.w	r7, r7, #2048	@ 0x800
 800228c:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 800228e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8002290:	6260      	str	r0, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002292:	2022      	movs	r0, #34	@ 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002294:	e9cd 5600 	strd	r5, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002298:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800229c:	2040      	movs	r0, #64	@ 0x40
 800229e:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022a2:	2000      	movs	r0, #0
 80022a4:	6420      	str	r0, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 80022a6:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022aa:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 80022ac:	8520      	strh	r0, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022ae:	488b      	ldr	r0, [pc, #556]	@ (80024dc <HAL_I2C_Mem_Read+0x2d0>)
 80022b0:	62e0      	str	r0, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022b2:	464b      	mov	r3, r9
 80022b4:	4642      	mov	r2, r8
 80022b6:	4620      	mov	r0, r4
 80022b8:	f7ff fdd4 	bl	8001e64 <I2C_RequestMemoryRead>
 80022bc:	4607      	mov	r7, r0
 80022be:	2800      	cmp	r0, #0
 80022c0:	d13d      	bne.n	800233e <HAL_I2C_Mem_Read+0x132>
    if (hi2c->XferSize == 0U)
 80022c2:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022c4:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 80022c6:	2a00      	cmp	r2, #0
 80022c8:	d143      	bne.n	8002352 <HAL_I2C_Mem_Read+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ca:	9002      	str	r0, [sp, #8]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	9202      	str	r2, [sp, #8]
 80022d0:	699a      	ldr	r2, [r3, #24]
 80022d2:	9202      	str	r2, [sp, #8]
 80022d4:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022dc:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022de:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80022e0:	2220      	movs	r2, #32
 80022e2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 80022e6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ea:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 80022ee:	e79e      	b.n	800222e <HAL_I2C_Mem_Read+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022f0:	695a      	ldr	r2, [r3, #20]
 80022f2:	0652      	lsls	r2, r2, #25
 80022f4:	f100 80ca 	bmi.w	800248c <HAL_I2C_Mem_Read+0x280>
 80022f8:	2d00      	cmp	r5, #0
 80022fa:	f000 80c3 	beq.w	8002484 <HAL_I2C_Mem_Read+0x278>
 80022fe:	e00d      	b.n	800231c <HAL_I2C_Mem_Read+0x110>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002300:	f7ff fb90 	bl	8001a24 <HAL_GetTick>
 8002304:	1b80      	subs	r0, r0, r6
 8002306:	4285      	cmp	r5, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002308:	6823      	ldr	r3, [r4, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800230a:	d203      	bcs.n	8002314 <HAL_I2C_Mem_Read+0x108>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	0651      	lsls	r1, r2, #25
 8002310:	f140 8081 	bpl.w	8002416 <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	0652      	lsls	r2, r2, #25
 8002318:	f100 80b8 	bmi.w	800248c <HAL_I2C_Mem_Read+0x280>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800231c:	695a      	ldr	r2, [r3, #20]
 800231e:	06d0      	lsls	r0, r2, #27
 8002320:	d5ee      	bpl.n	8002300 <HAL_I2C_Mem_Read+0xf4>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002322:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002324:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8002328:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800232a:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800232c:	6322      	str	r2, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800232e:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002332:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002336:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002338:	6423      	str	r3, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 800233a:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 800233e:	2701      	movs	r7, #1
}
 8002340:	4638      	mov	r0, r7
 8002342:	b006      	add	sp, #24
 8002344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_I2C_ENABLE(hi2c);
 8002348:	6803      	ldr	r3, [r0, #0]
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6003      	str	r3, [r0, #0]
 8002350:	e798      	b.n	8002284 <HAL_I2C_Mem_Read+0x78>
    else if (hi2c->XferSize == 1U)
 8002352:	2a01      	cmp	r2, #1
 8002354:	f000 8118 	beq.w	8002588 <HAL_I2C_Mem_Read+0x37c>
    else if (hi2c->XferSize == 2U)
 8002358:	2a02      	cmp	r2, #2
 800235a:	d07b      	beq.n	8002454 <HAL_I2C_Mem_Read+0x248>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800235c:	9005      	str	r0, [sp, #20]
 800235e:	6959      	ldr	r1, [r3, #20]
 8002360:	9105      	str	r1, [sp, #20]
 8002362:	6999      	ldr	r1, [r3, #24]
 8002364:	9105      	str	r1, [sp, #20]
 8002366:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 8002368:	2a03      	cmp	r2, #3
 800236a:	d8c1      	bhi.n	80022f0 <HAL_I2C_Mem_Read+0xe4>
        if (hi2c->XferSize == 1U)
 800236c:	2a01      	cmp	r2, #1
 800236e:	f000 80e0 	beq.w	8002532 <HAL_I2C_Mem_Read+0x326>
        else if (hi2c->XferSize == 2U)
 8002372:	2a02      	cmp	r2, #2
 8002374:	f000 80b4 	beq.w	80024e0 <HAL_I2C_Mem_Read+0x2d4>
 8002378:	1c68      	adds	r0, r5, #1
 800237a:	d13e      	bne.n	80023fa <HAL_I2C_Mem_Read+0x1ee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800237c:	695a      	ldr	r2, [r3, #20]
 800237e:	0751      	lsls	r1, r2, #29
 8002380:	d5fc      	bpl.n	800237c <HAL_I2C_Mem_Read+0x170>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002382:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002384:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002386:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800238a:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8002390:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 8002392:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8002394:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8002396:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 8002398:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 800239a:	3101      	adds	r1, #1
          hi2c->XferCount--;
 800239c:	b29b      	uxth	r3, r3
 800239e:	1c68      	adds	r0, r5, #1
          hi2c->XferSize--;
 80023a0:	8522      	strh	r2, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 80023a2:	6261      	str	r1, [r4, #36]	@ 0x24
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023a4:	6822      	ldr	r2, [r4, #0]
          hi2c->XferCount--;
 80023a6:	8563      	strh	r3, [r4, #42]	@ 0x2a
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 80023a8:	d144      	bne.n	8002434 <HAL_I2C_Mem_Read+0x228>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023aa:	6953      	ldr	r3, [r2, #20]
 80023ac:	0758      	lsls	r0, r3, #29
 80023ae:	d5fc      	bpl.n	80023aa <HAL_I2C_Mem_Read+0x19e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b0:	6813      	ldr	r3, [r2, #0]
 80023b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023b6:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b8:	6913      	ldr	r3, [r2, #16]
 80023ba:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80023bc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 80023be:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 80023c0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023c2:	6821      	ldr	r1, [r4, #0]
          hi2c->XferCount--;
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ca:	6909      	ldr	r1, [r1, #16]
          hi2c->XferSize--;
 80023cc:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 80023ce:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 80023d2:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 80023d4:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023d8:	7041      	strb	r1, [r0, #1]
          hi2c->XferSize--;
 80023da:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80023dc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 80023de:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80023e0:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80023e2:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 80023e4:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80023e6:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 80023e8:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80023ea:	6261      	str	r1, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80023ec:	8522      	strh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80023ee:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80023f0:	2a00      	cmp	r2, #0
 80023f2:	f43f af74 	beq.w	80022de <HAL_I2C_Mem_Read+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	e7b6      	b.n	8002368 <HAL_I2C_Mem_Read+0x15c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023fa:	695a      	ldr	r2, [r3, #20]
 80023fc:	0752      	lsls	r2, r2, #29
 80023fe:	d4c0      	bmi.n	8002382 <HAL_I2C_Mem_Read+0x176>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002400:	f7ff fb10 	bl	8001a24 <HAL_GetTick>
 8002404:	1b80      	subs	r0, r0, r6
 8002406:	4285      	cmp	r5, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002408:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800240a:	d301      	bcc.n	8002410 <HAL_I2C_Mem_Read+0x204>
 800240c:	2d00      	cmp	r5, #0
 800240e:	d1f4      	bne.n	80023fa <HAL_I2C_Mem_Read+0x1ee>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002410:	695a      	ldr	r2, [r3, #20]
 8002412:	0752      	lsls	r2, r2, #29
 8002414:	d4f1      	bmi.n	80023fa <HAL_I2C_Mem_Read+0x1ee>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002416:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002418:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 800241a:	6322      	str	r2, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800241c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002420:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002424:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8002426:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800242a:	f043 0320 	orr.w	r3, r3, #32
 800242e:	6423      	str	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8002430:	2701      	movs	r7, #1
 8002432:	e785      	b.n	8002340 <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002434:	6953      	ldr	r3, [r2, #20]
 8002436:	075b      	lsls	r3, r3, #29
 8002438:	f100 80a4 	bmi.w	8002584 <HAL_I2C_Mem_Read+0x378>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800243c:	f7ff faf2 	bl	8001a24 <HAL_GetTick>
 8002440:	1b80      	subs	r0, r0, r6
 8002442:	4285      	cmp	r5, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002444:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002446:	d301      	bcc.n	800244c <HAL_I2C_Mem_Read+0x240>
 8002448:	2d00      	cmp	r5, #0
 800244a:	d1f3      	bne.n	8002434 <HAL_I2C_Mem_Read+0x228>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800244c:	6953      	ldr	r3, [r2, #20]
 800244e:	075b      	lsls	r3, r3, #29
 8002450:	d4f0      	bmi.n	8002434 <HAL_I2C_Mem_Read+0x228>
 8002452:	e7e0      	b.n	8002416 <HAL_I2C_Mem_Read+0x20a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002454:	6819      	ldr	r1, [r3, #0]
 8002456:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 800245a:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800245c:	6819      	ldr	r1, [r3, #0]
 800245e:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 8002462:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002464:	9004      	str	r0, [sp, #16]
 8002466:	6959      	ldr	r1, [r3, #20]
 8002468:	9104      	str	r1, [sp, #16]
 800246a:	6999      	ldr	r1, [r3, #24]
 800246c:	9104      	str	r1, [sp, #16]
 800246e:	9904      	ldr	r1, [sp, #16]
 8002470:	e77a      	b.n	8002368 <HAL_I2C_Mem_Read+0x15c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002472:	f7ff fad7 	bl	8001a24 <HAL_GetTick>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002476:	6823      	ldr	r3, [r4, #0]
 8002478:	695a      	ldr	r2, [r3, #20]
 800247a:	0651      	lsls	r1, r2, #25
 800247c:	d5cb      	bpl.n	8002416 <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800247e:	695a      	ldr	r2, [r3, #20]
 8002480:	0652      	lsls	r2, r2, #25
 8002482:	d403      	bmi.n	800248c <HAL_I2C_Mem_Read+0x280>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002484:	695a      	ldr	r2, [r3, #20]
 8002486:	06d0      	lsls	r0, r2, #27
 8002488:	d5f3      	bpl.n	8002472 <HAL_I2C_Mem_Read+0x266>
 800248a:	e74a      	b.n	8002322 <HAL_I2C_Mem_Read+0x116>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800248c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 8002492:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002494:	6821      	ldr	r1, [r4, #0]
        hi2c->XferSize--;
 8002496:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
        hi2c->pBuffPtr++;
 8002498:	6a60      	ldr	r0, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 800249a:	3b01      	subs	r3, #1
 800249c:	b29b      	uxth	r3, r3
 800249e:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024a0:	694b      	ldr	r3, [r1, #20]
        hi2c->XferSize--;
 80024a2:	3a01      	subs	r2, #1
 80024a4:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 80024a6:	f100 0c01 	add.w	ip, r0, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024aa:	075b      	lsls	r3, r3, #29
        hi2c->XferSize--;
 80024ac:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->pBuffPtr++;
 80024ae:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80024b2:	d59d      	bpl.n	80023f0 <HAL_I2C_Mem_Read+0x1e4>
          if (hi2c->XferSize == 3U)
 80024b4:	2a03      	cmp	r2, #3
 80024b6:	d103      	bne.n	80024c0 <HAL_I2C_Mem_Read+0x2b4>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024b8:	680b      	ldr	r3, [r1, #0]
 80024ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80024be:	600b      	str	r3, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c0:	690b      	ldr	r3, [r1, #16]
 80024c2:	7043      	strb	r3, [r0, #1]
          hi2c->pBuffPtr++;
 80024c4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80024c6:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 80024c8:	3301      	adds	r3, #1
 80024ca:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferCount--;
 80024cc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 80024ce:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80024d0:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 80024d2:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 80024d4:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 80024d6:	8522      	strh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80024d8:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80024da:	e789      	b.n	80023f0 <HAL_I2C_Mem_Read+0x1e4>
 80024dc:	ffff0000 	.word	0xffff0000
 80024e0:	1c6a      	adds	r2, r5, #1
 80024e2:	d117      	bne.n	8002514 <HAL_I2C_Mem_Read+0x308>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	0750      	lsls	r0, r2, #29
 80024e8:	d5fc      	bpl.n	80024e4 <HAL_I2C_Mem_Read+0x2d8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024f0:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80024f6:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 80024f8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 80024fa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
          hi2c->XferCount--;
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29b      	uxth	r3, r3
 8002500:	8563      	strh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 8002502:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002504:	3b01      	subs	r3, #1
 8002506:	8523      	strh	r3, [r4, #40]	@ 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002508:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 800250a:	1c51      	adds	r1, r2, #1
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800250c:	691b      	ldr	r3, [r3, #16]
          hi2c->pBuffPtr++;
 800250e:	6261      	str	r1, [r4, #36]	@ 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002510:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8002512:	e7d7      	b.n	80024c4 <HAL_I2C_Mem_Read+0x2b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	0751      	lsls	r1, r2, #29
 8002518:	d4e7      	bmi.n	80024ea <HAL_I2C_Mem_Read+0x2de>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251a:	f7ff fa83 	bl	8001a24 <HAL_GetTick>
 800251e:	1b80      	subs	r0, r0, r6
 8002520:	4285      	cmp	r5, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002522:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002524:	d301      	bcc.n	800252a <HAL_I2C_Mem_Read+0x31e>
 8002526:	2d00      	cmp	r5, #0
 8002528:	d1f4      	bne.n	8002514 <HAL_I2C_Mem_Read+0x308>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800252a:	695a      	ldr	r2, [r3, #20]
 800252c:	0751      	lsls	r1, r2, #29
 800252e:	d4f1      	bmi.n	8002514 <HAL_I2C_Mem_Read+0x308>
 8002530:	e771      	b.n	8002416 <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002532:	695a      	ldr	r2, [r3, #20]
 8002534:	0650      	lsls	r0, r2, #25
 8002536:	d421      	bmi.n	800257c <HAL_I2C_Mem_Read+0x370>
 8002538:	b1e5      	cbz	r5, 8002574 <HAL_I2C_Mem_Read+0x368>
 800253a:	e00c      	b.n	8002556 <HAL_I2C_Mem_Read+0x34a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253c:	f7ff fa72 	bl	8001a24 <HAL_GetTick>
 8002540:	1b80      	subs	r0, r0, r6
 8002542:	42a8      	cmp	r0, r5
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002544:	6823      	ldr	r3, [r4, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002546:	d903      	bls.n	8002550 <HAL_I2C_Mem_Read+0x344>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002548:	695a      	ldr	r2, [r3, #20]
 800254a:	0652      	lsls	r2, r2, #25
 800254c:	f57f af63 	bpl.w	8002416 <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	0650      	lsls	r0, r2, #25
 8002554:	d412      	bmi.n	800257c <HAL_I2C_Mem_Read+0x370>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002556:	695a      	ldr	r2, [r3, #20]
 8002558:	06d1      	lsls	r1, r2, #27
 800255a:	f53f aee2 	bmi.w	8002322 <HAL_I2C_Mem_Read+0x116>
 800255e:	e7ed      	b.n	800253c <HAL_I2C_Mem_Read+0x330>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002560:	f7ff fa60 	bl	8001a24 <HAL_GetTick>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002564:	6823      	ldr	r3, [r4, #0]
 8002566:	695a      	ldr	r2, [r3, #20]
 8002568:	0652      	lsls	r2, r2, #25
 800256a:	f57f af54 	bpl.w	8002416 <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	0650      	lsls	r0, r2, #25
 8002572:	d403      	bmi.n	800257c <HAL_I2C_Mem_Read+0x370>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002574:	695a      	ldr	r2, [r3, #20]
 8002576:	06d1      	lsls	r1, r2, #27
 8002578:	d5f2      	bpl.n	8002560 <HAL_I2C_Mem_Read+0x354>
 800257a:	e6d2      	b.n	8002322 <HAL_I2C_Mem_Read+0x116>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800257c:	691a      	ldr	r2, [r3, #16]
 800257e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002580:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8002582:	e79f      	b.n	80024c4 <HAL_I2C_Mem_Read+0x2b8>
 8002584:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002586:	e713      	b.n	80023b0 <HAL_I2C_Mem_Read+0x1a4>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002588:	6819      	ldr	r1, [r3, #0]
 800258a:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 800258e:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002590:	9003      	str	r0, [sp, #12]
 8002592:	6959      	ldr	r1, [r3, #20]
 8002594:	9103      	str	r1, [sp, #12]
 8002596:	6999      	ldr	r1, [r3, #24]
 8002598:	9103      	str	r1, [sp, #12]
 800259a:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259c:	6819      	ldr	r1, [r3, #0]
 800259e:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 80025a2:	6019      	str	r1, [r3, #0]
 80025a4:	e6e0      	b.n	8002368 <HAL_I2C_Mem_Read+0x15c>
 80025a6:	bf00      	nop

080025a8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025a8:	2800      	cmp	r0, #0
 80025aa:	f000 81d8 	beq.w	800295e <HAL_RCC_OscConfig+0x3b6>
{
 80025ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b2:	6803      	ldr	r3, [r0, #0]
 80025b4:	07dd      	lsls	r5, r3, #31
{
 80025b6:	b082      	sub	sp, #8
 80025b8:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ba:	d52f      	bpl.n	800261c <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025bc:	499d      	ldr	r1, [pc, #628]	@ (8002834 <HAL_RCC_OscConfig+0x28c>)
 80025be:	688a      	ldr	r2, [r1, #8]
 80025c0:	f002 020c 	and.w	r2, r2, #12
 80025c4:	2a04      	cmp	r2, #4
 80025c6:	f000 80ec 	beq.w	80027a2 <HAL_RCC_OscConfig+0x1fa>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ca:	688a      	ldr	r2, [r1, #8]
 80025cc:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80025d0:	2a08      	cmp	r2, #8
 80025d2:	f000 80e2 	beq.w	800279a <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025d6:	6863      	ldr	r3, [r4, #4]
 80025d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025dc:	f000 80eb 	beq.w	80027b6 <HAL_RCC_OscConfig+0x20e>
 80025e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025e4:	f000 8173 	beq.w	80028ce <HAL_RCC_OscConfig+0x326>
 80025e8:	4d92      	ldr	r5, [pc, #584]	@ (8002834 <HAL_RCC_OscConfig+0x28c>)
 80025ea:	682a      	ldr	r2, [r5, #0]
 80025ec:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80025f0:	602a      	str	r2, [r5, #0]
 80025f2:	682a      	ldr	r2, [r5, #0]
 80025f4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80025f8:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f040 80e0 	bne.w	80027c0 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7ff fa10 	bl	8001a24 <HAL_GetTick>
 8002604:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002606:	e005      	b.n	8002614 <HAL_RCC_OscConfig+0x6c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002608:	f7ff fa0c 	bl	8001a24 <HAL_GetTick>
 800260c:	1b80      	subs	r0, r0, r6
 800260e:	2864      	cmp	r0, #100	@ 0x64
 8002610:	f200 8100 	bhi.w	8002814 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002614:	682b      	ldr	r3, [r5, #0]
 8002616:	039f      	lsls	r7, r3, #14
 8002618:	d4f6      	bmi.n	8002608 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800261a:	6823      	ldr	r3, [r4, #0]
 800261c:	079d      	lsls	r5, r3, #30
 800261e:	d528      	bpl.n	8002672 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002620:	4a84      	ldr	r2, [pc, #528]	@ (8002834 <HAL_RCC_OscConfig+0x28c>)
 8002622:	6891      	ldr	r1, [r2, #8]
 8002624:	f011 0f0c 	tst.w	r1, #12
 8002628:	f000 809b 	beq.w	8002762 <HAL_RCC_OscConfig+0x1ba>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800262c:	6891      	ldr	r1, [r2, #8]
 800262e:	f001 010c 	and.w	r1, r1, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002632:	2908      	cmp	r1, #8
 8002634:	f000 8091 	beq.w	800275a <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002638:	68e3      	ldr	r3, [r4, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 810c 	beq.w	8002858 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002640:	4b7d      	ldr	r3, [pc, #500]	@ (8002838 <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002642:	4e7c      	ldr	r6, [pc, #496]	@ (8002834 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8002644:	2201      	movs	r2, #1
 8002646:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002648:	f7ff f9ec 	bl	8001a24 <HAL_GetTick>
 800264c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264e:	e005      	b.n	800265c <HAL_RCC_OscConfig+0xb4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002650:	f7ff f9e8 	bl	8001a24 <HAL_GetTick>
 8002654:	1b40      	subs	r0, r0, r5
 8002656:	2802      	cmp	r0, #2
 8002658:	f200 80dc 	bhi.w	8002814 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265c:	6833      	ldr	r3, [r6, #0]
 800265e:	079f      	lsls	r7, r3, #30
 8002660:	d5f6      	bpl.n	8002650 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002662:	6833      	ldr	r3, [r6, #0]
 8002664:	6922      	ldr	r2, [r4, #16]
 8002666:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800266a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800266e:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002670:	6823      	ldr	r3, [r4, #0]
 8002672:	071a      	lsls	r2, r3, #28
 8002674:	d45c      	bmi.n	8002730 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002676:	075d      	lsls	r5, r3, #29
 8002678:	d53a      	bpl.n	80026f0 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267a:	4a6e      	ldr	r2, [pc, #440]	@ (8002834 <HAL_RCC_OscConfig+0x28c>)
 800267c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800267e:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8002682:	f040 8088 	bne.w	8002796 <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800268a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800268e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002690:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8002692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800269a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269c:	4e67      	ldr	r6, [pc, #412]	@ (800283c <HAL_RCC_OscConfig+0x294>)
 800269e:	6833      	ldr	r3, [r6, #0]
 80026a0:	05d8      	lsls	r0, r3, #23
 80026a2:	f140 80a7 	bpl.w	80027f4 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a6:	68a3      	ldr	r3, [r4, #8]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	f000 80b7 	beq.w	800281c <HAL_RCC_OscConfig+0x274>
 80026ae:	2b05      	cmp	r3, #5
 80026b0:	f000 811d 	beq.w	80028ee <HAL_RCC_OscConfig+0x346>
 80026b4:	4e5f      	ldr	r6, [pc, #380]	@ (8002834 <HAL_RCC_OscConfig+0x28c>)
 80026b6:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 80026b8:	f022 0201 	bic.w	r2, r2, #1
 80026bc:	6732      	str	r2, [r6, #112]	@ 0x70
 80026be:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 80026c0:	f022 0204 	bic.w	r2, r2, #4
 80026c4:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f040 80ad 	bne.w	8002826 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026cc:	f7ff f9aa 	bl	8001a24 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d0:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80026d4:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d6:	e005      	b.n	80026e4 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d8:	f7ff f9a4 	bl	8001a24 <HAL_GetTick>
 80026dc:	1bc0      	subs	r0, r0, r7
 80026de:	4540      	cmp	r0, r8
 80026e0:	f200 8098 	bhi.w	8002814 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e4:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80026e6:	079b      	lsls	r3, r3, #30
 80026e8:	d4f6      	bmi.n	80026d8 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80026ea:	2d00      	cmp	r5, #0
 80026ec:	f040 80f9 	bne.w	80028e2 <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f0:	69a3      	ldr	r3, [r4, #24]
 80026f2:	b1cb      	cbz	r3, 8002728 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026f4:	4d4f      	ldr	r5, [pc, #316]	@ (8002834 <HAL_RCC_OscConfig+0x28c>)
 80026f6:	68aa      	ldr	r2, [r5, #8]
 80026f8:	f002 020c 	and.w	r2, r2, #12
 80026fc:	2a08      	cmp	r2, #8
 80026fe:	f000 80bc 	beq.w	800287a <HAL_RCC_OscConfig+0x2d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002702:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002704:	4b4c      	ldr	r3, [pc, #304]	@ (8002838 <HAL_RCC_OscConfig+0x290>)
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800270c:	f000 80f9 	beq.w	8002902 <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7ff f988 	bl	8001a24 <HAL_GetTick>
 8002714:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002716:	e004      	b.n	8002722 <HAL_RCC_OscConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002718:	f7ff f984 	bl	8001a24 <HAL_GetTick>
 800271c:	1b00      	subs	r0, r0, r4
 800271e:	2802      	cmp	r0, #2
 8002720:	d878      	bhi.n	8002814 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002722:	682b      	ldr	r3, [r5, #0]
 8002724:	019b      	lsls	r3, r3, #6
 8002726:	d4f7      	bmi.n	8002718 <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002728:	2000      	movs	r0, #0
}
 800272a:	b002      	add	sp, #8
 800272c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002730:	6963      	ldr	r3, [r4, #20]
 8002732:	b1fb      	cbz	r3, 8002774 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 8002734:	4b40      	ldr	r3, [pc, #256]	@ (8002838 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002736:	4e3f      	ldr	r6, [pc, #252]	@ (8002834 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 8002738:	2201      	movs	r2, #1
 800273a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800273e:	f7ff f971 	bl	8001a24 <HAL_GetTick>
 8002742:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002744:	e004      	b.n	8002750 <HAL_RCC_OscConfig+0x1a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002746:	f7ff f96d 	bl	8001a24 <HAL_GetTick>
 800274a:	1b40      	subs	r0, r0, r5
 800274c:	2802      	cmp	r0, #2
 800274e:	d861      	bhi.n	8002814 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002750:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8002752:	079b      	lsls	r3, r3, #30
 8002754:	d5f7      	bpl.n	8002746 <HAL_RCC_OscConfig+0x19e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002756:	6823      	ldr	r3, [r4, #0]
 8002758:	e78d      	b.n	8002676 <HAL_RCC_OscConfig+0xce>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800275a:	6852      	ldr	r2, [r2, #4]
 800275c:	0251      	lsls	r1, r2, #9
 800275e:	f53f af6b 	bmi.w	8002638 <HAL_RCC_OscConfig+0x90>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002762:	4a34      	ldr	r2, [pc, #208]	@ (8002834 <HAL_RCC_OscConfig+0x28c>)
 8002764:	6812      	ldr	r2, [r2, #0]
 8002766:	0792      	lsls	r2, r2, #30
 8002768:	d538      	bpl.n	80027dc <HAL_RCC_OscConfig+0x234>
 800276a:	68e2      	ldr	r2, [r4, #12]
 800276c:	2a01      	cmp	r2, #1
 800276e:	d035      	beq.n	80027dc <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 8002770:	2001      	movs	r0, #1
 8002772:	e7da      	b.n	800272a <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 8002774:	4a30      	ldr	r2, [pc, #192]	@ (8002838 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002776:	4e2f      	ldr	r6, [pc, #188]	@ (8002834 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 8002778:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800277c:	f7ff f952 	bl	8001a24 <HAL_GetTick>
 8002780:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002782:	e004      	b.n	800278e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002784:	f7ff f94e 	bl	8001a24 <HAL_GetTick>
 8002788:	1b40      	subs	r0, r0, r5
 800278a:	2802      	cmp	r0, #2
 800278c:	d842      	bhi.n	8002814 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800278e:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8002790:	079f      	lsls	r7, r3, #30
 8002792:	d4f7      	bmi.n	8002784 <HAL_RCC_OscConfig+0x1dc>
 8002794:	e7df      	b.n	8002756 <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 8002796:	2500      	movs	r5, #0
 8002798:	e780      	b.n	800269c <HAL_RCC_OscConfig+0xf4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279a:	684a      	ldr	r2, [r1, #4]
 800279c:	0251      	lsls	r1, r2, #9
 800279e:	f57f af1a 	bpl.w	80025d6 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a2:	4a24      	ldr	r2, [pc, #144]	@ (8002834 <HAL_RCC_OscConfig+0x28c>)
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	0392      	lsls	r2, r2, #14
 80027a8:	f57f af38 	bpl.w	800261c <HAL_RCC_OscConfig+0x74>
 80027ac:	6862      	ldr	r2, [r4, #4]
 80027ae:	2a00      	cmp	r2, #0
 80027b0:	f47f af34 	bne.w	800261c <HAL_RCC_OscConfig+0x74>
 80027b4:	e7dc      	b.n	8002770 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b6:	4a1f      	ldr	r2, [pc, #124]	@ (8002834 <HAL_RCC_OscConfig+0x28c>)
 80027b8:	6813      	ldr	r3, [r2, #0]
 80027ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027be:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80027c0:	f7ff f930 	bl	8001a24 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c4:	4e1b      	ldr	r6, [pc, #108]	@ (8002834 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80027c6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c8:	e004      	b.n	80027d4 <HAL_RCC_OscConfig+0x22c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ca:	f7ff f92b 	bl	8001a24 <HAL_GetTick>
 80027ce:	1b40      	subs	r0, r0, r5
 80027d0:	2864      	cmp	r0, #100	@ 0x64
 80027d2:	d81f      	bhi.n	8002814 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027d4:	6833      	ldr	r3, [r6, #0]
 80027d6:	039b      	lsls	r3, r3, #14
 80027d8:	d5f7      	bpl.n	80027ca <HAL_RCC_OscConfig+0x222>
 80027da:	e71e      	b.n	800261a <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027dc:	4915      	ldr	r1, [pc, #84]	@ (8002834 <HAL_RCC_OscConfig+0x28c>)
 80027de:	6920      	ldr	r0, [r4, #16]
 80027e0:	680a      	ldr	r2, [r1, #0]
 80027e2:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 80027e6:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80027ea:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ec:	071a      	lsls	r2, r3, #28
 80027ee:	f57f af42 	bpl.w	8002676 <HAL_RCC_OscConfig+0xce>
 80027f2:	e79d      	b.n	8002730 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f4:	6833      	ldr	r3, [r6, #0]
 80027f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027fa:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80027fc:	f7ff f912 	bl	8001a24 <HAL_GetTick>
 8002800:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002802:	6833      	ldr	r3, [r6, #0]
 8002804:	05d9      	lsls	r1, r3, #23
 8002806:	f53f af4e 	bmi.w	80026a6 <HAL_RCC_OscConfig+0xfe>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280a:	f7ff f90b 	bl	8001a24 <HAL_GetTick>
 800280e:	1bc0      	subs	r0, r0, r7
 8002810:	2802      	cmp	r0, #2
 8002812:	d9f6      	bls.n	8002802 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8002814:	2003      	movs	r0, #3
}
 8002816:	b002      	add	sp, #8
 8002818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800281c:	4a05      	ldr	r2, [pc, #20]	@ (8002834 <HAL_RCC_OscConfig+0x28c>)
 800281e:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8002826:	f7ff f8fd 	bl	8001a24 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282a:	4f02      	ldr	r7, [pc, #8]	@ (8002834 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800282c:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282e:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002832:	e00a      	b.n	800284a <HAL_RCC_OscConfig+0x2a2>
 8002834:	40023800 	.word	0x40023800
 8002838:	42470000 	.word	0x42470000
 800283c:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002840:	f7ff f8f0 	bl	8001a24 <HAL_GetTick>
 8002844:	1b80      	subs	r0, r0, r6
 8002846:	4540      	cmp	r0, r8
 8002848:	d8e4      	bhi.n	8002814 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800284c:	079a      	lsls	r2, r3, #30
 800284e:	d5f7      	bpl.n	8002840 <HAL_RCC_OscConfig+0x298>
    if (pwrclkchanged == SET)
 8002850:	2d00      	cmp	r5, #0
 8002852:	f43f af4d 	beq.w	80026f0 <HAL_RCC_OscConfig+0x148>
 8002856:	e044      	b.n	80028e2 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 8002858:	4a42      	ldr	r2, [pc, #264]	@ (8002964 <HAL_RCC_OscConfig+0x3bc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285a:	4e43      	ldr	r6, [pc, #268]	@ (8002968 <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 800285c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800285e:	f7ff f8e1 	bl	8001a24 <HAL_GetTick>
 8002862:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002864:	e004      	b.n	8002870 <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002866:	f7ff f8dd 	bl	8001a24 <HAL_GetTick>
 800286a:	1b40      	subs	r0, r0, r5
 800286c:	2802      	cmp	r0, #2
 800286e:	d8d1      	bhi.n	8002814 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002870:	6833      	ldr	r3, [r6, #0]
 8002872:	0799      	lsls	r1, r3, #30
 8002874:	d4f7      	bmi.n	8002866 <HAL_RCC_OscConfig+0x2be>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	e6fb      	b.n	8002672 <HAL_RCC_OscConfig+0xca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800287a:	2b01      	cmp	r3, #1
 800287c:	f43f af78 	beq.w	8002770 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8002880:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002882:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002884:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002888:	4291      	cmp	r1, r2
 800288a:	f47f af71 	bne.w	8002770 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800288e:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002890:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002894:	4291      	cmp	r1, r2
 8002896:	f47f af6b 	bne.w	8002770 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800289a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800289c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80028a0:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028a2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80028a6:	f47f af63 	bne.w	8002770 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028aa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80028ac:	0852      	lsrs	r2, r2, #1
 80028ae:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80028b2:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028b4:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80028b8:	f47f af5a 	bne.w	8002770 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028bc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80028be:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028c2:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80028c6:	bf14      	ite	ne
 80028c8:	2001      	movne	r0, #1
 80028ca:	2000      	moveq	r0, #0
 80028cc:	e72d      	b.n	800272a <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ce:	4b26      	ldr	r3, [pc, #152]	@ (8002968 <HAL_RCC_OscConfig+0x3c0>)
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80028de:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028e0:	e76e      	b.n	80027c0 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 80028e2:	4a21      	ldr	r2, [pc, #132]	@ (8002968 <HAL_RCC_OscConfig+0x3c0>)
 80028e4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80028e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ec:	e700      	b.n	80026f0 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002968 <HAL_RCC_OscConfig+0x3c0>)
 80028f0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80028f2:	f042 0204 	orr.w	r2, r2, #4
 80028f6:	671a      	str	r2, [r3, #112]	@ 0x70
 80028f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80028fa:	f042 0201 	orr.w	r2, r2, #1
 80028fe:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002900:	e791      	b.n	8002826 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8002902:	f7ff f88f 	bl	8001a24 <HAL_GetTick>
 8002906:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002908:	e005      	b.n	8002916 <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800290a:	f7ff f88b 	bl	8001a24 <HAL_GetTick>
 800290e:	1b80      	subs	r0, r0, r6
 8002910:	2802      	cmp	r0, #2
 8002912:	f63f af7f 	bhi.w	8002814 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002916:	682b      	ldr	r3, [r5, #0]
 8002918:	0199      	lsls	r1, r3, #6
 800291a:	d4f6      	bmi.n	800290a <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800291c:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8002920:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002922:	430b      	orrs	r3, r1
 8002924:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002928:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	@ 0x28
 800292c:	0852      	lsrs	r2, r2, #1
 800292e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002932:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8002934:	490b      	ldr	r1, [pc, #44]	@ (8002964 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002936:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 800293a:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800293c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800293e:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002940:	f7ff f870 	bl	8001a24 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002944:	4d08      	ldr	r5, [pc, #32]	@ (8002968 <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 8002946:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002948:	e005      	b.n	8002956 <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294a:	f7ff f86b 	bl	8001a24 <HAL_GetTick>
 800294e:	1b00      	subs	r0, r0, r4
 8002950:	2802      	cmp	r0, #2
 8002952:	f63f af5f 	bhi.w	8002814 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002956:	682b      	ldr	r3, [r5, #0]
 8002958:	019a      	lsls	r2, r3, #6
 800295a:	d5f6      	bpl.n	800294a <HAL_RCC_OscConfig+0x3a2>
 800295c:	e6e4      	b.n	8002728 <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 800295e:	2001      	movs	r0, #1
}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	42470000 	.word	0x42470000
 8002968:	40023800 	.word	0x40023800

0800296c <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800296c:	4916      	ldr	r1, [pc, #88]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800296e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002970:	688b      	ldr	r3, [r1, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	2b04      	cmp	r3, #4
 8002978:	d01b      	beq.n	80029b2 <HAL_RCC_GetSysClockFreq+0x46>
 800297a:	2b08      	cmp	r3, #8
 800297c:	d117      	bne.n	80029ae <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800297e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002980:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002982:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002984:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002988:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800298c:	d113      	bne.n	80029b6 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800298e:	480f      	ldr	r0, [pc, #60]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x60>)
 8002990:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002994:	fba1 0100 	umull	r0, r1, r1, r0
 8002998:	f7fe f97e 	bl	8000c98 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800299c:	4b0a      	ldr	r3, [pc, #40]	@ (80029c8 <HAL_RCC_GetSysClockFreq+0x5c>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80029a4:	3301      	adds	r3, #1
 80029a6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80029a8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80029ac:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80029ae:	4807      	ldr	r0, [pc, #28]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x60>)
}
 80029b0:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b2:	4807      	ldr	r0, [pc, #28]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80029b4:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029b6:	4806      	ldr	r0, [pc, #24]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0x64>)
 80029b8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80029bc:	2300      	movs	r3, #0
 80029be:	fba1 0100 	umull	r0, r1, r1, r0
 80029c2:	f7fe f969 	bl	8000c98 <__aeabi_uldivmod>
 80029c6:	e7e9      	b.n	800299c <HAL_RCC_GetSysClockFreq+0x30>
 80029c8:	40023800 	.word	0x40023800
 80029cc:	00f42400 	.word	0x00f42400
 80029d0:	017d7840 	.word	0x017d7840

080029d4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80029d4:	2800      	cmp	r0, #0
 80029d6:	f000 8087 	beq.w	8002ae8 <HAL_RCC_ClockConfig+0x114>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029da:	4a48      	ldr	r2, [pc, #288]	@ (8002afc <HAL_RCC_ClockConfig+0x128>)
 80029dc:	6813      	ldr	r3, [r2, #0]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	428b      	cmp	r3, r1
{
 80029e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029e8:	460d      	mov	r5, r1
 80029ea:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029ec:	d209      	bcs.n	8002a02 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	b2cb      	uxtb	r3, r1
 80029f0:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f2:	6813      	ldr	r3, [r2, #0]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	428b      	cmp	r3, r1
 80029fa:	d002      	beq.n	8002a02 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80029fc:	2001      	movs	r0, #1
}
 80029fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a02:	6823      	ldr	r3, [r4, #0]
 8002a04:	0798      	lsls	r0, r3, #30
 8002a06:	d514      	bpl.n	8002a32 <HAL_RCC_ClockConfig+0x5e>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	0759      	lsls	r1, r3, #29
 8002a0a:	d504      	bpl.n	8002a16 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a0c:	493c      	ldr	r1, [pc, #240]	@ (8002b00 <HAL_RCC_ClockConfig+0x12c>)
 8002a0e:	688a      	ldr	r2, [r1, #8]
 8002a10:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8002a14:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a16:	071a      	lsls	r2, r3, #28
 8002a18:	d504      	bpl.n	8002a24 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a1a:	4939      	ldr	r1, [pc, #228]	@ (8002b00 <HAL_RCC_ClockConfig+0x12c>)
 8002a1c:	688a      	ldr	r2, [r1, #8]
 8002a1e:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8002a22:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a24:	4936      	ldr	r1, [pc, #216]	@ (8002b00 <HAL_RCC_ClockConfig+0x12c>)
 8002a26:	68a0      	ldr	r0, [r4, #8]
 8002a28:	688a      	ldr	r2, [r1, #8]
 8002a2a:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002a2e:	4302      	orrs	r2, r0
 8002a30:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a32:	07df      	lsls	r7, r3, #31
 8002a34:	d521      	bpl.n	8002a7a <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a36:	6862      	ldr	r2, [r4, #4]
 8002a38:	2a01      	cmp	r2, #1
 8002a3a:	d057      	beq.n	8002aec <HAL_RCC_ClockConfig+0x118>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a3c:	1e93      	subs	r3, r2, #2
 8002a3e:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a40:	4b2f      	ldr	r3, [pc, #188]	@ (8002b00 <HAL_RCC_ClockConfig+0x12c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a44:	d94d      	bls.n	8002ae2 <HAL_RCC_ClockConfig+0x10e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a46:	0799      	lsls	r1, r3, #30
 8002a48:	d5d8      	bpl.n	80029fc <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a4a:	4e2d      	ldr	r6, [pc, #180]	@ (8002b00 <HAL_RCC_ClockConfig+0x12c>)
 8002a4c:	68b3      	ldr	r3, [r6, #8]
 8002a4e:	f023 0303 	bic.w	r3, r3, #3
 8002a52:	4313      	orrs	r3, r2
 8002a54:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002a56:	f7fe ffe5 	bl	8001a24 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a5a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8002a5e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a60:	e004      	b.n	8002a6c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a62:	f7fe ffdf 	bl	8001a24 <HAL_GetTick>
 8002a66:	1bc0      	subs	r0, r0, r7
 8002a68:	4540      	cmp	r0, r8
 8002a6a:	d844      	bhi.n	8002af6 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a6c:	68b3      	ldr	r3, [r6, #8]
 8002a6e:	6862      	ldr	r2, [r4, #4]
 8002a70:	f003 030c 	and.w	r3, r3, #12
 8002a74:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002a78:	d1f3      	bne.n	8002a62 <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a7a:	4a20      	ldr	r2, [pc, #128]	@ (8002afc <HAL_RCC_ClockConfig+0x128>)
 8002a7c:	6813      	ldr	r3, [r2, #0]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	42ab      	cmp	r3, r5
 8002a84:	d906      	bls.n	8002a94 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a86:	b2eb      	uxtb	r3, r5
 8002a88:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	6813      	ldr	r3, [r2, #0]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	42ab      	cmp	r3, r5
 8002a92:	d1b3      	bne.n	80029fc <HAL_RCC_ClockConfig+0x28>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a94:	6823      	ldr	r3, [r4, #0]
 8002a96:	075a      	lsls	r2, r3, #29
 8002a98:	d506      	bpl.n	8002aa8 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a9a:	4919      	ldr	r1, [pc, #100]	@ (8002b00 <HAL_RCC_ClockConfig+0x12c>)
 8002a9c:	68e0      	ldr	r0, [r4, #12]
 8002a9e:	688a      	ldr	r2, [r1, #8]
 8002aa0:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8002aa4:	4302      	orrs	r2, r0
 8002aa6:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa8:	071b      	lsls	r3, r3, #28
 8002aaa:	d507      	bpl.n	8002abc <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aac:	4a14      	ldr	r2, [pc, #80]	@ (8002b00 <HAL_RCC_ClockConfig+0x12c>)
 8002aae:	6921      	ldr	r1, [r4, #16]
 8002ab0:	6893      	ldr	r3, [r2, #8]
 8002ab2:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002ab6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002aba:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002abc:	f7ff ff56 	bl	800296c <HAL_RCC_GetSysClockFreq>
 8002ac0:	4a0f      	ldr	r2, [pc, #60]	@ (8002b00 <HAL_RCC_ClockConfig+0x12c>)
 8002ac2:	4c10      	ldr	r4, [pc, #64]	@ (8002b04 <HAL_RCC_ClockConfig+0x130>)
 8002ac4:	6892      	ldr	r2, [r2, #8]
 8002ac6:	4910      	ldr	r1, [pc, #64]	@ (8002b08 <HAL_RCC_ClockConfig+0x134>)
 8002ac8:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8002acc:	4603      	mov	r3, r0
 8002ace:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick(uwTickPrio);
 8002ad0:	480e      	ldr	r0, [pc, #56]	@ (8002b0c <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ad2:	40d3      	lsrs	r3, r2
  HAL_InitTick(uwTickPrio);
 8002ad4:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ad6:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8002ad8:	f7fe ff5a 	bl	8001990 <HAL_InitTick>
  return HAL_OK;
 8002adc:	2000      	movs	r0, #0
}
 8002ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ae2:	0198      	lsls	r0, r3, #6
 8002ae4:	d4b1      	bmi.n	8002a4a <HAL_RCC_ClockConfig+0x76>
 8002ae6:	e789      	b.n	80029fc <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8002ae8:	2001      	movs	r0, #1
}
 8002aea:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aec:	4b04      	ldr	r3, [pc, #16]	@ (8002b00 <HAL_RCC_ClockConfig+0x12c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	039e      	lsls	r6, r3, #14
 8002af2:	d4aa      	bmi.n	8002a4a <HAL_RCC_ClockConfig+0x76>
 8002af4:	e782      	b.n	80029fc <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8002af6:	2003      	movs	r0, #3
 8002af8:	e781      	b.n	80029fe <HAL_RCC_ClockConfig+0x2a>
 8002afa:	bf00      	nop
 8002afc:	40023c00 	.word	0x40023c00
 8002b00:	40023800 	.word	0x40023800
 8002b04:	0800cf40 	.word	0x0800cf40
 8002b08:	20000000 	.word	0x20000000
 8002b0c:	20000008 	.word	0x20000008

08002b10 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b10:	4b04      	ldr	r3, [pc, #16]	@ (8002b24 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8002b12:	4905      	ldr	r1, [pc, #20]	@ (8002b28 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	4a05      	ldr	r2, [pc, #20]	@ (8002b2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002b18:	6808      	ldr	r0, [r1, #0]
 8002b1a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002b1e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002b20:	40d8      	lsrs	r0, r3
 8002b22:	4770      	bx	lr
 8002b24:	40023800 	.word	0x40023800
 8002b28:	20000000 	.word	0x20000000
 8002b2c:	0800cf38 	.word	0x0800cf38

08002b30 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b30:	4b04      	ldr	r3, [pc, #16]	@ (8002b44 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8002b32:	4905      	ldr	r1, [pc, #20]	@ (8002b48 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	4a05      	ldr	r2, [pc, #20]	@ (8002b4c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002b38:	6808      	ldr	r0, [r1, #0]
 8002b3a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002b3e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002b40:	40d8      	lsrs	r0, r3
 8002b42:	4770      	bx	lr
 8002b44:	40023800 	.word	0x40023800
 8002b48:	20000000 	.word	0x20000000
 8002b4c:	0800cf38 	.word	0x0800cf38

08002b50 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b50:	2800      	cmp	r0, #0
 8002b52:	d071      	beq.n	8002c38 <HAL_TIM_Base_Init+0xe8>
{
 8002b54:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b56:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002b5a:	4604      	mov	r4, r0
 8002b5c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d053      	beq.n	8002c0c <HAL_TIM_Base_Init+0xbc>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b64:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b66:	4e35      	ldr	r6, [pc, #212]	@ (8002c3c <HAL_TIM_Base_Init+0xec>)

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b68:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b6a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b6c:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b74:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8002b76:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b78:	d04d      	beq.n	8002c16 <HAL_TIM_Base_Init+0xc6>
 8002b7a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002b7e:	d017      	beq.n	8002bb0 <HAL_TIM_Base_Init+0x60>
 8002b80:	f5a6 467c 	sub.w	r6, r6, #64512	@ 0xfc00
 8002b84:	42b2      	cmp	r2, r6
 8002b86:	d013      	beq.n	8002bb0 <HAL_TIM_Base_Init+0x60>
 8002b88:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002b8c:	42b2      	cmp	r2, r6
 8002b8e:	d00f      	beq.n	8002bb0 <HAL_TIM_Base_Init+0x60>
 8002b90:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002b94:	42b2      	cmp	r2, r6
 8002b96:	d00b      	beq.n	8002bb0 <HAL_TIM_Base_Init+0x60>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b98:	4e29      	ldr	r6, [pc, #164]	@ (8002c40 <HAL_TIM_Base_Init+0xf0>)
 8002b9a:	42b2      	cmp	r2, r6
 8002b9c:	d00c      	beq.n	8002bb8 <HAL_TIM_Base_Init+0x68>
 8002b9e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002ba2:	42b2      	cmp	r2, r6
 8002ba4:	d008      	beq.n	8002bb8 <HAL_TIM_Base_Init+0x68>
 8002ba6:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002baa:	42b2      	cmp	r2, r6
 8002bac:	d108      	bne.n	8002bc0 <HAL_TIM_Base_Init+0x70>
 8002bae:	e003      	b.n	8002bb8 <HAL_TIM_Base_Init+0x68>
    tmpcr1 |= Structure->CounterMode;
 8002bb0:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002bb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002bb6:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bb8:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bbe:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bc4:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002bc6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bc8:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002bca:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002bd0:	6913      	ldr	r3, [r2, #16]
 8002bd2:	07db      	lsls	r3, r3, #31
 8002bd4:	d503      	bpl.n	8002bde <HAL_TIM_Base_Init+0x8e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bd6:	6913      	ldr	r3, [r2, #16]
 8002bd8:	f023 0301 	bic.w	r3, r3, #1
 8002bdc:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bde:	2301      	movs	r3, #1
 8002be0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002be8:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002bec:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002bf0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002bf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002bfc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002c00:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002c04:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002c08:	2000      	movs	r0, #0
}
 8002c0a:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8002c0c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002c10:	f7fe fd60 	bl	80016d4 <HAL_TIM_Base_MspInit>
 8002c14:	e7a6      	b.n	8002b64 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8002c16:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002c1c:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c1e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c24:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c2a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002c2c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c2e:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002c30:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002c32:	6963      	ldr	r3, [r4, #20]
 8002c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c36:	e7c9      	b.n	8002bcc <HAL_TIM_Base_Init+0x7c>
    return HAL_ERROR;
 8002c38:	2001      	movs	r0, #1
}
 8002c3a:	4770      	bx	lr
 8002c3c:	40010000 	.word	0x40010000
 8002c40:	40014000 	.word	0x40014000

08002c44 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002c44:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d127      	bne.n	8002c9c <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c4c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c4e:	4914      	ldr	r1, [pc, #80]	@ (8002ca0 <HAL_TIM_Base_Start_IT+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002c50:	2202      	movs	r2, #2
 8002c52:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c56:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c58:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c60:	d011      	beq.n	8002c86 <HAL_TIM_Base_Start_IT+0x42>
 8002c62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c66:	d00e      	beq.n	8002c86 <HAL_TIM_Base_Start_IT+0x42>
 8002c68:	4a0e      	ldr	r2, [pc, #56]	@ (8002ca4 <HAL_TIM_Base_Start_IT+0x60>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d00b      	beq.n	8002c86 <HAL_TIM_Base_Start_IT+0x42>
 8002c6e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d007      	beq.n	8002c86 <HAL_TIM_Base_Start_IT+0x42>
 8002c76:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d003      	beq.n	8002c86 <HAL_TIM_Base_Start_IT+0x42>
 8002c7e:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d104      	bne.n	8002c90 <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c86:	689a      	ldr	r2, [r3, #8]
 8002c88:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c8c:	2a06      	cmp	r2, #6
 8002c8e:	d003      	beq.n	8002c98 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	f042 0201 	orr.w	r2, r2, #1
 8002c96:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002c98:	2000      	movs	r0, #0
 8002c9a:	4770      	bx	lr
    return HAL_ERROR;
 8002c9c:	2001      	movs	r0, #1
}
 8002c9e:	4770      	bx	lr
 8002ca0:	40010000 	.word	0x40010000
 8002ca4:	40000400 	.word	0x40000400

08002ca8 <HAL_TIM_OC_MspInit>:
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop

08002cac <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8002cac:	2800      	cmp	r0, #0
 8002cae:	d071      	beq.n	8002d94 <HAL_TIM_OC_Init+0xe8>
{
 8002cb0:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8002cb2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002cb6:	4604      	mov	r4, r0
 8002cb8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d053      	beq.n	8002d68 <HAL_TIM_OC_Init+0xbc>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002cc0:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cc2:	4e35      	ldr	r6, [pc, #212]	@ (8002d98 <HAL_TIM_OC_Init+0xec>)
  TIMx->PSC = Structure->Prescaler;
 8002cc4:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cc6:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc8:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd0:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8002cd2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd4:	d04d      	beq.n	8002d72 <HAL_TIM_OC_Init+0xc6>
 8002cd6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8002cda:	d017      	beq.n	8002d0c <HAL_TIM_OC_Init+0x60>
 8002cdc:	f5a6 467c 	sub.w	r6, r6, #64512	@ 0xfc00
 8002ce0:	42b2      	cmp	r2, r6
 8002ce2:	d013      	beq.n	8002d0c <HAL_TIM_OC_Init+0x60>
 8002ce4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002ce8:	42b2      	cmp	r2, r6
 8002cea:	d00f      	beq.n	8002d0c <HAL_TIM_OC_Init+0x60>
 8002cec:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002cf0:	42b2      	cmp	r2, r6
 8002cf2:	d00b      	beq.n	8002d0c <HAL_TIM_OC_Init+0x60>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cf4:	4e29      	ldr	r6, [pc, #164]	@ (8002d9c <HAL_TIM_OC_Init+0xf0>)
 8002cf6:	42b2      	cmp	r2, r6
 8002cf8:	d00c      	beq.n	8002d14 <HAL_TIM_OC_Init+0x68>
 8002cfa:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002cfe:	42b2      	cmp	r2, r6
 8002d00:	d008      	beq.n	8002d14 <HAL_TIM_OC_Init+0x68>
 8002d02:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002d06:	42b2      	cmp	r2, r6
 8002d08:	d108      	bne.n	8002d1c <HAL_TIM_OC_Init+0x70>
 8002d0a:	e003      	b.n	8002d14 <HAL_TIM_OC_Init+0x68>
    tmpcr1 |= Structure->CounterMode;
 8002d0c:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002d12:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d14:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d1a:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d20:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002d22:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d24:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002d26:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d2c:	6913      	ldr	r3, [r2, #16]
 8002d2e:	07db      	lsls	r3, r3, #31
 8002d30:	d503      	bpl.n	8002d3a <HAL_TIM_OC_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d32:	6913      	ldr	r3, [r2, #16]
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d40:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8002d44:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8002d48:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002d4c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002d54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d58:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8002d5c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002d60:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8002d64:	2000      	movs	r0, #0
}
 8002d66:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8002d68:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 8002d6c:	f7ff ff9c 	bl	8002ca8 <HAL_TIM_OC_MspInit>
 8002d70:	e7a6      	b.n	8002cc0 <HAL_TIM_OC_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8002d72:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8002d78:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d7a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d7c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d80:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d86:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8002d88:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d8a:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002d8c:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8002d8e:	6963      	ldr	r3, [r4, #20]
 8002d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d92:	e7c9      	b.n	8002d28 <HAL_TIM_OC_Init+0x7c>
    return HAL_ERROR;
 8002d94:	2001      	movs	r0, #1
}
 8002d96:	4770      	bx	lr
 8002d98:	40010000 	.word	0x40010000
 8002d9c:	40014000 	.word	0x40014000

08002da0 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002da0:	bb91      	cbnz	r1, 8002e08 <HAL_TIM_OC_Start+0x68>
 8002da2:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d136      	bne.n	8002e18 <HAL_TIM_OC_Start+0x78>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002daa:	2302      	movs	r3, #2
 8002dac:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002db0:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002db2:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002db6:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002db8:	2201      	movs	r2, #1
 8002dba:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8002dbc:	ea20 0002 	bic.w	r0, r0, r2
 8002dc0:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002dc2:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dc4:	4922      	ldr	r1, [pc, #136]	@ (8002e50 <HAL_TIM_OC_Start+0xb0>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002dc6:	4302      	orrs	r2, r0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dc8:	428b      	cmp	r3, r1
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002dca:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002dcc:	d02a      	beq.n	8002e24 <HAL_TIM_OC_Start+0x84>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd2:	d00e      	beq.n	8002df2 <HAL_TIM_OC_Start+0x52>
 8002dd4:	4a1f      	ldr	r2, [pc, #124]	@ (8002e54 <HAL_TIM_OC_Start+0xb4>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d00b      	beq.n	8002df2 <HAL_TIM_OC_Start+0x52>
 8002dda:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d007      	beq.n	8002df2 <HAL_TIM_OC_Start+0x52>
 8002de2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d003      	beq.n	8002df2 <HAL_TIM_OC_Start+0x52>
 8002dea:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d104      	bne.n	8002dfc <HAL_TIM_OC_Start+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df8:	2a06      	cmp	r2, #6
 8002dfa:	d003      	beq.n	8002e04 <HAL_TIM_OC_Start+0x64>
      __HAL_TIM_ENABLE(htim);
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	f042 0201 	orr.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002e04:	2000      	movs	r0, #0
 8002e06:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e08:	2904      	cmp	r1, #4
 8002e0a:	d010      	beq.n	8002e2e <HAL_TIM_OC_Start+0x8e>
 8002e0c:	2908      	cmp	r1, #8
 8002e0e:	d016      	beq.n	8002e3e <HAL_TIM_OC_Start+0x9e>
 8002e10:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d001      	beq.n	8002e1c <HAL_TIM_OC_Start+0x7c>
    return HAL_ERROR;
 8002e18:	2001      	movs	r0, #1
}
 8002e1a:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 8002e22:	e7c5      	b.n	8002db0 <HAL_TIM_OC_Start+0x10>
    __HAL_TIM_MOE_ENABLE(htim);
 8002e24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e26:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e2a:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e2c:	e7e1      	b.n	8002df2 <HAL_TIM_OC_Start+0x52>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e2e:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d1f0      	bne.n	8002e18 <HAL_TIM_OC_Start+0x78>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e36:	2302      	movs	r3, #2
 8002e38:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 8002e3c:	e7b8      	b.n	8002db0 <HAL_TIM_OC_Start+0x10>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e3e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d1e8      	bne.n	8002e18 <HAL_TIM_OC_Start+0x78>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e46:	2302      	movs	r3, #2
 8002e48:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8002e4c:	e7b0      	b.n	8002db0 <HAL_TIM_OC_Start+0x10>
 8002e4e:	bf00      	nop
 8002e50:	40010000 	.word	0x40010000
 8002e54:	40000400 	.word	0x40000400

08002e58 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8002e58:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	f000 8081 	beq.w	8002f64 <HAL_TIM_OC_ConfigChannel+0x10c>
{
 8002e62:	b470      	push	{r4, r5, r6}
 8002e64:	4684      	mov	ip, r0
  switch (Channel)
 8002e66:	2a0c      	cmp	r2, #12
 8002e68:	d808      	bhi.n	8002e7c <HAL_TIM_OC_ConfigChannel+0x24>
 8002e6a:	e8df f002 	tbb	[pc, r2]
 8002e6e:	072d      	.short	0x072d
 8002e70:	07460707 	.word	0x07460707
 8002e74:	07610707 	.word	0x07610707
 8002e78:	0707      	.short	0x0707
 8002e7a:	0d          	.byte	0x0d
 8002e7b:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  switch (Channel)
 8002e82:	2001      	movs	r0, #1
}
 8002e84:	bc70      	pop	{r4, r5, r6}
 8002e86:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002e88:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e8a:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8002e8c:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e8e:	6a18      	ldr	r0, [r3, #32]
 8002e90:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8002e94:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002e96:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8002e98:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e9a:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e9e:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ea2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002ea4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ea8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eac:	4d47      	ldr	r5, [pc, #284]	@ (8002fcc <HAL_TIM_OC_ConfigChannel+0x174>)
 8002eae:	42ab      	cmp	r3, r5
 8002eb0:	d076      	beq.n	8002fa0 <HAL_TIM_OC_ConfigChannel+0x148>
  TIMx->CCR4 = OC_Config->Pulse;
 8002eb2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002eb4:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002eb6:	61d8      	str	r0, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002eb8:	6419      	str	r1, [r3, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8002eba:	621a      	str	r2, [r3, #32]
  __HAL_UNLOCK(htim);
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8002ec2:	2000      	movs	r0, #0
}
 8002ec4:	bc70      	pop	{r4, r5, r6}
 8002ec6:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ec8:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8002eca:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8002ecc:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ece:	6a18      	ldr	r0, [r3, #32]
 8002ed0:	f020 0001 	bic.w	r0, r0, #1
 8002ed4:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002ed6:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8002ed8:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002eda:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002ede:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8002ee0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002ee2:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 8002ee6:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ee8:	4d38      	ldr	r5, [pc, #224]	@ (8002fcc <HAL_TIM_OC_ConfigChannel+0x174>)
 8002eea:	42ab      	cmp	r3, r5
 8002eec:	d03c      	beq.n	8002f68 <HAL_TIM_OC_ConfigChannel+0x110>
  TIMx->CCR1 = OC_Config->Pulse;
 8002eee:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002ef0:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002ef2:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002ef4:	6359      	str	r1, [r3, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8002ef6:	621a      	str	r2, [r3, #32]
}
 8002ef8:	e7e0      	b.n	8002ebc <HAL_TIM_OC_ConfigChannel+0x64>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002efa:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002efc:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8002efe:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f00:	6a18      	ldr	r0, [r3, #32]
 8002f02:	f020 0010 	bic.w	r0, r0, #16
 8002f06:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002f08:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8002f0a:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f0c:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f10:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f14:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002f16:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f1a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f1e:	4d2b      	ldr	r5, [pc, #172]	@ (8002fcc <HAL_TIM_OC_ConfigChannel+0x174>)
 8002f20:	42ab      	cmp	r3, r5
 8002f22:	d02e      	beq.n	8002f82 <HAL_TIM_OC_ConfigChannel+0x12a>
  TIMx->CCR2 = OC_Config->Pulse;
 8002f24:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002f26:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002f28:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002f2a:	6399      	str	r1, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8002f2c:	621a      	str	r2, [r3, #32]
}
 8002f2e:	e7c5      	b.n	8002ebc <HAL_TIM_OC_ConfigChannel+0x64>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f30:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8002f32:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8002f34:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f36:	6a18      	ldr	r0, [r3, #32]
 8002f38:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8002f3c:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8002f3e:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8002f40:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f42:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002f46:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f48:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002f4a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f4e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f52:	4d1e      	ldr	r5, [pc, #120]	@ (8002fcc <HAL_TIM_OC_ConfigChannel+0x174>)
 8002f54:	42ab      	cmp	r3, r5
 8002f56:	d029      	beq.n	8002fac <HAL_TIM_OC_ConfigChannel+0x154>
  TIMx->CCR3 = OC_Config->Pulse;
 8002f58:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8002f5a:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002f5c:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8002f5e:	63d9      	str	r1, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8002f60:	621a      	str	r2, [r3, #32]
}
 8002f62:	e7ab      	b.n	8002ebc <HAL_TIM_OC_ConfigChannel+0x64>
  __HAL_LOCK(htim);
 8002f64:	2002      	movs	r0, #2
}
 8002f66:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8002f68:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f6a:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002f6e:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f70:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f74:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f78:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f7a:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f7e:	432c      	orrs	r4, r5
 8002f80:	e7b5      	b.n	8002eee <HAL_TIM_OC_ConfigChannel+0x96>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f82:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f88:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f8c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f90:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f94:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f9a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8002f9e:	e7c1      	b.n	8002f24 <HAL_TIM_OC_ConfigChannel+0xcc>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fa0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fa2:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fa6:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002faa:	e782      	b.n	8002eb2 <HAL_TIM_OC_ConfigChannel+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fac:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fb2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fb6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fba:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fbe:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fc4:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8002fc8:	e7c6      	b.n	8002f58 <HAL_TIM_OC_ConfigChannel+0x100>
 8002fca:	bf00      	nop
 8002fcc:	40010000 	.word	0x40010000

08002fd0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002fd0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d071      	beq.n	80030bc <HAL_TIM_ConfigClockSource+0xec>
 8002fd8:	4602      	mov	r2, r0
{
 8002fda:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8002fdc:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 8002fde:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe0:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_LOCK(htim);
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002fea:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fec:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ff0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002ff4:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 8002ff6:	680b      	ldr	r3, [r1, #0]
 8002ff8:	2b60      	cmp	r3, #96	@ 0x60
 8002ffa:	d061      	beq.n	80030c0 <HAL_TIM_ConfigClockSource+0xf0>
 8002ffc:	d824      	bhi.n	8003048 <HAL_TIM_ConfigClockSource+0x78>
 8002ffe:	2b40      	cmp	r3, #64	@ 0x40
 8003000:	d077      	beq.n	80030f2 <HAL_TIM_ConfigClockSource+0x122>
 8003002:	d94a      	bls.n	800309a <HAL_TIM_ConfigClockSource+0xca>
 8003004:	2b50      	cmp	r3, #80	@ 0x50
 8003006:	d117      	bne.n	8003038 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 8003008:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800300a:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 800300c:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800300e:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003012:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003014:	6a23      	ldr	r3, [r4, #32]
 8003016:	f023 0301 	bic.w	r3, r3, #1
 800301a:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800301c:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800301e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003022:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003026:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003028:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800302a:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800302c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003030:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8003034:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003036:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003038:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800303a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800303c:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8003040:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 8003044:	bc30      	pop	{r4, r5}
 8003046:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003048:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800304c:	d0f3      	beq.n	8003036 <HAL_TIM_ConfigClockSource+0x66>
 800304e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003052:	d110      	bne.n	8003076 <HAL_TIM_ConfigClockSource+0xa6>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003054:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8003058:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800305a:	432b      	orrs	r3, r5
 800305c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800305e:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003062:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8003066:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003068:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800306a:	68a3      	ldr	r3, [r4, #8]
 800306c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003070:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003072:	2000      	movs	r0, #0
 8003074:	e7e0      	b.n	8003038 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8003076:	2b70      	cmp	r3, #112	@ 0x70
 8003078:	d1de      	bne.n	8003038 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800307a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800307e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003080:	432b      	orrs	r3, r5
 8003082:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003084:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003088:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800308c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800308e:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003090:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003092:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003096:	60a3      	str	r3, [r4, #8]
      break;
 8003098:	e7cd      	b.n	8003036 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800309a:	2b20      	cmp	r3, #32
 800309c:	d002      	beq.n	80030a4 <HAL_TIM_ConfigClockSource+0xd4>
 800309e:	d909      	bls.n	80030b4 <HAL_TIM_ConfigClockSource+0xe4>
 80030a0:	2b30      	cmp	r3, #48	@ 0x30
 80030a2:	d1c9      	bne.n	8003038 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 80030a4:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80030a6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030aa:	430b      	orrs	r3, r1
 80030ac:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80030b0:	60a3      	str	r3, [r4, #8]
}
 80030b2:	e7c0      	b.n	8003036 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 80030b4:	f033 0110 	bics.w	r1, r3, #16
 80030b8:	d1be      	bne.n	8003038 <HAL_TIM_ConfigClockSource+0x68>
 80030ba:	e7f3      	b.n	80030a4 <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 80030bc:	2002      	movs	r0, #2
}
 80030be:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 80030c0:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 80030c2:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80030c4:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030c6:	6a21      	ldr	r1, [r4, #32]
 80030c8:	f021 0110 	bic.w	r1, r1, #16
 80030cc:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030ce:	69a1      	ldr	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030d0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030d4:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccer |= (TIM_ICPolarity << 4U);
 80030d8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030dc:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80030e0:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 80030e2:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80030e4:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80030e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030ea:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 80030ee:	60a3      	str	r3, [r4, #8]
}
 80030f0:	e7a1      	b.n	8003036 <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 80030f2:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80030f4:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 80030f6:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030f8:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80030fc:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030fe:	6a23      	ldr	r3, [r4, #32]
 8003100:	f023 0301 	bic.w	r3, r3, #1
 8003104:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003106:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003108:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800310c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8003110:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8003112:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 8003114:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800311a:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 800311e:	60a3      	str	r3, [r4, #8]
}
 8003120:	e789      	b.n	8003036 <HAL_TIM_ConfigClockSource+0x66>
 8003122:	bf00      	nop

08003124 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop

08003128 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop

0800312c <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop

08003130 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop

08003134 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8003134:	6803      	ldr	r3, [r0, #0]
{
 8003136:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8003138:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 800313a:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800313c:	07a9      	lsls	r1, r5, #30
{
 800313e:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003140:	d501      	bpl.n	8003146 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003142:	07b2      	lsls	r2, r6, #30
 8003144:	d451      	bmi.n	80031ea <HAL_TIM_IRQHandler+0xb6>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003146:	0769      	lsls	r1, r5, #29
 8003148:	d501      	bpl.n	800314e <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800314a:	0772      	lsls	r2, r6, #29
 800314c:	d43a      	bmi.n	80031c4 <HAL_TIM_IRQHandler+0x90>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800314e:	072b      	lsls	r3, r5, #28
 8003150:	d501      	bpl.n	8003156 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003152:	0730      	lsls	r0, r6, #28
 8003154:	d424      	bmi.n	80031a0 <HAL_TIM_IRQHandler+0x6c>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003156:	06ea      	lsls	r2, r5, #27
 8003158:	d501      	bpl.n	800315e <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800315a:	06f3      	lsls	r3, r6, #27
 800315c:	d410      	bmi.n	8003180 <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800315e:	07e8      	lsls	r0, r5, #31
 8003160:	d501      	bpl.n	8003166 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003162:	07f1      	lsls	r1, r6, #31
 8003164:	d457      	bmi.n	8003216 <HAL_TIM_IRQHandler+0xe2>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003166:	062a      	lsls	r2, r5, #24
 8003168:	d501      	bpl.n	800316e <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800316a:	0633      	lsls	r3, r6, #24
 800316c:	d45b      	bmi.n	8003226 <HAL_TIM_IRQHandler+0xf2>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800316e:	0668      	lsls	r0, r5, #25
 8003170:	d501      	bpl.n	8003176 <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003172:	0671      	lsls	r1, r6, #25
 8003174:	d45f      	bmi.n	8003236 <HAL_TIM_IRQHandler+0x102>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003176:	06aa      	lsls	r2, r5, #26
 8003178:	d501      	bpl.n	800317e <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800317a:	06b3      	lsls	r3, r6, #26
 800317c:	d442      	bmi.n	8003204 <HAL_TIM_IRQHandler+0xd0>
}
 800317e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	f06f 0210 	mvn.w	r2, #16
 8003186:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003188:	2208      	movs	r2, #8
 800318a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800318c:	69db      	ldr	r3, [r3, #28]
 800318e:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8003192:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003194:	d063      	beq.n	800325e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8003196:	f7ff ffc7 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319a:	2300      	movs	r3, #0
 800319c:	7723      	strb	r3, [r4, #28]
 800319e:	e7de      	b.n	800315e <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031a0:	6823      	ldr	r3, [r4, #0]
 80031a2:	f06f 0208 	mvn.w	r2, #8
 80031a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031a8:	2204      	movs	r2, #4
 80031aa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80031b0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031b2:	d151      	bne.n	8003258 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031b4:	f7ff ffb6 	bl	8003124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b8:	4620      	mov	r0, r4
 80031ba:	f7ff ffb7 	bl	800312c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031be:	2300      	movs	r3, #0
 80031c0:	7723      	strb	r3, [r4, #28]
 80031c2:	e7c8      	b.n	8003156 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80031c4:	6823      	ldr	r3, [r4, #0]
 80031c6:	f06f 0204 	mvn.w	r2, #4
 80031ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031cc:	2202      	movs	r2, #2
 80031ce:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80031d6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031d8:	d13b      	bne.n	8003252 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031da:	f7ff ffa3 	bl	8003124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031de:	4620      	mov	r0, r4
 80031e0:	f7ff ffa4 	bl	800312c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e4:	2300      	movs	r3, #0
 80031e6:	7723      	strb	r3, [r4, #28]
 80031e8:	e7b1      	b.n	800314e <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031ea:	f06f 0202 	mvn.w	r2, #2
 80031ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031f0:	2201      	movs	r2, #1
 80031f2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	079b      	lsls	r3, r3, #30
 80031f8:	d025      	beq.n	8003246 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80031fa:	f7ff ff95 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fe:	2300      	movs	r3, #0
 8003200:	7723      	strb	r3, [r4, #28]
 8003202:	e7a0      	b.n	8003146 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003204:	6823      	ldr	r3, [r4, #0]
 8003206:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800320a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800320c:	611a      	str	r2, [r3, #16]
}
 800320e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8003212:	f000 b88d 	b.w	8003330 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003216:	6823      	ldr	r3, [r4, #0]
 8003218:	f06f 0201 	mvn.w	r2, #1
 800321c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800321e:	4620      	mov	r0, r4
 8003220:	f7fe f9d6 	bl	80015d0 <HAL_TIM_PeriodElapsedCallback>
 8003224:	e79f      	b.n	8003166 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003226:	6823      	ldr	r3, [r4, #0]
 8003228:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800322c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800322e:	4620      	mov	r0, r4
 8003230:	f000 f880 	bl	8003334 <HAL_TIMEx_BreakCallback>
 8003234:	e79b      	b.n	800316e <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800323c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800323e:	4620      	mov	r0, r4
 8003240:	f7ff ff76 	bl	8003130 <HAL_TIM_TriggerCallback>
 8003244:	e797      	b.n	8003176 <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003246:	f7ff ff6d 	bl	8003124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800324a:	4620      	mov	r0, r4
 800324c:	f7ff ff6e 	bl	800312c <HAL_TIM_PWM_PulseFinishedCallback>
 8003250:	e7d5      	b.n	80031fe <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8003252:	f7ff ff69 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
 8003256:	e7c5      	b.n	80031e4 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_IC_CaptureCallback(htim);
 8003258:	f7ff ff66 	bl	8003128 <HAL_TIM_IC_CaptureCallback>
 800325c:	e7af      	b.n	80031be <HAL_TIM_IRQHandler+0x8a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325e:	f7ff ff61 	bl	8003124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003262:	4620      	mov	r0, r4
 8003264:	f7ff ff62 	bl	800312c <HAL_TIM_PWM_PulseFinishedCallback>
 8003268:	e797      	b.n	800319a <HAL_TIM_IRQHandler+0x66>
 800326a:	bf00      	nop

0800326c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800326c:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8003270:	2a01      	cmp	r2, #1
 8003272:	d02f      	beq.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8003274:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003276:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003278:	2002      	movs	r0, #2
{
 800327a:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800327c:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8003280:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003282:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8003284:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003286:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800328a:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800328c:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800328e:	4812      	ldr	r0, [pc, #72]	@ (80032d8 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8003290:	4282      	cmp	r2, r0
 8003292:	d012      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8003294:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003298:	d00f      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800329a:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 800329e:	4282      	cmp	r2, r0
 80032a0:	d00b      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80032a2:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80032a6:	4282      	cmp	r2, r0
 80032a8:	d007      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80032aa:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80032ae:	4282      	cmp	r2, r0
 80032b0:	d003      	beq.n	80032ba <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80032b2:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 80032b6:	4282      	cmp	r2, r0
 80032b8:	d104      	bne.n	80032c4 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ba:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032bc:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032c0:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032c2:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80032c4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80032cc:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80032d0:	bc30      	pop	{r4, r5}
 80032d2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80032d4:	2002      	movs	r0, #2
}
 80032d6:	4770      	bx	lr
 80032d8:	40010000 	.word	0x40010000

080032dc <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80032dc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d023      	beq.n	800332c <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 80032e4:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80032e6:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80032ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032ee:	4602      	mov	r2, r0
 80032f0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80032f2:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80032f4:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80032f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80032fa:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80032fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003300:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003302:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003304:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003308:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800330a:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800330c:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800330e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003312:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003314:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003318:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 800331a:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800331c:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 800331e:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8003320:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8003324:	4608      	mov	r0, r1
}
 8003326:	f85d 4b04 	ldr.w	r4, [sp], #4
 800332a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800332c:	2002      	movs	r0, #2
}
 800332e:	4770      	bx	lr

08003330 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop

08003334 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop

08003338 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003338:	2800      	cmp	r0, #0
 800333a:	f000 8087 	beq.w	800344c <HAL_UART_Init+0x114>
{
 800333e:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003340:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003344:	4604      	mov	r4, r0
 8003346:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800334a:	2b00      	cmp	r3, #0
 800334c:	d079      	beq.n	8003442 <HAL_UART_Init+0x10a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800334e:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003350:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8003352:	2224      	movs	r2, #36	@ 0x24
 8003354:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800335e:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003360:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003362:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003364:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8003368:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800336a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800336c:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800336e:	4302      	orrs	r2, r0
 8003370:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003372:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003374:	4302      	orrs	r2, r0
 8003376:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003378:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 800337c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003380:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8003382:	430a      	orrs	r2, r1
 8003384:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003386:	695a      	ldr	r2, [r3, #20]
 8003388:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800338a:	4931      	ldr	r1, [pc, #196]	@ (8003450 <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800338c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003390:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003392:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003394:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003396:	d036      	beq.n	8003406 <HAL_UART_Init+0xce>
 8003398:	4a2e      	ldr	r2, [pc, #184]	@ (8003454 <HAL_UART_Init+0x11c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d033      	beq.n	8003406 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800339e:	f7ff fbb7 	bl	8002b10 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033a2:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033a4:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033a6:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033aa:	e9d4 5300 	ldrd	r5, r3, [r4]
 80033ae:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033b2:	d02b      	beq.n	800340c <HAL_UART_Init+0xd4>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033b4:	009a      	lsls	r2, r3, #2
 80033b6:	0f9b      	lsrs	r3, r3, #30
 80033b8:	f7fd fc6e 	bl	8000c98 <__aeabi_uldivmod>
 80033bc:	4a26      	ldr	r2, [pc, #152]	@ (8003458 <HAL_UART_Init+0x120>)
 80033be:	fba2 1300 	umull	r1, r3, r2, r0
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	2164      	movs	r1, #100	@ 0x64
 80033c6:	fb01 0013 	mls	r0, r1, r3, r0
 80033ca:	0100      	lsls	r0, r0, #4
 80033cc:	3032      	adds	r0, #50	@ 0x32
 80033ce:	fba2 2000 	umull	r2, r0, r2, r0
 80033d2:	011b      	lsls	r3, r3, #4
 80033d4:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 80033d8:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033da:	692a      	ldr	r2, [r5, #16]
 80033dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033e0:	612a      	str	r2, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033e2:	696a      	ldr	r2, [r5, #20]
 80033e4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033e8:	616a      	str	r2, [r5, #20]
  __HAL_UART_ENABLE(huart);
 80033ea:	68ea      	ldr	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ec:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80033ee:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80033f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033f4:	60ea      	str	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f6:	6463      	str	r3, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033f8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033fc:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  return HAL_OK;
 8003400:	4618      	mov	r0, r3
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003402:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8003404:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8003406:	f7ff fb93 	bl	8002b30 <HAL_RCC_GetPCLK2Freq>
 800340a:	e7ca      	b.n	80033a2 <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800340c:	18da      	adds	r2, r3, r3
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	415b      	adcs	r3, r3
 8003414:	f7fd fc40 	bl	8000c98 <__aeabi_uldivmod>
 8003418:	4a0f      	ldr	r2, [pc, #60]	@ (8003458 <HAL_UART_Init+0x120>)
 800341a:	fba2 3100 	umull	r3, r1, r2, r0
 800341e:	0949      	lsrs	r1, r1, #5
 8003420:	2364      	movs	r3, #100	@ 0x64
 8003422:	fb03 0311 	mls	r3, r3, r1, r0
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	3332      	adds	r3, #50	@ 0x32
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8003432:	091b      	lsrs	r3, r3, #4
 8003434:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8003438:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800343c:	4413      	add	r3, r2
 800343e:	60ab      	str	r3, [r5, #8]
 8003440:	e7cb      	b.n	80033da <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 8003442:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8003446:	f7fe f9af 	bl	80017a8 <HAL_UART_MspInit>
 800344a:	e780      	b.n	800334e <HAL_UART_Init+0x16>
    return HAL_ERROR;
 800344c:	2001      	movs	r0, #1
}
 800344e:	4770      	bx	lr
 8003450:	40011000 	.word	0x40011000
 8003454:	40011400 	.word	0x40011400
 8003458:	51eb851f 	.word	0x51eb851f

0800345c <HAL_UART_Transmit>:
{
 800345c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003460:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003462:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8003466:	2820      	cmp	r0, #32
 8003468:	d14b      	bne.n	8003502 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 800346a:	4688      	mov	r8, r1
 800346c:	b109      	cbz	r1, 8003472 <HAL_UART_Transmit+0x16>
 800346e:	4617      	mov	r7, r2
 8003470:	b912      	cbnz	r2, 8003478 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 8003472:	2001      	movs	r0, #1
}
 8003474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003478:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800347a:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800347e:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003480:	f8c4 9044 	str.w	r9, [r4, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003484:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8003488:	f7fe facc 	bl	8001a24 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800348c:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 800348e:	84a7      	strh	r7, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 8003494:	84e7      	strh	r7, [r4, #38]	@ 0x26
    tickstart = HAL_GetTick();
 8003496:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003498:	d042      	beq.n	8003520 <HAL_UART_Transmit+0xc4>
    while (huart->TxXferCount > 0U)
 800349a:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800349c:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 800349e:	b292      	uxth	r2, r2
 80034a0:	b192      	cbz	r2, 80034c8 <HAL_UART_Transmit+0x6c>
 80034a2:	1c68      	adds	r0, r5, #1
 80034a4:	d122      	bne.n	80034ec <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	0612      	lsls	r2, r2, #24
 80034aa:	d5fc      	bpl.n	80034a6 <HAL_UART_Transmit+0x4a>
      if (pdata8bits == NULL)
 80034ac:	f1b8 0f00 	cmp.w	r8, #0
 80034b0:	d022      	beq.n	80034f8 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034b2:	f818 2b01 	ldrb.w	r2, [r8], #1
 80034b6:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 80034b8:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80034ba:	3a01      	subs	r2, #1
 80034bc:	b292      	uxth	r2, r2
 80034be:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034c0:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80034c2:	b292      	uxth	r2, r2
 80034c4:	2a00      	cmp	r2, #0
 80034c6:	d1ec      	bne.n	80034a2 <HAL_UART_Transmit+0x46>
 80034c8:	1c69      	adds	r1, r5, #1
 80034ca:	d125      	bne.n	8003518 <HAL_UART_Transmit+0xbc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	0652      	lsls	r2, r2, #25
 80034d0:	d5fc      	bpl.n	80034cc <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 80034d2:	2320      	movs	r3, #32
 80034d4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80034d8:	2000      	movs	r0, #0
 80034da:	e7cb      	b.n	8003474 <HAL_UART_Transmit+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034dc:	f7fe faa2 	bl	8001a24 <HAL_GetTick>
 80034e0:	1b80      	subs	r0, r0, r6
 80034e2:	4285      	cmp	r5, r0
 80034e4:	d322      	bcc.n	800352c <HAL_UART_Transmit+0xd0>
 80034e6:	b30d      	cbz	r5, 800352c <HAL_UART_Transmit+0xd0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80034e8:	6823      	ldr	r3, [r4, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	0617      	lsls	r7, r2, #24
 80034f0:	d5f4      	bpl.n	80034dc <HAL_UART_Transmit+0x80>
      if (pdata8bits == NULL)
 80034f2:	f1b8 0f00 	cmp.w	r8, #0
 80034f6:	d1dc      	bne.n	80034b2 <HAL_UART_Transmit+0x56>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034f8:	f839 2b02 	ldrh.w	r2, [r9], #2
 80034fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003500:	e7d9      	b.n	80034b6 <HAL_UART_Transmit+0x5a>
    return HAL_BUSY;
 8003502:	2002      	movs	r0, #2
}
 8003504:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003508:	f7fe fa8c 	bl	8001a24 <HAL_GetTick>
 800350c:	1b83      	subs	r3, r0, r6
 800350e:	429d      	cmp	r5, r3
 8003510:	d30c      	bcc.n	800352c <HAL_UART_Transmit+0xd0>
 8003512:	b15d      	cbz	r5, 800352c <HAL_UART_Transmit+0xd0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003514:	6823      	ldr	r3, [r4, #0]
 8003516:	68da      	ldr	r2, [r3, #12]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	065b      	lsls	r3, r3, #25
 800351c:	d5f4      	bpl.n	8003508 <HAL_UART_Transmit+0xac>
 800351e:	e7d8      	b.n	80034d2 <HAL_UART_Transmit+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003520:	6923      	ldr	r3, [r4, #16]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1b9      	bne.n	800349a <HAL_UART_Transmit+0x3e>
 8003526:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8003528:	4698      	mov	r8, r3
 800352a:	e7b6      	b.n	800349a <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 800352c:	2320      	movs	r3, #32
 800352e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8003532:	2003      	movs	r0, #3
}
 8003534:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003538 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8003538:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800353c:	2b20      	cmp	r3, #32
 800353e:	d120      	bne.n	8003582 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8003540:	b101      	cbz	r1, 8003544 <HAL_UART_Receive_IT+0xc>
 8003542:	b90a      	cbnz	r2, 8003548 <HAL_UART_Receive_IT+0x10>
      return HAL_ERROR;
 8003544:	2001      	movs	r0, #1
}
 8003546:	4770      	bx	lr
{
 8003548:	b410      	push	{r4}
  if (huart->Init.Parity != UART_PARITY_NONE)
 800354a:	6904      	ldr	r4, [r0, #16]
  huart->pRxBuffPtr = pData;
 800354c:	6281      	str	r1, [r0, #40]	@ 0x28
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354e:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003550:	2122      	movs	r1, #34	@ 0x22
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003552:	6303      	str	r3, [r0, #48]	@ 0x30
  huart->RxXferSize = Size;
 8003554:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003556:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003558:	6443      	str	r3, [r0, #68]	@ 0x44
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800355a:	6803      	ldr	r3, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800355c:	f880 1042 	strb.w	r1, [r0, #66]	@ 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003560:	b11c      	cbz	r4, 800356a <HAL_UART_Receive_IT+0x32>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003568:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800356a:	695a      	ldr	r2, [r3, #20]
}
 800356c:	f85d 4b04 	ldr.w	r4, [sp], #4
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003570:	f042 0201 	orr.w	r2, r2, #1
 8003574:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	f042 0220 	orr.w	r2, r2, #32
    return (UART_Start_Receive_IT(huart, pData, Size));
 800357c:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800357e:	60da      	str	r2, [r3, #12]
}
 8003580:	4770      	bx	lr
    return HAL_BUSY;
 8003582:	2002      	movs	r0, #2
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop

08003588 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop

0800358c <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop

08003590 <UART_DMAAbortOnError>:
{
 8003590:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003592:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8003594:	2300      	movs	r3, #0
 8003596:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003598:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 800359a:	f7ff fff7 	bl	800358c <HAL_UART_ErrorCallback>
}
 800359e:	bd08      	pop	{r3, pc}

080035a0 <HAL_UARTEx_RxEventCallback>:
}
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop

080035a4 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a4:	6883      	ldr	r3, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035a6:	6801      	ldr	r1, [r0, #0]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80035a8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035ae:	d042      	beq.n	8003636 <UART_Receive_IT.part.0.isra.0+0x92>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d039      	beq.n	8003628 <UART_Receive_IT.part.0.isra.0+0x84>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035b4:	684b      	ldr	r3, [r1, #4]
 80035b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035ba:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 80035bc:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 80035be:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 80035c0:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
      huart->pRxBuffPtr += 2U;
 80035c2:	6282      	str	r2, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d132      	bne.n	8003634 <UART_Receive_IT.part.0.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035ce:	6802      	ldr	r2, [r0, #0]
 80035d0:	68d1      	ldr	r1, [r2, #12]
 80035d2:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80035d6:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035d8:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035da:	68d1      	ldr	r1, [r2, #12]
 80035dc:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 80035e0:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035e2:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80035e4:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035e8:	f021 0101 	bic.w	r1, r1, #1
 80035ec:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80035ee:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035f2:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035f4:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80035f6:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80035f8:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035fa:	d125      	bne.n	8003648 <UART_Receive_IT.part.0.isra.0+0xa4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fc:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fe:	f102 030c 	add.w	r3, r2, #12
 8003602:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003606:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360a:	f102 0c0c 	add.w	ip, r2, #12
 800360e:	e84c 3100 	strex	r1, r3, [ip]
 8003612:	2900      	cmp	r1, #0
 8003614:	d1f3      	bne.n	80035fe <UART_Receive_IT.part.0.isra.0+0x5a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003616:	6813      	ldr	r3, [r2, #0]
 8003618:	06db      	lsls	r3, r3, #27
 800361a:	d41a      	bmi.n	8003652 <UART_Receive_IT.part.0.isra.0+0xae>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800361c:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800361e:	f7ff ffbf 	bl	80035a0 <HAL_UARTEx_RxEventCallback>
}
 8003622:	b003      	add	sp, #12
 8003624:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003628:	6903      	ldr	r3, [r0, #16]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1c2      	bne.n	80035b4 <UART_Receive_IT.part.0.isra.0+0x10>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800362e:	684b      	ldr	r3, [r1, #4]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	e7c2      	b.n	80035ba <UART_Receive_IT.part.0.isra.0+0x16>
 8003634:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003636:	6903      	ldr	r3, [r0, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1f8      	bne.n	800362e <UART_Receive_IT.part.0.isra.0+0x8a>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800363c:	684b      	ldr	r3, [r1, #4]
 800363e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003642:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 8003646:	e7bb      	b.n	80035c0 <UART_Receive_IT.part.0.isra.0+0x1c>
        HAL_UART_RxCpltCallback(huart);
 8003648:	f7fd ffa6 	bl	8001598 <HAL_UART_RxCpltCallback>
}
 800364c:	b003      	add	sp, #12
 800364e:	f85d fb04 	ldr.w	pc, [sp], #4
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003652:	2300      	movs	r3, #0
 8003654:	9301      	str	r3, [sp, #4]
 8003656:	6813      	ldr	r3, [r2, #0]
 8003658:	9301      	str	r3, [sp, #4]
 800365a:	6853      	ldr	r3, [r2, #4]
 800365c:	9301      	str	r3, [sp, #4]
 800365e:	9b01      	ldr	r3, [sp, #4]
 8003660:	e7dc      	b.n	800361c <UART_Receive_IT.part.0.isra.0+0x78>
 8003662:	bf00      	nop

08003664 <HAL_UART_IRQHandler>:
{
 8003664:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003666:	6803      	ldr	r3, [r0, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800366a:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800366c:	6959      	ldr	r1, [r3, #20]
  if (errorflags == RESET)
 800366e:	f012 0f0f 	tst.w	r2, #15
{
 8003672:	b083      	sub	sp, #12
 8003674:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8003676:	d170      	bne.n	800375a <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003678:	0691      	lsls	r1, r2, #26
 800367a:	d502      	bpl.n	8003682 <HAL_UART_IRQHandler+0x1e>
 800367c:	06a9      	lsls	r1, r5, #26
 800367e:	f100 80a1 	bmi.w	80037c4 <HAL_UART_IRQHandler+0x160>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003682:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003684:	2901      	cmp	r1, #1
 8003686:	d00b      	beq.n	80036a0 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003688:	0610      	lsls	r0, r2, #24
 800368a:	d502      	bpl.n	8003692 <HAL_UART_IRQHandler+0x2e>
 800368c:	0629      	lsls	r1, r5, #24
 800368e:	f100 80a3 	bmi.w	80037d8 <HAL_UART_IRQHandler+0x174>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003692:	0652      	lsls	r2, r2, #25
 8003694:	d502      	bpl.n	800369c <HAL_UART_IRQHandler+0x38>
 8003696:	0668      	lsls	r0, r5, #25
 8003698:	f100 80bd 	bmi.w	8003816 <HAL_UART_IRQHandler+0x1b2>
}
 800369c:	b003      	add	sp, #12
 800369e:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036a0:	06d0      	lsls	r0, r2, #27
 80036a2:	d5f1      	bpl.n	8003688 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80036a4:	06e9      	lsls	r1, r5, #27
 80036a6:	d5ef      	bpl.n	8003688 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036a8:	2200      	movs	r2, #0
 80036aa:	9201      	str	r2, [sp, #4]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	9201      	str	r2, [sp, #4]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	9201      	str	r2, [sp, #4]
 80036b4:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036b6:	695a      	ldr	r2, [r3, #20]
 80036b8:	0655      	lsls	r5, r2, #25
 80036ba:	f140 8136 	bpl.w	800392a <HAL_UART_IRQHandler+0x2c6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036be:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80036c0:	6802      	ldr	r2, [r0, #0]
 80036c2:	6852      	ldr	r2, [r2, #4]
 80036c4:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80036c6:	2a00      	cmp	r2, #0
 80036c8:	d0e8      	beq.n	800369c <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80036ca:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80036cc:	4291      	cmp	r1, r2
 80036ce:	d9e5      	bls.n	800369c <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 80036d0:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80036d2:	69c2      	ldr	r2, [r0, #28]
 80036d4:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 80036d8:	d036      	beq.n	8003748 <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	f103 020c 	add.w	r2, r3, #12
 80036de:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e6:	f103 050c 	add.w	r5, r3, #12
 80036ea:	e845 2100 	strex	r1, r2, [r5]
 80036ee:	2900      	cmp	r1, #0
 80036f0:	d1f3      	bne.n	80036da <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f2:	f103 0214 	add.w	r2, r3, #20
 80036f6:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036fa:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fe:	f103 0514 	add.w	r5, r3, #20
 8003702:	e845 2100 	strex	r1, r2, [r5]
 8003706:	2900      	cmp	r1, #0
 8003708:	d1f3      	bne.n	80036f2 <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370a:	f103 0214 	add.w	r2, r3, #20
 800370e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003712:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003716:	f103 0514 	add.w	r5, r3, #20
 800371a:	e845 2100 	strex	r1, r2, [r5]
 800371e:	2900      	cmp	r1, #0
 8003720:	d1f3      	bne.n	800370a <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 8003722:	2220      	movs	r2, #32
 8003724:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003728:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372a:	f103 020c 	add.w	r2, r3, #12
 800372e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003732:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003736:	f103 050c 	add.w	r5, r3, #12
 800373a:	e845 2100 	strex	r1, r2, [r5]
 800373e:	2900      	cmp	r1, #0
 8003740:	d1f3      	bne.n	800372a <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003742:	f7fe f9eb 	bl	8001b1c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003746:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003748:	2302      	movs	r3, #2
 800374a:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800374c:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800374e:	1ac9      	subs	r1, r1, r3
 8003750:	4620      	mov	r0, r4
 8003752:	b289      	uxth	r1, r1
 8003754:	f7ff ff24 	bl	80035a0 <HAL_UARTEx_RxEventCallback>
 8003758:	e7a0      	b.n	800369c <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800375a:	f011 0101 	ands.w	r1, r1, #1
 800375e:	d178      	bne.n	8003852 <HAL_UART_IRQHandler+0x1ee>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003760:	f415 7f90 	tst.w	r5, #288	@ 0x120
 8003764:	d08d      	beq.n	8003682 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003766:	07d0      	lsls	r0, r2, #31
 8003768:	d50a      	bpl.n	8003780 <HAL_UART_IRQHandler+0x11c>
 800376a:	05e8      	lsls	r0, r5, #23
 800376c:	f140 80d9 	bpl.w	8003922 <HAL_UART_IRQHandler+0x2be>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003770:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003772:	f040 0001 	orr.w	r0, r0, #1
 8003776:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003778:	0750      	lsls	r0, r2, #29
 800377a:	d55b      	bpl.n	8003834 <HAL_UART_IRQHandler+0x1d0>
 800377c:	2900      	cmp	r1, #0
 800377e:	d16c      	bne.n	800385a <HAL_UART_IRQHandler+0x1f6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003780:	0790      	lsls	r0, r2, #30
 8003782:	d570      	bpl.n	8003866 <HAL_UART_IRQHandler+0x202>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003784:	0710      	lsls	r0, r2, #28
 8003786:	f100 80c9 	bmi.w	800391c <HAL_UART_IRQHandler+0x2b8>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800378a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800378c:	2900      	cmp	r1, #0
 800378e:	d085      	beq.n	800369c <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003790:	0691      	lsls	r1, r2, #26
 8003792:	d509      	bpl.n	80037a8 <HAL_UART_IRQHandler+0x144>
 8003794:	06aa      	lsls	r2, r5, #26
 8003796:	d507      	bpl.n	80037a8 <HAL_UART_IRQHandler+0x144>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003798:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 800379c:	2a22      	cmp	r2, #34	@ 0x22
 800379e:	d103      	bne.n	80037a8 <HAL_UART_IRQHandler+0x144>
 80037a0:	4620      	mov	r0, r4
 80037a2:	f7ff feff 	bl	80035a4 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037a6:	6823      	ldr	r3, [r4, #0]
 80037a8:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037aa:	6c61      	ldr	r1, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037ac:	f002 0240 	and.w	r2, r2, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037b0:	f001 0108 	and.w	r1, r1, #8
 80037b4:	ea52 0501 	orrs.w	r5, r2, r1
 80037b8:	d15c      	bne.n	8003874 <HAL_UART_IRQHandler+0x210>
        HAL_UART_ErrorCallback(huart);
 80037ba:	4620      	mov	r0, r4
 80037bc:	f7ff fee6 	bl	800358c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c0:	6465      	str	r5, [r4, #68]	@ 0x44
 80037c2:	e76b      	b.n	800369c <HAL_UART_IRQHandler+0x38>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037c4:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80037c8:	2b22      	cmp	r3, #34	@ 0x22
 80037ca:	f47f af67 	bne.w	800369c <HAL_UART_IRQHandler+0x38>
}
 80037ce:	b003      	add	sp, #12
 80037d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037d4:	f7ff bee6 	b.w	80035a4 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037d8:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 80037dc:	2a21      	cmp	r2, #33	@ 0x21
 80037de:	f47f af5d 	bne.w	800369c <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e2:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037e4:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e6:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80037ea:	f000 80d9 	beq.w	80039a0 <HAL_UART_IRQHandler+0x33c>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037ee:	1c51      	adds	r1, r2, #1
 80037f0:	6221      	str	r1, [r4, #32]
 80037f2:	7812      	ldrb	r2, [r2, #0]
 80037f4:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80037f6:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80037f8:	3a01      	subs	r2, #1
 80037fa:	b292      	uxth	r2, r2
 80037fc:	84e2      	strh	r2, [r4, #38]	@ 0x26
 80037fe:	2a00      	cmp	r2, #0
 8003800:	f47f af4c 	bne.w	800369c <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800380a:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003812:	60da      	str	r2, [r3, #12]
 8003814:	e742      	b.n	800369c <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003816:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003818:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800381a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800381e:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8003820:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8003822:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8003826:	f7ff feaf 	bl	8003588 <HAL_UART_TxCpltCallback>
    return;
 800382a:	e737      	b.n	800369c <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800382c:	05e8      	lsls	r0, r5, #23
 800382e:	d49f      	bmi.n	8003770 <HAL_UART_IRQHandler+0x10c>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003830:	0750      	lsls	r0, r2, #29
 8003832:	d412      	bmi.n	800385a <HAL_UART_IRQHandler+0x1f6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003834:	0790      	lsls	r0, r2, #30
 8003836:	d516      	bpl.n	8003866 <HAL_UART_IRQHandler+0x202>
 8003838:	2900      	cmp	r1, #0
 800383a:	d0a3      	beq.n	8003784 <HAL_UART_IRQHandler+0x120>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800383c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800383e:	f041 0104 	orr.w	r1, r1, #4
 8003842:	6461      	str	r1, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003844:	0711      	lsls	r1, r2, #28
 8003846:	d5a0      	bpl.n	800378a <HAL_UART_IRQHandler+0x126>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003848:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800384a:	f041 0108 	orr.w	r1, r1, #8
 800384e:	6461      	str	r1, [r4, #68]	@ 0x44
 8003850:	e79b      	b.n	800378a <HAL_UART_IRQHandler+0x126>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003852:	07d0      	lsls	r0, r2, #31
 8003854:	d4ea      	bmi.n	800382c <HAL_UART_IRQHandler+0x1c8>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003856:	0750      	lsls	r0, r2, #29
 8003858:	d55b      	bpl.n	8003912 <HAL_UART_IRQHandler+0x2ae>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800385a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800385c:	f040 0002 	orr.w	r0, r0, #2
 8003860:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003862:	0790      	lsls	r0, r2, #30
 8003864:	d4ea      	bmi.n	800383c <HAL_UART_IRQHandler+0x1d8>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003866:	0710      	lsls	r0, r2, #28
 8003868:	d58f      	bpl.n	800378a <HAL_UART_IRQHandler+0x126>
 800386a:	f005 0020 	and.w	r0, r5, #32
 800386e:	4308      	orrs	r0, r1
 8003870:	d08b      	beq.n	800378a <HAL_UART_IRQHandler+0x126>
 8003872:	e7e9      	b.n	8003848 <HAL_UART_IRQHandler+0x1e4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003874:	f103 020c 	add.w	r2, r3, #12
 8003878:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800387c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003880:	f103 000c 	add.w	r0, r3, #12
 8003884:	e840 2100 	strex	r1, r2, [r0]
 8003888:	2900      	cmp	r1, #0
 800388a:	d1f3      	bne.n	8003874 <HAL_UART_IRQHandler+0x210>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388c:	f103 0214 	add.w	r2, r3, #20
 8003890:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003894:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003898:	f103 0014 	add.w	r0, r3, #20
 800389c:	e840 2100 	strex	r1, r2, [r0]
 80038a0:	2900      	cmp	r1, #0
 80038a2:	d1f3      	bne.n	800388c <HAL_UART_IRQHandler+0x228>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038a4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80038a6:	2a01      	cmp	r2, #1
 80038a8:	d022      	beq.n	80038f0 <HAL_UART_IRQHandler+0x28c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038aa:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80038ac:	2120      	movs	r1, #32
 80038ae:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038b2:	6322      	str	r2, [r4, #48]	@ 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b4:	695a      	ldr	r2, [r3, #20]
 80038b6:	0655      	lsls	r5, r2, #25
 80038b8:	d527      	bpl.n	800390a <HAL_UART_IRQHandler+0x2a6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ba:	f103 0214 	add.w	r2, r3, #20
 80038be:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c6:	f103 0014 	add.w	r0, r3, #20
 80038ca:	e840 2100 	strex	r1, r2, [r0]
 80038ce:	2900      	cmp	r1, #0
 80038d0:	d1f3      	bne.n	80038ba <HAL_UART_IRQHandler+0x256>
          if (huart->hdmarx != NULL)
 80038d2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80038d4:	b1c8      	cbz	r0, 800390a <HAL_UART_IRQHandler+0x2a6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038d6:	4b38      	ldr	r3, [pc, #224]	@ (80039b8 <HAL_UART_IRQHandler+0x354>)
 80038d8:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038da:	f7fe f969 	bl	8001bb0 <HAL_DMA_Abort_IT>
 80038de:	2800      	cmp	r0, #0
 80038e0:	f43f aedc 	beq.w	800369c <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038e4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80038e6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
}
 80038e8:	b003      	add	sp, #12
 80038ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038ee:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f0:	f103 020c 	add.w	r2, r3, #12
 80038f4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fc:	f103 000c 	add.w	r0, r3, #12
 8003900:	e840 2100 	strex	r1, r2, [r0]
 8003904:	2900      	cmp	r1, #0
 8003906:	d1f3      	bne.n	80038f0 <HAL_UART_IRQHandler+0x28c>
 8003908:	e7cf      	b.n	80038aa <HAL_UART_IRQHandler+0x246>
            HAL_UART_ErrorCallback(huart);
 800390a:	4620      	mov	r0, r4
 800390c:	f7ff fe3e 	bl	800358c <HAL_UART_ErrorCallback>
 8003910:	e6c4      	b.n	800369c <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003912:	0791      	lsls	r1, r2, #30
 8003914:	d492      	bmi.n	800383c <HAL_UART_IRQHandler+0x1d8>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003916:	0711      	lsls	r1, r2, #28
 8003918:	d496      	bmi.n	8003848 <HAL_UART_IRQHandler+0x1e4>
 800391a:	e736      	b.n	800378a <HAL_UART_IRQHandler+0x126>
 800391c:	06a9      	lsls	r1, r5, #26
 800391e:	d493      	bmi.n	8003848 <HAL_UART_IRQHandler+0x1e4>
 8003920:	e733      	b.n	800378a <HAL_UART_IRQHandler+0x126>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003922:	0750      	lsls	r0, r2, #29
 8003924:	f53f af2c 	bmi.w	8003780 <HAL_UART_IRQHandler+0x11c>
 8003928:	e784      	b.n	8003834 <HAL_UART_IRQHandler+0x1d0>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800392a:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 800392c:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800392e:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 8003930:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003932:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8003934:	2a00      	cmp	r2, #0
 8003936:	f43f aeb1 	beq.w	800369c <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800393a:	1a41      	subs	r1, r0, r1
 800393c:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 800393e:	2900      	cmp	r1, #0
 8003940:	f43f aeac 	beq.w	800369c <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003944:	f103 020c 	add.w	r2, r3, #12
 8003948:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800394c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003950:	f103 050c 	add.w	r5, r3, #12
 8003954:	e845 2000 	strex	r0, r2, [r5]
 8003958:	2800      	cmp	r0, #0
 800395a:	d1f3      	bne.n	8003944 <HAL_UART_IRQHandler+0x2e0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395c:	f103 0214 	add.w	r2, r3, #20
 8003960:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003964:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003968:	f103 0514 	add.w	r5, r3, #20
 800396c:	e845 2000 	strex	r0, r2, [r5]
 8003970:	2800      	cmp	r0, #0
 8003972:	d1f3      	bne.n	800395c <HAL_UART_IRQHandler+0x2f8>
        huart->RxState = HAL_UART_STATE_READY;
 8003974:	2220      	movs	r2, #32
 8003976:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397a:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397c:	f103 020c 	add.w	r2, r3, #12
 8003980:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003984:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003988:	f103 050c 	add.w	r5, r3, #12
 800398c:	e845 2000 	strex	r0, r2, [r5]
 8003990:	2800      	cmp	r0, #0
 8003992:	d1f3      	bne.n	800397c <HAL_UART_IRQHandler+0x318>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003994:	2302      	movs	r3, #2
 8003996:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003998:	4620      	mov	r0, r4
 800399a:	f7ff fe01 	bl	80035a0 <HAL_UARTEx_RxEventCallback>
 800399e:	e67d      	b.n	800369c <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a0:	6921      	ldr	r1, [r4, #16]
 80039a2:	2900      	cmp	r1, #0
 80039a4:	f47f af23 	bne.w	80037ee <HAL_UART_IRQHandler+0x18a>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039a8:	f832 1b02 	ldrh.w	r1, [r2], #2
 80039ac:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80039b0:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039b2:	6222      	str	r2, [r4, #32]
 80039b4:	e71f      	b.n	80037f6 <HAL_UART_IRQHandler+0x192>
 80039b6:	bf00      	nop
 80039b8:	08003591 	.word	0x08003591

080039bc <atoi>:
 80039bc:	220a      	movs	r2, #10
 80039be:	2100      	movs	r1, #0
 80039c0:	f000 b87c 	b.w	8003abc <strtol>

080039c4 <_strtol_l.constprop.0>:
 80039c4:	2b24      	cmp	r3, #36	@ 0x24
 80039c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039ca:	4686      	mov	lr, r0
 80039cc:	4690      	mov	r8, r2
 80039ce:	d801      	bhi.n	80039d4 <_strtol_l.constprop.0+0x10>
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d106      	bne.n	80039e2 <_strtol_l.constprop.0+0x1e>
 80039d4:	f001 f860 	bl	8004a98 <__errno>
 80039d8:	2316      	movs	r3, #22
 80039da:	6003      	str	r3, [r0, #0]
 80039dc:	2000      	movs	r0, #0
 80039de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039e2:	4834      	ldr	r0, [pc, #208]	@ (8003ab4 <_strtol_l.constprop.0+0xf0>)
 80039e4:	460d      	mov	r5, r1
 80039e6:	462a      	mov	r2, r5
 80039e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80039ec:	5d06      	ldrb	r6, [r0, r4]
 80039ee:	f016 0608 	ands.w	r6, r6, #8
 80039f2:	d1f8      	bne.n	80039e6 <_strtol_l.constprop.0+0x22>
 80039f4:	2c2d      	cmp	r4, #45	@ 0x2d
 80039f6:	d12d      	bne.n	8003a54 <_strtol_l.constprop.0+0x90>
 80039f8:	782c      	ldrb	r4, [r5, #0]
 80039fa:	2601      	movs	r6, #1
 80039fc:	1c95      	adds	r5, r2, #2
 80039fe:	f033 0210 	bics.w	r2, r3, #16
 8003a02:	d109      	bne.n	8003a18 <_strtol_l.constprop.0+0x54>
 8003a04:	2c30      	cmp	r4, #48	@ 0x30
 8003a06:	d12a      	bne.n	8003a5e <_strtol_l.constprop.0+0x9a>
 8003a08:	782a      	ldrb	r2, [r5, #0]
 8003a0a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8003a0e:	2a58      	cmp	r2, #88	@ 0x58
 8003a10:	d125      	bne.n	8003a5e <_strtol_l.constprop.0+0x9a>
 8003a12:	786c      	ldrb	r4, [r5, #1]
 8003a14:	2310      	movs	r3, #16
 8003a16:	3502      	adds	r5, #2
 8003a18:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8003a1c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8003a20:	2200      	movs	r2, #0
 8003a22:	fbbc f9f3 	udiv	r9, ip, r3
 8003a26:	4610      	mov	r0, r2
 8003a28:	fb03 ca19 	mls	sl, r3, r9, ip
 8003a2c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003a30:	2f09      	cmp	r7, #9
 8003a32:	d81b      	bhi.n	8003a6c <_strtol_l.constprop.0+0xa8>
 8003a34:	463c      	mov	r4, r7
 8003a36:	42a3      	cmp	r3, r4
 8003a38:	dd27      	ble.n	8003a8a <_strtol_l.constprop.0+0xc6>
 8003a3a:	1c57      	adds	r7, r2, #1
 8003a3c:	d007      	beq.n	8003a4e <_strtol_l.constprop.0+0x8a>
 8003a3e:	4581      	cmp	r9, r0
 8003a40:	d320      	bcc.n	8003a84 <_strtol_l.constprop.0+0xc0>
 8003a42:	d101      	bne.n	8003a48 <_strtol_l.constprop.0+0x84>
 8003a44:	45a2      	cmp	sl, r4
 8003a46:	db1d      	blt.n	8003a84 <_strtol_l.constprop.0+0xc0>
 8003a48:	fb00 4003 	mla	r0, r0, r3, r4
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003a52:	e7eb      	b.n	8003a2c <_strtol_l.constprop.0+0x68>
 8003a54:	2c2b      	cmp	r4, #43	@ 0x2b
 8003a56:	bf04      	itt	eq
 8003a58:	782c      	ldrbeq	r4, [r5, #0]
 8003a5a:	1c95      	addeq	r5, r2, #2
 8003a5c:	e7cf      	b.n	80039fe <_strtol_l.constprop.0+0x3a>
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d1da      	bne.n	8003a18 <_strtol_l.constprop.0+0x54>
 8003a62:	2c30      	cmp	r4, #48	@ 0x30
 8003a64:	bf0c      	ite	eq
 8003a66:	2308      	moveq	r3, #8
 8003a68:	230a      	movne	r3, #10
 8003a6a:	e7d5      	b.n	8003a18 <_strtol_l.constprop.0+0x54>
 8003a6c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003a70:	2f19      	cmp	r7, #25
 8003a72:	d801      	bhi.n	8003a78 <_strtol_l.constprop.0+0xb4>
 8003a74:	3c37      	subs	r4, #55	@ 0x37
 8003a76:	e7de      	b.n	8003a36 <_strtol_l.constprop.0+0x72>
 8003a78:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003a7c:	2f19      	cmp	r7, #25
 8003a7e:	d804      	bhi.n	8003a8a <_strtol_l.constprop.0+0xc6>
 8003a80:	3c57      	subs	r4, #87	@ 0x57
 8003a82:	e7d8      	b.n	8003a36 <_strtol_l.constprop.0+0x72>
 8003a84:	f04f 32ff 	mov.w	r2, #4294967295
 8003a88:	e7e1      	b.n	8003a4e <_strtol_l.constprop.0+0x8a>
 8003a8a:	1c53      	adds	r3, r2, #1
 8003a8c:	d108      	bne.n	8003aa0 <_strtol_l.constprop.0+0xdc>
 8003a8e:	2322      	movs	r3, #34	@ 0x22
 8003a90:	f8ce 3000 	str.w	r3, [lr]
 8003a94:	4660      	mov	r0, ip
 8003a96:	f1b8 0f00 	cmp.w	r8, #0
 8003a9a:	d0a0      	beq.n	80039de <_strtol_l.constprop.0+0x1a>
 8003a9c:	1e69      	subs	r1, r5, #1
 8003a9e:	e006      	b.n	8003aae <_strtol_l.constprop.0+0xea>
 8003aa0:	b106      	cbz	r6, 8003aa4 <_strtol_l.constprop.0+0xe0>
 8003aa2:	4240      	negs	r0, r0
 8003aa4:	f1b8 0f00 	cmp.w	r8, #0
 8003aa8:	d099      	beq.n	80039de <_strtol_l.constprop.0+0x1a>
 8003aaa:	2a00      	cmp	r2, #0
 8003aac:	d1f6      	bne.n	8003a9c <_strtol_l.constprop.0+0xd8>
 8003aae:	f8c8 1000 	str.w	r1, [r8]
 8003ab2:	e794      	b.n	80039de <_strtol_l.constprop.0+0x1a>
 8003ab4:	0800cf51 	.word	0x0800cf51

08003ab8 <_strtol_r>:
 8003ab8:	f7ff bf84 	b.w	80039c4 <_strtol_l.constprop.0>

08003abc <strtol>:
 8003abc:	4613      	mov	r3, r2
 8003abe:	460a      	mov	r2, r1
 8003ac0:	4601      	mov	r1, r0
 8003ac2:	4802      	ldr	r0, [pc, #8]	@ (8003acc <strtol+0x10>)
 8003ac4:	6800      	ldr	r0, [r0, #0]
 8003ac6:	f7ff bf7d 	b.w	80039c4 <_strtol_l.constprop.0>
 8003aca:	bf00      	nop
 8003acc:	20000018 	.word	0x20000018

08003ad0 <__cvt>:
 8003ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ad4:	ec57 6b10 	vmov	r6, r7, d0
 8003ad8:	2f00      	cmp	r7, #0
 8003ada:	460c      	mov	r4, r1
 8003adc:	4619      	mov	r1, r3
 8003ade:	463b      	mov	r3, r7
 8003ae0:	bfbb      	ittet	lt
 8003ae2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003ae6:	461f      	movlt	r7, r3
 8003ae8:	2300      	movge	r3, #0
 8003aea:	232d      	movlt	r3, #45	@ 0x2d
 8003aec:	700b      	strb	r3, [r1, #0]
 8003aee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003af0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003af4:	4691      	mov	r9, r2
 8003af6:	f023 0820 	bic.w	r8, r3, #32
 8003afa:	bfbc      	itt	lt
 8003afc:	4632      	movlt	r2, r6
 8003afe:	4616      	movlt	r6, r2
 8003b00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003b04:	d005      	beq.n	8003b12 <__cvt+0x42>
 8003b06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003b0a:	d100      	bne.n	8003b0e <__cvt+0x3e>
 8003b0c:	3401      	adds	r4, #1
 8003b0e:	2102      	movs	r1, #2
 8003b10:	e000      	b.n	8003b14 <__cvt+0x44>
 8003b12:	2103      	movs	r1, #3
 8003b14:	ab03      	add	r3, sp, #12
 8003b16:	9301      	str	r3, [sp, #4]
 8003b18:	ab02      	add	r3, sp, #8
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	ec47 6b10 	vmov	d0, r6, r7
 8003b20:	4653      	mov	r3, sl
 8003b22:	4622      	mov	r2, r4
 8003b24:	f001 f874 	bl	8004c10 <_dtoa_r>
 8003b28:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003b2c:	4605      	mov	r5, r0
 8003b2e:	d119      	bne.n	8003b64 <__cvt+0x94>
 8003b30:	f019 0f01 	tst.w	r9, #1
 8003b34:	d00e      	beq.n	8003b54 <__cvt+0x84>
 8003b36:	eb00 0904 	add.w	r9, r0, r4
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	4630      	mov	r0, r6
 8003b40:	4639      	mov	r1, r7
 8003b42:	f7fc ffc9 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b46:	b108      	cbz	r0, 8003b4c <__cvt+0x7c>
 8003b48:	f8cd 900c 	str.w	r9, [sp, #12]
 8003b4c:	2230      	movs	r2, #48	@ 0x30
 8003b4e:	9b03      	ldr	r3, [sp, #12]
 8003b50:	454b      	cmp	r3, r9
 8003b52:	d31e      	bcc.n	8003b92 <__cvt+0xc2>
 8003b54:	9b03      	ldr	r3, [sp, #12]
 8003b56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003b58:	1b5b      	subs	r3, r3, r5
 8003b5a:	4628      	mov	r0, r5
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	b004      	add	sp, #16
 8003b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003b68:	eb00 0904 	add.w	r9, r0, r4
 8003b6c:	d1e5      	bne.n	8003b3a <__cvt+0x6a>
 8003b6e:	7803      	ldrb	r3, [r0, #0]
 8003b70:	2b30      	cmp	r3, #48	@ 0x30
 8003b72:	d10a      	bne.n	8003b8a <__cvt+0xba>
 8003b74:	2200      	movs	r2, #0
 8003b76:	2300      	movs	r3, #0
 8003b78:	4630      	mov	r0, r6
 8003b7a:	4639      	mov	r1, r7
 8003b7c:	f7fc ffac 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b80:	b918      	cbnz	r0, 8003b8a <__cvt+0xba>
 8003b82:	f1c4 0401 	rsb	r4, r4, #1
 8003b86:	f8ca 4000 	str.w	r4, [sl]
 8003b8a:	f8da 3000 	ldr.w	r3, [sl]
 8003b8e:	4499      	add	r9, r3
 8003b90:	e7d3      	b.n	8003b3a <__cvt+0x6a>
 8003b92:	1c59      	adds	r1, r3, #1
 8003b94:	9103      	str	r1, [sp, #12]
 8003b96:	701a      	strb	r2, [r3, #0]
 8003b98:	e7d9      	b.n	8003b4e <__cvt+0x7e>

08003b9a <__exponent>:
 8003b9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b9c:	2900      	cmp	r1, #0
 8003b9e:	bfba      	itte	lt
 8003ba0:	4249      	neglt	r1, r1
 8003ba2:	232d      	movlt	r3, #45	@ 0x2d
 8003ba4:	232b      	movge	r3, #43	@ 0x2b
 8003ba6:	2909      	cmp	r1, #9
 8003ba8:	7002      	strb	r2, [r0, #0]
 8003baa:	7043      	strb	r3, [r0, #1]
 8003bac:	dd29      	ble.n	8003c02 <__exponent+0x68>
 8003bae:	f10d 0307 	add.w	r3, sp, #7
 8003bb2:	461d      	mov	r5, r3
 8003bb4:	270a      	movs	r7, #10
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	fbb1 f6f7 	udiv	r6, r1, r7
 8003bbc:	fb07 1416 	mls	r4, r7, r6, r1
 8003bc0:	3430      	adds	r4, #48	@ 0x30
 8003bc2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003bc6:	460c      	mov	r4, r1
 8003bc8:	2c63      	cmp	r4, #99	@ 0x63
 8003bca:	f103 33ff 	add.w	r3, r3, #4294967295
 8003bce:	4631      	mov	r1, r6
 8003bd0:	dcf1      	bgt.n	8003bb6 <__exponent+0x1c>
 8003bd2:	3130      	adds	r1, #48	@ 0x30
 8003bd4:	1e94      	subs	r4, r2, #2
 8003bd6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003bda:	1c41      	adds	r1, r0, #1
 8003bdc:	4623      	mov	r3, r4
 8003bde:	42ab      	cmp	r3, r5
 8003be0:	d30a      	bcc.n	8003bf8 <__exponent+0x5e>
 8003be2:	f10d 0309 	add.w	r3, sp, #9
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	42ac      	cmp	r4, r5
 8003bea:	bf88      	it	hi
 8003bec:	2300      	movhi	r3, #0
 8003bee:	3302      	adds	r3, #2
 8003bf0:	4403      	add	r3, r0
 8003bf2:	1a18      	subs	r0, r3, r0
 8003bf4:	b003      	add	sp, #12
 8003bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bf8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003bfc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003c00:	e7ed      	b.n	8003bde <__exponent+0x44>
 8003c02:	2330      	movs	r3, #48	@ 0x30
 8003c04:	3130      	adds	r1, #48	@ 0x30
 8003c06:	7083      	strb	r3, [r0, #2]
 8003c08:	70c1      	strb	r1, [r0, #3]
 8003c0a:	1d03      	adds	r3, r0, #4
 8003c0c:	e7f1      	b.n	8003bf2 <__exponent+0x58>
	...

08003c10 <_printf_float>:
 8003c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c14:	b08d      	sub	sp, #52	@ 0x34
 8003c16:	460c      	mov	r4, r1
 8003c18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003c1c:	4616      	mov	r6, r2
 8003c1e:	461f      	mov	r7, r3
 8003c20:	4605      	mov	r5, r0
 8003c22:	f000 feef 	bl	8004a04 <_localeconv_r>
 8003c26:	6803      	ldr	r3, [r0, #0]
 8003c28:	9304      	str	r3, [sp, #16]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fc fb28 	bl	8000280 <strlen>
 8003c30:	2300      	movs	r3, #0
 8003c32:	930a      	str	r3, [sp, #40]	@ 0x28
 8003c34:	f8d8 3000 	ldr.w	r3, [r8]
 8003c38:	9005      	str	r0, [sp, #20]
 8003c3a:	3307      	adds	r3, #7
 8003c3c:	f023 0307 	bic.w	r3, r3, #7
 8003c40:	f103 0208 	add.w	r2, r3, #8
 8003c44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003c48:	f8d4 b000 	ldr.w	fp, [r4]
 8003c4c:	f8c8 2000 	str.w	r2, [r8]
 8003c50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003c54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003c58:	9307      	str	r3, [sp, #28]
 8003c5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8003c5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003c62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c66:	4b9c      	ldr	r3, [pc, #624]	@ (8003ed8 <_printf_float+0x2c8>)
 8003c68:	f04f 32ff 	mov.w	r2, #4294967295
 8003c6c:	f7fc ff66 	bl	8000b3c <__aeabi_dcmpun>
 8003c70:	bb70      	cbnz	r0, 8003cd0 <_printf_float+0xc0>
 8003c72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003c76:	4b98      	ldr	r3, [pc, #608]	@ (8003ed8 <_printf_float+0x2c8>)
 8003c78:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7c:	f7fc ff40 	bl	8000b00 <__aeabi_dcmple>
 8003c80:	bb30      	cbnz	r0, 8003cd0 <_printf_float+0xc0>
 8003c82:	2200      	movs	r2, #0
 8003c84:	2300      	movs	r3, #0
 8003c86:	4640      	mov	r0, r8
 8003c88:	4649      	mov	r1, r9
 8003c8a:	f7fc ff2f 	bl	8000aec <__aeabi_dcmplt>
 8003c8e:	b110      	cbz	r0, 8003c96 <_printf_float+0x86>
 8003c90:	232d      	movs	r3, #45	@ 0x2d
 8003c92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c96:	4a91      	ldr	r2, [pc, #580]	@ (8003edc <_printf_float+0x2cc>)
 8003c98:	4b91      	ldr	r3, [pc, #580]	@ (8003ee0 <_printf_float+0x2d0>)
 8003c9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003c9e:	bf94      	ite	ls
 8003ca0:	4690      	movls	r8, r2
 8003ca2:	4698      	movhi	r8, r3
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	6123      	str	r3, [r4, #16]
 8003ca8:	f02b 0304 	bic.w	r3, fp, #4
 8003cac:	6023      	str	r3, [r4, #0]
 8003cae:	f04f 0900 	mov.w	r9, #0
 8003cb2:	9700      	str	r7, [sp, #0]
 8003cb4:	4633      	mov	r3, r6
 8003cb6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003cb8:	4621      	mov	r1, r4
 8003cba:	4628      	mov	r0, r5
 8003cbc:	f000 f9d2 	bl	8004064 <_printf_common>
 8003cc0:	3001      	adds	r0, #1
 8003cc2:	f040 808d 	bne.w	8003de0 <_printf_float+0x1d0>
 8003cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8003cca:	b00d      	add	sp, #52	@ 0x34
 8003ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd0:	4642      	mov	r2, r8
 8003cd2:	464b      	mov	r3, r9
 8003cd4:	4640      	mov	r0, r8
 8003cd6:	4649      	mov	r1, r9
 8003cd8:	f7fc ff30 	bl	8000b3c <__aeabi_dcmpun>
 8003cdc:	b140      	cbz	r0, 8003cf0 <_printf_float+0xe0>
 8003cde:	464b      	mov	r3, r9
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	bfbc      	itt	lt
 8003ce4:	232d      	movlt	r3, #45	@ 0x2d
 8003ce6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003cea:	4a7e      	ldr	r2, [pc, #504]	@ (8003ee4 <_printf_float+0x2d4>)
 8003cec:	4b7e      	ldr	r3, [pc, #504]	@ (8003ee8 <_printf_float+0x2d8>)
 8003cee:	e7d4      	b.n	8003c9a <_printf_float+0x8a>
 8003cf0:	6863      	ldr	r3, [r4, #4]
 8003cf2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003cf6:	9206      	str	r2, [sp, #24]
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	d13b      	bne.n	8003d74 <_printf_float+0x164>
 8003cfc:	2306      	movs	r3, #6
 8003cfe:	6063      	str	r3, [r4, #4]
 8003d00:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003d04:	2300      	movs	r3, #0
 8003d06:	6022      	str	r2, [r4, #0]
 8003d08:	9303      	str	r3, [sp, #12]
 8003d0a:	ab0a      	add	r3, sp, #40	@ 0x28
 8003d0c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003d10:	ab09      	add	r3, sp, #36	@ 0x24
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	6861      	ldr	r1, [r4, #4]
 8003d16:	ec49 8b10 	vmov	d0, r8, r9
 8003d1a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003d1e:	4628      	mov	r0, r5
 8003d20:	f7ff fed6 	bl	8003ad0 <__cvt>
 8003d24:	9b06      	ldr	r3, [sp, #24]
 8003d26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003d28:	2b47      	cmp	r3, #71	@ 0x47
 8003d2a:	4680      	mov	r8, r0
 8003d2c:	d129      	bne.n	8003d82 <_printf_float+0x172>
 8003d2e:	1cc8      	adds	r0, r1, #3
 8003d30:	db02      	blt.n	8003d38 <_printf_float+0x128>
 8003d32:	6863      	ldr	r3, [r4, #4]
 8003d34:	4299      	cmp	r1, r3
 8003d36:	dd41      	ble.n	8003dbc <_printf_float+0x1ac>
 8003d38:	f1aa 0a02 	sub.w	sl, sl, #2
 8003d3c:	fa5f fa8a 	uxtb.w	sl, sl
 8003d40:	3901      	subs	r1, #1
 8003d42:	4652      	mov	r2, sl
 8003d44:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003d48:	9109      	str	r1, [sp, #36]	@ 0x24
 8003d4a:	f7ff ff26 	bl	8003b9a <__exponent>
 8003d4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003d50:	1813      	adds	r3, r2, r0
 8003d52:	2a01      	cmp	r2, #1
 8003d54:	4681      	mov	r9, r0
 8003d56:	6123      	str	r3, [r4, #16]
 8003d58:	dc02      	bgt.n	8003d60 <_printf_float+0x150>
 8003d5a:	6822      	ldr	r2, [r4, #0]
 8003d5c:	07d2      	lsls	r2, r2, #31
 8003d5e:	d501      	bpl.n	8003d64 <_printf_float+0x154>
 8003d60:	3301      	adds	r3, #1
 8003d62:	6123      	str	r3, [r4, #16]
 8003d64:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0a2      	beq.n	8003cb2 <_printf_float+0xa2>
 8003d6c:	232d      	movs	r3, #45	@ 0x2d
 8003d6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d72:	e79e      	b.n	8003cb2 <_printf_float+0xa2>
 8003d74:	9a06      	ldr	r2, [sp, #24]
 8003d76:	2a47      	cmp	r2, #71	@ 0x47
 8003d78:	d1c2      	bne.n	8003d00 <_printf_float+0xf0>
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1c0      	bne.n	8003d00 <_printf_float+0xf0>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e7bd      	b.n	8003cfe <_printf_float+0xee>
 8003d82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003d86:	d9db      	bls.n	8003d40 <_printf_float+0x130>
 8003d88:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003d8c:	d118      	bne.n	8003dc0 <_printf_float+0x1b0>
 8003d8e:	2900      	cmp	r1, #0
 8003d90:	6863      	ldr	r3, [r4, #4]
 8003d92:	dd0b      	ble.n	8003dac <_printf_float+0x19c>
 8003d94:	6121      	str	r1, [r4, #16]
 8003d96:	b913      	cbnz	r3, 8003d9e <_printf_float+0x18e>
 8003d98:	6822      	ldr	r2, [r4, #0]
 8003d9a:	07d0      	lsls	r0, r2, #31
 8003d9c:	d502      	bpl.n	8003da4 <_printf_float+0x194>
 8003d9e:	3301      	adds	r3, #1
 8003da0:	440b      	add	r3, r1
 8003da2:	6123      	str	r3, [r4, #16]
 8003da4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003da6:	f04f 0900 	mov.w	r9, #0
 8003daa:	e7db      	b.n	8003d64 <_printf_float+0x154>
 8003dac:	b913      	cbnz	r3, 8003db4 <_printf_float+0x1a4>
 8003dae:	6822      	ldr	r2, [r4, #0]
 8003db0:	07d2      	lsls	r2, r2, #31
 8003db2:	d501      	bpl.n	8003db8 <_printf_float+0x1a8>
 8003db4:	3302      	adds	r3, #2
 8003db6:	e7f4      	b.n	8003da2 <_printf_float+0x192>
 8003db8:	2301      	movs	r3, #1
 8003dba:	e7f2      	b.n	8003da2 <_printf_float+0x192>
 8003dbc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003dc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003dc2:	4299      	cmp	r1, r3
 8003dc4:	db05      	blt.n	8003dd2 <_printf_float+0x1c2>
 8003dc6:	6823      	ldr	r3, [r4, #0]
 8003dc8:	6121      	str	r1, [r4, #16]
 8003dca:	07d8      	lsls	r0, r3, #31
 8003dcc:	d5ea      	bpl.n	8003da4 <_printf_float+0x194>
 8003dce:	1c4b      	adds	r3, r1, #1
 8003dd0:	e7e7      	b.n	8003da2 <_printf_float+0x192>
 8003dd2:	2900      	cmp	r1, #0
 8003dd4:	bfd4      	ite	le
 8003dd6:	f1c1 0202 	rsble	r2, r1, #2
 8003dda:	2201      	movgt	r2, #1
 8003ddc:	4413      	add	r3, r2
 8003dde:	e7e0      	b.n	8003da2 <_printf_float+0x192>
 8003de0:	6823      	ldr	r3, [r4, #0]
 8003de2:	055a      	lsls	r2, r3, #21
 8003de4:	d407      	bmi.n	8003df6 <_printf_float+0x1e6>
 8003de6:	6923      	ldr	r3, [r4, #16]
 8003de8:	4642      	mov	r2, r8
 8003dea:	4631      	mov	r1, r6
 8003dec:	4628      	mov	r0, r5
 8003dee:	47b8      	blx	r7
 8003df0:	3001      	adds	r0, #1
 8003df2:	d12b      	bne.n	8003e4c <_printf_float+0x23c>
 8003df4:	e767      	b.n	8003cc6 <_printf_float+0xb6>
 8003df6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003dfa:	f240 80dd 	bls.w	8003fb8 <_printf_float+0x3a8>
 8003dfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003e02:	2200      	movs	r2, #0
 8003e04:	2300      	movs	r3, #0
 8003e06:	f7fc fe67 	bl	8000ad8 <__aeabi_dcmpeq>
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	d033      	beq.n	8003e76 <_printf_float+0x266>
 8003e0e:	4a37      	ldr	r2, [pc, #220]	@ (8003eec <_printf_float+0x2dc>)
 8003e10:	2301      	movs	r3, #1
 8003e12:	4631      	mov	r1, r6
 8003e14:	4628      	mov	r0, r5
 8003e16:	47b8      	blx	r7
 8003e18:	3001      	adds	r0, #1
 8003e1a:	f43f af54 	beq.w	8003cc6 <_printf_float+0xb6>
 8003e1e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003e22:	4543      	cmp	r3, r8
 8003e24:	db02      	blt.n	8003e2c <_printf_float+0x21c>
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	07d8      	lsls	r0, r3, #31
 8003e2a:	d50f      	bpl.n	8003e4c <_printf_float+0x23c>
 8003e2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003e30:	4631      	mov	r1, r6
 8003e32:	4628      	mov	r0, r5
 8003e34:	47b8      	blx	r7
 8003e36:	3001      	adds	r0, #1
 8003e38:	f43f af45 	beq.w	8003cc6 <_printf_float+0xb6>
 8003e3c:	f04f 0900 	mov.w	r9, #0
 8003e40:	f108 38ff 	add.w	r8, r8, #4294967295
 8003e44:	f104 0a1a 	add.w	sl, r4, #26
 8003e48:	45c8      	cmp	r8, r9
 8003e4a:	dc09      	bgt.n	8003e60 <_printf_float+0x250>
 8003e4c:	6823      	ldr	r3, [r4, #0]
 8003e4e:	079b      	lsls	r3, r3, #30
 8003e50:	f100 8103 	bmi.w	800405a <_printf_float+0x44a>
 8003e54:	68e0      	ldr	r0, [r4, #12]
 8003e56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003e58:	4298      	cmp	r0, r3
 8003e5a:	bfb8      	it	lt
 8003e5c:	4618      	movlt	r0, r3
 8003e5e:	e734      	b.n	8003cca <_printf_float+0xba>
 8003e60:	2301      	movs	r3, #1
 8003e62:	4652      	mov	r2, sl
 8003e64:	4631      	mov	r1, r6
 8003e66:	4628      	mov	r0, r5
 8003e68:	47b8      	blx	r7
 8003e6a:	3001      	adds	r0, #1
 8003e6c:	f43f af2b 	beq.w	8003cc6 <_printf_float+0xb6>
 8003e70:	f109 0901 	add.w	r9, r9, #1
 8003e74:	e7e8      	b.n	8003e48 <_printf_float+0x238>
 8003e76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	dc39      	bgt.n	8003ef0 <_printf_float+0x2e0>
 8003e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8003eec <_printf_float+0x2dc>)
 8003e7e:	2301      	movs	r3, #1
 8003e80:	4631      	mov	r1, r6
 8003e82:	4628      	mov	r0, r5
 8003e84:	47b8      	blx	r7
 8003e86:	3001      	adds	r0, #1
 8003e88:	f43f af1d 	beq.w	8003cc6 <_printf_float+0xb6>
 8003e8c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003e90:	ea59 0303 	orrs.w	r3, r9, r3
 8003e94:	d102      	bne.n	8003e9c <_printf_float+0x28c>
 8003e96:	6823      	ldr	r3, [r4, #0]
 8003e98:	07d9      	lsls	r1, r3, #31
 8003e9a:	d5d7      	bpl.n	8003e4c <_printf_float+0x23c>
 8003e9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ea0:	4631      	mov	r1, r6
 8003ea2:	4628      	mov	r0, r5
 8003ea4:	47b8      	blx	r7
 8003ea6:	3001      	adds	r0, #1
 8003ea8:	f43f af0d 	beq.w	8003cc6 <_printf_float+0xb6>
 8003eac:	f04f 0a00 	mov.w	sl, #0
 8003eb0:	f104 0b1a 	add.w	fp, r4, #26
 8003eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003eb6:	425b      	negs	r3, r3
 8003eb8:	4553      	cmp	r3, sl
 8003eba:	dc01      	bgt.n	8003ec0 <_printf_float+0x2b0>
 8003ebc:	464b      	mov	r3, r9
 8003ebe:	e793      	b.n	8003de8 <_printf_float+0x1d8>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	465a      	mov	r2, fp
 8003ec4:	4631      	mov	r1, r6
 8003ec6:	4628      	mov	r0, r5
 8003ec8:	47b8      	blx	r7
 8003eca:	3001      	adds	r0, #1
 8003ecc:	f43f aefb 	beq.w	8003cc6 <_printf_float+0xb6>
 8003ed0:	f10a 0a01 	add.w	sl, sl, #1
 8003ed4:	e7ee      	b.n	8003eb4 <_printf_float+0x2a4>
 8003ed6:	bf00      	nop
 8003ed8:	7fefffff 	.word	0x7fefffff
 8003edc:	0800d051 	.word	0x0800d051
 8003ee0:	0800d055 	.word	0x0800d055
 8003ee4:	0800d059 	.word	0x0800d059
 8003ee8:	0800d05d 	.word	0x0800d05d
 8003eec:	0800d061 	.word	0x0800d061
 8003ef0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ef2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003ef6:	4553      	cmp	r3, sl
 8003ef8:	bfa8      	it	ge
 8003efa:	4653      	movge	r3, sl
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	4699      	mov	r9, r3
 8003f00:	dc36      	bgt.n	8003f70 <_printf_float+0x360>
 8003f02:	f04f 0b00 	mov.w	fp, #0
 8003f06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f0a:	f104 021a 	add.w	r2, r4, #26
 8003f0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003f10:	9306      	str	r3, [sp, #24]
 8003f12:	eba3 0309 	sub.w	r3, r3, r9
 8003f16:	455b      	cmp	r3, fp
 8003f18:	dc31      	bgt.n	8003f7e <_printf_float+0x36e>
 8003f1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f1c:	459a      	cmp	sl, r3
 8003f1e:	dc3a      	bgt.n	8003f96 <_printf_float+0x386>
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	07da      	lsls	r2, r3, #31
 8003f24:	d437      	bmi.n	8003f96 <_printf_float+0x386>
 8003f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f28:	ebaa 0903 	sub.w	r9, sl, r3
 8003f2c:	9b06      	ldr	r3, [sp, #24]
 8003f2e:	ebaa 0303 	sub.w	r3, sl, r3
 8003f32:	4599      	cmp	r9, r3
 8003f34:	bfa8      	it	ge
 8003f36:	4699      	movge	r9, r3
 8003f38:	f1b9 0f00 	cmp.w	r9, #0
 8003f3c:	dc33      	bgt.n	8003fa6 <_printf_float+0x396>
 8003f3e:	f04f 0800 	mov.w	r8, #0
 8003f42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003f46:	f104 0b1a 	add.w	fp, r4, #26
 8003f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f4c:	ebaa 0303 	sub.w	r3, sl, r3
 8003f50:	eba3 0309 	sub.w	r3, r3, r9
 8003f54:	4543      	cmp	r3, r8
 8003f56:	f77f af79 	ble.w	8003e4c <_printf_float+0x23c>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	465a      	mov	r2, fp
 8003f5e:	4631      	mov	r1, r6
 8003f60:	4628      	mov	r0, r5
 8003f62:	47b8      	blx	r7
 8003f64:	3001      	adds	r0, #1
 8003f66:	f43f aeae 	beq.w	8003cc6 <_printf_float+0xb6>
 8003f6a:	f108 0801 	add.w	r8, r8, #1
 8003f6e:	e7ec      	b.n	8003f4a <_printf_float+0x33a>
 8003f70:	4642      	mov	r2, r8
 8003f72:	4631      	mov	r1, r6
 8003f74:	4628      	mov	r0, r5
 8003f76:	47b8      	blx	r7
 8003f78:	3001      	adds	r0, #1
 8003f7a:	d1c2      	bne.n	8003f02 <_printf_float+0x2f2>
 8003f7c:	e6a3      	b.n	8003cc6 <_printf_float+0xb6>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	4631      	mov	r1, r6
 8003f82:	4628      	mov	r0, r5
 8003f84:	9206      	str	r2, [sp, #24]
 8003f86:	47b8      	blx	r7
 8003f88:	3001      	adds	r0, #1
 8003f8a:	f43f ae9c 	beq.w	8003cc6 <_printf_float+0xb6>
 8003f8e:	9a06      	ldr	r2, [sp, #24]
 8003f90:	f10b 0b01 	add.w	fp, fp, #1
 8003f94:	e7bb      	b.n	8003f0e <_printf_float+0x2fe>
 8003f96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f9a:	4631      	mov	r1, r6
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	47b8      	blx	r7
 8003fa0:	3001      	adds	r0, #1
 8003fa2:	d1c0      	bne.n	8003f26 <_printf_float+0x316>
 8003fa4:	e68f      	b.n	8003cc6 <_printf_float+0xb6>
 8003fa6:	9a06      	ldr	r2, [sp, #24]
 8003fa8:	464b      	mov	r3, r9
 8003faa:	4442      	add	r2, r8
 8003fac:	4631      	mov	r1, r6
 8003fae:	4628      	mov	r0, r5
 8003fb0:	47b8      	blx	r7
 8003fb2:	3001      	adds	r0, #1
 8003fb4:	d1c3      	bne.n	8003f3e <_printf_float+0x32e>
 8003fb6:	e686      	b.n	8003cc6 <_printf_float+0xb6>
 8003fb8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003fbc:	f1ba 0f01 	cmp.w	sl, #1
 8003fc0:	dc01      	bgt.n	8003fc6 <_printf_float+0x3b6>
 8003fc2:	07db      	lsls	r3, r3, #31
 8003fc4:	d536      	bpl.n	8004034 <_printf_float+0x424>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	4642      	mov	r2, r8
 8003fca:	4631      	mov	r1, r6
 8003fcc:	4628      	mov	r0, r5
 8003fce:	47b8      	blx	r7
 8003fd0:	3001      	adds	r0, #1
 8003fd2:	f43f ae78 	beq.w	8003cc6 <_printf_float+0xb6>
 8003fd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fda:	4631      	mov	r1, r6
 8003fdc:	4628      	mov	r0, r5
 8003fde:	47b8      	blx	r7
 8003fe0:	3001      	adds	r0, #1
 8003fe2:	f43f ae70 	beq.w	8003cc6 <_printf_float+0xb6>
 8003fe6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003fea:	2200      	movs	r2, #0
 8003fec:	2300      	movs	r3, #0
 8003fee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003ff2:	f7fc fd71 	bl	8000ad8 <__aeabi_dcmpeq>
 8003ff6:	b9c0      	cbnz	r0, 800402a <_printf_float+0x41a>
 8003ff8:	4653      	mov	r3, sl
 8003ffa:	f108 0201 	add.w	r2, r8, #1
 8003ffe:	4631      	mov	r1, r6
 8004000:	4628      	mov	r0, r5
 8004002:	47b8      	blx	r7
 8004004:	3001      	adds	r0, #1
 8004006:	d10c      	bne.n	8004022 <_printf_float+0x412>
 8004008:	e65d      	b.n	8003cc6 <_printf_float+0xb6>
 800400a:	2301      	movs	r3, #1
 800400c:	465a      	mov	r2, fp
 800400e:	4631      	mov	r1, r6
 8004010:	4628      	mov	r0, r5
 8004012:	47b8      	blx	r7
 8004014:	3001      	adds	r0, #1
 8004016:	f43f ae56 	beq.w	8003cc6 <_printf_float+0xb6>
 800401a:	f108 0801 	add.w	r8, r8, #1
 800401e:	45d0      	cmp	r8, sl
 8004020:	dbf3      	blt.n	800400a <_printf_float+0x3fa>
 8004022:	464b      	mov	r3, r9
 8004024:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004028:	e6df      	b.n	8003dea <_printf_float+0x1da>
 800402a:	f04f 0800 	mov.w	r8, #0
 800402e:	f104 0b1a 	add.w	fp, r4, #26
 8004032:	e7f4      	b.n	800401e <_printf_float+0x40e>
 8004034:	2301      	movs	r3, #1
 8004036:	4642      	mov	r2, r8
 8004038:	e7e1      	b.n	8003ffe <_printf_float+0x3ee>
 800403a:	2301      	movs	r3, #1
 800403c:	464a      	mov	r2, r9
 800403e:	4631      	mov	r1, r6
 8004040:	4628      	mov	r0, r5
 8004042:	47b8      	blx	r7
 8004044:	3001      	adds	r0, #1
 8004046:	f43f ae3e 	beq.w	8003cc6 <_printf_float+0xb6>
 800404a:	f108 0801 	add.w	r8, r8, #1
 800404e:	68e3      	ldr	r3, [r4, #12]
 8004050:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004052:	1a5b      	subs	r3, r3, r1
 8004054:	4543      	cmp	r3, r8
 8004056:	dcf0      	bgt.n	800403a <_printf_float+0x42a>
 8004058:	e6fc      	b.n	8003e54 <_printf_float+0x244>
 800405a:	f04f 0800 	mov.w	r8, #0
 800405e:	f104 0919 	add.w	r9, r4, #25
 8004062:	e7f4      	b.n	800404e <_printf_float+0x43e>

08004064 <_printf_common>:
 8004064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004068:	4616      	mov	r6, r2
 800406a:	4698      	mov	r8, r3
 800406c:	688a      	ldr	r2, [r1, #8]
 800406e:	690b      	ldr	r3, [r1, #16]
 8004070:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004074:	4293      	cmp	r3, r2
 8004076:	bfb8      	it	lt
 8004078:	4613      	movlt	r3, r2
 800407a:	6033      	str	r3, [r6, #0]
 800407c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004080:	4607      	mov	r7, r0
 8004082:	460c      	mov	r4, r1
 8004084:	b10a      	cbz	r2, 800408a <_printf_common+0x26>
 8004086:	3301      	adds	r3, #1
 8004088:	6033      	str	r3, [r6, #0]
 800408a:	6823      	ldr	r3, [r4, #0]
 800408c:	0699      	lsls	r1, r3, #26
 800408e:	bf42      	ittt	mi
 8004090:	6833      	ldrmi	r3, [r6, #0]
 8004092:	3302      	addmi	r3, #2
 8004094:	6033      	strmi	r3, [r6, #0]
 8004096:	6825      	ldr	r5, [r4, #0]
 8004098:	f015 0506 	ands.w	r5, r5, #6
 800409c:	d106      	bne.n	80040ac <_printf_common+0x48>
 800409e:	f104 0a19 	add.w	sl, r4, #25
 80040a2:	68e3      	ldr	r3, [r4, #12]
 80040a4:	6832      	ldr	r2, [r6, #0]
 80040a6:	1a9b      	subs	r3, r3, r2
 80040a8:	42ab      	cmp	r3, r5
 80040aa:	dc26      	bgt.n	80040fa <_printf_common+0x96>
 80040ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80040b0:	6822      	ldr	r2, [r4, #0]
 80040b2:	3b00      	subs	r3, #0
 80040b4:	bf18      	it	ne
 80040b6:	2301      	movne	r3, #1
 80040b8:	0692      	lsls	r2, r2, #26
 80040ba:	d42b      	bmi.n	8004114 <_printf_common+0xb0>
 80040bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80040c0:	4641      	mov	r1, r8
 80040c2:	4638      	mov	r0, r7
 80040c4:	47c8      	blx	r9
 80040c6:	3001      	adds	r0, #1
 80040c8:	d01e      	beq.n	8004108 <_printf_common+0xa4>
 80040ca:	6823      	ldr	r3, [r4, #0]
 80040cc:	6922      	ldr	r2, [r4, #16]
 80040ce:	f003 0306 	and.w	r3, r3, #6
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	bf02      	ittt	eq
 80040d6:	68e5      	ldreq	r5, [r4, #12]
 80040d8:	6833      	ldreq	r3, [r6, #0]
 80040da:	1aed      	subeq	r5, r5, r3
 80040dc:	68a3      	ldr	r3, [r4, #8]
 80040de:	bf0c      	ite	eq
 80040e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040e4:	2500      	movne	r5, #0
 80040e6:	4293      	cmp	r3, r2
 80040e8:	bfc4      	itt	gt
 80040ea:	1a9b      	subgt	r3, r3, r2
 80040ec:	18ed      	addgt	r5, r5, r3
 80040ee:	2600      	movs	r6, #0
 80040f0:	341a      	adds	r4, #26
 80040f2:	42b5      	cmp	r5, r6
 80040f4:	d11a      	bne.n	800412c <_printf_common+0xc8>
 80040f6:	2000      	movs	r0, #0
 80040f8:	e008      	b.n	800410c <_printf_common+0xa8>
 80040fa:	2301      	movs	r3, #1
 80040fc:	4652      	mov	r2, sl
 80040fe:	4641      	mov	r1, r8
 8004100:	4638      	mov	r0, r7
 8004102:	47c8      	blx	r9
 8004104:	3001      	adds	r0, #1
 8004106:	d103      	bne.n	8004110 <_printf_common+0xac>
 8004108:	f04f 30ff 	mov.w	r0, #4294967295
 800410c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004110:	3501      	adds	r5, #1
 8004112:	e7c6      	b.n	80040a2 <_printf_common+0x3e>
 8004114:	18e1      	adds	r1, r4, r3
 8004116:	1c5a      	adds	r2, r3, #1
 8004118:	2030      	movs	r0, #48	@ 0x30
 800411a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800411e:	4422      	add	r2, r4
 8004120:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004124:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004128:	3302      	adds	r3, #2
 800412a:	e7c7      	b.n	80040bc <_printf_common+0x58>
 800412c:	2301      	movs	r3, #1
 800412e:	4622      	mov	r2, r4
 8004130:	4641      	mov	r1, r8
 8004132:	4638      	mov	r0, r7
 8004134:	47c8      	blx	r9
 8004136:	3001      	adds	r0, #1
 8004138:	d0e6      	beq.n	8004108 <_printf_common+0xa4>
 800413a:	3601      	adds	r6, #1
 800413c:	e7d9      	b.n	80040f2 <_printf_common+0x8e>
	...

08004140 <_printf_i>:
 8004140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004144:	7e0f      	ldrb	r7, [r1, #24]
 8004146:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004148:	2f78      	cmp	r7, #120	@ 0x78
 800414a:	4691      	mov	r9, r2
 800414c:	4680      	mov	r8, r0
 800414e:	460c      	mov	r4, r1
 8004150:	469a      	mov	sl, r3
 8004152:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004156:	d807      	bhi.n	8004168 <_printf_i+0x28>
 8004158:	2f62      	cmp	r7, #98	@ 0x62
 800415a:	d80a      	bhi.n	8004172 <_printf_i+0x32>
 800415c:	2f00      	cmp	r7, #0
 800415e:	f000 80d2 	beq.w	8004306 <_printf_i+0x1c6>
 8004162:	2f58      	cmp	r7, #88	@ 0x58
 8004164:	f000 80b9 	beq.w	80042da <_printf_i+0x19a>
 8004168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800416c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004170:	e03a      	b.n	80041e8 <_printf_i+0xa8>
 8004172:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004176:	2b15      	cmp	r3, #21
 8004178:	d8f6      	bhi.n	8004168 <_printf_i+0x28>
 800417a:	a101      	add	r1, pc, #4	@ (adr r1, 8004180 <_printf_i+0x40>)
 800417c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004180:	080041d9 	.word	0x080041d9
 8004184:	080041ed 	.word	0x080041ed
 8004188:	08004169 	.word	0x08004169
 800418c:	08004169 	.word	0x08004169
 8004190:	08004169 	.word	0x08004169
 8004194:	08004169 	.word	0x08004169
 8004198:	080041ed 	.word	0x080041ed
 800419c:	08004169 	.word	0x08004169
 80041a0:	08004169 	.word	0x08004169
 80041a4:	08004169 	.word	0x08004169
 80041a8:	08004169 	.word	0x08004169
 80041ac:	080042ed 	.word	0x080042ed
 80041b0:	08004217 	.word	0x08004217
 80041b4:	080042a7 	.word	0x080042a7
 80041b8:	08004169 	.word	0x08004169
 80041bc:	08004169 	.word	0x08004169
 80041c0:	0800430f 	.word	0x0800430f
 80041c4:	08004169 	.word	0x08004169
 80041c8:	08004217 	.word	0x08004217
 80041cc:	08004169 	.word	0x08004169
 80041d0:	08004169 	.word	0x08004169
 80041d4:	080042af 	.word	0x080042af
 80041d8:	6833      	ldr	r3, [r6, #0]
 80041da:	1d1a      	adds	r2, r3, #4
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	6032      	str	r2, [r6, #0]
 80041e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80041e8:	2301      	movs	r3, #1
 80041ea:	e09d      	b.n	8004328 <_printf_i+0x1e8>
 80041ec:	6833      	ldr	r3, [r6, #0]
 80041ee:	6820      	ldr	r0, [r4, #0]
 80041f0:	1d19      	adds	r1, r3, #4
 80041f2:	6031      	str	r1, [r6, #0]
 80041f4:	0606      	lsls	r6, r0, #24
 80041f6:	d501      	bpl.n	80041fc <_printf_i+0xbc>
 80041f8:	681d      	ldr	r5, [r3, #0]
 80041fa:	e003      	b.n	8004204 <_printf_i+0xc4>
 80041fc:	0645      	lsls	r5, r0, #25
 80041fe:	d5fb      	bpl.n	80041f8 <_printf_i+0xb8>
 8004200:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004204:	2d00      	cmp	r5, #0
 8004206:	da03      	bge.n	8004210 <_printf_i+0xd0>
 8004208:	232d      	movs	r3, #45	@ 0x2d
 800420a:	426d      	negs	r5, r5
 800420c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004210:	4859      	ldr	r0, [pc, #356]	@ (8004378 <_printf_i+0x238>)
 8004212:	230a      	movs	r3, #10
 8004214:	e011      	b.n	800423a <_printf_i+0xfa>
 8004216:	6821      	ldr	r1, [r4, #0]
 8004218:	6833      	ldr	r3, [r6, #0]
 800421a:	0608      	lsls	r0, r1, #24
 800421c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004220:	d402      	bmi.n	8004228 <_printf_i+0xe8>
 8004222:	0649      	lsls	r1, r1, #25
 8004224:	bf48      	it	mi
 8004226:	b2ad      	uxthmi	r5, r5
 8004228:	2f6f      	cmp	r7, #111	@ 0x6f
 800422a:	4853      	ldr	r0, [pc, #332]	@ (8004378 <_printf_i+0x238>)
 800422c:	6033      	str	r3, [r6, #0]
 800422e:	bf14      	ite	ne
 8004230:	230a      	movne	r3, #10
 8004232:	2308      	moveq	r3, #8
 8004234:	2100      	movs	r1, #0
 8004236:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800423a:	6866      	ldr	r6, [r4, #4]
 800423c:	60a6      	str	r6, [r4, #8]
 800423e:	2e00      	cmp	r6, #0
 8004240:	bfa2      	ittt	ge
 8004242:	6821      	ldrge	r1, [r4, #0]
 8004244:	f021 0104 	bicge.w	r1, r1, #4
 8004248:	6021      	strge	r1, [r4, #0]
 800424a:	b90d      	cbnz	r5, 8004250 <_printf_i+0x110>
 800424c:	2e00      	cmp	r6, #0
 800424e:	d04b      	beq.n	80042e8 <_printf_i+0x1a8>
 8004250:	4616      	mov	r6, r2
 8004252:	fbb5 f1f3 	udiv	r1, r5, r3
 8004256:	fb03 5711 	mls	r7, r3, r1, r5
 800425a:	5dc7      	ldrb	r7, [r0, r7]
 800425c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004260:	462f      	mov	r7, r5
 8004262:	42bb      	cmp	r3, r7
 8004264:	460d      	mov	r5, r1
 8004266:	d9f4      	bls.n	8004252 <_printf_i+0x112>
 8004268:	2b08      	cmp	r3, #8
 800426a:	d10b      	bne.n	8004284 <_printf_i+0x144>
 800426c:	6823      	ldr	r3, [r4, #0]
 800426e:	07df      	lsls	r7, r3, #31
 8004270:	d508      	bpl.n	8004284 <_printf_i+0x144>
 8004272:	6923      	ldr	r3, [r4, #16]
 8004274:	6861      	ldr	r1, [r4, #4]
 8004276:	4299      	cmp	r1, r3
 8004278:	bfde      	ittt	le
 800427a:	2330      	movle	r3, #48	@ 0x30
 800427c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004280:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004284:	1b92      	subs	r2, r2, r6
 8004286:	6122      	str	r2, [r4, #16]
 8004288:	f8cd a000 	str.w	sl, [sp]
 800428c:	464b      	mov	r3, r9
 800428e:	aa03      	add	r2, sp, #12
 8004290:	4621      	mov	r1, r4
 8004292:	4640      	mov	r0, r8
 8004294:	f7ff fee6 	bl	8004064 <_printf_common>
 8004298:	3001      	adds	r0, #1
 800429a:	d14a      	bne.n	8004332 <_printf_i+0x1f2>
 800429c:	f04f 30ff 	mov.w	r0, #4294967295
 80042a0:	b004      	add	sp, #16
 80042a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	f043 0320 	orr.w	r3, r3, #32
 80042ac:	6023      	str	r3, [r4, #0]
 80042ae:	4833      	ldr	r0, [pc, #204]	@ (800437c <_printf_i+0x23c>)
 80042b0:	2778      	movs	r7, #120	@ 0x78
 80042b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80042b6:	6823      	ldr	r3, [r4, #0]
 80042b8:	6831      	ldr	r1, [r6, #0]
 80042ba:	061f      	lsls	r7, r3, #24
 80042bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80042c0:	d402      	bmi.n	80042c8 <_printf_i+0x188>
 80042c2:	065f      	lsls	r7, r3, #25
 80042c4:	bf48      	it	mi
 80042c6:	b2ad      	uxthmi	r5, r5
 80042c8:	6031      	str	r1, [r6, #0]
 80042ca:	07d9      	lsls	r1, r3, #31
 80042cc:	bf44      	itt	mi
 80042ce:	f043 0320 	orrmi.w	r3, r3, #32
 80042d2:	6023      	strmi	r3, [r4, #0]
 80042d4:	b11d      	cbz	r5, 80042de <_printf_i+0x19e>
 80042d6:	2310      	movs	r3, #16
 80042d8:	e7ac      	b.n	8004234 <_printf_i+0xf4>
 80042da:	4827      	ldr	r0, [pc, #156]	@ (8004378 <_printf_i+0x238>)
 80042dc:	e7e9      	b.n	80042b2 <_printf_i+0x172>
 80042de:	6823      	ldr	r3, [r4, #0]
 80042e0:	f023 0320 	bic.w	r3, r3, #32
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	e7f6      	b.n	80042d6 <_printf_i+0x196>
 80042e8:	4616      	mov	r6, r2
 80042ea:	e7bd      	b.n	8004268 <_printf_i+0x128>
 80042ec:	6833      	ldr	r3, [r6, #0]
 80042ee:	6825      	ldr	r5, [r4, #0]
 80042f0:	6961      	ldr	r1, [r4, #20]
 80042f2:	1d18      	adds	r0, r3, #4
 80042f4:	6030      	str	r0, [r6, #0]
 80042f6:	062e      	lsls	r6, r5, #24
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	d501      	bpl.n	8004300 <_printf_i+0x1c0>
 80042fc:	6019      	str	r1, [r3, #0]
 80042fe:	e002      	b.n	8004306 <_printf_i+0x1c6>
 8004300:	0668      	lsls	r0, r5, #25
 8004302:	d5fb      	bpl.n	80042fc <_printf_i+0x1bc>
 8004304:	8019      	strh	r1, [r3, #0]
 8004306:	2300      	movs	r3, #0
 8004308:	6123      	str	r3, [r4, #16]
 800430a:	4616      	mov	r6, r2
 800430c:	e7bc      	b.n	8004288 <_printf_i+0x148>
 800430e:	6833      	ldr	r3, [r6, #0]
 8004310:	1d1a      	adds	r2, r3, #4
 8004312:	6032      	str	r2, [r6, #0]
 8004314:	681e      	ldr	r6, [r3, #0]
 8004316:	6862      	ldr	r2, [r4, #4]
 8004318:	2100      	movs	r1, #0
 800431a:	4630      	mov	r0, r6
 800431c:	f7fb ff60 	bl	80001e0 <memchr>
 8004320:	b108      	cbz	r0, 8004326 <_printf_i+0x1e6>
 8004322:	1b80      	subs	r0, r0, r6
 8004324:	6060      	str	r0, [r4, #4]
 8004326:	6863      	ldr	r3, [r4, #4]
 8004328:	6123      	str	r3, [r4, #16]
 800432a:	2300      	movs	r3, #0
 800432c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004330:	e7aa      	b.n	8004288 <_printf_i+0x148>
 8004332:	6923      	ldr	r3, [r4, #16]
 8004334:	4632      	mov	r2, r6
 8004336:	4649      	mov	r1, r9
 8004338:	4640      	mov	r0, r8
 800433a:	47d0      	blx	sl
 800433c:	3001      	adds	r0, #1
 800433e:	d0ad      	beq.n	800429c <_printf_i+0x15c>
 8004340:	6823      	ldr	r3, [r4, #0]
 8004342:	079b      	lsls	r3, r3, #30
 8004344:	d413      	bmi.n	800436e <_printf_i+0x22e>
 8004346:	68e0      	ldr	r0, [r4, #12]
 8004348:	9b03      	ldr	r3, [sp, #12]
 800434a:	4298      	cmp	r0, r3
 800434c:	bfb8      	it	lt
 800434e:	4618      	movlt	r0, r3
 8004350:	e7a6      	b.n	80042a0 <_printf_i+0x160>
 8004352:	2301      	movs	r3, #1
 8004354:	4632      	mov	r2, r6
 8004356:	4649      	mov	r1, r9
 8004358:	4640      	mov	r0, r8
 800435a:	47d0      	blx	sl
 800435c:	3001      	adds	r0, #1
 800435e:	d09d      	beq.n	800429c <_printf_i+0x15c>
 8004360:	3501      	adds	r5, #1
 8004362:	68e3      	ldr	r3, [r4, #12]
 8004364:	9903      	ldr	r1, [sp, #12]
 8004366:	1a5b      	subs	r3, r3, r1
 8004368:	42ab      	cmp	r3, r5
 800436a:	dcf2      	bgt.n	8004352 <_printf_i+0x212>
 800436c:	e7eb      	b.n	8004346 <_printf_i+0x206>
 800436e:	2500      	movs	r5, #0
 8004370:	f104 0619 	add.w	r6, r4, #25
 8004374:	e7f5      	b.n	8004362 <_printf_i+0x222>
 8004376:	bf00      	nop
 8004378:	0800d063 	.word	0x0800d063
 800437c:	0800d074 	.word	0x0800d074

08004380 <_scanf_float>:
 8004380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004384:	b087      	sub	sp, #28
 8004386:	4617      	mov	r7, r2
 8004388:	9303      	str	r3, [sp, #12]
 800438a:	688b      	ldr	r3, [r1, #8]
 800438c:	1e5a      	subs	r2, r3, #1
 800438e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004392:	bf81      	itttt	hi
 8004394:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004398:	eb03 0b05 	addhi.w	fp, r3, r5
 800439c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80043a0:	608b      	strhi	r3, [r1, #8]
 80043a2:	680b      	ldr	r3, [r1, #0]
 80043a4:	460a      	mov	r2, r1
 80043a6:	f04f 0500 	mov.w	r5, #0
 80043aa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80043ae:	f842 3b1c 	str.w	r3, [r2], #28
 80043b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80043b6:	4680      	mov	r8, r0
 80043b8:	460c      	mov	r4, r1
 80043ba:	bf98      	it	ls
 80043bc:	f04f 0b00 	movls.w	fp, #0
 80043c0:	9201      	str	r2, [sp, #4]
 80043c2:	4616      	mov	r6, r2
 80043c4:	46aa      	mov	sl, r5
 80043c6:	46a9      	mov	r9, r5
 80043c8:	9502      	str	r5, [sp, #8]
 80043ca:	68a2      	ldr	r2, [r4, #8]
 80043cc:	b152      	cbz	r2, 80043e4 <_scanf_float+0x64>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b4e      	cmp	r3, #78	@ 0x4e
 80043d4:	d864      	bhi.n	80044a0 <_scanf_float+0x120>
 80043d6:	2b40      	cmp	r3, #64	@ 0x40
 80043d8:	d83c      	bhi.n	8004454 <_scanf_float+0xd4>
 80043da:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80043de:	b2c8      	uxtb	r0, r1
 80043e0:	280e      	cmp	r0, #14
 80043e2:	d93a      	bls.n	800445a <_scanf_float+0xda>
 80043e4:	f1b9 0f00 	cmp.w	r9, #0
 80043e8:	d003      	beq.n	80043f2 <_scanf_float+0x72>
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043f0:	6023      	str	r3, [r4, #0]
 80043f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043f6:	f1ba 0f01 	cmp.w	sl, #1
 80043fa:	f200 8117 	bhi.w	800462c <_scanf_float+0x2ac>
 80043fe:	9b01      	ldr	r3, [sp, #4]
 8004400:	429e      	cmp	r6, r3
 8004402:	f200 8108 	bhi.w	8004616 <_scanf_float+0x296>
 8004406:	2001      	movs	r0, #1
 8004408:	b007      	add	sp, #28
 800440a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800440e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004412:	2a0d      	cmp	r2, #13
 8004414:	d8e6      	bhi.n	80043e4 <_scanf_float+0x64>
 8004416:	a101      	add	r1, pc, #4	@ (adr r1, 800441c <_scanf_float+0x9c>)
 8004418:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800441c:	08004563 	.word	0x08004563
 8004420:	080043e5 	.word	0x080043e5
 8004424:	080043e5 	.word	0x080043e5
 8004428:	080043e5 	.word	0x080043e5
 800442c:	080045c3 	.word	0x080045c3
 8004430:	0800459b 	.word	0x0800459b
 8004434:	080043e5 	.word	0x080043e5
 8004438:	080043e5 	.word	0x080043e5
 800443c:	08004571 	.word	0x08004571
 8004440:	080043e5 	.word	0x080043e5
 8004444:	080043e5 	.word	0x080043e5
 8004448:	080043e5 	.word	0x080043e5
 800444c:	080043e5 	.word	0x080043e5
 8004450:	08004529 	.word	0x08004529
 8004454:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004458:	e7db      	b.n	8004412 <_scanf_float+0x92>
 800445a:	290e      	cmp	r1, #14
 800445c:	d8c2      	bhi.n	80043e4 <_scanf_float+0x64>
 800445e:	a001      	add	r0, pc, #4	@ (adr r0, 8004464 <_scanf_float+0xe4>)
 8004460:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004464:	08004519 	.word	0x08004519
 8004468:	080043e5 	.word	0x080043e5
 800446c:	08004519 	.word	0x08004519
 8004470:	080045af 	.word	0x080045af
 8004474:	080043e5 	.word	0x080043e5
 8004478:	080044c1 	.word	0x080044c1
 800447c:	080044ff 	.word	0x080044ff
 8004480:	080044ff 	.word	0x080044ff
 8004484:	080044ff 	.word	0x080044ff
 8004488:	080044ff 	.word	0x080044ff
 800448c:	080044ff 	.word	0x080044ff
 8004490:	080044ff 	.word	0x080044ff
 8004494:	080044ff 	.word	0x080044ff
 8004498:	080044ff 	.word	0x080044ff
 800449c:	080044ff 	.word	0x080044ff
 80044a0:	2b6e      	cmp	r3, #110	@ 0x6e
 80044a2:	d809      	bhi.n	80044b8 <_scanf_float+0x138>
 80044a4:	2b60      	cmp	r3, #96	@ 0x60
 80044a6:	d8b2      	bhi.n	800440e <_scanf_float+0x8e>
 80044a8:	2b54      	cmp	r3, #84	@ 0x54
 80044aa:	d07b      	beq.n	80045a4 <_scanf_float+0x224>
 80044ac:	2b59      	cmp	r3, #89	@ 0x59
 80044ae:	d199      	bne.n	80043e4 <_scanf_float+0x64>
 80044b0:	2d07      	cmp	r5, #7
 80044b2:	d197      	bne.n	80043e4 <_scanf_float+0x64>
 80044b4:	2508      	movs	r5, #8
 80044b6:	e02c      	b.n	8004512 <_scanf_float+0x192>
 80044b8:	2b74      	cmp	r3, #116	@ 0x74
 80044ba:	d073      	beq.n	80045a4 <_scanf_float+0x224>
 80044bc:	2b79      	cmp	r3, #121	@ 0x79
 80044be:	e7f6      	b.n	80044ae <_scanf_float+0x12e>
 80044c0:	6821      	ldr	r1, [r4, #0]
 80044c2:	05c8      	lsls	r0, r1, #23
 80044c4:	d51b      	bpl.n	80044fe <_scanf_float+0x17e>
 80044c6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80044ca:	6021      	str	r1, [r4, #0]
 80044cc:	f109 0901 	add.w	r9, r9, #1
 80044d0:	f1bb 0f00 	cmp.w	fp, #0
 80044d4:	d003      	beq.n	80044de <_scanf_float+0x15e>
 80044d6:	3201      	adds	r2, #1
 80044d8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80044dc:	60a2      	str	r2, [r4, #8]
 80044de:	68a3      	ldr	r3, [r4, #8]
 80044e0:	3b01      	subs	r3, #1
 80044e2:	60a3      	str	r3, [r4, #8]
 80044e4:	6923      	ldr	r3, [r4, #16]
 80044e6:	3301      	adds	r3, #1
 80044e8:	6123      	str	r3, [r4, #16]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	3b01      	subs	r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	607b      	str	r3, [r7, #4]
 80044f2:	f340 8087 	ble.w	8004604 <_scanf_float+0x284>
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	3301      	adds	r3, #1
 80044fa:	603b      	str	r3, [r7, #0]
 80044fc:	e765      	b.n	80043ca <_scanf_float+0x4a>
 80044fe:	eb1a 0105 	adds.w	r1, sl, r5
 8004502:	f47f af6f 	bne.w	80043e4 <_scanf_float+0x64>
 8004506:	6822      	ldr	r2, [r4, #0]
 8004508:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800450c:	6022      	str	r2, [r4, #0]
 800450e:	460d      	mov	r5, r1
 8004510:	468a      	mov	sl, r1
 8004512:	f806 3b01 	strb.w	r3, [r6], #1
 8004516:	e7e2      	b.n	80044de <_scanf_float+0x15e>
 8004518:	6822      	ldr	r2, [r4, #0]
 800451a:	0610      	lsls	r0, r2, #24
 800451c:	f57f af62 	bpl.w	80043e4 <_scanf_float+0x64>
 8004520:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004524:	6022      	str	r2, [r4, #0]
 8004526:	e7f4      	b.n	8004512 <_scanf_float+0x192>
 8004528:	f1ba 0f00 	cmp.w	sl, #0
 800452c:	d10e      	bne.n	800454c <_scanf_float+0x1cc>
 800452e:	f1b9 0f00 	cmp.w	r9, #0
 8004532:	d10e      	bne.n	8004552 <_scanf_float+0x1d2>
 8004534:	6822      	ldr	r2, [r4, #0]
 8004536:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800453a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800453e:	d108      	bne.n	8004552 <_scanf_float+0x1d2>
 8004540:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004544:	6022      	str	r2, [r4, #0]
 8004546:	f04f 0a01 	mov.w	sl, #1
 800454a:	e7e2      	b.n	8004512 <_scanf_float+0x192>
 800454c:	f1ba 0f02 	cmp.w	sl, #2
 8004550:	d055      	beq.n	80045fe <_scanf_float+0x27e>
 8004552:	2d01      	cmp	r5, #1
 8004554:	d002      	beq.n	800455c <_scanf_float+0x1dc>
 8004556:	2d04      	cmp	r5, #4
 8004558:	f47f af44 	bne.w	80043e4 <_scanf_float+0x64>
 800455c:	3501      	adds	r5, #1
 800455e:	b2ed      	uxtb	r5, r5
 8004560:	e7d7      	b.n	8004512 <_scanf_float+0x192>
 8004562:	f1ba 0f01 	cmp.w	sl, #1
 8004566:	f47f af3d 	bne.w	80043e4 <_scanf_float+0x64>
 800456a:	f04f 0a02 	mov.w	sl, #2
 800456e:	e7d0      	b.n	8004512 <_scanf_float+0x192>
 8004570:	b97d      	cbnz	r5, 8004592 <_scanf_float+0x212>
 8004572:	f1b9 0f00 	cmp.w	r9, #0
 8004576:	f47f af38 	bne.w	80043ea <_scanf_float+0x6a>
 800457a:	6822      	ldr	r2, [r4, #0]
 800457c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004580:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004584:	f040 8108 	bne.w	8004798 <_scanf_float+0x418>
 8004588:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800458c:	6022      	str	r2, [r4, #0]
 800458e:	2501      	movs	r5, #1
 8004590:	e7bf      	b.n	8004512 <_scanf_float+0x192>
 8004592:	2d03      	cmp	r5, #3
 8004594:	d0e2      	beq.n	800455c <_scanf_float+0x1dc>
 8004596:	2d05      	cmp	r5, #5
 8004598:	e7de      	b.n	8004558 <_scanf_float+0x1d8>
 800459a:	2d02      	cmp	r5, #2
 800459c:	f47f af22 	bne.w	80043e4 <_scanf_float+0x64>
 80045a0:	2503      	movs	r5, #3
 80045a2:	e7b6      	b.n	8004512 <_scanf_float+0x192>
 80045a4:	2d06      	cmp	r5, #6
 80045a6:	f47f af1d 	bne.w	80043e4 <_scanf_float+0x64>
 80045aa:	2507      	movs	r5, #7
 80045ac:	e7b1      	b.n	8004512 <_scanf_float+0x192>
 80045ae:	6822      	ldr	r2, [r4, #0]
 80045b0:	0591      	lsls	r1, r2, #22
 80045b2:	f57f af17 	bpl.w	80043e4 <_scanf_float+0x64>
 80045b6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80045ba:	6022      	str	r2, [r4, #0]
 80045bc:	f8cd 9008 	str.w	r9, [sp, #8]
 80045c0:	e7a7      	b.n	8004512 <_scanf_float+0x192>
 80045c2:	6822      	ldr	r2, [r4, #0]
 80045c4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80045c8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80045cc:	d006      	beq.n	80045dc <_scanf_float+0x25c>
 80045ce:	0550      	lsls	r0, r2, #21
 80045d0:	f57f af08 	bpl.w	80043e4 <_scanf_float+0x64>
 80045d4:	f1b9 0f00 	cmp.w	r9, #0
 80045d8:	f000 80de 	beq.w	8004798 <_scanf_float+0x418>
 80045dc:	0591      	lsls	r1, r2, #22
 80045de:	bf58      	it	pl
 80045e0:	9902      	ldrpl	r1, [sp, #8]
 80045e2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80045e6:	bf58      	it	pl
 80045e8:	eba9 0101 	subpl.w	r1, r9, r1
 80045ec:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80045f0:	bf58      	it	pl
 80045f2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80045f6:	6022      	str	r2, [r4, #0]
 80045f8:	f04f 0900 	mov.w	r9, #0
 80045fc:	e789      	b.n	8004512 <_scanf_float+0x192>
 80045fe:	f04f 0a03 	mov.w	sl, #3
 8004602:	e786      	b.n	8004512 <_scanf_float+0x192>
 8004604:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004608:	4639      	mov	r1, r7
 800460a:	4640      	mov	r0, r8
 800460c:	4798      	blx	r3
 800460e:	2800      	cmp	r0, #0
 8004610:	f43f aedb 	beq.w	80043ca <_scanf_float+0x4a>
 8004614:	e6e6      	b.n	80043e4 <_scanf_float+0x64>
 8004616:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800461a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800461e:	463a      	mov	r2, r7
 8004620:	4640      	mov	r0, r8
 8004622:	4798      	blx	r3
 8004624:	6923      	ldr	r3, [r4, #16]
 8004626:	3b01      	subs	r3, #1
 8004628:	6123      	str	r3, [r4, #16]
 800462a:	e6e8      	b.n	80043fe <_scanf_float+0x7e>
 800462c:	1e6b      	subs	r3, r5, #1
 800462e:	2b06      	cmp	r3, #6
 8004630:	d824      	bhi.n	800467c <_scanf_float+0x2fc>
 8004632:	2d02      	cmp	r5, #2
 8004634:	d836      	bhi.n	80046a4 <_scanf_float+0x324>
 8004636:	9b01      	ldr	r3, [sp, #4]
 8004638:	429e      	cmp	r6, r3
 800463a:	f67f aee4 	bls.w	8004406 <_scanf_float+0x86>
 800463e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004642:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004646:	463a      	mov	r2, r7
 8004648:	4640      	mov	r0, r8
 800464a:	4798      	blx	r3
 800464c:	6923      	ldr	r3, [r4, #16]
 800464e:	3b01      	subs	r3, #1
 8004650:	6123      	str	r3, [r4, #16]
 8004652:	e7f0      	b.n	8004636 <_scanf_float+0x2b6>
 8004654:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004658:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800465c:	463a      	mov	r2, r7
 800465e:	4640      	mov	r0, r8
 8004660:	4798      	blx	r3
 8004662:	6923      	ldr	r3, [r4, #16]
 8004664:	3b01      	subs	r3, #1
 8004666:	6123      	str	r3, [r4, #16]
 8004668:	f10a 3aff 	add.w	sl, sl, #4294967295
 800466c:	fa5f fa8a 	uxtb.w	sl, sl
 8004670:	f1ba 0f02 	cmp.w	sl, #2
 8004674:	d1ee      	bne.n	8004654 <_scanf_float+0x2d4>
 8004676:	3d03      	subs	r5, #3
 8004678:	b2ed      	uxtb	r5, r5
 800467a:	1b76      	subs	r6, r6, r5
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	05da      	lsls	r2, r3, #23
 8004680:	d530      	bpl.n	80046e4 <_scanf_float+0x364>
 8004682:	055b      	lsls	r3, r3, #21
 8004684:	d511      	bpl.n	80046aa <_scanf_float+0x32a>
 8004686:	9b01      	ldr	r3, [sp, #4]
 8004688:	429e      	cmp	r6, r3
 800468a:	f67f aebc 	bls.w	8004406 <_scanf_float+0x86>
 800468e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004692:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004696:	463a      	mov	r2, r7
 8004698:	4640      	mov	r0, r8
 800469a:	4798      	blx	r3
 800469c:	6923      	ldr	r3, [r4, #16]
 800469e:	3b01      	subs	r3, #1
 80046a0:	6123      	str	r3, [r4, #16]
 80046a2:	e7f0      	b.n	8004686 <_scanf_float+0x306>
 80046a4:	46aa      	mov	sl, r5
 80046a6:	46b3      	mov	fp, r6
 80046a8:	e7de      	b.n	8004668 <_scanf_float+0x2e8>
 80046aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80046ae:	6923      	ldr	r3, [r4, #16]
 80046b0:	2965      	cmp	r1, #101	@ 0x65
 80046b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80046b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80046ba:	6123      	str	r3, [r4, #16]
 80046bc:	d00c      	beq.n	80046d8 <_scanf_float+0x358>
 80046be:	2945      	cmp	r1, #69	@ 0x45
 80046c0:	d00a      	beq.n	80046d8 <_scanf_float+0x358>
 80046c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80046c6:	463a      	mov	r2, r7
 80046c8:	4640      	mov	r0, r8
 80046ca:	4798      	blx	r3
 80046cc:	6923      	ldr	r3, [r4, #16]
 80046ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	1eb5      	subs	r5, r6, #2
 80046d6:	6123      	str	r3, [r4, #16]
 80046d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80046dc:	463a      	mov	r2, r7
 80046de:	4640      	mov	r0, r8
 80046e0:	4798      	blx	r3
 80046e2:	462e      	mov	r6, r5
 80046e4:	6822      	ldr	r2, [r4, #0]
 80046e6:	f012 0210 	ands.w	r2, r2, #16
 80046ea:	d001      	beq.n	80046f0 <_scanf_float+0x370>
 80046ec:	2000      	movs	r0, #0
 80046ee:	e68b      	b.n	8004408 <_scanf_float+0x88>
 80046f0:	7032      	strb	r2, [r6, #0]
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80046f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046fc:	d11c      	bne.n	8004738 <_scanf_float+0x3b8>
 80046fe:	9b02      	ldr	r3, [sp, #8]
 8004700:	454b      	cmp	r3, r9
 8004702:	eba3 0209 	sub.w	r2, r3, r9
 8004706:	d123      	bne.n	8004750 <_scanf_float+0x3d0>
 8004708:	9901      	ldr	r1, [sp, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	4640      	mov	r0, r8
 800470e:	f002 fbf7 	bl	8006f00 <_strtod_r>
 8004712:	9b03      	ldr	r3, [sp, #12]
 8004714:	6821      	ldr	r1, [r4, #0]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f011 0f02 	tst.w	r1, #2
 800471c:	ec57 6b10 	vmov	r6, r7, d0
 8004720:	f103 0204 	add.w	r2, r3, #4
 8004724:	d01f      	beq.n	8004766 <_scanf_float+0x3e6>
 8004726:	9903      	ldr	r1, [sp, #12]
 8004728:	600a      	str	r2, [r1, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	e9c3 6700 	strd	r6, r7, [r3]
 8004730:	68e3      	ldr	r3, [r4, #12]
 8004732:	3301      	adds	r3, #1
 8004734:	60e3      	str	r3, [r4, #12]
 8004736:	e7d9      	b.n	80046ec <_scanf_float+0x36c>
 8004738:	9b04      	ldr	r3, [sp, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0e4      	beq.n	8004708 <_scanf_float+0x388>
 800473e:	9905      	ldr	r1, [sp, #20]
 8004740:	230a      	movs	r3, #10
 8004742:	3101      	adds	r1, #1
 8004744:	4640      	mov	r0, r8
 8004746:	f7ff f9b7 	bl	8003ab8 <_strtol_r>
 800474a:	9b04      	ldr	r3, [sp, #16]
 800474c:	9e05      	ldr	r6, [sp, #20]
 800474e:	1ac2      	subs	r2, r0, r3
 8004750:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004754:	429e      	cmp	r6, r3
 8004756:	bf28      	it	cs
 8004758:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800475c:	4910      	ldr	r1, [pc, #64]	@ (80047a0 <_scanf_float+0x420>)
 800475e:	4630      	mov	r0, r6
 8004760:	f000 f8e4 	bl	800492c <siprintf>
 8004764:	e7d0      	b.n	8004708 <_scanf_float+0x388>
 8004766:	f011 0f04 	tst.w	r1, #4
 800476a:	9903      	ldr	r1, [sp, #12]
 800476c:	600a      	str	r2, [r1, #0]
 800476e:	d1dc      	bne.n	800472a <_scanf_float+0x3aa>
 8004770:	681d      	ldr	r5, [r3, #0]
 8004772:	4632      	mov	r2, r6
 8004774:	463b      	mov	r3, r7
 8004776:	4630      	mov	r0, r6
 8004778:	4639      	mov	r1, r7
 800477a:	f7fc f9df 	bl	8000b3c <__aeabi_dcmpun>
 800477e:	b128      	cbz	r0, 800478c <_scanf_float+0x40c>
 8004780:	4808      	ldr	r0, [pc, #32]	@ (80047a4 <_scanf_float+0x424>)
 8004782:	f000 f9b7 	bl	8004af4 <nanf>
 8004786:	ed85 0a00 	vstr	s0, [r5]
 800478a:	e7d1      	b.n	8004730 <_scanf_float+0x3b0>
 800478c:	4630      	mov	r0, r6
 800478e:	4639      	mov	r1, r7
 8004790:	f7fc fa32 	bl	8000bf8 <__aeabi_d2f>
 8004794:	6028      	str	r0, [r5, #0]
 8004796:	e7cb      	b.n	8004730 <_scanf_float+0x3b0>
 8004798:	f04f 0900 	mov.w	r9, #0
 800479c:	e629      	b.n	80043f2 <_scanf_float+0x72>
 800479e:	bf00      	nop
 80047a0:	0800d085 	.word	0x0800d085
 80047a4:	0800d31c 	.word	0x0800d31c

080047a8 <std>:
 80047a8:	2300      	movs	r3, #0
 80047aa:	b510      	push	{r4, lr}
 80047ac:	4604      	mov	r4, r0
 80047ae:	e9c0 3300 	strd	r3, r3, [r0]
 80047b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80047b6:	6083      	str	r3, [r0, #8]
 80047b8:	8181      	strh	r1, [r0, #12]
 80047ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80047bc:	81c2      	strh	r2, [r0, #14]
 80047be:	6183      	str	r3, [r0, #24]
 80047c0:	4619      	mov	r1, r3
 80047c2:	2208      	movs	r2, #8
 80047c4:	305c      	adds	r0, #92	@ 0x5c
 80047c6:	f000 f914 	bl	80049f2 <memset>
 80047ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004800 <std+0x58>)
 80047cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80047ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004804 <std+0x5c>)
 80047d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80047d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004808 <std+0x60>)
 80047d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80047d6:	4b0d      	ldr	r3, [pc, #52]	@ (800480c <std+0x64>)
 80047d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80047da:	4b0d      	ldr	r3, [pc, #52]	@ (8004810 <std+0x68>)
 80047dc:	6224      	str	r4, [r4, #32]
 80047de:	429c      	cmp	r4, r3
 80047e0:	d006      	beq.n	80047f0 <std+0x48>
 80047e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80047e6:	4294      	cmp	r4, r2
 80047e8:	d002      	beq.n	80047f0 <std+0x48>
 80047ea:	33d0      	adds	r3, #208	@ 0xd0
 80047ec:	429c      	cmp	r4, r3
 80047ee:	d105      	bne.n	80047fc <std+0x54>
 80047f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80047f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047f8:	f000 b978 	b.w	8004aec <__retarget_lock_init_recursive>
 80047fc:	bd10      	pop	{r4, pc}
 80047fe:	bf00      	nop
 8004800:	0800496d 	.word	0x0800496d
 8004804:	0800498f 	.word	0x0800498f
 8004808:	080049c7 	.word	0x080049c7
 800480c:	080049eb 	.word	0x080049eb
 8004810:	200003c4 	.word	0x200003c4

08004814 <stdio_exit_handler>:
 8004814:	4a02      	ldr	r2, [pc, #8]	@ (8004820 <stdio_exit_handler+0xc>)
 8004816:	4903      	ldr	r1, [pc, #12]	@ (8004824 <stdio_exit_handler+0x10>)
 8004818:	4803      	ldr	r0, [pc, #12]	@ (8004828 <stdio_exit_handler+0x14>)
 800481a:	f000 b869 	b.w	80048f0 <_fwalk_sglue>
 800481e:	bf00      	nop
 8004820:	2000000c 	.word	0x2000000c
 8004824:	080072c5 	.word	0x080072c5
 8004828:	2000001c 	.word	0x2000001c

0800482c <cleanup_stdio>:
 800482c:	6841      	ldr	r1, [r0, #4]
 800482e:	4b0c      	ldr	r3, [pc, #48]	@ (8004860 <cleanup_stdio+0x34>)
 8004830:	4299      	cmp	r1, r3
 8004832:	b510      	push	{r4, lr}
 8004834:	4604      	mov	r4, r0
 8004836:	d001      	beq.n	800483c <cleanup_stdio+0x10>
 8004838:	f002 fd44 	bl	80072c4 <_fflush_r>
 800483c:	68a1      	ldr	r1, [r4, #8]
 800483e:	4b09      	ldr	r3, [pc, #36]	@ (8004864 <cleanup_stdio+0x38>)
 8004840:	4299      	cmp	r1, r3
 8004842:	d002      	beq.n	800484a <cleanup_stdio+0x1e>
 8004844:	4620      	mov	r0, r4
 8004846:	f002 fd3d 	bl	80072c4 <_fflush_r>
 800484a:	68e1      	ldr	r1, [r4, #12]
 800484c:	4b06      	ldr	r3, [pc, #24]	@ (8004868 <cleanup_stdio+0x3c>)
 800484e:	4299      	cmp	r1, r3
 8004850:	d004      	beq.n	800485c <cleanup_stdio+0x30>
 8004852:	4620      	mov	r0, r4
 8004854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004858:	f002 bd34 	b.w	80072c4 <_fflush_r>
 800485c:	bd10      	pop	{r4, pc}
 800485e:	bf00      	nop
 8004860:	200003c4 	.word	0x200003c4
 8004864:	2000042c 	.word	0x2000042c
 8004868:	20000494 	.word	0x20000494

0800486c <global_stdio_init.part.0>:
 800486c:	b510      	push	{r4, lr}
 800486e:	4b0b      	ldr	r3, [pc, #44]	@ (800489c <global_stdio_init.part.0+0x30>)
 8004870:	4c0b      	ldr	r4, [pc, #44]	@ (80048a0 <global_stdio_init.part.0+0x34>)
 8004872:	4a0c      	ldr	r2, [pc, #48]	@ (80048a4 <global_stdio_init.part.0+0x38>)
 8004874:	601a      	str	r2, [r3, #0]
 8004876:	4620      	mov	r0, r4
 8004878:	2200      	movs	r2, #0
 800487a:	2104      	movs	r1, #4
 800487c:	f7ff ff94 	bl	80047a8 <std>
 8004880:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004884:	2201      	movs	r2, #1
 8004886:	2109      	movs	r1, #9
 8004888:	f7ff ff8e 	bl	80047a8 <std>
 800488c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004890:	2202      	movs	r2, #2
 8004892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004896:	2112      	movs	r1, #18
 8004898:	f7ff bf86 	b.w	80047a8 <std>
 800489c:	200004fc 	.word	0x200004fc
 80048a0:	200003c4 	.word	0x200003c4
 80048a4:	08004815 	.word	0x08004815

080048a8 <__sfp_lock_acquire>:
 80048a8:	4801      	ldr	r0, [pc, #4]	@ (80048b0 <__sfp_lock_acquire+0x8>)
 80048aa:	f000 b920 	b.w	8004aee <__retarget_lock_acquire_recursive>
 80048ae:	bf00      	nop
 80048b0:	20000505 	.word	0x20000505

080048b4 <__sfp_lock_release>:
 80048b4:	4801      	ldr	r0, [pc, #4]	@ (80048bc <__sfp_lock_release+0x8>)
 80048b6:	f000 b91b 	b.w	8004af0 <__retarget_lock_release_recursive>
 80048ba:	bf00      	nop
 80048bc:	20000505 	.word	0x20000505

080048c0 <__sinit>:
 80048c0:	b510      	push	{r4, lr}
 80048c2:	4604      	mov	r4, r0
 80048c4:	f7ff fff0 	bl	80048a8 <__sfp_lock_acquire>
 80048c8:	6a23      	ldr	r3, [r4, #32]
 80048ca:	b11b      	cbz	r3, 80048d4 <__sinit+0x14>
 80048cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048d0:	f7ff bff0 	b.w	80048b4 <__sfp_lock_release>
 80048d4:	4b04      	ldr	r3, [pc, #16]	@ (80048e8 <__sinit+0x28>)
 80048d6:	6223      	str	r3, [r4, #32]
 80048d8:	4b04      	ldr	r3, [pc, #16]	@ (80048ec <__sinit+0x2c>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1f5      	bne.n	80048cc <__sinit+0xc>
 80048e0:	f7ff ffc4 	bl	800486c <global_stdio_init.part.0>
 80048e4:	e7f2      	b.n	80048cc <__sinit+0xc>
 80048e6:	bf00      	nop
 80048e8:	0800482d 	.word	0x0800482d
 80048ec:	200004fc 	.word	0x200004fc

080048f0 <_fwalk_sglue>:
 80048f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048f4:	4607      	mov	r7, r0
 80048f6:	4688      	mov	r8, r1
 80048f8:	4614      	mov	r4, r2
 80048fa:	2600      	movs	r6, #0
 80048fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004900:	f1b9 0901 	subs.w	r9, r9, #1
 8004904:	d505      	bpl.n	8004912 <_fwalk_sglue+0x22>
 8004906:	6824      	ldr	r4, [r4, #0]
 8004908:	2c00      	cmp	r4, #0
 800490a:	d1f7      	bne.n	80048fc <_fwalk_sglue+0xc>
 800490c:	4630      	mov	r0, r6
 800490e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004912:	89ab      	ldrh	r3, [r5, #12]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d907      	bls.n	8004928 <_fwalk_sglue+0x38>
 8004918:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800491c:	3301      	adds	r3, #1
 800491e:	d003      	beq.n	8004928 <_fwalk_sglue+0x38>
 8004920:	4629      	mov	r1, r5
 8004922:	4638      	mov	r0, r7
 8004924:	47c0      	blx	r8
 8004926:	4306      	orrs	r6, r0
 8004928:	3568      	adds	r5, #104	@ 0x68
 800492a:	e7e9      	b.n	8004900 <_fwalk_sglue+0x10>

0800492c <siprintf>:
 800492c:	b40e      	push	{r1, r2, r3}
 800492e:	b500      	push	{lr}
 8004930:	b09c      	sub	sp, #112	@ 0x70
 8004932:	ab1d      	add	r3, sp, #116	@ 0x74
 8004934:	9002      	str	r0, [sp, #8]
 8004936:	9006      	str	r0, [sp, #24]
 8004938:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800493c:	4809      	ldr	r0, [pc, #36]	@ (8004964 <siprintf+0x38>)
 800493e:	9107      	str	r1, [sp, #28]
 8004940:	9104      	str	r1, [sp, #16]
 8004942:	4909      	ldr	r1, [pc, #36]	@ (8004968 <siprintf+0x3c>)
 8004944:	f853 2b04 	ldr.w	r2, [r3], #4
 8004948:	9105      	str	r1, [sp, #20]
 800494a:	6800      	ldr	r0, [r0, #0]
 800494c:	9301      	str	r3, [sp, #4]
 800494e:	a902      	add	r1, sp, #8
 8004950:	f002 fb38 	bl	8006fc4 <_svfiprintf_r>
 8004954:	9b02      	ldr	r3, [sp, #8]
 8004956:	2200      	movs	r2, #0
 8004958:	701a      	strb	r2, [r3, #0]
 800495a:	b01c      	add	sp, #112	@ 0x70
 800495c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004960:	b003      	add	sp, #12
 8004962:	4770      	bx	lr
 8004964:	20000018 	.word	0x20000018
 8004968:	ffff0208 	.word	0xffff0208

0800496c <__sread>:
 800496c:	b510      	push	{r4, lr}
 800496e:	460c      	mov	r4, r1
 8004970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004974:	f000 f86c 	bl	8004a50 <_read_r>
 8004978:	2800      	cmp	r0, #0
 800497a:	bfab      	itete	ge
 800497c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800497e:	89a3      	ldrhlt	r3, [r4, #12]
 8004980:	181b      	addge	r3, r3, r0
 8004982:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004986:	bfac      	ite	ge
 8004988:	6563      	strge	r3, [r4, #84]	@ 0x54
 800498a:	81a3      	strhlt	r3, [r4, #12]
 800498c:	bd10      	pop	{r4, pc}

0800498e <__swrite>:
 800498e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004992:	461f      	mov	r7, r3
 8004994:	898b      	ldrh	r3, [r1, #12]
 8004996:	05db      	lsls	r3, r3, #23
 8004998:	4605      	mov	r5, r0
 800499a:	460c      	mov	r4, r1
 800499c:	4616      	mov	r6, r2
 800499e:	d505      	bpl.n	80049ac <__swrite+0x1e>
 80049a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049a4:	2302      	movs	r3, #2
 80049a6:	2200      	movs	r2, #0
 80049a8:	f000 f840 	bl	8004a2c <_lseek_r>
 80049ac:	89a3      	ldrh	r3, [r4, #12]
 80049ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049b6:	81a3      	strh	r3, [r4, #12]
 80049b8:	4632      	mov	r2, r6
 80049ba:	463b      	mov	r3, r7
 80049bc:	4628      	mov	r0, r5
 80049be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80049c2:	f000 b857 	b.w	8004a74 <_write_r>

080049c6 <__sseek>:
 80049c6:	b510      	push	{r4, lr}
 80049c8:	460c      	mov	r4, r1
 80049ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049ce:	f000 f82d 	bl	8004a2c <_lseek_r>
 80049d2:	1c43      	adds	r3, r0, #1
 80049d4:	89a3      	ldrh	r3, [r4, #12]
 80049d6:	bf15      	itete	ne
 80049d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80049da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80049de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80049e2:	81a3      	strheq	r3, [r4, #12]
 80049e4:	bf18      	it	ne
 80049e6:	81a3      	strhne	r3, [r4, #12]
 80049e8:	bd10      	pop	{r4, pc}

080049ea <__sclose>:
 80049ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80049ee:	f000 b80d 	b.w	8004a0c <_close_r>

080049f2 <memset>:
 80049f2:	4402      	add	r2, r0
 80049f4:	4603      	mov	r3, r0
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d100      	bne.n	80049fc <memset+0xa>
 80049fa:	4770      	bx	lr
 80049fc:	f803 1b01 	strb.w	r1, [r3], #1
 8004a00:	e7f9      	b.n	80049f6 <memset+0x4>
	...

08004a04 <_localeconv_r>:
 8004a04:	4800      	ldr	r0, [pc, #0]	@ (8004a08 <_localeconv_r+0x4>)
 8004a06:	4770      	bx	lr
 8004a08:	20000158 	.word	0x20000158

08004a0c <_close_r>:
 8004a0c:	b538      	push	{r3, r4, r5, lr}
 8004a0e:	4d06      	ldr	r5, [pc, #24]	@ (8004a28 <_close_r+0x1c>)
 8004a10:	2300      	movs	r3, #0
 8004a12:	4604      	mov	r4, r0
 8004a14:	4608      	mov	r0, r1
 8004a16:	602b      	str	r3, [r5, #0]
 8004a18:	f7fc ff56 	bl	80018c8 <_close>
 8004a1c:	1c43      	adds	r3, r0, #1
 8004a1e:	d102      	bne.n	8004a26 <_close_r+0x1a>
 8004a20:	682b      	ldr	r3, [r5, #0]
 8004a22:	b103      	cbz	r3, 8004a26 <_close_r+0x1a>
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	bd38      	pop	{r3, r4, r5, pc}
 8004a28:	20000500 	.word	0x20000500

08004a2c <_lseek_r>:
 8004a2c:	b538      	push	{r3, r4, r5, lr}
 8004a2e:	4d07      	ldr	r5, [pc, #28]	@ (8004a4c <_lseek_r+0x20>)
 8004a30:	4604      	mov	r4, r0
 8004a32:	4608      	mov	r0, r1
 8004a34:	4611      	mov	r1, r2
 8004a36:	2200      	movs	r2, #0
 8004a38:	602a      	str	r2, [r5, #0]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f7fc ff50 	bl	80018e0 <_lseek>
 8004a40:	1c43      	adds	r3, r0, #1
 8004a42:	d102      	bne.n	8004a4a <_lseek_r+0x1e>
 8004a44:	682b      	ldr	r3, [r5, #0]
 8004a46:	b103      	cbz	r3, 8004a4a <_lseek_r+0x1e>
 8004a48:	6023      	str	r3, [r4, #0]
 8004a4a:	bd38      	pop	{r3, r4, r5, pc}
 8004a4c:	20000500 	.word	0x20000500

08004a50 <_read_r>:
 8004a50:	b538      	push	{r3, r4, r5, lr}
 8004a52:	4d07      	ldr	r5, [pc, #28]	@ (8004a70 <_read_r+0x20>)
 8004a54:	4604      	mov	r4, r0
 8004a56:	4608      	mov	r0, r1
 8004a58:	4611      	mov	r1, r2
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	602a      	str	r2, [r5, #0]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	f7fc ff16 	bl	8001890 <_read>
 8004a64:	1c43      	adds	r3, r0, #1
 8004a66:	d102      	bne.n	8004a6e <_read_r+0x1e>
 8004a68:	682b      	ldr	r3, [r5, #0]
 8004a6a:	b103      	cbz	r3, 8004a6e <_read_r+0x1e>
 8004a6c:	6023      	str	r3, [r4, #0]
 8004a6e:	bd38      	pop	{r3, r4, r5, pc}
 8004a70:	20000500 	.word	0x20000500

08004a74 <_write_r>:
 8004a74:	b538      	push	{r3, r4, r5, lr}
 8004a76:	4d07      	ldr	r5, [pc, #28]	@ (8004a94 <_write_r+0x20>)
 8004a78:	4604      	mov	r4, r0
 8004a7a:	4608      	mov	r0, r1
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	2200      	movs	r2, #0
 8004a80:	602a      	str	r2, [r5, #0]
 8004a82:	461a      	mov	r2, r3
 8004a84:	f7fc ff12 	bl	80018ac <_write>
 8004a88:	1c43      	adds	r3, r0, #1
 8004a8a:	d102      	bne.n	8004a92 <_write_r+0x1e>
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	b103      	cbz	r3, 8004a92 <_write_r+0x1e>
 8004a90:	6023      	str	r3, [r4, #0]
 8004a92:	bd38      	pop	{r3, r4, r5, pc}
 8004a94:	20000500 	.word	0x20000500

08004a98 <__errno>:
 8004a98:	4b01      	ldr	r3, [pc, #4]	@ (8004aa0 <__errno+0x8>)
 8004a9a:	6818      	ldr	r0, [r3, #0]
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	20000018 	.word	0x20000018

08004aa4 <__libc_init_array>:
 8004aa4:	b570      	push	{r4, r5, r6, lr}
 8004aa6:	4d0d      	ldr	r5, [pc, #52]	@ (8004adc <__libc_init_array+0x38>)
 8004aa8:	4c0d      	ldr	r4, [pc, #52]	@ (8004ae0 <__libc_init_array+0x3c>)
 8004aaa:	1b64      	subs	r4, r4, r5
 8004aac:	10a4      	asrs	r4, r4, #2
 8004aae:	2600      	movs	r6, #0
 8004ab0:	42a6      	cmp	r6, r4
 8004ab2:	d109      	bne.n	8004ac8 <__libc_init_array+0x24>
 8004ab4:	4d0b      	ldr	r5, [pc, #44]	@ (8004ae4 <__libc_init_array+0x40>)
 8004ab6:	4c0c      	ldr	r4, [pc, #48]	@ (8004ae8 <__libc_init_array+0x44>)
 8004ab8:	f003 faf4 	bl	80080a4 <_init>
 8004abc:	1b64      	subs	r4, r4, r5
 8004abe:	10a4      	asrs	r4, r4, #2
 8004ac0:	2600      	movs	r6, #0
 8004ac2:	42a6      	cmp	r6, r4
 8004ac4:	d105      	bne.n	8004ad2 <__libc_init_array+0x2e>
 8004ac6:	bd70      	pop	{r4, r5, r6, pc}
 8004ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004acc:	4798      	blx	r3
 8004ace:	3601      	adds	r6, #1
 8004ad0:	e7ee      	b.n	8004ab0 <__libc_init_array+0xc>
 8004ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ad6:	4798      	blx	r3
 8004ad8:	3601      	adds	r6, #1
 8004ada:	e7f2      	b.n	8004ac2 <__libc_init_array+0x1e>
 8004adc:	0800d388 	.word	0x0800d388
 8004ae0:	0800d388 	.word	0x0800d388
 8004ae4:	0800d388 	.word	0x0800d388
 8004ae8:	0800d38c 	.word	0x0800d38c

08004aec <__retarget_lock_init_recursive>:
 8004aec:	4770      	bx	lr

08004aee <__retarget_lock_acquire_recursive>:
 8004aee:	4770      	bx	lr

08004af0 <__retarget_lock_release_recursive>:
 8004af0:	4770      	bx	lr
	...

08004af4 <nanf>:
 8004af4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004afc <nanf+0x8>
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	7fc00000 	.word	0x7fc00000

08004b00 <quorem>:
 8004b00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b04:	6903      	ldr	r3, [r0, #16]
 8004b06:	690c      	ldr	r4, [r1, #16]
 8004b08:	42a3      	cmp	r3, r4
 8004b0a:	4607      	mov	r7, r0
 8004b0c:	db7e      	blt.n	8004c0c <quorem+0x10c>
 8004b0e:	3c01      	subs	r4, #1
 8004b10:	f101 0814 	add.w	r8, r1, #20
 8004b14:	00a3      	lsls	r3, r4, #2
 8004b16:	f100 0514 	add.w	r5, r0, #20
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b20:	9301      	str	r3, [sp, #4]
 8004b22:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b32:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b36:	d32e      	bcc.n	8004b96 <quorem+0x96>
 8004b38:	f04f 0a00 	mov.w	sl, #0
 8004b3c:	46c4      	mov	ip, r8
 8004b3e:	46ae      	mov	lr, r5
 8004b40:	46d3      	mov	fp, sl
 8004b42:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004b46:	b298      	uxth	r0, r3
 8004b48:	fb06 a000 	mla	r0, r6, r0, sl
 8004b4c:	0c02      	lsrs	r2, r0, #16
 8004b4e:	0c1b      	lsrs	r3, r3, #16
 8004b50:	fb06 2303 	mla	r3, r6, r3, r2
 8004b54:	f8de 2000 	ldr.w	r2, [lr]
 8004b58:	b280      	uxth	r0, r0
 8004b5a:	b292      	uxth	r2, r2
 8004b5c:	1a12      	subs	r2, r2, r0
 8004b5e:	445a      	add	r2, fp
 8004b60:	f8de 0000 	ldr.w	r0, [lr]
 8004b64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004b6e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004b72:	b292      	uxth	r2, r2
 8004b74:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004b78:	45e1      	cmp	r9, ip
 8004b7a:	f84e 2b04 	str.w	r2, [lr], #4
 8004b7e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004b82:	d2de      	bcs.n	8004b42 <quorem+0x42>
 8004b84:	9b00      	ldr	r3, [sp, #0]
 8004b86:	58eb      	ldr	r3, [r5, r3]
 8004b88:	b92b      	cbnz	r3, 8004b96 <quorem+0x96>
 8004b8a:	9b01      	ldr	r3, [sp, #4]
 8004b8c:	3b04      	subs	r3, #4
 8004b8e:	429d      	cmp	r5, r3
 8004b90:	461a      	mov	r2, r3
 8004b92:	d32f      	bcc.n	8004bf4 <quorem+0xf4>
 8004b94:	613c      	str	r4, [r7, #16]
 8004b96:	4638      	mov	r0, r7
 8004b98:	f001 f9c2 	bl	8005f20 <__mcmp>
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	db25      	blt.n	8004bec <quorem+0xec>
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	f858 2b04 	ldr.w	r2, [r8], #4
 8004ba8:	f8d1 c000 	ldr.w	ip, [r1]
 8004bac:	fa1f fe82 	uxth.w	lr, r2
 8004bb0:	fa1f f38c 	uxth.w	r3, ip
 8004bb4:	eba3 030e 	sub.w	r3, r3, lr
 8004bb8:	4403      	add	r3, r0
 8004bba:	0c12      	lsrs	r2, r2, #16
 8004bbc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004bc0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bca:	45c1      	cmp	r9, r8
 8004bcc:	f841 3b04 	str.w	r3, [r1], #4
 8004bd0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004bd4:	d2e6      	bcs.n	8004ba4 <quorem+0xa4>
 8004bd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004bda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004bde:	b922      	cbnz	r2, 8004bea <quorem+0xea>
 8004be0:	3b04      	subs	r3, #4
 8004be2:	429d      	cmp	r5, r3
 8004be4:	461a      	mov	r2, r3
 8004be6:	d30b      	bcc.n	8004c00 <quorem+0x100>
 8004be8:	613c      	str	r4, [r7, #16]
 8004bea:	3601      	adds	r6, #1
 8004bec:	4630      	mov	r0, r6
 8004bee:	b003      	add	sp, #12
 8004bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bf4:	6812      	ldr	r2, [r2, #0]
 8004bf6:	3b04      	subs	r3, #4
 8004bf8:	2a00      	cmp	r2, #0
 8004bfa:	d1cb      	bne.n	8004b94 <quorem+0x94>
 8004bfc:	3c01      	subs	r4, #1
 8004bfe:	e7c6      	b.n	8004b8e <quorem+0x8e>
 8004c00:	6812      	ldr	r2, [r2, #0]
 8004c02:	3b04      	subs	r3, #4
 8004c04:	2a00      	cmp	r2, #0
 8004c06:	d1ef      	bne.n	8004be8 <quorem+0xe8>
 8004c08:	3c01      	subs	r4, #1
 8004c0a:	e7ea      	b.n	8004be2 <quorem+0xe2>
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	e7ee      	b.n	8004bee <quorem+0xee>

08004c10 <_dtoa_r>:
 8004c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c14:	69c7      	ldr	r7, [r0, #28]
 8004c16:	b099      	sub	sp, #100	@ 0x64
 8004c18:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004c1c:	ec55 4b10 	vmov	r4, r5, d0
 8004c20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8004c22:	9109      	str	r1, [sp, #36]	@ 0x24
 8004c24:	4683      	mov	fp, r0
 8004c26:	920e      	str	r2, [sp, #56]	@ 0x38
 8004c28:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004c2a:	b97f      	cbnz	r7, 8004c4c <_dtoa_r+0x3c>
 8004c2c:	2010      	movs	r0, #16
 8004c2e:	f000 fdfd 	bl	800582c <malloc>
 8004c32:	4602      	mov	r2, r0
 8004c34:	f8cb 001c 	str.w	r0, [fp, #28]
 8004c38:	b920      	cbnz	r0, 8004c44 <_dtoa_r+0x34>
 8004c3a:	4ba7      	ldr	r3, [pc, #668]	@ (8004ed8 <_dtoa_r+0x2c8>)
 8004c3c:	21ef      	movs	r1, #239	@ 0xef
 8004c3e:	48a7      	ldr	r0, [pc, #668]	@ (8004edc <_dtoa_r+0x2cc>)
 8004c40:	f002 fbba 	bl	80073b8 <__assert_func>
 8004c44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004c48:	6007      	str	r7, [r0, #0]
 8004c4a:	60c7      	str	r7, [r0, #12]
 8004c4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004c50:	6819      	ldr	r1, [r3, #0]
 8004c52:	b159      	cbz	r1, 8004c6c <_dtoa_r+0x5c>
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	604a      	str	r2, [r1, #4]
 8004c58:	2301      	movs	r3, #1
 8004c5a:	4093      	lsls	r3, r2
 8004c5c:	608b      	str	r3, [r1, #8]
 8004c5e:	4658      	mov	r0, fp
 8004c60:	f000 feda 	bl	8005a18 <_Bfree>
 8004c64:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]
 8004c6c:	1e2b      	subs	r3, r5, #0
 8004c6e:	bfb9      	ittee	lt
 8004c70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004c74:	9303      	strlt	r3, [sp, #12]
 8004c76:	2300      	movge	r3, #0
 8004c78:	6033      	strge	r3, [r6, #0]
 8004c7a:	9f03      	ldr	r7, [sp, #12]
 8004c7c:	4b98      	ldr	r3, [pc, #608]	@ (8004ee0 <_dtoa_r+0x2d0>)
 8004c7e:	bfbc      	itt	lt
 8004c80:	2201      	movlt	r2, #1
 8004c82:	6032      	strlt	r2, [r6, #0]
 8004c84:	43bb      	bics	r3, r7
 8004c86:	d112      	bne.n	8004cae <_dtoa_r+0x9e>
 8004c88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004c8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004c94:	4323      	orrs	r3, r4
 8004c96:	f000 854d 	beq.w	8005734 <_dtoa_r+0xb24>
 8004c9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004c9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004ef4 <_dtoa_r+0x2e4>
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 854f 	beq.w	8005744 <_dtoa_r+0xb34>
 8004ca6:	f10a 0303 	add.w	r3, sl, #3
 8004caa:	f000 bd49 	b.w	8005740 <_dtoa_r+0xb30>
 8004cae:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	ec51 0b17 	vmov	r0, r1, d7
 8004cb8:	2300      	movs	r3, #0
 8004cba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8004cbe:	f7fb ff0b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cc2:	4680      	mov	r8, r0
 8004cc4:	b158      	cbz	r0, 8004cde <_dtoa_r+0xce>
 8004cc6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004cc8:	2301      	movs	r3, #1
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8004cce:	b113      	cbz	r3, 8004cd6 <_dtoa_r+0xc6>
 8004cd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8004cd2:	4b84      	ldr	r3, [pc, #528]	@ (8004ee4 <_dtoa_r+0x2d4>)
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8004ef8 <_dtoa_r+0x2e8>
 8004cda:	f000 bd33 	b.w	8005744 <_dtoa_r+0xb34>
 8004cde:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8004ce2:	aa16      	add	r2, sp, #88	@ 0x58
 8004ce4:	a917      	add	r1, sp, #92	@ 0x5c
 8004ce6:	4658      	mov	r0, fp
 8004ce8:	f001 fa3a 	bl	8006160 <__d2b>
 8004cec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004cf0:	4681      	mov	r9, r0
 8004cf2:	2e00      	cmp	r6, #0
 8004cf4:	d077      	beq.n	8004de6 <_dtoa_r+0x1d6>
 8004cf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004cf8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8004cfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004d08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004d0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004d10:	4619      	mov	r1, r3
 8004d12:	2200      	movs	r2, #0
 8004d14:	4b74      	ldr	r3, [pc, #464]	@ (8004ee8 <_dtoa_r+0x2d8>)
 8004d16:	f7fb fabf 	bl	8000298 <__aeabi_dsub>
 8004d1a:	a369      	add	r3, pc, #420	@ (adr r3, 8004ec0 <_dtoa_r+0x2b0>)
 8004d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d20:	f7fb fc72 	bl	8000608 <__aeabi_dmul>
 8004d24:	a368      	add	r3, pc, #416	@ (adr r3, 8004ec8 <_dtoa_r+0x2b8>)
 8004d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2a:	f7fb fab7 	bl	800029c <__adddf3>
 8004d2e:	4604      	mov	r4, r0
 8004d30:	4630      	mov	r0, r6
 8004d32:	460d      	mov	r5, r1
 8004d34:	f7fb fbfe 	bl	8000534 <__aeabi_i2d>
 8004d38:	a365      	add	r3, pc, #404	@ (adr r3, 8004ed0 <_dtoa_r+0x2c0>)
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	f7fb fc63 	bl	8000608 <__aeabi_dmul>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4620      	mov	r0, r4
 8004d48:	4629      	mov	r1, r5
 8004d4a:	f7fb faa7 	bl	800029c <__adddf3>
 8004d4e:	4604      	mov	r4, r0
 8004d50:	460d      	mov	r5, r1
 8004d52:	f7fb ff09 	bl	8000b68 <__aeabi_d2iz>
 8004d56:	2200      	movs	r2, #0
 8004d58:	4607      	mov	r7, r0
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	4620      	mov	r0, r4
 8004d5e:	4629      	mov	r1, r5
 8004d60:	f7fb fec4 	bl	8000aec <__aeabi_dcmplt>
 8004d64:	b140      	cbz	r0, 8004d78 <_dtoa_r+0x168>
 8004d66:	4638      	mov	r0, r7
 8004d68:	f7fb fbe4 	bl	8000534 <__aeabi_i2d>
 8004d6c:	4622      	mov	r2, r4
 8004d6e:	462b      	mov	r3, r5
 8004d70:	f7fb feb2 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d74:	b900      	cbnz	r0, 8004d78 <_dtoa_r+0x168>
 8004d76:	3f01      	subs	r7, #1
 8004d78:	2f16      	cmp	r7, #22
 8004d7a:	d851      	bhi.n	8004e20 <_dtoa_r+0x210>
 8004d7c:	4b5b      	ldr	r3, [pc, #364]	@ (8004eec <_dtoa_r+0x2dc>)
 8004d7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004d8a:	f7fb feaf 	bl	8000aec <__aeabi_dcmplt>
 8004d8e:	2800      	cmp	r0, #0
 8004d90:	d048      	beq.n	8004e24 <_dtoa_r+0x214>
 8004d92:	3f01      	subs	r7, #1
 8004d94:	2300      	movs	r3, #0
 8004d96:	9312      	str	r3, [sp, #72]	@ 0x48
 8004d98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004d9a:	1b9b      	subs	r3, r3, r6
 8004d9c:	1e5a      	subs	r2, r3, #1
 8004d9e:	bf44      	itt	mi
 8004da0:	f1c3 0801 	rsbmi	r8, r3, #1
 8004da4:	2300      	movmi	r3, #0
 8004da6:	9208      	str	r2, [sp, #32]
 8004da8:	bf54      	ite	pl
 8004daa:	f04f 0800 	movpl.w	r8, #0
 8004dae:	9308      	strmi	r3, [sp, #32]
 8004db0:	2f00      	cmp	r7, #0
 8004db2:	db39      	blt.n	8004e28 <_dtoa_r+0x218>
 8004db4:	9b08      	ldr	r3, [sp, #32]
 8004db6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8004db8:	443b      	add	r3, r7
 8004dba:	9308      	str	r3, [sp, #32]
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8004dc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dc2:	2b09      	cmp	r3, #9
 8004dc4:	d864      	bhi.n	8004e90 <_dtoa_r+0x280>
 8004dc6:	2b05      	cmp	r3, #5
 8004dc8:	bfc4      	itt	gt
 8004dca:	3b04      	subgt	r3, #4
 8004dcc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8004dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dd0:	f1a3 0302 	sub.w	r3, r3, #2
 8004dd4:	bfcc      	ite	gt
 8004dd6:	2400      	movgt	r4, #0
 8004dd8:	2401      	movle	r4, #1
 8004dda:	2b03      	cmp	r3, #3
 8004ddc:	d863      	bhi.n	8004ea6 <_dtoa_r+0x296>
 8004dde:	e8df f003 	tbb	[pc, r3]
 8004de2:	372a      	.short	0x372a
 8004de4:	5535      	.short	0x5535
 8004de6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8004dea:	441e      	add	r6, r3
 8004dec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004df0:	2b20      	cmp	r3, #32
 8004df2:	bfc1      	itttt	gt
 8004df4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004df8:	409f      	lslgt	r7, r3
 8004dfa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004dfe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004e02:	bfd6      	itet	le
 8004e04:	f1c3 0320 	rsble	r3, r3, #32
 8004e08:	ea47 0003 	orrgt.w	r0, r7, r3
 8004e0c:	fa04 f003 	lslle.w	r0, r4, r3
 8004e10:	f7fb fb80 	bl	8000514 <__aeabi_ui2d>
 8004e14:	2201      	movs	r2, #1
 8004e16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004e1a:	3e01      	subs	r6, #1
 8004e1c:	9214      	str	r2, [sp, #80]	@ 0x50
 8004e1e:	e777      	b.n	8004d10 <_dtoa_r+0x100>
 8004e20:	2301      	movs	r3, #1
 8004e22:	e7b8      	b.n	8004d96 <_dtoa_r+0x186>
 8004e24:	9012      	str	r0, [sp, #72]	@ 0x48
 8004e26:	e7b7      	b.n	8004d98 <_dtoa_r+0x188>
 8004e28:	427b      	negs	r3, r7
 8004e2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	eba8 0807 	sub.w	r8, r8, r7
 8004e32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004e34:	e7c4      	b.n	8004dc0 <_dtoa_r+0x1b0>
 8004e36:	2300      	movs	r3, #0
 8004e38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	dc35      	bgt.n	8004eac <_dtoa_r+0x29c>
 8004e40:	2301      	movs	r3, #1
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	9307      	str	r3, [sp, #28]
 8004e46:	461a      	mov	r2, r3
 8004e48:	920e      	str	r2, [sp, #56]	@ 0x38
 8004e4a:	e00b      	b.n	8004e64 <_dtoa_r+0x254>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e7f3      	b.n	8004e38 <_dtoa_r+0x228>
 8004e50:	2300      	movs	r3, #0
 8004e52:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004e56:	18fb      	adds	r3, r7, r3
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	9307      	str	r3, [sp, #28]
 8004e60:	bfb8      	it	lt
 8004e62:	2301      	movlt	r3, #1
 8004e64:	f8db 001c 	ldr.w	r0, [fp, #28]
 8004e68:	2100      	movs	r1, #0
 8004e6a:	2204      	movs	r2, #4
 8004e6c:	f102 0514 	add.w	r5, r2, #20
 8004e70:	429d      	cmp	r5, r3
 8004e72:	d91f      	bls.n	8004eb4 <_dtoa_r+0x2a4>
 8004e74:	6041      	str	r1, [r0, #4]
 8004e76:	4658      	mov	r0, fp
 8004e78:	f000 fd8e 	bl	8005998 <_Balloc>
 8004e7c:	4682      	mov	sl, r0
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	d13c      	bne.n	8004efc <_dtoa_r+0x2ec>
 8004e82:	4b1b      	ldr	r3, [pc, #108]	@ (8004ef0 <_dtoa_r+0x2e0>)
 8004e84:	4602      	mov	r2, r0
 8004e86:	f240 11af 	movw	r1, #431	@ 0x1af
 8004e8a:	e6d8      	b.n	8004c3e <_dtoa_r+0x2e>
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e7e0      	b.n	8004e52 <_dtoa_r+0x242>
 8004e90:	2401      	movs	r4, #1
 8004e92:	2300      	movs	r3, #0
 8004e94:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e96:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004e98:	f04f 33ff 	mov.w	r3, #4294967295
 8004e9c:	9300      	str	r3, [sp, #0]
 8004e9e:	9307      	str	r3, [sp, #28]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	2312      	movs	r3, #18
 8004ea4:	e7d0      	b.n	8004e48 <_dtoa_r+0x238>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004eaa:	e7f5      	b.n	8004e98 <_dtoa_r+0x288>
 8004eac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	9307      	str	r3, [sp, #28]
 8004eb2:	e7d7      	b.n	8004e64 <_dtoa_r+0x254>
 8004eb4:	3101      	adds	r1, #1
 8004eb6:	0052      	lsls	r2, r2, #1
 8004eb8:	e7d8      	b.n	8004e6c <_dtoa_r+0x25c>
 8004eba:	bf00      	nop
 8004ebc:	f3af 8000 	nop.w
 8004ec0:	636f4361 	.word	0x636f4361
 8004ec4:	3fd287a7 	.word	0x3fd287a7
 8004ec8:	8b60c8b3 	.word	0x8b60c8b3
 8004ecc:	3fc68a28 	.word	0x3fc68a28
 8004ed0:	509f79fb 	.word	0x509f79fb
 8004ed4:	3fd34413 	.word	0x3fd34413
 8004ed8:	0800d097 	.word	0x0800d097
 8004edc:	0800d0ae 	.word	0x0800d0ae
 8004ee0:	7ff00000 	.word	0x7ff00000
 8004ee4:	0800d062 	.word	0x0800d062
 8004ee8:	3ff80000 	.word	0x3ff80000
 8004eec:	0800d1a8 	.word	0x0800d1a8
 8004ef0:	0800d106 	.word	0x0800d106
 8004ef4:	0800d093 	.word	0x0800d093
 8004ef8:	0800d061 	.word	0x0800d061
 8004efc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8004f00:	6018      	str	r0, [r3, #0]
 8004f02:	9b07      	ldr	r3, [sp, #28]
 8004f04:	2b0e      	cmp	r3, #14
 8004f06:	f200 80a4 	bhi.w	8005052 <_dtoa_r+0x442>
 8004f0a:	2c00      	cmp	r4, #0
 8004f0c:	f000 80a1 	beq.w	8005052 <_dtoa_r+0x442>
 8004f10:	2f00      	cmp	r7, #0
 8004f12:	dd33      	ble.n	8004f7c <_dtoa_r+0x36c>
 8004f14:	4bad      	ldr	r3, [pc, #692]	@ (80051cc <_dtoa_r+0x5bc>)
 8004f16:	f007 020f 	and.w	r2, r7, #15
 8004f1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f1e:	ed93 7b00 	vldr	d7, [r3]
 8004f22:	05f8      	lsls	r0, r7, #23
 8004f24:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004f28:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004f2c:	d516      	bpl.n	8004f5c <_dtoa_r+0x34c>
 8004f2e:	4ba8      	ldr	r3, [pc, #672]	@ (80051d0 <_dtoa_r+0x5c0>)
 8004f30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004f38:	f7fb fc90 	bl	800085c <__aeabi_ddiv>
 8004f3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f40:	f004 040f 	and.w	r4, r4, #15
 8004f44:	2603      	movs	r6, #3
 8004f46:	4da2      	ldr	r5, [pc, #648]	@ (80051d0 <_dtoa_r+0x5c0>)
 8004f48:	b954      	cbnz	r4, 8004f60 <_dtoa_r+0x350>
 8004f4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f52:	f7fb fc83 	bl	800085c <__aeabi_ddiv>
 8004f56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f5a:	e028      	b.n	8004fae <_dtoa_r+0x39e>
 8004f5c:	2602      	movs	r6, #2
 8004f5e:	e7f2      	b.n	8004f46 <_dtoa_r+0x336>
 8004f60:	07e1      	lsls	r1, r4, #31
 8004f62:	d508      	bpl.n	8004f76 <_dtoa_r+0x366>
 8004f64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004f6c:	f7fb fb4c 	bl	8000608 <__aeabi_dmul>
 8004f70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f74:	3601      	adds	r6, #1
 8004f76:	1064      	asrs	r4, r4, #1
 8004f78:	3508      	adds	r5, #8
 8004f7a:	e7e5      	b.n	8004f48 <_dtoa_r+0x338>
 8004f7c:	f000 80d2 	beq.w	8005124 <_dtoa_r+0x514>
 8004f80:	427c      	negs	r4, r7
 8004f82:	4b92      	ldr	r3, [pc, #584]	@ (80051cc <_dtoa_r+0x5bc>)
 8004f84:	4d92      	ldr	r5, [pc, #584]	@ (80051d0 <_dtoa_r+0x5c0>)
 8004f86:	f004 020f 	and.w	r2, r4, #15
 8004f8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004f96:	f7fb fb37 	bl	8000608 <__aeabi_dmul>
 8004f9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f9e:	1124      	asrs	r4, r4, #4
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	2602      	movs	r6, #2
 8004fa4:	2c00      	cmp	r4, #0
 8004fa6:	f040 80b2 	bne.w	800510e <_dtoa_r+0x4fe>
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1d3      	bne.n	8004f56 <_dtoa_r+0x346>
 8004fae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004fb0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 80b7 	beq.w	8005128 <_dtoa_r+0x518>
 8004fba:	4b86      	ldr	r3, [pc, #536]	@ (80051d4 <_dtoa_r+0x5c4>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	4629      	mov	r1, r5
 8004fc2:	f7fb fd93 	bl	8000aec <__aeabi_dcmplt>
 8004fc6:	2800      	cmp	r0, #0
 8004fc8:	f000 80ae 	beq.w	8005128 <_dtoa_r+0x518>
 8004fcc:	9b07      	ldr	r3, [sp, #28]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	f000 80aa 	beq.w	8005128 <_dtoa_r+0x518>
 8004fd4:	9b00      	ldr	r3, [sp, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	dd37      	ble.n	800504a <_dtoa_r+0x43a>
 8004fda:	1e7b      	subs	r3, r7, #1
 8004fdc:	9304      	str	r3, [sp, #16]
 8004fde:	4620      	mov	r0, r4
 8004fe0:	4b7d      	ldr	r3, [pc, #500]	@ (80051d8 <_dtoa_r+0x5c8>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	f7fb fb0f 	bl	8000608 <__aeabi_dmul>
 8004fea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fee:	9c00      	ldr	r4, [sp, #0]
 8004ff0:	3601      	adds	r6, #1
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	f7fb fa9e 	bl	8000534 <__aeabi_i2d>
 8004ff8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ffc:	f7fb fb04 	bl	8000608 <__aeabi_dmul>
 8005000:	4b76      	ldr	r3, [pc, #472]	@ (80051dc <_dtoa_r+0x5cc>)
 8005002:	2200      	movs	r2, #0
 8005004:	f7fb f94a 	bl	800029c <__adddf3>
 8005008:	4605      	mov	r5, r0
 800500a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800500e:	2c00      	cmp	r4, #0
 8005010:	f040 808d 	bne.w	800512e <_dtoa_r+0x51e>
 8005014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005018:	4b71      	ldr	r3, [pc, #452]	@ (80051e0 <_dtoa_r+0x5d0>)
 800501a:	2200      	movs	r2, #0
 800501c:	f7fb f93c 	bl	8000298 <__aeabi_dsub>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005028:	462a      	mov	r2, r5
 800502a:	4633      	mov	r3, r6
 800502c:	f7fb fd7c 	bl	8000b28 <__aeabi_dcmpgt>
 8005030:	2800      	cmp	r0, #0
 8005032:	f040 828b 	bne.w	800554c <_dtoa_r+0x93c>
 8005036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800503a:	462a      	mov	r2, r5
 800503c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005040:	f7fb fd54 	bl	8000aec <__aeabi_dcmplt>
 8005044:	2800      	cmp	r0, #0
 8005046:	f040 8128 	bne.w	800529a <_dtoa_r+0x68a>
 800504a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800504e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005052:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005054:	2b00      	cmp	r3, #0
 8005056:	f2c0 815a 	blt.w	800530e <_dtoa_r+0x6fe>
 800505a:	2f0e      	cmp	r7, #14
 800505c:	f300 8157 	bgt.w	800530e <_dtoa_r+0x6fe>
 8005060:	4b5a      	ldr	r3, [pc, #360]	@ (80051cc <_dtoa_r+0x5bc>)
 8005062:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005066:	ed93 7b00 	vldr	d7, [r3]
 800506a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800506c:	2b00      	cmp	r3, #0
 800506e:	ed8d 7b00 	vstr	d7, [sp]
 8005072:	da03      	bge.n	800507c <_dtoa_r+0x46c>
 8005074:	9b07      	ldr	r3, [sp, #28]
 8005076:	2b00      	cmp	r3, #0
 8005078:	f340 8101 	ble.w	800527e <_dtoa_r+0x66e>
 800507c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005080:	4656      	mov	r6, sl
 8005082:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005086:	4620      	mov	r0, r4
 8005088:	4629      	mov	r1, r5
 800508a:	f7fb fbe7 	bl	800085c <__aeabi_ddiv>
 800508e:	f7fb fd6b 	bl	8000b68 <__aeabi_d2iz>
 8005092:	4680      	mov	r8, r0
 8005094:	f7fb fa4e 	bl	8000534 <__aeabi_i2d>
 8005098:	e9dd 2300 	ldrd	r2, r3, [sp]
 800509c:	f7fb fab4 	bl	8000608 <__aeabi_dmul>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4620      	mov	r0, r4
 80050a6:	4629      	mov	r1, r5
 80050a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80050ac:	f7fb f8f4 	bl	8000298 <__aeabi_dsub>
 80050b0:	f806 4b01 	strb.w	r4, [r6], #1
 80050b4:	9d07      	ldr	r5, [sp, #28]
 80050b6:	eba6 040a 	sub.w	r4, r6, sl
 80050ba:	42a5      	cmp	r5, r4
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	f040 8117 	bne.w	80052f2 <_dtoa_r+0x6e2>
 80050c4:	f7fb f8ea 	bl	800029c <__adddf3>
 80050c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050cc:	4604      	mov	r4, r0
 80050ce:	460d      	mov	r5, r1
 80050d0:	f7fb fd2a 	bl	8000b28 <__aeabi_dcmpgt>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	f040 80f9 	bne.w	80052cc <_dtoa_r+0x6bc>
 80050da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050de:	4620      	mov	r0, r4
 80050e0:	4629      	mov	r1, r5
 80050e2:	f7fb fcf9 	bl	8000ad8 <__aeabi_dcmpeq>
 80050e6:	b118      	cbz	r0, 80050f0 <_dtoa_r+0x4e0>
 80050e8:	f018 0f01 	tst.w	r8, #1
 80050ec:	f040 80ee 	bne.w	80052cc <_dtoa_r+0x6bc>
 80050f0:	4649      	mov	r1, r9
 80050f2:	4658      	mov	r0, fp
 80050f4:	f000 fc90 	bl	8005a18 <_Bfree>
 80050f8:	2300      	movs	r3, #0
 80050fa:	7033      	strb	r3, [r6, #0]
 80050fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80050fe:	3701      	adds	r7, #1
 8005100:	601f      	str	r7, [r3, #0]
 8005102:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 831d 	beq.w	8005744 <_dtoa_r+0xb34>
 800510a:	601e      	str	r6, [r3, #0]
 800510c:	e31a      	b.n	8005744 <_dtoa_r+0xb34>
 800510e:	07e2      	lsls	r2, r4, #31
 8005110:	d505      	bpl.n	800511e <_dtoa_r+0x50e>
 8005112:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005116:	f7fb fa77 	bl	8000608 <__aeabi_dmul>
 800511a:	3601      	adds	r6, #1
 800511c:	2301      	movs	r3, #1
 800511e:	1064      	asrs	r4, r4, #1
 8005120:	3508      	adds	r5, #8
 8005122:	e73f      	b.n	8004fa4 <_dtoa_r+0x394>
 8005124:	2602      	movs	r6, #2
 8005126:	e742      	b.n	8004fae <_dtoa_r+0x39e>
 8005128:	9c07      	ldr	r4, [sp, #28]
 800512a:	9704      	str	r7, [sp, #16]
 800512c:	e761      	b.n	8004ff2 <_dtoa_r+0x3e2>
 800512e:	4b27      	ldr	r3, [pc, #156]	@ (80051cc <_dtoa_r+0x5bc>)
 8005130:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005132:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005136:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800513a:	4454      	add	r4, sl
 800513c:	2900      	cmp	r1, #0
 800513e:	d053      	beq.n	80051e8 <_dtoa_r+0x5d8>
 8005140:	4928      	ldr	r1, [pc, #160]	@ (80051e4 <_dtoa_r+0x5d4>)
 8005142:	2000      	movs	r0, #0
 8005144:	f7fb fb8a 	bl	800085c <__aeabi_ddiv>
 8005148:	4633      	mov	r3, r6
 800514a:	462a      	mov	r2, r5
 800514c:	f7fb f8a4 	bl	8000298 <__aeabi_dsub>
 8005150:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005154:	4656      	mov	r6, sl
 8005156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800515a:	f7fb fd05 	bl	8000b68 <__aeabi_d2iz>
 800515e:	4605      	mov	r5, r0
 8005160:	f7fb f9e8 	bl	8000534 <__aeabi_i2d>
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800516c:	f7fb f894 	bl	8000298 <__aeabi_dsub>
 8005170:	3530      	adds	r5, #48	@ 0x30
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800517a:	f806 5b01 	strb.w	r5, [r6], #1
 800517e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005182:	f7fb fcb3 	bl	8000aec <__aeabi_dcmplt>
 8005186:	2800      	cmp	r0, #0
 8005188:	d171      	bne.n	800526e <_dtoa_r+0x65e>
 800518a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800518e:	4911      	ldr	r1, [pc, #68]	@ (80051d4 <_dtoa_r+0x5c4>)
 8005190:	2000      	movs	r0, #0
 8005192:	f7fb f881 	bl	8000298 <__aeabi_dsub>
 8005196:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800519a:	f7fb fca7 	bl	8000aec <__aeabi_dcmplt>
 800519e:	2800      	cmp	r0, #0
 80051a0:	f040 8095 	bne.w	80052ce <_dtoa_r+0x6be>
 80051a4:	42a6      	cmp	r6, r4
 80051a6:	f43f af50 	beq.w	800504a <_dtoa_r+0x43a>
 80051aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80051ae:	4b0a      	ldr	r3, [pc, #40]	@ (80051d8 <_dtoa_r+0x5c8>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	f7fb fa29 	bl	8000608 <__aeabi_dmul>
 80051b6:	4b08      	ldr	r3, [pc, #32]	@ (80051d8 <_dtoa_r+0x5c8>)
 80051b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80051bc:	2200      	movs	r2, #0
 80051be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051c2:	f7fb fa21 	bl	8000608 <__aeabi_dmul>
 80051c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051ca:	e7c4      	b.n	8005156 <_dtoa_r+0x546>
 80051cc:	0800d1a8 	.word	0x0800d1a8
 80051d0:	0800d180 	.word	0x0800d180
 80051d4:	3ff00000 	.word	0x3ff00000
 80051d8:	40240000 	.word	0x40240000
 80051dc:	401c0000 	.word	0x401c0000
 80051e0:	40140000 	.word	0x40140000
 80051e4:	3fe00000 	.word	0x3fe00000
 80051e8:	4631      	mov	r1, r6
 80051ea:	4628      	mov	r0, r5
 80051ec:	f7fb fa0c 	bl	8000608 <__aeabi_dmul>
 80051f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80051f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80051f6:	4656      	mov	r6, sl
 80051f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051fc:	f7fb fcb4 	bl	8000b68 <__aeabi_d2iz>
 8005200:	4605      	mov	r5, r0
 8005202:	f7fb f997 	bl	8000534 <__aeabi_i2d>
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800520e:	f7fb f843 	bl	8000298 <__aeabi_dsub>
 8005212:	3530      	adds	r5, #48	@ 0x30
 8005214:	f806 5b01 	strb.w	r5, [r6], #1
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	42a6      	cmp	r6, r4
 800521e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005222:	f04f 0200 	mov.w	r2, #0
 8005226:	d124      	bne.n	8005272 <_dtoa_r+0x662>
 8005228:	4bac      	ldr	r3, [pc, #688]	@ (80054dc <_dtoa_r+0x8cc>)
 800522a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800522e:	f7fb f835 	bl	800029c <__adddf3>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800523a:	f7fb fc75 	bl	8000b28 <__aeabi_dcmpgt>
 800523e:	2800      	cmp	r0, #0
 8005240:	d145      	bne.n	80052ce <_dtoa_r+0x6be>
 8005242:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005246:	49a5      	ldr	r1, [pc, #660]	@ (80054dc <_dtoa_r+0x8cc>)
 8005248:	2000      	movs	r0, #0
 800524a:	f7fb f825 	bl	8000298 <__aeabi_dsub>
 800524e:	4602      	mov	r2, r0
 8005250:	460b      	mov	r3, r1
 8005252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005256:	f7fb fc49 	bl	8000aec <__aeabi_dcmplt>
 800525a:	2800      	cmp	r0, #0
 800525c:	f43f aef5 	beq.w	800504a <_dtoa_r+0x43a>
 8005260:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005262:	1e73      	subs	r3, r6, #1
 8005264:	9315      	str	r3, [sp, #84]	@ 0x54
 8005266:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800526a:	2b30      	cmp	r3, #48	@ 0x30
 800526c:	d0f8      	beq.n	8005260 <_dtoa_r+0x650>
 800526e:	9f04      	ldr	r7, [sp, #16]
 8005270:	e73e      	b.n	80050f0 <_dtoa_r+0x4e0>
 8005272:	4b9b      	ldr	r3, [pc, #620]	@ (80054e0 <_dtoa_r+0x8d0>)
 8005274:	f7fb f9c8 	bl	8000608 <__aeabi_dmul>
 8005278:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800527c:	e7bc      	b.n	80051f8 <_dtoa_r+0x5e8>
 800527e:	d10c      	bne.n	800529a <_dtoa_r+0x68a>
 8005280:	4b98      	ldr	r3, [pc, #608]	@ (80054e4 <_dtoa_r+0x8d4>)
 8005282:	2200      	movs	r2, #0
 8005284:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005288:	f7fb f9be 	bl	8000608 <__aeabi_dmul>
 800528c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005290:	f7fb fc40 	bl	8000b14 <__aeabi_dcmpge>
 8005294:	2800      	cmp	r0, #0
 8005296:	f000 8157 	beq.w	8005548 <_dtoa_r+0x938>
 800529a:	2400      	movs	r4, #0
 800529c:	4625      	mov	r5, r4
 800529e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80052a0:	43db      	mvns	r3, r3
 80052a2:	9304      	str	r3, [sp, #16]
 80052a4:	4656      	mov	r6, sl
 80052a6:	2700      	movs	r7, #0
 80052a8:	4621      	mov	r1, r4
 80052aa:	4658      	mov	r0, fp
 80052ac:	f000 fbb4 	bl	8005a18 <_Bfree>
 80052b0:	2d00      	cmp	r5, #0
 80052b2:	d0dc      	beq.n	800526e <_dtoa_r+0x65e>
 80052b4:	b12f      	cbz	r7, 80052c2 <_dtoa_r+0x6b2>
 80052b6:	42af      	cmp	r7, r5
 80052b8:	d003      	beq.n	80052c2 <_dtoa_r+0x6b2>
 80052ba:	4639      	mov	r1, r7
 80052bc:	4658      	mov	r0, fp
 80052be:	f000 fbab 	bl	8005a18 <_Bfree>
 80052c2:	4629      	mov	r1, r5
 80052c4:	4658      	mov	r0, fp
 80052c6:	f000 fba7 	bl	8005a18 <_Bfree>
 80052ca:	e7d0      	b.n	800526e <_dtoa_r+0x65e>
 80052cc:	9704      	str	r7, [sp, #16]
 80052ce:	4633      	mov	r3, r6
 80052d0:	461e      	mov	r6, r3
 80052d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052d6:	2a39      	cmp	r2, #57	@ 0x39
 80052d8:	d107      	bne.n	80052ea <_dtoa_r+0x6da>
 80052da:	459a      	cmp	sl, r3
 80052dc:	d1f8      	bne.n	80052d0 <_dtoa_r+0x6c0>
 80052de:	9a04      	ldr	r2, [sp, #16]
 80052e0:	3201      	adds	r2, #1
 80052e2:	9204      	str	r2, [sp, #16]
 80052e4:	2230      	movs	r2, #48	@ 0x30
 80052e6:	f88a 2000 	strb.w	r2, [sl]
 80052ea:	781a      	ldrb	r2, [r3, #0]
 80052ec:	3201      	adds	r2, #1
 80052ee:	701a      	strb	r2, [r3, #0]
 80052f0:	e7bd      	b.n	800526e <_dtoa_r+0x65e>
 80052f2:	4b7b      	ldr	r3, [pc, #492]	@ (80054e0 <_dtoa_r+0x8d0>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	f7fb f987 	bl	8000608 <__aeabi_dmul>
 80052fa:	2200      	movs	r2, #0
 80052fc:	2300      	movs	r3, #0
 80052fe:	4604      	mov	r4, r0
 8005300:	460d      	mov	r5, r1
 8005302:	f7fb fbe9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005306:	2800      	cmp	r0, #0
 8005308:	f43f aebb 	beq.w	8005082 <_dtoa_r+0x472>
 800530c:	e6f0      	b.n	80050f0 <_dtoa_r+0x4e0>
 800530e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005310:	2a00      	cmp	r2, #0
 8005312:	f000 80db 	beq.w	80054cc <_dtoa_r+0x8bc>
 8005316:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005318:	2a01      	cmp	r2, #1
 800531a:	f300 80bf 	bgt.w	800549c <_dtoa_r+0x88c>
 800531e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005320:	2a00      	cmp	r2, #0
 8005322:	f000 80b7 	beq.w	8005494 <_dtoa_r+0x884>
 8005326:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800532a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800532c:	4646      	mov	r6, r8
 800532e:	9a08      	ldr	r2, [sp, #32]
 8005330:	2101      	movs	r1, #1
 8005332:	441a      	add	r2, r3
 8005334:	4658      	mov	r0, fp
 8005336:	4498      	add	r8, r3
 8005338:	9208      	str	r2, [sp, #32]
 800533a:	f000 fc6b 	bl	8005c14 <__i2b>
 800533e:	4605      	mov	r5, r0
 8005340:	b15e      	cbz	r6, 800535a <_dtoa_r+0x74a>
 8005342:	9b08      	ldr	r3, [sp, #32]
 8005344:	2b00      	cmp	r3, #0
 8005346:	dd08      	ble.n	800535a <_dtoa_r+0x74a>
 8005348:	42b3      	cmp	r3, r6
 800534a:	9a08      	ldr	r2, [sp, #32]
 800534c:	bfa8      	it	ge
 800534e:	4633      	movge	r3, r6
 8005350:	eba8 0803 	sub.w	r8, r8, r3
 8005354:	1af6      	subs	r6, r6, r3
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	9308      	str	r3, [sp, #32]
 800535a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800535c:	b1f3      	cbz	r3, 800539c <_dtoa_r+0x78c>
 800535e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 80b7 	beq.w	80054d4 <_dtoa_r+0x8c4>
 8005366:	b18c      	cbz	r4, 800538c <_dtoa_r+0x77c>
 8005368:	4629      	mov	r1, r5
 800536a:	4622      	mov	r2, r4
 800536c:	4658      	mov	r0, fp
 800536e:	f000 fd11 	bl	8005d94 <__pow5mult>
 8005372:	464a      	mov	r2, r9
 8005374:	4601      	mov	r1, r0
 8005376:	4605      	mov	r5, r0
 8005378:	4658      	mov	r0, fp
 800537a:	f000 fc61 	bl	8005c40 <__multiply>
 800537e:	4649      	mov	r1, r9
 8005380:	9004      	str	r0, [sp, #16]
 8005382:	4658      	mov	r0, fp
 8005384:	f000 fb48 	bl	8005a18 <_Bfree>
 8005388:	9b04      	ldr	r3, [sp, #16]
 800538a:	4699      	mov	r9, r3
 800538c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800538e:	1b1a      	subs	r2, r3, r4
 8005390:	d004      	beq.n	800539c <_dtoa_r+0x78c>
 8005392:	4649      	mov	r1, r9
 8005394:	4658      	mov	r0, fp
 8005396:	f000 fcfd 	bl	8005d94 <__pow5mult>
 800539a:	4681      	mov	r9, r0
 800539c:	2101      	movs	r1, #1
 800539e:	4658      	mov	r0, fp
 80053a0:	f000 fc38 	bl	8005c14 <__i2b>
 80053a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053a6:	4604      	mov	r4, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 81cf 	beq.w	800574c <_dtoa_r+0xb3c>
 80053ae:	461a      	mov	r2, r3
 80053b0:	4601      	mov	r1, r0
 80053b2:	4658      	mov	r0, fp
 80053b4:	f000 fcee 	bl	8005d94 <__pow5mult>
 80053b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	4604      	mov	r4, r0
 80053be:	f300 8095 	bgt.w	80054ec <_dtoa_r+0x8dc>
 80053c2:	9b02      	ldr	r3, [sp, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f040 8087 	bne.w	80054d8 <_dtoa_r+0x8c8>
 80053ca:	9b03      	ldr	r3, [sp, #12]
 80053cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f040 8089 	bne.w	80054e8 <_dtoa_r+0x8d8>
 80053d6:	9b03      	ldr	r3, [sp, #12]
 80053d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80053dc:	0d1b      	lsrs	r3, r3, #20
 80053de:	051b      	lsls	r3, r3, #20
 80053e0:	b12b      	cbz	r3, 80053ee <_dtoa_r+0x7de>
 80053e2:	9b08      	ldr	r3, [sp, #32]
 80053e4:	3301      	adds	r3, #1
 80053e6:	9308      	str	r3, [sp, #32]
 80053e8:	f108 0801 	add.w	r8, r8, #1
 80053ec:	2301      	movs	r3, #1
 80053ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80053f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 81b0 	beq.w	8005758 <_dtoa_r+0xb48>
 80053f8:	6923      	ldr	r3, [r4, #16]
 80053fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80053fe:	6918      	ldr	r0, [r3, #16]
 8005400:	f000 fbbc 	bl	8005b7c <__hi0bits>
 8005404:	f1c0 0020 	rsb	r0, r0, #32
 8005408:	9b08      	ldr	r3, [sp, #32]
 800540a:	4418      	add	r0, r3
 800540c:	f010 001f 	ands.w	r0, r0, #31
 8005410:	d077      	beq.n	8005502 <_dtoa_r+0x8f2>
 8005412:	f1c0 0320 	rsb	r3, r0, #32
 8005416:	2b04      	cmp	r3, #4
 8005418:	dd6b      	ble.n	80054f2 <_dtoa_r+0x8e2>
 800541a:	9b08      	ldr	r3, [sp, #32]
 800541c:	f1c0 001c 	rsb	r0, r0, #28
 8005420:	4403      	add	r3, r0
 8005422:	4480      	add	r8, r0
 8005424:	4406      	add	r6, r0
 8005426:	9308      	str	r3, [sp, #32]
 8005428:	f1b8 0f00 	cmp.w	r8, #0
 800542c:	dd05      	ble.n	800543a <_dtoa_r+0x82a>
 800542e:	4649      	mov	r1, r9
 8005430:	4642      	mov	r2, r8
 8005432:	4658      	mov	r0, fp
 8005434:	f000 fd08 	bl	8005e48 <__lshift>
 8005438:	4681      	mov	r9, r0
 800543a:	9b08      	ldr	r3, [sp, #32]
 800543c:	2b00      	cmp	r3, #0
 800543e:	dd05      	ble.n	800544c <_dtoa_r+0x83c>
 8005440:	4621      	mov	r1, r4
 8005442:	461a      	mov	r2, r3
 8005444:	4658      	mov	r0, fp
 8005446:	f000 fcff 	bl	8005e48 <__lshift>
 800544a:	4604      	mov	r4, r0
 800544c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800544e:	2b00      	cmp	r3, #0
 8005450:	d059      	beq.n	8005506 <_dtoa_r+0x8f6>
 8005452:	4621      	mov	r1, r4
 8005454:	4648      	mov	r0, r9
 8005456:	f000 fd63 	bl	8005f20 <__mcmp>
 800545a:	2800      	cmp	r0, #0
 800545c:	da53      	bge.n	8005506 <_dtoa_r+0x8f6>
 800545e:	1e7b      	subs	r3, r7, #1
 8005460:	9304      	str	r3, [sp, #16]
 8005462:	4649      	mov	r1, r9
 8005464:	2300      	movs	r3, #0
 8005466:	220a      	movs	r2, #10
 8005468:	4658      	mov	r0, fp
 800546a:	f000 faf7 	bl	8005a5c <__multadd>
 800546e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005470:	4681      	mov	r9, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 8172 	beq.w	800575c <_dtoa_r+0xb4c>
 8005478:	2300      	movs	r3, #0
 800547a:	4629      	mov	r1, r5
 800547c:	220a      	movs	r2, #10
 800547e:	4658      	mov	r0, fp
 8005480:	f000 faec 	bl	8005a5c <__multadd>
 8005484:	9b00      	ldr	r3, [sp, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	4605      	mov	r5, r0
 800548a:	dc67      	bgt.n	800555c <_dtoa_r+0x94c>
 800548c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800548e:	2b02      	cmp	r3, #2
 8005490:	dc41      	bgt.n	8005516 <_dtoa_r+0x906>
 8005492:	e063      	b.n	800555c <_dtoa_r+0x94c>
 8005494:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005496:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800549a:	e746      	b.n	800532a <_dtoa_r+0x71a>
 800549c:	9b07      	ldr	r3, [sp, #28]
 800549e:	1e5c      	subs	r4, r3, #1
 80054a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054a2:	42a3      	cmp	r3, r4
 80054a4:	bfbf      	itttt	lt
 80054a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80054a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80054aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80054ac:	1ae3      	sublt	r3, r4, r3
 80054ae:	bfb4      	ite	lt
 80054b0:	18d2      	addlt	r2, r2, r3
 80054b2:	1b1c      	subge	r4, r3, r4
 80054b4:	9b07      	ldr	r3, [sp, #28]
 80054b6:	bfbc      	itt	lt
 80054b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80054ba:	2400      	movlt	r4, #0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	bfb5      	itete	lt
 80054c0:	eba8 0603 	sublt.w	r6, r8, r3
 80054c4:	9b07      	ldrge	r3, [sp, #28]
 80054c6:	2300      	movlt	r3, #0
 80054c8:	4646      	movge	r6, r8
 80054ca:	e730      	b.n	800532e <_dtoa_r+0x71e>
 80054cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80054ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80054d0:	4646      	mov	r6, r8
 80054d2:	e735      	b.n	8005340 <_dtoa_r+0x730>
 80054d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80054d6:	e75c      	b.n	8005392 <_dtoa_r+0x782>
 80054d8:	2300      	movs	r3, #0
 80054da:	e788      	b.n	80053ee <_dtoa_r+0x7de>
 80054dc:	3fe00000 	.word	0x3fe00000
 80054e0:	40240000 	.word	0x40240000
 80054e4:	40140000 	.word	0x40140000
 80054e8:	9b02      	ldr	r3, [sp, #8]
 80054ea:	e780      	b.n	80053ee <_dtoa_r+0x7de>
 80054ec:	2300      	movs	r3, #0
 80054ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80054f0:	e782      	b.n	80053f8 <_dtoa_r+0x7e8>
 80054f2:	d099      	beq.n	8005428 <_dtoa_r+0x818>
 80054f4:	9a08      	ldr	r2, [sp, #32]
 80054f6:	331c      	adds	r3, #28
 80054f8:	441a      	add	r2, r3
 80054fa:	4498      	add	r8, r3
 80054fc:	441e      	add	r6, r3
 80054fe:	9208      	str	r2, [sp, #32]
 8005500:	e792      	b.n	8005428 <_dtoa_r+0x818>
 8005502:	4603      	mov	r3, r0
 8005504:	e7f6      	b.n	80054f4 <_dtoa_r+0x8e4>
 8005506:	9b07      	ldr	r3, [sp, #28]
 8005508:	9704      	str	r7, [sp, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	dc20      	bgt.n	8005550 <_dtoa_r+0x940>
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005512:	2b02      	cmp	r3, #2
 8005514:	dd1e      	ble.n	8005554 <_dtoa_r+0x944>
 8005516:	9b00      	ldr	r3, [sp, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	f47f aec0 	bne.w	800529e <_dtoa_r+0x68e>
 800551e:	4621      	mov	r1, r4
 8005520:	2205      	movs	r2, #5
 8005522:	4658      	mov	r0, fp
 8005524:	f000 fa9a 	bl	8005a5c <__multadd>
 8005528:	4601      	mov	r1, r0
 800552a:	4604      	mov	r4, r0
 800552c:	4648      	mov	r0, r9
 800552e:	f000 fcf7 	bl	8005f20 <__mcmp>
 8005532:	2800      	cmp	r0, #0
 8005534:	f77f aeb3 	ble.w	800529e <_dtoa_r+0x68e>
 8005538:	4656      	mov	r6, sl
 800553a:	2331      	movs	r3, #49	@ 0x31
 800553c:	f806 3b01 	strb.w	r3, [r6], #1
 8005540:	9b04      	ldr	r3, [sp, #16]
 8005542:	3301      	adds	r3, #1
 8005544:	9304      	str	r3, [sp, #16]
 8005546:	e6ae      	b.n	80052a6 <_dtoa_r+0x696>
 8005548:	9c07      	ldr	r4, [sp, #28]
 800554a:	9704      	str	r7, [sp, #16]
 800554c:	4625      	mov	r5, r4
 800554e:	e7f3      	b.n	8005538 <_dtoa_r+0x928>
 8005550:	9b07      	ldr	r3, [sp, #28]
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 8104 	beq.w	8005764 <_dtoa_r+0xb54>
 800555c:	2e00      	cmp	r6, #0
 800555e:	dd05      	ble.n	800556c <_dtoa_r+0x95c>
 8005560:	4629      	mov	r1, r5
 8005562:	4632      	mov	r2, r6
 8005564:	4658      	mov	r0, fp
 8005566:	f000 fc6f 	bl	8005e48 <__lshift>
 800556a:	4605      	mov	r5, r0
 800556c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800556e:	2b00      	cmp	r3, #0
 8005570:	d05a      	beq.n	8005628 <_dtoa_r+0xa18>
 8005572:	6869      	ldr	r1, [r5, #4]
 8005574:	4658      	mov	r0, fp
 8005576:	f000 fa0f 	bl	8005998 <_Balloc>
 800557a:	4606      	mov	r6, r0
 800557c:	b928      	cbnz	r0, 800558a <_dtoa_r+0x97a>
 800557e:	4b84      	ldr	r3, [pc, #528]	@ (8005790 <_dtoa_r+0xb80>)
 8005580:	4602      	mov	r2, r0
 8005582:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005586:	f7ff bb5a 	b.w	8004c3e <_dtoa_r+0x2e>
 800558a:	692a      	ldr	r2, [r5, #16]
 800558c:	3202      	adds	r2, #2
 800558e:	0092      	lsls	r2, r2, #2
 8005590:	f105 010c 	add.w	r1, r5, #12
 8005594:	300c      	adds	r0, #12
 8005596:	f001 fef9 	bl	800738c <memcpy>
 800559a:	2201      	movs	r2, #1
 800559c:	4631      	mov	r1, r6
 800559e:	4658      	mov	r0, fp
 80055a0:	f000 fc52 	bl	8005e48 <__lshift>
 80055a4:	f10a 0301 	add.w	r3, sl, #1
 80055a8:	9307      	str	r3, [sp, #28]
 80055aa:	9b00      	ldr	r3, [sp, #0]
 80055ac:	4453      	add	r3, sl
 80055ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055b0:	9b02      	ldr	r3, [sp, #8]
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	462f      	mov	r7, r5
 80055b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80055ba:	4605      	mov	r5, r0
 80055bc:	9b07      	ldr	r3, [sp, #28]
 80055be:	4621      	mov	r1, r4
 80055c0:	3b01      	subs	r3, #1
 80055c2:	4648      	mov	r0, r9
 80055c4:	9300      	str	r3, [sp, #0]
 80055c6:	f7ff fa9b 	bl	8004b00 <quorem>
 80055ca:	4639      	mov	r1, r7
 80055cc:	9002      	str	r0, [sp, #8]
 80055ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80055d2:	4648      	mov	r0, r9
 80055d4:	f000 fca4 	bl	8005f20 <__mcmp>
 80055d8:	462a      	mov	r2, r5
 80055da:	9008      	str	r0, [sp, #32]
 80055dc:	4621      	mov	r1, r4
 80055de:	4658      	mov	r0, fp
 80055e0:	f000 fcba 	bl	8005f58 <__mdiff>
 80055e4:	68c2      	ldr	r2, [r0, #12]
 80055e6:	4606      	mov	r6, r0
 80055e8:	bb02      	cbnz	r2, 800562c <_dtoa_r+0xa1c>
 80055ea:	4601      	mov	r1, r0
 80055ec:	4648      	mov	r0, r9
 80055ee:	f000 fc97 	bl	8005f20 <__mcmp>
 80055f2:	4602      	mov	r2, r0
 80055f4:	4631      	mov	r1, r6
 80055f6:	4658      	mov	r0, fp
 80055f8:	920e      	str	r2, [sp, #56]	@ 0x38
 80055fa:	f000 fa0d 	bl	8005a18 <_Bfree>
 80055fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005600:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005602:	9e07      	ldr	r6, [sp, #28]
 8005604:	ea43 0102 	orr.w	r1, r3, r2
 8005608:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800560a:	4319      	orrs	r1, r3
 800560c:	d110      	bne.n	8005630 <_dtoa_r+0xa20>
 800560e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005612:	d029      	beq.n	8005668 <_dtoa_r+0xa58>
 8005614:	9b08      	ldr	r3, [sp, #32]
 8005616:	2b00      	cmp	r3, #0
 8005618:	dd02      	ble.n	8005620 <_dtoa_r+0xa10>
 800561a:	9b02      	ldr	r3, [sp, #8]
 800561c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8005620:	9b00      	ldr	r3, [sp, #0]
 8005622:	f883 8000 	strb.w	r8, [r3]
 8005626:	e63f      	b.n	80052a8 <_dtoa_r+0x698>
 8005628:	4628      	mov	r0, r5
 800562a:	e7bb      	b.n	80055a4 <_dtoa_r+0x994>
 800562c:	2201      	movs	r2, #1
 800562e:	e7e1      	b.n	80055f4 <_dtoa_r+0x9e4>
 8005630:	9b08      	ldr	r3, [sp, #32]
 8005632:	2b00      	cmp	r3, #0
 8005634:	db04      	blt.n	8005640 <_dtoa_r+0xa30>
 8005636:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005638:	430b      	orrs	r3, r1
 800563a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800563c:	430b      	orrs	r3, r1
 800563e:	d120      	bne.n	8005682 <_dtoa_r+0xa72>
 8005640:	2a00      	cmp	r2, #0
 8005642:	dded      	ble.n	8005620 <_dtoa_r+0xa10>
 8005644:	4649      	mov	r1, r9
 8005646:	2201      	movs	r2, #1
 8005648:	4658      	mov	r0, fp
 800564a:	f000 fbfd 	bl	8005e48 <__lshift>
 800564e:	4621      	mov	r1, r4
 8005650:	4681      	mov	r9, r0
 8005652:	f000 fc65 	bl	8005f20 <__mcmp>
 8005656:	2800      	cmp	r0, #0
 8005658:	dc03      	bgt.n	8005662 <_dtoa_r+0xa52>
 800565a:	d1e1      	bne.n	8005620 <_dtoa_r+0xa10>
 800565c:	f018 0f01 	tst.w	r8, #1
 8005660:	d0de      	beq.n	8005620 <_dtoa_r+0xa10>
 8005662:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8005666:	d1d8      	bne.n	800561a <_dtoa_r+0xa0a>
 8005668:	9a00      	ldr	r2, [sp, #0]
 800566a:	2339      	movs	r3, #57	@ 0x39
 800566c:	7013      	strb	r3, [r2, #0]
 800566e:	4633      	mov	r3, r6
 8005670:	461e      	mov	r6, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005678:	2a39      	cmp	r2, #57	@ 0x39
 800567a:	d052      	beq.n	8005722 <_dtoa_r+0xb12>
 800567c:	3201      	adds	r2, #1
 800567e:	701a      	strb	r2, [r3, #0]
 8005680:	e612      	b.n	80052a8 <_dtoa_r+0x698>
 8005682:	2a00      	cmp	r2, #0
 8005684:	dd07      	ble.n	8005696 <_dtoa_r+0xa86>
 8005686:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800568a:	d0ed      	beq.n	8005668 <_dtoa_r+0xa58>
 800568c:	9a00      	ldr	r2, [sp, #0]
 800568e:	f108 0301 	add.w	r3, r8, #1
 8005692:	7013      	strb	r3, [r2, #0]
 8005694:	e608      	b.n	80052a8 <_dtoa_r+0x698>
 8005696:	9b07      	ldr	r3, [sp, #28]
 8005698:	9a07      	ldr	r2, [sp, #28]
 800569a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800569e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d028      	beq.n	80056f6 <_dtoa_r+0xae6>
 80056a4:	4649      	mov	r1, r9
 80056a6:	2300      	movs	r3, #0
 80056a8:	220a      	movs	r2, #10
 80056aa:	4658      	mov	r0, fp
 80056ac:	f000 f9d6 	bl	8005a5c <__multadd>
 80056b0:	42af      	cmp	r7, r5
 80056b2:	4681      	mov	r9, r0
 80056b4:	f04f 0300 	mov.w	r3, #0
 80056b8:	f04f 020a 	mov.w	r2, #10
 80056bc:	4639      	mov	r1, r7
 80056be:	4658      	mov	r0, fp
 80056c0:	d107      	bne.n	80056d2 <_dtoa_r+0xac2>
 80056c2:	f000 f9cb 	bl	8005a5c <__multadd>
 80056c6:	4607      	mov	r7, r0
 80056c8:	4605      	mov	r5, r0
 80056ca:	9b07      	ldr	r3, [sp, #28]
 80056cc:	3301      	adds	r3, #1
 80056ce:	9307      	str	r3, [sp, #28]
 80056d0:	e774      	b.n	80055bc <_dtoa_r+0x9ac>
 80056d2:	f000 f9c3 	bl	8005a5c <__multadd>
 80056d6:	4629      	mov	r1, r5
 80056d8:	4607      	mov	r7, r0
 80056da:	2300      	movs	r3, #0
 80056dc:	220a      	movs	r2, #10
 80056de:	4658      	mov	r0, fp
 80056e0:	f000 f9bc 	bl	8005a5c <__multadd>
 80056e4:	4605      	mov	r5, r0
 80056e6:	e7f0      	b.n	80056ca <_dtoa_r+0xaba>
 80056e8:	9b00      	ldr	r3, [sp, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	bfcc      	ite	gt
 80056ee:	461e      	movgt	r6, r3
 80056f0:	2601      	movle	r6, #1
 80056f2:	4456      	add	r6, sl
 80056f4:	2700      	movs	r7, #0
 80056f6:	4649      	mov	r1, r9
 80056f8:	2201      	movs	r2, #1
 80056fa:	4658      	mov	r0, fp
 80056fc:	f000 fba4 	bl	8005e48 <__lshift>
 8005700:	4621      	mov	r1, r4
 8005702:	4681      	mov	r9, r0
 8005704:	f000 fc0c 	bl	8005f20 <__mcmp>
 8005708:	2800      	cmp	r0, #0
 800570a:	dcb0      	bgt.n	800566e <_dtoa_r+0xa5e>
 800570c:	d102      	bne.n	8005714 <_dtoa_r+0xb04>
 800570e:	f018 0f01 	tst.w	r8, #1
 8005712:	d1ac      	bne.n	800566e <_dtoa_r+0xa5e>
 8005714:	4633      	mov	r3, r6
 8005716:	461e      	mov	r6, r3
 8005718:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800571c:	2a30      	cmp	r2, #48	@ 0x30
 800571e:	d0fa      	beq.n	8005716 <_dtoa_r+0xb06>
 8005720:	e5c2      	b.n	80052a8 <_dtoa_r+0x698>
 8005722:	459a      	cmp	sl, r3
 8005724:	d1a4      	bne.n	8005670 <_dtoa_r+0xa60>
 8005726:	9b04      	ldr	r3, [sp, #16]
 8005728:	3301      	adds	r3, #1
 800572a:	9304      	str	r3, [sp, #16]
 800572c:	2331      	movs	r3, #49	@ 0x31
 800572e:	f88a 3000 	strb.w	r3, [sl]
 8005732:	e5b9      	b.n	80052a8 <_dtoa_r+0x698>
 8005734:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005736:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8005794 <_dtoa_r+0xb84>
 800573a:	b11b      	cbz	r3, 8005744 <_dtoa_r+0xb34>
 800573c:	f10a 0308 	add.w	r3, sl, #8
 8005740:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	4650      	mov	r0, sl
 8005746:	b019      	add	sp, #100	@ 0x64
 8005748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800574c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800574e:	2b01      	cmp	r3, #1
 8005750:	f77f ae37 	ble.w	80053c2 <_dtoa_r+0x7b2>
 8005754:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005756:	930a      	str	r3, [sp, #40]	@ 0x28
 8005758:	2001      	movs	r0, #1
 800575a:	e655      	b.n	8005408 <_dtoa_r+0x7f8>
 800575c:	9b00      	ldr	r3, [sp, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f77f aed6 	ble.w	8005510 <_dtoa_r+0x900>
 8005764:	4656      	mov	r6, sl
 8005766:	4621      	mov	r1, r4
 8005768:	4648      	mov	r0, r9
 800576a:	f7ff f9c9 	bl	8004b00 <quorem>
 800576e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8005772:	f806 8b01 	strb.w	r8, [r6], #1
 8005776:	9b00      	ldr	r3, [sp, #0]
 8005778:	eba6 020a 	sub.w	r2, r6, sl
 800577c:	4293      	cmp	r3, r2
 800577e:	ddb3      	ble.n	80056e8 <_dtoa_r+0xad8>
 8005780:	4649      	mov	r1, r9
 8005782:	2300      	movs	r3, #0
 8005784:	220a      	movs	r2, #10
 8005786:	4658      	mov	r0, fp
 8005788:	f000 f968 	bl	8005a5c <__multadd>
 800578c:	4681      	mov	r9, r0
 800578e:	e7ea      	b.n	8005766 <_dtoa_r+0xb56>
 8005790:	0800d106 	.word	0x0800d106
 8005794:	0800d08a 	.word	0x0800d08a

08005798 <_free_r>:
 8005798:	b538      	push	{r3, r4, r5, lr}
 800579a:	4605      	mov	r5, r0
 800579c:	2900      	cmp	r1, #0
 800579e:	d041      	beq.n	8005824 <_free_r+0x8c>
 80057a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057a4:	1f0c      	subs	r4, r1, #4
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	bfb8      	it	lt
 80057aa:	18e4      	addlt	r4, r4, r3
 80057ac:	f000 f8e8 	bl	8005980 <__malloc_lock>
 80057b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005828 <_free_r+0x90>)
 80057b2:	6813      	ldr	r3, [r2, #0]
 80057b4:	b933      	cbnz	r3, 80057c4 <_free_r+0x2c>
 80057b6:	6063      	str	r3, [r4, #4]
 80057b8:	6014      	str	r4, [r2, #0]
 80057ba:	4628      	mov	r0, r5
 80057bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057c0:	f000 b8e4 	b.w	800598c <__malloc_unlock>
 80057c4:	42a3      	cmp	r3, r4
 80057c6:	d908      	bls.n	80057da <_free_r+0x42>
 80057c8:	6820      	ldr	r0, [r4, #0]
 80057ca:	1821      	adds	r1, r4, r0
 80057cc:	428b      	cmp	r3, r1
 80057ce:	bf01      	itttt	eq
 80057d0:	6819      	ldreq	r1, [r3, #0]
 80057d2:	685b      	ldreq	r3, [r3, #4]
 80057d4:	1809      	addeq	r1, r1, r0
 80057d6:	6021      	streq	r1, [r4, #0]
 80057d8:	e7ed      	b.n	80057b6 <_free_r+0x1e>
 80057da:	461a      	mov	r2, r3
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	b10b      	cbz	r3, 80057e4 <_free_r+0x4c>
 80057e0:	42a3      	cmp	r3, r4
 80057e2:	d9fa      	bls.n	80057da <_free_r+0x42>
 80057e4:	6811      	ldr	r1, [r2, #0]
 80057e6:	1850      	adds	r0, r2, r1
 80057e8:	42a0      	cmp	r0, r4
 80057ea:	d10b      	bne.n	8005804 <_free_r+0x6c>
 80057ec:	6820      	ldr	r0, [r4, #0]
 80057ee:	4401      	add	r1, r0
 80057f0:	1850      	adds	r0, r2, r1
 80057f2:	4283      	cmp	r3, r0
 80057f4:	6011      	str	r1, [r2, #0]
 80057f6:	d1e0      	bne.n	80057ba <_free_r+0x22>
 80057f8:	6818      	ldr	r0, [r3, #0]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	6053      	str	r3, [r2, #4]
 80057fe:	4408      	add	r0, r1
 8005800:	6010      	str	r0, [r2, #0]
 8005802:	e7da      	b.n	80057ba <_free_r+0x22>
 8005804:	d902      	bls.n	800580c <_free_r+0x74>
 8005806:	230c      	movs	r3, #12
 8005808:	602b      	str	r3, [r5, #0]
 800580a:	e7d6      	b.n	80057ba <_free_r+0x22>
 800580c:	6820      	ldr	r0, [r4, #0]
 800580e:	1821      	adds	r1, r4, r0
 8005810:	428b      	cmp	r3, r1
 8005812:	bf04      	itt	eq
 8005814:	6819      	ldreq	r1, [r3, #0]
 8005816:	685b      	ldreq	r3, [r3, #4]
 8005818:	6063      	str	r3, [r4, #4]
 800581a:	bf04      	itt	eq
 800581c:	1809      	addeq	r1, r1, r0
 800581e:	6021      	streq	r1, [r4, #0]
 8005820:	6054      	str	r4, [r2, #4]
 8005822:	e7ca      	b.n	80057ba <_free_r+0x22>
 8005824:	bd38      	pop	{r3, r4, r5, pc}
 8005826:	bf00      	nop
 8005828:	2000050c 	.word	0x2000050c

0800582c <malloc>:
 800582c:	4b02      	ldr	r3, [pc, #8]	@ (8005838 <malloc+0xc>)
 800582e:	4601      	mov	r1, r0
 8005830:	6818      	ldr	r0, [r3, #0]
 8005832:	f000 b825 	b.w	8005880 <_malloc_r>
 8005836:	bf00      	nop
 8005838:	20000018 	.word	0x20000018

0800583c <sbrk_aligned>:
 800583c:	b570      	push	{r4, r5, r6, lr}
 800583e:	4e0f      	ldr	r6, [pc, #60]	@ (800587c <sbrk_aligned+0x40>)
 8005840:	460c      	mov	r4, r1
 8005842:	6831      	ldr	r1, [r6, #0]
 8005844:	4605      	mov	r5, r0
 8005846:	b911      	cbnz	r1, 800584e <sbrk_aligned+0x12>
 8005848:	f001 fd90 	bl	800736c <_sbrk_r>
 800584c:	6030      	str	r0, [r6, #0]
 800584e:	4621      	mov	r1, r4
 8005850:	4628      	mov	r0, r5
 8005852:	f001 fd8b 	bl	800736c <_sbrk_r>
 8005856:	1c43      	adds	r3, r0, #1
 8005858:	d103      	bne.n	8005862 <sbrk_aligned+0x26>
 800585a:	f04f 34ff 	mov.w	r4, #4294967295
 800585e:	4620      	mov	r0, r4
 8005860:	bd70      	pop	{r4, r5, r6, pc}
 8005862:	1cc4      	adds	r4, r0, #3
 8005864:	f024 0403 	bic.w	r4, r4, #3
 8005868:	42a0      	cmp	r0, r4
 800586a:	d0f8      	beq.n	800585e <sbrk_aligned+0x22>
 800586c:	1a21      	subs	r1, r4, r0
 800586e:	4628      	mov	r0, r5
 8005870:	f001 fd7c 	bl	800736c <_sbrk_r>
 8005874:	3001      	adds	r0, #1
 8005876:	d1f2      	bne.n	800585e <sbrk_aligned+0x22>
 8005878:	e7ef      	b.n	800585a <sbrk_aligned+0x1e>
 800587a:	bf00      	nop
 800587c:	20000508 	.word	0x20000508

08005880 <_malloc_r>:
 8005880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005884:	1ccd      	adds	r5, r1, #3
 8005886:	f025 0503 	bic.w	r5, r5, #3
 800588a:	3508      	adds	r5, #8
 800588c:	2d0c      	cmp	r5, #12
 800588e:	bf38      	it	cc
 8005890:	250c      	movcc	r5, #12
 8005892:	2d00      	cmp	r5, #0
 8005894:	4606      	mov	r6, r0
 8005896:	db01      	blt.n	800589c <_malloc_r+0x1c>
 8005898:	42a9      	cmp	r1, r5
 800589a:	d904      	bls.n	80058a6 <_malloc_r+0x26>
 800589c:	230c      	movs	r3, #12
 800589e:	6033      	str	r3, [r6, #0]
 80058a0:	2000      	movs	r0, #0
 80058a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800597c <_malloc_r+0xfc>
 80058aa:	f000 f869 	bl	8005980 <__malloc_lock>
 80058ae:	f8d8 3000 	ldr.w	r3, [r8]
 80058b2:	461c      	mov	r4, r3
 80058b4:	bb44      	cbnz	r4, 8005908 <_malloc_r+0x88>
 80058b6:	4629      	mov	r1, r5
 80058b8:	4630      	mov	r0, r6
 80058ba:	f7ff ffbf 	bl	800583c <sbrk_aligned>
 80058be:	1c43      	adds	r3, r0, #1
 80058c0:	4604      	mov	r4, r0
 80058c2:	d158      	bne.n	8005976 <_malloc_r+0xf6>
 80058c4:	f8d8 4000 	ldr.w	r4, [r8]
 80058c8:	4627      	mov	r7, r4
 80058ca:	2f00      	cmp	r7, #0
 80058cc:	d143      	bne.n	8005956 <_malloc_r+0xd6>
 80058ce:	2c00      	cmp	r4, #0
 80058d0:	d04b      	beq.n	800596a <_malloc_r+0xea>
 80058d2:	6823      	ldr	r3, [r4, #0]
 80058d4:	4639      	mov	r1, r7
 80058d6:	4630      	mov	r0, r6
 80058d8:	eb04 0903 	add.w	r9, r4, r3
 80058dc:	f001 fd46 	bl	800736c <_sbrk_r>
 80058e0:	4581      	cmp	r9, r0
 80058e2:	d142      	bne.n	800596a <_malloc_r+0xea>
 80058e4:	6821      	ldr	r1, [r4, #0]
 80058e6:	1a6d      	subs	r5, r5, r1
 80058e8:	4629      	mov	r1, r5
 80058ea:	4630      	mov	r0, r6
 80058ec:	f7ff ffa6 	bl	800583c <sbrk_aligned>
 80058f0:	3001      	adds	r0, #1
 80058f2:	d03a      	beq.n	800596a <_malloc_r+0xea>
 80058f4:	6823      	ldr	r3, [r4, #0]
 80058f6:	442b      	add	r3, r5
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	f8d8 3000 	ldr.w	r3, [r8]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	bb62      	cbnz	r2, 800595c <_malloc_r+0xdc>
 8005902:	f8c8 7000 	str.w	r7, [r8]
 8005906:	e00f      	b.n	8005928 <_malloc_r+0xa8>
 8005908:	6822      	ldr	r2, [r4, #0]
 800590a:	1b52      	subs	r2, r2, r5
 800590c:	d420      	bmi.n	8005950 <_malloc_r+0xd0>
 800590e:	2a0b      	cmp	r2, #11
 8005910:	d917      	bls.n	8005942 <_malloc_r+0xc2>
 8005912:	1961      	adds	r1, r4, r5
 8005914:	42a3      	cmp	r3, r4
 8005916:	6025      	str	r5, [r4, #0]
 8005918:	bf18      	it	ne
 800591a:	6059      	strne	r1, [r3, #4]
 800591c:	6863      	ldr	r3, [r4, #4]
 800591e:	bf08      	it	eq
 8005920:	f8c8 1000 	streq.w	r1, [r8]
 8005924:	5162      	str	r2, [r4, r5]
 8005926:	604b      	str	r3, [r1, #4]
 8005928:	4630      	mov	r0, r6
 800592a:	f000 f82f 	bl	800598c <__malloc_unlock>
 800592e:	f104 000b 	add.w	r0, r4, #11
 8005932:	1d23      	adds	r3, r4, #4
 8005934:	f020 0007 	bic.w	r0, r0, #7
 8005938:	1ac2      	subs	r2, r0, r3
 800593a:	bf1c      	itt	ne
 800593c:	1a1b      	subne	r3, r3, r0
 800593e:	50a3      	strne	r3, [r4, r2]
 8005940:	e7af      	b.n	80058a2 <_malloc_r+0x22>
 8005942:	6862      	ldr	r2, [r4, #4]
 8005944:	42a3      	cmp	r3, r4
 8005946:	bf0c      	ite	eq
 8005948:	f8c8 2000 	streq.w	r2, [r8]
 800594c:	605a      	strne	r2, [r3, #4]
 800594e:	e7eb      	b.n	8005928 <_malloc_r+0xa8>
 8005950:	4623      	mov	r3, r4
 8005952:	6864      	ldr	r4, [r4, #4]
 8005954:	e7ae      	b.n	80058b4 <_malloc_r+0x34>
 8005956:	463c      	mov	r4, r7
 8005958:	687f      	ldr	r7, [r7, #4]
 800595a:	e7b6      	b.n	80058ca <_malloc_r+0x4a>
 800595c:	461a      	mov	r2, r3
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	42a3      	cmp	r3, r4
 8005962:	d1fb      	bne.n	800595c <_malloc_r+0xdc>
 8005964:	2300      	movs	r3, #0
 8005966:	6053      	str	r3, [r2, #4]
 8005968:	e7de      	b.n	8005928 <_malloc_r+0xa8>
 800596a:	230c      	movs	r3, #12
 800596c:	6033      	str	r3, [r6, #0]
 800596e:	4630      	mov	r0, r6
 8005970:	f000 f80c 	bl	800598c <__malloc_unlock>
 8005974:	e794      	b.n	80058a0 <_malloc_r+0x20>
 8005976:	6005      	str	r5, [r0, #0]
 8005978:	e7d6      	b.n	8005928 <_malloc_r+0xa8>
 800597a:	bf00      	nop
 800597c:	2000050c 	.word	0x2000050c

08005980 <__malloc_lock>:
 8005980:	4801      	ldr	r0, [pc, #4]	@ (8005988 <__malloc_lock+0x8>)
 8005982:	f7ff b8b4 	b.w	8004aee <__retarget_lock_acquire_recursive>
 8005986:	bf00      	nop
 8005988:	20000504 	.word	0x20000504

0800598c <__malloc_unlock>:
 800598c:	4801      	ldr	r0, [pc, #4]	@ (8005994 <__malloc_unlock+0x8>)
 800598e:	f7ff b8af 	b.w	8004af0 <__retarget_lock_release_recursive>
 8005992:	bf00      	nop
 8005994:	20000504 	.word	0x20000504

08005998 <_Balloc>:
 8005998:	b570      	push	{r4, r5, r6, lr}
 800599a:	69c6      	ldr	r6, [r0, #28]
 800599c:	4604      	mov	r4, r0
 800599e:	460d      	mov	r5, r1
 80059a0:	b976      	cbnz	r6, 80059c0 <_Balloc+0x28>
 80059a2:	2010      	movs	r0, #16
 80059a4:	f7ff ff42 	bl	800582c <malloc>
 80059a8:	4602      	mov	r2, r0
 80059aa:	61e0      	str	r0, [r4, #28]
 80059ac:	b920      	cbnz	r0, 80059b8 <_Balloc+0x20>
 80059ae:	4b18      	ldr	r3, [pc, #96]	@ (8005a10 <_Balloc+0x78>)
 80059b0:	4818      	ldr	r0, [pc, #96]	@ (8005a14 <_Balloc+0x7c>)
 80059b2:	216b      	movs	r1, #107	@ 0x6b
 80059b4:	f001 fd00 	bl	80073b8 <__assert_func>
 80059b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059bc:	6006      	str	r6, [r0, #0]
 80059be:	60c6      	str	r6, [r0, #12]
 80059c0:	69e6      	ldr	r6, [r4, #28]
 80059c2:	68f3      	ldr	r3, [r6, #12]
 80059c4:	b183      	cbz	r3, 80059e8 <_Balloc+0x50>
 80059c6:	69e3      	ldr	r3, [r4, #28]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059ce:	b9b8      	cbnz	r0, 8005a00 <_Balloc+0x68>
 80059d0:	2101      	movs	r1, #1
 80059d2:	fa01 f605 	lsl.w	r6, r1, r5
 80059d6:	1d72      	adds	r2, r6, #5
 80059d8:	0092      	lsls	r2, r2, #2
 80059da:	4620      	mov	r0, r4
 80059dc:	f001 fd0a 	bl	80073f4 <_calloc_r>
 80059e0:	b160      	cbz	r0, 80059fc <_Balloc+0x64>
 80059e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059e6:	e00e      	b.n	8005a06 <_Balloc+0x6e>
 80059e8:	2221      	movs	r2, #33	@ 0x21
 80059ea:	2104      	movs	r1, #4
 80059ec:	4620      	mov	r0, r4
 80059ee:	f001 fd01 	bl	80073f4 <_calloc_r>
 80059f2:	69e3      	ldr	r3, [r4, #28]
 80059f4:	60f0      	str	r0, [r6, #12]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e4      	bne.n	80059c6 <_Balloc+0x2e>
 80059fc:	2000      	movs	r0, #0
 80059fe:	bd70      	pop	{r4, r5, r6, pc}
 8005a00:	6802      	ldr	r2, [r0, #0]
 8005a02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a06:	2300      	movs	r3, #0
 8005a08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a0c:	e7f7      	b.n	80059fe <_Balloc+0x66>
 8005a0e:	bf00      	nop
 8005a10:	0800d097 	.word	0x0800d097
 8005a14:	0800d117 	.word	0x0800d117

08005a18 <_Bfree>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	69c6      	ldr	r6, [r0, #28]
 8005a1c:	4605      	mov	r5, r0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	b976      	cbnz	r6, 8005a40 <_Bfree+0x28>
 8005a22:	2010      	movs	r0, #16
 8005a24:	f7ff ff02 	bl	800582c <malloc>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	61e8      	str	r0, [r5, #28]
 8005a2c:	b920      	cbnz	r0, 8005a38 <_Bfree+0x20>
 8005a2e:	4b09      	ldr	r3, [pc, #36]	@ (8005a54 <_Bfree+0x3c>)
 8005a30:	4809      	ldr	r0, [pc, #36]	@ (8005a58 <_Bfree+0x40>)
 8005a32:	218f      	movs	r1, #143	@ 0x8f
 8005a34:	f001 fcc0 	bl	80073b8 <__assert_func>
 8005a38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a3c:	6006      	str	r6, [r0, #0]
 8005a3e:	60c6      	str	r6, [r0, #12]
 8005a40:	b13c      	cbz	r4, 8005a52 <_Bfree+0x3a>
 8005a42:	69eb      	ldr	r3, [r5, #28]
 8005a44:	6862      	ldr	r2, [r4, #4]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a4c:	6021      	str	r1, [r4, #0]
 8005a4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
 8005a54:	0800d097 	.word	0x0800d097
 8005a58:	0800d117 	.word	0x0800d117

08005a5c <__multadd>:
 8005a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a60:	690d      	ldr	r5, [r1, #16]
 8005a62:	4607      	mov	r7, r0
 8005a64:	460c      	mov	r4, r1
 8005a66:	461e      	mov	r6, r3
 8005a68:	f101 0c14 	add.w	ip, r1, #20
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	f8dc 3000 	ldr.w	r3, [ip]
 8005a72:	b299      	uxth	r1, r3
 8005a74:	fb02 6101 	mla	r1, r2, r1, r6
 8005a78:	0c1e      	lsrs	r6, r3, #16
 8005a7a:	0c0b      	lsrs	r3, r1, #16
 8005a7c:	fb02 3306 	mla	r3, r2, r6, r3
 8005a80:	b289      	uxth	r1, r1
 8005a82:	3001      	adds	r0, #1
 8005a84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a88:	4285      	cmp	r5, r0
 8005a8a:	f84c 1b04 	str.w	r1, [ip], #4
 8005a8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a92:	dcec      	bgt.n	8005a6e <__multadd+0x12>
 8005a94:	b30e      	cbz	r6, 8005ada <__multadd+0x7e>
 8005a96:	68a3      	ldr	r3, [r4, #8]
 8005a98:	42ab      	cmp	r3, r5
 8005a9a:	dc19      	bgt.n	8005ad0 <__multadd+0x74>
 8005a9c:	6861      	ldr	r1, [r4, #4]
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	3101      	adds	r1, #1
 8005aa2:	f7ff ff79 	bl	8005998 <_Balloc>
 8005aa6:	4680      	mov	r8, r0
 8005aa8:	b928      	cbnz	r0, 8005ab6 <__multadd+0x5a>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	4b0c      	ldr	r3, [pc, #48]	@ (8005ae0 <__multadd+0x84>)
 8005aae:	480d      	ldr	r0, [pc, #52]	@ (8005ae4 <__multadd+0x88>)
 8005ab0:	21ba      	movs	r1, #186	@ 0xba
 8005ab2:	f001 fc81 	bl	80073b8 <__assert_func>
 8005ab6:	6922      	ldr	r2, [r4, #16]
 8005ab8:	3202      	adds	r2, #2
 8005aba:	f104 010c 	add.w	r1, r4, #12
 8005abe:	0092      	lsls	r2, r2, #2
 8005ac0:	300c      	adds	r0, #12
 8005ac2:	f001 fc63 	bl	800738c <memcpy>
 8005ac6:	4621      	mov	r1, r4
 8005ac8:	4638      	mov	r0, r7
 8005aca:	f7ff ffa5 	bl	8005a18 <_Bfree>
 8005ace:	4644      	mov	r4, r8
 8005ad0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ad4:	3501      	adds	r5, #1
 8005ad6:	615e      	str	r6, [r3, #20]
 8005ad8:	6125      	str	r5, [r4, #16]
 8005ada:	4620      	mov	r0, r4
 8005adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ae0:	0800d106 	.word	0x0800d106
 8005ae4:	0800d117 	.word	0x0800d117

08005ae8 <__s2b>:
 8005ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005aec:	460c      	mov	r4, r1
 8005aee:	4615      	mov	r5, r2
 8005af0:	461f      	mov	r7, r3
 8005af2:	2209      	movs	r2, #9
 8005af4:	3308      	adds	r3, #8
 8005af6:	4606      	mov	r6, r0
 8005af8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005afc:	2100      	movs	r1, #0
 8005afe:	2201      	movs	r2, #1
 8005b00:	429a      	cmp	r2, r3
 8005b02:	db09      	blt.n	8005b18 <__s2b+0x30>
 8005b04:	4630      	mov	r0, r6
 8005b06:	f7ff ff47 	bl	8005998 <_Balloc>
 8005b0a:	b940      	cbnz	r0, 8005b1e <__s2b+0x36>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	4b19      	ldr	r3, [pc, #100]	@ (8005b74 <__s2b+0x8c>)
 8005b10:	4819      	ldr	r0, [pc, #100]	@ (8005b78 <__s2b+0x90>)
 8005b12:	21d3      	movs	r1, #211	@ 0xd3
 8005b14:	f001 fc50 	bl	80073b8 <__assert_func>
 8005b18:	0052      	lsls	r2, r2, #1
 8005b1a:	3101      	adds	r1, #1
 8005b1c:	e7f0      	b.n	8005b00 <__s2b+0x18>
 8005b1e:	9b08      	ldr	r3, [sp, #32]
 8005b20:	6143      	str	r3, [r0, #20]
 8005b22:	2d09      	cmp	r5, #9
 8005b24:	f04f 0301 	mov.w	r3, #1
 8005b28:	6103      	str	r3, [r0, #16]
 8005b2a:	dd16      	ble.n	8005b5a <__s2b+0x72>
 8005b2c:	f104 0909 	add.w	r9, r4, #9
 8005b30:	46c8      	mov	r8, r9
 8005b32:	442c      	add	r4, r5
 8005b34:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005b38:	4601      	mov	r1, r0
 8005b3a:	3b30      	subs	r3, #48	@ 0x30
 8005b3c:	220a      	movs	r2, #10
 8005b3e:	4630      	mov	r0, r6
 8005b40:	f7ff ff8c 	bl	8005a5c <__multadd>
 8005b44:	45a0      	cmp	r8, r4
 8005b46:	d1f5      	bne.n	8005b34 <__s2b+0x4c>
 8005b48:	f1a5 0408 	sub.w	r4, r5, #8
 8005b4c:	444c      	add	r4, r9
 8005b4e:	1b2d      	subs	r5, r5, r4
 8005b50:	1963      	adds	r3, r4, r5
 8005b52:	42bb      	cmp	r3, r7
 8005b54:	db04      	blt.n	8005b60 <__s2b+0x78>
 8005b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b5a:	340a      	adds	r4, #10
 8005b5c:	2509      	movs	r5, #9
 8005b5e:	e7f6      	b.n	8005b4e <__s2b+0x66>
 8005b60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005b64:	4601      	mov	r1, r0
 8005b66:	3b30      	subs	r3, #48	@ 0x30
 8005b68:	220a      	movs	r2, #10
 8005b6a:	4630      	mov	r0, r6
 8005b6c:	f7ff ff76 	bl	8005a5c <__multadd>
 8005b70:	e7ee      	b.n	8005b50 <__s2b+0x68>
 8005b72:	bf00      	nop
 8005b74:	0800d106 	.word	0x0800d106
 8005b78:	0800d117 	.word	0x0800d117

08005b7c <__hi0bits>:
 8005b7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005b80:	4603      	mov	r3, r0
 8005b82:	bf36      	itet	cc
 8005b84:	0403      	lslcc	r3, r0, #16
 8005b86:	2000      	movcs	r0, #0
 8005b88:	2010      	movcc	r0, #16
 8005b8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005b8e:	bf3c      	itt	cc
 8005b90:	021b      	lslcc	r3, r3, #8
 8005b92:	3008      	addcc	r0, #8
 8005b94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b98:	bf3c      	itt	cc
 8005b9a:	011b      	lslcc	r3, r3, #4
 8005b9c:	3004      	addcc	r0, #4
 8005b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ba2:	bf3c      	itt	cc
 8005ba4:	009b      	lslcc	r3, r3, #2
 8005ba6:	3002      	addcc	r0, #2
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	db05      	blt.n	8005bb8 <__hi0bits+0x3c>
 8005bac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005bb0:	f100 0001 	add.w	r0, r0, #1
 8005bb4:	bf08      	it	eq
 8005bb6:	2020      	moveq	r0, #32
 8005bb8:	4770      	bx	lr

08005bba <__lo0bits>:
 8005bba:	6803      	ldr	r3, [r0, #0]
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	f013 0007 	ands.w	r0, r3, #7
 8005bc2:	d00b      	beq.n	8005bdc <__lo0bits+0x22>
 8005bc4:	07d9      	lsls	r1, r3, #31
 8005bc6:	d421      	bmi.n	8005c0c <__lo0bits+0x52>
 8005bc8:	0798      	lsls	r0, r3, #30
 8005bca:	bf49      	itett	mi
 8005bcc:	085b      	lsrmi	r3, r3, #1
 8005bce:	089b      	lsrpl	r3, r3, #2
 8005bd0:	2001      	movmi	r0, #1
 8005bd2:	6013      	strmi	r3, [r2, #0]
 8005bd4:	bf5c      	itt	pl
 8005bd6:	6013      	strpl	r3, [r2, #0]
 8005bd8:	2002      	movpl	r0, #2
 8005bda:	4770      	bx	lr
 8005bdc:	b299      	uxth	r1, r3
 8005bde:	b909      	cbnz	r1, 8005be4 <__lo0bits+0x2a>
 8005be0:	0c1b      	lsrs	r3, r3, #16
 8005be2:	2010      	movs	r0, #16
 8005be4:	b2d9      	uxtb	r1, r3
 8005be6:	b909      	cbnz	r1, 8005bec <__lo0bits+0x32>
 8005be8:	3008      	adds	r0, #8
 8005bea:	0a1b      	lsrs	r3, r3, #8
 8005bec:	0719      	lsls	r1, r3, #28
 8005bee:	bf04      	itt	eq
 8005bf0:	091b      	lsreq	r3, r3, #4
 8005bf2:	3004      	addeq	r0, #4
 8005bf4:	0799      	lsls	r1, r3, #30
 8005bf6:	bf04      	itt	eq
 8005bf8:	089b      	lsreq	r3, r3, #2
 8005bfa:	3002      	addeq	r0, #2
 8005bfc:	07d9      	lsls	r1, r3, #31
 8005bfe:	d403      	bmi.n	8005c08 <__lo0bits+0x4e>
 8005c00:	085b      	lsrs	r3, r3, #1
 8005c02:	f100 0001 	add.w	r0, r0, #1
 8005c06:	d003      	beq.n	8005c10 <__lo0bits+0x56>
 8005c08:	6013      	str	r3, [r2, #0]
 8005c0a:	4770      	bx	lr
 8005c0c:	2000      	movs	r0, #0
 8005c0e:	4770      	bx	lr
 8005c10:	2020      	movs	r0, #32
 8005c12:	4770      	bx	lr

08005c14 <__i2b>:
 8005c14:	b510      	push	{r4, lr}
 8005c16:	460c      	mov	r4, r1
 8005c18:	2101      	movs	r1, #1
 8005c1a:	f7ff febd 	bl	8005998 <_Balloc>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	b928      	cbnz	r0, 8005c2e <__i2b+0x1a>
 8005c22:	4b05      	ldr	r3, [pc, #20]	@ (8005c38 <__i2b+0x24>)
 8005c24:	4805      	ldr	r0, [pc, #20]	@ (8005c3c <__i2b+0x28>)
 8005c26:	f240 1145 	movw	r1, #325	@ 0x145
 8005c2a:	f001 fbc5 	bl	80073b8 <__assert_func>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	6144      	str	r4, [r0, #20]
 8005c32:	6103      	str	r3, [r0, #16]
 8005c34:	bd10      	pop	{r4, pc}
 8005c36:	bf00      	nop
 8005c38:	0800d106 	.word	0x0800d106
 8005c3c:	0800d117 	.word	0x0800d117

08005c40 <__multiply>:
 8005c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c44:	4614      	mov	r4, r2
 8005c46:	690a      	ldr	r2, [r1, #16]
 8005c48:	6923      	ldr	r3, [r4, #16]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	bfa8      	it	ge
 8005c4e:	4623      	movge	r3, r4
 8005c50:	460f      	mov	r7, r1
 8005c52:	bfa4      	itt	ge
 8005c54:	460c      	movge	r4, r1
 8005c56:	461f      	movge	r7, r3
 8005c58:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8005c5c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8005c60:	68a3      	ldr	r3, [r4, #8]
 8005c62:	6861      	ldr	r1, [r4, #4]
 8005c64:	eb0a 0609 	add.w	r6, sl, r9
 8005c68:	42b3      	cmp	r3, r6
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	bfb8      	it	lt
 8005c6e:	3101      	addlt	r1, #1
 8005c70:	f7ff fe92 	bl	8005998 <_Balloc>
 8005c74:	b930      	cbnz	r0, 8005c84 <__multiply+0x44>
 8005c76:	4602      	mov	r2, r0
 8005c78:	4b44      	ldr	r3, [pc, #272]	@ (8005d8c <__multiply+0x14c>)
 8005c7a:	4845      	ldr	r0, [pc, #276]	@ (8005d90 <__multiply+0x150>)
 8005c7c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005c80:	f001 fb9a 	bl	80073b8 <__assert_func>
 8005c84:	f100 0514 	add.w	r5, r0, #20
 8005c88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005c8c:	462b      	mov	r3, r5
 8005c8e:	2200      	movs	r2, #0
 8005c90:	4543      	cmp	r3, r8
 8005c92:	d321      	bcc.n	8005cd8 <__multiply+0x98>
 8005c94:	f107 0114 	add.w	r1, r7, #20
 8005c98:	f104 0214 	add.w	r2, r4, #20
 8005c9c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8005ca0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8005ca4:	9302      	str	r3, [sp, #8]
 8005ca6:	1b13      	subs	r3, r2, r4
 8005ca8:	3b15      	subs	r3, #21
 8005caa:	f023 0303 	bic.w	r3, r3, #3
 8005cae:	3304      	adds	r3, #4
 8005cb0:	f104 0715 	add.w	r7, r4, #21
 8005cb4:	42ba      	cmp	r2, r7
 8005cb6:	bf38      	it	cc
 8005cb8:	2304      	movcc	r3, #4
 8005cba:	9301      	str	r3, [sp, #4]
 8005cbc:	9b02      	ldr	r3, [sp, #8]
 8005cbe:	9103      	str	r1, [sp, #12]
 8005cc0:	428b      	cmp	r3, r1
 8005cc2:	d80c      	bhi.n	8005cde <__multiply+0x9e>
 8005cc4:	2e00      	cmp	r6, #0
 8005cc6:	dd03      	ble.n	8005cd0 <__multiply+0x90>
 8005cc8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d05b      	beq.n	8005d88 <__multiply+0x148>
 8005cd0:	6106      	str	r6, [r0, #16]
 8005cd2:	b005      	add	sp, #20
 8005cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cd8:	f843 2b04 	str.w	r2, [r3], #4
 8005cdc:	e7d8      	b.n	8005c90 <__multiply+0x50>
 8005cde:	f8b1 a000 	ldrh.w	sl, [r1]
 8005ce2:	f1ba 0f00 	cmp.w	sl, #0
 8005ce6:	d024      	beq.n	8005d32 <__multiply+0xf2>
 8005ce8:	f104 0e14 	add.w	lr, r4, #20
 8005cec:	46a9      	mov	r9, r5
 8005cee:	f04f 0c00 	mov.w	ip, #0
 8005cf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005cf6:	f8d9 3000 	ldr.w	r3, [r9]
 8005cfa:	fa1f fb87 	uxth.w	fp, r7
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	fb0a 330b 	mla	r3, sl, fp, r3
 8005d04:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8005d08:	f8d9 7000 	ldr.w	r7, [r9]
 8005d0c:	4463      	add	r3, ip
 8005d0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005d12:	fb0a c70b 	mla	r7, sl, fp, ip
 8005d16:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005d20:	4572      	cmp	r2, lr
 8005d22:	f849 3b04 	str.w	r3, [r9], #4
 8005d26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8005d2a:	d8e2      	bhi.n	8005cf2 <__multiply+0xb2>
 8005d2c:	9b01      	ldr	r3, [sp, #4]
 8005d2e:	f845 c003 	str.w	ip, [r5, r3]
 8005d32:	9b03      	ldr	r3, [sp, #12]
 8005d34:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005d38:	3104      	adds	r1, #4
 8005d3a:	f1b9 0f00 	cmp.w	r9, #0
 8005d3e:	d021      	beq.n	8005d84 <__multiply+0x144>
 8005d40:	682b      	ldr	r3, [r5, #0]
 8005d42:	f104 0c14 	add.w	ip, r4, #20
 8005d46:	46ae      	mov	lr, r5
 8005d48:	f04f 0a00 	mov.w	sl, #0
 8005d4c:	f8bc b000 	ldrh.w	fp, [ip]
 8005d50:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8005d54:	fb09 770b 	mla	r7, r9, fp, r7
 8005d58:	4457      	add	r7, sl
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8005d60:	f84e 3b04 	str.w	r3, [lr], #4
 8005d64:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005d68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d6c:	f8be 3000 	ldrh.w	r3, [lr]
 8005d70:	fb09 330a 	mla	r3, r9, sl, r3
 8005d74:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8005d78:	4562      	cmp	r2, ip
 8005d7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005d7e:	d8e5      	bhi.n	8005d4c <__multiply+0x10c>
 8005d80:	9f01      	ldr	r7, [sp, #4]
 8005d82:	51eb      	str	r3, [r5, r7]
 8005d84:	3504      	adds	r5, #4
 8005d86:	e799      	b.n	8005cbc <__multiply+0x7c>
 8005d88:	3e01      	subs	r6, #1
 8005d8a:	e79b      	b.n	8005cc4 <__multiply+0x84>
 8005d8c:	0800d106 	.word	0x0800d106
 8005d90:	0800d117 	.word	0x0800d117

08005d94 <__pow5mult>:
 8005d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d98:	4615      	mov	r5, r2
 8005d9a:	f012 0203 	ands.w	r2, r2, #3
 8005d9e:	4607      	mov	r7, r0
 8005da0:	460e      	mov	r6, r1
 8005da2:	d007      	beq.n	8005db4 <__pow5mult+0x20>
 8005da4:	4c25      	ldr	r4, [pc, #148]	@ (8005e3c <__pow5mult+0xa8>)
 8005da6:	3a01      	subs	r2, #1
 8005da8:	2300      	movs	r3, #0
 8005daa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005dae:	f7ff fe55 	bl	8005a5c <__multadd>
 8005db2:	4606      	mov	r6, r0
 8005db4:	10ad      	asrs	r5, r5, #2
 8005db6:	d03d      	beq.n	8005e34 <__pow5mult+0xa0>
 8005db8:	69fc      	ldr	r4, [r7, #28]
 8005dba:	b97c      	cbnz	r4, 8005ddc <__pow5mult+0x48>
 8005dbc:	2010      	movs	r0, #16
 8005dbe:	f7ff fd35 	bl	800582c <malloc>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	61f8      	str	r0, [r7, #28]
 8005dc6:	b928      	cbnz	r0, 8005dd4 <__pow5mult+0x40>
 8005dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8005e40 <__pow5mult+0xac>)
 8005dca:	481e      	ldr	r0, [pc, #120]	@ (8005e44 <__pow5mult+0xb0>)
 8005dcc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005dd0:	f001 faf2 	bl	80073b8 <__assert_func>
 8005dd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005dd8:	6004      	str	r4, [r0, #0]
 8005dda:	60c4      	str	r4, [r0, #12]
 8005ddc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005de0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005de4:	b94c      	cbnz	r4, 8005dfa <__pow5mult+0x66>
 8005de6:	f240 2171 	movw	r1, #625	@ 0x271
 8005dea:	4638      	mov	r0, r7
 8005dec:	f7ff ff12 	bl	8005c14 <__i2b>
 8005df0:	2300      	movs	r3, #0
 8005df2:	f8c8 0008 	str.w	r0, [r8, #8]
 8005df6:	4604      	mov	r4, r0
 8005df8:	6003      	str	r3, [r0, #0]
 8005dfa:	f04f 0900 	mov.w	r9, #0
 8005dfe:	07eb      	lsls	r3, r5, #31
 8005e00:	d50a      	bpl.n	8005e18 <__pow5mult+0x84>
 8005e02:	4631      	mov	r1, r6
 8005e04:	4622      	mov	r2, r4
 8005e06:	4638      	mov	r0, r7
 8005e08:	f7ff ff1a 	bl	8005c40 <__multiply>
 8005e0c:	4631      	mov	r1, r6
 8005e0e:	4680      	mov	r8, r0
 8005e10:	4638      	mov	r0, r7
 8005e12:	f7ff fe01 	bl	8005a18 <_Bfree>
 8005e16:	4646      	mov	r6, r8
 8005e18:	106d      	asrs	r5, r5, #1
 8005e1a:	d00b      	beq.n	8005e34 <__pow5mult+0xa0>
 8005e1c:	6820      	ldr	r0, [r4, #0]
 8005e1e:	b938      	cbnz	r0, 8005e30 <__pow5mult+0x9c>
 8005e20:	4622      	mov	r2, r4
 8005e22:	4621      	mov	r1, r4
 8005e24:	4638      	mov	r0, r7
 8005e26:	f7ff ff0b 	bl	8005c40 <__multiply>
 8005e2a:	6020      	str	r0, [r4, #0]
 8005e2c:	f8c0 9000 	str.w	r9, [r0]
 8005e30:	4604      	mov	r4, r0
 8005e32:	e7e4      	b.n	8005dfe <__pow5mult+0x6a>
 8005e34:	4630      	mov	r0, r6
 8005e36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e3a:	bf00      	nop
 8005e3c:	0800d170 	.word	0x0800d170
 8005e40:	0800d097 	.word	0x0800d097
 8005e44:	0800d117 	.word	0x0800d117

08005e48 <__lshift>:
 8005e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	6849      	ldr	r1, [r1, #4]
 8005e50:	6923      	ldr	r3, [r4, #16]
 8005e52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e56:	68a3      	ldr	r3, [r4, #8]
 8005e58:	4607      	mov	r7, r0
 8005e5a:	4691      	mov	r9, r2
 8005e5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e60:	f108 0601 	add.w	r6, r8, #1
 8005e64:	42b3      	cmp	r3, r6
 8005e66:	db0b      	blt.n	8005e80 <__lshift+0x38>
 8005e68:	4638      	mov	r0, r7
 8005e6a:	f7ff fd95 	bl	8005998 <_Balloc>
 8005e6e:	4605      	mov	r5, r0
 8005e70:	b948      	cbnz	r0, 8005e86 <__lshift+0x3e>
 8005e72:	4602      	mov	r2, r0
 8005e74:	4b28      	ldr	r3, [pc, #160]	@ (8005f18 <__lshift+0xd0>)
 8005e76:	4829      	ldr	r0, [pc, #164]	@ (8005f1c <__lshift+0xd4>)
 8005e78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005e7c:	f001 fa9c 	bl	80073b8 <__assert_func>
 8005e80:	3101      	adds	r1, #1
 8005e82:	005b      	lsls	r3, r3, #1
 8005e84:	e7ee      	b.n	8005e64 <__lshift+0x1c>
 8005e86:	2300      	movs	r3, #0
 8005e88:	f100 0114 	add.w	r1, r0, #20
 8005e8c:	f100 0210 	add.w	r2, r0, #16
 8005e90:	4618      	mov	r0, r3
 8005e92:	4553      	cmp	r3, sl
 8005e94:	db33      	blt.n	8005efe <__lshift+0xb6>
 8005e96:	6920      	ldr	r0, [r4, #16]
 8005e98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e9c:	f104 0314 	add.w	r3, r4, #20
 8005ea0:	f019 091f 	ands.w	r9, r9, #31
 8005ea4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005ea8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005eac:	d02b      	beq.n	8005f06 <__lshift+0xbe>
 8005eae:	f1c9 0e20 	rsb	lr, r9, #32
 8005eb2:	468a      	mov	sl, r1
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	6818      	ldr	r0, [r3, #0]
 8005eb8:	fa00 f009 	lsl.w	r0, r0, r9
 8005ebc:	4310      	orrs	r0, r2
 8005ebe:	f84a 0b04 	str.w	r0, [sl], #4
 8005ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ec6:	459c      	cmp	ip, r3
 8005ec8:	fa22 f20e 	lsr.w	r2, r2, lr
 8005ecc:	d8f3      	bhi.n	8005eb6 <__lshift+0x6e>
 8005ece:	ebac 0304 	sub.w	r3, ip, r4
 8005ed2:	3b15      	subs	r3, #21
 8005ed4:	f023 0303 	bic.w	r3, r3, #3
 8005ed8:	3304      	adds	r3, #4
 8005eda:	f104 0015 	add.w	r0, r4, #21
 8005ede:	4584      	cmp	ip, r0
 8005ee0:	bf38      	it	cc
 8005ee2:	2304      	movcc	r3, #4
 8005ee4:	50ca      	str	r2, [r1, r3]
 8005ee6:	b10a      	cbz	r2, 8005eec <__lshift+0xa4>
 8005ee8:	f108 0602 	add.w	r6, r8, #2
 8005eec:	3e01      	subs	r6, #1
 8005eee:	4638      	mov	r0, r7
 8005ef0:	612e      	str	r6, [r5, #16]
 8005ef2:	4621      	mov	r1, r4
 8005ef4:	f7ff fd90 	bl	8005a18 <_Bfree>
 8005ef8:	4628      	mov	r0, r5
 8005efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005efe:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f02:	3301      	adds	r3, #1
 8005f04:	e7c5      	b.n	8005e92 <__lshift+0x4a>
 8005f06:	3904      	subs	r1, #4
 8005f08:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f10:	459c      	cmp	ip, r3
 8005f12:	d8f9      	bhi.n	8005f08 <__lshift+0xc0>
 8005f14:	e7ea      	b.n	8005eec <__lshift+0xa4>
 8005f16:	bf00      	nop
 8005f18:	0800d106 	.word	0x0800d106
 8005f1c:	0800d117 	.word	0x0800d117

08005f20 <__mcmp>:
 8005f20:	690a      	ldr	r2, [r1, #16]
 8005f22:	4603      	mov	r3, r0
 8005f24:	6900      	ldr	r0, [r0, #16]
 8005f26:	1a80      	subs	r0, r0, r2
 8005f28:	b530      	push	{r4, r5, lr}
 8005f2a:	d10e      	bne.n	8005f4a <__mcmp+0x2a>
 8005f2c:	3314      	adds	r3, #20
 8005f2e:	3114      	adds	r1, #20
 8005f30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005f34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005f38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005f3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005f40:	4295      	cmp	r5, r2
 8005f42:	d003      	beq.n	8005f4c <__mcmp+0x2c>
 8005f44:	d205      	bcs.n	8005f52 <__mcmp+0x32>
 8005f46:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4a:	bd30      	pop	{r4, r5, pc}
 8005f4c:	42a3      	cmp	r3, r4
 8005f4e:	d3f3      	bcc.n	8005f38 <__mcmp+0x18>
 8005f50:	e7fb      	b.n	8005f4a <__mcmp+0x2a>
 8005f52:	2001      	movs	r0, #1
 8005f54:	e7f9      	b.n	8005f4a <__mcmp+0x2a>
	...

08005f58 <__mdiff>:
 8005f58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f5c:	4689      	mov	r9, r1
 8005f5e:	4606      	mov	r6, r0
 8005f60:	4611      	mov	r1, r2
 8005f62:	4648      	mov	r0, r9
 8005f64:	4614      	mov	r4, r2
 8005f66:	f7ff ffdb 	bl	8005f20 <__mcmp>
 8005f6a:	1e05      	subs	r5, r0, #0
 8005f6c:	d112      	bne.n	8005f94 <__mdiff+0x3c>
 8005f6e:	4629      	mov	r1, r5
 8005f70:	4630      	mov	r0, r6
 8005f72:	f7ff fd11 	bl	8005998 <_Balloc>
 8005f76:	4602      	mov	r2, r0
 8005f78:	b928      	cbnz	r0, 8005f86 <__mdiff+0x2e>
 8005f7a:	4b3f      	ldr	r3, [pc, #252]	@ (8006078 <__mdiff+0x120>)
 8005f7c:	f240 2137 	movw	r1, #567	@ 0x237
 8005f80:	483e      	ldr	r0, [pc, #248]	@ (800607c <__mdiff+0x124>)
 8005f82:	f001 fa19 	bl	80073b8 <__assert_func>
 8005f86:	2301      	movs	r3, #1
 8005f88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	b003      	add	sp, #12
 8005f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f94:	bfbc      	itt	lt
 8005f96:	464b      	movlt	r3, r9
 8005f98:	46a1      	movlt	r9, r4
 8005f9a:	4630      	mov	r0, r6
 8005f9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005fa0:	bfba      	itte	lt
 8005fa2:	461c      	movlt	r4, r3
 8005fa4:	2501      	movlt	r5, #1
 8005fa6:	2500      	movge	r5, #0
 8005fa8:	f7ff fcf6 	bl	8005998 <_Balloc>
 8005fac:	4602      	mov	r2, r0
 8005fae:	b918      	cbnz	r0, 8005fb8 <__mdiff+0x60>
 8005fb0:	4b31      	ldr	r3, [pc, #196]	@ (8006078 <__mdiff+0x120>)
 8005fb2:	f240 2145 	movw	r1, #581	@ 0x245
 8005fb6:	e7e3      	b.n	8005f80 <__mdiff+0x28>
 8005fb8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005fbc:	6926      	ldr	r6, [r4, #16]
 8005fbe:	60c5      	str	r5, [r0, #12]
 8005fc0:	f109 0310 	add.w	r3, r9, #16
 8005fc4:	f109 0514 	add.w	r5, r9, #20
 8005fc8:	f104 0e14 	add.w	lr, r4, #20
 8005fcc:	f100 0b14 	add.w	fp, r0, #20
 8005fd0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005fd4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005fd8:	9301      	str	r3, [sp, #4]
 8005fda:	46d9      	mov	r9, fp
 8005fdc:	f04f 0c00 	mov.w	ip, #0
 8005fe0:	9b01      	ldr	r3, [sp, #4]
 8005fe2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005fe6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005fea:	9301      	str	r3, [sp, #4]
 8005fec:	fa1f f38a 	uxth.w	r3, sl
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	b283      	uxth	r3, r0
 8005ff4:	1acb      	subs	r3, r1, r3
 8005ff6:	0c00      	lsrs	r0, r0, #16
 8005ff8:	4463      	add	r3, ip
 8005ffa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005ffe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006002:	b29b      	uxth	r3, r3
 8006004:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006008:	4576      	cmp	r6, lr
 800600a:	f849 3b04 	str.w	r3, [r9], #4
 800600e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006012:	d8e5      	bhi.n	8005fe0 <__mdiff+0x88>
 8006014:	1b33      	subs	r3, r6, r4
 8006016:	3b15      	subs	r3, #21
 8006018:	f023 0303 	bic.w	r3, r3, #3
 800601c:	3415      	adds	r4, #21
 800601e:	3304      	adds	r3, #4
 8006020:	42a6      	cmp	r6, r4
 8006022:	bf38      	it	cc
 8006024:	2304      	movcc	r3, #4
 8006026:	441d      	add	r5, r3
 8006028:	445b      	add	r3, fp
 800602a:	461e      	mov	r6, r3
 800602c:	462c      	mov	r4, r5
 800602e:	4544      	cmp	r4, r8
 8006030:	d30e      	bcc.n	8006050 <__mdiff+0xf8>
 8006032:	f108 0103 	add.w	r1, r8, #3
 8006036:	1b49      	subs	r1, r1, r5
 8006038:	f021 0103 	bic.w	r1, r1, #3
 800603c:	3d03      	subs	r5, #3
 800603e:	45a8      	cmp	r8, r5
 8006040:	bf38      	it	cc
 8006042:	2100      	movcc	r1, #0
 8006044:	440b      	add	r3, r1
 8006046:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800604a:	b191      	cbz	r1, 8006072 <__mdiff+0x11a>
 800604c:	6117      	str	r7, [r2, #16]
 800604e:	e79d      	b.n	8005f8c <__mdiff+0x34>
 8006050:	f854 1b04 	ldr.w	r1, [r4], #4
 8006054:	46e6      	mov	lr, ip
 8006056:	0c08      	lsrs	r0, r1, #16
 8006058:	fa1c fc81 	uxtah	ip, ip, r1
 800605c:	4471      	add	r1, lr
 800605e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006062:	b289      	uxth	r1, r1
 8006064:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006068:	f846 1b04 	str.w	r1, [r6], #4
 800606c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006070:	e7dd      	b.n	800602e <__mdiff+0xd6>
 8006072:	3f01      	subs	r7, #1
 8006074:	e7e7      	b.n	8006046 <__mdiff+0xee>
 8006076:	bf00      	nop
 8006078:	0800d106 	.word	0x0800d106
 800607c:	0800d117 	.word	0x0800d117

08006080 <__ulp>:
 8006080:	b082      	sub	sp, #8
 8006082:	ed8d 0b00 	vstr	d0, [sp]
 8006086:	9a01      	ldr	r2, [sp, #4]
 8006088:	4b0f      	ldr	r3, [pc, #60]	@ (80060c8 <__ulp+0x48>)
 800608a:	4013      	ands	r3, r2
 800608c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006090:	2b00      	cmp	r3, #0
 8006092:	dc08      	bgt.n	80060a6 <__ulp+0x26>
 8006094:	425b      	negs	r3, r3
 8006096:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800609a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800609e:	da04      	bge.n	80060aa <__ulp+0x2a>
 80060a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80060a4:	4113      	asrs	r3, r2
 80060a6:	2200      	movs	r2, #0
 80060a8:	e008      	b.n	80060bc <__ulp+0x3c>
 80060aa:	f1a2 0314 	sub.w	r3, r2, #20
 80060ae:	2b1e      	cmp	r3, #30
 80060b0:	bfda      	itte	le
 80060b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80060b6:	40da      	lsrle	r2, r3
 80060b8:	2201      	movgt	r2, #1
 80060ba:	2300      	movs	r3, #0
 80060bc:	4619      	mov	r1, r3
 80060be:	4610      	mov	r0, r2
 80060c0:	ec41 0b10 	vmov	d0, r0, r1
 80060c4:	b002      	add	sp, #8
 80060c6:	4770      	bx	lr
 80060c8:	7ff00000 	.word	0x7ff00000

080060cc <__b2d>:
 80060cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060d0:	6906      	ldr	r6, [r0, #16]
 80060d2:	f100 0814 	add.w	r8, r0, #20
 80060d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80060da:	1f37      	subs	r7, r6, #4
 80060dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80060e0:	4610      	mov	r0, r2
 80060e2:	f7ff fd4b 	bl	8005b7c <__hi0bits>
 80060e6:	f1c0 0320 	rsb	r3, r0, #32
 80060ea:	280a      	cmp	r0, #10
 80060ec:	600b      	str	r3, [r1, #0]
 80060ee:	491b      	ldr	r1, [pc, #108]	@ (800615c <__b2d+0x90>)
 80060f0:	dc15      	bgt.n	800611e <__b2d+0x52>
 80060f2:	f1c0 0c0b 	rsb	ip, r0, #11
 80060f6:	fa22 f30c 	lsr.w	r3, r2, ip
 80060fa:	45b8      	cmp	r8, r7
 80060fc:	ea43 0501 	orr.w	r5, r3, r1
 8006100:	bf34      	ite	cc
 8006102:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006106:	2300      	movcs	r3, #0
 8006108:	3015      	adds	r0, #21
 800610a:	fa02 f000 	lsl.w	r0, r2, r0
 800610e:	fa23 f30c 	lsr.w	r3, r3, ip
 8006112:	4303      	orrs	r3, r0
 8006114:	461c      	mov	r4, r3
 8006116:	ec45 4b10 	vmov	d0, r4, r5
 800611a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800611e:	45b8      	cmp	r8, r7
 8006120:	bf3a      	itte	cc
 8006122:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006126:	f1a6 0708 	subcc.w	r7, r6, #8
 800612a:	2300      	movcs	r3, #0
 800612c:	380b      	subs	r0, #11
 800612e:	d012      	beq.n	8006156 <__b2d+0x8a>
 8006130:	f1c0 0120 	rsb	r1, r0, #32
 8006134:	fa23 f401 	lsr.w	r4, r3, r1
 8006138:	4082      	lsls	r2, r0
 800613a:	4322      	orrs	r2, r4
 800613c:	4547      	cmp	r7, r8
 800613e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006142:	bf8c      	ite	hi
 8006144:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006148:	2200      	movls	r2, #0
 800614a:	4083      	lsls	r3, r0
 800614c:	40ca      	lsrs	r2, r1
 800614e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006152:	4313      	orrs	r3, r2
 8006154:	e7de      	b.n	8006114 <__b2d+0x48>
 8006156:	ea42 0501 	orr.w	r5, r2, r1
 800615a:	e7db      	b.n	8006114 <__b2d+0x48>
 800615c:	3ff00000 	.word	0x3ff00000

08006160 <__d2b>:
 8006160:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006164:	460f      	mov	r7, r1
 8006166:	2101      	movs	r1, #1
 8006168:	ec59 8b10 	vmov	r8, r9, d0
 800616c:	4616      	mov	r6, r2
 800616e:	f7ff fc13 	bl	8005998 <_Balloc>
 8006172:	4604      	mov	r4, r0
 8006174:	b930      	cbnz	r0, 8006184 <__d2b+0x24>
 8006176:	4602      	mov	r2, r0
 8006178:	4b23      	ldr	r3, [pc, #140]	@ (8006208 <__d2b+0xa8>)
 800617a:	4824      	ldr	r0, [pc, #144]	@ (800620c <__d2b+0xac>)
 800617c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006180:	f001 f91a 	bl	80073b8 <__assert_func>
 8006184:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006188:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800618c:	b10d      	cbz	r5, 8006192 <__d2b+0x32>
 800618e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006192:	9301      	str	r3, [sp, #4]
 8006194:	f1b8 0300 	subs.w	r3, r8, #0
 8006198:	d023      	beq.n	80061e2 <__d2b+0x82>
 800619a:	4668      	mov	r0, sp
 800619c:	9300      	str	r3, [sp, #0]
 800619e:	f7ff fd0c 	bl	8005bba <__lo0bits>
 80061a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80061a6:	b1d0      	cbz	r0, 80061de <__d2b+0x7e>
 80061a8:	f1c0 0320 	rsb	r3, r0, #32
 80061ac:	fa02 f303 	lsl.w	r3, r2, r3
 80061b0:	430b      	orrs	r3, r1
 80061b2:	40c2      	lsrs	r2, r0
 80061b4:	6163      	str	r3, [r4, #20]
 80061b6:	9201      	str	r2, [sp, #4]
 80061b8:	9b01      	ldr	r3, [sp, #4]
 80061ba:	61a3      	str	r3, [r4, #24]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	bf0c      	ite	eq
 80061c0:	2201      	moveq	r2, #1
 80061c2:	2202      	movne	r2, #2
 80061c4:	6122      	str	r2, [r4, #16]
 80061c6:	b1a5      	cbz	r5, 80061f2 <__d2b+0x92>
 80061c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80061cc:	4405      	add	r5, r0
 80061ce:	603d      	str	r5, [r7, #0]
 80061d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80061d4:	6030      	str	r0, [r6, #0]
 80061d6:	4620      	mov	r0, r4
 80061d8:	b003      	add	sp, #12
 80061da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80061de:	6161      	str	r1, [r4, #20]
 80061e0:	e7ea      	b.n	80061b8 <__d2b+0x58>
 80061e2:	a801      	add	r0, sp, #4
 80061e4:	f7ff fce9 	bl	8005bba <__lo0bits>
 80061e8:	9b01      	ldr	r3, [sp, #4]
 80061ea:	6163      	str	r3, [r4, #20]
 80061ec:	3020      	adds	r0, #32
 80061ee:	2201      	movs	r2, #1
 80061f0:	e7e8      	b.n	80061c4 <__d2b+0x64>
 80061f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80061f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80061fa:	6038      	str	r0, [r7, #0]
 80061fc:	6918      	ldr	r0, [r3, #16]
 80061fe:	f7ff fcbd 	bl	8005b7c <__hi0bits>
 8006202:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006206:	e7e5      	b.n	80061d4 <__d2b+0x74>
 8006208:	0800d106 	.word	0x0800d106
 800620c:	0800d117 	.word	0x0800d117

08006210 <__ratio>:
 8006210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006214:	b085      	sub	sp, #20
 8006216:	e9cd 1000 	strd	r1, r0, [sp]
 800621a:	a902      	add	r1, sp, #8
 800621c:	f7ff ff56 	bl	80060cc <__b2d>
 8006220:	9800      	ldr	r0, [sp, #0]
 8006222:	a903      	add	r1, sp, #12
 8006224:	ec55 4b10 	vmov	r4, r5, d0
 8006228:	f7ff ff50 	bl	80060cc <__b2d>
 800622c:	9b01      	ldr	r3, [sp, #4]
 800622e:	6919      	ldr	r1, [r3, #16]
 8006230:	9b00      	ldr	r3, [sp, #0]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	1ac9      	subs	r1, r1, r3
 8006236:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800623a:	1a9b      	subs	r3, r3, r2
 800623c:	ec5b ab10 	vmov	sl, fp, d0
 8006240:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006244:	2b00      	cmp	r3, #0
 8006246:	bfce      	itee	gt
 8006248:	462a      	movgt	r2, r5
 800624a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800624e:	465a      	movle	r2, fp
 8006250:	462f      	mov	r7, r5
 8006252:	46d9      	mov	r9, fp
 8006254:	bfcc      	ite	gt
 8006256:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800625a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800625e:	464b      	mov	r3, r9
 8006260:	4652      	mov	r2, sl
 8006262:	4620      	mov	r0, r4
 8006264:	4639      	mov	r1, r7
 8006266:	f7fa faf9 	bl	800085c <__aeabi_ddiv>
 800626a:	ec41 0b10 	vmov	d0, r0, r1
 800626e:	b005      	add	sp, #20
 8006270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006274 <__copybits>:
 8006274:	3901      	subs	r1, #1
 8006276:	b570      	push	{r4, r5, r6, lr}
 8006278:	1149      	asrs	r1, r1, #5
 800627a:	6914      	ldr	r4, [r2, #16]
 800627c:	3101      	adds	r1, #1
 800627e:	f102 0314 	add.w	r3, r2, #20
 8006282:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006286:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800628a:	1f05      	subs	r5, r0, #4
 800628c:	42a3      	cmp	r3, r4
 800628e:	d30c      	bcc.n	80062aa <__copybits+0x36>
 8006290:	1aa3      	subs	r3, r4, r2
 8006292:	3b11      	subs	r3, #17
 8006294:	f023 0303 	bic.w	r3, r3, #3
 8006298:	3211      	adds	r2, #17
 800629a:	42a2      	cmp	r2, r4
 800629c:	bf88      	it	hi
 800629e:	2300      	movhi	r3, #0
 80062a0:	4418      	add	r0, r3
 80062a2:	2300      	movs	r3, #0
 80062a4:	4288      	cmp	r0, r1
 80062a6:	d305      	bcc.n	80062b4 <__copybits+0x40>
 80062a8:	bd70      	pop	{r4, r5, r6, pc}
 80062aa:	f853 6b04 	ldr.w	r6, [r3], #4
 80062ae:	f845 6f04 	str.w	r6, [r5, #4]!
 80062b2:	e7eb      	b.n	800628c <__copybits+0x18>
 80062b4:	f840 3b04 	str.w	r3, [r0], #4
 80062b8:	e7f4      	b.n	80062a4 <__copybits+0x30>

080062ba <__any_on>:
 80062ba:	f100 0214 	add.w	r2, r0, #20
 80062be:	6900      	ldr	r0, [r0, #16]
 80062c0:	114b      	asrs	r3, r1, #5
 80062c2:	4298      	cmp	r0, r3
 80062c4:	b510      	push	{r4, lr}
 80062c6:	db11      	blt.n	80062ec <__any_on+0x32>
 80062c8:	dd0a      	ble.n	80062e0 <__any_on+0x26>
 80062ca:	f011 011f 	ands.w	r1, r1, #31
 80062ce:	d007      	beq.n	80062e0 <__any_on+0x26>
 80062d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80062d4:	fa24 f001 	lsr.w	r0, r4, r1
 80062d8:	fa00 f101 	lsl.w	r1, r0, r1
 80062dc:	428c      	cmp	r4, r1
 80062de:	d10b      	bne.n	80062f8 <__any_on+0x3e>
 80062e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d803      	bhi.n	80062f0 <__any_on+0x36>
 80062e8:	2000      	movs	r0, #0
 80062ea:	bd10      	pop	{r4, pc}
 80062ec:	4603      	mov	r3, r0
 80062ee:	e7f7      	b.n	80062e0 <__any_on+0x26>
 80062f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80062f4:	2900      	cmp	r1, #0
 80062f6:	d0f5      	beq.n	80062e4 <__any_on+0x2a>
 80062f8:	2001      	movs	r0, #1
 80062fa:	e7f6      	b.n	80062ea <__any_on+0x30>

080062fc <sulp>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	4604      	mov	r4, r0
 8006300:	460d      	mov	r5, r1
 8006302:	ec45 4b10 	vmov	d0, r4, r5
 8006306:	4616      	mov	r6, r2
 8006308:	f7ff feba 	bl	8006080 <__ulp>
 800630c:	ec51 0b10 	vmov	r0, r1, d0
 8006310:	b17e      	cbz	r6, 8006332 <sulp+0x36>
 8006312:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006316:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800631a:	2b00      	cmp	r3, #0
 800631c:	dd09      	ble.n	8006332 <sulp+0x36>
 800631e:	051b      	lsls	r3, r3, #20
 8006320:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006324:	2400      	movs	r4, #0
 8006326:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800632a:	4622      	mov	r2, r4
 800632c:	462b      	mov	r3, r5
 800632e:	f7fa f96b 	bl	8000608 <__aeabi_dmul>
 8006332:	ec41 0b10 	vmov	d0, r0, r1
 8006336:	bd70      	pop	{r4, r5, r6, pc}

08006338 <_strtod_l>:
 8006338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800633c:	b09f      	sub	sp, #124	@ 0x7c
 800633e:	460c      	mov	r4, r1
 8006340:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006342:	2200      	movs	r2, #0
 8006344:	921a      	str	r2, [sp, #104]	@ 0x68
 8006346:	9005      	str	r0, [sp, #20]
 8006348:	f04f 0a00 	mov.w	sl, #0
 800634c:	f04f 0b00 	mov.w	fp, #0
 8006350:	460a      	mov	r2, r1
 8006352:	9219      	str	r2, [sp, #100]	@ 0x64
 8006354:	7811      	ldrb	r1, [r2, #0]
 8006356:	292b      	cmp	r1, #43	@ 0x2b
 8006358:	d04a      	beq.n	80063f0 <_strtod_l+0xb8>
 800635a:	d838      	bhi.n	80063ce <_strtod_l+0x96>
 800635c:	290d      	cmp	r1, #13
 800635e:	d832      	bhi.n	80063c6 <_strtod_l+0x8e>
 8006360:	2908      	cmp	r1, #8
 8006362:	d832      	bhi.n	80063ca <_strtod_l+0x92>
 8006364:	2900      	cmp	r1, #0
 8006366:	d03b      	beq.n	80063e0 <_strtod_l+0xa8>
 8006368:	2200      	movs	r2, #0
 800636a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800636c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800636e:	782a      	ldrb	r2, [r5, #0]
 8006370:	2a30      	cmp	r2, #48	@ 0x30
 8006372:	f040 80b3 	bne.w	80064dc <_strtod_l+0x1a4>
 8006376:	786a      	ldrb	r2, [r5, #1]
 8006378:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800637c:	2a58      	cmp	r2, #88	@ 0x58
 800637e:	d16e      	bne.n	800645e <_strtod_l+0x126>
 8006380:	9302      	str	r3, [sp, #8]
 8006382:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006384:	9301      	str	r3, [sp, #4]
 8006386:	ab1a      	add	r3, sp, #104	@ 0x68
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	4a8e      	ldr	r2, [pc, #568]	@ (80065c4 <_strtod_l+0x28c>)
 800638c:	9805      	ldr	r0, [sp, #20]
 800638e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006390:	a919      	add	r1, sp, #100	@ 0x64
 8006392:	f001 f8ab 	bl	80074ec <__gethex>
 8006396:	f010 060f 	ands.w	r6, r0, #15
 800639a:	4604      	mov	r4, r0
 800639c:	d005      	beq.n	80063aa <_strtod_l+0x72>
 800639e:	2e06      	cmp	r6, #6
 80063a0:	d128      	bne.n	80063f4 <_strtod_l+0xbc>
 80063a2:	3501      	adds	r5, #1
 80063a4:	2300      	movs	r3, #0
 80063a6:	9519      	str	r5, [sp, #100]	@ 0x64
 80063a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	f040 858e 	bne.w	8006ece <_strtod_l+0xb96>
 80063b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063b4:	b1cb      	cbz	r3, 80063ea <_strtod_l+0xb2>
 80063b6:	4652      	mov	r2, sl
 80063b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80063bc:	ec43 2b10 	vmov	d0, r2, r3
 80063c0:	b01f      	add	sp, #124	@ 0x7c
 80063c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c6:	2920      	cmp	r1, #32
 80063c8:	d1ce      	bne.n	8006368 <_strtod_l+0x30>
 80063ca:	3201      	adds	r2, #1
 80063cc:	e7c1      	b.n	8006352 <_strtod_l+0x1a>
 80063ce:	292d      	cmp	r1, #45	@ 0x2d
 80063d0:	d1ca      	bne.n	8006368 <_strtod_l+0x30>
 80063d2:	2101      	movs	r1, #1
 80063d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80063d6:	1c51      	adds	r1, r2, #1
 80063d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80063da:	7852      	ldrb	r2, [r2, #1]
 80063dc:	2a00      	cmp	r2, #0
 80063de:	d1c5      	bne.n	800636c <_strtod_l+0x34>
 80063e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80063e2:	9419      	str	r4, [sp, #100]	@ 0x64
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f040 8570 	bne.w	8006eca <_strtod_l+0xb92>
 80063ea:	4652      	mov	r2, sl
 80063ec:	465b      	mov	r3, fp
 80063ee:	e7e5      	b.n	80063bc <_strtod_l+0x84>
 80063f0:	2100      	movs	r1, #0
 80063f2:	e7ef      	b.n	80063d4 <_strtod_l+0x9c>
 80063f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80063f6:	b13a      	cbz	r2, 8006408 <_strtod_l+0xd0>
 80063f8:	2135      	movs	r1, #53	@ 0x35
 80063fa:	a81c      	add	r0, sp, #112	@ 0x70
 80063fc:	f7ff ff3a 	bl	8006274 <__copybits>
 8006400:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006402:	9805      	ldr	r0, [sp, #20]
 8006404:	f7ff fb08 	bl	8005a18 <_Bfree>
 8006408:	3e01      	subs	r6, #1
 800640a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800640c:	2e04      	cmp	r6, #4
 800640e:	d806      	bhi.n	800641e <_strtod_l+0xe6>
 8006410:	e8df f006 	tbb	[pc, r6]
 8006414:	201d0314 	.word	0x201d0314
 8006418:	14          	.byte	0x14
 8006419:	00          	.byte	0x00
 800641a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800641e:	05e1      	lsls	r1, r4, #23
 8006420:	bf48      	it	mi
 8006422:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006426:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800642a:	0d1b      	lsrs	r3, r3, #20
 800642c:	051b      	lsls	r3, r3, #20
 800642e:	2b00      	cmp	r3, #0
 8006430:	d1bb      	bne.n	80063aa <_strtod_l+0x72>
 8006432:	f7fe fb31 	bl	8004a98 <__errno>
 8006436:	2322      	movs	r3, #34	@ 0x22
 8006438:	6003      	str	r3, [r0, #0]
 800643a:	e7b6      	b.n	80063aa <_strtod_l+0x72>
 800643c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006440:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006444:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006448:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800644c:	e7e7      	b.n	800641e <_strtod_l+0xe6>
 800644e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80065cc <_strtod_l+0x294>
 8006452:	e7e4      	b.n	800641e <_strtod_l+0xe6>
 8006454:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006458:	f04f 3aff 	mov.w	sl, #4294967295
 800645c:	e7df      	b.n	800641e <_strtod_l+0xe6>
 800645e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006460:	1c5a      	adds	r2, r3, #1
 8006462:	9219      	str	r2, [sp, #100]	@ 0x64
 8006464:	785b      	ldrb	r3, [r3, #1]
 8006466:	2b30      	cmp	r3, #48	@ 0x30
 8006468:	d0f9      	beq.n	800645e <_strtod_l+0x126>
 800646a:	2b00      	cmp	r3, #0
 800646c:	d09d      	beq.n	80063aa <_strtod_l+0x72>
 800646e:	2301      	movs	r3, #1
 8006470:	9309      	str	r3, [sp, #36]	@ 0x24
 8006472:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006474:	930c      	str	r3, [sp, #48]	@ 0x30
 8006476:	2300      	movs	r3, #0
 8006478:	9308      	str	r3, [sp, #32]
 800647a:	930a      	str	r3, [sp, #40]	@ 0x28
 800647c:	461f      	mov	r7, r3
 800647e:	220a      	movs	r2, #10
 8006480:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006482:	7805      	ldrb	r5, [r0, #0]
 8006484:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006488:	b2d9      	uxtb	r1, r3
 800648a:	2909      	cmp	r1, #9
 800648c:	d928      	bls.n	80064e0 <_strtod_l+0x1a8>
 800648e:	494e      	ldr	r1, [pc, #312]	@ (80065c8 <_strtod_l+0x290>)
 8006490:	2201      	movs	r2, #1
 8006492:	f000 ff59 	bl	8007348 <strncmp>
 8006496:	2800      	cmp	r0, #0
 8006498:	d032      	beq.n	8006500 <_strtod_l+0x1c8>
 800649a:	2000      	movs	r0, #0
 800649c:	462a      	mov	r2, r5
 800649e:	4681      	mov	r9, r0
 80064a0:	463d      	mov	r5, r7
 80064a2:	4603      	mov	r3, r0
 80064a4:	2a65      	cmp	r2, #101	@ 0x65
 80064a6:	d001      	beq.n	80064ac <_strtod_l+0x174>
 80064a8:	2a45      	cmp	r2, #69	@ 0x45
 80064aa:	d114      	bne.n	80064d6 <_strtod_l+0x19e>
 80064ac:	b91d      	cbnz	r5, 80064b6 <_strtod_l+0x17e>
 80064ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064b0:	4302      	orrs	r2, r0
 80064b2:	d095      	beq.n	80063e0 <_strtod_l+0xa8>
 80064b4:	2500      	movs	r5, #0
 80064b6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80064b8:	1c62      	adds	r2, r4, #1
 80064ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80064bc:	7862      	ldrb	r2, [r4, #1]
 80064be:	2a2b      	cmp	r2, #43	@ 0x2b
 80064c0:	d077      	beq.n	80065b2 <_strtod_l+0x27a>
 80064c2:	2a2d      	cmp	r2, #45	@ 0x2d
 80064c4:	d07b      	beq.n	80065be <_strtod_l+0x286>
 80064c6:	f04f 0c00 	mov.w	ip, #0
 80064ca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80064ce:	2909      	cmp	r1, #9
 80064d0:	f240 8082 	bls.w	80065d8 <_strtod_l+0x2a0>
 80064d4:	9419      	str	r4, [sp, #100]	@ 0x64
 80064d6:	f04f 0800 	mov.w	r8, #0
 80064da:	e0a2      	b.n	8006622 <_strtod_l+0x2ea>
 80064dc:	2300      	movs	r3, #0
 80064de:	e7c7      	b.n	8006470 <_strtod_l+0x138>
 80064e0:	2f08      	cmp	r7, #8
 80064e2:	bfd5      	itete	le
 80064e4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80064e6:	9908      	ldrgt	r1, [sp, #32]
 80064e8:	fb02 3301 	mlale	r3, r2, r1, r3
 80064ec:	fb02 3301 	mlagt	r3, r2, r1, r3
 80064f0:	f100 0001 	add.w	r0, r0, #1
 80064f4:	bfd4      	ite	le
 80064f6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80064f8:	9308      	strgt	r3, [sp, #32]
 80064fa:	3701      	adds	r7, #1
 80064fc:	9019      	str	r0, [sp, #100]	@ 0x64
 80064fe:	e7bf      	b.n	8006480 <_strtod_l+0x148>
 8006500:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006502:	1c5a      	adds	r2, r3, #1
 8006504:	9219      	str	r2, [sp, #100]	@ 0x64
 8006506:	785a      	ldrb	r2, [r3, #1]
 8006508:	b37f      	cbz	r7, 800656a <_strtod_l+0x232>
 800650a:	4681      	mov	r9, r0
 800650c:	463d      	mov	r5, r7
 800650e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006512:	2b09      	cmp	r3, #9
 8006514:	d912      	bls.n	800653c <_strtod_l+0x204>
 8006516:	2301      	movs	r3, #1
 8006518:	e7c4      	b.n	80064a4 <_strtod_l+0x16c>
 800651a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800651c:	1c5a      	adds	r2, r3, #1
 800651e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006520:	785a      	ldrb	r2, [r3, #1]
 8006522:	3001      	adds	r0, #1
 8006524:	2a30      	cmp	r2, #48	@ 0x30
 8006526:	d0f8      	beq.n	800651a <_strtod_l+0x1e2>
 8006528:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800652c:	2b08      	cmp	r3, #8
 800652e:	f200 84d3 	bhi.w	8006ed8 <_strtod_l+0xba0>
 8006532:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006534:	930c      	str	r3, [sp, #48]	@ 0x30
 8006536:	4681      	mov	r9, r0
 8006538:	2000      	movs	r0, #0
 800653a:	4605      	mov	r5, r0
 800653c:	3a30      	subs	r2, #48	@ 0x30
 800653e:	f100 0301 	add.w	r3, r0, #1
 8006542:	d02a      	beq.n	800659a <_strtod_l+0x262>
 8006544:	4499      	add	r9, r3
 8006546:	eb00 0c05 	add.w	ip, r0, r5
 800654a:	462b      	mov	r3, r5
 800654c:	210a      	movs	r1, #10
 800654e:	4563      	cmp	r3, ip
 8006550:	d10d      	bne.n	800656e <_strtod_l+0x236>
 8006552:	1c69      	adds	r1, r5, #1
 8006554:	4401      	add	r1, r0
 8006556:	4428      	add	r0, r5
 8006558:	2808      	cmp	r0, #8
 800655a:	dc16      	bgt.n	800658a <_strtod_l+0x252>
 800655c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800655e:	230a      	movs	r3, #10
 8006560:	fb03 2300 	mla	r3, r3, r0, r2
 8006564:	930a      	str	r3, [sp, #40]	@ 0x28
 8006566:	2300      	movs	r3, #0
 8006568:	e018      	b.n	800659c <_strtod_l+0x264>
 800656a:	4638      	mov	r0, r7
 800656c:	e7da      	b.n	8006524 <_strtod_l+0x1ec>
 800656e:	2b08      	cmp	r3, #8
 8006570:	f103 0301 	add.w	r3, r3, #1
 8006574:	dc03      	bgt.n	800657e <_strtod_l+0x246>
 8006576:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006578:	434e      	muls	r6, r1
 800657a:	960a      	str	r6, [sp, #40]	@ 0x28
 800657c:	e7e7      	b.n	800654e <_strtod_l+0x216>
 800657e:	2b10      	cmp	r3, #16
 8006580:	bfde      	ittt	le
 8006582:	9e08      	ldrle	r6, [sp, #32]
 8006584:	434e      	mulle	r6, r1
 8006586:	9608      	strle	r6, [sp, #32]
 8006588:	e7e1      	b.n	800654e <_strtod_l+0x216>
 800658a:	280f      	cmp	r0, #15
 800658c:	dceb      	bgt.n	8006566 <_strtod_l+0x22e>
 800658e:	9808      	ldr	r0, [sp, #32]
 8006590:	230a      	movs	r3, #10
 8006592:	fb03 2300 	mla	r3, r3, r0, r2
 8006596:	9308      	str	r3, [sp, #32]
 8006598:	e7e5      	b.n	8006566 <_strtod_l+0x22e>
 800659a:	4629      	mov	r1, r5
 800659c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800659e:	1c50      	adds	r0, r2, #1
 80065a0:	9019      	str	r0, [sp, #100]	@ 0x64
 80065a2:	7852      	ldrb	r2, [r2, #1]
 80065a4:	4618      	mov	r0, r3
 80065a6:	460d      	mov	r5, r1
 80065a8:	e7b1      	b.n	800650e <_strtod_l+0x1d6>
 80065aa:	f04f 0900 	mov.w	r9, #0
 80065ae:	2301      	movs	r3, #1
 80065b0:	e77d      	b.n	80064ae <_strtod_l+0x176>
 80065b2:	f04f 0c00 	mov.w	ip, #0
 80065b6:	1ca2      	adds	r2, r4, #2
 80065b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80065ba:	78a2      	ldrb	r2, [r4, #2]
 80065bc:	e785      	b.n	80064ca <_strtod_l+0x192>
 80065be:	f04f 0c01 	mov.w	ip, #1
 80065c2:	e7f8      	b.n	80065b6 <_strtod_l+0x27e>
 80065c4:	0800d288 	.word	0x0800d288
 80065c8:	0800d270 	.word	0x0800d270
 80065cc:	7ff00000 	.word	0x7ff00000
 80065d0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80065d2:	1c51      	adds	r1, r2, #1
 80065d4:	9119      	str	r1, [sp, #100]	@ 0x64
 80065d6:	7852      	ldrb	r2, [r2, #1]
 80065d8:	2a30      	cmp	r2, #48	@ 0x30
 80065da:	d0f9      	beq.n	80065d0 <_strtod_l+0x298>
 80065dc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80065e0:	2908      	cmp	r1, #8
 80065e2:	f63f af78 	bhi.w	80064d6 <_strtod_l+0x19e>
 80065e6:	3a30      	subs	r2, #48	@ 0x30
 80065e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80065ea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80065ec:	920f      	str	r2, [sp, #60]	@ 0x3c
 80065ee:	f04f 080a 	mov.w	r8, #10
 80065f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80065f4:	1c56      	adds	r6, r2, #1
 80065f6:	9619      	str	r6, [sp, #100]	@ 0x64
 80065f8:	7852      	ldrb	r2, [r2, #1]
 80065fa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80065fe:	f1be 0f09 	cmp.w	lr, #9
 8006602:	d939      	bls.n	8006678 <_strtod_l+0x340>
 8006604:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006606:	1a76      	subs	r6, r6, r1
 8006608:	2e08      	cmp	r6, #8
 800660a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800660e:	dc03      	bgt.n	8006618 <_strtod_l+0x2e0>
 8006610:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006612:	4588      	cmp	r8, r1
 8006614:	bfa8      	it	ge
 8006616:	4688      	movge	r8, r1
 8006618:	f1bc 0f00 	cmp.w	ip, #0
 800661c:	d001      	beq.n	8006622 <_strtod_l+0x2ea>
 800661e:	f1c8 0800 	rsb	r8, r8, #0
 8006622:	2d00      	cmp	r5, #0
 8006624:	d14e      	bne.n	80066c4 <_strtod_l+0x38c>
 8006626:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006628:	4308      	orrs	r0, r1
 800662a:	f47f aebe 	bne.w	80063aa <_strtod_l+0x72>
 800662e:	2b00      	cmp	r3, #0
 8006630:	f47f aed6 	bne.w	80063e0 <_strtod_l+0xa8>
 8006634:	2a69      	cmp	r2, #105	@ 0x69
 8006636:	d028      	beq.n	800668a <_strtod_l+0x352>
 8006638:	dc25      	bgt.n	8006686 <_strtod_l+0x34e>
 800663a:	2a49      	cmp	r2, #73	@ 0x49
 800663c:	d025      	beq.n	800668a <_strtod_l+0x352>
 800663e:	2a4e      	cmp	r2, #78	@ 0x4e
 8006640:	f47f aece 	bne.w	80063e0 <_strtod_l+0xa8>
 8006644:	499b      	ldr	r1, [pc, #620]	@ (80068b4 <_strtod_l+0x57c>)
 8006646:	a819      	add	r0, sp, #100	@ 0x64
 8006648:	f001 f972 	bl	8007930 <__match>
 800664c:	2800      	cmp	r0, #0
 800664e:	f43f aec7 	beq.w	80063e0 <_strtod_l+0xa8>
 8006652:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	2b28      	cmp	r3, #40	@ 0x28
 8006658:	d12e      	bne.n	80066b8 <_strtod_l+0x380>
 800665a:	4997      	ldr	r1, [pc, #604]	@ (80068b8 <_strtod_l+0x580>)
 800665c:	aa1c      	add	r2, sp, #112	@ 0x70
 800665e:	a819      	add	r0, sp, #100	@ 0x64
 8006660:	f001 f97a 	bl	8007958 <__hexnan>
 8006664:	2805      	cmp	r0, #5
 8006666:	d127      	bne.n	80066b8 <_strtod_l+0x380>
 8006668:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800666a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800666e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006672:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006676:	e698      	b.n	80063aa <_strtod_l+0x72>
 8006678:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800667a:	fb08 2101 	mla	r1, r8, r1, r2
 800667e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006682:	920e      	str	r2, [sp, #56]	@ 0x38
 8006684:	e7b5      	b.n	80065f2 <_strtod_l+0x2ba>
 8006686:	2a6e      	cmp	r2, #110	@ 0x6e
 8006688:	e7da      	b.n	8006640 <_strtod_l+0x308>
 800668a:	498c      	ldr	r1, [pc, #560]	@ (80068bc <_strtod_l+0x584>)
 800668c:	a819      	add	r0, sp, #100	@ 0x64
 800668e:	f001 f94f 	bl	8007930 <__match>
 8006692:	2800      	cmp	r0, #0
 8006694:	f43f aea4 	beq.w	80063e0 <_strtod_l+0xa8>
 8006698:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800669a:	4989      	ldr	r1, [pc, #548]	@ (80068c0 <_strtod_l+0x588>)
 800669c:	3b01      	subs	r3, #1
 800669e:	a819      	add	r0, sp, #100	@ 0x64
 80066a0:	9319      	str	r3, [sp, #100]	@ 0x64
 80066a2:	f001 f945 	bl	8007930 <__match>
 80066a6:	b910      	cbnz	r0, 80066ae <_strtod_l+0x376>
 80066a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066aa:	3301      	adds	r3, #1
 80066ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80066ae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80068d0 <_strtod_l+0x598>
 80066b2:	f04f 0a00 	mov.w	sl, #0
 80066b6:	e678      	b.n	80063aa <_strtod_l+0x72>
 80066b8:	4882      	ldr	r0, [pc, #520]	@ (80068c4 <_strtod_l+0x58c>)
 80066ba:	f000 fe75 	bl	80073a8 <nan>
 80066be:	ec5b ab10 	vmov	sl, fp, d0
 80066c2:	e672      	b.n	80063aa <_strtod_l+0x72>
 80066c4:	eba8 0309 	sub.w	r3, r8, r9
 80066c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80066ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80066cc:	2f00      	cmp	r7, #0
 80066ce:	bf08      	it	eq
 80066d0:	462f      	moveq	r7, r5
 80066d2:	2d10      	cmp	r5, #16
 80066d4:	462c      	mov	r4, r5
 80066d6:	bfa8      	it	ge
 80066d8:	2410      	movge	r4, #16
 80066da:	f7f9 ff1b 	bl	8000514 <__aeabi_ui2d>
 80066de:	2d09      	cmp	r5, #9
 80066e0:	4682      	mov	sl, r0
 80066e2:	468b      	mov	fp, r1
 80066e4:	dc13      	bgt.n	800670e <_strtod_l+0x3d6>
 80066e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f43f ae5e 	beq.w	80063aa <_strtod_l+0x72>
 80066ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066f0:	dd78      	ble.n	80067e4 <_strtod_l+0x4ac>
 80066f2:	2b16      	cmp	r3, #22
 80066f4:	dc5f      	bgt.n	80067b6 <_strtod_l+0x47e>
 80066f6:	4974      	ldr	r1, [pc, #464]	@ (80068c8 <_strtod_l+0x590>)
 80066f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80066fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006700:	4652      	mov	r2, sl
 8006702:	465b      	mov	r3, fp
 8006704:	f7f9 ff80 	bl	8000608 <__aeabi_dmul>
 8006708:	4682      	mov	sl, r0
 800670a:	468b      	mov	fp, r1
 800670c:	e64d      	b.n	80063aa <_strtod_l+0x72>
 800670e:	4b6e      	ldr	r3, [pc, #440]	@ (80068c8 <_strtod_l+0x590>)
 8006710:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006714:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006718:	f7f9 ff76 	bl	8000608 <__aeabi_dmul>
 800671c:	4682      	mov	sl, r0
 800671e:	9808      	ldr	r0, [sp, #32]
 8006720:	468b      	mov	fp, r1
 8006722:	f7f9 fef7 	bl	8000514 <__aeabi_ui2d>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	4650      	mov	r0, sl
 800672c:	4659      	mov	r1, fp
 800672e:	f7f9 fdb5 	bl	800029c <__adddf3>
 8006732:	2d0f      	cmp	r5, #15
 8006734:	4682      	mov	sl, r0
 8006736:	468b      	mov	fp, r1
 8006738:	ddd5      	ble.n	80066e6 <_strtod_l+0x3ae>
 800673a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800673c:	1b2c      	subs	r4, r5, r4
 800673e:	441c      	add	r4, r3
 8006740:	2c00      	cmp	r4, #0
 8006742:	f340 8096 	ble.w	8006872 <_strtod_l+0x53a>
 8006746:	f014 030f 	ands.w	r3, r4, #15
 800674a:	d00a      	beq.n	8006762 <_strtod_l+0x42a>
 800674c:	495e      	ldr	r1, [pc, #376]	@ (80068c8 <_strtod_l+0x590>)
 800674e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006752:	4652      	mov	r2, sl
 8006754:	465b      	mov	r3, fp
 8006756:	e9d1 0100 	ldrd	r0, r1, [r1]
 800675a:	f7f9 ff55 	bl	8000608 <__aeabi_dmul>
 800675e:	4682      	mov	sl, r0
 8006760:	468b      	mov	fp, r1
 8006762:	f034 040f 	bics.w	r4, r4, #15
 8006766:	d073      	beq.n	8006850 <_strtod_l+0x518>
 8006768:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800676c:	dd48      	ble.n	8006800 <_strtod_l+0x4c8>
 800676e:	2400      	movs	r4, #0
 8006770:	46a0      	mov	r8, r4
 8006772:	940a      	str	r4, [sp, #40]	@ 0x28
 8006774:	46a1      	mov	r9, r4
 8006776:	9a05      	ldr	r2, [sp, #20]
 8006778:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80068d0 <_strtod_l+0x598>
 800677c:	2322      	movs	r3, #34	@ 0x22
 800677e:	6013      	str	r3, [r2, #0]
 8006780:	f04f 0a00 	mov.w	sl, #0
 8006784:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006786:	2b00      	cmp	r3, #0
 8006788:	f43f ae0f 	beq.w	80063aa <_strtod_l+0x72>
 800678c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800678e:	9805      	ldr	r0, [sp, #20]
 8006790:	f7ff f942 	bl	8005a18 <_Bfree>
 8006794:	9805      	ldr	r0, [sp, #20]
 8006796:	4649      	mov	r1, r9
 8006798:	f7ff f93e 	bl	8005a18 <_Bfree>
 800679c:	9805      	ldr	r0, [sp, #20]
 800679e:	4641      	mov	r1, r8
 80067a0:	f7ff f93a 	bl	8005a18 <_Bfree>
 80067a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80067a6:	9805      	ldr	r0, [sp, #20]
 80067a8:	f7ff f936 	bl	8005a18 <_Bfree>
 80067ac:	9805      	ldr	r0, [sp, #20]
 80067ae:	4621      	mov	r1, r4
 80067b0:	f7ff f932 	bl	8005a18 <_Bfree>
 80067b4:	e5f9      	b.n	80063aa <_strtod_l+0x72>
 80067b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80067bc:	4293      	cmp	r3, r2
 80067be:	dbbc      	blt.n	800673a <_strtod_l+0x402>
 80067c0:	4c41      	ldr	r4, [pc, #260]	@ (80068c8 <_strtod_l+0x590>)
 80067c2:	f1c5 050f 	rsb	r5, r5, #15
 80067c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80067ca:	4652      	mov	r2, sl
 80067cc:	465b      	mov	r3, fp
 80067ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067d2:	f7f9 ff19 	bl	8000608 <__aeabi_dmul>
 80067d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067d8:	1b5d      	subs	r5, r3, r5
 80067da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80067de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80067e2:	e78f      	b.n	8006704 <_strtod_l+0x3cc>
 80067e4:	3316      	adds	r3, #22
 80067e6:	dba8      	blt.n	800673a <_strtod_l+0x402>
 80067e8:	4b37      	ldr	r3, [pc, #220]	@ (80068c8 <_strtod_l+0x590>)
 80067ea:	eba9 0808 	sub.w	r8, r9, r8
 80067ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80067f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80067f6:	4650      	mov	r0, sl
 80067f8:	4659      	mov	r1, fp
 80067fa:	f7fa f82f 	bl	800085c <__aeabi_ddiv>
 80067fe:	e783      	b.n	8006708 <_strtod_l+0x3d0>
 8006800:	4b32      	ldr	r3, [pc, #200]	@ (80068cc <_strtod_l+0x594>)
 8006802:	9308      	str	r3, [sp, #32]
 8006804:	2300      	movs	r3, #0
 8006806:	1124      	asrs	r4, r4, #4
 8006808:	4650      	mov	r0, sl
 800680a:	4659      	mov	r1, fp
 800680c:	461e      	mov	r6, r3
 800680e:	2c01      	cmp	r4, #1
 8006810:	dc21      	bgt.n	8006856 <_strtod_l+0x51e>
 8006812:	b10b      	cbz	r3, 8006818 <_strtod_l+0x4e0>
 8006814:	4682      	mov	sl, r0
 8006816:	468b      	mov	fp, r1
 8006818:	492c      	ldr	r1, [pc, #176]	@ (80068cc <_strtod_l+0x594>)
 800681a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800681e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006822:	4652      	mov	r2, sl
 8006824:	465b      	mov	r3, fp
 8006826:	e9d1 0100 	ldrd	r0, r1, [r1]
 800682a:	f7f9 feed 	bl	8000608 <__aeabi_dmul>
 800682e:	4b28      	ldr	r3, [pc, #160]	@ (80068d0 <_strtod_l+0x598>)
 8006830:	460a      	mov	r2, r1
 8006832:	400b      	ands	r3, r1
 8006834:	4927      	ldr	r1, [pc, #156]	@ (80068d4 <_strtod_l+0x59c>)
 8006836:	428b      	cmp	r3, r1
 8006838:	4682      	mov	sl, r0
 800683a:	d898      	bhi.n	800676e <_strtod_l+0x436>
 800683c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006840:	428b      	cmp	r3, r1
 8006842:	bf86      	itte	hi
 8006844:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80068d8 <_strtod_l+0x5a0>
 8006848:	f04f 3aff 	movhi.w	sl, #4294967295
 800684c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006850:	2300      	movs	r3, #0
 8006852:	9308      	str	r3, [sp, #32]
 8006854:	e07a      	b.n	800694c <_strtod_l+0x614>
 8006856:	07e2      	lsls	r2, r4, #31
 8006858:	d505      	bpl.n	8006866 <_strtod_l+0x52e>
 800685a:	9b08      	ldr	r3, [sp, #32]
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	f7f9 fed2 	bl	8000608 <__aeabi_dmul>
 8006864:	2301      	movs	r3, #1
 8006866:	9a08      	ldr	r2, [sp, #32]
 8006868:	3208      	adds	r2, #8
 800686a:	3601      	adds	r6, #1
 800686c:	1064      	asrs	r4, r4, #1
 800686e:	9208      	str	r2, [sp, #32]
 8006870:	e7cd      	b.n	800680e <_strtod_l+0x4d6>
 8006872:	d0ed      	beq.n	8006850 <_strtod_l+0x518>
 8006874:	4264      	negs	r4, r4
 8006876:	f014 020f 	ands.w	r2, r4, #15
 800687a:	d00a      	beq.n	8006892 <_strtod_l+0x55a>
 800687c:	4b12      	ldr	r3, [pc, #72]	@ (80068c8 <_strtod_l+0x590>)
 800687e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006882:	4650      	mov	r0, sl
 8006884:	4659      	mov	r1, fp
 8006886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688a:	f7f9 ffe7 	bl	800085c <__aeabi_ddiv>
 800688e:	4682      	mov	sl, r0
 8006890:	468b      	mov	fp, r1
 8006892:	1124      	asrs	r4, r4, #4
 8006894:	d0dc      	beq.n	8006850 <_strtod_l+0x518>
 8006896:	2c1f      	cmp	r4, #31
 8006898:	dd20      	ble.n	80068dc <_strtod_l+0x5a4>
 800689a:	2400      	movs	r4, #0
 800689c:	46a0      	mov	r8, r4
 800689e:	940a      	str	r4, [sp, #40]	@ 0x28
 80068a0:	46a1      	mov	r9, r4
 80068a2:	9a05      	ldr	r2, [sp, #20]
 80068a4:	2322      	movs	r3, #34	@ 0x22
 80068a6:	f04f 0a00 	mov.w	sl, #0
 80068aa:	f04f 0b00 	mov.w	fp, #0
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	e768      	b.n	8006784 <_strtod_l+0x44c>
 80068b2:	bf00      	nop
 80068b4:	0800d05e 	.word	0x0800d05e
 80068b8:	0800d274 	.word	0x0800d274
 80068bc:	0800d056 	.word	0x0800d056
 80068c0:	0800d08d 	.word	0x0800d08d
 80068c4:	0800d31c 	.word	0x0800d31c
 80068c8:	0800d1a8 	.word	0x0800d1a8
 80068cc:	0800d180 	.word	0x0800d180
 80068d0:	7ff00000 	.word	0x7ff00000
 80068d4:	7ca00000 	.word	0x7ca00000
 80068d8:	7fefffff 	.word	0x7fefffff
 80068dc:	f014 0310 	ands.w	r3, r4, #16
 80068e0:	bf18      	it	ne
 80068e2:	236a      	movne	r3, #106	@ 0x6a
 80068e4:	4ea9      	ldr	r6, [pc, #676]	@ (8006b8c <_strtod_l+0x854>)
 80068e6:	9308      	str	r3, [sp, #32]
 80068e8:	4650      	mov	r0, sl
 80068ea:	4659      	mov	r1, fp
 80068ec:	2300      	movs	r3, #0
 80068ee:	07e2      	lsls	r2, r4, #31
 80068f0:	d504      	bpl.n	80068fc <_strtod_l+0x5c4>
 80068f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80068f6:	f7f9 fe87 	bl	8000608 <__aeabi_dmul>
 80068fa:	2301      	movs	r3, #1
 80068fc:	1064      	asrs	r4, r4, #1
 80068fe:	f106 0608 	add.w	r6, r6, #8
 8006902:	d1f4      	bne.n	80068ee <_strtod_l+0x5b6>
 8006904:	b10b      	cbz	r3, 800690a <_strtod_l+0x5d2>
 8006906:	4682      	mov	sl, r0
 8006908:	468b      	mov	fp, r1
 800690a:	9b08      	ldr	r3, [sp, #32]
 800690c:	b1b3      	cbz	r3, 800693c <_strtod_l+0x604>
 800690e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006912:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006916:	2b00      	cmp	r3, #0
 8006918:	4659      	mov	r1, fp
 800691a:	dd0f      	ble.n	800693c <_strtod_l+0x604>
 800691c:	2b1f      	cmp	r3, #31
 800691e:	dd55      	ble.n	80069cc <_strtod_l+0x694>
 8006920:	2b34      	cmp	r3, #52	@ 0x34
 8006922:	bfde      	ittt	le
 8006924:	f04f 33ff 	movle.w	r3, #4294967295
 8006928:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800692c:	4093      	lslle	r3, r2
 800692e:	f04f 0a00 	mov.w	sl, #0
 8006932:	bfcc      	ite	gt
 8006934:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006938:	ea03 0b01 	andle.w	fp, r3, r1
 800693c:	2200      	movs	r2, #0
 800693e:	2300      	movs	r3, #0
 8006940:	4650      	mov	r0, sl
 8006942:	4659      	mov	r1, fp
 8006944:	f7fa f8c8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006948:	2800      	cmp	r0, #0
 800694a:	d1a6      	bne.n	800689a <_strtod_l+0x562>
 800694c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006952:	9805      	ldr	r0, [sp, #20]
 8006954:	462b      	mov	r3, r5
 8006956:	463a      	mov	r2, r7
 8006958:	f7ff f8c6 	bl	8005ae8 <__s2b>
 800695c:	900a      	str	r0, [sp, #40]	@ 0x28
 800695e:	2800      	cmp	r0, #0
 8006960:	f43f af05 	beq.w	800676e <_strtod_l+0x436>
 8006964:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006966:	2a00      	cmp	r2, #0
 8006968:	eba9 0308 	sub.w	r3, r9, r8
 800696c:	bfa8      	it	ge
 800696e:	2300      	movge	r3, #0
 8006970:	9312      	str	r3, [sp, #72]	@ 0x48
 8006972:	2400      	movs	r4, #0
 8006974:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006978:	9316      	str	r3, [sp, #88]	@ 0x58
 800697a:	46a0      	mov	r8, r4
 800697c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800697e:	9805      	ldr	r0, [sp, #20]
 8006980:	6859      	ldr	r1, [r3, #4]
 8006982:	f7ff f809 	bl	8005998 <_Balloc>
 8006986:	4681      	mov	r9, r0
 8006988:	2800      	cmp	r0, #0
 800698a:	f43f aef4 	beq.w	8006776 <_strtod_l+0x43e>
 800698e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006990:	691a      	ldr	r2, [r3, #16]
 8006992:	3202      	adds	r2, #2
 8006994:	f103 010c 	add.w	r1, r3, #12
 8006998:	0092      	lsls	r2, r2, #2
 800699a:	300c      	adds	r0, #12
 800699c:	f000 fcf6 	bl	800738c <memcpy>
 80069a0:	ec4b ab10 	vmov	d0, sl, fp
 80069a4:	9805      	ldr	r0, [sp, #20]
 80069a6:	aa1c      	add	r2, sp, #112	@ 0x70
 80069a8:	a91b      	add	r1, sp, #108	@ 0x6c
 80069aa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80069ae:	f7ff fbd7 	bl	8006160 <__d2b>
 80069b2:	901a      	str	r0, [sp, #104]	@ 0x68
 80069b4:	2800      	cmp	r0, #0
 80069b6:	f43f aede 	beq.w	8006776 <_strtod_l+0x43e>
 80069ba:	9805      	ldr	r0, [sp, #20]
 80069bc:	2101      	movs	r1, #1
 80069be:	f7ff f929 	bl	8005c14 <__i2b>
 80069c2:	4680      	mov	r8, r0
 80069c4:	b948      	cbnz	r0, 80069da <_strtod_l+0x6a2>
 80069c6:	f04f 0800 	mov.w	r8, #0
 80069ca:	e6d4      	b.n	8006776 <_strtod_l+0x43e>
 80069cc:	f04f 32ff 	mov.w	r2, #4294967295
 80069d0:	fa02 f303 	lsl.w	r3, r2, r3
 80069d4:	ea03 0a0a 	and.w	sl, r3, sl
 80069d8:	e7b0      	b.n	800693c <_strtod_l+0x604>
 80069da:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80069dc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80069de:	2d00      	cmp	r5, #0
 80069e0:	bfab      	itete	ge
 80069e2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80069e4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80069e6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80069e8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80069ea:	bfac      	ite	ge
 80069ec:	18ef      	addge	r7, r5, r3
 80069ee:	1b5e      	sublt	r6, r3, r5
 80069f0:	9b08      	ldr	r3, [sp, #32]
 80069f2:	1aed      	subs	r5, r5, r3
 80069f4:	4415      	add	r5, r2
 80069f6:	4b66      	ldr	r3, [pc, #408]	@ (8006b90 <_strtod_l+0x858>)
 80069f8:	3d01      	subs	r5, #1
 80069fa:	429d      	cmp	r5, r3
 80069fc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006a00:	da50      	bge.n	8006aa4 <_strtod_l+0x76c>
 8006a02:	1b5b      	subs	r3, r3, r5
 8006a04:	2b1f      	cmp	r3, #31
 8006a06:	eba2 0203 	sub.w	r2, r2, r3
 8006a0a:	f04f 0101 	mov.w	r1, #1
 8006a0e:	dc3d      	bgt.n	8006a8c <_strtod_l+0x754>
 8006a10:	fa01 f303 	lsl.w	r3, r1, r3
 8006a14:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a16:	2300      	movs	r3, #0
 8006a18:	9310      	str	r3, [sp, #64]	@ 0x40
 8006a1a:	18bd      	adds	r5, r7, r2
 8006a1c:	9b08      	ldr	r3, [sp, #32]
 8006a1e:	42af      	cmp	r7, r5
 8006a20:	4416      	add	r6, r2
 8006a22:	441e      	add	r6, r3
 8006a24:	463b      	mov	r3, r7
 8006a26:	bfa8      	it	ge
 8006a28:	462b      	movge	r3, r5
 8006a2a:	42b3      	cmp	r3, r6
 8006a2c:	bfa8      	it	ge
 8006a2e:	4633      	movge	r3, r6
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	bfc2      	ittt	gt
 8006a34:	1aed      	subgt	r5, r5, r3
 8006a36:	1af6      	subgt	r6, r6, r3
 8006a38:	1aff      	subgt	r7, r7, r3
 8006a3a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	dd16      	ble.n	8006a6e <_strtod_l+0x736>
 8006a40:	4641      	mov	r1, r8
 8006a42:	9805      	ldr	r0, [sp, #20]
 8006a44:	461a      	mov	r2, r3
 8006a46:	f7ff f9a5 	bl	8005d94 <__pow5mult>
 8006a4a:	4680      	mov	r8, r0
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	d0ba      	beq.n	80069c6 <_strtod_l+0x68e>
 8006a50:	4601      	mov	r1, r0
 8006a52:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006a54:	9805      	ldr	r0, [sp, #20]
 8006a56:	f7ff f8f3 	bl	8005c40 <__multiply>
 8006a5a:	900e      	str	r0, [sp, #56]	@ 0x38
 8006a5c:	2800      	cmp	r0, #0
 8006a5e:	f43f ae8a 	beq.w	8006776 <_strtod_l+0x43e>
 8006a62:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006a64:	9805      	ldr	r0, [sp, #20]
 8006a66:	f7fe ffd7 	bl	8005a18 <_Bfree>
 8006a6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a6e:	2d00      	cmp	r5, #0
 8006a70:	dc1d      	bgt.n	8006aae <_strtod_l+0x776>
 8006a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	dd23      	ble.n	8006ac0 <_strtod_l+0x788>
 8006a78:	4649      	mov	r1, r9
 8006a7a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006a7c:	9805      	ldr	r0, [sp, #20]
 8006a7e:	f7ff f989 	bl	8005d94 <__pow5mult>
 8006a82:	4681      	mov	r9, r0
 8006a84:	b9e0      	cbnz	r0, 8006ac0 <_strtod_l+0x788>
 8006a86:	f04f 0900 	mov.w	r9, #0
 8006a8a:	e674      	b.n	8006776 <_strtod_l+0x43e>
 8006a8c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006a90:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006a94:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006a98:	35e2      	adds	r5, #226	@ 0xe2
 8006a9a:	fa01 f305 	lsl.w	r3, r1, r5
 8006a9e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006aa0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006aa2:	e7ba      	b.n	8006a1a <_strtod_l+0x6e2>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	9310      	str	r3, [sp, #64]	@ 0x40
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006aac:	e7b5      	b.n	8006a1a <_strtod_l+0x6e2>
 8006aae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ab0:	9805      	ldr	r0, [sp, #20]
 8006ab2:	462a      	mov	r2, r5
 8006ab4:	f7ff f9c8 	bl	8005e48 <__lshift>
 8006ab8:	901a      	str	r0, [sp, #104]	@ 0x68
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d1d9      	bne.n	8006a72 <_strtod_l+0x73a>
 8006abe:	e65a      	b.n	8006776 <_strtod_l+0x43e>
 8006ac0:	2e00      	cmp	r6, #0
 8006ac2:	dd07      	ble.n	8006ad4 <_strtod_l+0x79c>
 8006ac4:	4649      	mov	r1, r9
 8006ac6:	9805      	ldr	r0, [sp, #20]
 8006ac8:	4632      	mov	r2, r6
 8006aca:	f7ff f9bd 	bl	8005e48 <__lshift>
 8006ace:	4681      	mov	r9, r0
 8006ad0:	2800      	cmp	r0, #0
 8006ad2:	d0d8      	beq.n	8006a86 <_strtod_l+0x74e>
 8006ad4:	2f00      	cmp	r7, #0
 8006ad6:	dd08      	ble.n	8006aea <_strtod_l+0x7b2>
 8006ad8:	4641      	mov	r1, r8
 8006ada:	9805      	ldr	r0, [sp, #20]
 8006adc:	463a      	mov	r2, r7
 8006ade:	f7ff f9b3 	bl	8005e48 <__lshift>
 8006ae2:	4680      	mov	r8, r0
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	f43f ae46 	beq.w	8006776 <_strtod_l+0x43e>
 8006aea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006aec:	9805      	ldr	r0, [sp, #20]
 8006aee:	464a      	mov	r2, r9
 8006af0:	f7ff fa32 	bl	8005f58 <__mdiff>
 8006af4:	4604      	mov	r4, r0
 8006af6:	2800      	cmp	r0, #0
 8006af8:	f43f ae3d 	beq.w	8006776 <_strtod_l+0x43e>
 8006afc:	68c3      	ldr	r3, [r0, #12]
 8006afe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b00:	2300      	movs	r3, #0
 8006b02:	60c3      	str	r3, [r0, #12]
 8006b04:	4641      	mov	r1, r8
 8006b06:	f7ff fa0b 	bl	8005f20 <__mcmp>
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	da46      	bge.n	8006b9c <_strtod_l+0x864>
 8006b0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b10:	ea53 030a 	orrs.w	r3, r3, sl
 8006b14:	d16c      	bne.n	8006bf0 <_strtod_l+0x8b8>
 8006b16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d168      	bne.n	8006bf0 <_strtod_l+0x8b8>
 8006b1e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006b22:	0d1b      	lsrs	r3, r3, #20
 8006b24:	051b      	lsls	r3, r3, #20
 8006b26:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006b2a:	d961      	bls.n	8006bf0 <_strtod_l+0x8b8>
 8006b2c:	6963      	ldr	r3, [r4, #20]
 8006b2e:	b913      	cbnz	r3, 8006b36 <_strtod_l+0x7fe>
 8006b30:	6923      	ldr	r3, [r4, #16]
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	dd5c      	ble.n	8006bf0 <_strtod_l+0x8b8>
 8006b36:	4621      	mov	r1, r4
 8006b38:	2201      	movs	r2, #1
 8006b3a:	9805      	ldr	r0, [sp, #20]
 8006b3c:	f7ff f984 	bl	8005e48 <__lshift>
 8006b40:	4641      	mov	r1, r8
 8006b42:	4604      	mov	r4, r0
 8006b44:	f7ff f9ec 	bl	8005f20 <__mcmp>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	dd51      	ble.n	8006bf0 <_strtod_l+0x8b8>
 8006b4c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006b50:	9a08      	ldr	r2, [sp, #32]
 8006b52:	0d1b      	lsrs	r3, r3, #20
 8006b54:	051b      	lsls	r3, r3, #20
 8006b56:	2a00      	cmp	r2, #0
 8006b58:	d06b      	beq.n	8006c32 <_strtod_l+0x8fa>
 8006b5a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006b5e:	d868      	bhi.n	8006c32 <_strtod_l+0x8fa>
 8006b60:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006b64:	f67f ae9d 	bls.w	80068a2 <_strtod_l+0x56a>
 8006b68:	4b0a      	ldr	r3, [pc, #40]	@ (8006b94 <_strtod_l+0x85c>)
 8006b6a:	4650      	mov	r0, sl
 8006b6c:	4659      	mov	r1, fp
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f7f9 fd4a 	bl	8000608 <__aeabi_dmul>
 8006b74:	4b08      	ldr	r3, [pc, #32]	@ (8006b98 <_strtod_l+0x860>)
 8006b76:	400b      	ands	r3, r1
 8006b78:	4682      	mov	sl, r0
 8006b7a:	468b      	mov	fp, r1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f47f ae05 	bne.w	800678c <_strtod_l+0x454>
 8006b82:	9a05      	ldr	r2, [sp, #20]
 8006b84:	2322      	movs	r3, #34	@ 0x22
 8006b86:	6013      	str	r3, [r2, #0]
 8006b88:	e600      	b.n	800678c <_strtod_l+0x454>
 8006b8a:	bf00      	nop
 8006b8c:	0800d2a0 	.word	0x0800d2a0
 8006b90:	fffffc02 	.word	0xfffffc02
 8006b94:	39500000 	.word	0x39500000
 8006b98:	7ff00000 	.word	0x7ff00000
 8006b9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006ba0:	d165      	bne.n	8006c6e <_strtod_l+0x936>
 8006ba2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006ba4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ba8:	b35a      	cbz	r2, 8006c02 <_strtod_l+0x8ca>
 8006baa:	4a9f      	ldr	r2, [pc, #636]	@ (8006e28 <_strtod_l+0xaf0>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d12b      	bne.n	8006c08 <_strtod_l+0x8d0>
 8006bb0:	9b08      	ldr	r3, [sp, #32]
 8006bb2:	4651      	mov	r1, sl
 8006bb4:	b303      	cbz	r3, 8006bf8 <_strtod_l+0x8c0>
 8006bb6:	4b9d      	ldr	r3, [pc, #628]	@ (8006e2c <_strtod_l+0xaf4>)
 8006bb8:	465a      	mov	r2, fp
 8006bba:	4013      	ands	r3, r2
 8006bbc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8006bc4:	d81b      	bhi.n	8006bfe <_strtod_l+0x8c6>
 8006bc6:	0d1b      	lsrs	r3, r3, #20
 8006bc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd0:	4299      	cmp	r1, r3
 8006bd2:	d119      	bne.n	8006c08 <_strtod_l+0x8d0>
 8006bd4:	4b96      	ldr	r3, [pc, #600]	@ (8006e30 <_strtod_l+0xaf8>)
 8006bd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d102      	bne.n	8006be2 <_strtod_l+0x8aa>
 8006bdc:	3101      	adds	r1, #1
 8006bde:	f43f adca 	beq.w	8006776 <_strtod_l+0x43e>
 8006be2:	4b92      	ldr	r3, [pc, #584]	@ (8006e2c <_strtod_l+0xaf4>)
 8006be4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006be6:	401a      	ands	r2, r3
 8006be8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006bec:	f04f 0a00 	mov.w	sl, #0
 8006bf0:	9b08      	ldr	r3, [sp, #32]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1b8      	bne.n	8006b68 <_strtod_l+0x830>
 8006bf6:	e5c9      	b.n	800678c <_strtod_l+0x454>
 8006bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bfc:	e7e8      	b.n	8006bd0 <_strtod_l+0x898>
 8006bfe:	4613      	mov	r3, r2
 8006c00:	e7e6      	b.n	8006bd0 <_strtod_l+0x898>
 8006c02:	ea53 030a 	orrs.w	r3, r3, sl
 8006c06:	d0a1      	beq.n	8006b4c <_strtod_l+0x814>
 8006c08:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006c0a:	b1db      	cbz	r3, 8006c44 <_strtod_l+0x90c>
 8006c0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c0e:	4213      	tst	r3, r2
 8006c10:	d0ee      	beq.n	8006bf0 <_strtod_l+0x8b8>
 8006c12:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c14:	9a08      	ldr	r2, [sp, #32]
 8006c16:	4650      	mov	r0, sl
 8006c18:	4659      	mov	r1, fp
 8006c1a:	b1bb      	cbz	r3, 8006c4c <_strtod_l+0x914>
 8006c1c:	f7ff fb6e 	bl	80062fc <sulp>
 8006c20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c24:	ec53 2b10 	vmov	r2, r3, d0
 8006c28:	f7f9 fb38 	bl	800029c <__adddf3>
 8006c2c:	4682      	mov	sl, r0
 8006c2e:	468b      	mov	fp, r1
 8006c30:	e7de      	b.n	8006bf0 <_strtod_l+0x8b8>
 8006c32:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006c36:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006c3a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006c3e:	f04f 3aff 	mov.w	sl, #4294967295
 8006c42:	e7d5      	b.n	8006bf0 <_strtod_l+0x8b8>
 8006c44:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006c46:	ea13 0f0a 	tst.w	r3, sl
 8006c4a:	e7e1      	b.n	8006c10 <_strtod_l+0x8d8>
 8006c4c:	f7ff fb56 	bl	80062fc <sulp>
 8006c50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c54:	ec53 2b10 	vmov	r2, r3, d0
 8006c58:	f7f9 fb1e 	bl	8000298 <__aeabi_dsub>
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2300      	movs	r3, #0
 8006c60:	4682      	mov	sl, r0
 8006c62:	468b      	mov	fp, r1
 8006c64:	f7f9 ff38 	bl	8000ad8 <__aeabi_dcmpeq>
 8006c68:	2800      	cmp	r0, #0
 8006c6a:	d0c1      	beq.n	8006bf0 <_strtod_l+0x8b8>
 8006c6c:	e619      	b.n	80068a2 <_strtod_l+0x56a>
 8006c6e:	4641      	mov	r1, r8
 8006c70:	4620      	mov	r0, r4
 8006c72:	f7ff facd 	bl	8006210 <__ratio>
 8006c76:	ec57 6b10 	vmov	r6, r7, d0
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006c80:	4630      	mov	r0, r6
 8006c82:	4639      	mov	r1, r7
 8006c84:	f7f9 ff3c 	bl	8000b00 <__aeabi_dcmple>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	d06f      	beq.n	8006d6c <_strtod_l+0xa34>
 8006c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d17a      	bne.n	8006d88 <_strtod_l+0xa50>
 8006c92:	f1ba 0f00 	cmp.w	sl, #0
 8006c96:	d158      	bne.n	8006d4a <_strtod_l+0xa12>
 8006c98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d15a      	bne.n	8006d58 <_strtod_l+0xa20>
 8006ca2:	4b64      	ldr	r3, [pc, #400]	@ (8006e34 <_strtod_l+0xafc>)
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	4639      	mov	r1, r7
 8006caa:	f7f9 ff1f 	bl	8000aec <__aeabi_dcmplt>
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	d159      	bne.n	8006d66 <_strtod_l+0xa2e>
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	4639      	mov	r1, r7
 8006cb6:	4b60      	ldr	r3, [pc, #384]	@ (8006e38 <_strtod_l+0xb00>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f7f9 fca5 	bl	8000608 <__aeabi_dmul>
 8006cbe:	4606      	mov	r6, r0
 8006cc0:	460f      	mov	r7, r1
 8006cc2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006cc6:	9606      	str	r6, [sp, #24]
 8006cc8:	9307      	str	r3, [sp, #28]
 8006cca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cce:	4d57      	ldr	r5, [pc, #348]	@ (8006e2c <_strtod_l+0xaf4>)
 8006cd0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006cd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cd6:	401d      	ands	r5, r3
 8006cd8:	4b58      	ldr	r3, [pc, #352]	@ (8006e3c <_strtod_l+0xb04>)
 8006cda:	429d      	cmp	r5, r3
 8006cdc:	f040 80b2 	bne.w	8006e44 <_strtod_l+0xb0c>
 8006ce0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ce2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006ce6:	ec4b ab10 	vmov	d0, sl, fp
 8006cea:	f7ff f9c9 	bl	8006080 <__ulp>
 8006cee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cf2:	ec51 0b10 	vmov	r0, r1, d0
 8006cf6:	f7f9 fc87 	bl	8000608 <__aeabi_dmul>
 8006cfa:	4652      	mov	r2, sl
 8006cfc:	465b      	mov	r3, fp
 8006cfe:	f7f9 facd 	bl	800029c <__adddf3>
 8006d02:	460b      	mov	r3, r1
 8006d04:	4949      	ldr	r1, [pc, #292]	@ (8006e2c <_strtod_l+0xaf4>)
 8006d06:	4a4e      	ldr	r2, [pc, #312]	@ (8006e40 <_strtod_l+0xb08>)
 8006d08:	4019      	ands	r1, r3
 8006d0a:	4291      	cmp	r1, r2
 8006d0c:	4682      	mov	sl, r0
 8006d0e:	d942      	bls.n	8006d96 <_strtod_l+0xa5e>
 8006d10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006d12:	4b47      	ldr	r3, [pc, #284]	@ (8006e30 <_strtod_l+0xaf8>)
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d103      	bne.n	8006d20 <_strtod_l+0x9e8>
 8006d18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	f43f ad2b 	beq.w	8006776 <_strtod_l+0x43e>
 8006d20:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006e30 <_strtod_l+0xaf8>
 8006d24:	f04f 3aff 	mov.w	sl, #4294967295
 8006d28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d2a:	9805      	ldr	r0, [sp, #20]
 8006d2c:	f7fe fe74 	bl	8005a18 <_Bfree>
 8006d30:	9805      	ldr	r0, [sp, #20]
 8006d32:	4649      	mov	r1, r9
 8006d34:	f7fe fe70 	bl	8005a18 <_Bfree>
 8006d38:	9805      	ldr	r0, [sp, #20]
 8006d3a:	4641      	mov	r1, r8
 8006d3c:	f7fe fe6c 	bl	8005a18 <_Bfree>
 8006d40:	9805      	ldr	r0, [sp, #20]
 8006d42:	4621      	mov	r1, r4
 8006d44:	f7fe fe68 	bl	8005a18 <_Bfree>
 8006d48:	e618      	b.n	800697c <_strtod_l+0x644>
 8006d4a:	f1ba 0f01 	cmp.w	sl, #1
 8006d4e:	d103      	bne.n	8006d58 <_strtod_l+0xa20>
 8006d50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f43f ada5 	beq.w	80068a2 <_strtod_l+0x56a>
 8006d58:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006e08 <_strtod_l+0xad0>
 8006d5c:	4f35      	ldr	r7, [pc, #212]	@ (8006e34 <_strtod_l+0xafc>)
 8006d5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006d62:	2600      	movs	r6, #0
 8006d64:	e7b1      	b.n	8006cca <_strtod_l+0x992>
 8006d66:	4f34      	ldr	r7, [pc, #208]	@ (8006e38 <_strtod_l+0xb00>)
 8006d68:	2600      	movs	r6, #0
 8006d6a:	e7aa      	b.n	8006cc2 <_strtod_l+0x98a>
 8006d6c:	4b32      	ldr	r3, [pc, #200]	@ (8006e38 <_strtod_l+0xb00>)
 8006d6e:	4630      	mov	r0, r6
 8006d70:	4639      	mov	r1, r7
 8006d72:	2200      	movs	r2, #0
 8006d74:	f7f9 fc48 	bl	8000608 <__aeabi_dmul>
 8006d78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d7a:	4606      	mov	r6, r0
 8006d7c:	460f      	mov	r7, r1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d09f      	beq.n	8006cc2 <_strtod_l+0x98a>
 8006d82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006d86:	e7a0      	b.n	8006cca <_strtod_l+0x992>
 8006d88:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006e10 <_strtod_l+0xad8>
 8006d8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006d90:	ec57 6b17 	vmov	r6, r7, d7
 8006d94:	e799      	b.n	8006cca <_strtod_l+0x992>
 8006d96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006d9a:	9b08      	ldr	r3, [sp, #32]
 8006d9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1c1      	bne.n	8006d28 <_strtod_l+0x9f0>
 8006da4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006da8:	0d1b      	lsrs	r3, r3, #20
 8006daa:	051b      	lsls	r3, r3, #20
 8006dac:	429d      	cmp	r5, r3
 8006dae:	d1bb      	bne.n	8006d28 <_strtod_l+0x9f0>
 8006db0:	4630      	mov	r0, r6
 8006db2:	4639      	mov	r1, r7
 8006db4:	f7f9 ff88 	bl	8000cc8 <__aeabi_d2lz>
 8006db8:	f7f9 fbf8 	bl	80005ac <__aeabi_l2d>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	4639      	mov	r1, r7
 8006dc4:	f7f9 fa68 	bl	8000298 <__aeabi_dsub>
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4602      	mov	r2, r0
 8006dcc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006dd0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006dd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006dd6:	ea46 060a 	orr.w	r6, r6, sl
 8006dda:	431e      	orrs	r6, r3
 8006ddc:	d06f      	beq.n	8006ebe <_strtod_l+0xb86>
 8006dde:	a30e      	add	r3, pc, #56	@ (adr r3, 8006e18 <_strtod_l+0xae0>)
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	f7f9 fe82 	bl	8000aec <__aeabi_dcmplt>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	f47f accf 	bne.w	800678c <_strtod_l+0x454>
 8006dee:	a30c      	add	r3, pc, #48	@ (adr r3, 8006e20 <_strtod_l+0xae8>)
 8006df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006df8:	f7f9 fe96 	bl	8000b28 <__aeabi_dcmpgt>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	d093      	beq.n	8006d28 <_strtod_l+0x9f0>
 8006e00:	e4c4      	b.n	800678c <_strtod_l+0x454>
 8006e02:	bf00      	nop
 8006e04:	f3af 8000 	nop.w
 8006e08:	00000000 	.word	0x00000000
 8006e0c:	bff00000 	.word	0xbff00000
 8006e10:	00000000 	.word	0x00000000
 8006e14:	3ff00000 	.word	0x3ff00000
 8006e18:	94a03595 	.word	0x94a03595
 8006e1c:	3fdfffff 	.word	0x3fdfffff
 8006e20:	35afe535 	.word	0x35afe535
 8006e24:	3fe00000 	.word	0x3fe00000
 8006e28:	000fffff 	.word	0x000fffff
 8006e2c:	7ff00000 	.word	0x7ff00000
 8006e30:	7fefffff 	.word	0x7fefffff
 8006e34:	3ff00000 	.word	0x3ff00000
 8006e38:	3fe00000 	.word	0x3fe00000
 8006e3c:	7fe00000 	.word	0x7fe00000
 8006e40:	7c9fffff 	.word	0x7c9fffff
 8006e44:	9b08      	ldr	r3, [sp, #32]
 8006e46:	b323      	cbz	r3, 8006e92 <_strtod_l+0xb5a>
 8006e48:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006e4c:	d821      	bhi.n	8006e92 <_strtod_l+0xb5a>
 8006e4e:	a328      	add	r3, pc, #160	@ (adr r3, 8006ef0 <_strtod_l+0xbb8>)
 8006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e54:	4630      	mov	r0, r6
 8006e56:	4639      	mov	r1, r7
 8006e58:	f7f9 fe52 	bl	8000b00 <__aeabi_dcmple>
 8006e5c:	b1a0      	cbz	r0, 8006e88 <_strtod_l+0xb50>
 8006e5e:	4639      	mov	r1, r7
 8006e60:	4630      	mov	r0, r6
 8006e62:	f7f9 fea9 	bl	8000bb8 <__aeabi_d2uiz>
 8006e66:	2801      	cmp	r0, #1
 8006e68:	bf38      	it	cc
 8006e6a:	2001      	movcc	r0, #1
 8006e6c:	f7f9 fb52 	bl	8000514 <__aeabi_ui2d>
 8006e70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e72:	4606      	mov	r6, r0
 8006e74:	460f      	mov	r7, r1
 8006e76:	b9fb      	cbnz	r3, 8006eb8 <_strtod_l+0xb80>
 8006e78:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006e7c:	9014      	str	r0, [sp, #80]	@ 0x50
 8006e7e:	9315      	str	r3, [sp, #84]	@ 0x54
 8006e80:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006e84:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006e88:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006e8a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006e8e:	1b5b      	subs	r3, r3, r5
 8006e90:	9311      	str	r3, [sp, #68]	@ 0x44
 8006e92:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006e96:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006e9a:	f7ff f8f1 	bl	8006080 <__ulp>
 8006e9e:	4650      	mov	r0, sl
 8006ea0:	ec53 2b10 	vmov	r2, r3, d0
 8006ea4:	4659      	mov	r1, fp
 8006ea6:	f7f9 fbaf 	bl	8000608 <__aeabi_dmul>
 8006eaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006eae:	f7f9 f9f5 	bl	800029c <__adddf3>
 8006eb2:	4682      	mov	sl, r0
 8006eb4:	468b      	mov	fp, r1
 8006eb6:	e770      	b.n	8006d9a <_strtod_l+0xa62>
 8006eb8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006ebc:	e7e0      	b.n	8006e80 <_strtod_l+0xb48>
 8006ebe:	a30e      	add	r3, pc, #56	@ (adr r3, 8006ef8 <_strtod_l+0xbc0>)
 8006ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec4:	f7f9 fe12 	bl	8000aec <__aeabi_dcmplt>
 8006ec8:	e798      	b.n	8006dfc <_strtod_l+0xac4>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ece:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006ed0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ed2:	6013      	str	r3, [r2, #0]
 8006ed4:	f7ff ba6d 	b.w	80063b2 <_strtod_l+0x7a>
 8006ed8:	2a65      	cmp	r2, #101	@ 0x65
 8006eda:	f43f ab66 	beq.w	80065aa <_strtod_l+0x272>
 8006ede:	2a45      	cmp	r2, #69	@ 0x45
 8006ee0:	f43f ab63 	beq.w	80065aa <_strtod_l+0x272>
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	f7ff bb9e 	b.w	8006626 <_strtod_l+0x2ee>
 8006eea:	bf00      	nop
 8006eec:	f3af 8000 	nop.w
 8006ef0:	ffc00000 	.word	0xffc00000
 8006ef4:	41dfffff 	.word	0x41dfffff
 8006ef8:	94a03595 	.word	0x94a03595
 8006efc:	3fcfffff 	.word	0x3fcfffff

08006f00 <_strtod_r>:
 8006f00:	4b01      	ldr	r3, [pc, #4]	@ (8006f08 <_strtod_r+0x8>)
 8006f02:	f7ff ba19 	b.w	8006338 <_strtod_l>
 8006f06:	bf00      	nop
 8006f08:	20000068 	.word	0x20000068

08006f0c <__ssputs_r>:
 8006f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f10:	688e      	ldr	r6, [r1, #8]
 8006f12:	461f      	mov	r7, r3
 8006f14:	42be      	cmp	r6, r7
 8006f16:	680b      	ldr	r3, [r1, #0]
 8006f18:	4682      	mov	sl, r0
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	4690      	mov	r8, r2
 8006f1e:	d82d      	bhi.n	8006f7c <__ssputs_r+0x70>
 8006f20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f28:	d026      	beq.n	8006f78 <__ssputs_r+0x6c>
 8006f2a:	6965      	ldr	r5, [r4, #20]
 8006f2c:	6909      	ldr	r1, [r1, #16]
 8006f2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f32:	eba3 0901 	sub.w	r9, r3, r1
 8006f36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f3a:	1c7b      	adds	r3, r7, #1
 8006f3c:	444b      	add	r3, r9
 8006f3e:	106d      	asrs	r5, r5, #1
 8006f40:	429d      	cmp	r5, r3
 8006f42:	bf38      	it	cc
 8006f44:	461d      	movcc	r5, r3
 8006f46:	0553      	lsls	r3, r2, #21
 8006f48:	d527      	bpl.n	8006f9a <__ssputs_r+0x8e>
 8006f4a:	4629      	mov	r1, r5
 8006f4c:	f7fe fc98 	bl	8005880 <_malloc_r>
 8006f50:	4606      	mov	r6, r0
 8006f52:	b360      	cbz	r0, 8006fae <__ssputs_r+0xa2>
 8006f54:	6921      	ldr	r1, [r4, #16]
 8006f56:	464a      	mov	r2, r9
 8006f58:	f000 fa18 	bl	800738c <memcpy>
 8006f5c:	89a3      	ldrh	r3, [r4, #12]
 8006f5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006f62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f66:	81a3      	strh	r3, [r4, #12]
 8006f68:	6126      	str	r6, [r4, #16]
 8006f6a:	6165      	str	r5, [r4, #20]
 8006f6c:	444e      	add	r6, r9
 8006f6e:	eba5 0509 	sub.w	r5, r5, r9
 8006f72:	6026      	str	r6, [r4, #0]
 8006f74:	60a5      	str	r5, [r4, #8]
 8006f76:	463e      	mov	r6, r7
 8006f78:	42be      	cmp	r6, r7
 8006f7a:	d900      	bls.n	8006f7e <__ssputs_r+0x72>
 8006f7c:	463e      	mov	r6, r7
 8006f7e:	6820      	ldr	r0, [r4, #0]
 8006f80:	4632      	mov	r2, r6
 8006f82:	4641      	mov	r1, r8
 8006f84:	f000 f9c6 	bl	8007314 <memmove>
 8006f88:	68a3      	ldr	r3, [r4, #8]
 8006f8a:	1b9b      	subs	r3, r3, r6
 8006f8c:	60a3      	str	r3, [r4, #8]
 8006f8e:	6823      	ldr	r3, [r4, #0]
 8006f90:	4433      	add	r3, r6
 8006f92:	6023      	str	r3, [r4, #0]
 8006f94:	2000      	movs	r0, #0
 8006f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f9a:	462a      	mov	r2, r5
 8006f9c:	f000 fd89 	bl	8007ab2 <_realloc_r>
 8006fa0:	4606      	mov	r6, r0
 8006fa2:	2800      	cmp	r0, #0
 8006fa4:	d1e0      	bne.n	8006f68 <__ssputs_r+0x5c>
 8006fa6:	6921      	ldr	r1, [r4, #16]
 8006fa8:	4650      	mov	r0, sl
 8006faa:	f7fe fbf5 	bl	8005798 <_free_r>
 8006fae:	230c      	movs	r3, #12
 8006fb0:	f8ca 3000 	str.w	r3, [sl]
 8006fb4:	89a3      	ldrh	r3, [r4, #12]
 8006fb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fba:	81a3      	strh	r3, [r4, #12]
 8006fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc0:	e7e9      	b.n	8006f96 <__ssputs_r+0x8a>
	...

08006fc4 <_svfiprintf_r>:
 8006fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fc8:	4698      	mov	r8, r3
 8006fca:	898b      	ldrh	r3, [r1, #12]
 8006fcc:	061b      	lsls	r3, r3, #24
 8006fce:	b09d      	sub	sp, #116	@ 0x74
 8006fd0:	4607      	mov	r7, r0
 8006fd2:	460d      	mov	r5, r1
 8006fd4:	4614      	mov	r4, r2
 8006fd6:	d510      	bpl.n	8006ffa <_svfiprintf_r+0x36>
 8006fd8:	690b      	ldr	r3, [r1, #16]
 8006fda:	b973      	cbnz	r3, 8006ffa <_svfiprintf_r+0x36>
 8006fdc:	2140      	movs	r1, #64	@ 0x40
 8006fde:	f7fe fc4f 	bl	8005880 <_malloc_r>
 8006fe2:	6028      	str	r0, [r5, #0]
 8006fe4:	6128      	str	r0, [r5, #16]
 8006fe6:	b930      	cbnz	r0, 8006ff6 <_svfiprintf_r+0x32>
 8006fe8:	230c      	movs	r3, #12
 8006fea:	603b      	str	r3, [r7, #0]
 8006fec:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff0:	b01d      	add	sp, #116	@ 0x74
 8006ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff6:	2340      	movs	r3, #64	@ 0x40
 8006ff8:	616b      	str	r3, [r5, #20]
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ffe:	2320      	movs	r3, #32
 8007000:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007004:	f8cd 800c 	str.w	r8, [sp, #12]
 8007008:	2330      	movs	r3, #48	@ 0x30
 800700a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80071a8 <_svfiprintf_r+0x1e4>
 800700e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007012:	f04f 0901 	mov.w	r9, #1
 8007016:	4623      	mov	r3, r4
 8007018:	469a      	mov	sl, r3
 800701a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800701e:	b10a      	cbz	r2, 8007024 <_svfiprintf_r+0x60>
 8007020:	2a25      	cmp	r2, #37	@ 0x25
 8007022:	d1f9      	bne.n	8007018 <_svfiprintf_r+0x54>
 8007024:	ebba 0b04 	subs.w	fp, sl, r4
 8007028:	d00b      	beq.n	8007042 <_svfiprintf_r+0x7e>
 800702a:	465b      	mov	r3, fp
 800702c:	4622      	mov	r2, r4
 800702e:	4629      	mov	r1, r5
 8007030:	4638      	mov	r0, r7
 8007032:	f7ff ff6b 	bl	8006f0c <__ssputs_r>
 8007036:	3001      	adds	r0, #1
 8007038:	f000 80a7 	beq.w	800718a <_svfiprintf_r+0x1c6>
 800703c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800703e:	445a      	add	r2, fp
 8007040:	9209      	str	r2, [sp, #36]	@ 0x24
 8007042:	f89a 3000 	ldrb.w	r3, [sl]
 8007046:	2b00      	cmp	r3, #0
 8007048:	f000 809f 	beq.w	800718a <_svfiprintf_r+0x1c6>
 800704c:	2300      	movs	r3, #0
 800704e:	f04f 32ff 	mov.w	r2, #4294967295
 8007052:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007056:	f10a 0a01 	add.w	sl, sl, #1
 800705a:	9304      	str	r3, [sp, #16]
 800705c:	9307      	str	r3, [sp, #28]
 800705e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007062:	931a      	str	r3, [sp, #104]	@ 0x68
 8007064:	4654      	mov	r4, sl
 8007066:	2205      	movs	r2, #5
 8007068:	f814 1b01 	ldrb.w	r1, [r4], #1
 800706c:	484e      	ldr	r0, [pc, #312]	@ (80071a8 <_svfiprintf_r+0x1e4>)
 800706e:	f7f9 f8b7 	bl	80001e0 <memchr>
 8007072:	9a04      	ldr	r2, [sp, #16]
 8007074:	b9d8      	cbnz	r0, 80070ae <_svfiprintf_r+0xea>
 8007076:	06d0      	lsls	r0, r2, #27
 8007078:	bf44      	itt	mi
 800707a:	2320      	movmi	r3, #32
 800707c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007080:	0711      	lsls	r1, r2, #28
 8007082:	bf44      	itt	mi
 8007084:	232b      	movmi	r3, #43	@ 0x2b
 8007086:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800708a:	f89a 3000 	ldrb.w	r3, [sl]
 800708e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007090:	d015      	beq.n	80070be <_svfiprintf_r+0xfa>
 8007092:	9a07      	ldr	r2, [sp, #28]
 8007094:	4654      	mov	r4, sl
 8007096:	2000      	movs	r0, #0
 8007098:	f04f 0c0a 	mov.w	ip, #10
 800709c:	4621      	mov	r1, r4
 800709e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070a2:	3b30      	subs	r3, #48	@ 0x30
 80070a4:	2b09      	cmp	r3, #9
 80070a6:	d94b      	bls.n	8007140 <_svfiprintf_r+0x17c>
 80070a8:	b1b0      	cbz	r0, 80070d8 <_svfiprintf_r+0x114>
 80070aa:	9207      	str	r2, [sp, #28]
 80070ac:	e014      	b.n	80070d8 <_svfiprintf_r+0x114>
 80070ae:	eba0 0308 	sub.w	r3, r0, r8
 80070b2:	fa09 f303 	lsl.w	r3, r9, r3
 80070b6:	4313      	orrs	r3, r2
 80070b8:	9304      	str	r3, [sp, #16]
 80070ba:	46a2      	mov	sl, r4
 80070bc:	e7d2      	b.n	8007064 <_svfiprintf_r+0xa0>
 80070be:	9b03      	ldr	r3, [sp, #12]
 80070c0:	1d19      	adds	r1, r3, #4
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	9103      	str	r1, [sp, #12]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	bfbb      	ittet	lt
 80070ca:	425b      	neglt	r3, r3
 80070cc:	f042 0202 	orrlt.w	r2, r2, #2
 80070d0:	9307      	strge	r3, [sp, #28]
 80070d2:	9307      	strlt	r3, [sp, #28]
 80070d4:	bfb8      	it	lt
 80070d6:	9204      	strlt	r2, [sp, #16]
 80070d8:	7823      	ldrb	r3, [r4, #0]
 80070da:	2b2e      	cmp	r3, #46	@ 0x2e
 80070dc:	d10a      	bne.n	80070f4 <_svfiprintf_r+0x130>
 80070de:	7863      	ldrb	r3, [r4, #1]
 80070e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80070e2:	d132      	bne.n	800714a <_svfiprintf_r+0x186>
 80070e4:	9b03      	ldr	r3, [sp, #12]
 80070e6:	1d1a      	adds	r2, r3, #4
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	9203      	str	r2, [sp, #12]
 80070ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80070f0:	3402      	adds	r4, #2
 80070f2:	9305      	str	r3, [sp, #20]
 80070f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80071b8 <_svfiprintf_r+0x1f4>
 80070f8:	7821      	ldrb	r1, [r4, #0]
 80070fa:	2203      	movs	r2, #3
 80070fc:	4650      	mov	r0, sl
 80070fe:	f7f9 f86f 	bl	80001e0 <memchr>
 8007102:	b138      	cbz	r0, 8007114 <_svfiprintf_r+0x150>
 8007104:	9b04      	ldr	r3, [sp, #16]
 8007106:	eba0 000a 	sub.w	r0, r0, sl
 800710a:	2240      	movs	r2, #64	@ 0x40
 800710c:	4082      	lsls	r2, r0
 800710e:	4313      	orrs	r3, r2
 8007110:	3401      	adds	r4, #1
 8007112:	9304      	str	r3, [sp, #16]
 8007114:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007118:	4824      	ldr	r0, [pc, #144]	@ (80071ac <_svfiprintf_r+0x1e8>)
 800711a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800711e:	2206      	movs	r2, #6
 8007120:	f7f9 f85e 	bl	80001e0 <memchr>
 8007124:	2800      	cmp	r0, #0
 8007126:	d036      	beq.n	8007196 <_svfiprintf_r+0x1d2>
 8007128:	4b21      	ldr	r3, [pc, #132]	@ (80071b0 <_svfiprintf_r+0x1ec>)
 800712a:	bb1b      	cbnz	r3, 8007174 <_svfiprintf_r+0x1b0>
 800712c:	9b03      	ldr	r3, [sp, #12]
 800712e:	3307      	adds	r3, #7
 8007130:	f023 0307 	bic.w	r3, r3, #7
 8007134:	3308      	adds	r3, #8
 8007136:	9303      	str	r3, [sp, #12]
 8007138:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800713a:	4433      	add	r3, r6
 800713c:	9309      	str	r3, [sp, #36]	@ 0x24
 800713e:	e76a      	b.n	8007016 <_svfiprintf_r+0x52>
 8007140:	fb0c 3202 	mla	r2, ip, r2, r3
 8007144:	460c      	mov	r4, r1
 8007146:	2001      	movs	r0, #1
 8007148:	e7a8      	b.n	800709c <_svfiprintf_r+0xd8>
 800714a:	2300      	movs	r3, #0
 800714c:	3401      	adds	r4, #1
 800714e:	9305      	str	r3, [sp, #20]
 8007150:	4619      	mov	r1, r3
 8007152:	f04f 0c0a 	mov.w	ip, #10
 8007156:	4620      	mov	r0, r4
 8007158:	f810 2b01 	ldrb.w	r2, [r0], #1
 800715c:	3a30      	subs	r2, #48	@ 0x30
 800715e:	2a09      	cmp	r2, #9
 8007160:	d903      	bls.n	800716a <_svfiprintf_r+0x1a6>
 8007162:	2b00      	cmp	r3, #0
 8007164:	d0c6      	beq.n	80070f4 <_svfiprintf_r+0x130>
 8007166:	9105      	str	r1, [sp, #20]
 8007168:	e7c4      	b.n	80070f4 <_svfiprintf_r+0x130>
 800716a:	fb0c 2101 	mla	r1, ip, r1, r2
 800716e:	4604      	mov	r4, r0
 8007170:	2301      	movs	r3, #1
 8007172:	e7f0      	b.n	8007156 <_svfiprintf_r+0x192>
 8007174:	ab03      	add	r3, sp, #12
 8007176:	9300      	str	r3, [sp, #0]
 8007178:	462a      	mov	r2, r5
 800717a:	4b0e      	ldr	r3, [pc, #56]	@ (80071b4 <_svfiprintf_r+0x1f0>)
 800717c:	a904      	add	r1, sp, #16
 800717e:	4638      	mov	r0, r7
 8007180:	f7fc fd46 	bl	8003c10 <_printf_float>
 8007184:	1c42      	adds	r2, r0, #1
 8007186:	4606      	mov	r6, r0
 8007188:	d1d6      	bne.n	8007138 <_svfiprintf_r+0x174>
 800718a:	89ab      	ldrh	r3, [r5, #12]
 800718c:	065b      	lsls	r3, r3, #25
 800718e:	f53f af2d 	bmi.w	8006fec <_svfiprintf_r+0x28>
 8007192:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007194:	e72c      	b.n	8006ff0 <_svfiprintf_r+0x2c>
 8007196:	ab03      	add	r3, sp, #12
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	462a      	mov	r2, r5
 800719c:	4b05      	ldr	r3, [pc, #20]	@ (80071b4 <_svfiprintf_r+0x1f0>)
 800719e:	a904      	add	r1, sp, #16
 80071a0:	4638      	mov	r0, r7
 80071a2:	f7fc ffcd 	bl	8004140 <_printf_i>
 80071a6:	e7ed      	b.n	8007184 <_svfiprintf_r+0x1c0>
 80071a8:	0800d2c8 	.word	0x0800d2c8
 80071ac:	0800d2d2 	.word	0x0800d2d2
 80071b0:	08003c11 	.word	0x08003c11
 80071b4:	08006f0d 	.word	0x08006f0d
 80071b8:	0800d2ce 	.word	0x0800d2ce

080071bc <__sflush_r>:
 80071bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c4:	0716      	lsls	r6, r2, #28
 80071c6:	4605      	mov	r5, r0
 80071c8:	460c      	mov	r4, r1
 80071ca:	d454      	bmi.n	8007276 <__sflush_r+0xba>
 80071cc:	684b      	ldr	r3, [r1, #4]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	dc02      	bgt.n	80071d8 <__sflush_r+0x1c>
 80071d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	dd48      	ble.n	800726a <__sflush_r+0xae>
 80071d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071da:	2e00      	cmp	r6, #0
 80071dc:	d045      	beq.n	800726a <__sflush_r+0xae>
 80071de:	2300      	movs	r3, #0
 80071e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80071e4:	682f      	ldr	r7, [r5, #0]
 80071e6:	6a21      	ldr	r1, [r4, #32]
 80071e8:	602b      	str	r3, [r5, #0]
 80071ea:	d030      	beq.n	800724e <__sflush_r+0x92>
 80071ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80071ee:	89a3      	ldrh	r3, [r4, #12]
 80071f0:	0759      	lsls	r1, r3, #29
 80071f2:	d505      	bpl.n	8007200 <__sflush_r+0x44>
 80071f4:	6863      	ldr	r3, [r4, #4]
 80071f6:	1ad2      	subs	r2, r2, r3
 80071f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80071fa:	b10b      	cbz	r3, 8007200 <__sflush_r+0x44>
 80071fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80071fe:	1ad2      	subs	r2, r2, r3
 8007200:	2300      	movs	r3, #0
 8007202:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007204:	6a21      	ldr	r1, [r4, #32]
 8007206:	4628      	mov	r0, r5
 8007208:	47b0      	blx	r6
 800720a:	1c43      	adds	r3, r0, #1
 800720c:	89a3      	ldrh	r3, [r4, #12]
 800720e:	d106      	bne.n	800721e <__sflush_r+0x62>
 8007210:	6829      	ldr	r1, [r5, #0]
 8007212:	291d      	cmp	r1, #29
 8007214:	d82b      	bhi.n	800726e <__sflush_r+0xb2>
 8007216:	4a2a      	ldr	r2, [pc, #168]	@ (80072c0 <__sflush_r+0x104>)
 8007218:	410a      	asrs	r2, r1
 800721a:	07d6      	lsls	r6, r2, #31
 800721c:	d427      	bmi.n	800726e <__sflush_r+0xb2>
 800721e:	2200      	movs	r2, #0
 8007220:	6062      	str	r2, [r4, #4]
 8007222:	04d9      	lsls	r1, r3, #19
 8007224:	6922      	ldr	r2, [r4, #16]
 8007226:	6022      	str	r2, [r4, #0]
 8007228:	d504      	bpl.n	8007234 <__sflush_r+0x78>
 800722a:	1c42      	adds	r2, r0, #1
 800722c:	d101      	bne.n	8007232 <__sflush_r+0x76>
 800722e:	682b      	ldr	r3, [r5, #0]
 8007230:	b903      	cbnz	r3, 8007234 <__sflush_r+0x78>
 8007232:	6560      	str	r0, [r4, #84]	@ 0x54
 8007234:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007236:	602f      	str	r7, [r5, #0]
 8007238:	b1b9      	cbz	r1, 800726a <__sflush_r+0xae>
 800723a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800723e:	4299      	cmp	r1, r3
 8007240:	d002      	beq.n	8007248 <__sflush_r+0x8c>
 8007242:	4628      	mov	r0, r5
 8007244:	f7fe faa8 	bl	8005798 <_free_r>
 8007248:	2300      	movs	r3, #0
 800724a:	6363      	str	r3, [r4, #52]	@ 0x34
 800724c:	e00d      	b.n	800726a <__sflush_r+0xae>
 800724e:	2301      	movs	r3, #1
 8007250:	4628      	mov	r0, r5
 8007252:	47b0      	blx	r6
 8007254:	4602      	mov	r2, r0
 8007256:	1c50      	adds	r0, r2, #1
 8007258:	d1c9      	bne.n	80071ee <__sflush_r+0x32>
 800725a:	682b      	ldr	r3, [r5, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d0c6      	beq.n	80071ee <__sflush_r+0x32>
 8007260:	2b1d      	cmp	r3, #29
 8007262:	d001      	beq.n	8007268 <__sflush_r+0xac>
 8007264:	2b16      	cmp	r3, #22
 8007266:	d11e      	bne.n	80072a6 <__sflush_r+0xea>
 8007268:	602f      	str	r7, [r5, #0]
 800726a:	2000      	movs	r0, #0
 800726c:	e022      	b.n	80072b4 <__sflush_r+0xf8>
 800726e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007272:	b21b      	sxth	r3, r3
 8007274:	e01b      	b.n	80072ae <__sflush_r+0xf2>
 8007276:	690f      	ldr	r7, [r1, #16]
 8007278:	2f00      	cmp	r7, #0
 800727a:	d0f6      	beq.n	800726a <__sflush_r+0xae>
 800727c:	0793      	lsls	r3, r2, #30
 800727e:	680e      	ldr	r6, [r1, #0]
 8007280:	bf08      	it	eq
 8007282:	694b      	ldreq	r3, [r1, #20]
 8007284:	600f      	str	r7, [r1, #0]
 8007286:	bf18      	it	ne
 8007288:	2300      	movne	r3, #0
 800728a:	eba6 0807 	sub.w	r8, r6, r7
 800728e:	608b      	str	r3, [r1, #8]
 8007290:	f1b8 0f00 	cmp.w	r8, #0
 8007294:	dde9      	ble.n	800726a <__sflush_r+0xae>
 8007296:	6a21      	ldr	r1, [r4, #32]
 8007298:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800729a:	4643      	mov	r3, r8
 800729c:	463a      	mov	r2, r7
 800729e:	4628      	mov	r0, r5
 80072a0:	47b0      	blx	r6
 80072a2:	2800      	cmp	r0, #0
 80072a4:	dc08      	bgt.n	80072b8 <__sflush_r+0xfc>
 80072a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072ae:	81a3      	strh	r3, [r4, #12]
 80072b0:	f04f 30ff 	mov.w	r0, #4294967295
 80072b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072b8:	4407      	add	r7, r0
 80072ba:	eba8 0800 	sub.w	r8, r8, r0
 80072be:	e7e7      	b.n	8007290 <__sflush_r+0xd4>
 80072c0:	dfbffffe 	.word	0xdfbffffe

080072c4 <_fflush_r>:
 80072c4:	b538      	push	{r3, r4, r5, lr}
 80072c6:	690b      	ldr	r3, [r1, #16]
 80072c8:	4605      	mov	r5, r0
 80072ca:	460c      	mov	r4, r1
 80072cc:	b913      	cbnz	r3, 80072d4 <_fflush_r+0x10>
 80072ce:	2500      	movs	r5, #0
 80072d0:	4628      	mov	r0, r5
 80072d2:	bd38      	pop	{r3, r4, r5, pc}
 80072d4:	b118      	cbz	r0, 80072de <_fflush_r+0x1a>
 80072d6:	6a03      	ldr	r3, [r0, #32]
 80072d8:	b90b      	cbnz	r3, 80072de <_fflush_r+0x1a>
 80072da:	f7fd faf1 	bl	80048c0 <__sinit>
 80072de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d0f3      	beq.n	80072ce <_fflush_r+0xa>
 80072e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80072e8:	07d0      	lsls	r0, r2, #31
 80072ea:	d404      	bmi.n	80072f6 <_fflush_r+0x32>
 80072ec:	0599      	lsls	r1, r3, #22
 80072ee:	d402      	bmi.n	80072f6 <_fflush_r+0x32>
 80072f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072f2:	f7fd fbfc 	bl	8004aee <__retarget_lock_acquire_recursive>
 80072f6:	4628      	mov	r0, r5
 80072f8:	4621      	mov	r1, r4
 80072fa:	f7ff ff5f 	bl	80071bc <__sflush_r>
 80072fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007300:	07da      	lsls	r2, r3, #31
 8007302:	4605      	mov	r5, r0
 8007304:	d4e4      	bmi.n	80072d0 <_fflush_r+0xc>
 8007306:	89a3      	ldrh	r3, [r4, #12]
 8007308:	059b      	lsls	r3, r3, #22
 800730a:	d4e1      	bmi.n	80072d0 <_fflush_r+0xc>
 800730c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800730e:	f7fd fbef 	bl	8004af0 <__retarget_lock_release_recursive>
 8007312:	e7dd      	b.n	80072d0 <_fflush_r+0xc>

08007314 <memmove>:
 8007314:	4288      	cmp	r0, r1
 8007316:	b510      	push	{r4, lr}
 8007318:	eb01 0402 	add.w	r4, r1, r2
 800731c:	d902      	bls.n	8007324 <memmove+0x10>
 800731e:	4284      	cmp	r4, r0
 8007320:	4623      	mov	r3, r4
 8007322:	d807      	bhi.n	8007334 <memmove+0x20>
 8007324:	1e43      	subs	r3, r0, #1
 8007326:	42a1      	cmp	r1, r4
 8007328:	d008      	beq.n	800733c <memmove+0x28>
 800732a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800732e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007332:	e7f8      	b.n	8007326 <memmove+0x12>
 8007334:	4402      	add	r2, r0
 8007336:	4601      	mov	r1, r0
 8007338:	428a      	cmp	r2, r1
 800733a:	d100      	bne.n	800733e <memmove+0x2a>
 800733c:	bd10      	pop	{r4, pc}
 800733e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007342:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007346:	e7f7      	b.n	8007338 <memmove+0x24>

08007348 <strncmp>:
 8007348:	b510      	push	{r4, lr}
 800734a:	b16a      	cbz	r2, 8007368 <strncmp+0x20>
 800734c:	3901      	subs	r1, #1
 800734e:	1884      	adds	r4, r0, r2
 8007350:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007354:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007358:	429a      	cmp	r2, r3
 800735a:	d103      	bne.n	8007364 <strncmp+0x1c>
 800735c:	42a0      	cmp	r0, r4
 800735e:	d001      	beq.n	8007364 <strncmp+0x1c>
 8007360:	2a00      	cmp	r2, #0
 8007362:	d1f5      	bne.n	8007350 <strncmp+0x8>
 8007364:	1ad0      	subs	r0, r2, r3
 8007366:	bd10      	pop	{r4, pc}
 8007368:	4610      	mov	r0, r2
 800736a:	e7fc      	b.n	8007366 <strncmp+0x1e>

0800736c <_sbrk_r>:
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	4d06      	ldr	r5, [pc, #24]	@ (8007388 <_sbrk_r+0x1c>)
 8007370:	2300      	movs	r3, #0
 8007372:	4604      	mov	r4, r0
 8007374:	4608      	mov	r0, r1
 8007376:	602b      	str	r3, [r5, #0]
 8007378:	f7fa fab4 	bl	80018e4 <_sbrk>
 800737c:	1c43      	adds	r3, r0, #1
 800737e:	d102      	bne.n	8007386 <_sbrk_r+0x1a>
 8007380:	682b      	ldr	r3, [r5, #0]
 8007382:	b103      	cbz	r3, 8007386 <_sbrk_r+0x1a>
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	bd38      	pop	{r3, r4, r5, pc}
 8007388:	20000500 	.word	0x20000500

0800738c <memcpy>:
 800738c:	440a      	add	r2, r1
 800738e:	4291      	cmp	r1, r2
 8007390:	f100 33ff 	add.w	r3, r0, #4294967295
 8007394:	d100      	bne.n	8007398 <memcpy+0xc>
 8007396:	4770      	bx	lr
 8007398:	b510      	push	{r4, lr}
 800739a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800739e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073a2:	4291      	cmp	r1, r2
 80073a4:	d1f9      	bne.n	800739a <memcpy+0xe>
 80073a6:	bd10      	pop	{r4, pc}

080073a8 <nan>:
 80073a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80073b0 <nan+0x8>
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	00000000 	.word	0x00000000
 80073b4:	7ff80000 	.word	0x7ff80000

080073b8 <__assert_func>:
 80073b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80073ba:	4614      	mov	r4, r2
 80073bc:	461a      	mov	r2, r3
 80073be:	4b09      	ldr	r3, [pc, #36]	@ (80073e4 <__assert_func+0x2c>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4605      	mov	r5, r0
 80073c4:	68d8      	ldr	r0, [r3, #12]
 80073c6:	b954      	cbnz	r4, 80073de <__assert_func+0x26>
 80073c8:	4b07      	ldr	r3, [pc, #28]	@ (80073e8 <__assert_func+0x30>)
 80073ca:	461c      	mov	r4, r3
 80073cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80073d0:	9100      	str	r1, [sp, #0]
 80073d2:	462b      	mov	r3, r5
 80073d4:	4905      	ldr	r1, [pc, #20]	@ (80073ec <__assert_func+0x34>)
 80073d6:	f000 fba7 	bl	8007b28 <fiprintf>
 80073da:	f000 fbb7 	bl	8007b4c <abort>
 80073de:	4b04      	ldr	r3, [pc, #16]	@ (80073f0 <__assert_func+0x38>)
 80073e0:	e7f4      	b.n	80073cc <__assert_func+0x14>
 80073e2:	bf00      	nop
 80073e4:	20000018 	.word	0x20000018
 80073e8:	0800d31c 	.word	0x0800d31c
 80073ec:	0800d2ee 	.word	0x0800d2ee
 80073f0:	0800d2e1 	.word	0x0800d2e1

080073f4 <_calloc_r>:
 80073f4:	b570      	push	{r4, r5, r6, lr}
 80073f6:	fba1 5402 	umull	r5, r4, r1, r2
 80073fa:	b93c      	cbnz	r4, 800740c <_calloc_r+0x18>
 80073fc:	4629      	mov	r1, r5
 80073fe:	f7fe fa3f 	bl	8005880 <_malloc_r>
 8007402:	4606      	mov	r6, r0
 8007404:	b928      	cbnz	r0, 8007412 <_calloc_r+0x1e>
 8007406:	2600      	movs	r6, #0
 8007408:	4630      	mov	r0, r6
 800740a:	bd70      	pop	{r4, r5, r6, pc}
 800740c:	220c      	movs	r2, #12
 800740e:	6002      	str	r2, [r0, #0]
 8007410:	e7f9      	b.n	8007406 <_calloc_r+0x12>
 8007412:	462a      	mov	r2, r5
 8007414:	4621      	mov	r1, r4
 8007416:	f7fd faec 	bl	80049f2 <memset>
 800741a:	e7f5      	b.n	8007408 <_calloc_r+0x14>

0800741c <rshift>:
 800741c:	6903      	ldr	r3, [r0, #16]
 800741e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007422:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007426:	ea4f 1261 	mov.w	r2, r1, asr #5
 800742a:	f100 0414 	add.w	r4, r0, #20
 800742e:	dd45      	ble.n	80074bc <rshift+0xa0>
 8007430:	f011 011f 	ands.w	r1, r1, #31
 8007434:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007438:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800743c:	d10c      	bne.n	8007458 <rshift+0x3c>
 800743e:	f100 0710 	add.w	r7, r0, #16
 8007442:	4629      	mov	r1, r5
 8007444:	42b1      	cmp	r1, r6
 8007446:	d334      	bcc.n	80074b2 <rshift+0x96>
 8007448:	1a9b      	subs	r3, r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	1eea      	subs	r2, r5, #3
 800744e:	4296      	cmp	r6, r2
 8007450:	bf38      	it	cc
 8007452:	2300      	movcc	r3, #0
 8007454:	4423      	add	r3, r4
 8007456:	e015      	b.n	8007484 <rshift+0x68>
 8007458:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800745c:	f1c1 0820 	rsb	r8, r1, #32
 8007460:	40cf      	lsrs	r7, r1
 8007462:	f105 0e04 	add.w	lr, r5, #4
 8007466:	46a1      	mov	r9, r4
 8007468:	4576      	cmp	r6, lr
 800746a:	46f4      	mov	ip, lr
 800746c:	d815      	bhi.n	800749a <rshift+0x7e>
 800746e:	1a9a      	subs	r2, r3, r2
 8007470:	0092      	lsls	r2, r2, #2
 8007472:	3a04      	subs	r2, #4
 8007474:	3501      	adds	r5, #1
 8007476:	42ae      	cmp	r6, r5
 8007478:	bf38      	it	cc
 800747a:	2200      	movcc	r2, #0
 800747c:	18a3      	adds	r3, r4, r2
 800747e:	50a7      	str	r7, [r4, r2]
 8007480:	b107      	cbz	r7, 8007484 <rshift+0x68>
 8007482:	3304      	adds	r3, #4
 8007484:	1b1a      	subs	r2, r3, r4
 8007486:	42a3      	cmp	r3, r4
 8007488:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800748c:	bf08      	it	eq
 800748e:	2300      	moveq	r3, #0
 8007490:	6102      	str	r2, [r0, #16]
 8007492:	bf08      	it	eq
 8007494:	6143      	streq	r3, [r0, #20]
 8007496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800749a:	f8dc c000 	ldr.w	ip, [ip]
 800749e:	fa0c fc08 	lsl.w	ip, ip, r8
 80074a2:	ea4c 0707 	orr.w	r7, ip, r7
 80074a6:	f849 7b04 	str.w	r7, [r9], #4
 80074aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80074ae:	40cf      	lsrs	r7, r1
 80074b0:	e7da      	b.n	8007468 <rshift+0x4c>
 80074b2:	f851 cb04 	ldr.w	ip, [r1], #4
 80074b6:	f847 cf04 	str.w	ip, [r7, #4]!
 80074ba:	e7c3      	b.n	8007444 <rshift+0x28>
 80074bc:	4623      	mov	r3, r4
 80074be:	e7e1      	b.n	8007484 <rshift+0x68>

080074c0 <__hexdig_fun>:
 80074c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80074c4:	2b09      	cmp	r3, #9
 80074c6:	d802      	bhi.n	80074ce <__hexdig_fun+0xe>
 80074c8:	3820      	subs	r0, #32
 80074ca:	b2c0      	uxtb	r0, r0
 80074cc:	4770      	bx	lr
 80074ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80074d2:	2b05      	cmp	r3, #5
 80074d4:	d801      	bhi.n	80074da <__hexdig_fun+0x1a>
 80074d6:	3847      	subs	r0, #71	@ 0x47
 80074d8:	e7f7      	b.n	80074ca <__hexdig_fun+0xa>
 80074da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80074de:	2b05      	cmp	r3, #5
 80074e0:	d801      	bhi.n	80074e6 <__hexdig_fun+0x26>
 80074e2:	3827      	subs	r0, #39	@ 0x27
 80074e4:	e7f1      	b.n	80074ca <__hexdig_fun+0xa>
 80074e6:	2000      	movs	r0, #0
 80074e8:	4770      	bx	lr
	...

080074ec <__gethex>:
 80074ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f0:	b085      	sub	sp, #20
 80074f2:	468a      	mov	sl, r1
 80074f4:	9302      	str	r3, [sp, #8]
 80074f6:	680b      	ldr	r3, [r1, #0]
 80074f8:	9001      	str	r0, [sp, #4]
 80074fa:	4690      	mov	r8, r2
 80074fc:	1c9c      	adds	r4, r3, #2
 80074fe:	46a1      	mov	r9, r4
 8007500:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007504:	2830      	cmp	r0, #48	@ 0x30
 8007506:	d0fa      	beq.n	80074fe <__gethex+0x12>
 8007508:	eba9 0303 	sub.w	r3, r9, r3
 800750c:	f1a3 0b02 	sub.w	fp, r3, #2
 8007510:	f7ff ffd6 	bl	80074c0 <__hexdig_fun>
 8007514:	4605      	mov	r5, r0
 8007516:	2800      	cmp	r0, #0
 8007518:	d168      	bne.n	80075ec <__gethex+0x100>
 800751a:	49a0      	ldr	r1, [pc, #640]	@ (800779c <__gethex+0x2b0>)
 800751c:	2201      	movs	r2, #1
 800751e:	4648      	mov	r0, r9
 8007520:	f7ff ff12 	bl	8007348 <strncmp>
 8007524:	4607      	mov	r7, r0
 8007526:	2800      	cmp	r0, #0
 8007528:	d167      	bne.n	80075fa <__gethex+0x10e>
 800752a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800752e:	4626      	mov	r6, r4
 8007530:	f7ff ffc6 	bl	80074c0 <__hexdig_fun>
 8007534:	2800      	cmp	r0, #0
 8007536:	d062      	beq.n	80075fe <__gethex+0x112>
 8007538:	4623      	mov	r3, r4
 800753a:	7818      	ldrb	r0, [r3, #0]
 800753c:	2830      	cmp	r0, #48	@ 0x30
 800753e:	4699      	mov	r9, r3
 8007540:	f103 0301 	add.w	r3, r3, #1
 8007544:	d0f9      	beq.n	800753a <__gethex+0x4e>
 8007546:	f7ff ffbb 	bl	80074c0 <__hexdig_fun>
 800754a:	fab0 f580 	clz	r5, r0
 800754e:	096d      	lsrs	r5, r5, #5
 8007550:	f04f 0b01 	mov.w	fp, #1
 8007554:	464a      	mov	r2, r9
 8007556:	4616      	mov	r6, r2
 8007558:	3201      	adds	r2, #1
 800755a:	7830      	ldrb	r0, [r6, #0]
 800755c:	f7ff ffb0 	bl	80074c0 <__hexdig_fun>
 8007560:	2800      	cmp	r0, #0
 8007562:	d1f8      	bne.n	8007556 <__gethex+0x6a>
 8007564:	498d      	ldr	r1, [pc, #564]	@ (800779c <__gethex+0x2b0>)
 8007566:	2201      	movs	r2, #1
 8007568:	4630      	mov	r0, r6
 800756a:	f7ff feed 	bl	8007348 <strncmp>
 800756e:	2800      	cmp	r0, #0
 8007570:	d13f      	bne.n	80075f2 <__gethex+0x106>
 8007572:	b944      	cbnz	r4, 8007586 <__gethex+0x9a>
 8007574:	1c74      	adds	r4, r6, #1
 8007576:	4622      	mov	r2, r4
 8007578:	4616      	mov	r6, r2
 800757a:	3201      	adds	r2, #1
 800757c:	7830      	ldrb	r0, [r6, #0]
 800757e:	f7ff ff9f 	bl	80074c0 <__hexdig_fun>
 8007582:	2800      	cmp	r0, #0
 8007584:	d1f8      	bne.n	8007578 <__gethex+0x8c>
 8007586:	1ba4      	subs	r4, r4, r6
 8007588:	00a7      	lsls	r7, r4, #2
 800758a:	7833      	ldrb	r3, [r6, #0]
 800758c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007590:	2b50      	cmp	r3, #80	@ 0x50
 8007592:	d13e      	bne.n	8007612 <__gethex+0x126>
 8007594:	7873      	ldrb	r3, [r6, #1]
 8007596:	2b2b      	cmp	r3, #43	@ 0x2b
 8007598:	d033      	beq.n	8007602 <__gethex+0x116>
 800759a:	2b2d      	cmp	r3, #45	@ 0x2d
 800759c:	d034      	beq.n	8007608 <__gethex+0x11c>
 800759e:	1c71      	adds	r1, r6, #1
 80075a0:	2400      	movs	r4, #0
 80075a2:	7808      	ldrb	r0, [r1, #0]
 80075a4:	f7ff ff8c 	bl	80074c0 <__hexdig_fun>
 80075a8:	1e43      	subs	r3, r0, #1
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b18      	cmp	r3, #24
 80075ae:	d830      	bhi.n	8007612 <__gethex+0x126>
 80075b0:	f1a0 0210 	sub.w	r2, r0, #16
 80075b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80075b8:	f7ff ff82 	bl	80074c0 <__hexdig_fun>
 80075bc:	f100 3cff 	add.w	ip, r0, #4294967295
 80075c0:	fa5f fc8c 	uxtb.w	ip, ip
 80075c4:	f1bc 0f18 	cmp.w	ip, #24
 80075c8:	f04f 030a 	mov.w	r3, #10
 80075cc:	d91e      	bls.n	800760c <__gethex+0x120>
 80075ce:	b104      	cbz	r4, 80075d2 <__gethex+0xe6>
 80075d0:	4252      	negs	r2, r2
 80075d2:	4417      	add	r7, r2
 80075d4:	f8ca 1000 	str.w	r1, [sl]
 80075d8:	b1ed      	cbz	r5, 8007616 <__gethex+0x12a>
 80075da:	f1bb 0f00 	cmp.w	fp, #0
 80075de:	bf0c      	ite	eq
 80075e0:	2506      	moveq	r5, #6
 80075e2:	2500      	movne	r5, #0
 80075e4:	4628      	mov	r0, r5
 80075e6:	b005      	add	sp, #20
 80075e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ec:	2500      	movs	r5, #0
 80075ee:	462c      	mov	r4, r5
 80075f0:	e7b0      	b.n	8007554 <__gethex+0x68>
 80075f2:	2c00      	cmp	r4, #0
 80075f4:	d1c7      	bne.n	8007586 <__gethex+0x9a>
 80075f6:	4627      	mov	r7, r4
 80075f8:	e7c7      	b.n	800758a <__gethex+0x9e>
 80075fa:	464e      	mov	r6, r9
 80075fc:	462f      	mov	r7, r5
 80075fe:	2501      	movs	r5, #1
 8007600:	e7c3      	b.n	800758a <__gethex+0x9e>
 8007602:	2400      	movs	r4, #0
 8007604:	1cb1      	adds	r1, r6, #2
 8007606:	e7cc      	b.n	80075a2 <__gethex+0xb6>
 8007608:	2401      	movs	r4, #1
 800760a:	e7fb      	b.n	8007604 <__gethex+0x118>
 800760c:	fb03 0002 	mla	r0, r3, r2, r0
 8007610:	e7ce      	b.n	80075b0 <__gethex+0xc4>
 8007612:	4631      	mov	r1, r6
 8007614:	e7de      	b.n	80075d4 <__gethex+0xe8>
 8007616:	eba6 0309 	sub.w	r3, r6, r9
 800761a:	3b01      	subs	r3, #1
 800761c:	4629      	mov	r1, r5
 800761e:	2b07      	cmp	r3, #7
 8007620:	dc0a      	bgt.n	8007638 <__gethex+0x14c>
 8007622:	9801      	ldr	r0, [sp, #4]
 8007624:	f7fe f9b8 	bl	8005998 <_Balloc>
 8007628:	4604      	mov	r4, r0
 800762a:	b940      	cbnz	r0, 800763e <__gethex+0x152>
 800762c:	4b5c      	ldr	r3, [pc, #368]	@ (80077a0 <__gethex+0x2b4>)
 800762e:	4602      	mov	r2, r0
 8007630:	21e4      	movs	r1, #228	@ 0xe4
 8007632:	485c      	ldr	r0, [pc, #368]	@ (80077a4 <__gethex+0x2b8>)
 8007634:	f7ff fec0 	bl	80073b8 <__assert_func>
 8007638:	3101      	adds	r1, #1
 800763a:	105b      	asrs	r3, r3, #1
 800763c:	e7ef      	b.n	800761e <__gethex+0x132>
 800763e:	f100 0a14 	add.w	sl, r0, #20
 8007642:	2300      	movs	r3, #0
 8007644:	4655      	mov	r5, sl
 8007646:	469b      	mov	fp, r3
 8007648:	45b1      	cmp	r9, r6
 800764a:	d337      	bcc.n	80076bc <__gethex+0x1d0>
 800764c:	f845 bb04 	str.w	fp, [r5], #4
 8007650:	eba5 050a 	sub.w	r5, r5, sl
 8007654:	10ad      	asrs	r5, r5, #2
 8007656:	6125      	str	r5, [r4, #16]
 8007658:	4658      	mov	r0, fp
 800765a:	f7fe fa8f 	bl	8005b7c <__hi0bits>
 800765e:	016d      	lsls	r5, r5, #5
 8007660:	f8d8 6000 	ldr.w	r6, [r8]
 8007664:	1a2d      	subs	r5, r5, r0
 8007666:	42b5      	cmp	r5, r6
 8007668:	dd54      	ble.n	8007714 <__gethex+0x228>
 800766a:	1bad      	subs	r5, r5, r6
 800766c:	4629      	mov	r1, r5
 800766e:	4620      	mov	r0, r4
 8007670:	f7fe fe23 	bl	80062ba <__any_on>
 8007674:	4681      	mov	r9, r0
 8007676:	b178      	cbz	r0, 8007698 <__gethex+0x1ac>
 8007678:	1e6b      	subs	r3, r5, #1
 800767a:	1159      	asrs	r1, r3, #5
 800767c:	f003 021f 	and.w	r2, r3, #31
 8007680:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007684:	f04f 0901 	mov.w	r9, #1
 8007688:	fa09 f202 	lsl.w	r2, r9, r2
 800768c:	420a      	tst	r2, r1
 800768e:	d003      	beq.n	8007698 <__gethex+0x1ac>
 8007690:	454b      	cmp	r3, r9
 8007692:	dc36      	bgt.n	8007702 <__gethex+0x216>
 8007694:	f04f 0902 	mov.w	r9, #2
 8007698:	4629      	mov	r1, r5
 800769a:	4620      	mov	r0, r4
 800769c:	f7ff febe 	bl	800741c <rshift>
 80076a0:	442f      	add	r7, r5
 80076a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076a6:	42bb      	cmp	r3, r7
 80076a8:	da42      	bge.n	8007730 <__gethex+0x244>
 80076aa:	9801      	ldr	r0, [sp, #4]
 80076ac:	4621      	mov	r1, r4
 80076ae:	f7fe f9b3 	bl	8005a18 <_Bfree>
 80076b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80076b4:	2300      	movs	r3, #0
 80076b6:	6013      	str	r3, [r2, #0]
 80076b8:	25a3      	movs	r5, #163	@ 0xa3
 80076ba:	e793      	b.n	80075e4 <__gethex+0xf8>
 80076bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80076c0:	2a2e      	cmp	r2, #46	@ 0x2e
 80076c2:	d012      	beq.n	80076ea <__gethex+0x1fe>
 80076c4:	2b20      	cmp	r3, #32
 80076c6:	d104      	bne.n	80076d2 <__gethex+0x1e6>
 80076c8:	f845 bb04 	str.w	fp, [r5], #4
 80076cc:	f04f 0b00 	mov.w	fp, #0
 80076d0:	465b      	mov	r3, fp
 80076d2:	7830      	ldrb	r0, [r6, #0]
 80076d4:	9303      	str	r3, [sp, #12]
 80076d6:	f7ff fef3 	bl	80074c0 <__hexdig_fun>
 80076da:	9b03      	ldr	r3, [sp, #12]
 80076dc:	f000 000f 	and.w	r0, r0, #15
 80076e0:	4098      	lsls	r0, r3
 80076e2:	ea4b 0b00 	orr.w	fp, fp, r0
 80076e6:	3304      	adds	r3, #4
 80076e8:	e7ae      	b.n	8007648 <__gethex+0x15c>
 80076ea:	45b1      	cmp	r9, r6
 80076ec:	d8ea      	bhi.n	80076c4 <__gethex+0x1d8>
 80076ee:	492b      	ldr	r1, [pc, #172]	@ (800779c <__gethex+0x2b0>)
 80076f0:	9303      	str	r3, [sp, #12]
 80076f2:	2201      	movs	r2, #1
 80076f4:	4630      	mov	r0, r6
 80076f6:	f7ff fe27 	bl	8007348 <strncmp>
 80076fa:	9b03      	ldr	r3, [sp, #12]
 80076fc:	2800      	cmp	r0, #0
 80076fe:	d1e1      	bne.n	80076c4 <__gethex+0x1d8>
 8007700:	e7a2      	b.n	8007648 <__gethex+0x15c>
 8007702:	1ea9      	subs	r1, r5, #2
 8007704:	4620      	mov	r0, r4
 8007706:	f7fe fdd8 	bl	80062ba <__any_on>
 800770a:	2800      	cmp	r0, #0
 800770c:	d0c2      	beq.n	8007694 <__gethex+0x1a8>
 800770e:	f04f 0903 	mov.w	r9, #3
 8007712:	e7c1      	b.n	8007698 <__gethex+0x1ac>
 8007714:	da09      	bge.n	800772a <__gethex+0x23e>
 8007716:	1b75      	subs	r5, r6, r5
 8007718:	4621      	mov	r1, r4
 800771a:	9801      	ldr	r0, [sp, #4]
 800771c:	462a      	mov	r2, r5
 800771e:	f7fe fb93 	bl	8005e48 <__lshift>
 8007722:	1b7f      	subs	r7, r7, r5
 8007724:	4604      	mov	r4, r0
 8007726:	f100 0a14 	add.w	sl, r0, #20
 800772a:	f04f 0900 	mov.w	r9, #0
 800772e:	e7b8      	b.n	80076a2 <__gethex+0x1b6>
 8007730:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007734:	42bd      	cmp	r5, r7
 8007736:	dd6f      	ble.n	8007818 <__gethex+0x32c>
 8007738:	1bed      	subs	r5, r5, r7
 800773a:	42ae      	cmp	r6, r5
 800773c:	dc34      	bgt.n	80077a8 <__gethex+0x2bc>
 800773e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007742:	2b02      	cmp	r3, #2
 8007744:	d022      	beq.n	800778c <__gethex+0x2a0>
 8007746:	2b03      	cmp	r3, #3
 8007748:	d024      	beq.n	8007794 <__gethex+0x2a8>
 800774a:	2b01      	cmp	r3, #1
 800774c:	d115      	bne.n	800777a <__gethex+0x28e>
 800774e:	42ae      	cmp	r6, r5
 8007750:	d113      	bne.n	800777a <__gethex+0x28e>
 8007752:	2e01      	cmp	r6, #1
 8007754:	d10b      	bne.n	800776e <__gethex+0x282>
 8007756:	9a02      	ldr	r2, [sp, #8]
 8007758:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800775c:	6013      	str	r3, [r2, #0]
 800775e:	2301      	movs	r3, #1
 8007760:	6123      	str	r3, [r4, #16]
 8007762:	f8ca 3000 	str.w	r3, [sl]
 8007766:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007768:	2562      	movs	r5, #98	@ 0x62
 800776a:	601c      	str	r4, [r3, #0]
 800776c:	e73a      	b.n	80075e4 <__gethex+0xf8>
 800776e:	1e71      	subs	r1, r6, #1
 8007770:	4620      	mov	r0, r4
 8007772:	f7fe fda2 	bl	80062ba <__any_on>
 8007776:	2800      	cmp	r0, #0
 8007778:	d1ed      	bne.n	8007756 <__gethex+0x26a>
 800777a:	9801      	ldr	r0, [sp, #4]
 800777c:	4621      	mov	r1, r4
 800777e:	f7fe f94b 	bl	8005a18 <_Bfree>
 8007782:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007784:	2300      	movs	r3, #0
 8007786:	6013      	str	r3, [r2, #0]
 8007788:	2550      	movs	r5, #80	@ 0x50
 800778a:	e72b      	b.n	80075e4 <__gethex+0xf8>
 800778c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800778e:	2b00      	cmp	r3, #0
 8007790:	d1f3      	bne.n	800777a <__gethex+0x28e>
 8007792:	e7e0      	b.n	8007756 <__gethex+0x26a>
 8007794:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1dd      	bne.n	8007756 <__gethex+0x26a>
 800779a:	e7ee      	b.n	800777a <__gethex+0x28e>
 800779c:	0800d270 	.word	0x0800d270
 80077a0:	0800d106 	.word	0x0800d106
 80077a4:	0800d31d 	.word	0x0800d31d
 80077a8:	1e6f      	subs	r7, r5, #1
 80077aa:	f1b9 0f00 	cmp.w	r9, #0
 80077ae:	d130      	bne.n	8007812 <__gethex+0x326>
 80077b0:	b127      	cbz	r7, 80077bc <__gethex+0x2d0>
 80077b2:	4639      	mov	r1, r7
 80077b4:	4620      	mov	r0, r4
 80077b6:	f7fe fd80 	bl	80062ba <__any_on>
 80077ba:	4681      	mov	r9, r0
 80077bc:	117a      	asrs	r2, r7, #5
 80077be:	2301      	movs	r3, #1
 80077c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80077c4:	f007 071f 	and.w	r7, r7, #31
 80077c8:	40bb      	lsls	r3, r7
 80077ca:	4213      	tst	r3, r2
 80077cc:	4629      	mov	r1, r5
 80077ce:	4620      	mov	r0, r4
 80077d0:	bf18      	it	ne
 80077d2:	f049 0902 	orrne.w	r9, r9, #2
 80077d6:	f7ff fe21 	bl	800741c <rshift>
 80077da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80077de:	1b76      	subs	r6, r6, r5
 80077e0:	2502      	movs	r5, #2
 80077e2:	f1b9 0f00 	cmp.w	r9, #0
 80077e6:	d047      	beq.n	8007878 <__gethex+0x38c>
 80077e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d015      	beq.n	800781c <__gethex+0x330>
 80077f0:	2b03      	cmp	r3, #3
 80077f2:	d017      	beq.n	8007824 <__gethex+0x338>
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d109      	bne.n	800780c <__gethex+0x320>
 80077f8:	f019 0f02 	tst.w	r9, #2
 80077fc:	d006      	beq.n	800780c <__gethex+0x320>
 80077fe:	f8da 3000 	ldr.w	r3, [sl]
 8007802:	ea49 0903 	orr.w	r9, r9, r3
 8007806:	f019 0f01 	tst.w	r9, #1
 800780a:	d10e      	bne.n	800782a <__gethex+0x33e>
 800780c:	f045 0510 	orr.w	r5, r5, #16
 8007810:	e032      	b.n	8007878 <__gethex+0x38c>
 8007812:	f04f 0901 	mov.w	r9, #1
 8007816:	e7d1      	b.n	80077bc <__gethex+0x2d0>
 8007818:	2501      	movs	r5, #1
 800781a:	e7e2      	b.n	80077e2 <__gethex+0x2f6>
 800781c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800781e:	f1c3 0301 	rsb	r3, r3, #1
 8007822:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007826:	2b00      	cmp	r3, #0
 8007828:	d0f0      	beq.n	800780c <__gethex+0x320>
 800782a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800782e:	f104 0314 	add.w	r3, r4, #20
 8007832:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007836:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800783a:	f04f 0c00 	mov.w	ip, #0
 800783e:	4618      	mov	r0, r3
 8007840:	f853 2b04 	ldr.w	r2, [r3], #4
 8007844:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007848:	d01b      	beq.n	8007882 <__gethex+0x396>
 800784a:	3201      	adds	r2, #1
 800784c:	6002      	str	r2, [r0, #0]
 800784e:	2d02      	cmp	r5, #2
 8007850:	f104 0314 	add.w	r3, r4, #20
 8007854:	d13c      	bne.n	80078d0 <__gethex+0x3e4>
 8007856:	f8d8 2000 	ldr.w	r2, [r8]
 800785a:	3a01      	subs	r2, #1
 800785c:	42b2      	cmp	r2, r6
 800785e:	d109      	bne.n	8007874 <__gethex+0x388>
 8007860:	1171      	asrs	r1, r6, #5
 8007862:	2201      	movs	r2, #1
 8007864:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007868:	f006 061f 	and.w	r6, r6, #31
 800786c:	fa02 f606 	lsl.w	r6, r2, r6
 8007870:	421e      	tst	r6, r3
 8007872:	d13a      	bne.n	80078ea <__gethex+0x3fe>
 8007874:	f045 0520 	orr.w	r5, r5, #32
 8007878:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800787a:	601c      	str	r4, [r3, #0]
 800787c:	9b02      	ldr	r3, [sp, #8]
 800787e:	601f      	str	r7, [r3, #0]
 8007880:	e6b0      	b.n	80075e4 <__gethex+0xf8>
 8007882:	4299      	cmp	r1, r3
 8007884:	f843 cc04 	str.w	ip, [r3, #-4]
 8007888:	d8d9      	bhi.n	800783e <__gethex+0x352>
 800788a:	68a3      	ldr	r3, [r4, #8]
 800788c:	459b      	cmp	fp, r3
 800788e:	db17      	blt.n	80078c0 <__gethex+0x3d4>
 8007890:	6861      	ldr	r1, [r4, #4]
 8007892:	9801      	ldr	r0, [sp, #4]
 8007894:	3101      	adds	r1, #1
 8007896:	f7fe f87f 	bl	8005998 <_Balloc>
 800789a:	4681      	mov	r9, r0
 800789c:	b918      	cbnz	r0, 80078a6 <__gethex+0x3ba>
 800789e:	4b1a      	ldr	r3, [pc, #104]	@ (8007908 <__gethex+0x41c>)
 80078a0:	4602      	mov	r2, r0
 80078a2:	2184      	movs	r1, #132	@ 0x84
 80078a4:	e6c5      	b.n	8007632 <__gethex+0x146>
 80078a6:	6922      	ldr	r2, [r4, #16]
 80078a8:	3202      	adds	r2, #2
 80078aa:	f104 010c 	add.w	r1, r4, #12
 80078ae:	0092      	lsls	r2, r2, #2
 80078b0:	300c      	adds	r0, #12
 80078b2:	f7ff fd6b 	bl	800738c <memcpy>
 80078b6:	4621      	mov	r1, r4
 80078b8:	9801      	ldr	r0, [sp, #4]
 80078ba:	f7fe f8ad 	bl	8005a18 <_Bfree>
 80078be:	464c      	mov	r4, r9
 80078c0:	6923      	ldr	r3, [r4, #16]
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80078c8:	6122      	str	r2, [r4, #16]
 80078ca:	2201      	movs	r2, #1
 80078cc:	615a      	str	r2, [r3, #20]
 80078ce:	e7be      	b.n	800784e <__gethex+0x362>
 80078d0:	6922      	ldr	r2, [r4, #16]
 80078d2:	455a      	cmp	r2, fp
 80078d4:	dd0b      	ble.n	80078ee <__gethex+0x402>
 80078d6:	2101      	movs	r1, #1
 80078d8:	4620      	mov	r0, r4
 80078da:	f7ff fd9f 	bl	800741c <rshift>
 80078de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80078e2:	3701      	adds	r7, #1
 80078e4:	42bb      	cmp	r3, r7
 80078e6:	f6ff aee0 	blt.w	80076aa <__gethex+0x1be>
 80078ea:	2501      	movs	r5, #1
 80078ec:	e7c2      	b.n	8007874 <__gethex+0x388>
 80078ee:	f016 061f 	ands.w	r6, r6, #31
 80078f2:	d0fa      	beq.n	80078ea <__gethex+0x3fe>
 80078f4:	4453      	add	r3, sl
 80078f6:	f1c6 0620 	rsb	r6, r6, #32
 80078fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80078fe:	f7fe f93d 	bl	8005b7c <__hi0bits>
 8007902:	42b0      	cmp	r0, r6
 8007904:	dbe7      	blt.n	80078d6 <__gethex+0x3ea>
 8007906:	e7f0      	b.n	80078ea <__gethex+0x3fe>
 8007908:	0800d106 	.word	0x0800d106

0800790c <L_shift>:
 800790c:	f1c2 0208 	rsb	r2, r2, #8
 8007910:	0092      	lsls	r2, r2, #2
 8007912:	b570      	push	{r4, r5, r6, lr}
 8007914:	f1c2 0620 	rsb	r6, r2, #32
 8007918:	6843      	ldr	r3, [r0, #4]
 800791a:	6804      	ldr	r4, [r0, #0]
 800791c:	fa03 f506 	lsl.w	r5, r3, r6
 8007920:	432c      	orrs	r4, r5
 8007922:	40d3      	lsrs	r3, r2
 8007924:	6004      	str	r4, [r0, #0]
 8007926:	f840 3f04 	str.w	r3, [r0, #4]!
 800792a:	4288      	cmp	r0, r1
 800792c:	d3f4      	bcc.n	8007918 <L_shift+0xc>
 800792e:	bd70      	pop	{r4, r5, r6, pc}

08007930 <__match>:
 8007930:	b530      	push	{r4, r5, lr}
 8007932:	6803      	ldr	r3, [r0, #0]
 8007934:	3301      	adds	r3, #1
 8007936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800793a:	b914      	cbnz	r4, 8007942 <__match+0x12>
 800793c:	6003      	str	r3, [r0, #0]
 800793e:	2001      	movs	r0, #1
 8007940:	bd30      	pop	{r4, r5, pc}
 8007942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007946:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800794a:	2d19      	cmp	r5, #25
 800794c:	bf98      	it	ls
 800794e:	3220      	addls	r2, #32
 8007950:	42a2      	cmp	r2, r4
 8007952:	d0f0      	beq.n	8007936 <__match+0x6>
 8007954:	2000      	movs	r0, #0
 8007956:	e7f3      	b.n	8007940 <__match+0x10>

08007958 <__hexnan>:
 8007958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800795c:	680b      	ldr	r3, [r1, #0]
 800795e:	6801      	ldr	r1, [r0, #0]
 8007960:	115e      	asrs	r6, r3, #5
 8007962:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007966:	f013 031f 	ands.w	r3, r3, #31
 800796a:	b087      	sub	sp, #28
 800796c:	bf18      	it	ne
 800796e:	3604      	addne	r6, #4
 8007970:	2500      	movs	r5, #0
 8007972:	1f37      	subs	r7, r6, #4
 8007974:	4682      	mov	sl, r0
 8007976:	4690      	mov	r8, r2
 8007978:	9301      	str	r3, [sp, #4]
 800797a:	f846 5c04 	str.w	r5, [r6, #-4]
 800797e:	46b9      	mov	r9, r7
 8007980:	463c      	mov	r4, r7
 8007982:	9502      	str	r5, [sp, #8]
 8007984:	46ab      	mov	fp, r5
 8007986:	784a      	ldrb	r2, [r1, #1]
 8007988:	1c4b      	adds	r3, r1, #1
 800798a:	9303      	str	r3, [sp, #12]
 800798c:	b342      	cbz	r2, 80079e0 <__hexnan+0x88>
 800798e:	4610      	mov	r0, r2
 8007990:	9105      	str	r1, [sp, #20]
 8007992:	9204      	str	r2, [sp, #16]
 8007994:	f7ff fd94 	bl	80074c0 <__hexdig_fun>
 8007998:	2800      	cmp	r0, #0
 800799a:	d151      	bne.n	8007a40 <__hexnan+0xe8>
 800799c:	9a04      	ldr	r2, [sp, #16]
 800799e:	9905      	ldr	r1, [sp, #20]
 80079a0:	2a20      	cmp	r2, #32
 80079a2:	d818      	bhi.n	80079d6 <__hexnan+0x7e>
 80079a4:	9b02      	ldr	r3, [sp, #8]
 80079a6:	459b      	cmp	fp, r3
 80079a8:	dd13      	ble.n	80079d2 <__hexnan+0x7a>
 80079aa:	454c      	cmp	r4, r9
 80079ac:	d206      	bcs.n	80079bc <__hexnan+0x64>
 80079ae:	2d07      	cmp	r5, #7
 80079b0:	dc04      	bgt.n	80079bc <__hexnan+0x64>
 80079b2:	462a      	mov	r2, r5
 80079b4:	4649      	mov	r1, r9
 80079b6:	4620      	mov	r0, r4
 80079b8:	f7ff ffa8 	bl	800790c <L_shift>
 80079bc:	4544      	cmp	r4, r8
 80079be:	d952      	bls.n	8007a66 <__hexnan+0x10e>
 80079c0:	2300      	movs	r3, #0
 80079c2:	f1a4 0904 	sub.w	r9, r4, #4
 80079c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80079ca:	f8cd b008 	str.w	fp, [sp, #8]
 80079ce:	464c      	mov	r4, r9
 80079d0:	461d      	mov	r5, r3
 80079d2:	9903      	ldr	r1, [sp, #12]
 80079d4:	e7d7      	b.n	8007986 <__hexnan+0x2e>
 80079d6:	2a29      	cmp	r2, #41	@ 0x29
 80079d8:	d157      	bne.n	8007a8a <__hexnan+0x132>
 80079da:	3102      	adds	r1, #2
 80079dc:	f8ca 1000 	str.w	r1, [sl]
 80079e0:	f1bb 0f00 	cmp.w	fp, #0
 80079e4:	d051      	beq.n	8007a8a <__hexnan+0x132>
 80079e6:	454c      	cmp	r4, r9
 80079e8:	d206      	bcs.n	80079f8 <__hexnan+0xa0>
 80079ea:	2d07      	cmp	r5, #7
 80079ec:	dc04      	bgt.n	80079f8 <__hexnan+0xa0>
 80079ee:	462a      	mov	r2, r5
 80079f0:	4649      	mov	r1, r9
 80079f2:	4620      	mov	r0, r4
 80079f4:	f7ff ff8a 	bl	800790c <L_shift>
 80079f8:	4544      	cmp	r4, r8
 80079fa:	d936      	bls.n	8007a6a <__hexnan+0x112>
 80079fc:	f1a8 0204 	sub.w	r2, r8, #4
 8007a00:	4623      	mov	r3, r4
 8007a02:	f853 1b04 	ldr.w	r1, [r3], #4
 8007a06:	f842 1f04 	str.w	r1, [r2, #4]!
 8007a0a:	429f      	cmp	r7, r3
 8007a0c:	d2f9      	bcs.n	8007a02 <__hexnan+0xaa>
 8007a0e:	1b3b      	subs	r3, r7, r4
 8007a10:	f023 0303 	bic.w	r3, r3, #3
 8007a14:	3304      	adds	r3, #4
 8007a16:	3401      	adds	r4, #1
 8007a18:	3e03      	subs	r6, #3
 8007a1a:	42b4      	cmp	r4, r6
 8007a1c:	bf88      	it	hi
 8007a1e:	2304      	movhi	r3, #4
 8007a20:	4443      	add	r3, r8
 8007a22:	2200      	movs	r2, #0
 8007a24:	f843 2b04 	str.w	r2, [r3], #4
 8007a28:	429f      	cmp	r7, r3
 8007a2a:	d2fb      	bcs.n	8007a24 <__hexnan+0xcc>
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	b91b      	cbnz	r3, 8007a38 <__hexnan+0xe0>
 8007a30:	4547      	cmp	r7, r8
 8007a32:	d128      	bne.n	8007a86 <__hexnan+0x12e>
 8007a34:	2301      	movs	r3, #1
 8007a36:	603b      	str	r3, [r7, #0]
 8007a38:	2005      	movs	r0, #5
 8007a3a:	b007      	add	sp, #28
 8007a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a40:	3501      	adds	r5, #1
 8007a42:	2d08      	cmp	r5, #8
 8007a44:	f10b 0b01 	add.w	fp, fp, #1
 8007a48:	dd06      	ble.n	8007a58 <__hexnan+0x100>
 8007a4a:	4544      	cmp	r4, r8
 8007a4c:	d9c1      	bls.n	80079d2 <__hexnan+0x7a>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a54:	2501      	movs	r5, #1
 8007a56:	3c04      	subs	r4, #4
 8007a58:	6822      	ldr	r2, [r4, #0]
 8007a5a:	f000 000f 	and.w	r0, r0, #15
 8007a5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007a62:	6020      	str	r0, [r4, #0]
 8007a64:	e7b5      	b.n	80079d2 <__hexnan+0x7a>
 8007a66:	2508      	movs	r5, #8
 8007a68:	e7b3      	b.n	80079d2 <__hexnan+0x7a>
 8007a6a:	9b01      	ldr	r3, [sp, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d0dd      	beq.n	8007a2c <__hexnan+0xd4>
 8007a70:	f1c3 0320 	rsb	r3, r3, #32
 8007a74:	f04f 32ff 	mov.w	r2, #4294967295
 8007a78:	40da      	lsrs	r2, r3
 8007a7a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007a7e:	4013      	ands	r3, r2
 8007a80:	f846 3c04 	str.w	r3, [r6, #-4]
 8007a84:	e7d2      	b.n	8007a2c <__hexnan+0xd4>
 8007a86:	3f04      	subs	r7, #4
 8007a88:	e7d0      	b.n	8007a2c <__hexnan+0xd4>
 8007a8a:	2004      	movs	r0, #4
 8007a8c:	e7d5      	b.n	8007a3a <__hexnan+0xe2>

08007a8e <__ascii_mbtowc>:
 8007a8e:	b082      	sub	sp, #8
 8007a90:	b901      	cbnz	r1, 8007a94 <__ascii_mbtowc+0x6>
 8007a92:	a901      	add	r1, sp, #4
 8007a94:	b142      	cbz	r2, 8007aa8 <__ascii_mbtowc+0x1a>
 8007a96:	b14b      	cbz	r3, 8007aac <__ascii_mbtowc+0x1e>
 8007a98:	7813      	ldrb	r3, [r2, #0]
 8007a9a:	600b      	str	r3, [r1, #0]
 8007a9c:	7812      	ldrb	r2, [r2, #0]
 8007a9e:	1e10      	subs	r0, r2, #0
 8007aa0:	bf18      	it	ne
 8007aa2:	2001      	movne	r0, #1
 8007aa4:	b002      	add	sp, #8
 8007aa6:	4770      	bx	lr
 8007aa8:	4610      	mov	r0, r2
 8007aaa:	e7fb      	b.n	8007aa4 <__ascii_mbtowc+0x16>
 8007aac:	f06f 0001 	mvn.w	r0, #1
 8007ab0:	e7f8      	b.n	8007aa4 <__ascii_mbtowc+0x16>

08007ab2 <_realloc_r>:
 8007ab2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab6:	4680      	mov	r8, r0
 8007ab8:	4615      	mov	r5, r2
 8007aba:	460c      	mov	r4, r1
 8007abc:	b921      	cbnz	r1, 8007ac8 <_realloc_r+0x16>
 8007abe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac2:	4611      	mov	r1, r2
 8007ac4:	f7fd bedc 	b.w	8005880 <_malloc_r>
 8007ac8:	b92a      	cbnz	r2, 8007ad6 <_realloc_r+0x24>
 8007aca:	f7fd fe65 	bl	8005798 <_free_r>
 8007ace:	2400      	movs	r4, #0
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ad6:	f000 f840 	bl	8007b5a <_malloc_usable_size_r>
 8007ada:	4285      	cmp	r5, r0
 8007adc:	4606      	mov	r6, r0
 8007ade:	d802      	bhi.n	8007ae6 <_realloc_r+0x34>
 8007ae0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007ae4:	d8f4      	bhi.n	8007ad0 <_realloc_r+0x1e>
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	4640      	mov	r0, r8
 8007aea:	f7fd fec9 	bl	8005880 <_malloc_r>
 8007aee:	4607      	mov	r7, r0
 8007af0:	2800      	cmp	r0, #0
 8007af2:	d0ec      	beq.n	8007ace <_realloc_r+0x1c>
 8007af4:	42b5      	cmp	r5, r6
 8007af6:	462a      	mov	r2, r5
 8007af8:	4621      	mov	r1, r4
 8007afa:	bf28      	it	cs
 8007afc:	4632      	movcs	r2, r6
 8007afe:	f7ff fc45 	bl	800738c <memcpy>
 8007b02:	4621      	mov	r1, r4
 8007b04:	4640      	mov	r0, r8
 8007b06:	f7fd fe47 	bl	8005798 <_free_r>
 8007b0a:	463c      	mov	r4, r7
 8007b0c:	e7e0      	b.n	8007ad0 <_realloc_r+0x1e>

08007b0e <__ascii_wctomb>:
 8007b0e:	4603      	mov	r3, r0
 8007b10:	4608      	mov	r0, r1
 8007b12:	b141      	cbz	r1, 8007b26 <__ascii_wctomb+0x18>
 8007b14:	2aff      	cmp	r2, #255	@ 0xff
 8007b16:	d904      	bls.n	8007b22 <__ascii_wctomb+0x14>
 8007b18:	228a      	movs	r2, #138	@ 0x8a
 8007b1a:	601a      	str	r2, [r3, #0]
 8007b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b20:	4770      	bx	lr
 8007b22:	700a      	strb	r2, [r1, #0]
 8007b24:	2001      	movs	r0, #1
 8007b26:	4770      	bx	lr

08007b28 <fiprintf>:
 8007b28:	b40e      	push	{r1, r2, r3}
 8007b2a:	b503      	push	{r0, r1, lr}
 8007b2c:	4601      	mov	r1, r0
 8007b2e:	ab03      	add	r3, sp, #12
 8007b30:	4805      	ldr	r0, [pc, #20]	@ (8007b48 <fiprintf+0x20>)
 8007b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b36:	6800      	ldr	r0, [r0, #0]
 8007b38:	9301      	str	r3, [sp, #4]
 8007b3a:	f000 f83f 	bl	8007bbc <_vfiprintf_r>
 8007b3e:	b002      	add	sp, #8
 8007b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b44:	b003      	add	sp, #12
 8007b46:	4770      	bx	lr
 8007b48:	20000018 	.word	0x20000018

08007b4c <abort>:
 8007b4c:	b508      	push	{r3, lr}
 8007b4e:	2006      	movs	r0, #6
 8007b50:	f000 fa08 	bl	8007f64 <raise>
 8007b54:	2001      	movs	r0, #1
 8007b56:	f7f9 fe95 	bl	8001884 <_exit>

08007b5a <_malloc_usable_size_r>:
 8007b5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b5e:	1f18      	subs	r0, r3, #4
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	bfbc      	itt	lt
 8007b64:	580b      	ldrlt	r3, [r1, r0]
 8007b66:	18c0      	addlt	r0, r0, r3
 8007b68:	4770      	bx	lr

08007b6a <__sfputc_r>:
 8007b6a:	6893      	ldr	r3, [r2, #8]
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	b410      	push	{r4}
 8007b72:	6093      	str	r3, [r2, #8]
 8007b74:	da08      	bge.n	8007b88 <__sfputc_r+0x1e>
 8007b76:	6994      	ldr	r4, [r2, #24]
 8007b78:	42a3      	cmp	r3, r4
 8007b7a:	db01      	blt.n	8007b80 <__sfputc_r+0x16>
 8007b7c:	290a      	cmp	r1, #10
 8007b7e:	d103      	bne.n	8007b88 <__sfputc_r+0x1e>
 8007b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b84:	f000 b932 	b.w	8007dec <__swbuf_r>
 8007b88:	6813      	ldr	r3, [r2, #0]
 8007b8a:	1c58      	adds	r0, r3, #1
 8007b8c:	6010      	str	r0, [r2, #0]
 8007b8e:	7019      	strb	r1, [r3, #0]
 8007b90:	4608      	mov	r0, r1
 8007b92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b96:	4770      	bx	lr

08007b98 <__sfputs_r>:
 8007b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	460f      	mov	r7, r1
 8007b9e:	4614      	mov	r4, r2
 8007ba0:	18d5      	adds	r5, r2, r3
 8007ba2:	42ac      	cmp	r4, r5
 8007ba4:	d101      	bne.n	8007baa <__sfputs_r+0x12>
 8007ba6:	2000      	movs	r0, #0
 8007ba8:	e007      	b.n	8007bba <__sfputs_r+0x22>
 8007baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bae:	463a      	mov	r2, r7
 8007bb0:	4630      	mov	r0, r6
 8007bb2:	f7ff ffda 	bl	8007b6a <__sfputc_r>
 8007bb6:	1c43      	adds	r3, r0, #1
 8007bb8:	d1f3      	bne.n	8007ba2 <__sfputs_r+0xa>
 8007bba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007bbc <_vfiprintf_r>:
 8007bbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc0:	460d      	mov	r5, r1
 8007bc2:	b09d      	sub	sp, #116	@ 0x74
 8007bc4:	4614      	mov	r4, r2
 8007bc6:	4698      	mov	r8, r3
 8007bc8:	4606      	mov	r6, r0
 8007bca:	b118      	cbz	r0, 8007bd4 <_vfiprintf_r+0x18>
 8007bcc:	6a03      	ldr	r3, [r0, #32]
 8007bce:	b90b      	cbnz	r3, 8007bd4 <_vfiprintf_r+0x18>
 8007bd0:	f7fc fe76 	bl	80048c0 <__sinit>
 8007bd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bd6:	07d9      	lsls	r1, r3, #31
 8007bd8:	d405      	bmi.n	8007be6 <_vfiprintf_r+0x2a>
 8007bda:	89ab      	ldrh	r3, [r5, #12]
 8007bdc:	059a      	lsls	r2, r3, #22
 8007bde:	d402      	bmi.n	8007be6 <_vfiprintf_r+0x2a>
 8007be0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007be2:	f7fc ff84 	bl	8004aee <__retarget_lock_acquire_recursive>
 8007be6:	89ab      	ldrh	r3, [r5, #12]
 8007be8:	071b      	lsls	r3, r3, #28
 8007bea:	d501      	bpl.n	8007bf0 <_vfiprintf_r+0x34>
 8007bec:	692b      	ldr	r3, [r5, #16]
 8007bee:	b99b      	cbnz	r3, 8007c18 <_vfiprintf_r+0x5c>
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	4630      	mov	r0, r6
 8007bf4:	f000 f938 	bl	8007e68 <__swsetup_r>
 8007bf8:	b170      	cbz	r0, 8007c18 <_vfiprintf_r+0x5c>
 8007bfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bfc:	07dc      	lsls	r4, r3, #31
 8007bfe:	d504      	bpl.n	8007c0a <_vfiprintf_r+0x4e>
 8007c00:	f04f 30ff 	mov.w	r0, #4294967295
 8007c04:	b01d      	add	sp, #116	@ 0x74
 8007c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0a:	89ab      	ldrh	r3, [r5, #12]
 8007c0c:	0598      	lsls	r0, r3, #22
 8007c0e:	d4f7      	bmi.n	8007c00 <_vfiprintf_r+0x44>
 8007c10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c12:	f7fc ff6d 	bl	8004af0 <__retarget_lock_release_recursive>
 8007c16:	e7f3      	b.n	8007c00 <_vfiprintf_r+0x44>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c1c:	2320      	movs	r3, #32
 8007c1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c22:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c26:	2330      	movs	r3, #48	@ 0x30
 8007c28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007dd8 <_vfiprintf_r+0x21c>
 8007c2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c30:	f04f 0901 	mov.w	r9, #1
 8007c34:	4623      	mov	r3, r4
 8007c36:	469a      	mov	sl, r3
 8007c38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c3c:	b10a      	cbz	r2, 8007c42 <_vfiprintf_r+0x86>
 8007c3e:	2a25      	cmp	r2, #37	@ 0x25
 8007c40:	d1f9      	bne.n	8007c36 <_vfiprintf_r+0x7a>
 8007c42:	ebba 0b04 	subs.w	fp, sl, r4
 8007c46:	d00b      	beq.n	8007c60 <_vfiprintf_r+0xa4>
 8007c48:	465b      	mov	r3, fp
 8007c4a:	4622      	mov	r2, r4
 8007c4c:	4629      	mov	r1, r5
 8007c4e:	4630      	mov	r0, r6
 8007c50:	f7ff ffa2 	bl	8007b98 <__sfputs_r>
 8007c54:	3001      	adds	r0, #1
 8007c56:	f000 80a7 	beq.w	8007da8 <_vfiprintf_r+0x1ec>
 8007c5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c5c:	445a      	add	r2, fp
 8007c5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c60:	f89a 3000 	ldrb.w	r3, [sl]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 809f 	beq.w	8007da8 <_vfiprintf_r+0x1ec>
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c74:	f10a 0a01 	add.w	sl, sl, #1
 8007c78:	9304      	str	r3, [sp, #16]
 8007c7a:	9307      	str	r3, [sp, #28]
 8007c7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c80:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c82:	4654      	mov	r4, sl
 8007c84:	2205      	movs	r2, #5
 8007c86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c8a:	4853      	ldr	r0, [pc, #332]	@ (8007dd8 <_vfiprintf_r+0x21c>)
 8007c8c:	f7f8 faa8 	bl	80001e0 <memchr>
 8007c90:	9a04      	ldr	r2, [sp, #16]
 8007c92:	b9d8      	cbnz	r0, 8007ccc <_vfiprintf_r+0x110>
 8007c94:	06d1      	lsls	r1, r2, #27
 8007c96:	bf44      	itt	mi
 8007c98:	2320      	movmi	r3, #32
 8007c9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c9e:	0713      	lsls	r3, r2, #28
 8007ca0:	bf44      	itt	mi
 8007ca2:	232b      	movmi	r3, #43	@ 0x2b
 8007ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8007cac:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cae:	d015      	beq.n	8007cdc <_vfiprintf_r+0x120>
 8007cb0:	9a07      	ldr	r2, [sp, #28]
 8007cb2:	4654      	mov	r4, sl
 8007cb4:	2000      	movs	r0, #0
 8007cb6:	f04f 0c0a 	mov.w	ip, #10
 8007cba:	4621      	mov	r1, r4
 8007cbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cc0:	3b30      	subs	r3, #48	@ 0x30
 8007cc2:	2b09      	cmp	r3, #9
 8007cc4:	d94b      	bls.n	8007d5e <_vfiprintf_r+0x1a2>
 8007cc6:	b1b0      	cbz	r0, 8007cf6 <_vfiprintf_r+0x13a>
 8007cc8:	9207      	str	r2, [sp, #28]
 8007cca:	e014      	b.n	8007cf6 <_vfiprintf_r+0x13a>
 8007ccc:	eba0 0308 	sub.w	r3, r0, r8
 8007cd0:	fa09 f303 	lsl.w	r3, r9, r3
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	9304      	str	r3, [sp, #16]
 8007cd8:	46a2      	mov	sl, r4
 8007cda:	e7d2      	b.n	8007c82 <_vfiprintf_r+0xc6>
 8007cdc:	9b03      	ldr	r3, [sp, #12]
 8007cde:	1d19      	adds	r1, r3, #4
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	9103      	str	r1, [sp, #12]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	bfbb      	ittet	lt
 8007ce8:	425b      	neglt	r3, r3
 8007cea:	f042 0202 	orrlt.w	r2, r2, #2
 8007cee:	9307      	strge	r3, [sp, #28]
 8007cf0:	9307      	strlt	r3, [sp, #28]
 8007cf2:	bfb8      	it	lt
 8007cf4:	9204      	strlt	r2, [sp, #16]
 8007cf6:	7823      	ldrb	r3, [r4, #0]
 8007cf8:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cfa:	d10a      	bne.n	8007d12 <_vfiprintf_r+0x156>
 8007cfc:	7863      	ldrb	r3, [r4, #1]
 8007cfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d00:	d132      	bne.n	8007d68 <_vfiprintf_r+0x1ac>
 8007d02:	9b03      	ldr	r3, [sp, #12]
 8007d04:	1d1a      	adds	r2, r3, #4
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	9203      	str	r2, [sp, #12]
 8007d0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d0e:	3402      	adds	r4, #2
 8007d10:	9305      	str	r3, [sp, #20]
 8007d12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007de8 <_vfiprintf_r+0x22c>
 8007d16:	7821      	ldrb	r1, [r4, #0]
 8007d18:	2203      	movs	r2, #3
 8007d1a:	4650      	mov	r0, sl
 8007d1c:	f7f8 fa60 	bl	80001e0 <memchr>
 8007d20:	b138      	cbz	r0, 8007d32 <_vfiprintf_r+0x176>
 8007d22:	9b04      	ldr	r3, [sp, #16]
 8007d24:	eba0 000a 	sub.w	r0, r0, sl
 8007d28:	2240      	movs	r2, #64	@ 0x40
 8007d2a:	4082      	lsls	r2, r0
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	3401      	adds	r4, #1
 8007d30:	9304      	str	r3, [sp, #16]
 8007d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d36:	4829      	ldr	r0, [pc, #164]	@ (8007ddc <_vfiprintf_r+0x220>)
 8007d38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d3c:	2206      	movs	r2, #6
 8007d3e:	f7f8 fa4f 	bl	80001e0 <memchr>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	d03f      	beq.n	8007dc6 <_vfiprintf_r+0x20a>
 8007d46:	4b26      	ldr	r3, [pc, #152]	@ (8007de0 <_vfiprintf_r+0x224>)
 8007d48:	bb1b      	cbnz	r3, 8007d92 <_vfiprintf_r+0x1d6>
 8007d4a:	9b03      	ldr	r3, [sp, #12]
 8007d4c:	3307      	adds	r3, #7
 8007d4e:	f023 0307 	bic.w	r3, r3, #7
 8007d52:	3308      	adds	r3, #8
 8007d54:	9303      	str	r3, [sp, #12]
 8007d56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d58:	443b      	add	r3, r7
 8007d5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d5c:	e76a      	b.n	8007c34 <_vfiprintf_r+0x78>
 8007d5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d62:	460c      	mov	r4, r1
 8007d64:	2001      	movs	r0, #1
 8007d66:	e7a8      	b.n	8007cba <_vfiprintf_r+0xfe>
 8007d68:	2300      	movs	r3, #0
 8007d6a:	3401      	adds	r4, #1
 8007d6c:	9305      	str	r3, [sp, #20]
 8007d6e:	4619      	mov	r1, r3
 8007d70:	f04f 0c0a 	mov.w	ip, #10
 8007d74:	4620      	mov	r0, r4
 8007d76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d7a:	3a30      	subs	r2, #48	@ 0x30
 8007d7c:	2a09      	cmp	r2, #9
 8007d7e:	d903      	bls.n	8007d88 <_vfiprintf_r+0x1cc>
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d0c6      	beq.n	8007d12 <_vfiprintf_r+0x156>
 8007d84:	9105      	str	r1, [sp, #20]
 8007d86:	e7c4      	b.n	8007d12 <_vfiprintf_r+0x156>
 8007d88:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e7f0      	b.n	8007d74 <_vfiprintf_r+0x1b8>
 8007d92:	ab03      	add	r3, sp, #12
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	462a      	mov	r2, r5
 8007d98:	4b12      	ldr	r3, [pc, #72]	@ (8007de4 <_vfiprintf_r+0x228>)
 8007d9a:	a904      	add	r1, sp, #16
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	f7fb ff37 	bl	8003c10 <_printf_float>
 8007da2:	4607      	mov	r7, r0
 8007da4:	1c78      	adds	r0, r7, #1
 8007da6:	d1d6      	bne.n	8007d56 <_vfiprintf_r+0x19a>
 8007da8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007daa:	07d9      	lsls	r1, r3, #31
 8007dac:	d405      	bmi.n	8007dba <_vfiprintf_r+0x1fe>
 8007dae:	89ab      	ldrh	r3, [r5, #12]
 8007db0:	059a      	lsls	r2, r3, #22
 8007db2:	d402      	bmi.n	8007dba <_vfiprintf_r+0x1fe>
 8007db4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007db6:	f7fc fe9b 	bl	8004af0 <__retarget_lock_release_recursive>
 8007dba:	89ab      	ldrh	r3, [r5, #12]
 8007dbc:	065b      	lsls	r3, r3, #25
 8007dbe:	f53f af1f 	bmi.w	8007c00 <_vfiprintf_r+0x44>
 8007dc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007dc4:	e71e      	b.n	8007c04 <_vfiprintf_r+0x48>
 8007dc6:	ab03      	add	r3, sp, #12
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	462a      	mov	r2, r5
 8007dcc:	4b05      	ldr	r3, [pc, #20]	@ (8007de4 <_vfiprintf_r+0x228>)
 8007dce:	a904      	add	r1, sp, #16
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f7fc f9b5 	bl	8004140 <_printf_i>
 8007dd6:	e7e4      	b.n	8007da2 <_vfiprintf_r+0x1e6>
 8007dd8:	0800d2c8 	.word	0x0800d2c8
 8007ddc:	0800d2d2 	.word	0x0800d2d2
 8007de0:	08003c11 	.word	0x08003c11
 8007de4:	08007b99 	.word	0x08007b99
 8007de8:	0800d2ce 	.word	0x0800d2ce

08007dec <__swbuf_r>:
 8007dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dee:	460e      	mov	r6, r1
 8007df0:	4614      	mov	r4, r2
 8007df2:	4605      	mov	r5, r0
 8007df4:	b118      	cbz	r0, 8007dfe <__swbuf_r+0x12>
 8007df6:	6a03      	ldr	r3, [r0, #32]
 8007df8:	b90b      	cbnz	r3, 8007dfe <__swbuf_r+0x12>
 8007dfa:	f7fc fd61 	bl	80048c0 <__sinit>
 8007dfe:	69a3      	ldr	r3, [r4, #24]
 8007e00:	60a3      	str	r3, [r4, #8]
 8007e02:	89a3      	ldrh	r3, [r4, #12]
 8007e04:	071a      	lsls	r2, r3, #28
 8007e06:	d501      	bpl.n	8007e0c <__swbuf_r+0x20>
 8007e08:	6923      	ldr	r3, [r4, #16]
 8007e0a:	b943      	cbnz	r3, 8007e1e <__swbuf_r+0x32>
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f000 f82a 	bl	8007e68 <__swsetup_r>
 8007e14:	b118      	cbz	r0, 8007e1e <__swbuf_r+0x32>
 8007e16:	f04f 37ff 	mov.w	r7, #4294967295
 8007e1a:	4638      	mov	r0, r7
 8007e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e1e:	6823      	ldr	r3, [r4, #0]
 8007e20:	6922      	ldr	r2, [r4, #16]
 8007e22:	1a98      	subs	r0, r3, r2
 8007e24:	6963      	ldr	r3, [r4, #20]
 8007e26:	b2f6      	uxtb	r6, r6
 8007e28:	4283      	cmp	r3, r0
 8007e2a:	4637      	mov	r7, r6
 8007e2c:	dc05      	bgt.n	8007e3a <__swbuf_r+0x4e>
 8007e2e:	4621      	mov	r1, r4
 8007e30:	4628      	mov	r0, r5
 8007e32:	f7ff fa47 	bl	80072c4 <_fflush_r>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d1ed      	bne.n	8007e16 <__swbuf_r+0x2a>
 8007e3a:	68a3      	ldr	r3, [r4, #8]
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	60a3      	str	r3, [r4, #8]
 8007e40:	6823      	ldr	r3, [r4, #0]
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	6022      	str	r2, [r4, #0]
 8007e46:	701e      	strb	r6, [r3, #0]
 8007e48:	6962      	ldr	r2, [r4, #20]
 8007e4a:	1c43      	adds	r3, r0, #1
 8007e4c:	429a      	cmp	r2, r3
 8007e4e:	d004      	beq.n	8007e5a <__swbuf_r+0x6e>
 8007e50:	89a3      	ldrh	r3, [r4, #12]
 8007e52:	07db      	lsls	r3, r3, #31
 8007e54:	d5e1      	bpl.n	8007e1a <__swbuf_r+0x2e>
 8007e56:	2e0a      	cmp	r6, #10
 8007e58:	d1df      	bne.n	8007e1a <__swbuf_r+0x2e>
 8007e5a:	4621      	mov	r1, r4
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	f7ff fa31 	bl	80072c4 <_fflush_r>
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d0d9      	beq.n	8007e1a <__swbuf_r+0x2e>
 8007e66:	e7d6      	b.n	8007e16 <__swbuf_r+0x2a>

08007e68 <__swsetup_r>:
 8007e68:	b538      	push	{r3, r4, r5, lr}
 8007e6a:	4b29      	ldr	r3, [pc, #164]	@ (8007f10 <__swsetup_r+0xa8>)
 8007e6c:	4605      	mov	r5, r0
 8007e6e:	6818      	ldr	r0, [r3, #0]
 8007e70:	460c      	mov	r4, r1
 8007e72:	b118      	cbz	r0, 8007e7c <__swsetup_r+0x14>
 8007e74:	6a03      	ldr	r3, [r0, #32]
 8007e76:	b90b      	cbnz	r3, 8007e7c <__swsetup_r+0x14>
 8007e78:	f7fc fd22 	bl	80048c0 <__sinit>
 8007e7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e80:	0719      	lsls	r1, r3, #28
 8007e82:	d422      	bmi.n	8007eca <__swsetup_r+0x62>
 8007e84:	06da      	lsls	r2, r3, #27
 8007e86:	d407      	bmi.n	8007e98 <__swsetup_r+0x30>
 8007e88:	2209      	movs	r2, #9
 8007e8a:	602a      	str	r2, [r5, #0]
 8007e8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e90:	81a3      	strh	r3, [r4, #12]
 8007e92:	f04f 30ff 	mov.w	r0, #4294967295
 8007e96:	e033      	b.n	8007f00 <__swsetup_r+0x98>
 8007e98:	0758      	lsls	r0, r3, #29
 8007e9a:	d512      	bpl.n	8007ec2 <__swsetup_r+0x5a>
 8007e9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e9e:	b141      	cbz	r1, 8007eb2 <__swsetup_r+0x4a>
 8007ea0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ea4:	4299      	cmp	r1, r3
 8007ea6:	d002      	beq.n	8007eae <__swsetup_r+0x46>
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	f7fd fc75 	bl	8005798 <_free_r>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8007eb2:	89a3      	ldrh	r3, [r4, #12]
 8007eb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007eb8:	81a3      	strh	r3, [r4, #12]
 8007eba:	2300      	movs	r3, #0
 8007ebc:	6063      	str	r3, [r4, #4]
 8007ebe:	6923      	ldr	r3, [r4, #16]
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	f043 0308 	orr.w	r3, r3, #8
 8007ec8:	81a3      	strh	r3, [r4, #12]
 8007eca:	6923      	ldr	r3, [r4, #16]
 8007ecc:	b94b      	cbnz	r3, 8007ee2 <__swsetup_r+0x7a>
 8007ece:	89a3      	ldrh	r3, [r4, #12]
 8007ed0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ed8:	d003      	beq.n	8007ee2 <__swsetup_r+0x7a>
 8007eda:	4621      	mov	r1, r4
 8007edc:	4628      	mov	r0, r5
 8007ede:	f000 f883 	bl	8007fe8 <__smakebuf_r>
 8007ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ee6:	f013 0201 	ands.w	r2, r3, #1
 8007eea:	d00a      	beq.n	8007f02 <__swsetup_r+0x9a>
 8007eec:	2200      	movs	r2, #0
 8007eee:	60a2      	str	r2, [r4, #8]
 8007ef0:	6962      	ldr	r2, [r4, #20]
 8007ef2:	4252      	negs	r2, r2
 8007ef4:	61a2      	str	r2, [r4, #24]
 8007ef6:	6922      	ldr	r2, [r4, #16]
 8007ef8:	b942      	cbnz	r2, 8007f0c <__swsetup_r+0xa4>
 8007efa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007efe:	d1c5      	bne.n	8007e8c <__swsetup_r+0x24>
 8007f00:	bd38      	pop	{r3, r4, r5, pc}
 8007f02:	0799      	lsls	r1, r3, #30
 8007f04:	bf58      	it	pl
 8007f06:	6962      	ldrpl	r2, [r4, #20]
 8007f08:	60a2      	str	r2, [r4, #8]
 8007f0a:	e7f4      	b.n	8007ef6 <__swsetup_r+0x8e>
 8007f0c:	2000      	movs	r0, #0
 8007f0e:	e7f7      	b.n	8007f00 <__swsetup_r+0x98>
 8007f10:	20000018 	.word	0x20000018

08007f14 <_raise_r>:
 8007f14:	291f      	cmp	r1, #31
 8007f16:	b538      	push	{r3, r4, r5, lr}
 8007f18:	4605      	mov	r5, r0
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	d904      	bls.n	8007f28 <_raise_r+0x14>
 8007f1e:	2316      	movs	r3, #22
 8007f20:	6003      	str	r3, [r0, #0]
 8007f22:	f04f 30ff 	mov.w	r0, #4294967295
 8007f26:	bd38      	pop	{r3, r4, r5, pc}
 8007f28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007f2a:	b112      	cbz	r2, 8007f32 <_raise_r+0x1e>
 8007f2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f30:	b94b      	cbnz	r3, 8007f46 <_raise_r+0x32>
 8007f32:	4628      	mov	r0, r5
 8007f34:	f000 f830 	bl	8007f98 <_getpid_r>
 8007f38:	4622      	mov	r2, r4
 8007f3a:	4601      	mov	r1, r0
 8007f3c:	4628      	mov	r0, r5
 8007f3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f42:	f000 b817 	b.w	8007f74 <_kill_r>
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d00a      	beq.n	8007f60 <_raise_r+0x4c>
 8007f4a:	1c59      	adds	r1, r3, #1
 8007f4c:	d103      	bne.n	8007f56 <_raise_r+0x42>
 8007f4e:	2316      	movs	r3, #22
 8007f50:	6003      	str	r3, [r0, #0]
 8007f52:	2001      	movs	r0, #1
 8007f54:	e7e7      	b.n	8007f26 <_raise_r+0x12>
 8007f56:	2100      	movs	r1, #0
 8007f58:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	4798      	blx	r3
 8007f60:	2000      	movs	r0, #0
 8007f62:	e7e0      	b.n	8007f26 <_raise_r+0x12>

08007f64 <raise>:
 8007f64:	4b02      	ldr	r3, [pc, #8]	@ (8007f70 <raise+0xc>)
 8007f66:	4601      	mov	r1, r0
 8007f68:	6818      	ldr	r0, [r3, #0]
 8007f6a:	f7ff bfd3 	b.w	8007f14 <_raise_r>
 8007f6e:	bf00      	nop
 8007f70:	20000018 	.word	0x20000018

08007f74 <_kill_r>:
 8007f74:	b538      	push	{r3, r4, r5, lr}
 8007f76:	4d07      	ldr	r5, [pc, #28]	@ (8007f94 <_kill_r+0x20>)
 8007f78:	2300      	movs	r3, #0
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	4608      	mov	r0, r1
 8007f7e:	4611      	mov	r1, r2
 8007f80:	602b      	str	r3, [r5, #0]
 8007f82:	f7f9 fc77 	bl	8001874 <_kill>
 8007f86:	1c43      	adds	r3, r0, #1
 8007f88:	d102      	bne.n	8007f90 <_kill_r+0x1c>
 8007f8a:	682b      	ldr	r3, [r5, #0]
 8007f8c:	b103      	cbz	r3, 8007f90 <_kill_r+0x1c>
 8007f8e:	6023      	str	r3, [r4, #0]
 8007f90:	bd38      	pop	{r3, r4, r5, pc}
 8007f92:	bf00      	nop
 8007f94:	20000500 	.word	0x20000500

08007f98 <_getpid_r>:
 8007f98:	f7f9 bc6a 	b.w	8001870 <_getpid>

08007f9c <__swhatbuf_r>:
 8007f9c:	b570      	push	{r4, r5, r6, lr}
 8007f9e:	460c      	mov	r4, r1
 8007fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa4:	2900      	cmp	r1, #0
 8007fa6:	b096      	sub	sp, #88	@ 0x58
 8007fa8:	4615      	mov	r5, r2
 8007faa:	461e      	mov	r6, r3
 8007fac:	da0d      	bge.n	8007fca <__swhatbuf_r+0x2e>
 8007fae:	89a3      	ldrh	r3, [r4, #12]
 8007fb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007fb4:	f04f 0100 	mov.w	r1, #0
 8007fb8:	bf14      	ite	ne
 8007fba:	2340      	movne	r3, #64	@ 0x40
 8007fbc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	6031      	str	r1, [r6, #0]
 8007fc4:	602b      	str	r3, [r5, #0]
 8007fc6:	b016      	add	sp, #88	@ 0x58
 8007fc8:	bd70      	pop	{r4, r5, r6, pc}
 8007fca:	466a      	mov	r2, sp
 8007fcc:	f000 f848 	bl	8008060 <_fstat_r>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	dbec      	blt.n	8007fae <__swhatbuf_r+0x12>
 8007fd4:	9901      	ldr	r1, [sp, #4]
 8007fd6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007fda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007fde:	4259      	negs	r1, r3
 8007fe0:	4159      	adcs	r1, r3
 8007fe2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007fe6:	e7eb      	b.n	8007fc0 <__swhatbuf_r+0x24>

08007fe8 <__smakebuf_r>:
 8007fe8:	898b      	ldrh	r3, [r1, #12]
 8007fea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fec:	079d      	lsls	r5, r3, #30
 8007fee:	4606      	mov	r6, r0
 8007ff0:	460c      	mov	r4, r1
 8007ff2:	d507      	bpl.n	8008004 <__smakebuf_r+0x1c>
 8007ff4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	6123      	str	r3, [r4, #16]
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	6163      	str	r3, [r4, #20]
 8008000:	b003      	add	sp, #12
 8008002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008004:	ab01      	add	r3, sp, #4
 8008006:	466a      	mov	r2, sp
 8008008:	f7ff ffc8 	bl	8007f9c <__swhatbuf_r>
 800800c:	9f00      	ldr	r7, [sp, #0]
 800800e:	4605      	mov	r5, r0
 8008010:	4639      	mov	r1, r7
 8008012:	4630      	mov	r0, r6
 8008014:	f7fd fc34 	bl	8005880 <_malloc_r>
 8008018:	b948      	cbnz	r0, 800802e <__smakebuf_r+0x46>
 800801a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800801e:	059a      	lsls	r2, r3, #22
 8008020:	d4ee      	bmi.n	8008000 <__smakebuf_r+0x18>
 8008022:	f023 0303 	bic.w	r3, r3, #3
 8008026:	f043 0302 	orr.w	r3, r3, #2
 800802a:	81a3      	strh	r3, [r4, #12]
 800802c:	e7e2      	b.n	8007ff4 <__smakebuf_r+0xc>
 800802e:	89a3      	ldrh	r3, [r4, #12]
 8008030:	6020      	str	r0, [r4, #0]
 8008032:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008036:	81a3      	strh	r3, [r4, #12]
 8008038:	9b01      	ldr	r3, [sp, #4]
 800803a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800803e:	b15b      	cbz	r3, 8008058 <__smakebuf_r+0x70>
 8008040:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008044:	4630      	mov	r0, r6
 8008046:	f000 f81d 	bl	8008084 <_isatty_r>
 800804a:	b128      	cbz	r0, 8008058 <__smakebuf_r+0x70>
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	f023 0303 	bic.w	r3, r3, #3
 8008052:	f043 0301 	orr.w	r3, r3, #1
 8008056:	81a3      	strh	r3, [r4, #12]
 8008058:	89a3      	ldrh	r3, [r4, #12]
 800805a:	431d      	orrs	r5, r3
 800805c:	81a5      	strh	r5, [r4, #12]
 800805e:	e7cf      	b.n	8008000 <__smakebuf_r+0x18>

08008060 <_fstat_r>:
 8008060:	b538      	push	{r3, r4, r5, lr}
 8008062:	4d07      	ldr	r5, [pc, #28]	@ (8008080 <_fstat_r+0x20>)
 8008064:	2300      	movs	r3, #0
 8008066:	4604      	mov	r4, r0
 8008068:	4608      	mov	r0, r1
 800806a:	4611      	mov	r1, r2
 800806c:	602b      	str	r3, [r5, #0]
 800806e:	f7f9 fc2f 	bl	80018d0 <_fstat>
 8008072:	1c43      	adds	r3, r0, #1
 8008074:	d102      	bne.n	800807c <_fstat_r+0x1c>
 8008076:	682b      	ldr	r3, [r5, #0]
 8008078:	b103      	cbz	r3, 800807c <_fstat_r+0x1c>
 800807a:	6023      	str	r3, [r4, #0]
 800807c:	bd38      	pop	{r3, r4, r5, pc}
 800807e:	bf00      	nop
 8008080:	20000500 	.word	0x20000500

08008084 <_isatty_r>:
 8008084:	b538      	push	{r3, r4, r5, lr}
 8008086:	4d06      	ldr	r5, [pc, #24]	@ (80080a0 <_isatty_r+0x1c>)
 8008088:	2300      	movs	r3, #0
 800808a:	4604      	mov	r4, r0
 800808c:	4608      	mov	r0, r1
 800808e:	602b      	str	r3, [r5, #0]
 8008090:	f7f9 fc24 	bl	80018dc <_isatty>
 8008094:	1c43      	adds	r3, r0, #1
 8008096:	d102      	bne.n	800809e <_isatty_r+0x1a>
 8008098:	682b      	ldr	r3, [r5, #0]
 800809a:	b103      	cbz	r3, 800809e <_isatty_r+0x1a>
 800809c:	6023      	str	r3, [r4, #0]
 800809e:	bd38      	pop	{r3, r4, r5, pc}
 80080a0:	20000500 	.word	0x20000500

080080a4 <_init>:
 80080a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a6:	bf00      	nop
 80080a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080aa:	bc08      	pop	{r3}
 80080ac:	469e      	mov	lr, r3
 80080ae:	4770      	bx	lr

080080b0 <_fini>:
 80080b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b2:	bf00      	nop
 80080b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080b6:	bc08      	pop	{r3}
 80080b8:	469e      	mov	lr, r3
 80080ba:	4770      	bx	lr
