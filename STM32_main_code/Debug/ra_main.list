
ra_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd54  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ac  0800bef8  0800bef8  0000cef8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4a4  0800c4a4  0000e1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c4a4  0800c4a4  0000d4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c4ac  0800c4ac  0000e1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4ac  0800c4ac  0000d4ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c4b0  0800c4b0  0000d4b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800c4b4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000554c  200001d8  0800c68c  0000e1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20005724  0800c68c  0000e724  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002fdca  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000063f9  00000000  00000000  0003dfd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  000443d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001d722  00000000  00000000  00045b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00034616  00000000  00000000  0006329a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a03d1  00000000  00000000  000978b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000bc  00000000  00000000  00137c81  2**0
                  CONTENTS, READONLY
 19 .debug_loclists 00018880  00000000  00000000  00137d3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 000028ca  00000000  00000000  001505bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005ca8  00000000  00000000  00152e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00158b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000001ee  00000000  00000000  00158ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000020  00000000  00000000  00158d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bedc 	.word	0x0800bedc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	0800bedc 	.word	0x0800bedc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <ParsePIDParametersFromUART>:
    arm_copy_f32(new_matrix, target_data, NUM_JOINTS*NUM_JOINTS);
    // No need to re-initialize the matrix as the data pointer remains the same
}

uint8_t ParsePIDParametersFromUART(MultivariablePID *pid, char *uart_str, uint16_t len) {
    if (pid == NULL || uart_str == NULL || len == 0) return 0;
 8001030:	2800      	cmp	r0, #0
 8001032:	d04d      	beq.n	80010d0 <ParsePIDParametersFromUART+0xa0>
uint8_t ParsePIDParametersFromUART(MultivariablePID *pid, char *uart_str, uint16_t len) {
 8001034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001038:	460c      	mov	r4, r1
 800103a:	b092      	sub	sp, #72	@ 0x48
    if (pid == NULL || uart_str == NULL || len == 0) return 0;
 800103c:	2900      	cmp	r1, #0
 800103e:	d043      	beq.n	80010c8 <ParsePIDParametersFromUART+0x98>
 8001040:	2a00      	cmp	r2, #0
 8001042:	d041      	beq.n	80010c8 <ParsePIDParametersFromUART+0x98>

    // Make sure the string is null-terminated
    if (uart_str[len-1] != '\0') {
 8001044:	188b      	adds	r3, r1, r2
 8001046:	4606      	mov	r6, r0
 8001048:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800104c:	b123      	cbz	r3, 8001058 <ParsePIDParametersFromUART+0x28>
        if (len >= MAX_UART_BUFFER) {
 800104e:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 8001052:	d239      	bcs.n	80010c8 <ParsePIDParametersFromUART+0x98>
            // String too long, can't safely null-terminate
            return 0;
        }
        uart_str[len] = '\0';
 8001054:	2300      	movs	r3, #0
 8001056:	548b      	strb	r3, [r1, r2]
    }

    float32_t parsed_values[NUM_JOINTS*NUM_JOINTS];
    for (int i = 0; i < NUM_JOINTS*NUM_JOINTS; i++) {
        parsed_values[i] = 0.0f;
 8001058:	2240      	movs	r2, #64	@ 0x40
 800105a:	2100      	movs	r1, #0
 800105c:	a802      	add	r0, sp, #8
 800105e:	f008 f8e0 	bl	8009222 <memset>

    // Determine which parameter is being updated
    uint16_t chosen_param;
    char *data_start = NULL;

    if (strncmp(uart_str, "KP", 2) == 0) {
 8001062:	7823      	ldrb	r3, [r4, #0]
 8001064:	2b4b      	cmp	r3, #75	@ 0x4b
 8001066:	d12f      	bne.n	80010c8 <ParsePIDParametersFromUART+0x98>
 8001068:	7862      	ldrb	r2, [r4, #1]
 800106a:	2a50      	cmp	r2, #80	@ 0x50
 800106c:	d137      	bne.n	80010de <ParsePIDParametersFromUART+0xae>
        chosen_param = CMD_SET_KP;
 800106e:	f644 3750 	movw	r7, #19280	@ 0x4b50
    }
    else {
        // Unrecognized parameter
        return 0;
    }
    data_start = uart_str + 2;
 8001072:	1ca0      	adds	r0, r4, #2
    // Parse the comma-separated values
    char *token;
    char *rest = data_start;
    int index = 0;

    while ((token = strtok_r(rest, ",", &rest)) != NULL && index < NUM_JOINTS*NUM_JOINTS) {
 8001074:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 80010fc <ParsePIDParametersFromUART+0xcc>
    char *rest = data_start;
 8001078:	9001      	str	r0, [sp, #4]
    while ((token = strtok_r(rest, ",", &rest)) != NULL && index < NUM_JOINTS*NUM_JOINTS) {
 800107a:	ad02      	add	r5, sp, #8
    int index = 0;
 800107c:	2400      	movs	r4, #0
    while ((token = strtok_r(rest, ",", &rest)) != NULL && index < NUM_JOINTS*NUM_JOINTS) {
 800107e:	e00a      	b.n	8001096 <ParsePIDParametersFromUART+0x66>
        // Convert the token to float
        parsed_values[index] = (float32_t)atof(token);
 8001080:	f006 fac8 	bl	8007614 <atof>
 8001084:	ec51 0b10 	vmov	r0, r1, d0
 8001088:	f7ff fdb6 	bl	8000bf8 <__aeabi_d2f>
 800108c:	4603      	mov	r3, r0
 800108e:	f845 3b04 	str.w	r3, [r5], #4
    while ((token = strtok_r(rest, ",", &rest)) != NULL && index < NUM_JOINTS*NUM_JOINTS) {
 8001092:	9801      	ldr	r0, [sp, #4]
        index++;
 8001094:	3401      	adds	r4, #1
    while ((token = strtok_r(rest, ",", &rest)) != NULL && index < NUM_JOINTS*NUM_JOINTS) {
 8001096:	aa01      	add	r2, sp, #4
 8001098:	4641      	mov	r1, r8
 800109a:	f008 f904 	bl	80092a6 <strtok_r>
 800109e:	b188      	cbz	r0, 80010c4 <ParsePIDParametersFromUART+0x94>
 80010a0:	2c10      	cmp	r4, #16
 80010a2:	d1ed      	bne.n	8001080 <ParsePIDParametersFromUART+0x50>
    switch (chosen_param) {
 80010a4:	f644 3349 	movw	r3, #19273	@ 0x4b49
 80010a8:	429f      	cmp	r7, r3
 80010aa:	d013      	beq.n	80010d4 <ParsePIDParametersFromUART+0xa4>
 80010ac:	f644 3350 	movw	r3, #19280	@ 0x4b50
 80010b0:	429f      	cmp	r7, r3
 80010b2:	d012      	beq.n	80010da <ParsePIDParametersFromUART+0xaa>
            target_data = pid->Kd_data;
 80010b4:	f106 0180 	add.w	r1, r6, #128	@ 0x80
    arm_copy_f32(new_matrix, target_data, NUM_JOINTS*NUM_JOINTS);
 80010b8:	a802      	add	r0, sp, #8
 80010ba:	2210      	movs	r2, #16
 80010bc:	f006 fa74 	bl	80075a8 <arm_copy_f32>
    }

    // Update the PID parameters
    MultivariablePID_SetParameter(pid, parsed_values, chosen_param);

    return 1;
 80010c0:	2001      	movs	r0, #1
 80010c2:	e002      	b.n	80010ca <ParsePIDParametersFromUART+0x9a>
    if (index != NUM_JOINTS*NUM_JOINTS) {
 80010c4:	2c10      	cmp	r4, #16
 80010c6:	d0ed      	beq.n	80010a4 <ParsePIDParametersFromUART+0x74>
    if (pid == NULL || uart_str == NULL || len == 0) return 0;
 80010c8:	2000      	movs	r0, #0
}
 80010ca:	b012      	add	sp, #72	@ 0x48
 80010cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pid == NULL || uart_str == NULL || len == 0) return 0;
 80010d0:	2000      	movs	r0, #0
}
 80010d2:	4770      	bx	lr
            target_data = pid->Ki_data;
 80010d4:	f106 0140 	add.w	r1, r6, #64	@ 0x40
            break;
 80010d8:	e7ee      	b.n	80010b8 <ParsePIDParametersFromUART+0x88>
            target_data = pid->Kp_data;
 80010da:	4631      	mov	r1, r6
            break;
 80010dc:	e7ec      	b.n	80010b8 <ParsePIDParametersFromUART+0x88>
    else if (strncmp(uart_str, "KI", 2) == 0) {
 80010de:	2b4b      	cmp	r3, #75	@ 0x4b
 80010e0:	d1f2      	bne.n	80010c8 <ParsePIDParametersFromUART+0x98>
 80010e2:	2a49      	cmp	r2, #73	@ 0x49
 80010e4:	d102      	bne.n	80010ec <ParsePIDParametersFromUART+0xbc>
        chosen_param = CMD_SET_KI;
 80010e6:	f644 3749 	movw	r7, #19273	@ 0x4b49
 80010ea:	e7c2      	b.n	8001072 <ParsePIDParametersFromUART+0x42>
    else if (strncmp(uart_str, "KD", 2) == 0) {
 80010ec:	2b4b      	cmp	r3, #75	@ 0x4b
 80010ee:	d1eb      	bne.n	80010c8 <ParsePIDParametersFromUART+0x98>
 80010f0:	2a44      	cmp	r2, #68	@ 0x44
 80010f2:	d1e9      	bne.n	80010c8 <ParsePIDParametersFromUART+0x98>
        chosen_param = CMD_SET_KD;
 80010f4:	f644 3744 	movw	r7, #19268	@ 0x4b44
 80010f8:	e7bb      	b.n	8001072 <ParsePIDParametersFromUART+0x42>
 80010fa:	bf00      	nop
 80010fc:	0800bef8 	.word	0x0800bef8

08001100 <Trajectory_Start>:
	traj->compute_velocity = 0;
	traj->compute_acceleration = 0;
}

void Trajectory_Start(Trajectory *traj) {
    if (traj == NULL) return;
 8001100:	4603      	mov	r3, r0
 8001102:	b190      	cbz	r0, 800112a <Trajectory_Start+0x2a>

    traj->state = TRAJ_RUNNING;
    traj->startTime = 0.0f;
 8001104:	2200      	movs	r2, #0
    traj->state = TRAJ_RUNNING;
 8001106:	2001      	movs	r0, #1
    traj->currentPhase = phase;
 8001108:	2100      	movs	r1, #0
    traj->state = TRAJ_RUNNING;
 800110a:	f883 01e2 	strb.w	r0, [r3, #482]	@ 0x1e2
    traj->startTime = 0.0f;
 800110e:	f8c3 21b8 	str.w	r2, [r3, #440]	@ 0x1b8
    traj->currentTime = 0.0f;
 8001112:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
    traj->phaseTime = 0.0f;
 8001116:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
    traj->currentPhase = phase;
 800111a:	f883 11e0 	strb.w	r1, [r3, #480]	@ 0x1e0
    arm_mat_init_f32(&(traj->coeff_mat), NUM_JOINTS_TRAJ, TRAJ_POLY_TERMS, traj->coeff_data[phase]);
 800111e:	2206      	movs	r2, #6
 8001120:	2102      	movs	r1, #2
 8001122:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8001126:	f006 ba71 	b.w	800760c <arm_mat_init_f32>

    // Start with phase 0
    transition_to_phase(traj, 0);
}
 800112a:	4770      	bx	lr

0800112c <Trajectory_ParseCoeffs>:
        traj->totalDuration += durations[i];
    }
}

HAL_StatusTypeDef Trajectory_ParseCoeffs(const char* input_str, Trajectory* traj) {
    if (input_str == NULL || traj == NULL) return HAL_ERROR;
 800112c:	2800      	cmp	r0, #0
 800112e:	f000 8089 	beq.w	8001244 <Trajectory_ParseCoeffs+0x118>
HAL_StatusTypeDef Trajectory_ParseCoeffs(const char* input_str, Trajectory* traj) {
 8001132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001136:	460e      	mov	r6, r1
 8001138:	b0d0      	sub	sp, #320	@ 0x140
    if (input_str == NULL || traj == NULL) return HAL_ERROR;
 800113a:	b119      	cbz	r1, 8001144 <Trajectory_ParseCoeffs+0x18>

    const char* start = input_str;
    if (start[0] != 'T' || start[1] != 'C') return HAL_ERROR;
 800113c:	7803      	ldrb	r3, [r0, #0]
 800113e:	2b54      	cmp	r3, #84	@ 0x54
 8001140:	4605      	mov	r5, r0
 8001142:	d003      	beq.n	800114c <Trajectory_ParseCoeffs+0x20>
    if (input_str == NULL || traj == NULL) return HAL_ERROR;
 8001144:	2001      	movs	r0, #1
        Trajectory_SetCoefficients(traj, &tempCoeffs[phase * NUM_JOINTS_TRAJ * TRAJ_POLY_TERMS], phase);
    }

    Trajectory_SetDuration(traj, tempDurations, MAX_TRAJ_PHASES);
    return HAL_OK;
}
 8001146:	b050      	add	sp, #320	@ 0x140
 8001148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (start[0] != 'T' || start[1] != 'C') return HAL_ERROR;
 800114c:	7843      	ldrb	r3, [r0, #1]
 800114e:	2b43      	cmp	r3, #67	@ 0x43
 8001150:	d1f8      	bne.n	8001144 <Trajectory_ParseCoeffs+0x18>
    float32_t tempCoeffs[TOTAL_COEFFS] = {0};
 8001152:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8001156:	2100      	movs	r1, #0
    start += 2;
 8001158:	1c84      	adds	r4, r0, #2
    float32_t tempCoeffs[TOTAL_COEFFS] = {0};
 800115a:	a808      	add	r0, sp, #32
 800115c:	f008 f861 	bl	8009222 <memset>
    while (*start != '\0' && *start != 'T' && value_count < TOTAL_COEFFS) {
 8001160:	78aa      	ldrb	r2, [r5, #2]
    float32_t tempDurations[MAX_TRAJ_PHASES] = {0};
 8001162:	2500      	movs	r5, #0
 8001164:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8001168:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800116c:	e9cd 5506 	strd	r5, r5, [sp, #24]
    while (*start != '\0' && *start != 'T' && value_count < TOTAL_COEFFS) {
 8001170:	2a00      	cmp	r2, #0
 8001172:	d0e7      	beq.n	8001144 <Trajectory_ParseCoeffs+0x18>
 8001174:	2a54      	cmp	r2, #84	@ 0x54
 8001176:	d01f      	beq.n	80011b8 <Trajectory_ParseCoeffs+0x8c>
 8001178:	2d48      	cmp	r5, #72	@ 0x48
 800117a:	d0e3      	beq.n	8001144 <Trajectory_ParseCoeffs+0x18>
        float32_t val = strtof(start, &end);
 800117c:	a901      	add	r1, sp, #4
 800117e:	4620      	mov	r0, r4
 8001180:	f007 f860 	bl	8008244 <strtof>
        if (end == start) {
 8001184:	9b01      	ldr	r3, [sp, #4]
 8001186:	42a3      	cmp	r3, r4
 8001188:	d010      	beq.n	80011ac <Trajectory_ParseCoeffs+0x80>
        tempCoeffs[value_count++] = val;
 800118a:	aa08      	add	r2, sp, #32
 800118c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8001190:	ed82 0a00 	vstr	s0, [r2]
 8001194:	3501      	adds	r5, #1
        while (*start == ',' || *start == ' ') start++;
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	2a2c      	cmp	r2, #44	@ 0x2c
 800119a:	461c      	mov	r4, r3
 800119c:	f103 0301 	add.w	r3, r3, #1
 80011a0:	d0f9      	beq.n	8001196 <Trajectory_ParseCoeffs+0x6a>
 80011a2:	2a20      	cmp	r2, #32
 80011a4:	d0f7      	beq.n	8001196 <Trajectory_ParseCoeffs+0x6a>
    while (*start != '\0' && *start != 'T' && value_count < TOTAL_COEFFS) {
 80011a6:	2a00      	cmp	r2, #0
 80011a8:	d1e4      	bne.n	8001174 <Trajectory_ParseCoeffs+0x48>
 80011aa:	e7cb      	b.n	8001144 <Trajectory_ParseCoeffs+0x18>
 80011ac:	7863      	ldrb	r3, [r4, #1]
            start++;  // Skip invalid char
 80011ae:	3401      	adds	r4, #1
    while (*start != '\0' && *start != 'T' && value_count < TOTAL_COEFFS) {
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0c7      	beq.n	8001144 <Trajectory_ParseCoeffs+0x18>
 80011b4:	2b54      	cmp	r3, #84	@ 0x54
 80011b6:	d1e1      	bne.n	800117c <Trajectory_ParseCoeffs+0x50>
    while (*start != '\0' && dur_count < MAX_TRAJ_PHASES) {
 80011b8:	7863      	ldrb	r3, [r4, #1]
    int dur_count = 0;
 80011ba:	2700      	movs	r7, #0
    start++; // Skip 'T'
 80011bc:	3401      	adds	r4, #1
    while (*start != '\0' && dur_count < MAX_TRAJ_PHASES) {
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d0c0      	beq.n	8001144 <Trajectory_ParseCoeffs+0x18>
        float32_t val = strtof(start, &end);
 80011c2:	a901      	add	r1, sp, #4
 80011c4:	4620      	mov	r0, r4
 80011c6:	f007 f83d 	bl	8008244 <strtof>
        if (end == start) {
 80011ca:	9b01      	ldr	r3, [sp, #4]
 80011cc:	42a3      	cmp	r3, r4
 80011ce:	d030      	beq.n	8001232 <Trajectory_ParseCoeffs+0x106>
        tempDurations[dur_count++] = val;
 80011d0:	aa02      	add	r2, sp, #8
 80011d2:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 80011d6:	ed82 0a00 	vstr	s0, [r2]
 80011da:	3701      	adds	r7, #1
        while (*start == ',' || *start == ' ') start++;
 80011dc:	781a      	ldrb	r2, [r3, #0]
 80011de:	2a2c      	cmp	r2, #44	@ 0x2c
 80011e0:	461c      	mov	r4, r3
 80011e2:	f103 0301 	add.w	r3, r3, #1
 80011e6:	d0f9      	beq.n	80011dc <Trajectory_ParseCoeffs+0xb0>
 80011e8:	2a20      	cmp	r2, #32
 80011ea:	d0f7      	beq.n	80011dc <Trajectory_ParseCoeffs+0xb0>
    while (*start != '\0' && dur_count < MAX_TRAJ_PHASES) {
 80011ec:	b32a      	cbz	r2, 800123a <Trajectory_ParseCoeffs+0x10e>
 80011ee:	2f06      	cmp	r7, #6
 80011f0:	d1e7      	bne.n	80011c2 <Trajectory_ParseCoeffs+0x96>
    if (value_count != TOTAL_COEFFS || dur_count != MAX_TRAJ_PHASES) return HAL_ERROR;
 80011f2:	2d48      	cmp	r5, #72	@ 0x48
 80011f4:	d1a6      	bne.n	8001144 <Trajectory_ParseCoeffs+0x18>
 80011f6:	af08      	add	r7, sp, #32
 80011f8:	4635      	mov	r5, r6
    for (int phase = 0; phase < MAX_TRAJ_PHASES; phase++) {
 80011fa:	2400      	movs	r4, #0
        arm_mat_init_f32(&(traj->coeff_mat), NUM_JOINTS_TRAJ, TRAJ_POLY_TERMS, traj->coeff_data[phase]);
 80011fc:	f506 7890 	add.w	r8, r6, #288	@ 0x120
 8001200:	e006      	b.n	8001210 <Trajectory_ParseCoeffs+0xe4>
    for (int phase = 0; phase < MAX_TRAJ_PHASES; phase++) {
 8001202:	3401      	adds	r4, #1
 8001204:	2c06      	cmp	r4, #6
 8001206:	f107 0730 	add.w	r7, r7, #48	@ 0x30
 800120a:	f105 0530 	add.w	r5, r5, #48	@ 0x30
 800120e:	d01b      	beq.n	8001248 <Trajectory_ParseCoeffs+0x11c>
    arm_copy_f32(new_coeffs, traj->coeff_data[phase], NUM_JOINTS_TRAJ*TRAJ_POLY_TERMS);
 8001210:	220c      	movs	r2, #12
 8001212:	4629      	mov	r1, r5
 8001214:	4638      	mov	r0, r7
 8001216:	f006 f9c7 	bl	80075a8 <arm_copy_f32>
    if (phase == traj->currentPhase) {
 800121a:	f896 21e0 	ldrb.w	r2, [r6, #480]	@ 0x1e0
 800121e:	b2e3      	uxtb	r3, r4
 8001220:	429a      	cmp	r2, r3
 8001222:	d1ee      	bne.n	8001202 <Trajectory_ParseCoeffs+0xd6>
        arm_mat_init_f32(&(traj->coeff_mat), NUM_JOINTS_TRAJ, TRAJ_POLY_TERMS, traj->coeff_data[phase]);
 8001224:	462b      	mov	r3, r5
 8001226:	2206      	movs	r2, #6
 8001228:	2102      	movs	r1, #2
 800122a:	4640      	mov	r0, r8
 800122c:	f006 f9ee 	bl	800760c <arm_mat_init_f32>
 8001230:	e7e7      	b.n	8001202 <Trajectory_ParseCoeffs+0xd6>
    while (*start != '\0' && dur_count < MAX_TRAJ_PHASES) {
 8001232:	7863      	ldrb	r3, [r4, #1]
            start++;
 8001234:	3401      	adds	r4, #1
    while (*start != '\0' && dur_count < MAX_TRAJ_PHASES) {
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1c3      	bne.n	80011c2 <Trajectory_ParseCoeffs+0x96>
    if (value_count != TOTAL_COEFFS || dur_count != MAX_TRAJ_PHASES) return HAL_ERROR;
 800123a:	2d48      	cmp	r5, #72	@ 0x48
 800123c:	d182      	bne.n	8001144 <Trajectory_ParseCoeffs+0x18>
 800123e:	2f06      	cmp	r7, #6
 8001240:	d180      	bne.n	8001144 <Trajectory_ParseCoeffs+0x18>
 8001242:	e7d8      	b.n	80011f6 <Trajectory_ParseCoeffs+0xca>
    if (input_str == NULL || traj == NULL) return HAL_ERROR;
 8001244:	2001      	movs	r0, #1
}
 8001246:	4770      	bx	lr
        traj->duration[i] = durations[i];
 8001248:	eddd 4a02 	vldr	s9, [sp, #8]
 800124c:	ed9d 5a03 	vldr	s10, [sp, #12]
 8001250:	eddd 5a04 	vldr	s11, [sp, #16]
 8001254:	ed9d 6a05 	vldr	s12, [sp, #20]
 8001258:	eddd 6a06 	vldr	s13, [sp, #24]
 800125c:	ed9d 7a07 	vldr	s14, [sp, #28]
    traj->numPhases = num_phases;
 8001260:	f886 41e1 	strb.w	r4, [r6, #481]	@ 0x1e1
        traj->totalDuration += durations[i];
 8001264:	ee74 7a85 	vadd.f32	s15, s9, s10
        traj->duration[i] = durations[i];
 8001268:	edc6 4a71 	vstr	s9, [r6, #452]	@ 0x1c4
        traj->totalDuration += durations[i];
 800126c:	ee77 7aa5 	vadd.f32	s15, s15, s11
        traj->duration[i] = durations[i];
 8001270:	ed86 5a72 	vstr	s10, [r6, #456]	@ 0x1c8
        traj->totalDuration += durations[i];
 8001274:	ee77 7a86 	vadd.f32	s15, s15, s12
        traj->duration[i] = durations[i];
 8001278:	edc6 5a73 	vstr	s11, [r6, #460]	@ 0x1cc
        traj->totalDuration += durations[i];
 800127c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        traj->duration[i] = durations[i];
 8001280:	ed86 6a74 	vstr	s12, [r6, #464]	@ 0x1d0
        traj->totalDuration += durations[i];
 8001284:	ee77 7a87 	vadd.f32	s15, s15, s14
        traj->duration[i] = durations[i];
 8001288:	edc6 6a75 	vstr	s13, [r6, #468]	@ 0x1d4
 800128c:	ed86 7a76 	vstr	s14, [r6, #472]	@ 0x1d8
    for (uint8_t i = 0; i < num_phases; i++) {
 8001290:	edc6 7a77 	vstr	s15, [r6, #476]	@ 0x1dc
    return HAL_OK;
 8001294:	2000      	movs	r0, #0
 8001296:	e756      	b.n	8001146 <Trajectory_ParseCoeffs+0x1a>

08001298 <AS5600_MUX_Init>:

	handle->dma_busy = 0;
}

AS5600_MUX_StatusTypeDef AS5600_MUX_Init(AS5600_MUX_HandleTypeDef *handle, uint8_t num_of_sensors) {
    if (!handle || num_of_sensors > AS5600_MUX_MAX_CHANNELS) return AS5600_MUX_ERROR;
 8001298:	b108      	cbz	r0, 800129e <AS5600_MUX_Init+0x6>
 800129a:	2908      	cmp	r1, #8
 800129c:	d901      	bls.n	80012a2 <AS5600_MUX_Init+0xa>
 800129e:	2001      	movs	r0, #1
    handle->num_channels = num_of_sensors;
    memset(handle->channel_raw_values, 0, AS5600_MUX_MAX_CHANNELS * sizeof(uint16_t));
    memset(handle->channel_states, AS5600_MUX_NONE, AS5600_MUX_MAX_CHANNELS * sizeof(uint16_t));

    return AS5600_MUX_OK;
}
 80012a0:	4770      	bx	lr
    handle->dma_loop_state = AS5600_MUX_DMA_IDLE;
 80012a2:	2300      	movs	r3, #0
    memset(handle->channel_states, AS5600_MUX_NONE, AS5600_MUX_MAX_CHANNELS * sizeof(uint16_t));
 80012a4:	f04f 3202 	mov.w	r2, #33686018	@ 0x2020202
    handle->is_initialized = AS5600_MUX_INITIALIZED;
 80012a8:	f04f 0c01 	mov.w	ip, #1
 80012ac:	f8a0 c000 	strh.w	ip, [r0]
    handle->dma_loop_state = AS5600_MUX_DMA_IDLE;
 80012b0:	7183      	strb	r3, [r0, #6]
    handle->dma_busy = true;
 80012b2:	f880 c002 	strb.w	ip, [r0, #2]
    handle->num_channels = num_of_sensors;
 80012b6:	71c1      	strb	r1, [r0, #7]
    memset(handle->channel_raw_values, 0, AS5600_MUX_MAX_CHANNELS * sizeof(uint16_t));
 80012b8:	6083      	str	r3, [r0, #8]
 80012ba:	60c3      	str	r3, [r0, #12]
 80012bc:	6103      	str	r3, [r0, #16]
 80012be:	6143      	str	r3, [r0, #20]
    memset(handle->channel_states, AS5600_MUX_NONE, AS5600_MUX_MAX_CHANNELS * sizeof(uint16_t));
 80012c0:	6182      	str	r2, [r0, #24]
 80012c2:	61c2      	str	r2, [r0, #28]
 80012c4:	6202      	str	r2, [r0, #32]
 80012c6:	6242      	str	r2, [r0, #36]	@ 0x24
    return AS5600_MUX_OK;
 80012c8:	4618      	mov	r0, r3
 80012ca:	4770      	bx	lr

080012cc <AS5600_MUX_TxCpltCallback>:
	}

	return AS5600_MUX_OK;
}
void AS5600_MUX_TxCpltCallback(AS5600_MUX_HandleTypeDef *handle) {
	handle->dma_loop_state = AS5600_MUX_READ_AS5600;
 80012cc:	2202      	movs	r2, #2
	handle->dma_busy = 0;
 80012ce:	2300      	movs	r3, #0
	handle->dma_loop_state = AS5600_MUX_READ_AS5600;
 80012d0:	7182      	strb	r2, [r0, #6]
	handle->dma_busy = 0;
 80012d2:	7083      	strb	r3, [r0, #2]
}
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop

080012d8 <AS5600_MUX_MemRxCpltCallback>:
void AS5600_MUX_MemRxCpltCallback(AS5600_MUX_HandleTypeDef *handle) {
	handle->dma_loop_state = AS5600_MUX_DMA_DONE;
 80012d8:	2203      	movs	r2, #3
	handle->dma_busy = 0;
 80012da:	2300      	movs	r3, #0
	handle->dma_loop_state = AS5600_MUX_DMA_DONE;
 80012dc:	7182      	strb	r2, [r0, #6]
	handle->dma_busy = 0;
 80012de:	7083      	strb	r3, [r0, #2]
}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop

080012e4 <AS5600_MUX_ReadAllPolling>:

AS5600_MUX_StatusTypeDef AS5600_MUX_ReadAllPolling(AS5600_MUX_HandleTypeDef *handle) {
	if (!handle) return AS5600_MUX_ERROR;
 80012e4:	2800      	cmp	r0, #0
 80012e6:	d054      	beq.n	8001392 <AS5600_MUX_ReadAllPolling+0xae>
AS5600_MUX_StatusTypeDef AS5600_MUX_ReadAllPolling(AS5600_MUX_HandleTypeDef *handle) {
 80012e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!handle->is_initialized || handle->dma_mode_start_stop == AS5600_MUX_DMA_RUN) return AS5600_MUX_ERROR;
 80012ec:	7803      	ldrb	r3, [r0, #0]
AS5600_MUX_StatusTypeDef AS5600_MUX_ReadAllPolling(AS5600_MUX_HandleTypeDef *handle) {
 80012ee:	b087      	sub	sp, #28
 80012f0:	4605      	mov	r5, r0
	if (!handle->is_initialized || handle->dma_mode_start_stop == AS5600_MUX_DMA_RUN) return AS5600_MUX_ERROR;
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d03c      	beq.n	8001370 <AS5600_MUX_ReadAllPolling+0x8c>
 80012f6:	7844      	ldrb	r4, [r0, #1]
 80012f8:	bbd4      	cbnz	r4, 8001370 <AS5600_MUX_ReadAllPolling+0x8c>

    uint8_t channel_select = 1;
    uint8_t buffer[2];

	for (int i=0; i<handle->num_channels; i++) {
 80012fa:	79c3      	ldrb	r3, [r0, #7]
    uint8_t channel_select = 1;
 80012fc:	2701      	movs	r7, #1
	for (int i=0; i<handle->num_channels; i++) {
 80012fe:	b39b      	cbz	r3, 8001368 <AS5600_MUX_ReadAllPolling+0x84>
		handle->channel_states[i] = AS5600_MUX_OK;
		channel_select = 1 << i;

		// Switch channel
		if (HAL_I2C_Master_Transmit(AS5600_MUX_I2C, TCA9548A_ADDR, &channel_select, 1, AS5600_MUX_TIMEOUT) != HAL_OK) {
 8001300:	f8df 9094 	ldr.w	r9, [pc, #148]	@ 8001398 <AS5600_MUX_ReadAllPolling+0xb4>
 8001304:	f100 0617 	add.w	r6, r0, #23
 8001308:	f100 0a06 	add.w	sl, r0, #6
 800130c:	f10d 0b14 	add.w	fp, sp, #20
 8001310:	f04f 0864 	mov.w	r8, #100	@ 0x64
		handle->channel_states[i] = AS5600_MUX_OK;
 8001314:	2300      	movs	r3, #0
		channel_select = 1 << i;
 8001316:	fa07 f104 	lsl.w	r1, r7, r4
		handle->channel_states[i] = AS5600_MUX_OK;
 800131a:	f806 3f01 	strb.w	r3, [r6, #1]!
		if (HAL_I2C_Master_Transmit(AS5600_MUX_I2C, TCA9548A_ADDR, &channel_select, 1, AS5600_MUX_TIMEOUT) != HAL_OK) {
 800131e:	f10d 0213 	add.w	r2, sp, #19
 8001322:	2301      	movs	r3, #1
		channel_select = 1 << i;
 8001324:	f88d 1013 	strb.w	r1, [sp, #19]
		if (HAL_I2C_Master_Transmit(AS5600_MUX_I2C, TCA9548A_ADDR, &channel_select, 1, AS5600_MUX_TIMEOUT) != HAL_OK) {
 8001328:	f8cd 8000 	str.w	r8, [sp]
 800132c:	21e0      	movs	r1, #224	@ 0xe0
 800132e:	4648      	mov	r0, r9
 8001330:	f001 fce6 	bl	8002d00 <HAL_I2C_Master_Transmit>
			handle->channel_states[i] = AS5600_MUX_ERROR;
		}

		// Read angle
		if (HAL_I2C_Mem_Read(AS5600_MUX_I2C, AS5600_ADDR, ANGLE_MSB_REG, I2C_MEMADD_SIZE_8BIT, buffer, 2, AS5600_MUX_TIMEOUT) != HAL_OK) {
 8001334:	2202      	movs	r2, #2
 8001336:	2301      	movs	r3, #1
		if (HAL_I2C_Master_Transmit(AS5600_MUX_I2C, TCA9548A_ADDR, &channel_select, 1, AS5600_MUX_TIMEOUT) != HAL_OK) {
 8001338:	b100      	cbz	r0, 800133c <AS5600_MUX_ReadAllPolling+0x58>
			handle->channel_states[i] = AS5600_MUX_ERROR;
 800133a:	7037      	strb	r7, [r6, #0]
		if (HAL_I2C_Mem_Read(AS5600_MUX_I2C, AS5600_ADDR, ANGLE_MSB_REG, I2C_MEMADD_SIZE_8BIT, buffer, 2, AS5600_MUX_TIMEOUT) != HAL_OK) {
 800133c:	e9cd 2801 	strd	r2, r8, [sp, #4]
 8001340:	f8cd b000 	str.w	fp, [sp]
 8001344:	220e      	movs	r2, #14
 8001346:	216c      	movs	r1, #108	@ 0x6c
 8001348:	4648      	mov	r0, r9
 800134a:	f001 fe23 	bl	8002f94 <HAL_I2C_Mem_Read>
 800134e:	b198      	cbz	r0, 8001378 <AS5600_MUX_ReadAllPolling+0x94>
			handle->channel_states[i] = AS5600_MUX_ERROR;
		}

	    handle->channel_raw_values[i] = ((buffer[0] << 8) | buffer[1]) & 0x0FFF;
 8001350:	f8bd 3014 	ldrh.w	r3, [sp, #20]
			handle->channel_states[i] = AS5600_MUX_ERROR;
 8001354:	7037      	strb	r7, [r6, #0]
	    handle->channel_raw_values[i] = ((buffer[0] << 8) | buffer[1]) & 0x0FFF;
 8001356:	ba5b      	rev16	r3, r3
 8001358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800135c:	f82a 3f02 	strh.w	r3, [sl, #2]!
	for (int i=0; i<handle->num_channels; i++) {
 8001360:	79eb      	ldrb	r3, [r5, #7]
 8001362:	3401      	adds	r4, #1
 8001364:	429c      	cmp	r4, r3
 8001366:	dbd5      	blt.n	8001314 <AS5600_MUX_ReadAllPolling+0x30>
	}

	return AS5600_MUX_OK;
 8001368:	2000      	movs	r0, #0
}
 800136a:	b007      	add	sp, #28
 800136c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!handle) return AS5600_MUX_ERROR;
 8001370:	2001      	movs	r0, #1
}
 8001372:	b007      	add	sp, #28
 8001374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    handle->channel_raw_values[i] = ((buffer[0] << 8) | buffer[1]) & 0x0FFF;
 8001378:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800137c:	ba5b      	rev16	r3, r3
 800137e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001382:	f82a 3f02 	strh.w	r3, [sl, #2]!
	for (int i=0; i<handle->num_channels; i++) {
 8001386:	79eb      	ldrb	r3, [r5, #7]
 8001388:	3401      	adds	r4, #1
 800138a:	42a3      	cmp	r3, r4
 800138c:	dcc2      	bgt.n	8001314 <AS5600_MUX_ReadAllPolling+0x30>
	return AS5600_MUX_OK;
 800138e:	2000      	movs	r0, #0
 8001390:	e7eb      	b.n	800136a <AS5600_MUX_ReadAllPolling+0x86>
	if (!handle) return AS5600_MUX_ERROR;
 8001392:	2001      	movs	r0, #1
}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	200002e8 	.word	0x200002e8

0800139c <CommandProtocol_SetCommandProcessor>:
#include "CommandProtocol.h"

static ProcessCommandFn CustomProcessCommand = NULL;

void CommandProtocol_SetCommandProcessor(ProcessCommandFn processFn) {
    CustomProcessCommand = processFn;
 800139c:	4b01      	ldr	r3, [pc, #4]	@ (80013a4 <CommandProtocol_SetCommandProcessor+0x8>)
 800139e:	6018      	str	r0, [r3, #0]
}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	20000218 	.word	0x20000218

080013a8 <CommandProtocol_ProcessByte>:
    handle->isInitialized = true;

    return HAL_UART_Receive_IT(handle->huart, &handle->rxBuffer[0], 1);
}

HAL_StatusTypeDef CommandProtocol_ProcessByte(CommandProtocol_Handle* handle, uint8_t byte) {
 80013a8:	b538      	push	{r3, r4, r5, lr}
    if (!handle->isInitialized) {
 80013aa:	f890 33f1 	ldrb.w	r3, [r0, #1009]	@ 0x3f1
 80013ae:	b1c3      	cbz	r3, 80013e2 <CommandProtocol_ProcessByte+0x3a>
        return HAL_ERROR;
    }

    if (handle->rxIndex < sizeof(handle->rxBuffer) - 1)
    {
        if (byte == '\n' || byte == '\r')
 80013b0:	290a      	cmp	r1, #10

            handle->rxIndex = 0;
        }
        else
        {
        	handle->rxBuffer[handle->rxIndex] = byte; // Store the received byte in the buffer
 80013b2:	f890 33f0 	ldrb.w	r3, [r0, #1008]	@ 0x3f0
 80013b6:	4604      	mov	r4, r0
        if (byte == '\n' || byte == '\r')
 80013b8:	d008      	beq.n	80013cc <CommandProtocol_ProcessByte+0x24>
 80013ba:	290d      	cmp	r1, #13
 80013bc:	d006      	beq.n	80013cc <CommandProtocol_ProcessByte+0x24>
        	handle->rxBuffer[handle->rxIndex] = byte; // Store the received byte in the buffer
 80013be:	18c2      	adds	r2, r0, r3
        	handle->rxIndex++; // Move to the next position in the buffer
 80013c0:	3301      	adds	r3, #1
        	handle->rxBuffer[handle->rxIndex] = byte; // Store the received byte in the buffer
 80013c2:	7211      	strb	r1, [r2, #8]
        	handle->rxIndex++; // Move to the next position in the buffer
 80013c4:	f880 33f0 	strb.w	r3, [r0, #1008]	@ 0x3f0
    }
    else // Reset index to 0
    {
        handle->rxIndex = 0;
    }
    return HAL_OK;
 80013c8:	2000      	movs	r0, #0
}
 80013ca:	bd38      	pop	{r3, r4, r5, pc}
            if (CustomProcessCommand != NULL)
 80013cc:	4a06      	ldr	r2, [pc, #24]	@ (80013e8 <CommandProtocol_ProcessByte+0x40>)
            handle->rxBuffer[handle->rxIndex] = '\0';
 80013ce:	4423      	add	r3, r4
            if (CustomProcessCommand != NULL)
 80013d0:	6812      	ldr	r2, [r2, #0]
            handle->rxBuffer[handle->rxIndex] = '\0';
 80013d2:	2500      	movs	r5, #0
 80013d4:	721d      	strb	r5, [r3, #8]
            if (CustomProcessCommand != NULL)
 80013d6:	b122      	cbz	r2, 80013e2 <CommandProtocol_ProcessByte+0x3a>
                CustomProcessCommand(handle);
 80013d8:	4620      	mov	r0, r4
 80013da:	4790      	blx	r2
            handle->rxIndex = 0;
 80013dc:	f884 53f0 	strb.w	r5, [r4, #1008]	@ 0x3f0
 80013e0:	e7f2      	b.n	80013c8 <CommandProtocol_ProcessByte+0x20>
        return HAL_ERROR;
 80013e2:	2001      	movs	r0, #1
}
 80013e4:	bd38      	pop	{r3, r4, r5, pc}
 80013e6:	bf00      	nop
 80013e8:	20000218 	.word	0x20000218

080013ec <CommandProtocol_SendResponse>:

HAL_StatusTypeDef CommandProtocol_SendResponse(CommandProtocol_Handle* handle, const char* response) {
    if (!handle->isInitialized || response == NULL) {
 80013ec:	f890 33f1 	ldrb.w	r3, [r0, #1009]	@ 0x3f1
 80013f0:	b183      	cbz	r3, 8001414 <CommandProtocol_SendResponse+0x28>
HAL_StatusTypeDef CommandProtocol_SendResponse(CommandProtocol_Handle* handle, const char* response) {
 80013f2:	b570      	push	{r4, r5, r6, lr}
 80013f4:	460d      	mov	r5, r1
    if (!handle->isInitialized || response == NULL) {
 80013f6:	b159      	cbz	r1, 8001410 <CommandProtocol_SendResponse+0x24>
        return HAL_ERROR;
    }

    return HAL_UART_Transmit(handle->huart, (uint8_t*)response, strlen(response),
 80013f8:	4604      	mov	r4, r0
 80013fa:	4608      	mov	r0, r1
 80013fc:	f7fe ff40 	bl	8000280 <strlen>
 8001400:	4629      	mov	r1, r5
 8001402:	b282      	uxth	r2, r0
 8001404:	e9d4 0300 	ldrd	r0, r3, [r4]
                            handle->timeout);
}
 8001408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return HAL_UART_Transmit(handle->huart, (uint8_t*)response, strlen(response),
 800140c:	f003 bdd8 	b.w	8004fc0 <HAL_UART_Transmit>
}
 8001410:	2001      	movs	r0, #1
 8001412:	bd70      	pop	{r4, r5, r6, pc}
 8001414:	2001      	movs	r0, #1
 8001416:	4770      	bx	lr

08001418 <DWT_Init>:
#include "Timing.h"

static uint32_t last_cycle = 0;

void DWT_Init(void) {
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8001418:	4908      	ldr	r1, [pc, #32]	@ (800143c <DWT_Init+0x24>)
    DWT->CYCCNT = 0;                                // Reset cycle counter
 800141a:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <DWT_Init+0x28>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 800141c:	f8d1 20fc 	ldr.w	r2, [r1, #252]	@ 0xfc
    DWT->CYCCNT = 0;                                // Reset cycle counter
 8001420:	2000      	movs	r0, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8001422:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001426:	f8c1 20fc 	str.w	r2, [r1, #252]	@ 0xfc
    DWT->CYCCNT = 0;                                // Reset cycle counter
 800142a:	6058      	str	r0, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;           // Start cycle counter
 800142c:	681a      	ldr	r2, [r3, #0]
    last_cycle = DWT->CYCCNT;
 800142e:	4905      	ldr	r1, [pc, #20]	@ (8001444 <DWT_Init+0x2c>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;           // Start cycle counter
 8001430:	f042 0201 	orr.w	r2, r2, #1
 8001434:	601a      	str	r2, [r3, #0]
    last_cycle = DWT->CYCCNT;
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	600b      	str	r3, [r1, #0]
}
 800143a:	4770      	bx	lr
 800143c:	e000ed00 	.word	0xe000ed00
 8001440:	e0001000 	.word	0xe0001000
 8001444:	2000021c 	.word	0x2000021c

08001448 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001448:	b510      	push	{r4, lr}
 800144a:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800144c:	2400      	movs	r4, #0
 800144e:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <MX_DMA_Init+0x44>)
 8001450:	9401      	str	r4, [sp, #4]
 8001452:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001454:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 8001458:	6319      	str	r1, [r3, #48]	@ 0x30
 800145a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001460:	4622      	mov	r2, r4
 8001462:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001464:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001466:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001468:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800146a:	f000 fded 	bl	8002048 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800146e:	200b      	movs	r0, #11
 8001470:	f000 fe26 	bl	80020c0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001474:	4622      	mov	r2, r4
 8001476:	2105      	movs	r1, #5
 8001478:	200c      	movs	r0, #12
 800147a:	f000 fde5 	bl	8002048 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800147e:	200c      	movs	r0, #12

}
 8001480:	b002      	add	sp, #8
 8001482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001486:	f000 be1b 	b.w	80020c0 <HAL_NVIC_EnableIRQ>
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800

08001490 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001490:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(TEST_LED_GPIO_Port, TEST_LED_Pin);
 8001492:	4c05      	ldr	r4, [pc, #20]	@ (80014a8 <StartDefaultTask+0x18>)
 8001494:	4620      	mov	r0, r4
 8001496:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800149a:	f001 f9a5 	bl	80027e8 <HAL_GPIO_TogglePin>
    osDelay(500);
 800149e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014a2:	f004 f8e3 	bl	800566c <osDelay>
  for(;;)
 80014a6:	e7f5      	b.n	8001494 <StartDefaultTask+0x4>
 80014a8:	40020800 	.word	0x40020800

080014ac <ReadAs5600Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadAs5600Task */
void ReadAs5600Task(void *argument)
{
 80014ac:	b530      	push	{r4, r5, lr}
 80014ae:	b083      	sub	sp, #12
  /* USER CODE BEGIN ReadAs5600Task */
	TickType_t xLastWakeTime;
	const TickType_t xPeriodTicks = FREQ_TO_TICKS(200);

	xLastWakeTime = xTaskGetTickCount();
 80014b0:	f005 f9fa 	bl	80068a8 <xTaskGetTickCount>
 80014b4:	4d06      	ldr	r5, [pc, #24]	@ (80014d0 <ReadAs5600Task+0x24>)
  /* Infinite loop */
  for(;;)
  {
	  appMuxStatus = AS5600_MUX_ReadAllPolling(&appMuxHandle);
 80014b6:	4c07      	ldr	r4, [pc, #28]	@ (80014d4 <ReadAs5600Task+0x28>)
	xLastWakeTime = xTaskGetTickCount();
 80014b8:	9001      	str	r0, [sp, #4]
	  appMuxStatus = AS5600_MUX_ReadAllPolling(&appMuxHandle);
 80014ba:	4620      	mov	r0, r4
 80014bc:	f7ff ff12 	bl	80012e4 <AS5600_MUX_ReadAllPolling>

	  vTaskDelayUntil(&xLastWakeTime, xPeriodTicks);
 80014c0:	2105      	movs	r1, #5
	  appMuxStatus = AS5600_MUX_ReadAllPolling(&appMuxHandle);
 80014c2:	4603      	mov	r3, r0
	  vTaskDelayUntil(&xLastWakeTime, xPeriodTicks);
 80014c4:	a801      	add	r0, sp, #4
	  appMuxStatus = AS5600_MUX_ReadAllPolling(&appMuxHandle);
 80014c6:	702b      	strb	r3, [r5, #0]
	  vTaskDelayUntil(&xLastWakeTime, xPeriodTicks);
 80014c8:	f005 f888 	bl	80065dc <vTaskDelayUntil>
  for(;;)
 80014cc:	e7f5      	b.n	80014ba <ReadAs5600Task+0xe>
 80014ce:	bf00      	nop
 80014d0:	200001f4 	.word	0x200001f4
 80014d4:	200001f8 	.word	0x200001f8

080014d8 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 80014d8:	b510      	push	{r4, lr}
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80014da:	4a08      	ldr	r2, [pc, #32]	@ (80014fc <MX_FREERTOS_Init+0x24>)
 80014dc:	4808      	ldr	r0, [pc, #32]	@ (8001500 <MX_FREERTOS_Init+0x28>)
 80014de:	2100      	movs	r1, #0
 80014e0:	f004 f87e 	bl	80055e0 <osThreadNew>
 80014e4:	4b07      	ldr	r3, [pc, #28]	@ (8001504 <MX_FREERTOS_Init+0x2c>)
  as5600TaskHandle = osThreadNew(ReadAs5600Task, NULL, &as5600Task_attributes);
 80014e6:	4a08      	ldr	r2, [pc, #32]	@ (8001508 <MX_FREERTOS_Init+0x30>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80014e8:	4604      	mov	r4, r0
  as5600TaskHandle = osThreadNew(ReadAs5600Task, NULL, &as5600Task_attributes);
 80014ea:	2100      	movs	r1, #0
 80014ec:	4807      	ldr	r0, [pc, #28]	@ (800150c <MX_FREERTOS_Init+0x34>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80014ee:	601c      	str	r4, [r3, #0]
  as5600TaskHandle = osThreadNew(ReadAs5600Task, NULL, &as5600Task_attributes);
 80014f0:	f004 f876 	bl	80055e0 <osThreadNew>
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <MX_FREERTOS_Init+0x38>)
 80014f6:	6018      	str	r0, [r3, #0]
}
 80014f8:	bd10      	pop	{r4, pc}
 80014fa:	bf00      	nop
 80014fc:	0800c030 	.word	0x0800c030
 8001500:	08001491 	.word	0x08001491
 8001504:	20000224 	.word	0x20000224
 8001508:	0800c00c 	.word	0x0800c00c
 800150c:	080014ad 	.word	0x080014ad
 8001510:	20000220 	.word	0x20000220

08001514 <MX_GPIO_Init>:
     PB5   ------> S_TIM3_CH2
     PB8   ------> S_TIM10_CH1
     PB9   ------> S_TIM4_CH4
*/
void MX_GPIO_Init(void)
{
 8001514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	2400      	movs	r4, #0
{
 800151a:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001520:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001524:	4b51      	ldr	r3, [pc, #324]	@ (800166c <MX_GPIO_Init+0x158>)
 8001526:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TEST_LED_Pin|M1_DIR_Pin|M1_EN_Pin, GPIO_PIN_RESET);
 800152c:	4f50      	ldr	r7, [pc, #320]	@ (8001670 <MX_GPIO_Init+0x15c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M2_DIR_Pin|M2_EN_Pin, GPIO_PIN_RESET);
 800152e:	4e51      	ldr	r6, [pc, #324]	@ (8001674 <MX_GPIO_Init+0x160>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001530:	f042 0204 	orr.w	r2, r2, #4
 8001534:	631a      	str	r2, [r3, #48]	@ 0x30
 8001536:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001538:	f002 0204 	and.w	r2, r2, #4
 800153c:	9200      	str	r2, [sp, #0]
 800153e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001540:	9401      	str	r4, [sp, #4]
 8001542:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001544:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001548:	631a      	str	r2, [r3, #48]	@ 0x30
 800154a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800154c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001550:	9201      	str	r2, [sp, #4]
 8001552:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	9402      	str	r4, [sp, #8]
 8001556:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001558:	f042 0201 	orr.w	r2, r2, #1
 800155c:	631a      	str	r2, [r3, #48]	@ 0x30
 800155e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001560:	f002 0201 	and.w	r2, r2, #1
 8001564:	9202      	str	r2, [sp, #8]
 8001566:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001568:	9403      	str	r4, [sp, #12]
 800156a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800156c:	f042 0202 	orr.w	r2, r2, #2
 8001570:	631a      	str	r2, [r3, #48]	@ 0x30
 8001572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, TEST_LED_Pin|M1_DIR_Pin|M1_EN_Pin, GPIO_PIN_RESET);
 800157a:	4622      	mov	r2, r4
 800157c:	4638      	mov	r0, r7
 800157e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, TEST_LED_Pin|M1_DIR_Pin|M1_EN_Pin, GPIO_PIN_RESET);
 8001584:	f001 f92c 	bl	80027e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, M2_DIR_Pin|M2_EN_Pin, GPIO_PIN_RESET);
 8001588:	4622      	mov	r2, r4
 800158a:	4630      	mov	r0, r6
 800158c:	210a      	movs	r1, #10
 800158e:	f001 f927 	bl	80027e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TEST_LED_Pin M1_DIR_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin|M1_DIR_Pin;
 8001592:	2400      	movs	r4, #0
 8001594:	2500      	movs	r5, #0
 8001596:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 800159a:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159c:	a904      	add	r1, sp, #16
 800159e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = TEST_LED_Pin|M1_DIR_Pin;
 80015a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80015a4:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a8:	f000 ff62 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_EN_Pin */
  GPIO_InitStruct.Pin = M1_EN_Pin;
 80015ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80015b0:	2301      	movs	r3, #1
 80015b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(M1_EN_GPIO_Port, &GPIO_InitStruct);
 80015b6:	4638      	mov	r0, r7
 80015b8:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = M1_EN_Pin;
 80015ba:	2202      	movs	r2, #2
 80015bc:	2300      	movs	r3, #0
 80015be:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c2:	f5a7 6780 	sub.w	r7, r7, #1024	@ 0x400
  HAL_GPIO_Init(M1_EN_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f000 ff53 	bl	8002470 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M2_DIR_Pin|M2_EN_Pin;
 80015ca:	220a      	movs	r2, #10
 80015cc:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ce:	a904      	add	r1, sp, #16
 80015d0:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = M2_DIR_Pin|M2_EN_Pin;
 80015d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015d6:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Pin = M2_DIR_Pin|M2_EN_Pin;
 80015da:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	f000 ff47 	bl	8002470 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80015e2:	2233      	movs	r2, #51	@ 0x33
 80015e4:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e6:	a904      	add	r1, sp, #16
 80015e8:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80015ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015ee:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80015f2:	e9cd 4506 	strd	r4, r5, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015f6:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f000 ff39 	bl	8002470 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	a904      	add	r1, sp, #16
 8001600:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001602:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001606:	2302      	movs	r3, #2
 8001608:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800160c:	e9cd 4506 	strd	r4, r5, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001610:	f8cd 9020 	str.w	r9, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	f000 ff2c 	bl	8002470 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	4630      	mov	r0, r6
 800161a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800161c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001620:	2302      	movs	r3, #2
 8001622:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001626:	e9cd 4506 	strd	r4, r5, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800162a:	f8cd 9020 	str.w	r9, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	f000 ff1f 	bl	8002470 <HAL_GPIO_Init>
  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001632:	2303      	movs	r3, #3
 8001634:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001636:	a904      	add	r1, sp, #16
 8001638:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800163a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800163e:	2302      	movs	r3, #2
 8001640:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001644:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001648:	f000 ff12 	bl	8002470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800164c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001650:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001652:	a904      	add	r1, sp, #16
 8001654:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001656:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800165a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800165e:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001662:	f000 ff05 	bl	8002470 <HAL_GPIO_Init>

}
 8001666:	b00b      	add	sp, #44	@ 0x2c
 8001668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800166c:	40023800 	.word	0x40023800
 8001670:	40020800 	.word	0x40020800
 8001674:	40020000 	.word	0x40020000

08001678 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001678:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800167a:	480b      	ldr	r0, [pc, #44]	@ (80016a8 <MX_I2C1_Init+0x30>)
 800167c:	4c0b      	ldr	r4, [pc, #44]	@ (80016ac <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 400000;
 800167e:	490c      	ldr	r1, [pc, #48]	@ (80016b0 <MX_I2C1_Init+0x38>)
 8001680:	2300      	movs	r3, #0
 8001682:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001686:	e9c0 4100 	strd	r4, r1, [r0]
 800168a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800168e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8001692:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8001696:	6203      	str	r3, [r0, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001698:	f001 fa6a 	bl	8002b70 <HAL_I2C_Init>
 800169c:	b900      	cbnz	r0, 80016a0 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800169e:	bd10      	pop	{r4, pc}
 80016a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80016a4:	f000 b9ce 	b.w	8001a44 <Error_Handler>
 80016a8:	200002e8 	.word	0x200002e8
 80016ac:	40005400 	.word	0x40005400
 80016b0:	00061a80 	.word	0x00061a80

080016b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016b4:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 80016b6:	4b3a      	ldr	r3, [pc, #232]	@ (80017a0 <HAL_I2C_MspInit+0xec>)
 80016b8:	6802      	ldr	r2, [r0, #0]
{
 80016ba:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 80016be:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80016c4:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80016c8:	9406      	str	r4, [sp, #24]
  if(i2cHandle->Instance==I2C1)
 80016ca:	d001      	beq.n	80016d0 <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016cc:	b009      	add	sp, #36	@ 0x24
 80016ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d0:	4f34      	ldr	r7, [pc, #208]	@ (80017a4 <HAL_I2C_MspInit+0xf0>)
 80016d2:	9400      	str	r4, [sp, #0]
 80016d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80016d6:	4e34      	ldr	r6, [pc, #208]	@ (80017a8 <HAL_I2C_MspInit+0xf4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80016de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016e8:	22c0      	movs	r2, #192	@ 0xc0
 80016ea:	2312      	movs	r3, #18
 80016ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016f0:	2201      	movs	r2, #1
 80016f2:	2303      	movs	r3, #3
 80016f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016fa:	2304      	movs	r3, #4
 80016fc:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016fe:	482b      	ldr	r0, [pc, #172]	@ (80017ac <HAL_I2C_MspInit+0xf8>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001700:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001702:	f000 feb5 	bl	8002470 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001706:	9401      	str	r4, [sp, #4]
 8001708:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800170a:	6074      	str	r4, [r6, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 800170c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001710:	643b      	str	r3, [r7, #64]	@ 0x40
 8001712:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001714:	4a26      	ldr	r2, [pc, #152]	@ (80017b0 <HAL_I2C_MspInit+0xfc>)
 8001716:	6032      	str	r2, [r6, #0]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800171c:	9301      	str	r3, [sp, #4]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800171e:	2240      	movs	r2, #64	@ 0x40
 8001720:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001724:	4630      	mov	r0, r6
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8001726:	e9c6 2402 	strd	r2, r4, [r6, #8]
 800172a:	e9c6 4405 	strd	r4, r4, [r6, #20]
 800172e:	e9c6 4407 	strd	r4, r4, [r6, #28]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001732:	9901      	ldr	r1, [sp, #4]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8001734:	6133      	str	r3, [r6, #16]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001736:	6274      	str	r4, [r6, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001738:	f000 fcd0 	bl	80020dc <HAL_DMA_Init>
 800173c:	bb50      	cbnz	r0, 8001794 <HAL_I2C_MspInit+0xe0>
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800173e:	4c1d      	ldr	r4, [pc, #116]	@ (80017b4 <HAL_I2C_MspInit+0x100>)
 8001740:	4a1d      	ldr	r2, [pc, #116]	@ (80017b8 <HAL_I2C_MspInit+0x104>)
 8001742:	6022      	str	r2, [r4, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001744:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001748:	2300      	movs	r3, #0
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800174a:	636e      	str	r6, [r5, #52]	@ 0x34
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800174c:	6062      	str	r2, [r4, #4]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800174e:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001750:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001754:	e9c4 3302 	strd	r3, r3, [r4, #8]
 8001758:	e9c4 2304 	strd	r2, r3, [r4, #16]
 800175c:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001760:	e9c4 3308 	strd	r3, r3, [r4, #32]
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001764:	63b5      	str	r5, [r6, #56]	@ 0x38
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001766:	f000 fcb9 	bl	80020dc <HAL_DMA_Init>
 800176a:	b9b0      	cbnz	r0, 800179a <HAL_I2C_MspInit+0xe6>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800176c:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2105      	movs	r1, #5
 8001772:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001774:	63a5      	str	r5, [r4, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001776:	f000 fc67 	bl	8002048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800177a:	201f      	movs	r0, #31
 800177c:	f000 fca0 	bl	80020c0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001780:	2200      	movs	r2, #0
 8001782:	2105      	movs	r1, #5
 8001784:	2020      	movs	r0, #32
 8001786:	f000 fc5f 	bl	8002048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800178a:	2020      	movs	r0, #32
 800178c:	f000 fc98 	bl	80020c0 <HAL_NVIC_EnableIRQ>
}
 8001790:	b009      	add	sp, #36	@ 0x24
 8001792:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8001794:	f000 f956 	bl	8001a44 <Error_Handler>
 8001798:	e7d1      	b.n	800173e <HAL_I2C_MspInit+0x8a>
      Error_Handler();
 800179a:	f000 f953 	bl	8001a44 <Error_Handler>
 800179e:	e7e5      	b.n	800176c <HAL_I2C_MspInit+0xb8>
 80017a0:	40005400 	.word	0x40005400
 80017a4:	40023800 	.word	0x40023800
 80017a8:	20000288 	.word	0x20000288
 80017ac:	40020400 	.word	0x40020400
 80017b0:	40026028 	.word	0x40026028
 80017b4:	20000228 	.word	0x20000228
 80017b8:	40026010 	.word	0x40026010

080017bc <MyProcessCommand>:
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
    if (hi2c->Instance == I2C1) {
    	AS5600_MUX_TxCpltCallback(&appMuxHandle);
	}
}
void MyProcessCommand(CommandProtocol_Handle* handle) {
 80017bc:	b530      	push	{r4, r5, lr}
 80017be:	8902      	ldrh	r2, [r0, #8]
 80017c0:	ba52      	rev16	r2, r2
	// Combine the first two characters into a 16-bit integer
	uint16_t encodedCommand = (handle->rxBuffer[0] << 8) | handle->rxBuffer[1];
    char response[50];

    switch(encodedCommand) { // First 2 bytes are command
 80017c2:	f245 4143 	movw	r1, #21571	@ 0x5443
 80017c6:	b213      	sxth	r3, r2
 80017c8:	428b      	cmp	r3, r1
void MyProcessCommand(CommandProtocol_Handle* handle) {
 80017ca:	b08f      	sub	sp, #60	@ 0x3c
 80017cc:	4604      	mov	r4, r0
    switch(encodedCommand) { // First 2 bytes are command
 80017ce:	d041      	beq.n	8001854 <MyProcessCommand+0x98>
 80017d0:	b292      	uxth	r2, r2
 80017d2:	dc25      	bgt.n	8001820 <MyProcessCommand+0x64>
 80017d4:	f244 2154 	movw	r1, #16980	@ 0x4254
 80017d8:	428b      	cmp	r3, r1
 80017da:	d047      	beq.n	800186c <MyProcessCommand+0xb0>
 80017dc:	f244 3150 	movw	r1, #17232	@ 0x4350
 80017e0:	428b      	cmp	r3, r1
 80017e2:	d12d      	bne.n	8001840 <MyProcessCommand+0x84>
//			sprintf(response, "Motor %d is at state %c\n", index, state);
//			CommandProtocol_SendResponse(handle, response);
//			break;

        case CMD_SET_PARAM:
			char paramType[3] = {handle->rxBuffer[2], handle->rxBuffer[3], '\0'};
 80017e4:	f100 050a 	add.w	r5, r0, #10
 80017e8:	8942      	ldrh	r2, [r0, #10]
 80017ea:	f8ad 2000 	strh.w	r2, [sp]
 80017ee:	2300      	movs	r3, #0
			char *recievedShit = (char *)&handle->rxBuffer[2];

			if (ParsePIDParametersFromUART(&pidObj, recievedShit, strlen(recievedShit))) {
 80017f0:	4628      	mov	r0, r5
			char paramType[3] = {handle->rxBuffer[2], handle->rxBuffer[3], '\0'};
 80017f2:	f88d 3002 	strb.w	r3, [sp, #2]
			if (ParsePIDParametersFromUART(&pidObj, recievedShit, strlen(recievedShit))) {
 80017f6:	f7fe fd43 	bl	8000280 <strlen>
 80017fa:	4629      	mov	r1, r5
 80017fc:	b282      	uxth	r2, r0
 80017fe:	482c      	ldr	r0, [pc, #176]	@ (80018b0 <MyProcessCommand+0xf4>)
 8001800:	f7ff fc16 	bl	8001030 <ParsePIDParametersFromUART>
				sprintf(response, "PID %s parameters updated successfully.\n", paramType);
 8001804:	ad01      	add	r5, sp, #4
			if (ParsePIDParametersFromUART(&pidObj, recievedShit, strlen(recievedShit))) {
 8001806:	2800      	cmp	r0, #0
 8001808:	d14c      	bne.n	80018a4 <MyProcessCommand+0xe8>
			}
			else {
				sprintf(response, "Error: Failed to parse PID %s parameters!\n", paramType);
 800180a:	492a      	ldr	r1, [pc, #168]	@ (80018b4 <MyProcessCommand+0xf8>)
 800180c:	466a      	mov	r2, sp
 800180e:	4628      	mov	r0, r5
 8001810:	f007 fca2 	bl	8009158 <siprintf>
			}
			CommandProtocol_SendResponse(handle, response);
 8001814:	4629      	mov	r1, r5
 8001816:	4620      	mov	r0, r4
 8001818:	f7ff fde8 	bl	80013ec <CommandProtocol_SendResponse>
        default:
            sprintf(response, "Unknown command: %d\n", encodedCommand);
        	CommandProtocol_SendResponse(handle, response);
        	break;
    }
}
 800181c:	b00f      	add	sp, #60	@ 0x3c
 800181e:	bd30      	pop	{r4, r5, pc}
    switch(encodedCommand) { // First 2 bytes are command
 8001820:	f245 414c 	movw	r1, #21580	@ 0x544c
 8001824:	428b      	cmp	r3, r1
 8001826:	d10b      	bne.n	8001840 <MyProcessCommand+0x84>
            HAL_GPIO_TogglePin(TEST_LED_GPIO_Port, TEST_LED_Pin);
 8001828:	4823      	ldr	r0, [pc, #140]	@ (80018b8 <MyProcessCommand+0xfc>)
 800182a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800182e:	f000 ffdb 	bl	80027e8 <HAL_GPIO_TogglePin>
            CommandProtocol_SendResponse(handle, "LED TOGGLED!\n");
 8001832:	4922      	ldr	r1, [pc, #136]	@ (80018bc <MyProcessCommand+0x100>)
				CommandProtocol_SendResponse(handle, "Error parsing trajectory data.\n");
 8001834:	4620      	mov	r0, r4
}
 8001836:	b00f      	add	sp, #60	@ 0x3c
 8001838:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				CommandProtocol_SendResponse(handle, "Error parsing trajectory data.\n");
 800183c:	f7ff bdd6 	b.w	80013ec <CommandProtocol_SendResponse>
            sprintf(response, "Unknown command: %d\n", encodedCommand);
 8001840:	491f      	ldr	r1, [pc, #124]	@ (80018c0 <MyProcessCommand+0x104>)
 8001842:	a801      	add	r0, sp, #4
 8001844:	f007 fc88 	bl	8009158 <siprintf>
        	CommandProtocol_SendResponse(handle, response);
 8001848:	a901      	add	r1, sp, #4
 800184a:	4620      	mov	r0, r4
 800184c:	f7ff fdce 	bl	80013ec <CommandProtocol_SendResponse>
}
 8001850:	b00f      	add	sp, #60	@ 0x3c
 8001852:	bd30      	pop	{r4, r5, pc}
        	if (Trajectory_ParseCoeffs((char*)handle->rxBuffer, &robotTraj) == HAL_OK)
 8001854:	491b      	ldr	r1, [pc, #108]	@ (80018c4 <MyProcessCommand+0x108>)
 8001856:	3008      	adds	r0, #8
 8001858:	f7ff fc68 	bl	800112c <Trajectory_ParseCoeffs>
 800185c:	b9d8      	cbnz	r0, 8001896 <MyProcessCommand+0xda>
				CommandProtocol_SendResponse(handle, "Trajectory coefficients received.\n");
 800185e:	491a      	ldr	r1, [pc, #104]	@ (80018c8 <MyProcessCommand+0x10c>)
				CommandProtocol_SendResponse(handle, "Error parsing trajectory data.\n");
 8001860:	4620      	mov	r0, r4
}
 8001862:	b00f      	add	sp, #60	@ 0x3c
 8001864:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				CommandProtocol_SendResponse(handle, "Error parsing trajectory data.\n");
 8001868:	f7ff bdc0 	b.w	80013ec <CommandProtocol_SendResponse>
        	sprintf(response, "Trajectory started.\n");
 800186c:	4d17      	ldr	r5, [pc, #92]	@ (80018cc <MyProcessCommand+0x110>)
        	Trajectory_Start(&robotTraj);
 800186e:	4815      	ldr	r0, [pc, #84]	@ (80018c4 <MyProcessCommand+0x108>)
 8001870:	f7ff fc46 	bl	8001100 <Trajectory_Start>
        	sprintf(response, "Trajectory started.\n");
 8001874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001876:	f10d 0c04 	add.w	ip, sp, #4
 800187a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800187e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001882:	f84c 0b04 	str.w	r0, [ip], #4
			CommandProtocol_SendResponse(handle, response);
 8001886:	4620      	mov	r0, r4
        	sprintf(response, "Trajectory started.\n");
 8001888:	f88c 1000 	strb.w	r1, [ip]
			CommandProtocol_SendResponse(handle, response);
 800188c:	a901      	add	r1, sp, #4
 800188e:	f7ff fdad 	bl	80013ec <CommandProtocol_SendResponse>
}
 8001892:	b00f      	add	sp, #60	@ 0x3c
 8001894:	bd30      	pop	{r4, r5, pc}
				CommandProtocol_SendResponse(handle, "Error parsing trajectory data.\n");
 8001896:	490e      	ldr	r1, [pc, #56]	@ (80018d0 <MyProcessCommand+0x114>)
 8001898:	4620      	mov	r0, r4
}
 800189a:	b00f      	add	sp, #60	@ 0x3c
 800189c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				CommandProtocol_SendResponse(handle, "Error parsing trajectory data.\n");
 80018a0:	f7ff bda4 	b.w	80013ec <CommandProtocol_SendResponse>
				sprintf(response, "PID %s parameters updated successfully.\n", paramType);
 80018a4:	490b      	ldr	r1, [pc, #44]	@ (80018d4 <MyProcessCommand+0x118>)
 80018a6:	466a      	mov	r2, sp
 80018a8:	4628      	mov	r0, r5
 80018aa:	f007 fc55 	bl	8009158 <siprintf>
 80018ae:	e7b1      	b.n	8001814 <MyProcessCommand+0x58>
 80018b0:	20000524 	.word	0x20000524
 80018b4:	0800bf54 	.word	0x0800bf54
 80018b8:	40020800 	.word	0x40020800
 80018bc:	0800bf18 	.word	0x0800bf18
 80018c0:	0800bfdc 	.word	0x0800bfdc
 80018c4:	2000033c 	.word	0x2000033c
 80018c8:	0800bf80 	.word	0x0800bf80
 80018cc:	0800bfc4 	.word	0x0800bfc4
 80018d0:	0800bfa4 	.word	0x0800bfa4
 80018d4:	0800bf28 	.word	0x0800bf28

080018d8 <SystemClock_Config>:
{
 80018d8:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018da:	2300      	movs	r3, #0
{
 80018dc:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018de:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 80018e2:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80018ea:	e9cd 3305 	strd	r3, r3, [sp, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	4920      	ldr	r1, [pc, #128]	@ (8001970 <SystemClock_Config+0x98>)
 80018f0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018f2:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f4:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001974 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f8:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 80018fc:	6408      	str	r0, [r1, #64]	@ 0x40
 80018fe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001900:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8001904:	9101      	str	r1, [sp, #4]
 8001906:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001908:	9302      	str	r3, [sp, #8]
 800190a:	6813      	ldr	r3, [r2, #0]
 800190c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001914:	2001      	movs	r0, #1
 8001916:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800191a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800191e:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001922:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001924:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001928:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800192a:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800192e:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001930:	2104      	movs	r1, #4
 8001932:	2002      	movs	r0, #2
 8001934:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001938:	220c      	movs	r2, #12
  RCC_OscInitStruct.PLL.PLLN = 96;
 800193a:	2360      	movs	r3, #96	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800193c:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 12;
 800193e:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001940:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001942:	f002 fc47 	bl	80041d4 <HAL_RCC_OscConfig>
 8001946:	b108      	cbz	r0, 800194c <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001948:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800194a:	e7fe      	b.n	800194a <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800194c:	210f      	movs	r1, #15
 800194e:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001950:	e9cd 1403 	strd	r1, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001954:	2280      	movs	r2, #128	@ 0x80
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001956:	a803      	add	r0, sp, #12
 8001958:	2101      	movs	r1, #1
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800195a:	e9cd 2305 	strd	r2, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800195e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001960:	f002 fe4e 	bl	8004600 <HAL_RCC_ClockConfig>
 8001964:	b108      	cbz	r0, 800196a <SystemClock_Config+0x92>
 8001966:	b672      	cpsid	i
  while (1)
 8001968:	e7fe      	b.n	8001968 <SystemClock_Config+0x90>
}
 800196a:	b014      	add	sp, #80	@ 0x50
 800196c:	bd10      	pop	{r4, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	40007000 	.word	0x40007000

08001978 <main>:
{
 8001978:	b508      	push	{r3, lr}
  CommandProtocol_SetCommandProcessor(MyProcessCommand);
 800197a:	4811      	ldr	r0, [pc, #68]	@ (80019c0 <main+0x48>)
 800197c:	f7ff fd0e 	bl	800139c <CommandProtocol_SetCommandProcessor>
  HAL_Init();
 8001980:	f000 fb24 	bl	8001fcc <HAL_Init>
  SystemClock_Config();
 8001984:	f7ff ffa8 	bl	80018d8 <SystemClock_Config>
  DWT_Init();
 8001988:	f7ff fd46 	bl	8001418 <DWT_Init>
  MX_GPIO_Init();
 800198c:	f7ff fdc2 	bl	8001514 <MX_GPIO_Init>
  MX_DMA_Init();
 8001990:	f7ff fd5a 	bl	8001448 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001994:	f000 fa90 	bl	8001eb8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001998:	f7ff fe6e 	bl	8001678 <MX_I2C1_Init>
  MX_TIM5_Init();
 800199c:	f000 f9d4 	bl	8001d48 <MX_TIM5_Init>
  MX_TIM9_Init();
 80019a0:	f000 fa36 	bl	8001e10 <MX_TIM9_Init>
  appMuxStatus = AS5600_MUX_Init(&appMuxHandle, 2);
 80019a4:	2102      	movs	r1, #2
 80019a6:	4807      	ldr	r0, [pc, #28]	@ (80019c4 <main+0x4c>)
 80019a8:	f7ff fc76 	bl	8001298 <AS5600_MUX_Init>
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <main+0x50>)
 80019ae:	7018      	strb	r0, [r3, #0]
  osKernelInitialize();
 80019b0:	f003 fdea 	bl	8005588 <osKernelInitialize>
  MX_FREERTOS_Init();
 80019b4:	f7ff fd90 	bl	80014d8 <MX_FREERTOS_Init>
  osKernelStart();
 80019b8:	f003 fdf8 	bl	80055ac <osKernelStart>
  while (1)
 80019bc:	e7fe      	b.n	80019bc <main+0x44>
 80019be:	bf00      	nop
 80019c0:	080017bd 	.word	0x080017bd
 80019c4:	200001f8 	.word	0x200001f8
 80019c8:	200001f4 	.word	0x200001f4

080019cc <HAL_I2C_MemRxCpltCallback>:
    if (hi2c->Instance == I2C1) {
 80019cc:	4b03      	ldr	r3, [pc, #12]	@ (80019dc <HAL_I2C_MemRxCpltCallback+0x10>)
 80019ce:	6802      	ldr	r2, [r0, #0]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d000      	beq.n	80019d6 <HAL_I2C_MemRxCpltCallback+0xa>
}
 80019d4:	4770      	bx	lr
    	AS5600_MUX_MemRxCpltCallback(&appMuxHandle);
 80019d6:	4802      	ldr	r0, [pc, #8]	@ (80019e0 <HAL_I2C_MemRxCpltCallback+0x14>)
 80019d8:	f7ff bc7e 	b.w	80012d8 <AS5600_MUX_MemRxCpltCallback>
 80019dc:	40005400 	.word	0x40005400
 80019e0:	200001f8 	.word	0x200001f8

080019e4 <HAL_I2C_MasterTxCpltCallback>:
    if (hi2c->Instance == I2C1) {
 80019e4:	4b03      	ldr	r3, [pc, #12]	@ (80019f4 <HAL_I2C_MasterTxCpltCallback+0x10>)
 80019e6:	6802      	ldr	r2, [r0, #0]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d000      	beq.n	80019ee <HAL_I2C_MasterTxCpltCallback+0xa>
}
 80019ec:	4770      	bx	lr
    	AS5600_MUX_TxCpltCallback(&appMuxHandle);
 80019ee:	4802      	ldr	r0, [pc, #8]	@ (80019f8 <HAL_I2C_MasterTxCpltCallback+0x14>)
 80019f0:	f7ff bc6c 	b.w	80012cc <AS5600_MUX_TxCpltCallback>
 80019f4:	40005400 	.word	0x40005400
 80019f8:	200001f8 	.word	0x200001f8

080019fc <HAL_UART_RxCpltCallback>:
{
 80019fc:	b538      	push	{r3, r4, r5, lr}
	if (huart == cmdHandle.huart) {
 80019fe:	4c0b      	ldr	r4, [pc, #44]	@ (8001a2c <HAL_UART_RxCpltCallback+0x30>)
 8001a00:	6825      	ldr	r5, [r4, #0]
 8001a02:	4285      	cmp	r5, r0
 8001a04:	d000      	beq.n	8001a08 <HAL_UART_RxCpltCallback+0xc>
}
 8001a06:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t receivedByte = cmdHandle.rxBuffer[cmdHandle.rxIndex];
 8001a08:	f894 33f0 	ldrb.w	r3, [r4, #1008]	@ 0x3f0
 8001a0c:	4423      	add	r3, r4
		CommandProtocol_ProcessByte(&cmdHandle, receivedByte);
 8001a0e:	4620      	mov	r0, r4
 8001a10:	7a19      	ldrb	r1, [r3, #8]
 8001a12:	f7ff fcc9 	bl	80013a8 <CommandProtocol_ProcessByte>
		HAL_UART_Receive_IT(huart, &cmdHandle.rxBuffer[cmdHandle.rxIndex], 1);
 8001a16:	f894 13f0 	ldrb.w	r1, [r4, #1008]	@ 0x3f0
 8001a1a:	3108      	adds	r1, #8
 8001a1c:	4628      	mov	r0, r5
 8001a1e:	4421      	add	r1, r4
 8001a20:	2201      	movs	r2, #1
}
 8001a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_UART_Receive_IT(huart, &cmdHandle.rxBuffer[cmdHandle.rxIndex], 1);
 8001a26:	f003 bb4f 	b.w	80050c8 <HAL_UART_Receive_IT>
 8001a2a:	bf00      	nop
 8001a2c:	200006d8 	.word	0x200006d8

08001a30 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM11)
 8001a30:	4b03      	ldr	r3, [pc, #12]	@ (8001a40 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001a32:	6802      	ldr	r2, [r0, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d000      	beq.n	8001a3a <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001a38:	4770      	bx	lr
    HAL_IncTick();
 8001a3a:	f000 bae1 	b.w	8002000 <HAL_IncTick>
 8001a3e:	bf00      	nop
 8001a40:	40014800 	.word	0x40014800

08001a44 <Error_Handler>:
 8001a44:	b672      	cpsid	i
  while (1)
 8001a46:	e7fe      	b.n	8001a46 <Error_Handler+0x2>

08001a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a48:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a84 <HAL_MspInit+0x3c>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	9200      	str	r2, [sp, #0]
 8001a50:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001a52:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8001a56:	6459      	str	r1, [r3, #68]	@ 0x44
 8001a58:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001a5a:	f400 4080 	and.w	r0, r0, #16384	@ 0x4000
 8001a5e:	9000      	str	r0, [sp, #0]
 8001a60:	9800      	ldr	r0, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a62:	9201      	str	r2, [sp, #4]
 8001a64:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8001a66:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8001a6a:	6418      	str	r0, [r3, #64]	@ 0x40
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a76:	210f      	movs	r1, #15
 8001a78:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a7e:	f000 bae3 	b.w	8002048 <HAL_NVIC_SetPriority>
 8001a82:	bf00      	nop
 8001a84:	40023800 	.word	0x40023800

08001a88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a88:	b570      	push	{r4, r5, r6, lr}
 8001a8a:	b088      	sub	sp, #32
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001a8c:	2500      	movs	r5, #0
 8001a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001b0c <HAL_InitTick+0x84>)
 8001a90:	9502      	str	r5, [sp, #8]
 8001a92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001a94:	4c1e      	ldr	r4, [pc, #120]	@ (8001b10 <HAL_InitTick+0x88>)
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001a96:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001a9a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001aa2:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001aa4:	9302      	str	r3, [sp, #8]
{
 8001aa6:	4606      	mov	r6, r0
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001aa8:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001aaa:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001aac:	f002 fe66 	bl	800477c <HAL_RCC_GetClockConfig>
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ab0:	f002 fe54 	bl	800475c <HAL_RCC_GetPCLK2Freq>
  htim11.Instance = TIM11;
 8001ab4:	4a17      	ldr	r2, [pc, #92]	@ (8001b14 <HAL_InitTick+0x8c>)
 8001ab6:	6022      	str	r2, [r4, #0]
   * Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001ab8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001abc:	60e2      	str	r2, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001abe:	4a16      	ldr	r2, [pc, #88]	@ (8001b18 <HAL_InitTick+0x90>)
  htim11.Init.Prescaler = uwPrescalerValue;
  htim11.Init.ClockDivision = 0;
 8001ac0:	6125      	str	r5, [r4, #16]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ac2:	fba2 2300 	umull	r2, r3, r2, r0
 8001ac6:	0c9b      	lsrs	r3, r3, #18
 8001ac8:	3b01      	subs	r3, #1
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

  status = HAL_TIM_Base_Init(&htim11);
 8001aca:	4620      	mov	r0, r4
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001acc:	e9c4 3501 	strd	r3, r5, [r4, #4]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad0:	61a5      	str	r5, [r4, #24]
  status = HAL_TIM_Base_Init(&htim11);
 8001ad2:	f002 fe75 	bl	80047c0 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001ad6:	4605      	mov	r5, r0
 8001ad8:	b110      	cbz	r0, 8001ae0 <HAL_InitTick+0x58>
    }
  }

 /* Return function status */
  return status;
}
 8001ada:	4628      	mov	r0, r5
 8001adc:	b008      	add	sp, #32
 8001ade:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001ae0:	4620      	mov	r0, r4
 8001ae2:	f002 fee7 	bl	80048b4 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001ae6:	4605      	mov	r5, r0
 8001ae8:	2800      	cmp	r0, #0
 8001aea:	d1f6      	bne.n	8001ada <HAL_InitTick+0x52>
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001aec:	201a      	movs	r0, #26
 8001aee:	f000 fae7 	bl	80020c0 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af2:	2e0f      	cmp	r6, #15
 8001af4:	d901      	bls.n	8001afa <HAL_InitTick+0x72>
        status = HAL_ERROR;
 8001af6:	2501      	movs	r5, #1
 8001af8:	e7ef      	b.n	8001ada <HAL_InitTick+0x52>
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001afa:	462a      	mov	r2, r5
 8001afc:	4631      	mov	r1, r6
 8001afe:	201a      	movs	r0, #26
 8001b00:	f000 faa2 	bl	8002048 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b04:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <HAL_InitTick+0x94>)
 8001b06:	601e      	str	r6, [r3, #0]
 8001b08:	e7e7      	b.n	8001ada <HAL_InitTick+0x52>
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	20000acc 	.word	0x20000acc
 8001b14:	40014800 	.word	0x40014800
 8001b18:	431bde83 	.word	0x431bde83
 8001b1c:	20000008 	.word	0x20000008

08001b20 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b20:	e7fe      	b.n	8001b20 <NMI_Handler>
 8001b22:	bf00      	nop

08001b24 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b24:	e7fe      	b.n	8001b24 <HardFault_Handler>
 8001b26:	bf00      	nop

08001b28 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <MemManage_Handler>
 8001b2a:	bf00      	nop

08001b2c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <BusFault_Handler>
 8001b2e:	bf00      	nop

08001b30 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b30:	e7fe      	b.n	8001b30 <UsageFault_Handler>
 8001b32:	bf00      	nop

08001b34 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop

08001b38 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001b38:	4801      	ldr	r0, [pc, #4]	@ (8001b40 <DMA1_Stream0_IRQHandler+0x8>)
 8001b3a:	f000 bbbf 	b.w	80022bc <HAL_DMA_IRQHandler>
 8001b3e:	bf00      	nop
 8001b40:	20000228 	.word	0x20000228

08001b44 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001b44:	4801      	ldr	r0, [pc, #4]	@ (8001b4c <DMA1_Stream1_IRQHandler+0x8>)
 8001b46:	f000 bbb9 	b.w	80022bc <HAL_DMA_IRQHandler>
 8001b4a:	bf00      	nop
 8001b4c:	20000288 	.word	0x20000288

08001b50 <TIM1_TRG_COM_TIM11_IRQHandler>:
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001b50:	4801      	ldr	r0, [pc, #4]	@ (8001b58 <TIM1_TRG_COM_TIM11_IRQHandler+0x8>)
 8001b52:	f003 b8cb 	b.w	8004cec <HAL_TIM_IRQHandler>
 8001b56:	bf00      	nop
 8001b58:	20000acc 	.word	0x20000acc

08001b5c <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b5c:	4801      	ldr	r0, [pc, #4]	@ (8001b64 <I2C1_EV_IRQHandler+0x8>)
 8001b5e:	f001 bd8b 	b.w	8003678 <HAL_I2C_EV_IRQHandler>
 8001b62:	bf00      	nop
 8001b64:	200002e8 	.word	0x200002e8

08001b68 <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b68:	4801      	ldr	r0, [pc, #4]	@ (8001b70 <I2C1_ER_IRQHandler+0x8>)
 8001b6a:	f002 ba65 	b.w	8004038 <HAL_I2C_ER_IRQHandler>
 8001b6e:	bf00      	nop
 8001b70:	200002e8 	.word	0x200002e8

08001b74 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b74:	4801      	ldr	r0, [pc, #4]	@ (8001b7c <USART1_IRQHandler+0x8>)
 8001b76:	f003 bb3d 	b.w	80051f4 <HAL_UART_IRQHandler>
 8001b7a:	bf00      	nop
 8001b7c:	20000ba8 	.word	0x20000ba8

08001b80 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001b80:	2001      	movs	r0, #1
 8001b82:	4770      	bx	lr

08001b84 <_kill>:

int _kill(int pid, int sig)
{
 8001b84:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b86:	f007 fc39 	bl	80093fc <__errno>
 8001b8a:	2316      	movs	r3, #22
 8001b8c:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b92:	bd08      	pop	{r3, pc}

08001b94 <_exit>:

void _exit (int status)
{
 8001b94:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001b96:	f007 fc31 	bl	80093fc <__errno>
 8001b9a:	2316      	movs	r3, #22
 8001b9c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001b9e:	e7fe      	b.n	8001b9e <_exit+0xa>

08001ba0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ba0:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba2:	1e16      	subs	r6, r2, #0
 8001ba4:	dd07      	ble.n	8001bb6 <_read+0x16>
 8001ba6:	460c      	mov	r4, r1
 8001ba8:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001baa:	f3af 8000 	nop.w
 8001bae:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb2:	42a5      	cmp	r5, r4
 8001bb4:	d1f9      	bne.n	8001baa <_read+0xa>
  }

  return len;
}
 8001bb6:	4630      	mov	r0, r6
 8001bb8:	bd70      	pop	{r4, r5, r6, pc}
 8001bba:	bf00      	nop

08001bbc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bbc:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbe:	1e16      	subs	r6, r2, #0
 8001bc0:	dd07      	ble.n	8001bd2 <_write+0x16>
 8001bc2:	460c      	mov	r4, r1
 8001bc4:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8001bc6:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001bca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bce:	42a5      	cmp	r5, r4
 8001bd0:	d1f9      	bne.n	8001bc6 <_write+0xa>
  }
  return len;
}
 8001bd2:	4630      	mov	r0, r6
 8001bd4:	bd70      	pop	{r4, r5, r6, pc}
 8001bd6:	bf00      	nop

08001bd8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop

08001be0 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001be0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001be4:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001be6:	2000      	movs	r0, #0
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop

08001bec <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001bec:	2001      	movs	r0, #1
 8001bee:	4770      	bx	lr

08001bf0 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	4770      	bx	lr

08001bf4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf4:	490c      	ldr	r1, [pc, #48]	@ (8001c28 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bf6:	4a0d      	ldr	r2, [pc, #52]	@ (8001c2c <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001bf8:	680b      	ldr	r3, [r1, #0]
{
 8001bfa:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bfc:	4c0c      	ldr	r4, [pc, #48]	@ (8001c30 <_sbrk+0x3c>)
 8001bfe:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001c00:	b12b      	cbz	r3, 8001c0e <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c02:	4418      	add	r0, r3
 8001c04:	4290      	cmp	r0, r2
 8001c06:	d807      	bhi.n	8001c18 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001c08:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001c0e:	4b09      	ldr	r3, [pc, #36]	@ (8001c34 <_sbrk+0x40>)
 8001c10:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001c12:	4418      	add	r0, r3
 8001c14:	4290      	cmp	r0, r2
 8001c16:	d9f7      	bls.n	8001c08 <_sbrk+0x14>
    errno = ENOMEM;
 8001c18:	f007 fbf0 	bl	80093fc <__errno>
 8001c1c:	230c      	movs	r3, #12
 8001c1e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001c20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	bd10      	pop	{r4, pc}
 8001c28:	20000b14 	.word	0x20000b14
 8001c2c:	20020000 	.word	0x20020000
 8001c30:	00000400 	.word	0x00000400
 8001c34:	20005728 	.word	0x20005728

08001c38 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c38:	4a03      	ldr	r2, [pc, #12]	@ (8001c48 <SystemInit+0x10>)
 8001c3a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001c3e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c42:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c46:	4770      	bx	lr
 8001c48:	e000ed00 	.word	0xe000ed00

08001c4c <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM5)
 8001c4c:	4a12      	ldr	r2, [pc, #72]	@ (8001c98 <HAL_TIM_Base_MspInit+0x4c>)
 8001c4e:	6803      	ldr	r3, [r0, #0]
 8001c50:	4293      	cmp	r3, r2
{
 8001c52:	b082      	sub	sp, #8
  if(tim_baseHandle->Instance==TIM5)
 8001c54:	d012      	beq.n	8001c7c <HAL_TIM_Base_MspInit+0x30>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM9)
 8001c56:	4a11      	ldr	r2, [pc, #68]	@ (8001c9c <HAL_TIM_Base_MspInit+0x50>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d001      	beq.n	8001c60 <HAL_TIM_Base_MspInit+0x14>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001c5c:	b002      	add	sp, #8
 8001c5e:	4770      	bx	lr
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001c60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca0 <HAL_TIM_Base_MspInit+0x54>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	9201      	str	r2, [sp, #4]
 8001c66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c68:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001c6c:	645a      	str	r2, [r3, #68]	@ 0x44
 8001c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c74:	9301      	str	r3, [sp, #4]
 8001c76:	9b01      	ldr	r3, [sp, #4]
}
 8001c78:	b002      	add	sp, #8
 8001c7a:	4770      	bx	lr
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ca0 <HAL_TIM_Base_MspInit+0x54>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	9200      	str	r2, [sp, #0]
 8001c82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c84:	f042 0208 	orr.w	r2, r2, #8
 8001c88:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	9b00      	ldr	r3, [sp, #0]
}
 8001c94:	b002      	add	sp, #8
 8001c96:	4770      	bx	lr
 8001c98:	40000c00 	.word	0x40000c00
 8001c9c:	40014000 	.word	0x40014000
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	00000000 	.word	0x00000000

08001ca8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ca8:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM5)
 8001caa:	6802      	ldr	r2, [r0, #0]
 8001cac:	4922      	ldr	r1, [pc, #136]	@ (8001d38 <HAL_TIM_MspPostInit+0x90>)
{
 8001cae:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM5)
 8001cb2:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001cb8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001cbc:	9306      	str	r3, [sp, #24]
  if(timHandle->Instance==TIM5)
 8001cbe:	d004      	beq.n	8001cca <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM9)
 8001cc0:	491e      	ldr	r1, [pc, #120]	@ (8001d3c <HAL_TIM_MspPostInit+0x94>)
 8001cc2:	428a      	cmp	r2, r1
 8001cc4:	d018      	beq.n	8001cf8 <HAL_TIM_MspPostInit+0x50>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001cc6:	b009      	add	sp, #36	@ 0x24
 8001cc8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	4a1d      	ldr	r2, [pc, #116]	@ (8001d40 <HAL_TIM_MspPostInit+0x98>)
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd0:	481c      	ldr	r0, [pc, #112]	@ (8001d44 <HAL_TIM_MspPostInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cd8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cda:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8001d30 <HAL_TIM_MspPostInit+0x88>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ce6:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ce8:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cec:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001cee:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf0:	f000 fbbe 	bl	8002470 <HAL_GPIO_Init>
}
 8001cf4:	b009      	add	sp, #36	@ 0x24
 8001cf6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf8:	4a11      	ldr	r2, [pc, #68]	@ (8001d40 <HAL_TIM_MspPostInit+0x98>)
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	6b11      	ldr	r1, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	4811      	ldr	r0, [pc, #68]	@ (8001d44 <HAL_TIM_MspPostInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d00:	f041 0101 	orr.w	r1, r1, #1
 8001d04:	6311      	str	r1, [r2, #48]	@ 0x30
 8001d06:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d08:	f002 0201 	and.w	r2, r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d0e:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d10:	2404      	movs	r4, #4
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001d12:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d14:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	e9cd 4302 	strd	r4, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d1a:	e9cd 3304 	strd	r3, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001d20:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d22:	f000 fba5 	bl	8002470 <HAL_GPIO_Init>
}
 8001d26:	b009      	add	sp, #36	@ 0x24
 8001d28:	bd30      	pop	{r4, r5, pc}
 8001d2a:	bf00      	nop
 8001d2c:	f3af 8000 	nop.w
 8001d30:	00000001 	.word	0x00000001
 8001d34:	00000002 	.word	0x00000002
 8001d38:	40000c00 	.word	0x40000c00
 8001d3c:	40014000 	.word	0x40014000
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40020000 	.word	0x40020000

08001d48 <MX_TIM5_Init>:
{
 8001d48:	b510      	push	{r4, lr}
  htim5.Instance = TIM5;
 8001d4a:	4c2f      	ldr	r4, [pc, #188]	@ (8001e08 <MX_TIM5_Init+0xc0>)
{
 8001d4c:	b08e      	sub	sp, #56	@ 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001d54:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d58:	e9cd 3300 	strd	r3, r3, [sp]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d5c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001d60:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8001d64:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8001d68:	930c      	str	r3, [sp, #48]	@ 0x30
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d6a:	60a3      	str	r3, [r4, #8]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6c:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d6e:	2380      	movs	r3, #128	@ 0x80
 8001d70:	61a3      	str	r3, [r4, #24]
  htim5.Init.Prescaler = 65535;
 8001d72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001d76:	6063      	str	r3, [r4, #4]
  htim5.Init.Period = 65535;
 8001d78:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001d7a:	4620      	mov	r0, r4
  htim5.Instance = TIM5;
 8001d7c:	4b23      	ldr	r3, [pc, #140]	@ (8001e0c <MX_TIM5_Init+0xc4>)
 8001d7e:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001d80:	f002 fd1e 	bl	80047c0 <HAL_TIM_Base_Init>
 8001d84:	bb50      	cbnz	r0, 8001ddc <MX_TIM5_Init+0x94>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001d8a:	481f      	ldr	r0, [pc, #124]	@ (8001e08 <MX_TIM5_Init+0xc0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d8c:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001d8e:	a902      	add	r1, sp, #8
 8001d90:	f002 fefa 	bl	8004b88 <HAL_TIM_ConfigClockSource>
 8001d94:	bb70      	cbnz	r0, 8001df4 <MX_TIM5_Init+0xac>
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8001d96:	481c      	ldr	r0, [pc, #112]	@ (8001e08 <MX_TIM5_Init+0xc0>)
 8001d98:	f002 fdc0 	bl	800491c <HAL_TIM_OC_Init>
 8001d9c:	bb38      	cbnz	r0, 8001dee <MX_TIM5_Init+0xa6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001da2:	4819      	ldr	r0, [pc, #100]	@ (8001e08 <MX_TIM5_Init+0xc0>)
 8001da4:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da6:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001daa:	f003 f83b 	bl	8004e24 <HAL_TIMEx_MasterConfigSynchronization>
 8001dae:	b9d8      	cbnz	r0, 8001de8 <MX_TIM5_Init+0xa0>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001db0:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 8001e00 <MX_TIM5_Init+0xb8>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001db4:	2200      	movs	r2, #0
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001db6:	4814      	ldr	r0, [pc, #80]	@ (8001e08 <MX_TIM5_Init+0xc0>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001db8:	9208      	str	r2, [sp, #32]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dba:	a906      	add	r1, sp, #24
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001dbc:	ed8d 7b06 	vstr	d7, [sp, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dc0:	920a      	str	r2, [sp, #40]	@ 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dc2:	f002 fe25 	bl	8004a10 <HAL_TIM_OC_ConfigChannel>
 8001dc6:	b960      	cbnz	r0, 8001de2 <MX_TIM5_Init+0x9a>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim5, TIM_CHANNEL_1);
 8001dc8:	6822      	ldr	r2, [r4, #0]
  HAL_TIM_MspPostInit(&htim5);
 8001dca:	480f      	ldr	r0, [pc, #60]	@ (8001e08 <MX_TIM5_Init+0xc0>)
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim5, TIM_CHANNEL_1);
 8001dcc:	6993      	ldr	r3, [r2, #24]
 8001dce:	f043 0308 	orr.w	r3, r3, #8
 8001dd2:	6193      	str	r3, [r2, #24]
  HAL_TIM_MspPostInit(&htim5);
 8001dd4:	f7ff ff68 	bl	8001ca8 <HAL_TIM_MspPostInit>
}
 8001dd8:	b00e      	add	sp, #56	@ 0x38
 8001dda:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001ddc:	f7ff fe32 	bl	8001a44 <Error_Handler>
 8001de0:	e7d1      	b.n	8001d86 <MX_TIM5_Init+0x3e>
    Error_Handler();
 8001de2:	f7ff fe2f 	bl	8001a44 <Error_Handler>
 8001de6:	e7ef      	b.n	8001dc8 <MX_TIM5_Init+0x80>
    Error_Handler();
 8001de8:	f7ff fe2c 	bl	8001a44 <Error_Handler>
 8001dec:	e7e0      	b.n	8001db0 <MX_TIM5_Init+0x68>
    Error_Handler();
 8001dee:	f7ff fe29 	bl	8001a44 <Error_Handler>
 8001df2:	e7d4      	b.n	8001d9e <MX_TIM5_Init+0x56>
    Error_Handler();
 8001df4:	f7ff fe26 	bl	8001a44 <Error_Handler>
 8001df8:	e7cd      	b.n	8001d96 <MX_TIM5_Init+0x4e>
 8001dfa:	bf00      	nop
 8001dfc:	f3af 8000 	nop.w
 8001e00:	00000030 	.word	0x00000030
 8001e04:	00000000 	.word	0x00000000
 8001e08:	20000b60 	.word	0x20000b60
 8001e0c:	40000c00 	.word	0x40000c00

08001e10 <MX_TIM9_Init>:
{
 8001e10:	b510      	push	{r4, lr}
  htim9.Instance = TIM9;
 8001e12:	4c27      	ldr	r4, [pc, #156]	@ (8001eb0 <MX_TIM9_Init+0xa0>)
 8001e14:	4a27      	ldr	r2, [pc, #156]	@ (8001eb4 <MX_TIM9_Init+0xa4>)
{
 8001e16:	b08c      	sub	sp, #48	@ 0x30
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e18:	2300      	movs	r3, #0
  htim9.Instance = TIM9;
 8001e1a:	6022      	str	r2, [r4, #0]
  htim9.Init.Prescaler = 65535;
 8001e1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e20:	e9c4 2301 	strd	r2, r3, [r4, #4]
  htim9.Init.Period = 65535;
 8001e24:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001e26:	4620      	mov	r0, r4
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e28:	2280      	movs	r2, #128	@ 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e2a:	e9cd 3300 	strd	r3, r3, [sp]
 8001e2e:	e9cd 3302 	strd	r3, r3, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e32:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001e36:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8001e3a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8001e3e:	930a      	str	r3, [sp, #40]	@ 0x28
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e40:	6123      	str	r3, [r4, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e42:	61a2      	str	r2, [r4, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001e44:	f002 fcbc 	bl	80047c0 <HAL_TIM_Base_Init>
 8001e48:	bb08      	cbnz	r0, 8001e8e <MX_TIM9_Init+0x7e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e4a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001e4e:	4818      	ldr	r0, [pc, #96]	@ (8001eb0 <MX_TIM9_Init+0xa0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e50:	9300      	str	r3, [sp, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001e52:	4669      	mov	r1, sp
 8001e54:	f002 fe98 	bl	8004b88 <HAL_TIM_ConfigClockSource>
 8001e58:	bb10      	cbnz	r0, 8001ea0 <MX_TIM9_Init+0x90>
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 8001e5a:	4815      	ldr	r0, [pc, #84]	@ (8001eb0 <MX_TIM9_Init+0xa0>)
 8001e5c:	f002 fd5e 	bl	800491c <HAL_TIM_OC_Init>
 8001e60:	b9d8      	cbnz	r0, 8001e9a <MX_TIM9_Init+0x8a>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001e62:	ed9f 7b11 	vldr	d7, [pc, #68]	@ 8001ea8 <MX_TIM9_Init+0x98>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e66:	2200      	movs	r2, #0
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e68:	4811      	ldr	r0, [pc, #68]	@ (8001eb0 <MX_TIM9_Init+0xa0>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e6a:	9206      	str	r2, [sp, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e6c:	a904      	add	r1, sp, #16
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8001e6e:	ed8d 7b04 	vstr	d7, [sp, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e72:	9208      	str	r2, [sp, #32]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e74:	f002 fdcc 	bl	8004a10 <HAL_TIM_OC_ConfigChannel>
 8001e78:	b960      	cbnz	r0, 8001e94 <MX_TIM9_Init+0x84>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim9, TIM_CHANNEL_1);
 8001e7a:	6822      	ldr	r2, [r4, #0]
  HAL_TIM_MspPostInit(&htim9);
 8001e7c:	480c      	ldr	r0, [pc, #48]	@ (8001eb0 <MX_TIM9_Init+0xa0>)
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim9, TIM_CHANNEL_1);
 8001e7e:	6993      	ldr	r3, [r2, #24]
 8001e80:	f043 0308 	orr.w	r3, r3, #8
 8001e84:	6193      	str	r3, [r2, #24]
  HAL_TIM_MspPostInit(&htim9);
 8001e86:	f7ff ff0f 	bl	8001ca8 <HAL_TIM_MspPostInit>
}
 8001e8a:	b00c      	add	sp, #48	@ 0x30
 8001e8c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001e8e:	f7ff fdd9 	bl	8001a44 <Error_Handler>
 8001e92:	e7da      	b.n	8001e4a <MX_TIM9_Init+0x3a>
    Error_Handler();
 8001e94:	f7ff fdd6 	bl	8001a44 <Error_Handler>
 8001e98:	e7ef      	b.n	8001e7a <MX_TIM9_Init+0x6a>
    Error_Handler();
 8001e9a:	f7ff fdd3 	bl	8001a44 <Error_Handler>
 8001e9e:	e7e0      	b.n	8001e62 <MX_TIM9_Init+0x52>
    Error_Handler();
 8001ea0:	f7ff fdd0 	bl	8001a44 <Error_Handler>
 8001ea4:	e7d9      	b.n	8001e5a <MX_TIM9_Init+0x4a>
 8001ea6:	bf00      	nop
 8001ea8:	00000030 	.word	0x00000030
 8001eac:	00000000 	.word	0x00000000
 8001eb0:	20000b18 	.word	0x20000b18
 8001eb4:	40014000 	.word	0x40014000

08001eb8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001eb8:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001eba:	480b      	ldr	r0, [pc, #44]	@ (8001ee8 <MX_USART1_UART_Init+0x30>)
 8001ebc:	4c0b      	ldr	r4, [pc, #44]	@ (8001eec <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ebe:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 115200;
 8001ec0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ec4:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8001ec6:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001eca:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ece:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed2:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ed6:	f002 ffe1 	bl	8004e9c <HAL_UART_Init>
 8001eda:	b900      	cbnz	r0, 8001ede <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001edc:	bd10      	pop	{r4, pc}
 8001ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001ee2:	f7ff bdaf 	b.w	8001a44 <Error_Handler>
 8001ee6:	bf00      	nop
 8001ee8:	20000ba8 	.word	0x20000ba8
 8001eec:	40011000 	.word	0x40011000

08001ef0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ef0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 8001ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f70 <HAL_UART_MspInit+0x80>)
 8001ef4:	6802      	ldr	r2, [r0, #0]
{
 8001ef6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ef8:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 8001efa:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001f00:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001f04:	9406      	str	r4, [sp, #24]
  if(uartHandle->Instance==USART1)
 8001f06:	d001      	beq.n	8001f0c <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001f08:	b009      	add	sp, #36	@ 0x24
 8001f0a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f0c:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8001f10:	9400      	str	r4, [sp, #0]
 8001f12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f14:	4817      	ldr	r0, [pc, #92]	@ (8001f74 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f16:	f042 0210 	orr.w	r2, r2, #16
 8001f1a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f1e:	f002 0210 	and.w	r2, r2, #16
 8001f22:	9200      	str	r2, [sp, #0]
 8001f24:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f26:	9401      	str	r4, [sp, #4]
 8001f28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f32:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8001f68 <HAL_UART_MspInit+0x78>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f3c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2307      	movs	r3, #7
 8001f40:	2203      	movs	r2, #3
 8001f42:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f46:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4a:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4c:	f000 fa90 	bl	8002470 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001f50:	4622      	mov	r2, r4
 8001f52:	2105      	movs	r1, #5
 8001f54:	2025      	movs	r0, #37	@ 0x25
 8001f56:	f000 f877 	bl	8002048 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f5a:	2025      	movs	r0, #37	@ 0x25
 8001f5c:	f000 f8b0 	bl	80020c0 <HAL_NVIC_EnableIRQ>
}
 8001f60:	b009      	add	sp, #36	@ 0x24
 8001f62:	bd30      	pop	{r4, r5, pc}
 8001f64:	f3af 8000 	nop.w
 8001f68:	00000600 	.word	0x00000600
 8001f6c:	00000002 	.word	0x00000002
 8001f70:	40011000 	.word	0x40011000
 8001f74:	40020000 	.word	0x40020000

08001f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f7c:	f7ff fe5c 	bl	8001c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f80:	480c      	ldr	r0, [pc, #48]	@ (8001fb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f82:	490d      	ldr	r1, [pc, #52]	@ (8001fb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f84:	4a0d      	ldr	r2, [pc, #52]	@ (8001fbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f88:	e002      	b.n	8001f90 <LoopCopyDataInit>

08001f8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8e:	3304      	adds	r3, #4

08001f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f94:	d3f9      	bcc.n	8001f8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f96:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f98:	4c0a      	ldr	r4, [pc, #40]	@ (8001fc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f9c:	e001      	b.n	8001fa2 <LoopFillZerobss>

08001f9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa0:	3204      	adds	r2, #4

08001fa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa4:	d3fb      	bcc.n	8001f9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fa6:	f007 fa2f 	bl	8009408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001faa:	f7ff fce5 	bl	8001978 <main>
  bx  lr    
 8001fae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001fbc:	0800c4b4 	.word	0x0800c4b4
  ldr r2, =_sbss
 8001fc0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001fc4:	20005724 	.word	0x20005724

08001fc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc8:	e7fe      	b.n	8001fc8 <ADC_IRQHandler>
	...

08001fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fcc:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fce:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <HAL_Init+0x30>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fd6:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001fde:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fe6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe8:	2003      	movs	r0, #3
 8001fea:	f000 f81b 	bl	8002024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fee:	200f      	movs	r0, #15
 8001ff0:	f7ff fd4a 	bl	8001a88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff4:	f7ff fd28 	bl	8001a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	bd08      	pop	{r3, pc}
 8001ffc:	40023c00 	.word	0x40023c00

08002000 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002000:	4a03      	ldr	r2, [pc, #12]	@ (8002010 <HAL_IncTick+0x10>)
 8002002:	4b04      	ldr	r3, [pc, #16]	@ (8002014 <HAL_IncTick+0x14>)
 8002004:	6811      	ldr	r1, [r2, #0]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	440b      	add	r3, r1
 800200a:	6013      	str	r3, [r2, #0]
}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000bf0 	.word	0x20000bf0
 8002014:	20000004 	.word	0x20000004

08002018 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002018:	4b01      	ldr	r3, [pc, #4]	@ (8002020 <HAL_GetTick+0x8>)
 800201a:	6818      	ldr	r0, [r3, #0]
}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000bf0 	.word	0x20000bf0

08002024 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002024:	4907      	ldr	r1, [pc, #28]	@ (8002044 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002026:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002028:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202a:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800202e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002032:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002034:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002036:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800203a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800203e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002048:	4b1b      	ldr	r3, [pc, #108]	@ (80020b8 <HAL_NVIC_SetPriority+0x70>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002050:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002052:	f1c3 0e07 	rsb	lr, r3, #7
 8002056:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800205a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800205e:	bf28      	it	cs
 8002060:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002064:	f1bc 0f06 	cmp.w	ip, #6
 8002068:	d91c      	bls.n	80020a4 <HAL_NVIC_SetPriority+0x5c>
 800206a:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800206e:	f04f 33ff 	mov.w	r3, #4294967295
 8002072:	fa03 f30c 	lsl.w	r3, r3, ip
 8002076:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207a:	f04f 33ff 	mov.w	r3, #4294967295
 800207e:	fa03 f30e 	lsl.w	r3, r3, lr
 8002082:	ea21 0303 	bic.w	r3, r1, r3
 8002086:	fa03 f30c 	lsl.w	r3, r3, ip
 800208a:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208c:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 800208e:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002090:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8002092:	db0a      	blt.n	80020aa <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002094:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002098:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800209c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80020a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80020a4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a6:	4694      	mov	ip, r2
 80020a8:	e7e7      	b.n	800207a <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020aa:	4a04      	ldr	r2, [pc, #16]	@ (80020bc <HAL_NVIC_SetPriority+0x74>)
 80020ac:	f000 000f 	and.w	r0, r0, #15
 80020b0:	4402      	add	r2, r0
 80020b2:	7613      	strb	r3, [r2, #24]
 80020b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80020b8:	e000ed00 	.word	0xe000ed00
 80020bc:	e000ecfc 	.word	0xe000ecfc

080020c0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80020c0:	2800      	cmp	r0, #0
 80020c2:	db07      	blt.n	80020d4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020c4:	4a04      	ldr	r2, [pc, #16]	@ (80020d8 <HAL_NVIC_EnableIRQ+0x18>)
 80020c6:	0941      	lsrs	r1, r0, #5
 80020c8:	2301      	movs	r3, #1
 80020ca:	f000 001f 	and.w	r0, r0, #31
 80020ce:	4083      	lsls	r3, r0
 80020d0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000e100 	.word	0xe000e100

080020dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020dc:	b538      	push	{r3, r4, r5, lr}
 80020de:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80020e0:	f7ff ff9a 	bl	8002018 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020e4:	2c00      	cmp	r4, #0
 80020e6:	d06d      	beq.n	80021c4 <HAL_DMA_Init+0xe8>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020e8:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80020ea:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 80020ec:	2102      	movs	r1, #2
 80020ee:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 80020f2:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	f022 0201 	bic.w	r2, r2, #1
 80020fc:	4605      	mov	r5, r0
 80020fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002100:	e005      	b.n	800210e <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002102:	f7ff ff89 	bl	8002018 <HAL_GetTick>
 8002106:	1b43      	subs	r3, r0, r5
 8002108:	2b05      	cmp	r3, #5
 800210a:	d837      	bhi.n	800217c <HAL_DMA_Init+0xa0>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800210c:	6823      	ldr	r3, [r4, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	07d1      	lsls	r1, r2, #31
 8002112:	d4f6      	bmi.n	8002102 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002114:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8002118:	68e1      	ldr	r1, [r4, #12]
 800211a:	4302      	orrs	r2, r0
 800211c:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800211e:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002122:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002124:	432a      	orrs	r2, r5
 8002126:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002128:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 800212a:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800212c:	4302      	orrs	r2, r0
 800212e:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002130:	4931      	ldr	r1, [pc, #196]	@ (80021f8 <HAL_DMA_Init+0x11c>)
 8002132:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002134:	6a25      	ldr	r5, [r4, #32]
 8002136:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002138:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800213a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800213c:	2904      	cmp	r1, #4
 800213e:	d024      	beq.n	800218a <HAL_DMA_Init+0xae>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002140:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002142:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002144:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002148:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800214a:	b2d8      	uxtb	r0, r3
 800214c:	4a2b      	ldr	r2, [pc, #172]	@ (80021fc <HAL_DMA_Init+0x120>)
  hdma->Instance->FCR = tmp;
 800214e:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002150:	3810      	subs	r0, #16
 8002152:	fba2 5200 	umull	r5, r2, r2, r0
 8002156:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002158:	4929      	ldr	r1, [pc, #164]	@ (8002200 <HAL_DMA_Init+0x124>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800215a:	f36f 0309 	bfc	r3, #0, #10
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800215e:	5c89      	ldrb	r1, [r1, r2]
 8002160:	65e1      	str	r1, [r4, #92]	@ 0x5c
  if (stream_number > 3U)
 8002162:	285f      	cmp	r0, #95	@ 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002164:	bf88      	it	hi
 8002166:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002168:	223f      	movs	r2, #63	@ 0x3f
 800216a:	408a      	lsls	r2, r1
 800216c:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800216e:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002170:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8002172:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002174:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002176:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 800217a:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800217c:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800217e:	2220      	movs	r2, #32
 8002180:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002182:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      return HAL_TIMEOUT;
 8002186:	4618      	mov	r0, r3
}
 8002188:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800218a:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 800218e:	4329      	orrs	r1, r5
 8002190:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 8002192:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002194:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8002196:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002198:	f021 0107 	bic.w	r1, r1, #7
 800219c:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 800219e:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021a2:	2d00      	cmp	r5, #0
 80021a4:	d0d1      	beq.n	800214a <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021a6:	b178      	cbz	r0, 80021c8 <HAL_DMA_Init+0xec>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021a8:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 80021ac:	d016      	beq.n	80021dc <HAL_DMA_Init+0x100>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021ae:	2a02      	cmp	r2, #2
 80021b0:	d903      	bls.n	80021ba <HAL_DMA_Init+0xde>
 80021b2:	2a03      	cmp	r2, #3
 80021b4:	d1c9      	bne.n	800214a <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021b6:	01ea      	lsls	r2, r5, #7
 80021b8:	d5c7      	bpl.n	800214a <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021ba:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 80021bc:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021be:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80021c0:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 80021c4:	2001      	movs	r0, #1
}
 80021c6:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 80021c8:	2a01      	cmp	r2, #1
 80021ca:	d003      	beq.n	80021d4 <HAL_DMA_Init+0xf8>
 80021cc:	f032 0202 	bics.w	r2, r2, #2
 80021d0:	d1bb      	bne.n	800214a <HAL_DMA_Init+0x6e>
 80021d2:	e7f0      	b.n	80021b6 <HAL_DMA_Init+0xda>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021d4:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 80021d8:	d1b7      	bne.n	800214a <HAL_DMA_Init+0x6e>
 80021da:	e7ee      	b.n	80021ba <HAL_DMA_Init+0xde>
    switch (tmp)
 80021dc:	2a03      	cmp	r2, #3
 80021de:	d8b4      	bhi.n	800214a <HAL_DMA_Init+0x6e>
 80021e0:	a001      	add	r0, pc, #4	@ (adr r0, 80021e8 <HAL_DMA_Init+0x10c>)
 80021e2:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80021e6:	bf00      	nop
 80021e8:	080021bb 	.word	0x080021bb
 80021ec:	080021b7 	.word	0x080021b7
 80021f0:	080021bb 	.word	0x080021bb
 80021f4:	080021d5 	.word	0x080021d5
 80021f8:	f010803f 	.word	0xf010803f
 80021fc:	aaaaaaab 	.word	0xaaaaaaab
 8002200:	0800c06c 	.word	0x0800c06c

08002204 <HAL_DMA_Abort>:
{
 8002204:	b570      	push	{r4, r5, r6, lr}
 8002206:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002208:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 800220a:	f7ff ff05 	bl	8002018 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800220e:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8002212:	2b02      	cmp	r3, #2
 8002214:	d006      	beq.n	8002224 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002216:	2380      	movs	r3, #128	@ 0x80
 8002218:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 800221a:	2300      	movs	r3, #0
 800221c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8002220:	2001      	movs	r0, #1
}
 8002222:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	f022 0216 	bic.w	r2, r2, #22
 800222c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800222e:	695a      	ldr	r2, [r3, #20]
 8002230:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002234:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002236:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002238:	4605      	mov	r5, r0
 800223a:	b342      	cbz	r2, 800228e <HAL_DMA_Abort+0x8a>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	f022 0208 	bic.w	r2, r2, #8
 8002242:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800224c:	e005      	b.n	800225a <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800224e:	f7ff fee3 	bl	8002018 <HAL_GetTick>
 8002252:	1b43      	subs	r3, r0, r5
 8002254:	2b05      	cmp	r3, #5
 8002256:	d810      	bhi.n	800227a <HAL_DMA_Abort+0x76>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002258:	6823      	ldr	r3, [r4, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f013 0301 	ands.w	r3, r3, #1
 8002260:	d1f5      	bne.n	800224e <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002262:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8002264:	223f      	movs	r2, #63	@ 0x3f
 8002266:	408a      	lsls	r2, r1
  return HAL_OK;
 8002268:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 800226a:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 800226c:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800226e:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8002270:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8002274:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8002278:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800227a:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800227c:	2220      	movs	r2, #32
 800227e:	6562      	str	r2, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002280:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002282:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8002286:	2300      	movs	r3, #0
 8002288:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800228c:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800228e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002290:	2a00      	cmp	r2, #0
 8002292:	d1d3      	bne.n	800223c <HAL_DMA_Abort+0x38>
 8002294:	e7d6      	b.n	8002244 <HAL_DMA_Abort+0x40>
 8002296:	bf00      	nop

08002298 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002298:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800229c:	2b02      	cmp	r3, #2
 800229e:	d003      	beq.n	80022a8 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a0:	2380      	movs	r3, #128	@ 0x80
 80022a2:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 80022a4:	2001      	movs	r0, #1
 80022a6:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80022a8:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80022aa:	2305      	movs	r3, #5
 80022ac:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 80022b0:	6813      	ldr	r3, [r2, #0]
 80022b2:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 80022b6:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 80022b8:	6013      	str	r3, [r2, #0]
}
 80022ba:	4770      	bx	lr

080022bc <HAL_DMA_IRQHandler>:
{
 80022bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022be:	b083      	sub	sp, #12
  uint32_t timeout = SystemCoreClock / 9600U;
 80022c0:	4a67      	ldr	r2, [pc, #412]	@ (8002460 <HAL_DMA_IRQHandler+0x1a4>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022c2:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80022c4:	6816      	ldr	r6, [r2, #0]
  __IO uint32_t count = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ca:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 80022cc:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ce:	2208      	movs	r2, #8
 80022d0:	409a      	lsls	r2, r3
 80022d2:	422a      	tst	r2, r5
{
 80022d4:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022d6:	d003      	beq.n	80022e0 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022d8:	6801      	ldr	r1, [r0, #0]
 80022da:	6808      	ldr	r0, [r1, #0]
 80022dc:	0740      	lsls	r0, r0, #29
 80022de:	d478      	bmi.n	80023d2 <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022e0:	2201      	movs	r2, #1
 80022e2:	409a      	lsls	r2, r3
 80022e4:	422a      	tst	r2, r5
 80022e6:	d003      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022e8:	6821      	ldr	r1, [r4, #0]
 80022ea:	6949      	ldr	r1, [r1, #20]
 80022ec:	0608      	lsls	r0, r1, #24
 80022ee:	d46a      	bmi.n	80023c6 <HAL_DMA_IRQHandler+0x10a>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022f0:	2204      	movs	r2, #4
 80022f2:	409a      	lsls	r2, r3
 80022f4:	422a      	tst	r2, r5
 80022f6:	d003      	beq.n	8002300 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022f8:	6821      	ldr	r1, [r4, #0]
 80022fa:	6809      	ldr	r1, [r1, #0]
 80022fc:	0789      	lsls	r1, r1, #30
 80022fe:	d45c      	bmi.n	80023ba <HAL_DMA_IRQHandler+0xfe>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002300:	2210      	movs	r2, #16
 8002302:	409a      	lsls	r2, r3
 8002304:	422a      	tst	r2, r5
 8002306:	d003      	beq.n	8002310 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002308:	6821      	ldr	r1, [r4, #0]
 800230a:	6808      	ldr	r0, [r1, #0]
 800230c:	0700      	lsls	r0, r0, #28
 800230e:	d441      	bmi.n	8002394 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002310:	2220      	movs	r2, #32
 8002312:	409a      	lsls	r2, r3
 8002314:	422a      	tst	r2, r5
 8002316:	d014      	beq.n	8002342 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002318:	6821      	ldr	r1, [r4, #0]
 800231a:	6808      	ldr	r0, [r1, #0]
 800231c:	06c0      	lsls	r0, r0, #27
 800231e:	d510      	bpl.n	8002342 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002320:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002322:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 8002326:	2a05      	cmp	r2, #5
 8002328:	d063      	beq.n	80023f2 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800232a:	680b      	ldr	r3, [r1, #0]
 800232c:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002330:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002332:	d07e      	beq.n	8002432 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002334:	0319      	lsls	r1, r3, #12
 8002336:	f140 8089 	bpl.w	800244c <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 800233a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800233c:	b10b      	cbz	r3, 8002342 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 800233e:	4620      	mov	r0, r4
 8002340:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002342:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002344:	b323      	cbz	r3, 8002390 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002346:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8002348:	07da      	lsls	r2, r3, #31
 800234a:	d51a      	bpl.n	8002382 <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 800234c:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800234e:	4945      	ldr	r1, [pc, #276]	@ (8002464 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8002350:	2305      	movs	r3, #5
 8002352:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8002356:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002358:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 800235c:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8002360:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	e002      	b.n	800236c <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002366:	6813      	ldr	r3, [r2, #0]
 8002368:	07db      	lsls	r3, r3, #31
 800236a:	d504      	bpl.n	8002376 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 800236c:	9b01      	ldr	r3, [sp, #4]
 800236e:	3301      	adds	r3, #1
 8002370:	42b3      	cmp	r3, r6
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	d9f7      	bls.n	8002366 <HAL_DMA_IRQHandler+0xaa>
      hdma->State = HAL_DMA_STATE_READY;
 8002376:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8002378:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 800237a:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 800237e:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8002382:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002384:	b123      	cbz	r3, 8002390 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8002386:	4620      	mov	r0, r4
}
 8002388:	b003      	add	sp, #12
 800238a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800238e:	4718      	bx	r3
}
 8002390:	b003      	add	sp, #12
 8002392:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002394:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002396:	680a      	ldr	r2, [r1, #0]
 8002398:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800239c:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800239e:	d122      	bne.n	80023e6 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023a0:	05d2      	lsls	r2, r2, #23
 80023a2:	d403      	bmi.n	80023ac <HAL_DMA_IRQHandler+0xf0>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023a4:	680a      	ldr	r2, [r1, #0]
 80023a6:	f022 0208 	bic.w	r2, r2, #8
 80023aa:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80023ac:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80023ae:	2a00      	cmp	r2, #0
 80023b0:	d0ae      	beq.n	8002310 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 80023b2:	4620      	mov	r0, r4
 80023b4:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023b6:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80023b8:	e7aa      	b.n	8002310 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023ba:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80023be:	f042 0204 	orr.w	r2, r2, #4
 80023c2:	6562      	str	r2, [r4, #84]	@ 0x54
 80023c4:	e79c      	b.n	8002300 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023c6:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80023ca:	f042 0202 	orr.w	r2, r2, #2
 80023ce:	6562      	str	r2, [r4, #84]	@ 0x54
 80023d0:	e78e      	b.n	80022f0 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023d2:	6808      	ldr	r0, [r1, #0]
 80023d4:	f020 0004 	bic.w	r0, r0, #4
 80023d8:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023da:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	6562      	str	r2, [r4, #84]	@ 0x54
 80023e4:	e77c      	b.n	80022e0 <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023e6:	0311      	lsls	r1, r2, #12
 80023e8:	d5e0      	bpl.n	80023ac <HAL_DMA_IRQHandler+0xf0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023ea:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80023ec:	2a00      	cmp	r2, #0
 80023ee:	d1e0      	bne.n	80023b2 <HAL_DMA_IRQHandler+0xf6>
 80023f0:	e78e      	b.n	8002310 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023f2:	680a      	ldr	r2, [r1, #0]
 80023f4:	f022 0216 	bic.w	r2, r2, #22
 80023f8:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023fa:	694a      	ldr	r2, [r1, #20]
 80023fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002400:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002402:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002404:	b33a      	cbz	r2, 8002456 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002406:	680a      	ldr	r2, [r1, #0]
 8002408:	f022 0208 	bic.w	r2, r2, #8
 800240c:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800240e:	223f      	movs	r2, #63	@ 0x3f
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8002414:	6d21      	ldr	r1, [r4, #80]	@ 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002416:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002418:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 800241a:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 800241c:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8002420:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 8002424:	2900      	cmp	r1, #0
 8002426:	d0b3      	beq.n	8002390 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8002428:	4620      	mov	r0, r4
}
 800242a:	b003      	add	sp, #12
 800242c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8002430:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002432:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 8002436:	d180      	bne.n	800233a <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002438:	680a      	ldr	r2, [r1, #0]
 800243a:	f022 0210 	bic.w	r2, r2, #16
 800243e:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002440:	2201      	movs	r2, #1
 8002442:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 8002446:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 800244a:	e776      	b.n	800233a <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 800244c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800244e:	2b00      	cmp	r3, #0
 8002450:	f47f af75 	bne.w	800233e <HAL_DMA_IRQHandler+0x82>
 8002454:	e775      	b.n	8002342 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002456:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002458:	2a00      	cmp	r2, #0
 800245a:	d1d4      	bne.n	8002406 <HAL_DMA_IRQHandler+0x14a>
 800245c:	e7d7      	b.n	800240e <HAL_DMA_IRQHandler+0x152>
 800245e:	bf00      	nop
 8002460:	20000000 	.word	0x20000000
 8002464:	1b4e81b5 	.word	0x1b4e81b5

08002468 <HAL_DMA_GetState>:
  return hdma->State;
 8002468:	f890 0035 	ldrb.w	r0, [r0, #53]	@ 0x35
}
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop

08002470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002474:	4bc0      	ldr	r3, [pc, #768]	@ (8002778 <HAL_GPIO_Init+0x308>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002476:	680a      	ldr	r2, [r1, #0]
 8002478:	4298      	cmp	r0, r3
{
 800247a:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247c:	f04f 0300 	mov.w	r3, #0
    ioposition = 0x01U << position;
 8002480:	f04f 0b01 	mov.w	fp, #1
 8002484:	f000 80c4 	beq.w	8002610 <HAL_GPIO_Init+0x1a0>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002488:	f8df a2fc 	ldr.w	sl, [pc, #764]	@ 8002788 <HAL_GPIO_Init+0x318>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800248c:	4689      	mov	r9, r1
 800248e:	e002      	b.n	8002496 <HAL_GPIO_Init+0x26>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002490:	3301      	adds	r3, #1
 8002492:	2b10      	cmp	r3, #16
 8002494:	d07b      	beq.n	800258e <HAL_GPIO_Init+0x11e>
    ioposition = 0x01U << position;
 8002496:	fa0b f103 	lsl.w	r1, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800249a:	ea01 0802 	and.w	r8, r1, r2
    if(iocurrent == ioposition)
 800249e:	4391      	bics	r1, r2
 80024a0:	d1f6      	bne.n	8002490 <HAL_GPIO_Init+0x20>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024a2:	f8d9 4004 	ldr.w	r4, [r9, #4]
 80024a6:	f004 0c03 	and.w	ip, r4, #3
 80024aa:	0059      	lsls	r1, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024ac:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ae:	f10c 36ff 	add.w	r6, ip, #4294967295
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024b2:	408d      	lsls	r5, r1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b4:	2e01      	cmp	r6, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024b6:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ba:	d96b      	bls.n	8002594 <HAL_GPIO_Init+0x124>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024bc:	f1bc 0f03 	cmp.w	ip, #3
 80024c0:	f040 8174 	bne.w	80027ac <HAL_GPIO_Init+0x33c>
      temp = GPIOx->MODER;
 80024c4:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024c6:	fa0c f101 	lsl.w	r1, ip, r1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ca:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024cc:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024ce:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80024d2:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024d4:	d0dc      	beq.n	8002490 <HAL_GPIO_Init+0x20>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d6:	2100      	movs	r1, #0
 80024d8:	9103      	str	r1, [sp, #12]
 80024da:	f8da 1044 	ldr.w	r1, [sl, #68]	@ 0x44
 80024de:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80024e2:	f8ca 1044 	str.w	r1, [sl, #68]	@ 0x44
 80024e6:	f8da 1044 	ldr.w	r1, [sl, #68]	@ 0x44
 80024ea:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80024ee:	9103      	str	r1, [sp, #12]
 80024f0:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80024f2:	f023 0103 	bic.w	r1, r3, #3
 80024f6:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024fa:	f003 0603 	and.w	r6, r3, #3
 80024fe:	270f      	movs	r7, #15
 8002500:	f501 319c 	add.w	r1, r1, #79872	@ 0x13800
 8002504:	00b6      	lsls	r6, r6, #2
 8002506:	fa07 fc06 	lsl.w	ip, r7, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800250a:	4f9c      	ldr	r7, [pc, #624]	@ (800277c <HAL_GPIO_Init+0x30c>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800250c:	688d      	ldr	r5, [r1, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800250e:	42b8      	cmp	r0, r7
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002510:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002514:	d076      	beq.n	8002604 <HAL_GPIO_Init+0x194>
 8002516:	4f9a      	ldr	r7, [pc, #616]	@ (8002780 <HAL_GPIO_Init+0x310>)
 8002518:	42b8      	cmp	r0, r7
 800251a:	f000 813b 	beq.w	8002794 <HAL_GPIO_Init+0x324>
 800251e:	f8df c26c 	ldr.w	ip, [pc, #620]	@ 800278c <HAL_GPIO_Init+0x31c>
 8002522:	4560      	cmp	r0, ip
 8002524:	f000 813c 	beq.w	80027a0 <HAL_GPIO_Init+0x330>
 8002528:	f8df c264 	ldr.w	ip, [pc, #612]	@ 8002790 <HAL_GPIO_Init+0x320>
 800252c:	4560      	cmp	r0, ip
 800252e:	bf0c      	ite	eq
 8002530:	f04f 0c04 	moveq.w	ip, #4
 8002534:	f04f 0c07 	movne.w	ip, #7
 8002538:	fa0c f606 	lsl.w	r6, ip, r6
 800253c:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 800253e:	608d      	str	r5, [r1, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002540:	4990      	ldr	r1, [pc, #576]	@ (8002784 <HAL_GPIO_Init+0x314>)
 8002542:	6889      	ldr	r1, [r1, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002544:	02e6      	lsls	r6, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8002546:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800254a:	4e8e      	ldr	r6, [pc, #568]	@ (8002784 <HAL_GPIO_Init+0x314>)
        temp &= ~((uint32_t)iocurrent);
 800254c:	bf54      	ite	pl
 800254e:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8002550:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->RTSR = temp;
 8002554:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8002556:	68f1      	ldr	r1, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8002558:	4e8a      	ldr	r6, [pc, #552]	@ (8002784 <HAL_GPIO_Init+0x314>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800255a:	02a7      	lsls	r7, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800255c:	bf54      	ite	pl
 800255e:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8002560:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->FTSR = temp;
 8002564:	60f1      	str	r1, [r6, #12]

        temp = EXTI->EMR;
 8002566:	6871      	ldr	r1, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002568:	03a6      	lsls	r6, r4, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800256a:	4e86      	ldr	r6, [pc, #536]	@ (8002784 <HAL_GPIO_Init+0x314>)
        temp &= ~((uint32_t)iocurrent);
 800256c:	bf54      	ite	pl
 800256e:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8002570:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->EMR = temp;
 8002574:	6071      	str	r1, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002576:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002578:	03e4      	lsls	r4, r4, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257a:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800257e:	4c81      	ldr	r4, [pc, #516]	@ (8002784 <HAL_GPIO_Init+0x314>)
        temp &= ~((uint32_t)iocurrent);
 8002580:	bf54      	ite	pl
 8002582:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8002584:	ea48 0101 	orrmi.w	r1, r8, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002588:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 800258a:	6021      	str	r1, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800258c:	d183      	bne.n	8002496 <HAL_GPIO_Init+0x26>
      }
    }
  }
}
 800258e:	b005      	add	sp, #20
 8002590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8002594:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002596:	ea06 0e05 	and.w	lr, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800259a:	f8d9 600c 	ldr.w	r6, [r9, #12]
 800259e:	408e      	lsls	r6, r1
 80025a0:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 80025a4:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80025a6:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a8:	ea26 0e08 	bic.w	lr, r6, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ac:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80025b0:	409e      	lsls	r6, r3
 80025b2:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OTYPER = temp;
 80025b6:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 80025b8:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ba:	ea06 0e05 	and.w	lr, r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025be:	f8d9 6008 	ldr.w	r6, [r9, #8]
 80025c2:	408e      	lsls	r6, r1
 80025c4:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c8:	f1bc 0f02 	cmp.w	ip, #2
        GPIOx->PUPDR = temp;
 80025cc:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025ce:	f47f af79 	bne.w	80024c4 <HAL_GPIO_Init+0x54>
        temp = GPIOx->AFR[position >> 3U];
 80025d2:	08de      	lsrs	r6, r3, #3
 80025d4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80025d8:	9601      	str	r6, [sp, #4]
 80025da:	6a37      	ldr	r7, [r6, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025dc:	f8d9 6010 	ldr.w	r6, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 80025e0:	9700      	str	r7, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025e2:	f003 0e07 	and.w	lr, r3, #7
 80025e6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80025ea:	270f      	movs	r7, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025ec:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025f0:	fa07 fe0e 	lsl.w	lr, r7, lr
 80025f4:	9f00      	ldr	r7, [sp, #0]
 80025f6:	ea27 0e0e 	bic.w	lr, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80025fa:	9f01      	ldr	r7, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025fc:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002600:	623e      	str	r6, [r7, #32]
 8002602:	e75f      	b.n	80024c4 <HAL_GPIO_Init+0x54>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002604:	f04f 0c01 	mov.w	ip, #1
 8002608:	fa0c f606 	lsl.w	r6, ip, r6
 800260c:	4335      	orrs	r5, r6
 800260e:	e796      	b.n	800253e <HAL_GPIO_Init+0xce>
        temp = EXTI->RTSR;
 8002610:	f8df 8170 	ldr.w	r8, [pc, #368]	@ 8002784 <HAL_GPIO_Init+0x314>
 8002614:	e002      	b.n	800261c <HAL_GPIO_Init+0x1ac>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002616:	3301      	adds	r3, #1
 8002618:	2b10      	cmp	r3, #16
 800261a:	d0b8      	beq.n	800258e <HAL_GPIO_Init+0x11e>
    ioposition = 0x01U << position;
 800261c:	fa0b f403 	lsl.w	r4, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002620:	ea02 0604 	and.w	r6, r2, r4
    if(iocurrent == ioposition)
 8002624:	4394      	bics	r4, r2
 8002626:	d1f6      	bne.n	8002616 <HAL_GPIO_Init+0x1a6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002628:	684d      	ldr	r5, [r1, #4]
 800262a:	f005 0403 	and.w	r4, r5, #3
 800262e:	9400      	str	r4, [sp, #0]
 8002630:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002632:	2403      	movs	r4, #3
 8002634:	fa04 fc07 	lsl.w	ip, r4, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002638:	9c00      	ldr	r4, [sp, #0]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800263a:	ea6f 0a0c 	mvn.w	sl, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800263e:	f104 3cff 	add.w	ip, r4, #4294967295
 8002642:	f1bc 0f01 	cmp.w	ip, #1
 8002646:	d94c      	bls.n	80026e2 <HAL_GPIO_Init+0x272>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002648:	2c03      	cmp	r4, #3
 800264a:	f040 80b9 	bne.w	80027c0 <HAL_GPIO_Init+0x350>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800264e:	9c00      	ldr	r4, [sp, #0]
 8002650:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 8002652:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002654:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002658:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800265a:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 800265e:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002660:	d0d9      	beq.n	8002616 <HAL_GPIO_Init+0x1a6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002662:	4f49      	ldr	r7, [pc, #292]	@ (8002788 <HAL_GPIO_Init+0x318>)
 8002664:	2400      	movs	r4, #0
 8002666:	9403      	str	r4, [sp, #12]
 8002668:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800266a:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 800266e:	647c      	str	r4, [r7, #68]	@ 0x44
 8002670:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8002672:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8002676:	9403      	str	r4, [sp, #12]
 8002678:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800267a:	f023 0403 	bic.w	r4, r3, #3
 800267e:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8002682:	f504 349c 	add.w	r4, r4, #79872	@ 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002686:	f003 0703 	and.w	r7, r3, #3
 800268a:	f04f 0c0f 	mov.w	ip, #15
 800268e:	00bf      	lsls	r7, r7, #2
 8002690:	fa0c f707 	lsl.w	r7, ip, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8002694:	f8d4 c008 	ldr.w	ip, [r4, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002698:	ea2c 0707 	bic.w	r7, ip, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800269c:	60a7      	str	r7, [r4, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800269e:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp = EXTI->RTSR;
 80026a2:	f8d8 4008 	ldr.w	r4, [r8, #8]
        temp &= ~((uint32_t)iocurrent);
 80026a6:	ea6f 0706 	mvn.w	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026aa:	d162      	bne.n	8002772 <HAL_GPIO_Init+0x302>
        temp &= ~((uint32_t)iocurrent);
 80026ac:	403c      	ands	r4, r7
        EXTI->RTSR = temp;
 80026ae:	f8c8 4008 	str.w	r4, [r8, #8]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026b2:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp = EXTI->FTSR;
 80026b6:	f8d8 400c 	ldr.w	r4, [r8, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026ba:	d158      	bne.n	800276e <HAL_GPIO_Init+0x2fe>
        temp &= ~((uint32_t)iocurrent);
 80026bc:	403c      	ands	r4, r7
        EXTI->FTSR = temp;
 80026be:	f8c8 400c 	str.w	r4, [r8, #12]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026c2:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp = EXTI->EMR;
 80026c6:	f8d8 4004 	ldr.w	r4, [r8, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ca:	d14e      	bne.n	800276a <HAL_GPIO_Init+0x2fa>
        temp &= ~((uint32_t)iocurrent);
 80026cc:	403c      	ands	r4, r7
        EXTI->EMR = temp;
 80026ce:	f8c8 4004 	str.w	r4, [r8, #4]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026d2:	03ed      	lsls	r5, r5, #15
        temp = EXTI->IMR;
 80026d4:	f8d8 4000 	ldr.w	r4, [r8]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026d8:	d445      	bmi.n	8002766 <HAL_GPIO_Init+0x2f6>
        temp &= ~((uint32_t)iocurrent);
 80026da:	403c      	ands	r4, r7
        EXTI->IMR = temp;
 80026dc:	f8c8 4000 	str.w	r4, [r8]
 80026e0:	e799      	b.n	8002616 <HAL_GPIO_Init+0x1a6>
        temp = GPIOx->OSPEEDR; 
 80026e2:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026e6:	68cc      	ldr	r4, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026e8:	ea0a 0e0e 	and.w	lr, sl, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ec:	fa04 fc07 	lsl.w	ip, r4, r7
 80026f0:	ea4c 0c0e 	orr.w	ip, ip, lr
        GPIOx->OSPEEDR = temp;
 80026f4:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 80026f8:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026fc:	f3c5 1c00 	ubfx	ip, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002700:	ea2e 0e06 	bic.w	lr, lr, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002704:	fa0c fc03 	lsl.w	ip, ip, r3
 8002708:	ea4c 0c0e 	orr.w	ip, ip, lr
        GPIOx->OTYPER = temp;
 800270c:	f8c0 c004 	str.w	ip, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002710:	688c      	ldr	r4, [r1, #8]
        temp = GPIOx->PUPDR;
 8002712:	f8d0 e00c 	ldr.w	lr, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002716:	fa04 fc07 	lsl.w	ip, r4, r7
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800271a:	9c00      	ldr	r4, [sp, #0]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800271c:	ea0a 0e0e 	and.w	lr, sl, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002720:	ea4c 0c0e 	orr.w	ip, ip, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002724:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8002726:	f8c0 c00c 	str.w	ip, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800272a:	d190      	bne.n	800264e <HAL_GPIO_Init+0x1de>
        temp = GPIOx->AFR[position >> 3U];
 800272c:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8002730:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002734:	690c      	ldr	r4, [r1, #16]
 8002736:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800273a:	f003 0e07 	and.w	lr, r3, #7
 800273e:	f50c 3c00 	add.w	ip, ip, #131072	@ 0x20000
 8002742:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002746:	fa04 f40e 	lsl.w	r4, r4, lr
        temp = GPIOx->AFR[position >> 3U];
 800274a:	f8dc 9020 	ldr.w	r9, [ip, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800274e:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002750:	240f      	movs	r4, #15
 8002752:	fa04 fe0e 	lsl.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002756:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002758:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800275c:	ea44 0e09 	orr.w	lr, r4, r9
        GPIOx->AFR[position >> 3U] = temp;
 8002760:	f8cc e020 	str.w	lr, [ip, #32]
 8002764:	e773      	b.n	800264e <HAL_GPIO_Init+0x1de>
          temp |= iocurrent;
 8002766:	4334      	orrs	r4, r6
 8002768:	e7b8      	b.n	80026dc <HAL_GPIO_Init+0x26c>
          temp |= iocurrent;
 800276a:	4334      	orrs	r4, r6
 800276c:	e7af      	b.n	80026ce <HAL_GPIO_Init+0x25e>
          temp |= iocurrent;
 800276e:	4334      	orrs	r4, r6
 8002770:	e7a5      	b.n	80026be <HAL_GPIO_Init+0x24e>
          temp |= iocurrent;
 8002772:	4334      	orrs	r4, r6
 8002774:	e79b      	b.n	80026ae <HAL_GPIO_Init+0x23e>
 8002776:	bf00      	nop
 8002778:	40020000 	.word	0x40020000
 800277c:	40020400 	.word	0x40020400
 8002780:	40020800 	.word	0x40020800
 8002784:	40013c00 	.word	0x40013c00
 8002788:	40023800 	.word	0x40023800
 800278c:	40020c00 	.word	0x40020c00
 8002790:	40021000 	.word	0x40021000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002794:	f04f 0c02 	mov.w	ip, #2
 8002798:	fa0c f606 	lsl.w	r6, ip, r6
 800279c:	4335      	orrs	r5, r6
 800279e:	e6ce      	b.n	800253e <HAL_GPIO_Init+0xce>
 80027a0:	f04f 0c03 	mov.w	ip, #3
 80027a4:	fa0c f606 	lsl.w	r6, ip, r6
 80027a8:	4335      	orrs	r5, r6
 80027aa:	e6c8      	b.n	800253e <HAL_GPIO_Init+0xce>
        temp = GPIOx->PUPDR;
 80027ac:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ae:	ea06 0e05 	and.w	lr, r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027b2:	f8d9 6008 	ldr.w	r6, [r9, #8]
 80027b6:	408e      	lsls	r6, r1
 80027b8:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->PUPDR = temp;
 80027bc:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027be:	e681      	b.n	80024c4 <HAL_GPIO_Init+0x54>
        temp = GPIOx->PUPDR;
 80027c0:	f8df e018 	ldr.w	lr, [pc, #24]	@ 80027dc <HAL_GPIO_Init+0x36c>
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027c4:	688c      	ldr	r4, [r1, #8]
        temp = GPIOx->PUPDR;
 80027c6:	f8de 900c 	ldr.w	r9, [lr, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027ca:	fa04 fc07 	lsl.w	ip, r4, r7
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ce:	ea0a 0909 	and.w	r9, sl, r9
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027d2:	ea4c 0c09 	orr.w	ip, ip, r9
        GPIOx->PUPDR = temp;
 80027d6:	f8ce c00c 	str.w	ip, [lr, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027da:	e738      	b.n	800264e <HAL_GPIO_Init+0x1de>
 80027dc:	40020000 	.word	0x40020000

080027e0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027e0:	b902      	cbnz	r2, 80027e4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027e2:	0409      	lsls	r1, r1, #16
 80027e4:	6181      	str	r1, [r0, #24]
  }
}
 80027e6:	4770      	bx	lr

080027e8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027e8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027ea:	ea01 0203 	and.w	r2, r1, r3
 80027ee:	ea21 0103 	bic.w	r1, r1, r3
 80027f2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80027f6:	6181      	str	r1, [r0, #24]
}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop

080027fc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80027fc:	b530      	push	{r4, r5, lr}
 80027fe:	4604      	mov	r4, r0
 8002800:	1c48      	adds	r0, r1, #1
 8002802:	b083      	sub	sp, #12
 8002804:	d121      	bne.n	800284a <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x4e>
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	e002      	b.n	8002810 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x14>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	0555      	lsls	r5, r2, #21
 800280e:	d405      	bmi.n	800281c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x20>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002810:	695a      	ldr	r2, [r3, #20]
 8002812:	0792      	lsls	r2, r2, #30
 8002814:	d5f9      	bpl.n	800280a <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0xe>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002816:	2000      	movs	r0, #0
}
 8002818:	b003      	add	sp, #12
 800281a:	bd30      	pop	{r4, r5, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002822:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002824:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002826:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 800282a:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800282c:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800282e:	6321      	str	r1, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002830:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002834:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002838:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800283a:	f043 0304 	orr.w	r3, r3, #4
 800283e:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002840:	2300      	movs	r3, #0
 8002842:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8002846:	2001      	movs	r0, #1
 8002848:	e7e6      	b.n	8002818 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x1c>
 800284a:	6820      	ldr	r0, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800284c:	6945      	ldr	r5, [r0, #20]
 800284e:	07ad      	lsls	r5, r5, #30
 8002850:	4603      	mov	r3, r0
 8002852:	d4e0      	bmi.n	8002816 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x1a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002854:	6940      	ldr	r0, [r0, #20]
 8002856:	0540      	lsls	r0, r0, #21
 8002858:	d4e0      	bmi.n	800281c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x20>
 800285a:	e9cd 1200 	strd	r1, r2, [sp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800285e:	f7ff fbdb 	bl	8002018 <HAL_GetTick>
 8002862:	9a01      	ldr	r2, [sp, #4]
 8002864:	9900      	ldr	r1, [sp, #0]
 8002866:	1a83      	subs	r3, r0, r2
 8002868:	4299      	cmp	r1, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800286a:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800286c:	d301      	bcc.n	8002872 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x76>
 800286e:	2900      	cmp	r1, #0
 8002870:	d1ec      	bne.n	800284c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x50>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002872:	6943      	ldr	r3, [r0, #20]
 8002874:	079b      	lsls	r3, r3, #30
 8002876:	d4e9      	bmi.n	800284c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x50>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002878:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 800287a:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 800287c:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800287e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002882:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002886:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002888:	4313      	orrs	r3, r2
 800288a:	6423      	str	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 800288c:	e7d8      	b.n	8002840 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x44>
 800288e:	bf00      	nop

08002890 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002890:	b530      	push	{r4, r5, lr}
 8002892:	4604      	mov	r4, r0
 8002894:	1c48      	adds	r0, r1, #1
 8002896:	b083      	sub	sp, #12
 8002898:	d121      	bne.n	80028de <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x4e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	e002      	b.n	80028a4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x14>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800289e:	695a      	ldr	r2, [r3, #20]
 80028a0:	0555      	lsls	r5, r2, #21
 80028a2:	d405      	bmi.n	80028b0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x20>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028a4:	695a      	ldr	r2, [r3, #20]
 80028a6:	0712      	lsls	r2, r2, #28
 80028a8:	d5f9      	bpl.n	800289e <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0xe>
  return HAL_OK;
 80028aa:	2000      	movs	r0, #0
}
 80028ac:	b003      	add	sp, #12
 80028ae:	bd30      	pop	{r4, r5, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80028b8:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028ba:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80028be:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028c0:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80028c2:	6321      	str	r1, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028c4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028c8:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80028ce:	f043 0304 	orr.w	r3, r3, #4
 80028d2:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80028d4:	2300      	movs	r3, #0
 80028d6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 80028da:	2001      	movs	r0, #1
 80028dc:	e7e6      	b.n	80028ac <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x1c>
 80028de:	6820      	ldr	r0, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028e0:	6945      	ldr	r5, [r0, #20]
 80028e2:	072d      	lsls	r5, r5, #28
 80028e4:	4603      	mov	r3, r0
 80028e6:	d4e0      	bmi.n	80028aa <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x1a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028e8:	6940      	ldr	r0, [r0, #20]
 80028ea:	0540      	lsls	r0, r0, #21
 80028ec:	d4e0      	bmi.n	80028b0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x20>
 80028ee:	e9cd 1200 	strd	r1, r2, [sp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f2:	f7ff fb91 	bl	8002018 <HAL_GetTick>
 80028f6:	9a01      	ldr	r2, [sp, #4]
 80028f8:	9900      	ldr	r1, [sp, #0]
 80028fa:	1a83      	subs	r3, r0, r2
 80028fc:	4299      	cmp	r1, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028fe:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002900:	d301      	bcc.n	8002906 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x76>
 8002902:	2900      	cmp	r1, #0
 8002904:	d1ec      	bne.n	80028e0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x50>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002906:	6943      	ldr	r3, [r0, #20]
 8002908:	071b      	lsls	r3, r3, #28
 800290a:	d4e9      	bmi.n	80028e0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x50>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800290c:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 800290e:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002910:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002912:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002916:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800291a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800291c:	4313      	orrs	r3, r2
 800291e:	6423      	str	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8002920:	e7d8      	b.n	80028d4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x44>
 8002922:	bf00      	nop

08002924 <I2C_RequestMemoryRead>:
{
 8002924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002928:	6805      	ldr	r5, [r0, #0]
{
 800292a:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292c:	682b      	ldr	r3, [r5, #0]
{
 800292e:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002930:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002934:	602b      	str	r3, [r5, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002936:	682b      	ldr	r3, [r5, #0]
{
 8002938:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800293c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002940:	f1b9 3fff 	cmp.w	r9, #4294967295
{
 8002944:	4606      	mov	r6, r0
 8002946:	4617      	mov	r7, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002948:	602b      	str	r3, [r5, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800294a:	d13a      	bne.n	80029c2 <I2C_RequestMemoryRead+0x9e>
 800294c:	696c      	ldr	r4, [r5, #20]
 800294e:	07e2      	lsls	r2, r4, #31
 8002950:	d5fc      	bpl.n	800294c <I2C_RequestMemoryRead+0x28>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002952:	f001 03fe 	and.w	r3, r1, #254	@ 0xfe
 8002956:	b2cc      	uxtb	r4, r1
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002958:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800295a:	612b      	str	r3, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800295c:	f04f 31ff 	mov.w	r1, #4294967295
 8002960:	4630      	mov	r0, r6
 8002962:	f7ff ff4b 	bl	80027fc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8002966:	b118      	cbz	r0, 8002970 <I2C_RequestMemoryRead+0x4c>
    return HAL_ERROR;
 8002968:	2001      	movs	r0, #1
}
 800296a:	b005      	add	sp, #20
 800296c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002970:	9003      	str	r0, [sp, #12]
 8002972:	6830      	ldr	r0, [r6, #0]
 8002974:	6943      	ldr	r3, [r0, #20]
 8002976:	9303      	str	r3, [sp, #12]
 8002978:	6983      	ldr	r3, [r0, #24]
 800297a:	9303      	str	r3, [sp, #12]
 800297c:	9b03      	ldr	r3, [sp, #12]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800297e:	6943      	ldr	r3, [r0, #20]
 8002980:	0619      	lsls	r1, r3, #24
 8002982:	d467      	bmi.n	8002a54 <I2C_RequestMemoryRead+0x130>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002984:	6943      	ldr	r3, [r0, #20]
 8002986:	055a      	lsls	r2, r3, #21
 8002988:	d5f9      	bpl.n	800297e <I2C_RequestMemoryRead+0x5a>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 800298a:	2300      	movs	r3, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800298c:	f46f 6180 	mvn.w	r1, #1024	@ 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8002990:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002992:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002994:	6333      	str	r3, [r6, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002996:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800299a:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800299e:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 80029a0:	f043 0304 	orr.w	r3, r3, #4
 80029a4:	6433      	str	r3, [r6, #64]	@ 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029a6:	6c33      	ldr	r3, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80029a8:	2200      	movs	r2, #0
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029aa:	2b04      	cmp	r3, #4
          __HAL_UNLOCK(hi2c);
 80029ac:	f886 203c 	strb.w	r2, [r6, #60]	@ 0x3c
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029b0:	d1da      	bne.n	8002968 <I2C_RequestMemoryRead+0x44>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b2:	6803      	ldr	r3, [r0, #0]
 80029b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029b8:	6003      	str	r3, [r0, #0]
 80029ba:	e7d5      	b.n	8002968 <I2C_RequestMemoryRead+0x44>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029bc:	f1b9 0f00 	cmp.w	r9, #0
 80029c0:	d00b      	beq.n	80029da <I2C_RequestMemoryRead+0xb6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c2:	696b      	ldr	r3, [r5, #20]
 80029c4:	07d8      	lsls	r0, r3, #31
 80029c6:	d46d      	bmi.n	8002aa4 <I2C_RequestMemoryRead+0x180>
 80029c8:	9101      	str	r1, [sp, #4]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ca:	f7ff fb25 	bl	8002018 <HAL_GetTick>
 80029ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029d0:	6835      	ldr	r5, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029d2:	9901      	ldr	r1, [sp, #4]
 80029d4:	1ac3      	subs	r3, r0, r3
 80029d6:	4599      	cmp	r9, r3
 80029d8:	d2f0      	bcs.n	80029bc <I2C_RequestMemoryRead+0x98>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029da:	696b      	ldr	r3, [r5, #20]
 80029dc:	07db      	lsls	r3, r3, #31
 80029de:	d4f0      	bmi.n	80029c2 <I2C_RequestMemoryRead+0x9e>
          hi2c->PreviousState     = I2C_STATE_NONE;
 80029e0:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 80029e2:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 80029e4:	6332      	str	r2, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80029e6:	f886 303d 	strb.w	r3, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029ea:	f886 203e 	strb.w	r2, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029ee:	6c33      	ldr	r3, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80029f0:	f886 203c 	strb.w	r2, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029f4:	f043 0320 	orr.w	r3, r3, #32
 80029f8:	6433      	str	r3, [r6, #64]	@ 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029fa:	682b      	ldr	r3, [r5, #0]
 80029fc:	05dc      	lsls	r4, r3, #23
 80029fe:	d425      	bmi.n	8002a4c <I2C_RequestMemoryRead+0x128>
    return HAL_TIMEOUT;
 8002a00:	2003      	movs	r0, #3
 8002a02:	e7b2      	b.n	800296a <I2C_RequestMemoryRead+0x46>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a04:	6803      	ldr	r3, [r0, #0]
 8002a06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a0a:	6003      	str	r3, [r0, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a0c:	6943      	ldr	r3, [r0, #20]
 8002a0e:	07db      	lsls	r3, r3, #31
 8002a10:	d43c      	bmi.n	8002a8c <I2C_RequestMemoryRead+0x168>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a12:	f7ff fb01 	bl	8002018 <HAL_GetTick>
 8002a16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002a18:	1ac3      	subs	r3, r0, r3
 8002a1a:	4599      	cmp	r9, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a1c:	6830      	ldr	r0, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1e:	d302      	bcc.n	8002a26 <I2C_RequestMemoryRead+0x102>
 8002a20:	f1b9 0f00 	cmp.w	r9, #0
 8002a24:	d1f2      	bne.n	8002a0c <I2C_RequestMemoryRead+0xe8>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a26:	6943      	ldr	r3, [r0, #20]
 8002a28:	07d9      	lsls	r1, r3, #31
 8002a2a:	d4ef      	bmi.n	8002a0c <I2C_RequestMemoryRead+0xe8>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a2c:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a2e:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002a30:	6332      	str	r2, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002a32:	f886 303d 	strb.w	r3, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a36:	f886 203e 	strb.w	r2, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a3a:	6c33      	ldr	r3, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002a3c:	f886 203c 	strb.w	r2, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a40:	f043 0320 	orr.w	r3, r3, #32
 8002a44:	6433      	str	r3, [r6, #64]	@ 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a46:	6803      	ldr	r3, [r0, #0]
 8002a48:	05da      	lsls	r2, r3, #23
 8002a4a:	d5d9      	bpl.n	8002a00 <I2C_RequestMemoryRead+0xdc>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a50:	6433      	str	r3, [r6, #64]	@ 0x40
 8002a52:	e7d5      	b.n	8002a00 <I2C_RequestMemoryRead+0xdc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a54:	f1b8 0f01 	cmp.w	r8, #1
 8002a58:	d008      	beq.n	8002a6c <I2C_RequestMemoryRead+0x148>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a5a:	0a3b      	lsrs	r3, r7, #8
 8002a5c:	6103      	str	r3, [r0, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a5e:	6943      	ldr	r3, [r0, #20]
 8002a60:	0619      	lsls	r1, r3, #24
 8002a62:	d403      	bmi.n	8002a6c <I2C_RequestMemoryRead+0x148>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a64:	6943      	ldr	r3, [r0, #20]
 8002a66:	055a      	lsls	r2, r3, #21
 8002a68:	d5f9      	bpl.n	8002a5e <I2C_RequestMemoryRead+0x13a>
 8002a6a:	e78e      	b.n	800298a <I2C_RequestMemoryRead+0x66>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a6c:	b2ff      	uxtb	r7, r7
 8002a6e:	6107      	str	r7, [r0, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a70:	6943      	ldr	r3, [r0, #20]
 8002a72:	061a      	lsls	r2, r3, #24
 8002a74:	d403      	bmi.n	8002a7e <I2C_RequestMemoryRead+0x15a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a76:	6943      	ldr	r3, [r0, #20]
 8002a78:	055b      	lsls	r3, r3, #21
 8002a7a:	d5f9      	bpl.n	8002a70 <I2C_RequestMemoryRead+0x14c>
 8002a7c:	e785      	b.n	800298a <I2C_RequestMemoryRead+0x66>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a7e:	6803      	ldr	r3, [r0, #0]
 8002a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a84:	6003      	str	r3, [r0, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a86:	6943      	ldr	r3, [r0, #20]
 8002a88:	07dd      	lsls	r5, r3, #31
 8002a8a:	d5fc      	bpl.n	8002a86 <I2C_RequestMemoryRead+0x162>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a8c:	f044 0401 	orr.w	r4, r4, #1
 8002a90:	6104      	str	r4, [r0, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a92:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8002a94:	4649      	mov	r1, r9
 8002a96:	4630      	mov	r0, r6
 8002a98:	f7ff feb0 	bl	80027fc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8002a9c:	3800      	subs	r0, #0
 8002a9e:	bf18      	it	ne
 8002aa0:	2001      	movne	r0, #1
 8002aa2:	e762      	b.n	800296a <I2C_RequestMemoryRead+0x46>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aa4:	f001 03fe 	and.w	r3, r1, #254	@ 0xfe
 8002aa8:	b2cc      	uxtb	r4, r1
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aaa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002aac:	612b      	str	r3, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aae:	4649      	mov	r1, r9
 8002ab0:	4630      	mov	r0, r6
 8002ab2:	f7ff fea3 	bl	80027fc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8002ab6:	2800      	cmp	r0, #0
 8002ab8:	f47f af56 	bne.w	8002968 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002abc:	9003      	str	r0, [sp, #12]
 8002abe:	6830      	ldr	r0, [r6, #0]
 8002ac0:	6943      	ldr	r3, [r0, #20]
 8002ac2:	9303      	str	r3, [sp, #12]
 8002ac4:	6983      	ldr	r3, [r0, #24]
 8002ac6:	9303      	str	r3, [sp, #12]
 8002ac8:	9b03      	ldr	r3, [sp, #12]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002aca:	6943      	ldr	r3, [r0, #20]
 8002acc:	061d      	lsls	r5, r3, #24
 8002ace:	d41b      	bmi.n	8002b08 <I2C_RequestMemoryRead+0x1e4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ad0:	6943      	ldr	r3, [r0, #20]
 8002ad2:	055b      	lsls	r3, r3, #21
 8002ad4:	f53f af59 	bmi.w	800298a <I2C_RequestMemoryRead+0x66>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad8:	f7ff fa9e 	bl	8002018 <HAL_GetTick>
 8002adc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002ade:	1ac3      	subs	r3, r0, r3
 8002ae0:	4599      	cmp	r9, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ae2:	6830      	ldr	r0, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ae4:	d302      	bcc.n	8002aec <I2C_RequestMemoryRead+0x1c8>
 8002ae6:	f1b9 0f00 	cmp.w	r9, #0
 8002aea:	d1ee      	bne.n	8002aca <I2C_RequestMemoryRead+0x1a6>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002aec:	6943      	ldr	r3, [r0, #20]
 8002aee:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 8002af2:	d1ea      	bne.n	8002aca <I2C_RequestMemoryRead+0x1a6>
          hi2c->State               = HAL_I2C_STATE_READY;
 8002af4:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002af6:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002af8:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002afc:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b00:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 8002b02:	4313      	orrs	r3, r2
 8002b04:	6433      	str	r3, [r6, #64]	@ 0x40
          return HAL_ERROR;
 8002b06:	e74e      	b.n	80029a6 <I2C_RequestMemoryRead+0x82>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b08:	f1b8 0f01 	cmp.w	r8, #1
 8002b0c:	d017      	beq.n	8002b3e <I2C_RequestMemoryRead+0x21a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b0e:	0a3b      	lsrs	r3, r7, #8
 8002b10:	6103      	str	r3, [r0, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b12:	6943      	ldr	r3, [r0, #20]
 8002b14:	061d      	lsls	r5, r3, #24
 8002b16:	d412      	bmi.n	8002b3e <I2C_RequestMemoryRead+0x21a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b18:	6943      	ldr	r3, [r0, #20]
 8002b1a:	055b      	lsls	r3, r3, #21
 8002b1c:	f53f af35 	bmi.w	800298a <I2C_RequestMemoryRead+0x66>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b20:	f7ff fa7a 	bl	8002018 <HAL_GetTick>
 8002b24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002b26:	1ac3      	subs	r3, r0, r3
 8002b28:	4599      	cmp	r9, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b2a:	6830      	ldr	r0, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b2c:	d302      	bcc.n	8002b34 <I2C_RequestMemoryRead+0x210>
 8002b2e:	f1b9 0f00 	cmp.w	r9, #0
 8002b32:	d1ee      	bne.n	8002b12 <I2C_RequestMemoryRead+0x1ee>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b34:	6943      	ldr	r3, [r0, #20]
 8002b36:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 8002b3a:	d1ea      	bne.n	8002b12 <I2C_RequestMemoryRead+0x1ee>
 8002b3c:	e7da      	b.n	8002af4 <I2C_RequestMemoryRead+0x1d0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b3e:	b2ff      	uxtb	r7, r7
 8002b40:	6107      	str	r7, [r0, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b42:	6943      	ldr	r3, [r0, #20]
 8002b44:	061f      	lsls	r7, r3, #24
 8002b46:	f53f af5d 	bmi.w	8002a04 <I2C_RequestMemoryRead+0xe0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b4a:	6943      	ldr	r3, [r0, #20]
 8002b4c:	0559      	lsls	r1, r3, #21
 8002b4e:	f53f af1c 	bmi.w	800298a <I2C_RequestMemoryRead+0x66>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b52:	f7ff fa61 	bl	8002018 <HAL_GetTick>
 8002b56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002b58:	1ac3      	subs	r3, r0, r3
 8002b5a:	4599      	cmp	r9, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b5c:	6830      	ldr	r0, [r6, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b5e:	d302      	bcc.n	8002b66 <I2C_RequestMemoryRead+0x242>
 8002b60:	f1b9 0f00 	cmp.w	r9, #0
 8002b64:	d1ed      	bne.n	8002b42 <I2C_RequestMemoryRead+0x21e>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b66:	6943      	ldr	r3, [r0, #20]
 8002b68:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 8002b6c:	d1e9      	bne.n	8002b42 <I2C_RequestMemoryRead+0x21e>
 8002b6e:	e7c1      	b.n	8002af4 <I2C_RequestMemoryRead+0x1d0>

08002b70 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002b70:	2800      	cmp	r0, #0
 8002b72:	f000 80b8 	beq.w	8002ce6 <HAL_I2C_Init+0x176>
{
 8002b76:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b78:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002b7c:	4604      	mov	r4, r0
 8002b7e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 8098 	beq.w	8002cb8 <HAL_I2C_Init+0x148>
  __HAL_I2C_DISABLE(hi2c);
 8002b88:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b8a:	2224      	movs	r2, #36	@ 0x24
 8002b8c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ba6:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ba8:	f001 fdc8 	bl	800473c <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bac:	4b4f      	ldr	r3, [pc, #316]	@ (8002cec <HAL_I2C_Init+0x17c>)
 8002bae:	6865      	ldr	r5, [r4, #4]
 8002bb0:	429d      	cmp	r5, r3
 8002bb2:	d84f      	bhi.n	8002c54 <HAL_I2C_Init+0xe4>
 8002bb4:	4b4e      	ldr	r3, [pc, #312]	@ (8002cf0 <HAL_I2C_Init+0x180>)
 8002bb6:	4298      	cmp	r0, r3
 8002bb8:	d97c      	bls.n	8002cb4 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8002bba:	4b4e      	ldr	r3, [pc, #312]	@ (8002cf4 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bbc:	006a      	lsls	r2, r5, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8002bbe:	fba3 3500 	umull	r3, r5, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bc2:	1e43      	subs	r3, r0, #1
 8002bc4:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bc8:	6822      	ldr	r2, [r4, #0]
 8002bca:	6851      	ldr	r1, [r2, #4]
 8002bcc:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8002bd0:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8002bd4:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bd6:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8002bd8:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bdc:	f10c 0c01 	add.w	ip, ip, #1
 8002be0:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8002be4:	ea41 010c 	orr.w	r1, r1, ip
 8002be8:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bea:	69d1      	ldr	r1, [r2, #28]
 8002bec:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8002bf6:	4203      	tst	r3, r0
 8002bf8:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002bfc:	d161      	bne.n	8002cc2 <HAL_I2C_Init+0x152>
 8002bfe:	2304      	movs	r3, #4
 8002c00:	430b      	orrs	r3, r1
 8002c02:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c04:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002c08:	6811      	ldr	r1, [r2, #0]
 8002c0a:	4303      	orrs	r3, r0
 8002c0c:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8002c10:	430b      	orrs	r3, r1
 8002c12:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c14:	6891      	ldr	r1, [r2, #8]
 8002c16:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002c1a:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8002c1e:	4303      	orrs	r3, r0
 8002c20:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002c24:	430b      	orrs	r3, r1
 8002c26:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c28:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002c2c:	68d1      	ldr	r1, [r2, #12]
 8002c2e:	4303      	orrs	r3, r0
 8002c30:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002c34:	430b      	orrs	r3, r1
 8002c36:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002c38:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c3a:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8002c3c:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8002c40:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 8002c42:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c44:	6423      	str	r3, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c46:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c4a:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  return HAL_OK;
 8002c50:	4618      	mov	r0, r3
}
 8002c52:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c54:	4b28      	ldr	r3, [pc, #160]	@ (8002cf8 <HAL_I2C_Init+0x188>)
 8002c56:	4298      	cmp	r0, r3
 8002c58:	d92c      	bls.n	8002cb4 <HAL_I2C_Init+0x144>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c5a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002c5c:	4b25      	ldr	r3, [pc, #148]	@ (8002cf4 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c5e:	4e27      	ldr	r6, [pc, #156]	@ (8002cfc <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8002c60:	fba3 3c00 	umull	r3, ip, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c64:	1e43      	subs	r3, r0, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c66:	6850      	ldr	r0, [r2, #4]
 8002c68:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 8002c6c:	ea40 409c 	orr.w	r0, r0, ip, lsr #18
 8002c70:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002c72:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c76:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002c7a:	fb00 f101 	mul.w	r1, r0, r1
 8002c7e:	fba6 6101 	umull	r6, r1, r6, r1
 8002c82:	6a10      	ldr	r0, [r2, #32]
 8002c84:	0989      	lsrs	r1, r1, #6
 8002c86:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 8002c8a:	3101      	adds	r1, #1
 8002c8c:	4301      	orrs	r1, r0
 8002c8e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c90:	69d1      	ldr	r1, [r2, #28]
 8002c92:	68a0      	ldr	r0, [r4, #8]
 8002c94:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8002c98:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002c9c:	b9a0      	cbnz	r0, 8002cc8 <HAL_I2C_Init+0x158>
 8002c9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ca2:	fbb3 f3f5 	udiv	r3, r3, r5
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cac:	b1cb      	cbz	r3, 8002ce2 <HAL_I2C_Init+0x172>
 8002cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cb2:	e7a5      	b.n	8002c00 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002cb4:	2001      	movs	r0, #1
}
 8002cb6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002cb8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8002cbc:	f7fe fcfa 	bl	80016b4 <HAL_I2C_MspInit>
 8002cc0:	e762      	b.n	8002b88 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc6:	e79b      	b.n	8002c00 <HAL_I2C_Init+0x90>
 8002cc8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002ccc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002cd0:	fbb3 f3f5 	udiv	r3, r3, r5
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cda:	b113      	cbz	r3, 8002ce2 <HAL_I2C_Init+0x172>
 8002cdc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ce0:	e78e      	b.n	8002c00 <HAL_I2C_Init+0x90>
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e78c      	b.n	8002c00 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002ce6:	2001      	movs	r0, #1
}
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	000186a0 	.word	0x000186a0
 8002cf0:	001e847f 	.word	0x001e847f
 8002cf4:	431bde83 	.word	0x431bde83
 8002cf8:	003d08ff 	.word	0x003d08ff
 8002cfc:	10624dd3 	.word	0x10624dd3

08002d00 <HAL_I2C_Master_Transmit>:
{
 8002d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d04:	4604      	mov	r4, r0
 8002d06:	b082      	sub	sp, #8
 8002d08:	4699      	mov	r9, r3
 8002d0a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8002d0c:	4688      	mov	r8, r1
 8002d0e:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8002d10:	f7ff f982 	bl	8002018 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d14:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	d004      	beq.n	8002d26 <HAL_I2C_Master_Transmit+0x26>
      return HAL_BUSY;
 8002d1c:	2502      	movs	r5, #2
}
 8002d1e:	4628      	mov	r0, r5
 8002d20:	b002      	add	sp, #8
 8002d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d26:	6825      	ldr	r5, [r4, #0]
 8002d28:	4606      	mov	r6, r0
 8002d2a:	69ab      	ldr	r3, [r5, #24]
 8002d2c:	079b      	lsls	r3, r3, #30
 8002d2e:	d517      	bpl.n	8002d60 <HAL_I2C_Master_Transmit+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d30:	f7ff f972 	bl	8002018 <HAL_GetTick>
 8002d34:	1b80      	subs	r0, r0, r6
 8002d36:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d38:	6825      	ldr	r5, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3a:	d9f6      	bls.n	8002d2a <HAL_I2C_Master_Transmit+0x2a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d3c:	69ab      	ldr	r3, [r5, #24]
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	f013 0302 	ands.w	r3, r3, #2
 8002d44:	d1f1      	bne.n	8002d2a <HAL_I2C_Master_Transmit+0x2a>
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d46:	2220      	movs	r2, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002d48:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002d4a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002d4e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d52:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002d54:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d58:	f042 0220 	orr.w	r2, r2, #32
 8002d5c:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8002d5e:	e7dd      	b.n	8002d1c <HAL_I2C_Master_Transmit+0x1c>
    __HAL_LOCK(hi2c);
 8002d60:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d0d9      	beq.n	8002d1c <HAL_I2C_Master_Transmit+0x1c>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d6e:	682b      	ldr	r3, [r5, #0]
 8002d70:	07d8      	lsls	r0, r3, #31
 8002d72:	d565      	bpl.n	8002e40 <HAL_I2C_Master_Transmit+0x140>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d74:	682b      	ldr	r3, [r5, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d76:	4a86      	ldr	r2, [pc, #536]	@ (8002f90 <HAL_I2C_Master_Transmit+0x290>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d7c:	602b      	str	r3, [r5, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d7e:	2321      	movs	r3, #33	@ 0x21
 8002d80:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d84:	2310      	movs	r3, #16
 8002d86:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 8002d8e:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d92:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d94:	62e2      	str	r2, [r4, #44]	@ 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002d96:	8523      	strh	r3, [r4, #40]	@ 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d98:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    hi2c->pBuffPtr    = pData;
 8002d9a:	f8c4 a024 	str.w	sl, [r4, #36]	@ 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d9e:	2b08      	cmp	r3, #8
 8002da0:	d006      	beq.n	8002db0 <HAL_I2C_Master_Transmit+0xb0>
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d004      	beq.n	8002db0 <HAL_I2C_Master_Transmit+0xb0>
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d002      	beq.n	8002db0 <HAL_I2C_Master_Transmit+0xb0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002daa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002dac:	2b12      	cmp	r3, #18
 8002dae:	d103      	bne.n	8002db8 <HAL_I2C_Master_Transmit+0xb8>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002db0:	682b      	ldr	r3, [r5, #0]
 8002db2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002db6:	602b      	str	r3, [r5, #0]
 8002db8:	1c79      	adds	r1, r7, #1
 8002dba:	f040 80c1 	bne.w	8002f40 <HAL_I2C_Master_Transmit+0x240>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dbe:	696b      	ldr	r3, [r5, #20]
 8002dc0:	07da      	lsls	r2, r3, #31
 8002dc2:	d5fc      	bpl.n	8002dbe <HAL_I2C_Master_Transmit+0xbe>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dc4:	6923      	ldr	r3, [r4, #16]
 8002dc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002dca:	d13e      	bne.n	8002e4a <HAL_I2C_Master_Transmit+0x14a>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dcc:	f008 03fe 	and.w	r3, r8, #254	@ 0xfe
 8002dd0:	612b      	str	r3, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dd2:	4632      	mov	r2, r6
 8002dd4:	4639      	mov	r1, r7
 8002dd6:	4620      	mov	r0, r4
 8002dd8:	f7ff fd10 	bl	80027fc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8002ddc:	4605      	mov	r5, r0
 8002dde:	2800      	cmp	r0, #0
 8002de0:	d129      	bne.n	8002e36 <HAL_I2C_Master_Transmit+0x136>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	9001      	str	r0, [sp, #4]
 8002de6:	695a      	ldr	r2, [r3, #20]
 8002de8:	9201      	str	r2, [sp, #4]
 8002dea:	699a      	ldr	r2, [r3, #24]
    while (hi2c->XferSize > 0U)
 8002dec:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dee:	9201      	str	r2, [sp, #4]
 8002df0:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8002df2:	2800      	cmp	r0, #0
 8002df4:	d069      	beq.n	8002eca <HAL_I2C_Master_Transmit+0x1ca>
 8002df6:	1c7a      	adds	r2, r7, #1
 8002df8:	d179      	bne.n	8002eee <HAL_I2C_Master_Transmit+0x1ee>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dfa:	695a      	ldr	r2, [r3, #20]
 8002dfc:	0611      	lsls	r1, r2, #24
 8002dfe:	d438      	bmi.n	8002e72 <HAL_I2C_Master_Transmit+0x172>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	0552      	lsls	r2, r2, #21
 8002e04:	d5f9      	bpl.n	8002dfa <HAL_I2C_Master_Transmit+0xfa>
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e06:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e08:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e0c:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e0e:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e10:	6322      	str	r2, [r4, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e12:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e16:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e1a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002e1c:	f042 0204 	orr.w	r2, r2, #4
 8002e20:	6422      	str	r2, [r4, #64]	@ 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e22:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002e24:	2100      	movs	r1, #0
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e26:	2a04      	cmp	r2, #4
          __HAL_UNLOCK(hi2c);
 8002e28:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e2c:	d103      	bne.n	8002e36 <HAL_I2C_Master_Transmit+0x136>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e34:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 8002e36:	2501      	movs	r5, #1
}
 8002e38:	4628      	mov	r0, r5
 8002e3a:	b002      	add	sp, #8
 8002e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_I2C_ENABLE(hi2c);
 8002e40:	682b      	ldr	r3, [r5, #0]
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	602b      	str	r3, [r5, #0]
 8002e48:	e794      	b.n	8002d74 <HAL_I2C_Master_Transmit+0x74>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e4a:	ea4f 13e8 	mov.w	r3, r8, asr #7
 8002e4e:	f003 0306 	and.w	r3, r3, #6
 8002e52:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 8002e56:	612b      	str	r3, [r5, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e58:	4632      	mov	r2, r6
 8002e5a:	4639      	mov	r1, r7
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	f7ff fd17 	bl	8002890 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
 8002e62:	2800      	cmp	r0, #0
 8002e64:	d1e7      	bne.n	8002e36 <HAL_I2C_Master_Transmit+0x136>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e66:	6822      	ldr	r2, [r4, #0]
 8002e68:	fa5f f388 	uxtb.w	r3, r8
 8002e6c:	6113      	str	r3, [r2, #16]
 8002e6e:	e7b0      	b.n	8002dd2 <HAL_I2C_Master_Transmit+0xd2>
 8002e70:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e72:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
 8002e76:	4661      	mov	r1, ip
 8002e78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002e7c:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8002e7e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8002e80:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002e82:	3a01      	subs	r2, #1
 8002e84:	b292      	uxth	r2, r2
 8002e86:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e88:	6959      	ldr	r1, [r3, #20]
      hi2c->XferSize--;
 8002e8a:	1e42      	subs	r2, r0, #1
 8002e8c:	b292      	uxth	r2, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e8e:	0749      	lsls	r1, r1, #29
      hi2c->XferSize--;
 8002e90:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e92:	d50c      	bpl.n	8002eae <HAL_I2C_Master_Transmit+0x1ae>
 8002e94:	b15a      	cbz	r2, 8002eae <HAL_I2C_Master_Transmit+0x1ae>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e96:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8002e9a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002e9c:	f10c 0202 	add.w	r2, ip, #2
 8002ea0:	6262      	str	r2, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8002ea2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002ea4:	3a01      	subs	r2, #1
        hi2c->XferSize--;
 8002ea6:	3802      	subs	r0, #2
        hi2c->XferCount--;
 8002ea8:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 8002eaa:	8520      	strh	r0, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8002eac:	8562      	strh	r2, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8002eae:	1c78      	adds	r0, r7, #1
 8002eb0:	d12b      	bne.n	8002f0a <HAL_I2C_Master_Transmit+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002eb2:	695a      	ldr	r2, [r3, #20]
 8002eb4:	0751      	lsls	r1, r2, #29
 8002eb6:	d405      	bmi.n	8002ec4 <HAL_I2C_Master_Transmit+0x1c4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002eb8:	695a      	ldr	r2, [r3, #20]
 8002eba:	0552      	lsls	r2, r2, #21
 8002ebc:	d4a3      	bmi.n	8002e06 <HAL_I2C_Master_Transmit+0x106>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	0751      	lsls	r1, r2, #29
 8002ec2:	d5f9      	bpl.n	8002eb8 <HAL_I2C_Master_Transmit+0x1b8>
    while (hi2c->XferSize > 0U)
 8002ec4:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 8002ec6:	2800      	cmp	r0, #0
 8002ec8:	d197      	bne.n	8002dfa <HAL_I2C_Master_Transmit+0xfa>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eca:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ecc:	2100      	movs	r1, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ece:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 8002ed2:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed4:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002ed6:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 8002eda:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ede:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
    return HAL_OK;
 8002ee2:	e71c      	b.n	8002d1e <HAL_I2C_Master_Transmit+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee4:	b91f      	cbnz	r7, 8002eee <HAL_I2C_Master_Transmit+0x1ee>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ee6:	695a      	ldr	r2, [r3, #20]
 8002ee8:	f012 0280 	ands.w	r2, r2, #128	@ 0x80
 8002eec:	d01e      	beq.n	8002f2c <HAL_I2C_Master_Transmit+0x22c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eee:	695a      	ldr	r2, [r3, #20]
 8002ef0:	0610      	lsls	r0, r2, #24
 8002ef2:	d4bd      	bmi.n	8002e70 <HAL_I2C_Master_Transmit+0x170>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	0552      	lsls	r2, r2, #21
 8002ef8:	d485      	bmi.n	8002e06 <HAL_I2C_Master_Transmit+0x106>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efa:	f7ff f88d 	bl	8002018 <HAL_GetTick>
 8002efe:	1b83      	subs	r3, r0, r6
 8002f00:	429f      	cmp	r7, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002f02:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f04:	d3ef      	bcc.n	8002ee6 <HAL_I2C_Master_Transmit+0x1e6>
 8002f06:	e7ed      	b.n	8002ee4 <HAL_I2C_Master_Transmit+0x1e4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f08:	b167      	cbz	r7, 8002f24 <HAL_I2C_Master_Transmit+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f0a:	695a      	ldr	r2, [r3, #20]
 8002f0c:	0751      	lsls	r1, r2, #29
 8002f0e:	d43b      	bmi.n	8002f88 <HAL_I2C_Master_Transmit+0x288>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	0550      	lsls	r0, r2, #21
 8002f14:	f53f af77 	bmi.w	8002e06 <HAL_I2C_Master_Transmit+0x106>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f18:	f7ff f87e 	bl	8002018 <HAL_GetTick>
 8002f1c:	1b83      	subs	r3, r0, r6
 8002f1e:	429f      	cmp	r7, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f20:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f22:	d2f1      	bcs.n	8002f08 <HAL_I2C_Master_Transmit+0x208>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f24:	695a      	ldr	r2, [r3, #20]
 8002f26:	f012 0204 	ands.w	r2, r2, #4
 8002f2a:	d1ee      	bne.n	8002f0a <HAL_I2C_Master_Transmit+0x20a>
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f2c:	2120      	movs	r1, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f2e:	6322      	str	r2, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f30:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f34:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f38:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8002f3e:	e770      	b.n	8002e22 <HAL_I2C_Master_Transmit+0x122>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f40:	696b      	ldr	r3, [r5, #20]
 8002f42:	07d9      	lsls	r1, r3, #31
 8002f44:	f53f af3e 	bmi.w	8002dc4 <HAL_I2C_Master_Transmit+0xc4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f48:	f7ff f866 	bl	8002018 <HAL_GetTick>
 8002f4c:	1b83      	subs	r3, r0, r6
 8002f4e:	429f      	cmp	r7, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f50:	6825      	ldr	r5, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f52:	d301      	bcc.n	8002f58 <HAL_I2C_Master_Transmit+0x258>
 8002f54:	2f00      	cmp	r7, #0
 8002f56:	d1f3      	bne.n	8002f40 <HAL_I2C_Master_Transmit+0x240>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f58:	696b      	ldr	r3, [r5, #20]
 8002f5a:	07db      	lsls	r3, r3, #31
 8002f5c:	d4f0      	bmi.n	8002f40 <HAL_I2C_Master_Transmit+0x240>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f5e:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f60:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f62:	6322      	str	r2, [r4, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f64:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f68:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002f6e:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f72:	f043 0320 	orr.w	r3, r3, #32
 8002f76:	6423      	str	r3, [r4, #64]	@ 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f78:	682b      	ldr	r3, [r5, #0]
 8002f7a:	05d8      	lsls	r0, r3, #23
 8002f7c:	f57f af5b 	bpl.w	8002e36 <HAL_I2C_Master_Transmit+0x136>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f80:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f84:	6423      	str	r3, [r4, #64]	@ 0x40
 8002f86:	e756      	b.n	8002e36 <HAL_I2C_Master_Transmit+0x136>
    while (hi2c->XferSize > 0U)
 8002f88:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 8002f8a:	2800      	cmp	r0, #0
 8002f8c:	d1af      	bne.n	8002eee <HAL_I2C_Master_Transmit+0x1ee>
 8002f8e:	e79c      	b.n	8002eca <HAL_I2C_Master_Transmit+0x1ca>
 8002f90:	ffff0000 	.word	0xffff0000

08002f94 <HAL_I2C_Mem_Read>:
{
 8002f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f98:	4604      	mov	r4, r0
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	4699      	mov	r9, r3
 8002f9e:	f8bd a03c 	ldrh.w	sl, [sp, #60]	@ 0x3c
 8002fa2:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002fa4:	460f      	mov	r7, r1
 8002fa6:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8002fa8:	f7ff f836 	bl	8002018 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fac:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	d004      	beq.n	8002fbe <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 8002fb4:	2702      	movs	r7, #2
}
 8002fb6:	4638      	mov	r0, r7
 8002fb8:	b006      	add	sp, #24
 8002fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fbe:	4605      	mov	r5, r0
 8002fc0:	6820      	ldr	r0, [r4, #0]
 8002fc2:	6983      	ldr	r3, [r0, #24]
 8002fc4:	079b      	lsls	r3, r3, #30
 8002fc6:	d517      	bpl.n	8002ff8 <HAL_I2C_Mem_Read+0x64>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc8:	f7ff f826 	bl	8002018 <HAL_GetTick>
 8002fcc:	1b40      	subs	r0, r0, r5
 8002fce:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fd0:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd2:	d9f6      	bls.n	8002fc2 <HAL_I2C_Mem_Read+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fd4:	6983      	ldr	r3, [r0, #24]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	f013 0302 	ands.w	r3, r3, #2
 8002fdc:	d1f1      	bne.n	8002fc2 <HAL_I2C_Mem_Read+0x2e>
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fde:	2220      	movs	r2, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fe0:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fe2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fe6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fea:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002fec:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ff0:	f042 0220 	orr.w	r2, r2, #32
 8002ff4:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8002ff6:	e7dd      	b.n	8002fb4 <HAL_I2C_Mem_Read+0x20>
    __HAL_LOCK(hi2c);
 8002ff8:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d0d9      	beq.n	8002fb4 <HAL_I2C_Mem_Read+0x20>
 8003000:	2301      	movs	r3, #1
 8003002:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003006:	6803      	ldr	r3, [r0, #0]
 8003008:	07d9      	lsls	r1, r3, #31
 800300a:	d561      	bpl.n	80030d0 <HAL_I2C_Mem_Read+0x13c>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800300c:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800300e:	6807      	ldr	r7, [r0, #0]
 8003010:	f427 6700 	bic.w	r7, r7, #2048	@ 0x800
 8003014:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8003016:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8003018:	6260      	str	r0, [r4, #36]	@ 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800301a:	2022      	movs	r0, #34	@ 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800301c:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003020:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003024:	2040      	movs	r0, #64	@ 0x40
 8003026:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800302a:	2000      	movs	r0, #0
 800302c:	6420      	str	r0, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 800302e:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003032:	8d60      	ldrh	r0, [r4, #42]	@ 0x2a
 8003034:	8520      	strh	r0, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003036:	488b      	ldr	r0, [pc, #556]	@ (8003264 <HAL_I2C_Mem_Read+0x2d0>)
 8003038:	62e0      	str	r0, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800303a:	464b      	mov	r3, r9
 800303c:	4642      	mov	r2, r8
 800303e:	4620      	mov	r0, r4
 8003040:	f7ff fc70 	bl	8002924 <I2C_RequestMemoryRead>
 8003044:	4607      	mov	r7, r0
 8003046:	2800      	cmp	r0, #0
 8003048:	d13d      	bne.n	80030c6 <HAL_I2C_Mem_Read+0x132>
    if (hi2c->XferSize == 0U)
 800304a:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800304c:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 800304e:	2a00      	cmp	r2, #0
 8003050:	d143      	bne.n	80030da <HAL_I2C_Mem_Read+0x146>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003052:	9002      	str	r0, [sp, #8]
 8003054:	695a      	ldr	r2, [r3, #20]
 8003056:	9202      	str	r2, [sp, #8]
 8003058:	699a      	ldr	r2, [r3, #24]
 800305a:	9202      	str	r2, [sp, #8]
 800305c:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003064:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003066:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003068:	2220      	movs	r2, #32
 800306a:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 800306e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003072:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8003076:	e79e      	b.n	8002fb6 <HAL_I2C_Mem_Read+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003078:	695a      	ldr	r2, [r3, #20]
 800307a:	0652      	lsls	r2, r2, #25
 800307c:	f100 80ca 	bmi.w	8003214 <HAL_I2C_Mem_Read+0x280>
 8003080:	2e00      	cmp	r6, #0
 8003082:	f000 80c3 	beq.w	800320c <HAL_I2C_Mem_Read+0x278>
 8003086:	e00d      	b.n	80030a4 <HAL_I2C_Mem_Read+0x110>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003088:	f7fe ffc6 	bl	8002018 <HAL_GetTick>
 800308c:	1b40      	subs	r0, r0, r5
 800308e:	4286      	cmp	r6, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003090:	6823      	ldr	r3, [r4, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003092:	d203      	bcs.n	800309c <HAL_I2C_Mem_Read+0x108>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	0651      	lsls	r1, r2, #25
 8003098:	f140 8081 	bpl.w	800319e <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800309c:	695a      	ldr	r2, [r3, #20]
 800309e:	0652      	lsls	r2, r2, #25
 80030a0:	f100 80b8 	bmi.w	8003214 <HAL_I2C_Mem_Read+0x280>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030a4:	695a      	ldr	r2, [r3, #20]
 80030a6:	06d0      	lsls	r0, r2, #27
 80030a8:	d5ee      	bpl.n	8003088 <HAL_I2C_Mem_Read+0xf4>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030aa:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030ac:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 80030b0:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030b2:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030b4:	6322      	str	r2, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030b6:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ba:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80030c0:	6423      	str	r3, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 80030c2:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 80030c6:	2701      	movs	r7, #1
}
 80030c8:	4638      	mov	r0, r7
 80030ca:	b006      	add	sp, #24
 80030cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_I2C_ENABLE(hi2c);
 80030d0:	6803      	ldr	r3, [r0, #0]
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	6003      	str	r3, [r0, #0]
 80030d8:	e798      	b.n	800300c <HAL_I2C_Mem_Read+0x78>
    else if (hi2c->XferSize == 1U)
 80030da:	2a01      	cmp	r2, #1
 80030dc:	f000 8116 	beq.w	800330c <HAL_I2C_Mem_Read+0x378>
    else if (hi2c->XferSize == 2U)
 80030e0:	2a02      	cmp	r2, #2
 80030e2:	d07b      	beq.n	80031dc <HAL_I2C_Mem_Read+0x248>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e4:	9005      	str	r0, [sp, #20]
 80030e6:	6959      	ldr	r1, [r3, #20]
 80030e8:	9105      	str	r1, [sp, #20]
 80030ea:	6999      	ldr	r1, [r3, #24]
 80030ec:	9105      	str	r1, [sp, #20]
 80030ee:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 80030f0:	2a03      	cmp	r2, #3
 80030f2:	d8c1      	bhi.n	8003078 <HAL_I2C_Mem_Read+0xe4>
        if (hi2c->XferSize == 1U)
 80030f4:	2a01      	cmp	r2, #1
 80030f6:	f000 80e0 	beq.w	80032ba <HAL_I2C_Mem_Read+0x326>
        else if (hi2c->XferSize == 2U)
 80030fa:	2a02      	cmp	r2, #2
 80030fc:	f000 80b4 	beq.w	8003268 <HAL_I2C_Mem_Read+0x2d4>
 8003100:	1c71      	adds	r1, r6, #1
 8003102:	d13e      	bne.n	8003182 <HAL_I2C_Mem_Read+0x1ee>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	0752      	lsls	r2, r2, #29
 8003108:	d5fc      	bpl.n	8003104 <HAL_I2C_Mem_Read+0x170>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800310a:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800310c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800310e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003112:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8003118:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 800311a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800311c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800311e:	3b01      	subs	r3, #1
 8003120:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 8003122:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 8003124:	3101      	adds	r1, #1
          hi2c->XferCount--;
 8003126:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8003128:	1c73      	adds	r3, r6, #1
          hi2c->XferSize--;
 800312a:	8522      	strh	r2, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 800312c:	6261      	str	r1, [r4, #36]	@ 0x24
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800312e:	6822      	ldr	r2, [r4, #0]
 8003130:	d144      	bne.n	80031bc <HAL_I2C_Mem_Read+0x228>
 8003132:	6953      	ldr	r3, [r2, #20]
 8003134:	0758      	lsls	r0, r3, #29
 8003136:	d5fc      	bpl.n	8003132 <HAL_I2C_Mem_Read+0x19e>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003138:	6813      	ldr	r3, [r2, #0]
 800313a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800313e:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003140:	6913      	ldr	r3, [r2, #16]
 8003142:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8003144:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 8003146:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 8003148:	6a60      	ldr	r0, [r4, #36]	@ 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800314a:	6821      	ldr	r1, [r4, #0]
          hi2c->XferCount--;
 800314c:	3b01      	subs	r3, #1
 800314e:	b29b      	uxth	r3, r3
 8003150:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003152:	6909      	ldr	r1, [r1, #16]
          hi2c->XferSize--;
 8003154:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 8003156:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 800315a:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 800315c:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003160:	7041      	strb	r1, [r0, #1]
          hi2c->XferSize--;
 8003162:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003164:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 8003166:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003168:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 800316a:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 800316c:	3101      	adds	r1, #1
          hi2c->XferSize--;
 800316e:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8003170:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8003172:	6261      	str	r1, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003174:	8522      	strh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003176:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003178:	2a00      	cmp	r2, #0
 800317a:	f43f af74 	beq.w	8003066 <HAL_I2C_Mem_Read+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800317e:	6823      	ldr	r3, [r4, #0]
 8003180:	e7b6      	b.n	80030f0 <HAL_I2C_Mem_Read+0x15c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003182:	695a      	ldr	r2, [r3, #20]
 8003184:	0752      	lsls	r2, r2, #29
 8003186:	d4c0      	bmi.n	800310a <HAL_I2C_Mem_Read+0x176>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003188:	f7fe ff46 	bl	8002018 <HAL_GetTick>
 800318c:	1b43      	subs	r3, r0, r5
 800318e:	429e      	cmp	r6, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003190:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003192:	d301      	bcc.n	8003198 <HAL_I2C_Mem_Read+0x204>
 8003194:	2e00      	cmp	r6, #0
 8003196:	d1f4      	bne.n	8003182 <HAL_I2C_Mem_Read+0x1ee>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003198:	695a      	ldr	r2, [r3, #20]
 800319a:	0751      	lsls	r1, r2, #29
 800319c:	d4f1      	bmi.n	8003182 <HAL_I2C_Mem_Read+0x1ee>
        hi2c->PreviousState       = I2C_STATE_NONE;
 800319e:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80031a0:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031a2:	6322      	str	r2, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031a4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a8:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80031ae:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031b2:	f043 0320 	orr.w	r3, r3, #32
 80031b6:	6423      	str	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80031b8:	2701      	movs	r7, #1
 80031ba:	e785      	b.n	80030c8 <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031bc:	6953      	ldr	r3, [r2, #20]
 80031be:	075b      	lsls	r3, r3, #29
 80031c0:	f100 80b3 	bmi.w	800332a <HAL_I2C_Mem_Read+0x396>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c4:	f7fe ff28 	bl	8002018 <HAL_GetTick>
 80031c8:	1b43      	subs	r3, r0, r5
 80031ca:	429e      	cmp	r6, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031cc:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ce:	d301      	bcc.n	80031d4 <HAL_I2C_Mem_Read+0x240>
 80031d0:	2e00      	cmp	r6, #0
 80031d2:	d1f3      	bne.n	80031bc <HAL_I2C_Mem_Read+0x228>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031d4:	6953      	ldr	r3, [r2, #20]
 80031d6:	0759      	lsls	r1, r3, #29
 80031d8:	d4f0      	bmi.n	80031bc <HAL_I2C_Mem_Read+0x228>
 80031da:	e7e0      	b.n	800319e <HAL_I2C_Mem_Read+0x20a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031dc:	6819      	ldr	r1, [r3, #0]
 80031de:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 80031e2:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031e4:	6819      	ldr	r1, [r3, #0]
 80031e6:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 80031ea:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ec:	9004      	str	r0, [sp, #16]
 80031ee:	6959      	ldr	r1, [r3, #20]
 80031f0:	9104      	str	r1, [sp, #16]
 80031f2:	6999      	ldr	r1, [r3, #24]
 80031f4:	9104      	str	r1, [sp, #16]
 80031f6:	9904      	ldr	r1, [sp, #16]
 80031f8:	e77a      	b.n	80030f0 <HAL_I2C_Mem_Read+0x15c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031fa:	f7fe ff0d 	bl	8002018 <HAL_GetTick>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	695a      	ldr	r2, [r3, #20]
 8003202:	0651      	lsls	r1, r2, #25
 8003204:	d5cb      	bpl.n	800319e <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	0652      	lsls	r2, r2, #25
 800320a:	d403      	bmi.n	8003214 <HAL_I2C_Mem_Read+0x280>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	06d0      	lsls	r0, r2, #27
 8003210:	d5f3      	bpl.n	80031fa <HAL_I2C_Mem_Read+0x266>
 8003212:	e74a      	b.n	80030aa <HAL_I2C_Mem_Read+0x116>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003214:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 800321a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800321c:	6821      	ldr	r1, [r4, #0]
        hi2c->XferSize--;
 800321e:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
        hi2c->pBuffPtr++;
 8003220:	6a60      	ldr	r0, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8003222:	3b01      	subs	r3, #1
 8003224:	b29b      	uxth	r3, r3
 8003226:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003228:	694b      	ldr	r3, [r1, #20]
        hi2c->XferSize--;
 800322a:	3a01      	subs	r2, #1
 800322c:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 800322e:	f100 0c01 	add.w	ip, r0, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003232:	075b      	lsls	r3, r3, #29
        hi2c->XferSize--;
 8003234:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->pBuffPtr++;
 8003236:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800323a:	d59d      	bpl.n	8003178 <HAL_I2C_Mem_Read+0x1e4>
          if (hi2c->XferSize == 3U)
 800323c:	2a03      	cmp	r2, #3
 800323e:	d103      	bne.n	8003248 <HAL_I2C_Mem_Read+0x2b4>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003240:	680b      	ldr	r3, [r1, #0]
 8003242:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003246:	600b      	str	r3, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003248:	690b      	ldr	r3, [r1, #16]
 800324a:	7043      	strb	r3, [r0, #1]
          hi2c->pBuffPtr++;
 800324c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800324e:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 8003250:	3301      	adds	r3, #1
 8003252:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferCount--;
 8003254:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 8003256:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8003258:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 800325a:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 800325c:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 800325e:	8522      	strh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 8003260:	8563      	strh	r3, [r4, #42]	@ 0x2a
 8003262:	e789      	b.n	8003178 <HAL_I2C_Mem_Read+0x1e4>
 8003264:	ffff0000 	.word	0xffff0000
 8003268:	1c70      	adds	r0, r6, #1
 800326a:	d117      	bne.n	800329c <HAL_I2C_Mem_Read+0x308>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800326c:	695a      	ldr	r2, [r3, #20]
 800326e:	0751      	lsls	r1, r2, #29
 8003270:	d5fc      	bpl.n	800326c <HAL_I2C_Mem_Read+0x2d8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003278:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800327e:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 8003280:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 8003282:	6a62      	ldr	r2, [r4, #36]	@ 0x24
          hi2c->XferCount--;
 8003284:	3b01      	subs	r3, #1
 8003286:	b29b      	uxth	r3, r3
 8003288:	8563      	strh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 800328a:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 800328c:	3b01      	subs	r3, #1
 800328e:	8523      	strh	r3, [r4, #40]	@ 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003290:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 8003292:	1c51      	adds	r1, r2, #1
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003294:	691b      	ldr	r3, [r3, #16]
          hi2c->pBuffPtr++;
 8003296:	6261      	str	r1, [r4, #36]	@ 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003298:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 800329a:	e7d7      	b.n	800324c <HAL_I2C_Mem_Read+0x2b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	0750      	lsls	r0, r2, #29
 80032a0:	d4e7      	bmi.n	8003272 <HAL_I2C_Mem_Read+0x2de>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032a2:	f7fe feb9 	bl	8002018 <HAL_GetTick>
 80032a6:	1b43      	subs	r3, r0, r5
 80032a8:	429e      	cmp	r6, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032aa:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ac:	d301      	bcc.n	80032b2 <HAL_I2C_Mem_Read+0x31e>
 80032ae:	2e00      	cmp	r6, #0
 80032b0:	d1f4      	bne.n	800329c <HAL_I2C_Mem_Read+0x308>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032b2:	695a      	ldr	r2, [r3, #20]
 80032b4:	0752      	lsls	r2, r2, #29
 80032b6:	d4f1      	bmi.n	800329c <HAL_I2C_Mem_Read+0x308>
 80032b8:	e771      	b.n	800319e <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032ba:	695a      	ldr	r2, [r3, #20]
 80032bc:	0650      	lsls	r0, r2, #25
 80032be:	d421      	bmi.n	8003304 <HAL_I2C_Mem_Read+0x370>
 80032c0:	b1e6      	cbz	r6, 80032fc <HAL_I2C_Mem_Read+0x368>
 80032c2:	e00c      	b.n	80032de <HAL_I2C_Mem_Read+0x34a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c4:	f7fe fea8 	bl	8002018 <HAL_GetTick>
 80032c8:	1b40      	subs	r0, r0, r5
 80032ca:	4286      	cmp	r6, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80032cc:	6823      	ldr	r3, [r4, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ce:	d203      	bcs.n	80032d8 <HAL_I2C_Mem_Read+0x344>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80032d0:	695a      	ldr	r2, [r3, #20]
 80032d2:	0652      	lsls	r2, r2, #25
 80032d4:	f57f af63 	bpl.w	800319e <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032d8:	695a      	ldr	r2, [r3, #20]
 80032da:	0650      	lsls	r0, r2, #25
 80032dc:	d412      	bmi.n	8003304 <HAL_I2C_Mem_Read+0x370>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	06d1      	lsls	r1, r2, #27
 80032e2:	f53f aee2 	bmi.w	80030aa <HAL_I2C_Mem_Read+0x116>
 80032e6:	e7ed      	b.n	80032c4 <HAL_I2C_Mem_Read+0x330>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e8:	f7fe fe96 	bl	8002018 <HAL_GetTick>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	0652      	lsls	r2, r2, #25
 80032f2:	f57f af54 	bpl.w	800319e <HAL_I2C_Mem_Read+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032f6:	695a      	ldr	r2, [r3, #20]
 80032f8:	0650      	lsls	r0, r2, #25
 80032fa:	d403      	bmi.n	8003304 <HAL_I2C_Mem_Read+0x370>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032fc:	695a      	ldr	r2, [r3, #20]
 80032fe:	06d1      	lsls	r1, r2, #27
 8003300:	d5f2      	bpl.n	80032e8 <HAL_I2C_Mem_Read+0x354>
 8003302:	e6d2      	b.n	80030aa <HAL_I2C_Mem_Read+0x116>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003308:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800330a:	e79f      	b.n	800324c <HAL_I2C_Mem_Read+0x2b8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800330c:	6819      	ldr	r1, [r3, #0]
 800330e:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8003312:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003314:	9003      	str	r0, [sp, #12]
 8003316:	6959      	ldr	r1, [r3, #20]
 8003318:	9103      	str	r1, [sp, #12]
 800331a:	6999      	ldr	r1, [r3, #24]
 800331c:	9103      	str	r1, [sp, #12]
 800331e:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003320:	6819      	ldr	r1, [r3, #0]
 8003322:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 8003326:	6019      	str	r1, [r3, #0]
 8003328:	e6e2      	b.n	80030f0 <HAL_I2C_Mem_Read+0x15c>
 800332a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800332c:	e704      	b.n	8003138 <HAL_I2C_Mem_Read+0x1a4>
 800332e:	bf00      	nop

08003330 <HAL_I2C_MasterRxCpltCallback>:
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop

08003334 <HAL_I2C_SlaveTxCpltCallback>:
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop

08003338 <HAL_I2C_SlaveRxCpltCallback>:
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop

0800333c <HAL_I2C_AddrCallback>:
}
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop

08003340 <HAL_I2C_ListenCpltCallback>:
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop

08003344 <HAL_I2C_MemTxCpltCallback>:
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop

08003348 <I2C_MemoryTransmit_TXE_BTF>:
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003348:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
  if (hi2c->EventCount == 0U)
 800334c:	6d01      	ldr	r1, [r0, #80]	@ 0x50
{
 800334e:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 8003350:	b959      	cbnz	r1, 800336a <I2C_MemoryTransmit_TXE_BTF+0x22>
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003352:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003354:	6801      	ldr	r1, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003356:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003358:	6c82      	ldr	r2, [r0, #72]	@ 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800335a:	d01c      	beq.n	8003396 <I2C_MemoryTransmit_TXE_BTF+0x4e>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800335c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003360:	610a      	str	r2, [r1, #16]
      hi2c->EventCount++;
 8003362:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8003364:	3201      	adds	r2, #1
 8003366:	6502      	str	r2, [r0, #80]	@ 0x50
 8003368:	4770      	bx	lr
  else if (hi2c->EventCount == 1U)
 800336a:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 800336c:	2901      	cmp	r1, #1
 800336e:	d00a      	beq.n	8003386 <I2C_MemoryTransmit_TXE_BTF+0x3e>
  else if (hi2c->EventCount == 2U)
 8003370:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8003372:	2902      	cmp	r1, #2
 8003374:	d015      	beq.n	80033a2 <I2C_MemoryTransmit_TXE_BTF+0x5a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003376:	6803      	ldr	r3, [r0, #0]
 8003378:	695a      	ldr	r2, [r3, #20]
 800337a:	0612      	lsls	r2, r2, #24
 800337c:	d502      	bpl.n	8003384 <I2C_MemoryTransmit_TXE_BTF+0x3c>
    hi2c->Instance->DR = 0x00U;
 800337e:	2200      	movs	r2, #0
 8003380:	611a      	str	r2, [r3, #16]
}
 8003382:	4770      	bx	lr
 8003384:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003386:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8003388:	6801      	ldr	r1, [r0, #0]
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 800338e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8003390:	3201      	adds	r2, #1
 8003392:	6502      	str	r2, [r0, #80]	@ 0x50
 8003394:	4770      	bx	lr
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 800339a:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800339c:	3202      	adds	r2, #2
 800339e:	6502      	str	r2, [r0, #80]	@ 0x50
 80033a0:	4770      	bx	lr
 80033a2:	b2d2      	uxtb	r2, r2
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80033a4:	2a22      	cmp	r2, #34	@ 0x22
 80033a6:	d01f      	beq.n	80033e8 <I2C_MemoryTransmit_TXE_BTF+0xa0>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033a8:	8d41      	ldrh	r1, [r0, #42]	@ 0x2a
 80033aa:	b289      	uxth	r1, r1
 80033ac:	b9c1      	cbnz	r1, 80033e0 <I2C_MemoryTransmit_TXE_BTF+0x98>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033ae:	8d41      	ldrh	r1, [r0, #42]	@ 0x2a
 80033b0:	b289      	uxth	r1, r1
 80033b2:	2900      	cmp	r1, #0
 80033b4:	d1e6      	bne.n	8003384 <I2C_MemoryTransmit_TXE_BTF+0x3c>
 80033b6:	2a21      	cmp	r2, #33	@ 0x21
 80033b8:	d1e4      	bne.n	8003384 <I2C_MemoryTransmit_TXE_BTF+0x3c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033ba:	6802      	ldr	r2, [r0, #0]
{
 80033bc:	b510      	push	{r4, lr}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033be:	6854      	ldr	r4, [r2, #4]
 80033c0:	f424 64e0 	bic.w	r4, r4, #1792	@ 0x700
 80033c4:	6054      	str	r4, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c6:	6814      	ldr	r4, [r2, #0]
 80033c8:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
 80033cc:	6014      	str	r4, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 80033ce:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80033d0:	6301      	str	r1, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80033d2:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d6:	f880 103e 	strb.w	r1, [r0, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80033da:	f7ff ffb3 	bl	8003344 <HAL_I2C_MemTxCpltCallback>
}
 80033de:	bd10      	pop	{r4, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033e0:	2a21      	cmp	r2, #33	@ 0x21
 80033e2:	d00a      	beq.n	80033fa <I2C_MemoryTransmit_TXE_BTF+0xb2>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80033e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e6:	4770      	bx	lr
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80033e8:	6801      	ldr	r1, [r0, #0]
 80033ea:	680a      	ldr	r2, [r1, #0]
 80033ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033f0:	600a      	str	r2, [r1, #0]
      hi2c->EventCount++;
 80033f2:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80033f4:	3201      	adds	r2, #1
 80033f6:	6502      	str	r2, [r0, #80]	@ 0x50
 80033f8:	4770      	bx	lr
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033fa:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 80033fc:	6802      	ldr	r2, [r0, #0]
 80033fe:	f811 0b01 	ldrb.w	r0, [r1], #1
 8003402:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 8003404:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8003406:	6259      	str	r1, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8003408:	3a01      	subs	r2, #1
 800340a:	b292      	uxth	r2, r2
 800340c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800340e:	4770      	bx	lr

08003410 <HAL_I2C_ErrorCallback>:
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop

08003414 <HAL_I2C_AbortCpltCallback>:
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop

08003418 <I2C_DMAAbort>:
{
 8003418:	b570      	push	{r4, r5, r6, lr}
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800341a:	4b3a      	ldr	r3, [pc, #232]	@ (8003504 <I2C_DMAAbort+0xec>)
 800341c:	4a3a      	ldr	r2, [pc, #232]	@ (8003508 <I2C_DMAAbort+0xf0>)
 800341e:	681b      	ldr	r3, [r3, #0]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003420:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8003422:	b082      	sub	sp, #8
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003424:	08db      	lsrs	r3, r3, #3
  __IO uint32_t count = 0U;
 8003426:	2100      	movs	r1, #0
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003428:	fba2 2303 	umull	r2, r3, r2, r3
  __IO uint32_t count = 0U;
 800342c:	9101      	str	r1, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800342e:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003430:	f890 103d 	ldrb.w	r1, [r0, #61]	@ 0x3d
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003434:	6802      	ldr	r2, [r0, #0]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003436:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800343a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800343e:	b2c9      	uxtb	r1, r1
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003440:	9301      	str	r3, [sp, #4]
 8003442:	e005      	b.n	8003450 <I2C_DMAAbort+0x38>
    count--;
 8003444:	9b01      	ldr	r3, [sp, #4]
 8003446:	3b01      	subs	r3, #1
 8003448:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800344a:	6813      	ldr	r3, [r2, #0]
 800344c:	059b      	lsls	r3, r3, #22
 800344e:	d506      	bpl.n	800345e <I2C_DMAAbort+0x46>
    if (count == 0U)
 8003450:	9b01      	ldr	r3, [sp, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1f6      	bne.n	8003444 <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003456:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003458:	f043 0320 	orr.w	r3, r3, #32
 800345c:	6403      	str	r3, [r0, #64]	@ 0x40
  if (hi2c->hdmarx != NULL)
 800345e:	e9d0 430d 	ldrd	r4, r3, [r0, #52]	@ 0x34
  if (hi2c->hdmatx != NULL)
 8003462:	b344      	cbz	r4, 80034b6 <I2C_DMAAbort+0x9e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003464:	2500      	movs	r5, #0
 8003466:	63e5      	str	r5, [r4, #60]	@ 0x3c
  if (hi2c->hdmarx != NULL)
 8003468:	b1f3      	cbz	r3, 80034a8 <I2C_DMAAbort+0x90>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346a:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 800346c:	63dd      	str	r5, [r3, #60]	@ 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800346e:	f426 6680 	bic.w	r6, r6, #1024	@ 0x400
 8003472:	6016      	str	r6, [r2, #0]
  hi2c->XferCount = 0U;
 8003474:	8545      	strh	r5, [r0, #42]	@ 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003476:	6525      	str	r5, [r4, #80]	@ 0x50
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003478:	2400      	movs	r4, #0
 800347a:	651c      	str	r4, [r3, #80]	@ 0x50
  __HAL_I2C_DISABLE(hi2c);
 800347c:	6813      	ldr	r3, [r2, #0]
 800347e:	f023 0301 	bic.w	r3, r3, #1
 8003482:	6013      	str	r3, [r2, #0]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003484:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003488:	2b60      	cmp	r3, #96	@ 0x60
 800348a:	d029      	beq.n	80034e0 <I2C_DMAAbort+0xc8>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800348c:	f001 0128 	and.w	r1, r1, #40	@ 0x28
 8003490:	2928      	cmp	r1, #40	@ 0x28
 8003492:	d018      	beq.n	80034c6 <I2C_DMAAbort+0xae>
      hi2c->State = HAL_I2C_STATE_READY;
 8003494:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003496:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8003498:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800349c:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80034a0:	f7ff ffb6 	bl	8003410 <HAL_I2C_ErrorCallback>
}
 80034a4:	b002      	add	sp, #8
 80034a6:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034a8:	6815      	ldr	r5, [r2, #0]
 80034aa:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80034ae:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 80034b0:	8543      	strh	r3, [r0, #42]	@ 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 80034b2:	6523      	str	r3, [r4, #80]	@ 0x50
  if (hi2c->hdmarx != NULL)
 80034b4:	e7e2      	b.n	800347c <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 80034b6:	b1f3      	cbz	r3, 80034f6 <I2C_DMAAbort+0xde>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b8:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 80034ba:	63dc      	str	r4, [r3, #60]	@ 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034bc:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80034c0:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 80034c2:	8544      	strh	r4, [r0, #42]	@ 0x2a
  if (hi2c->hdmatx != NULL)
 80034c4:	e7d8      	b.n	8003478 <I2C_DMAAbort+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80034c6:	6813      	ldr	r3, [r2, #0]
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034ce:	6813      	ldr	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80034d0:	2400      	movs	r4, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034d6:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80034d8:	6304      	str	r4, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034da:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
 80034de:	e7df      	b.n	80034a0 <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034e0:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 80034e2:	2220      	movs	r2, #32
 80034e4:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034e8:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80034ec:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 80034ee:	f7ff ff91 	bl	8003414 <HAL_I2C_AbortCpltCallback>
}
 80034f2:	b002      	add	sp, #8
 80034f4:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f6:	6814      	ldr	r4, [r2, #0]
 80034f8:	f424 6480 	bic.w	r4, r4, #1024	@ 0x400
 80034fc:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 80034fe:	8543      	strh	r3, [r0, #42]	@ 0x2a
  if (hi2c->hdmatx != NULL)
 8003500:	e7bc      	b.n	800347c <I2C_DMAAbort+0x64>
 8003502:	bf00      	nop
 8003504:	20000000 	.word	0x20000000
 8003508:	14f8b589 	.word	0x14f8b589

0800350c <I2C_ITError>:
{
 800350c:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800350e:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003512:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003516:	2b10      	cmp	r3, #16
{
 8003518:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800351a:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800351c:	d039      	beq.n	8003592 <I2C_ITError+0x86>
 800351e:	b2d9      	uxtb	r1, r3
 8003520:	2940      	cmp	r1, #64	@ 0x40
 8003522:	d036      	beq.n	8003592 <I2C_ITError+0x86>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003524:	f002 0128 	and.w	r1, r2, #40	@ 0x28
 8003528:	2928      	cmp	r1, #40	@ 0x28
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800352a:	6823      	ldr	r3, [r4, #0]
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800352c:	d03c      	beq.n	80035a8 <I2C_ITError+0x9c>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800352e:	6859      	ldr	r1, [r3, #4]
 8003530:	0508      	lsls	r0, r1, #20
 8003532:	d407      	bmi.n	8003544 <I2C_ITError+0x38>
 8003534:	2a60      	cmp	r2, #96	@ 0x60
 8003536:	d005      	beq.n	8003544 <I2C_ITError+0x38>
      hi2c->State = HAL_I2C_STATE_READY;
 8003538:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800353a:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 800353c:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003540:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8003544:	2200      	movs	r2, #0
 8003546:	6322      	str	r2, [r4, #48]	@ 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003548:	685a      	ldr	r2, [r3, #4]
 800354a:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 800354e:	d133      	bne.n	80035b8 <I2C_ITError+0xac>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003550:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 8003554:	2960      	cmp	r1, #96	@ 0x60
 8003556:	d074      	beq.n	8003642 <I2C_ITError+0x136>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003558:	695a      	ldr	r2, [r3, #20]
 800355a:	0650      	lsls	r0, r2, #25
 800355c:	d505      	bpl.n	800356a <I2C_ITError+0x5e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800355e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8003564:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003566:	3301      	adds	r3, #1
 8003568:	6263      	str	r3, [r4, #36]	@ 0x24
    HAL_I2C_ErrorCallback(hi2c);
 800356a:	4620      	mov	r0, r4
 800356c:	f7ff ff50 	bl	8003410 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8003570:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003572:	0719      	lsls	r1, r3, #28
 8003574:	d004      	beq.n	8003580 <I2C_ITError+0x74>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003576:	6822      	ldr	r2, [r4, #0]
 8003578:	6853      	ldr	r3, [r2, #4]
 800357a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800357e:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8003580:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003584:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003586:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 8003588:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800358a:	d501      	bpl.n	8003590 <I2C_ITError+0x84>
 800358c:	2b28      	cmp	r3, #40	@ 0x28
 800358e:	d02e      	beq.n	80035ee <I2C_ITError+0xe2>
}
 8003590:	bd10      	pop	{r4, pc}
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003592:	2a22      	cmp	r2, #34	@ 0x22
 8003594:	d1c6      	bne.n	8003524 <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800359e:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	0512      	lsls	r2, r2, #20
 80035a4:	d5c8      	bpl.n	8003538 <I2C_ITError+0x2c>
 80035a6:	e7cd      	b.n	8003544 <I2C_ITError+0x38>
    hi2c->PreviousState = I2C_STATE_NONE;
 80035a8:	2200      	movs	r2, #0
 80035aa:	6322      	str	r2, [r4, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80035ac:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 80035b6:	d0cb      	beq.n	8003550 <I2C_ITError+0x44>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80035b8:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80035ba:	6b60      	ldr	r0, [r4, #52]	@ 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80035bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035c0:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80035c2:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d01e      	beq.n	8003608 <I2C_ITError+0xfc>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80035ca:	4b29      	ldr	r3, [pc, #164]	@ (8003670 <I2C_ITError+0x164>)
 80035cc:	6503      	str	r3, [r0, #80]	@ 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80035ce:	f7fe fe63 	bl	8002298 <HAL_DMA_Abort_IT>
 80035d2:	2800      	cmp	r0, #0
 80035d4:	d0cc      	beq.n	8003570 <I2C_ITError+0x64>
        __HAL_I2C_DISABLE(hi2c);
 80035d6:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80035d8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        __HAL_I2C_DISABLE(hi2c);
 80035da:	6813      	ldr	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80035dc:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 80035de:	f023 0301 	bic.w	r3, r3, #1
 80035e2:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80035e4:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80035e8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80035ea:	4798      	blx	r3
 80035ec:	e7c0      	b.n	8003570 <I2C_ITError+0x64>
    hi2c->PreviousState = I2C_STATE_NONE;
 80035ee:	2300      	movs	r3, #0
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80035f0:	4920      	ldr	r1, [pc, #128]	@ (8003674 <I2C_ITError+0x168>)
 80035f2:	62e1      	str	r1, [r4, #44]	@ 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 80035f4:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80035f6:	6323      	str	r3, [r4, #48]	@ 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 80035f8:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 80035fa:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80035fe:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003602:	f7ff fe9d 	bl	8003340 <HAL_I2C_ListenCpltCallback>
}
 8003606:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003608:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800360a:	4b19      	ldr	r3, [pc, #100]	@ (8003670 <I2C_ITError+0x164>)
 800360c:	6503      	str	r3, [r0, #80]	@ 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800360e:	f7fe fe43 	bl	8002298 <HAL_DMA_Abort_IT>
 8003612:	2800      	cmp	r0, #0
 8003614:	d0ac      	beq.n	8003570 <I2C_ITError+0x64>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003616:	6823      	ldr	r3, [r4, #0]
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	0651      	lsls	r1, r2, #25
 800361c:	d506      	bpl.n	800362c <I2C_ITError+0x120>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8003624:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        __HAL_I2C_DISABLE(hi2c);
 8003626:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 8003628:	3201      	adds	r2, #1
 800362a:	6262      	str	r2, [r4, #36]	@ 0x24
        __HAL_I2C_DISABLE(hi2c);
 800362c:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800362e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        __HAL_I2C_DISABLE(hi2c);
 8003630:	f022 0201 	bic.w	r2, r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 8003634:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8003636:	601a      	str	r2, [r3, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003638:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800363c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800363e:	4798      	blx	r3
 8003640:	e796      	b.n	8003570 <I2C_ITError+0x64>
    hi2c->State = HAL_I2C_STATE_READY;
 8003642:	2120      	movs	r1, #32
 8003644:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003648:	6422      	str	r2, [r4, #64]	@ 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800364a:	695a      	ldr	r2, [r3, #20]
 800364c:	0652      	lsls	r2, r2, #25
 800364e:	d506      	bpl.n	800365e <I2C_ITError+0x152>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003650:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8003656:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE(hi2c);
 8003658:	6823      	ldr	r3, [r4, #0]
      hi2c->pBuffPtr++;
 800365a:	3201      	adds	r2, #1
 800365c:	6262      	str	r2, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE(hi2c);
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	f022 0201 	bic.w	r2, r2, #1
    HAL_I2C_AbortCpltCallback(hi2c);
 8003664:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8003666:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003668:	f7ff fed4 	bl	8003414 <HAL_I2C_AbortCpltCallback>
 800366c:	e780      	b.n	8003570 <I2C_ITError+0x64>
 800366e:	bf00      	nop
 8003670:	08003419 	.word	0x08003419
 8003674:	ffff0000 	.word	0xffff0000

08003678 <HAL_I2C_EV_IRQHandler>:
{
 8003678:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800367a:	6803      	ldr	r3, [r0, #0]
 800367c:	685f      	ldr	r7, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800367e:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003680:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003684:	f890 103d 	ldrb.w	r1, [r0, #61]	@ 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003688:	2a10      	cmp	r2, #16
{
 800368a:	4604      	mov	r4, r0
 800368c:	b08f      	sub	sp, #60	@ 0x3c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800368e:	b2c9      	uxtb	r1, r1
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003690:	b2d0      	uxtb	r0, r2
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003692:	d023      	beq.n	80036dc <HAL_I2C_EV_IRQHandler+0x64>
 8003694:	2840      	cmp	r0, #64	@ 0x40
 8003696:	d021      	beq.n	80036dc <HAL_I2C_EV_IRQHandler+0x64>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003698:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800369a:	2a00      	cmp	r2, #0
 800369c:	f000 80ce 	beq.w	800383c <HAL_I2C_EV_IRQHandler+0x1c4>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036a0:	695a      	ldr	r2, [r3, #20]
  uint32_t sr2itflags               = 0U;
 80036a2:	2000      	movs	r0, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036a4:	f012 0502 	ands.w	r5, r2, #2
 80036a8:	f000 808e 	beq.w	80037c8 <HAL_I2C_EV_IRQHandler+0x150>
 80036ac:	05bd      	lsls	r5, r7, #22
 80036ae:	f140 808d 	bpl.w	80037cc <HAL_I2C_EV_IRQHandler+0x154>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80036b2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80036b4:	b102      	cbz	r2, 80036b8 <HAL_I2C_EV_IRQHandler+0x40>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036b6:	6998      	ldr	r0, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036b8:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80036bc:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 80036c0:	2a28      	cmp	r2, #40	@ 0x28
 80036c2:	f000 824f 	beq.w	8003b64 <HAL_I2C_EV_IRQHandler+0x4ec>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c6:	2200      	movs	r2, #0
 80036c8:	920c      	str	r2, [sp, #48]	@ 0x30
 80036ca:	6959      	ldr	r1, [r3, #20]
 80036cc:	910c      	str	r1, [sp, #48]	@ 0x30
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	930c      	str	r3, [sp, #48]	@ 0x30
 80036d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80036d4:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
}
 80036d8:	b00f      	add	sp, #60	@ 0x3c
 80036da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036dc:	699e      	ldr	r6, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036de:	695a      	ldr	r2, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80036e0:	f012 0f01 	tst.w	r2, #1
 80036e4:	d120      	bne.n	8003728 <HAL_I2C_EV_IRQHandler+0xb0>
 80036e6:	f5b5 0f2a 	cmp.w	r5, #11141120	@ 0xaa0000
 80036ea:	d0f5      	beq.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
 80036ec:	f1b5 4f2a 	cmp.w	r5, #2852126720	@ 0xaa000000
 80036f0:	d0f2      	beq.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036f2:	f012 0508 	ands.w	r5, r2, #8
 80036f6:	f040 80ce 	bne.w	8003896 <HAL_I2C_EV_IRQHandler+0x21e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036fa:	f012 0f02 	tst.w	r2, #2
 80036fe:	d036      	beq.n	800376e <HAL_I2C_EV_IRQHandler+0xf6>
 8003700:	f417 7f00 	tst.w	r7, #512	@ 0x200
 8003704:	d033      	beq.n	800376e <HAL_I2C_EV_IRQHandler+0xf6>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003706:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800370a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 800370c:	6b26      	ldr	r6, [r4, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800370e:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 8003712:	2922      	cmp	r1, #34	@ 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003714:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003716:	f000 81fe 	beq.w	8003b16 <HAL_I2C_EV_IRQHandler+0x49e>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800371a:	950a      	str	r5, [sp, #40]	@ 0x28
 800371c:	695a      	ldr	r2, [r3, #20]
 800371e:	920a      	str	r2, [sp, #40]	@ 0x28
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	930a      	str	r3, [sp, #40]	@ 0x28
 8003724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003726:	e7d7      	b.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003728:	05bd      	lsls	r5, r7, #22
 800372a:	d520      	bpl.n	800376e <HAL_I2C_EV_IRQHandler+0xf6>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800372c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800372e:	f5b2 0f2a 	cmp.w	r2, #11141120	@ 0xaa0000
 8003732:	f000 8214 	beq.w	8003b5e <HAL_I2C_EV_IRQHandler+0x4e6>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003736:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003738:	f1b2 4f2a 	cmp.w	r2, #2852126720	@ 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800373c:	bf04      	itt	eq
 800373e:	2208      	moveq	r2, #8
 8003740:	62e2      	streq	r2, [r4, #44]	@ 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003742:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 8003746:	2a40      	cmp	r2, #64	@ 0x40
 8003748:	f000 8202 	beq.w	8003b50 <HAL_I2C_EV_IRQHandler+0x4d8>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800374c:	6922      	ldr	r2, [r4, #16]
 800374e:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 8003752:	f000 81c6 	beq.w	8003ae2 <HAL_I2C_EV_IRQHandler+0x46a>
      if (hi2c->EventCount == 0U)
 8003756:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003758:	2a00      	cmp	r2, #0
 800375a:	f040 8217 	bne.w	8003b8c <HAL_I2C_EV_IRQHandler+0x514>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800375e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003760:	11d2      	asrs	r2, r2, #7
 8003762:	f002 0206 	and.w	r2, r2, #6
 8003766:	f042 02f0 	orr.w	r2, r2, #240	@ 0xf0
 800376a:	611a      	str	r2, [r3, #16]
 800376c:	e7b4      	b.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800376e:	0776      	lsls	r6, r6, #29
 8003770:	d567      	bpl.n	8003842 <HAL_I2C_EV_IRQHandler+0x1ca>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003772:	685d      	ldr	r5, [r3, #4]
 8003774:	052d      	lsls	r5, r5, #20
 8003776:	d4af      	bmi.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003778:	0616      	lsls	r6, r2, #24
 800377a:	f002 0504 	and.w	r5, r2, #4
 800377e:	f140 8147 	bpl.w	8003a10 <HAL_I2C_EV_IRQHandler+0x398>
 8003782:	057a      	lsls	r2, r7, #21
 8003784:	f140 8144 	bpl.w	8003a10 <HAL_I2C_EV_IRQHandler+0x398>
 8003788:	2d00      	cmp	r5, #0
 800378a:	f040 8144 	bne.w	8003a16 <HAL_I2C_EV_IRQHandler+0x39e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800378e:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003792:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003794:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003798:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800379a:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800379c:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800379e:	2800      	cmp	r0, #0
 80037a0:	f040 829d 	bne.w	8003cde <HAL_I2C_EV_IRQHandler+0x666>
 80037a4:	2a21      	cmp	r2, #33	@ 0x21
 80037a6:	f000 83a4 	beq.w	8003ef2 <HAL_I2C_EV_IRQHandler+0x87a>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80037aa:	2940      	cmp	r1, #64	@ 0x40
 80037ac:	d194      	bne.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80037ae:	2a22      	cmp	r2, #34	@ 0x22
 80037b0:	d192      	bne.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
    if (hi2c->XferCount == 0U)
 80037b2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80037b4:	b292      	uxth	r2, r2
 80037b6:	2a00      	cmp	r2, #0
 80037b8:	f000 8324 	beq.w	8003e04 <HAL_I2C_EV_IRQHandler+0x78c>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037bc:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 80037c0:	2a40      	cmp	r2, #64	@ 0x40
 80037c2:	f040 810c 	bne.w	80039de <HAL_I2C_EV_IRQHandler+0x366>
 80037c6:	e12f      	b.n	8003a28 <HAL_I2C_EV_IRQHandler+0x3b0>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037c8:	06d6      	lsls	r6, r2, #27
 80037ca:	d477      	bmi.n	80038bc <HAL_I2C_EV_IRQHandler+0x244>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80037cc:	f001 01f7 	and.w	r1, r1, #247	@ 0xf7
 80037d0:	2921      	cmp	r1, #33	@ 0x21
 80037d2:	f002 0004 	and.w	r0, r2, #4
 80037d6:	f000 80cd 	beq.w	8003974 <HAL_I2C_EV_IRQHandler+0x2fc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037da:	0655      	lsls	r5, r2, #25
 80037dc:	f140 8109 	bpl.w	80039f2 <HAL_I2C_EV_IRQHandler+0x37a>
 80037e0:	0579      	lsls	r1, r7, #21
 80037e2:	f140 8106 	bpl.w	80039f2 <HAL_I2C_EV_IRQHandler+0x37a>
 80037e6:	2800      	cmp	r0, #0
 80037e8:	f040 8106 	bne.w	80039f8 <HAL_I2C_EV_IRQHandler+0x380>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037ec:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
  if (hi2c->XferCount != 0U)
 80037f0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80037f2:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037f4:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 80037f6:	2a00      	cmp	r2, #0
 80037f8:	f43f af6e 	beq.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037fc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8003802:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr++;
 8003804:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8003806:	3b01      	subs	r3, #1
 8003808:	b29b      	uxth	r3, r3
 800380a:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800380c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr++;
 800380e:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003810:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8003812:	6262      	str	r2, [r4, #36]	@ 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003814:	2b00      	cmp	r3, #0
 8003816:	f47f af5f 	bne.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
 800381a:	292a      	cmp	r1, #42	@ 0x2a
 800381c:	f47f af5c 	bne.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003820:	6822      	ldr	r2, [r4, #0]
 8003822:	6853      	ldr	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003824:	2522      	movs	r5, #34	@ 0x22
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003826:	2128      	movs	r1, #40	@ 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003828:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800382c:	6053      	str	r3, [r2, #4]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800382e:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003830:	6325      	str	r5, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003832:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003836:	f7ff fd7f 	bl	8003338 <HAL_I2C_SlaveRxCpltCallback>
 800383a:	e74d      	b.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800383c:	6998      	ldr	r0, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800383e:	695a      	ldr	r2, [r3, #20]
 8003840:	e730      	b.n	80036a4 <HAL_I2C_EV_IRQHandler+0x2c>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003842:	6859      	ldr	r1, [r3, #4]
 8003844:	050d      	lsls	r5, r1, #20
 8003846:	f53f af47 	bmi.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800384a:	0650      	lsls	r0, r2, #25
 800384c:	f002 0104 	and.w	r1, r2, #4
 8003850:	f100 80f0 	bmi.w	8003a34 <HAL_I2C_EV_IRQHandler+0x3bc>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003854:	2900      	cmp	r1, #0
 8003856:	f43f af3f 	beq.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
 800385a:	05be      	lsls	r6, r7, #22
 800385c:	f57f af3c 	bpl.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003860:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  if (hi2c->XferCount == 4U)
 8003862:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003864:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  if (hi2c->XferCount == 4U)
 8003866:	b292      	uxth	r2, r2
 8003868:	2a04      	cmp	r2, #4
 800386a:	f000 8206 	beq.w	8003c7a <HAL_I2C_EV_IRQHandler+0x602>
  else if (hi2c->XferCount == 3U)
 800386e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003870:	b292      	uxth	r2, r2
 8003872:	2a03      	cmp	r2, #3
 8003874:	f000 8245 	beq.w	8003d02 <HAL_I2C_EV_IRQHandler+0x68a>
  else if (hi2c->XferCount == 2U)
 8003878:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800387a:	b292      	uxth	r2, r2
 800387c:	2a02      	cmp	r2, #2
 800387e:	f000 8276 	beq.w	8003d6e <HAL_I2C_EV_IRQHandler+0x6f6>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 8003886:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr++;
 8003888:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 800388a:	3b01      	subs	r3, #1
    hi2c->pBuffPtr++;
 800388c:	3201      	adds	r2, #1
    hi2c->XferCount--;
 800388e:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8003890:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8003892:	8563      	strh	r3, [r4, #42]	@ 0x2a
      }
 8003894:	e720      	b.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003896:	05bd      	lsls	r5, r7, #22
 8003898:	f57f af69 	bpl.w	800376e <HAL_I2C_EV_IRQHandler+0xf6>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800389c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800389e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80038a0:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80038a2:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80038a4:	2900      	cmp	r1, #0
 80038a6:	f000 812d 	beq.w	8003b04 <HAL_I2C_EV_IRQHandler+0x48c>
 80038aa:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 80038ac:	2a00      	cmp	r2, #0
 80038ae:	f000 8129 	beq.w	8003b04 <HAL_I2C_EV_IRQHandler+0x48c>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038b8:	605a      	str	r2, [r3, #4]
 80038ba:	e70d      	b.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038bc:	05b8      	lsls	r0, r7, #22
 80038be:	d585      	bpl.n	80037cc <HAL_I2C_EV_IRQHandler+0x154>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038c0:	f894 603d 	ldrb.w	r6, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038c4:	685a      	ldr	r2, [r3, #4]
 80038c6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038ca:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80038cc:	950d      	str	r5, [sp, #52]	@ 0x34
 80038ce:	695a      	ldr	r2, [r3, #20]
 80038d0:	920d      	str	r2, [sp, #52]	@ 0x34
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	f042 0201 	orr.w	r2, r2, #1
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038e2:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038e4:	685a      	ldr	r2, [r3, #4]
 80038e6:	0511      	lsls	r1, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038e8:	b2f6      	uxtb	r6, r6
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80038ea:	f100 80c9 	bmi.w	8003a80 <HAL_I2C_EV_IRQHandler+0x408>
  if (hi2c->XferCount != 0U)
 80038ee:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	b313      	cbz	r3, 800393a <HAL_I2C_EV_IRQHandler+0x2c2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	695a      	ldr	r2, [r3, #20]
 80038f8:	0752      	lsls	r2, r2, #29
 80038fa:	d50a      	bpl.n	8003912 <HAL_I2C_EV_IRQHandler+0x29a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038fc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8003902:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8003904:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003906:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8003908:	1c59      	adds	r1, r3, #1
      hi2c->XferCount--;
 800390a:	b292      	uxth	r2, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800390c:	6823      	ldr	r3, [r4, #0]
      hi2c->pBuffPtr++;
 800390e:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003910:	8562      	strh	r2, [r4, #42]	@ 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003912:	695a      	ldr	r2, [r3, #20]
 8003914:	0657      	lsls	r7, r2, #25
 8003916:	d509      	bpl.n	800392c <HAL_I2C_EV_IRQHandler+0x2b4>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003918:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 800391e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8003920:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003922:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8003924:	3201      	adds	r2, #1
      hi2c->XferCount--;
 8003926:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8003928:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800392a:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 800392c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800392e:	b29b      	uxth	r3, r3
 8003930:	b11b      	cbz	r3, 800393a <HAL_I2C_EV_IRQHandler+0x2c2>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003932:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003934:	f043 0304 	orr.w	r3, r3, #4
 8003938:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800393a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800393c:	2b00      	cmp	r3, #0
 800393e:	f040 80ca 	bne.w	8003ad6 <HAL_I2C_EV_IRQHandler+0x45e>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003942:	2e2a      	cmp	r6, #42	@ 0x2a
 8003944:	f000 8155 	beq.w	8003bf2 <HAL_I2C_EV_IRQHandler+0x57a>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003948:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 800394c:	2b28      	cmp	r3, #40	@ 0x28
 800394e:	f000 8160 	beq.w	8003c12 <HAL_I2C_EV_IRQHandler+0x59a>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003952:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003954:	2b22      	cmp	r3, #34	@ 0x22
 8003956:	d002      	beq.n	800395e <HAL_I2C_EV_IRQHandler+0x2e6>
 8003958:	2e22      	cmp	r6, #34	@ 0x22
 800395a:	f47f aebd 	bne.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
        hi2c->PreviousState = I2C_STATE_NONE;
 800395e:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003960:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8003962:	6323      	str	r3, [r4, #48]	@ 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003964:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8003966:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800396a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800396e:	f7ff fce3 	bl	8003338 <HAL_I2C_SlaveRxCpltCallback>
 8003972:	e6b1      	b.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003974:	0615      	lsls	r5, r2, #24
 8003976:	d527      	bpl.n	80039c8 <HAL_I2C_EV_IRQHandler+0x350>
 8003978:	057a      	lsls	r2, r7, #21
 800397a:	d525      	bpl.n	80039c8 <HAL_I2C_EV_IRQHandler+0x350>
 800397c:	bb38      	cbnz	r0, 80039ce <HAL_I2C_EV_IRQHandler+0x356>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800397e:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
  if (hi2c->XferCount != 0U)
 8003982:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003984:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003986:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8003988:	2a00      	cmp	r2, #0
 800398a:	f43f aea5 	beq.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800398e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003990:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003994:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 8003996:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8003998:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800399a:	3a01      	subs	r2, #1
 800399c:	b292      	uxth	r2, r2
 800399e:	8562      	strh	r2, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80039a0:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80039a2:	b292      	uxth	r2, r2
 80039a4:	2a00      	cmp	r2, #0
 80039a6:	f47f ae97 	bne.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
 80039aa:	2829      	cmp	r0, #41	@ 0x29
 80039ac:	f47f ae94 	bne.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039b0:	685a      	ldr	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039b2:	2528      	movs	r5, #40	@ 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80039b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039b8:	605a      	str	r2, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039ba:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80039bc:	6321      	str	r1, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80039be:	f884 503d 	strb.w	r5, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039c2:	f7ff fcb7 	bl	8003334 <HAL_I2C_SlaveTxCpltCallback>
 80039c6:	e687      	b.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039c8:	2800      	cmp	r0, #0
 80039ca:	f43f ae85 	beq.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
 80039ce:	05be      	lsls	r6, r7, #22
 80039d0:	f57f ae82 	bpl.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
  if (hi2c->XferCount != 0U)
 80039d4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80039d6:	b292      	uxth	r2, r2
 80039d8:	2a00      	cmp	r2, #0
 80039da:	f43f ae7d 	beq.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039de:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80039e0:	f812 1b01 	ldrb.w	r1, [r2], #1
 80039e4:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 80039e6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr++;
 80039e8:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80039f0:	e672      	b.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039f2:	2800      	cmp	r0, #0
 80039f4:	f43f ae70 	beq.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
 80039f8:	05ba      	lsls	r2, r7, #22
 80039fa:	f57f ae6d 	bpl.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
  if (hi2c->XferCount != 0U)
 80039fe:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003a00:	b292      	uxth	r2, r2
 8003a02:	2a00      	cmp	r2, #0
 8003a04:	f43f ae68 	beq.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a08:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	7013      	strb	r3, [r2, #0]
 8003a0e:	e73a      	b.n	8003886 <HAL_I2C_EV_IRQHandler+0x20e>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a10:	2d00      	cmp	r5, #0
 8003a12:	f43f ae61 	beq.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
 8003a16:	05be      	lsls	r6, r7, #22
 8003a18:	f57f ae5e 	bpl.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003a1c:	2921      	cmp	r1, #33	@ 0x21
 8003a1e:	f000 8133 	beq.w	8003c88 <HAL_I2C_EV_IRQHandler+0x610>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003a22:	2840      	cmp	r0, #64	@ 0x40
 8003a24:	f47f ae58 	bne.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a28:	4620      	mov	r0, r4
}
 8003a2a:	b00f      	add	sp, #60	@ 0x3c
 8003a2c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003a30:	f7ff bc8a 	b.w	8003348 <I2C_MemoryTransmit_TXE_BTF>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a34:	057a      	lsls	r2, r7, #21
 8003a36:	f57f af0d 	bpl.w	8003854 <HAL_I2C_EV_IRQHandler+0x1dc>
 8003a3a:	2900      	cmp	r1, #0
 8003a3c:	f47f af0d 	bne.w	800385a <HAL_I2C_EV_IRQHandler+0x1e2>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a40:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8003a44:	2a22      	cmp	r2, #34	@ 0x22
 8003a46:	f47f ae47 	bne.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
    CurrentXferOptions = hi2c->XferOptions;
 8003a4a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    tmp = hi2c->XferCount;
 8003a4c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003a4e:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8003a50:	2a03      	cmp	r2, #3
 8003a52:	f240 8217 	bls.w	8003e84 <HAL_I2C_EV_IRQHandler+0x80c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a56:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8003a5c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8003a5e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 8003a66:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003a68:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8003a6a:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 8003a6c:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 8003a6e:	6262      	str	r2, [r4, #36]	@ 0x24
      if (hi2c->XferCount == (uint16_t)3)
 8003a70:	f47f ae32 	bne.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003a74:	6822      	ldr	r2, [r4, #0]
 8003a76:	6853      	ldr	r3, [r2, #4]
 8003a78:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a7c:	6053      	str	r3, [r2, #4]
 8003a7e:	e62b      	b.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a80:	f006 02f7 	and.w	r2, r6, #247	@ 0xf7
 8003a84:	2a22      	cmp	r2, #34	@ 0x22
 8003a86:	f000 8093 	beq.w	8003bb0 <HAL_I2C_EV_IRQHandler+0x538>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003a8a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8003a8c:	6802      	ldr	r2, [r0, #0]
 8003a8e:	6852      	ldr	r2, [r2, #4]
 8003a90:	b292      	uxth	r2, r2
 8003a92:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 8003a94:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003a96:	b292      	uxth	r2, r2
 8003a98:	b11a      	cbz	r2, 8003aa2 <HAL_I2C_EV_IRQHandler+0x42a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a9a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003a9c:	f042 0204 	orr.w	r2, r2, #4
 8003aa0:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003aa8:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003aaa:	f7fe fcdd 	bl	8002468 <HAL_DMA_GetState>
 8003aae:	2801      	cmp	r0, #1
 8003ab0:	d008      	beq.n	8003ac4 <HAL_I2C_EV_IRQHandler+0x44c>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ab2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8003ab4:	4b9a      	ldr	r3, [pc, #616]	@ (8003d20 <HAL_I2C_EV_IRQHandler+0x6a8>)
 8003ab6:	6503      	str	r3, [r0, #80]	@ 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ab8:	f7fe fbee 	bl	8002298 <HAL_DMA_Abort_IT>
 8003abc:	b110      	cbz	r0, 8003ac4 <HAL_I2C_EV_IRQHandler+0x44c>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003abe:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8003ac0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003ac2:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 8003ac4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f47f af13 	bne.w	80038f4 <HAL_I2C_EV_IRQHandler+0x27c>
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ace:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f43f af39 	beq.w	8003948 <HAL_I2C_EV_IRQHandler+0x2d0>
    I2C_ITError(hi2c);
 8003ad6:	4620      	mov	r0, r4
}
 8003ad8:	b00f      	add	sp, #60	@ 0x3c
 8003ada:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 8003ade:	f7ff bd15 	b.w	800350c <I2C_ITError>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ae2:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8003ae6:	2a21      	cmp	r2, #33	@ 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003ae8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003aea:	bf16      	itet	ne
 8003aec:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003af0:	f002 02fe 	andeq.w	r2, r2, #254	@ 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003af4:	b2d2      	uxtbne	r2, r2
 8003af6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003af8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8003afa:	b11a      	cbz	r2, 8003b04 <HAL_I2C_EV_IRQHandler+0x48c>
 8003afc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003afe:	2a00      	cmp	r2, #0
 8003b00:	f47f aed7 	bne.w	80038b2 <HAL_I2C_EV_IRQHandler+0x23a>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003b04:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003b06:	2a00      	cmp	r2, #0
 8003b08:	f43f ade6 	beq.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
 8003b0c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b0e:	2a00      	cmp	r2, #0
 8003b10:	f47f aecf 	bne.w	80038b2 <HAL_I2C_EV_IRQHandler+0x23a>
 8003b14:	e5e0      	b.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003b16:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8003b18:	b911      	cbnz	r1, 8003b20 <HAL_I2C_EV_IRQHandler+0x4a8>
 8003b1a:	2a40      	cmp	r2, #64	@ 0x40
 8003b1c:	f000 80d8 	beq.w	8003cd0 <HAL_I2C_EV_IRQHandler+0x658>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003b20:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003b22:	b922      	cbnz	r2, 8003b2e <HAL_I2C_EV_IRQHandler+0x4b6>
 8003b24:	6921      	ldr	r1, [r4, #16]
 8003b26:	f5b1 4f40 	cmp.w	r1, #49152	@ 0xc000
 8003b2a:	f000 80dc 	beq.w	8003ce6 <HAL_I2C_EV_IRQHandler+0x66e>
      if (hi2c->XferCount == 0U)
 8003b2e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003b30:	b292      	uxth	r2, r2
 8003b32:	2a00      	cmp	r2, #0
 8003b34:	d17a      	bne.n	8003c2c <HAL_I2C_EV_IRQHandler+0x5b4>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b36:	9203      	str	r2, [sp, #12]
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	9203      	str	r2, [sp, #12]
 8003b3c:	699a      	ldr	r2, [r3, #24]
 8003b3e:	9203      	str	r2, [sp, #12]
 8003b40:	9a03      	ldr	r2, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b48:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	6523      	str	r3, [r4, #80]	@ 0x50
 8003b4e:	e5c3      	b.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
    if (hi2c->EventCount == 0U)
 8003b50:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003b52:	bb3a      	cbnz	r2, 8003ba4 <HAL_I2C_EV_IRQHandler+0x52c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003b54:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003b56:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003b5a:	611a      	str	r2, [r3, #16]
 8003b5c:	e5bc      	b.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003b5e:	2201      	movs	r2, #1
 8003b60:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8003b62:	e5ee      	b.n	8003742 <HAL_I2C_EV_IRQHandler+0xca>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b6a:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003b6c:	0607      	lsls	r7, r0, #24
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003b6e:	f080 0104 	eor.w	r1, r0, #4
    __HAL_UNLOCK(hi2c);
 8003b72:	f04f 0300 	mov.w	r3, #0
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8003b76:	bf54      	ite	pl
 8003b78:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003b7a:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8003b7c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003b80:	f3c1 0180 	ubfx	r1, r1, #2, #1
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003b84:	4620      	mov	r0, r4
 8003b86:	f7ff fbd9 	bl	800333c <HAL_I2C_AddrCallback>
 8003b8a:	e5a5      	b.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
      else if (hi2c->EventCount == 1U)
 8003b8c:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003b8e:	2a01      	cmp	r2, #1
 8003b90:	f47f ada2 	bne.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003b94:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003b96:	11d2      	asrs	r2, r2, #7
 8003b98:	f002 0206 	and.w	r2, r2, #6
 8003b9c:	f042 02f1 	orr.w	r2, r2, #241	@ 0xf1
 8003ba0:	611a      	str	r2, [r3, #16]
 8003ba2:	e599      	b.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003ba4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003ba6:	f042 0201 	orr.w	r2, r2, #1
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	611a      	str	r2, [r3, #16]
 8003bae:	e593      	b.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003bb0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003bb2:	6802      	ldr	r2, [r0, #0]
 8003bb4:	6852      	ldr	r2, [r2, #4]
 8003bb6:	b292      	uxth	r2, r2
 8003bb8:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 8003bba:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003bbc:	b292      	uxth	r2, r2
 8003bbe:	b11a      	cbz	r2, 8003bc8 <HAL_I2C_EV_IRQHandler+0x550>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bc0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003bc2:	f042 0204 	orr.w	r2, r2, #4
 8003bc6:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bce:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bd0:	f7fe fc4a 	bl	8002468 <HAL_DMA_GetState>
 8003bd4:	2801      	cmp	r0, #1
 8003bd6:	f43f ae8a 	beq.w	80038ee <HAL_I2C_EV_IRQHandler+0x276>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003bda:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003bdc:	4b50      	ldr	r3, [pc, #320]	@ (8003d20 <HAL_I2C_EV_IRQHandler+0x6a8>)
 8003bde:	6503      	str	r3, [r0, #80]	@ 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003be0:	f7fe fb5a 	bl	8002298 <HAL_DMA_Abort_IT>
 8003be4:	2800      	cmp	r0, #0
 8003be6:	f43f ae82 	beq.w	80038ee <HAL_I2C_EV_IRQHandler+0x276>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bea:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003bec:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003bee:	4798      	blx	r3
 8003bf0:	e67d      	b.n	80038ee <HAL_I2C_EV_IRQHandler+0x276>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003bf2:	2228      	movs	r2, #40	@ 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 8003bf4:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003bf6:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003bf8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003bfc:	f7ff fb9c 	bl	8003338 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003c00:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8003c04:	2b28      	cmp	r3, #40	@ 0x28
 8003c06:	d004      	beq.n	8003c12 <HAL_I2C_EV_IRQHandler+0x59a>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003c08:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003c0a:	2b22      	cmp	r3, #34	@ 0x22
 8003c0c:	f47f ad64 	bne.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
 8003c10:	e6a5      	b.n	800395e <HAL_I2C_EV_IRQHandler+0x2e6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c12:	2300      	movs	r3, #0
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c14:	4943      	ldr	r1, [pc, #268]	@ (8003d24 <HAL_I2C_EV_IRQHandler+0x6ac>)
 8003c16:	62e1      	str	r1, [r4, #44]	@ 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8003c18:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8003c1a:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 8003c1c:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8003c1e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c22:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003c26:	f7ff fb8b 	bl	8003340 <HAL_I2C_ListenCpltCallback>
 8003c2a:	e555      	b.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
      else if (hi2c->XferCount == 1U)
 8003c2c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003c2e:	b292      	uxth	r2, r2
 8003c30:	2a01      	cmp	r2, #1
 8003c32:	d07b      	beq.n	8003d2c <HAL_I2C_EV_IRQHandler+0x6b4>
      else if (hi2c->XferCount == 2U)
 8003c34:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003c36:	b292      	uxth	r2, r2
 8003c38:	2a02      	cmp	r2, #2
 8003c3a:	f000 80e8 	beq.w	8003e0e <HAL_I2C_EV_IRQHandler+0x796>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c44:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	0512      	lsls	r2, r2, #20
 8003c4a:	d50e      	bpl.n	8003c6a <HAL_I2C_EV_IRQHandler+0x5f2>
 8003c4c:	2820      	cmp	r0, #32
 8003c4e:	f200 81a7 	bhi.w	8003fa0 <HAL_I2C_EV_IRQHandler+0x928>
 8003c52:	2807      	cmp	r0, #7
 8003c54:	f240 81a0 	bls.w	8003f98 <HAL_I2C_EV_IRQHandler+0x920>
 8003c58:	4a33      	ldr	r2, [pc, #204]	@ (8003d28 <HAL_I2C_EV_IRQHandler+0x6b0>)
 8003c5a:	3808      	subs	r0, #8
 8003c5c:	40c2      	lsrs	r2, r0
 8003c5e:	07d7      	lsls	r7, r2, #31
 8003c60:	d503      	bpl.n	8003c6a <HAL_I2C_EV_IRQHandler+0x5f2>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c68:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c6e:	695a      	ldr	r2, [r3, #20]
 8003c70:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c78:	e767      	b.n	8003b4a <HAL_I2C_EV_IRQHandler+0x4d2>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c80:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c82:	691b      	ldr	r3, [r3, #16]
 8003c84:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 8003c86:	e5fe      	b.n	8003886 <HAL_I2C_EV_IRQHandler+0x20e>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c88:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c8a:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8003c8e:	2a21      	cmp	r2, #33	@ 0x21
 8003c90:	f47f ad22 	bne.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
    if (hi2c->XferCount != 0U)
 8003c94:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003c96:	b292      	uxth	r2, r2
 8003c98:	2a00      	cmp	r2, #0
 8003c9a:	f47f aea0 	bne.w	80039de <HAL_I2C_EV_IRQHandler+0x366>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c9e:	2908      	cmp	r1, #8
 8003ca0:	f000 80d8 	beq.w	8003e54 <HAL_I2C_EV_IRQHandler+0x7dc>
 8003ca4:	2920      	cmp	r1, #32
 8003ca6:	f000 80d5 	beq.w	8003e54 <HAL_I2C_EV_IRQHandler+0x7dc>
 8003caa:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 8003cae:	f000 80d1 	beq.w	8003e54 <HAL_I2C_EV_IRQHandler+0x7dc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cb2:	6859      	ldr	r1, [r3, #4]
 8003cb4:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8003cb8:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003cba:	2011      	movs	r0, #17
        hi2c->State = HAL_I2C_STATE_READY;
 8003cbc:	2320      	movs	r3, #32
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003cbe:	6320      	str	r0, [r4, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc0:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003cc4:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 8003cc6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003cca:	f7fd fe8b 	bl	80019e4 <HAL_I2C_MasterTxCpltCallback>
 8003cce:	e503      	b.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cd0:	9101      	str	r1, [sp, #4]
 8003cd2:	695a      	ldr	r2, [r3, #20]
 8003cd4:	9201      	str	r2, [sp, #4]
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	9301      	str	r3, [sp, #4]
 8003cda:	9b01      	ldr	r3, [sp, #4]
 8003cdc:	e4fc      	b.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003cde:	2a21      	cmp	r2, #33	@ 0x21
 8003ce0:	f47f ad63 	bne.w	80037aa <HAL_I2C_EV_IRQHandler+0x132>
 8003ce4:	e565      	b.n	80037b2 <HAL_I2C_EV_IRQHandler+0x13a>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce6:	9202      	str	r2, [sp, #8]
 8003ce8:	695a      	ldr	r2, [r3, #20]
 8003cea:	9202      	str	r2, [sp, #8]
 8003cec:	699a      	ldr	r2, [r3, #24]
 8003cee:	9202      	str	r2, [sp, #8]
 8003cf0:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cf8:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003cfa:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	6523      	str	r3, [r4, #80]	@ 0x50
 8003d00:	e4ea      	b.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d02:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003d04:	2804      	cmp	r0, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003d06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d0a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003d0c:	f43f adb9 	beq.w	8003882 <HAL_I2C_EV_IRQHandler+0x20a>
 8003d10:	2802      	cmp	r0, #2
 8003d12:	f43f adb6 	beq.w	8003882 <HAL_I2C_EV_IRQHandler+0x20a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	e5b0      	b.n	8003882 <HAL_I2C_EV_IRQHandler+0x20a>
 8003d20:	08003419 	.word	0x08003419
 8003d24:	ffff0000 	.word	0xffff0000
 8003d28:	01000101 	.word	0x01000101
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003d2c:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 8003d30:	f000 811b 	beq.w	8003f6a <HAL_I2C_EV_IRQHandler+0x8f2>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003d34:	2808      	cmp	r0, #8
 8003d36:	f000 80f4 	beq.w	8003f22 <HAL_I2C_EV_IRQHandler+0x8aa>
 8003d3a:	2820      	cmp	r0, #32
 8003d3c:	f000 80f1 	beq.w	8003f22 <HAL_I2C_EV_IRQHandler+0x8aa>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003d40:	2e12      	cmp	r6, #18
 8003d42:	f000 814c 	beq.w	8003fde <HAL_I2C_EV_IRQHandler+0x966>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003d46:	2810      	cmp	r0, #16
 8003d48:	f200 814b 	bhi.w	8003fe2 <HAL_I2C_EV_IRQHandler+0x96a>
 8003d4c:	4a9a      	ldr	r2, [pc, #616]	@ (8003fb8 <HAL_I2C_EV_IRQHandler+0x940>)
 8003d4e:	4102      	asrs	r2, r0
 8003d50:	07d2      	lsls	r2, r2, #31
 8003d52:	f100 8146 	bmi.w	8003fe2 <HAL_I2C_EV_IRQHandler+0x96a>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003d5c:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5e:	2200      	movs	r2, #0
 8003d60:	9206      	str	r2, [sp, #24]
 8003d62:	695a      	ldr	r2, [r3, #20]
 8003d64:	9206      	str	r2, [sp, #24]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	9306      	str	r3, [sp, #24]
 8003d6a:	9b06      	ldr	r3, [sp, #24]
 8003d6c:	e6ed      	b.n	8003b4a <HAL_I2C_EV_IRQHandler+0x4d2>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003d6e:	1e42      	subs	r2, r0, #1
 8003d70:	2a0f      	cmp	r2, #15
 8003d72:	d809      	bhi.n	8003d88 <HAL_I2C_EV_IRQHandler+0x710>
 8003d74:	e8df f002 	tbb	[pc, r2]
 8003d78:	3c083c41 	.word	0x3c083c41
 8003d7c:	08080808 	.word	0x08080808
 8003d80:	08080808 	.word	0x08080808
 8003d84:	41080808 	.word	0x41080808
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d8e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 8003d94:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr++;
 8003d96:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d9e:	6823      	ldr	r3, [r4, #0]
    hi2c->pBuffPtr++;
 8003da0:	1c51      	adds	r1, r2, #1
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da2:	691b      	ldr	r3, [r3, #16]
    hi2c->pBuffPtr++;
 8003da4:	6261      	str	r1, [r4, #36]	@ 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da6:	7053      	strb	r3, [r2, #1]
    hi2c->XferCount--;
 8003da8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003daa:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 8003dac:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	8563      	strh	r3, [r4, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003db4:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 8003db6:	3201      	adds	r2, #1
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003db8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    hi2c->pBuffPtr++;
 8003dbc:	6262      	str	r2, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003dbe:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003dc0:	2320      	movs	r3, #32
 8003dc2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dc6:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003dca:	2b40      	cmp	r3, #64	@ 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003dd4:	f000 80e9 	beq.w	8003faa <HAL_I2C_EV_IRQHandler+0x932>
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003dd8:	2808      	cmp	r0, #8
 8003dda:	f000 80da 	beq.w	8003f92 <HAL_I2C_EV_IRQHandler+0x91a>
 8003dde:	2820      	cmp	r0, #32
 8003de0:	f000 80d7 	beq.w	8003f92 <HAL_I2C_EV_IRQHandler+0x91a>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003de4:	2312      	movs	r3, #18
 8003de6:	6323      	str	r3, [r4, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003de8:	4620      	mov	r0, r4
 8003dea:	f7ff faa1 	bl	8003330 <HAL_I2C_MasterRxCpltCallback>
 8003dee:	e473      	b.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003df6:	601a      	str	r2, [r3, #0]
 8003df8:	e7ca      	b.n	8003d90 <HAL_I2C_EV_IRQHandler+0x718>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	e7c5      	b.n	8003d90 <HAL_I2C_EV_IRQHandler+0x718>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003e04:	685a      	ldr	r2, [r3, #4]
 8003e06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e0a:	605a      	str	r2, [r3, #4]
 8003e0c:	e464      	b.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003e0e:	2810      	cmp	r0, #16
 8003e10:	f200 8097 	bhi.w	8003f42 <HAL_I2C_EV_IRQHandler+0x8ca>
 8003e14:	4a69      	ldr	r2, [pc, #420]	@ (8003fbc <HAL_I2C_EV_IRQHandler+0x944>)
 8003e16:	40c2      	lsrs	r2, r0
 8003e18:	07d7      	lsls	r7, r2, #31
 8003e1a:	f140 8092 	bpl.w	8003f42 <HAL_I2C_EV_IRQHandler+0x8ca>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e24:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	0515      	lsls	r5, r2, #20
 8003e2a:	d50b      	bpl.n	8003e44 <HAL_I2C_EV_IRQHandler+0x7cc>
 8003e2c:	2807      	cmp	r0, #7
 8003e2e:	f240 80dd 	bls.w	8003fec <HAL_I2C_EV_IRQHandler+0x974>
 8003e32:	4a63      	ldr	r2, [pc, #396]	@ (8003fc0 <HAL_I2C_EV_IRQHandler+0x948>)
 8003e34:	3808      	subs	r0, #8
 8003e36:	40c2      	lsrs	r2, r0
 8003e38:	07d1      	lsls	r1, r2, #31
 8003e3a:	d503      	bpl.n	8003e44 <HAL_I2C_EV_IRQHandler+0x7cc>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003e3c:	685a      	ldr	r2, [r3, #4]
 8003e3e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003e42:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e44:	2200      	movs	r2, #0
 8003e46:	9208      	str	r2, [sp, #32]
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	9208      	str	r2, [sp, #32]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	9308      	str	r3, [sp, #32]
 8003e50:	9b08      	ldr	r3, [sp, #32]
 8003e52:	e67a      	b.n	8003b4a <HAL_I2C_EV_IRQHandler+0x4d2>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e54:	6859      	ldr	r1, [r3, #4]
 8003e56:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8003e5a:	6059      	str	r1, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5c:	6819      	ldr	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e5e:	2200      	movs	r2, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003e60:	2020      	movs	r0, #32
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e62:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 8003e66:	6019      	str	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003e68:	6322      	str	r2, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003e6a:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e6e:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e72:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e76:	2b40      	cmp	r3, #64	@ 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003e78:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e7a:	f47f af26 	bne.w	8003cca <HAL_I2C_EV_IRQHandler+0x652>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003e7e:	f7ff fa61 	bl	8003344 <HAL_I2C_MemTxCpltCallback>
 8003e82:	e429      	b.n	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003e84:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8003e86:	2d02      	cmp	r5, #2
 8003e88:	d0bc      	beq.n	8003e04 <HAL_I2C_EV_IRQHandler+0x78c>
 8003e8a:	2a01      	cmp	r2, #1
 8003e8c:	d8ba      	bhi.n	8003e04 <HAL_I2C_EV_IRQHandler+0x78c>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e8e:	4a4d      	ldr	r2, [pc, #308]	@ (8003fc4 <HAL_I2C_EV_IRQHandler+0x94c>)
  __IO uint32_t count = 0U;
 8003e90:	910b      	str	r1, [sp, #44]	@ 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003e92:	6812      	ldr	r2, [r2, #0]
 8003e94:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8003e98:	fbb2 f2f1 	udiv	r2, r2, r1
 8003e9c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003ea0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8003ea2:	e004      	b.n	8003eae <HAL_I2C_EV_IRQHandler+0x836>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	f412 7200 	ands.w	r2, r2, #512	@ 0x200
 8003eaa:	f000 80a3 	beq.w	8003ff4 <HAL_I2C_EV_IRQHandler+0x97c>
    count--;
 8003eae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003eb0:	3a01      	subs	r2, #1
 8003eb2:	920b      	str	r2, [sp, #44]	@ 0x2c
    if (count == 0U)
 8003eb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003eb6:	2900      	cmp	r1, #0
 8003eb8:	d1f4      	bne.n	8003ea4 <HAL_I2C_EV_IRQHandler+0x82c>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003eba:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ebc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ebe:	f042 0220 	orr.w	r2, r2, #32
 8003ec2:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003eca:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 8003ed0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->pBuffPtr++;
 8003ed2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8003ed4:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 8003ed6:	3201      	adds	r2, #1
        hi2c->XferCount--;
 8003ed8:	b29b      	uxth	r3, r3
        hi2c->State = HAL_I2C_STATE_READY;
 8003eda:	2020      	movs	r0, #32
        hi2c->XferCount--;
 8003edc:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->pBuffPtr++;
 8003ede:	6262      	str	r2, [r4, #36]	@ 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 8003ee0:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
        HAL_I2C_ErrorCallback(hi2c);
 8003ee4:	4620      	mov	r0, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ee6:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003eea:	f7ff fa91 	bl	8003410 <HAL_I2C_ErrorCallback>
 8003eee:	f7ff bbf3 	b.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ef2:	2d08      	cmp	r5, #8
 8003ef4:	d0ae      	beq.n	8003e54 <HAL_I2C_EV_IRQHandler+0x7dc>
 8003ef6:	2d20      	cmp	r5, #32
 8003ef8:	d0ac      	beq.n	8003e54 <HAL_I2C_EV_IRQHandler+0x7dc>
 8003efa:	f515 3f80 	cmn.w	r5, #65536	@ 0x10000
 8003efe:	d0a9      	beq.n	8003e54 <HAL_I2C_EV_IRQHandler+0x7dc>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8003f06:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f08:	2011      	movs	r0, #17
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f0a:	2100      	movs	r1, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8003f0c:	2320      	movs	r3, #32
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003f0e:	6320      	str	r0, [r4, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f10:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f14:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8003f16:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003f1a:	f7fd fd63 	bl	80019e4 <HAL_I2C_MasterTxCpltCallback>
 8003f1e:	f7ff bbdb 	b.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f22:	681a      	ldr	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f24:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f2a:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f2c:	9107      	str	r1, [sp, #28]
 8003f2e:	695a      	ldr	r2, [r3, #20]
 8003f30:	9207      	str	r2, [sp, #28]
 8003f32:	699a      	ldr	r2, [r3, #24]
 8003f34:	9207      	str	r2, [sp, #28]
 8003f36:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	e603      	b.n	8003b4a <HAL_I2C_EV_IRQHandler+0x4d2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f48:	601a      	str	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f50:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	0516      	lsls	r6, r2, #20
 8003f56:	f57f af75 	bpl.w	8003e44 <HAL_I2C_EV_IRQHandler+0x7cc>
 8003f5a:	2820      	cmp	r0, #32
 8003f5c:	f67f af66 	bls.w	8003e2c <HAL_I2C_EV_IRQHandler+0x7b4>
 8003f60:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 8003f64:	f47f af6e 	bne.w	8003e44 <HAL_I2C_EV_IRQHandler+0x7cc>
 8003f68:	e768      	b.n	8003e3c <HAL_I2C_EV_IRQHandler+0x7c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f70:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 8003f78:	d026      	beq.n	8003fc8 <HAL_I2C_EV_IRQHandler+0x950>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7a:	681a      	ldr	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7c:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f82:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f84:	9104      	str	r1, [sp, #16]
 8003f86:	695a      	ldr	r2, [r3, #20]
 8003f88:	9204      	str	r2, [sp, #16]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	9304      	str	r3, [sp, #16]
 8003f8e:	9b04      	ldr	r3, [sp, #16]
 8003f90:	e5db      	b.n	8003b4a <HAL_I2C_EV_IRQHandler+0x4d2>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003f92:	2300      	movs	r3, #0
 8003f94:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f96:	e727      	b.n	8003de8 <HAL_I2C_EV_IRQHandler+0x770>
 8003f98:	2801      	cmp	r0, #1
 8003f9a:	f47f ae66 	bne.w	8003c6a <HAL_I2C_EV_IRQHandler+0x5f2>
 8003f9e:	e660      	b.n	8003c62 <HAL_I2C_EV_IRQHandler+0x5ea>
 8003fa0:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 8003fa4:	f47f ae61 	bne.w	8003c6a <HAL_I2C_EV_IRQHandler+0x5f2>
 8003fa8:	e65b      	b.n	8003c62 <HAL_I2C_EV_IRQHandler+0x5ea>
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003faa:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 8003fac:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003fae:	f7fd fd0d 	bl	80019cc <HAL_I2C_MemRxCpltCallback>
 8003fb2:	f7ff bb91 	b.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>
 8003fb6:	bf00      	nop
 8003fb8:	fffeffeb 	.word	0xfffeffeb
 8003fbc:	00010014 	.word	0x00010014
 8003fc0:	01000101 	.word	0x01000101
 8003fc4:	20000000 	.word	0x20000000
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc8:	9205      	str	r2, [sp, #20]
 8003fca:	695a      	ldr	r2, [r3, #20]
 8003fcc:	9205      	str	r2, [sp, #20]
 8003fce:	699a      	ldr	r2, [r3, #24]
 8003fd0:	9205      	str	r2, [sp, #20]
 8003fd2:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	e5b5      	b.n	8003b4a <HAL_I2C_EV_IRQHandler+0x4d2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003fde:	2801      	cmp	r0, #1
 8003fe0:	d19f      	bne.n	8003f22 <HAL_I2C_EV_IRQHandler+0x8aa>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	e6b8      	b.n	8003d5e <HAL_I2C_EV_IRQHandler+0x6e6>
 8003fec:	2801      	cmp	r0, #1
 8003fee:	f47f af29 	bne.w	8003e44 <HAL_I2C_EV_IRQHandler+0x7cc>
 8003ff2:	e723      	b.n	8003e3c <HAL_I2C_EV_IRQHandler+0x7c4>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff4:	6819      	ldr	r1, [r3, #0]
 8003ff6:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8003ffa:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ffc:	6859      	ldr	r1, [r3, #4]
 8003ffe:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8004002:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004004:	6919      	ldr	r1, [r3, #16]
 8004006:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8004008:	7019      	strb	r1, [r3, #0]
        hi2c->XferCount--;
 800400a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800400c:	3b01      	subs	r3, #1
        hi2c->State = HAL_I2C_STATE_READY;
 800400e:	2120      	movs	r1, #32
        hi2c->XferCount--;
 8004010:	b29b      	uxth	r3, r3
 8004012:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004014:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
        hi2c->pBuffPtr++;
 8004018:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800401a:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800401e:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        hi2c->pBuffPtr++;
 8004022:	3301      	adds	r3, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004024:	2940      	cmp	r1, #64	@ 0x40
        hi2c->pBuffPtr++;
 8004026:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004028:	f47f aed6 	bne.w	8003dd8 <HAL_I2C_EV_IRQHandler+0x760>
          HAL_I2C_MemRxCpltCallback(hi2c);
 800402c:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 800402e:	6322      	str	r2, [r4, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004030:	f7fd fccc 	bl	80019cc <HAL_I2C_MemRxCpltCallback>
 8004034:	f7ff bb50 	b.w	80036d8 <HAL_I2C_EV_IRQHandler+0x60>

08004038 <HAL_I2C_ER_IRQHandler>:
{
 8004038:	b570      	push	{r4, r5, r6, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800403a:	6802      	ldr	r2, [r0, #0]
 800403c:	6953      	ldr	r3, [r2, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800403e:	6854      	ldr	r4, [r2, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004040:	f890 103e 	ldrb.w	r1, [r0, #62]	@ 0x3e
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004044:	05dd      	lsls	r5, r3, #23
{
 8004046:	b082      	sub	sp, #8
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004048:	b2c9      	uxtb	r1, r1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800404a:	d50a      	bpl.n	8004062 <HAL_I2C_ER_IRQHandler+0x2a>
 800404c:	05e4      	lsls	r4, r4, #23
 800404e:	d51b      	bpl.n	8004088 <HAL_I2C_ER_IRQHandler+0x50>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004050:	f46f 7480 	mvn.w	r4, #256	@ 0x100
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004054:	059e      	lsls	r6, r3, #22
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004056:	6154      	str	r4, [r2, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004058:	d544      	bpl.n	80040e4 <HAL_I2C_ER_IRQHandler+0xac>
 800405a:	f04f 0c0b 	mov.w	ip, #11
 800405e:	2503      	movs	r5, #3
 8004060:	e007      	b.n	8004072 <HAL_I2C_ER_IRQHandler+0x3a>
 8004062:	f413 7500 	ands.w	r5, r3, #512	@ 0x200
 8004066:	d011      	beq.n	800408c <HAL_I2C_ER_IRQHandler+0x54>
 8004068:	05e5      	lsls	r5, r4, #23
 800406a:	d50d      	bpl.n	8004088 <HAL_I2C_ER_IRQHandler+0x50>
 800406c:	f04f 0c0a 	mov.w	ip, #10
 8004070:	2502      	movs	r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004072:	f46f 7400 	mvn.w	r4, #512	@ 0x200
 8004076:	6154      	str	r4, [r2, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004078:	055c      	lsls	r4, r3, #21
 800407a:	d40c      	bmi.n	8004096 <HAL_I2C_ER_IRQHandler+0x5e>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800407c:	0519      	lsls	r1, r3, #20
 800407e:	d425      	bmi.n	80040cc <HAL_I2C_ER_IRQHandler+0x94>
 8004080:	46ac      	mov	ip, r5
 8004082:	e026      	b.n	80040d2 <HAL_I2C_ER_IRQHandler+0x9a>
  if (error != HAL_I2C_ERROR_NONE)
 8004084:	2d00      	cmp	r5, #0
 8004086:	d1fb      	bne.n	8004080 <HAL_I2C_ER_IRQHandler+0x48>
}
 8004088:	b002      	add	sp, #8
 800408a:	bd70      	pop	{r4, r5, r6, pc}
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800408c:	f413 6c80 	ands.w	ip, r3, #1024	@ 0x400
 8004090:	d02f      	beq.n	80040f2 <HAL_I2C_ER_IRQHandler+0xba>
 8004092:	05e4      	lsls	r4, r4, #23
 8004094:	d5f8      	bpl.n	8004088 <HAL_I2C_ER_IRQHandler+0x50>
    tmp2 = hi2c->XferCount;
 8004096:	f403 6400 	and.w	r4, r3, #2048	@ 0x800
 800409a:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
    tmp3 = hi2c->State;
 800409c:	f890 c03d 	ldrb.w	ip, [r0, #61]	@ 0x3d
    tmp4 = hi2c->PreviousState;
 80040a0:	6b06      	ldr	r6, [r0, #48]	@ 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80040a2:	2920      	cmp	r1, #32
    tmp2 = hi2c->XferCount;
 80040a4:	b29b      	uxth	r3, r3
    tmp3 = hi2c->State;
 80040a6:	fa5f fc8c 	uxtb.w	ip, ip
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80040aa:	d029      	beq.n	8004100 <HAL_I2C_ER_IRQHandler+0xc8>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ac:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80040b0:	2910      	cmp	r1, #16
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040b2:	6153      	str	r3, [r2, #20]
      error |= HAL_I2C_ERROR_AF;
 80040b4:	f045 0c04 	orr.w	ip, r5, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80040b8:	d001      	beq.n	80040be <HAL_I2C_ER_IRQHandler+0x86>
 80040ba:	2940      	cmp	r1, #64	@ 0x40
 80040bc:	d126      	bne.n	800410c <HAL_I2C_ER_IRQHandler+0xd4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040be:	6813      	ldr	r3, [r2, #0]
 80040c0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040c4:	6013      	str	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80040c6:	b124      	cbz	r4, 80040d2 <HAL_I2C_ER_IRQHandler+0x9a>
    error |= HAL_I2C_ERROR_OVR;
 80040c8:	f045 0c0c 	orr.w	ip, r5, #12
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040cc:	f46f 6300 	mvn.w	r3, #2048	@ 0x800
 80040d0:	6153      	str	r3, [r2, #20]
    hi2c->ErrorCode |= error;
 80040d2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80040d4:	ea43 030c 	orr.w	r3, r3, ip
 80040d8:	6403      	str	r3, [r0, #64]	@ 0x40
}
 80040da:	b002      	add	sp, #8
 80040dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    I2C_ITError(hi2c);
 80040e0:	f7ff ba14 	b.w	800350c <I2C_ITError>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80040e4:	055e      	lsls	r6, r3, #21
 80040e6:	d414      	bmi.n	8004112 <HAL_I2C_ER_IRQHandler+0xda>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80040e8:	051d      	lsls	r5, r3, #20
    error |= HAL_I2C_ERROR_BERR;
 80040ea:	f04f 0c01 	mov.w	ip, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80040ee:	d404      	bmi.n	80040fa <HAL_I2C_ER_IRQHandler+0xc2>
 80040f0:	e7ef      	b.n	80040d2 <HAL_I2C_ER_IRQHandler+0x9a>
 80040f2:	051b      	lsls	r3, r3, #20
 80040f4:	d5c8      	bpl.n	8004088 <HAL_I2C_ER_IRQHandler+0x50>
 80040f6:	05e3      	lsls	r3, r4, #23
 80040f8:	d5c6      	bpl.n	8004088 <HAL_I2C_ER_IRQHandler+0x50>
    error |= HAL_I2C_ERROR_OVR;
 80040fa:	f04c 0c08 	orr.w	ip, ip, #8
 80040fe:	e7e5      	b.n	80040cc <HAL_I2C_ER_IRQHandler+0x94>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004100:	b14b      	cbz	r3, 8004116 <HAL_I2C_ER_IRQHandler+0xde>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004102:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8004106:	6153      	str	r3, [r2, #20]
      error |= HAL_I2C_ERROR_AF;
 8004108:	f045 0c04 	orr.w	ip, r5, #4
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800410c:	2c00      	cmp	r4, #0
 800410e:	d0e0      	beq.n	80040d2 <HAL_I2C_ER_IRQHandler+0x9a>
 8004110:	e7f3      	b.n	80040fa <HAL_I2C_ER_IRQHandler+0xc2>
    error |= HAL_I2C_ERROR_BERR;
 8004112:	2501      	movs	r5, #1
 8004114:	e7bf      	b.n	8004096 <HAL_I2C_ER_IRQHandler+0x5e>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004116:	f00c 03f7 	and.w	r3, ip, #247	@ 0xf7
 800411a:	2b21      	cmp	r3, #33	@ 0x21
 800411c:	d00c      	beq.n	8004138 <HAL_I2C_ER_IRQHandler+0x100>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800411e:	f1bc 0f28 	cmp.w	ip, #40	@ 0x28
 8004122:	d1ee      	bne.n	8004102 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004124:	2e21      	cmp	r6, #33	@ 0x21
 8004126:	d007      	beq.n	8004138 <HAL_I2C_ER_IRQHandler+0x100>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004128:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 800412c:	6153      	str	r3, [r2, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800412e:	2c00      	cmp	r4, #0
 8004130:	d1ca      	bne.n	80040c8 <HAL_I2C_ER_IRQHandler+0x90>
      error |= HAL_I2C_ERROR_AF;
 8004132:	f045 0c04 	orr.w	ip, r5, #4
 8004136:	e7cc      	b.n	80040d2 <HAL_I2C_ER_IRQHandler+0x9a>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004138:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800413c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800413e:	2908      	cmp	r1, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004140:	b2db      	uxtb	r3, r3
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004142:	d00c      	beq.n	800415e <HAL_I2C_ER_IRQHandler+0x126>
 8004144:	2920      	cmp	r1, #32
 8004146:	d00a      	beq.n	800415e <HAL_I2C_ER_IRQHandler+0x126>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004148:	2b21      	cmp	r3, #33	@ 0x21
 800414a:	d023      	beq.n	8004194 <HAL_I2C_ER_IRQHandler+0x15c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800414c:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8004150:	6153      	str	r3, [r2, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004152:	2c00      	cmp	r4, #0
 8004154:	d096      	beq.n	8004084 <HAL_I2C_ER_IRQHandler+0x4c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004156:	6802      	ldr	r2, [r0, #0]
    error |= HAL_I2C_ERROR_OVR;
 8004158:	f045 0c08 	orr.w	ip, r5, #8
 800415c:	e7b6      	b.n	80040cc <HAL_I2C_ER_IRQHandler+0x94>
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800415e:	2b28      	cmp	r3, #40	@ 0x28
 8004160:	d1f2      	bne.n	8004148 <HAL_I2C_ER_IRQHandler+0x110>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004162:	4b1b      	ldr	r3, [pc, #108]	@ (80041d0 <HAL_I2C_ER_IRQHandler+0x198>)
 8004164:	62c3      	str	r3, [r0, #44]	@ 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004166:	6853      	ldr	r3, [r2, #4]
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004168:	9001      	str	r0, [sp, #4]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800416a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800416e:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004170:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8004174:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004176:	6813      	ldr	r3, [r2, #0]
 8004178:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800417c:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 800417e:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8004180:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8004182:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004184:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004188:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 800418c:	f7ff f8d8 	bl	8003340 <HAL_I2C_ListenCpltCallback>
 8004190:	9801      	ldr	r0, [sp, #4]
 8004192:	e7de      	b.n	8004152 <HAL_I2C_ER_IRQHandler+0x11a>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004194:	490e      	ldr	r1, [pc, #56]	@ (80041d0 <HAL_I2C_ER_IRQHandler+0x198>)
 8004196:	62c1      	str	r1, [r0, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004198:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800419a:	2100      	movs	r1, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 800419c:	2320      	movs	r3, #32
 800419e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041a2:	f880 103e 	strb.w	r1, [r0, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041a6:	6853      	ldr	r3, [r2, #4]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041a8:	9001      	str	r0, [sp, #4]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041aa:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80041ae:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b0:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 80041b4:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041b6:	6813      	ldr	r3, [r2, #0]
 80041b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80041bc:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80041be:	6953      	ldr	r3, [r2, #20]
 80041c0:	061e      	lsls	r6, r3, #24
    hi2c->Instance->DR = 0x00U;
 80041c2:	bf48      	it	mi
 80041c4:	6111      	strmi	r1, [r2, #16]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80041c6:	f7ff f8b5 	bl	8003334 <HAL_I2C_SlaveTxCpltCallback>
 80041ca:	9801      	ldr	r0, [sp, #4]
 80041cc:	e7c1      	b.n	8004152 <HAL_I2C_ER_IRQHandler+0x11a>
 80041ce:	bf00      	nop
 80041d0:	ffff0000 	.word	0xffff0000

080041d4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041d4:	2800      	cmp	r0, #0
 80041d6:	f000 81d8 	beq.w	800458a <HAL_RCC_OscConfig+0x3b6>
{
 80041da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041de:	6803      	ldr	r3, [r0, #0]
 80041e0:	07dd      	lsls	r5, r3, #31
{
 80041e2:	b082      	sub	sp, #8
 80041e4:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041e6:	d52f      	bpl.n	8004248 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80041e8:	499d      	ldr	r1, [pc, #628]	@ (8004460 <HAL_RCC_OscConfig+0x28c>)
 80041ea:	688a      	ldr	r2, [r1, #8]
 80041ec:	f002 020c 	and.w	r2, r2, #12
 80041f0:	2a04      	cmp	r2, #4
 80041f2:	f000 80ec 	beq.w	80043ce <HAL_RCC_OscConfig+0x1fa>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041f6:	688a      	ldr	r2, [r1, #8]
 80041f8:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80041fc:	2a08      	cmp	r2, #8
 80041fe:	f000 80e2 	beq.w	80043c6 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004202:	6863      	ldr	r3, [r4, #4]
 8004204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004208:	f000 80eb 	beq.w	80043e2 <HAL_RCC_OscConfig+0x20e>
 800420c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004210:	f000 8173 	beq.w	80044fa <HAL_RCC_OscConfig+0x326>
 8004214:	4d92      	ldr	r5, [pc, #584]	@ (8004460 <HAL_RCC_OscConfig+0x28c>)
 8004216:	682a      	ldr	r2, [r5, #0]
 8004218:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800421c:	602a      	str	r2, [r5, #0]
 800421e:	682a      	ldr	r2, [r5, #0]
 8004220:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004224:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004226:	2b00      	cmp	r3, #0
 8004228:	f040 80e0 	bne.w	80043ec <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800422c:	f7fd fef4 	bl	8002018 <HAL_GetTick>
 8004230:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004232:	e005      	b.n	8004240 <HAL_RCC_OscConfig+0x6c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004234:	f7fd fef0 	bl	8002018 <HAL_GetTick>
 8004238:	1b80      	subs	r0, r0, r6
 800423a:	2864      	cmp	r0, #100	@ 0x64
 800423c:	f200 8100 	bhi.w	8004440 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004240:	682b      	ldr	r3, [r5, #0]
 8004242:	039f      	lsls	r7, r3, #14
 8004244:	d4f6      	bmi.n	8004234 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004246:	6823      	ldr	r3, [r4, #0]
 8004248:	079d      	lsls	r5, r3, #30
 800424a:	d528      	bpl.n	800429e <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800424c:	4a84      	ldr	r2, [pc, #528]	@ (8004460 <HAL_RCC_OscConfig+0x28c>)
 800424e:	6891      	ldr	r1, [r2, #8]
 8004250:	f011 0f0c 	tst.w	r1, #12
 8004254:	f000 809b 	beq.w	800438e <HAL_RCC_OscConfig+0x1ba>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004258:	6891      	ldr	r1, [r2, #8]
 800425a:	f001 010c 	and.w	r1, r1, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800425e:	2908      	cmp	r1, #8
 8004260:	f000 8091 	beq.w	8004386 <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004264:	68e3      	ldr	r3, [r4, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 810c 	beq.w	8004484 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800426c:	4b7d      	ldr	r3, [pc, #500]	@ (8004464 <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800426e:	4e7c      	ldr	r6, [pc, #496]	@ (8004460 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8004270:	2201      	movs	r2, #1
 8004272:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004274:	f7fd fed0 	bl	8002018 <HAL_GetTick>
 8004278:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427a:	e005      	b.n	8004288 <HAL_RCC_OscConfig+0xb4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800427c:	f7fd fecc 	bl	8002018 <HAL_GetTick>
 8004280:	1b40      	subs	r0, r0, r5
 8004282:	2802      	cmp	r0, #2
 8004284:	f200 80dc 	bhi.w	8004440 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004288:	6833      	ldr	r3, [r6, #0]
 800428a:	079f      	lsls	r7, r3, #30
 800428c:	d5f6      	bpl.n	800427c <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428e:	6833      	ldr	r3, [r6, #0]
 8004290:	6922      	ldr	r2, [r4, #16]
 8004292:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004296:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800429a:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	071a      	lsls	r2, r3, #28
 80042a0:	d45c      	bmi.n	800435c <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042a2:	075d      	lsls	r5, r3, #29
 80042a4:	d53a      	bpl.n	800431c <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a6:	4a6e      	ldr	r2, [pc, #440]	@ (8004460 <HAL_RCC_OscConfig+0x28c>)
 80042a8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80042aa:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 80042ae:	f040 8088 	bne.w	80043c2 <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80042b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80042bc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80042be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042c2:	9301      	str	r3, [sp, #4]
 80042c4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80042c6:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c8:	4e67      	ldr	r6, [pc, #412]	@ (8004468 <HAL_RCC_OscConfig+0x294>)
 80042ca:	6833      	ldr	r3, [r6, #0]
 80042cc:	05d8      	lsls	r0, r3, #23
 80042ce:	f140 80a7 	bpl.w	8004420 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d2:	68a3      	ldr	r3, [r4, #8]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	f000 80b7 	beq.w	8004448 <HAL_RCC_OscConfig+0x274>
 80042da:	2b05      	cmp	r3, #5
 80042dc:	f000 811d 	beq.w	800451a <HAL_RCC_OscConfig+0x346>
 80042e0:	4e5f      	ldr	r6, [pc, #380]	@ (8004460 <HAL_RCC_OscConfig+0x28c>)
 80042e2:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 80042e4:	f022 0201 	bic.w	r2, r2, #1
 80042e8:	6732      	str	r2, [r6, #112]	@ 0x70
 80042ea:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 80042ec:	f022 0204 	bic.w	r2, r2, #4
 80042f0:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f040 80ad 	bne.w	8004452 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f8:	f7fd fe8e 	bl	8002018 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fc:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8004300:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004302:	e005      	b.n	8004310 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004304:	f7fd fe88 	bl	8002018 <HAL_GetTick>
 8004308:	1bc0      	subs	r0, r0, r7
 800430a:	4540      	cmp	r0, r8
 800430c:	f200 8098 	bhi.w	8004440 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004310:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8004312:	079b      	lsls	r3, r3, #30
 8004314:	d4f6      	bmi.n	8004304 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004316:	2d00      	cmp	r5, #0
 8004318:	f040 80f9 	bne.w	800450e <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800431c:	69a3      	ldr	r3, [r4, #24]
 800431e:	b1cb      	cbz	r3, 8004354 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004320:	4d4f      	ldr	r5, [pc, #316]	@ (8004460 <HAL_RCC_OscConfig+0x28c>)
 8004322:	68aa      	ldr	r2, [r5, #8]
 8004324:	f002 020c 	and.w	r2, r2, #12
 8004328:	2a08      	cmp	r2, #8
 800432a:	f000 80bc 	beq.w	80044a6 <HAL_RCC_OscConfig+0x2d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800432e:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004330:	4b4c      	ldr	r3, [pc, #304]	@ (8004464 <HAL_RCC_OscConfig+0x290>)
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004338:	f000 80f9 	beq.w	800452e <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433c:	f7fd fe6c 	bl	8002018 <HAL_GetTick>
 8004340:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004342:	e004      	b.n	800434e <HAL_RCC_OscConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004344:	f7fd fe68 	bl	8002018 <HAL_GetTick>
 8004348:	1b00      	subs	r0, r0, r4
 800434a:	2802      	cmp	r0, #2
 800434c:	d878      	bhi.n	8004440 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800434e:	682b      	ldr	r3, [r5, #0]
 8004350:	019b      	lsls	r3, r3, #6
 8004352:	d4f7      	bmi.n	8004344 <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004354:	2000      	movs	r0, #0
}
 8004356:	b002      	add	sp, #8
 8004358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800435c:	6963      	ldr	r3, [r4, #20]
 800435e:	b1fb      	cbz	r3, 80043a0 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 8004360:	4b40      	ldr	r3, [pc, #256]	@ (8004464 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004362:	4e3f      	ldr	r6, [pc, #252]	@ (8004460 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 8004364:	2201      	movs	r2, #1
 8004366:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800436a:	f7fd fe55 	bl	8002018 <HAL_GetTick>
 800436e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004370:	e004      	b.n	800437c <HAL_RCC_OscConfig+0x1a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004372:	f7fd fe51 	bl	8002018 <HAL_GetTick>
 8004376:	1b40      	subs	r0, r0, r5
 8004378:	2802      	cmp	r0, #2
 800437a:	d861      	bhi.n	8004440 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800437c:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 800437e:	079b      	lsls	r3, r3, #30
 8004380:	d5f7      	bpl.n	8004372 <HAL_RCC_OscConfig+0x19e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004382:	6823      	ldr	r3, [r4, #0]
 8004384:	e78d      	b.n	80042a2 <HAL_RCC_OscConfig+0xce>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004386:	6852      	ldr	r2, [r2, #4]
 8004388:	0251      	lsls	r1, r2, #9
 800438a:	f53f af6b 	bmi.w	8004264 <HAL_RCC_OscConfig+0x90>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800438e:	4a34      	ldr	r2, [pc, #208]	@ (8004460 <HAL_RCC_OscConfig+0x28c>)
 8004390:	6812      	ldr	r2, [r2, #0]
 8004392:	0792      	lsls	r2, r2, #30
 8004394:	d538      	bpl.n	8004408 <HAL_RCC_OscConfig+0x234>
 8004396:	68e2      	ldr	r2, [r4, #12]
 8004398:	2a01      	cmp	r2, #1
 800439a:	d035      	beq.n	8004408 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 800439c:	2001      	movs	r0, #1
 800439e:	e7da      	b.n	8004356 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 80043a0:	4a30      	ldr	r2, [pc, #192]	@ (8004464 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a2:	4e2f      	ldr	r6, [pc, #188]	@ (8004460 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 80043a4:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80043a8:	f7fd fe36 	bl	8002018 <HAL_GetTick>
 80043ac:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ae:	e004      	b.n	80043ba <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043b0:	f7fd fe32 	bl	8002018 <HAL_GetTick>
 80043b4:	1b40      	subs	r0, r0, r5
 80043b6:	2802      	cmp	r0, #2
 80043b8:	d842      	bhi.n	8004440 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ba:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80043bc:	079f      	lsls	r7, r3, #30
 80043be:	d4f7      	bmi.n	80043b0 <HAL_RCC_OscConfig+0x1dc>
 80043c0:	e7df      	b.n	8004382 <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 80043c2:	2500      	movs	r5, #0
 80043c4:	e780      	b.n	80042c8 <HAL_RCC_OscConfig+0xf4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043c6:	684a      	ldr	r2, [r1, #4]
 80043c8:	0251      	lsls	r1, r2, #9
 80043ca:	f57f af1a 	bpl.w	8004202 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043ce:	4a24      	ldr	r2, [pc, #144]	@ (8004460 <HAL_RCC_OscConfig+0x28c>)
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	0392      	lsls	r2, r2, #14
 80043d4:	f57f af38 	bpl.w	8004248 <HAL_RCC_OscConfig+0x74>
 80043d8:	6862      	ldr	r2, [r4, #4]
 80043da:	2a00      	cmp	r2, #0
 80043dc:	f47f af34 	bne.w	8004248 <HAL_RCC_OscConfig+0x74>
 80043e0:	e7dc      	b.n	800439c <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004460 <HAL_RCC_OscConfig+0x28c>)
 80043e4:	6813      	ldr	r3, [r2, #0]
 80043e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043ea:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80043ec:	f7fd fe14 	bl	8002018 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f0:	4e1b      	ldr	r6, [pc, #108]	@ (8004460 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80043f2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f4:	e004      	b.n	8004400 <HAL_RCC_OscConfig+0x22c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80043f6:	f7fd fe0f 	bl	8002018 <HAL_GetTick>
 80043fa:	1b40      	subs	r0, r0, r5
 80043fc:	2864      	cmp	r0, #100	@ 0x64
 80043fe:	d81f      	bhi.n	8004440 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004400:	6833      	ldr	r3, [r6, #0]
 8004402:	039b      	lsls	r3, r3, #14
 8004404:	d5f7      	bpl.n	80043f6 <HAL_RCC_OscConfig+0x222>
 8004406:	e71e      	b.n	8004246 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004408:	4915      	ldr	r1, [pc, #84]	@ (8004460 <HAL_RCC_OscConfig+0x28c>)
 800440a:	6920      	ldr	r0, [r4, #16]
 800440c:	680a      	ldr	r2, [r1, #0]
 800440e:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8004412:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004416:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004418:	071a      	lsls	r2, r3, #28
 800441a:	f57f af42 	bpl.w	80042a2 <HAL_RCC_OscConfig+0xce>
 800441e:	e79d      	b.n	800435c <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004420:	6833      	ldr	r3, [r6, #0]
 8004422:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004426:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004428:	f7fd fdf6 	bl	8002018 <HAL_GetTick>
 800442c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800442e:	6833      	ldr	r3, [r6, #0]
 8004430:	05d9      	lsls	r1, r3, #23
 8004432:	f53f af4e 	bmi.w	80042d2 <HAL_RCC_OscConfig+0xfe>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004436:	f7fd fdef 	bl	8002018 <HAL_GetTick>
 800443a:	1bc0      	subs	r0, r0, r7
 800443c:	2802      	cmp	r0, #2
 800443e:	d9f6      	bls.n	800442e <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8004440:	2003      	movs	r0, #3
}
 8004442:	b002      	add	sp, #8
 8004444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004448:	4a05      	ldr	r2, [pc, #20]	@ (8004460 <HAL_RCC_OscConfig+0x28c>)
 800444a:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 800444c:	f043 0301 	orr.w	r3, r3, #1
 8004450:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8004452:	f7fd fde1 	bl	8002018 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004456:	4f02      	ldr	r7, [pc, #8]	@ (8004460 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8004458:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445a:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800445e:	e00a      	b.n	8004476 <HAL_RCC_OscConfig+0x2a2>
 8004460:	40023800 	.word	0x40023800
 8004464:	42470000 	.word	0x42470000
 8004468:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800446c:	f7fd fdd4 	bl	8002018 <HAL_GetTick>
 8004470:	1b80      	subs	r0, r0, r6
 8004472:	4540      	cmp	r0, r8
 8004474:	d8e4      	bhi.n	8004440 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004476:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004478:	079a      	lsls	r2, r3, #30
 800447a:	d5f7      	bpl.n	800446c <HAL_RCC_OscConfig+0x298>
    if (pwrclkchanged == SET)
 800447c:	2d00      	cmp	r5, #0
 800447e:	f43f af4d 	beq.w	800431c <HAL_RCC_OscConfig+0x148>
 8004482:	e044      	b.n	800450e <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 8004484:	4a42      	ldr	r2, [pc, #264]	@ (8004590 <HAL_RCC_OscConfig+0x3bc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004486:	4e43      	ldr	r6, [pc, #268]	@ (8004594 <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 8004488:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800448a:	f7fd fdc5 	bl	8002018 <HAL_GetTick>
 800448e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004490:	e004      	b.n	800449c <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004492:	f7fd fdc1 	bl	8002018 <HAL_GetTick>
 8004496:	1b40      	subs	r0, r0, r5
 8004498:	2802      	cmp	r0, #2
 800449a:	d8d1      	bhi.n	8004440 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800449c:	6833      	ldr	r3, [r6, #0]
 800449e:	0799      	lsls	r1, r3, #30
 80044a0:	d4f7      	bmi.n	8004492 <HAL_RCC_OscConfig+0x2be>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044a2:	6823      	ldr	r3, [r4, #0]
 80044a4:	e6fb      	b.n	800429e <HAL_RCC_OscConfig+0xca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	f43f af78 	beq.w	800439c <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 80044ac:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ae:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b0:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044b4:	4291      	cmp	r1, r2
 80044b6:	f47f af71 	bne.w	800439c <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ba:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044bc:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c0:	4291      	cmp	r1, r2
 80044c2:	f47f af6b 	bne.w	800439c <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044c6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80044c8:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80044cc:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044ce:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80044d2:	f47f af63 	bne.w	800439c <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044d6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80044d8:	0852      	lsrs	r2, r2, #1
 80044da:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80044de:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044e0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80044e4:	f47f af5a 	bne.w	800439c <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044e8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80044ea:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044ee:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 80044f2:	bf14      	ite	ne
 80044f4:	2001      	movne	r0, #1
 80044f6:	2000      	moveq	r0, #0
 80044f8:	e72d      	b.n	8004356 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044fa:	4b26      	ldr	r3, [pc, #152]	@ (8004594 <HAL_RCC_OscConfig+0x3c0>)
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800450a:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800450c:	e76e      	b.n	80043ec <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 800450e:	4a21      	ldr	r2, [pc, #132]	@ (8004594 <HAL_RCC_OscConfig+0x3c0>)
 8004510:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004516:	6413      	str	r3, [r2, #64]	@ 0x40
 8004518:	e700      	b.n	800431c <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800451a:	4b1e      	ldr	r3, [pc, #120]	@ (8004594 <HAL_RCC_OscConfig+0x3c0>)
 800451c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800451e:	f042 0204 	orr.w	r2, r2, #4
 8004522:	671a      	str	r2, [r3, #112]	@ 0x70
 8004524:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004526:	f042 0201 	orr.w	r2, r2, #1
 800452a:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800452c:	e791      	b.n	8004452 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 800452e:	f7fd fd73 	bl	8002018 <HAL_GetTick>
 8004532:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004534:	e005      	b.n	8004542 <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004536:	f7fd fd6f 	bl	8002018 <HAL_GetTick>
 800453a:	1b80      	subs	r0, r0, r6
 800453c:	2802      	cmp	r0, #2
 800453e:	f63f af7f 	bhi.w	8004440 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004542:	682b      	ldr	r3, [r5, #0]
 8004544:	0199      	lsls	r1, r3, #6
 8004546:	d4f6      	bmi.n	8004536 <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004548:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800454c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800454e:	430b      	orrs	r3, r1
 8004550:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004554:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 8004558:	0852      	lsrs	r2, r2, #1
        __HAL_RCC_PLL_ENABLE();
 800455a:	490d      	ldr	r1, [pc, #52]	@ (8004590 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800455c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004560:	3a01      	subs	r2, #1
 8004562:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8004566:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004568:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800456a:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800456c:	f7fd fd54 	bl	8002018 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004570:	4d08      	ldr	r5, [pc, #32]	@ (8004594 <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 8004572:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004574:	e005      	b.n	8004582 <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004576:	f7fd fd4f 	bl	8002018 <HAL_GetTick>
 800457a:	1b00      	subs	r0, r0, r4
 800457c:	2802      	cmp	r0, #2
 800457e:	f63f af5f 	bhi.w	8004440 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004582:	682b      	ldr	r3, [r5, #0]
 8004584:	019a      	lsls	r2, r3, #6
 8004586:	d5f6      	bpl.n	8004576 <HAL_RCC_OscConfig+0x3a2>
 8004588:	e6e4      	b.n	8004354 <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 800458a:	2001      	movs	r0, #1
}
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	42470000 	.word	0x42470000
 8004594:	40023800 	.word	0x40023800

08004598 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004598:	4916      	ldr	r1, [pc, #88]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800459a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800459c:	688b      	ldr	r3, [r1, #8]
 800459e:	f003 030c 	and.w	r3, r3, #12
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d01b      	beq.n	80045de <HAL_RCC_GetSysClockFreq+0x46>
 80045a6:	2b08      	cmp	r3, #8
 80045a8:	d001      	beq.n	80045ae <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045aa:	4813      	ldr	r0, [pc, #76]	@ (80045f8 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80045ac:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045ae:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045b0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b2:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045b4:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80045b8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045bc:	d111      	bne.n	80045e2 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045be:	480e      	ldr	r0, [pc, #56]	@ (80045f8 <HAL_RCC_GetSysClockFreq+0x60>)
 80045c0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80045c4:	fba1 0100 	umull	r0, r1, r1, r0
 80045c8:	f7fc fb66 	bl	8000c98 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80045cc:	4b09      	ldr	r3, [pc, #36]	@ (80045f4 <HAL_RCC_GetSysClockFreq+0x5c>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80045d4:	3301      	adds	r3, #1
 80045d6:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 80045d8:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80045dc:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045de:	4807      	ldr	r0, [pc, #28]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x64>)
}
 80045e0:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045e2:	4806      	ldr	r0, [pc, #24]	@ (80045fc <HAL_RCC_GetSysClockFreq+0x64>)
 80045e4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80045e8:	2300      	movs	r3, #0
 80045ea:	fba1 0100 	umull	r0, r1, r1, r0
 80045ee:	f7fc fb53 	bl	8000c98 <__aeabi_uldivmod>
 80045f2:	e7eb      	b.n	80045cc <HAL_RCC_GetSysClockFreq+0x34>
 80045f4:	40023800 	.word	0x40023800
 80045f8:	00f42400 	.word	0x00f42400
 80045fc:	017d7840 	.word	0x017d7840

08004600 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004600:	2800      	cmp	r0, #0
 8004602:	f000 8087 	beq.w	8004714 <HAL_RCC_ClockConfig+0x114>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004606:	4a48      	ldr	r2, [pc, #288]	@ (8004728 <HAL_RCC_ClockConfig+0x128>)
 8004608:	6813      	ldr	r3, [r2, #0]
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	428b      	cmp	r3, r1
{
 8004610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004614:	460d      	mov	r5, r1
 8004616:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004618:	d209      	bcs.n	800462e <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461a:	b2cb      	uxtb	r3, r1
 800461c:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800461e:	6813      	ldr	r3, [r2, #0]
 8004620:	f003 0307 	and.w	r3, r3, #7
 8004624:	428b      	cmp	r3, r1
 8004626:	d002      	beq.n	800462e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004628:	2001      	movs	r0, #1
}
 800462a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	0798      	lsls	r0, r3, #30
 8004632:	d514      	bpl.n	800465e <HAL_RCC_ClockConfig+0x5e>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004634:	0759      	lsls	r1, r3, #29
 8004636:	d504      	bpl.n	8004642 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004638:	493c      	ldr	r1, [pc, #240]	@ (800472c <HAL_RCC_ClockConfig+0x12c>)
 800463a:	688a      	ldr	r2, [r1, #8]
 800463c:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8004640:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004642:	071a      	lsls	r2, r3, #28
 8004644:	d504      	bpl.n	8004650 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004646:	4939      	ldr	r1, [pc, #228]	@ (800472c <HAL_RCC_ClockConfig+0x12c>)
 8004648:	688a      	ldr	r2, [r1, #8]
 800464a:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 800464e:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004650:	4936      	ldr	r1, [pc, #216]	@ (800472c <HAL_RCC_ClockConfig+0x12c>)
 8004652:	68a0      	ldr	r0, [r4, #8]
 8004654:	688a      	ldr	r2, [r1, #8]
 8004656:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800465a:	4302      	orrs	r2, r0
 800465c:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800465e:	07df      	lsls	r7, r3, #31
 8004660:	d521      	bpl.n	80046a6 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004662:	6862      	ldr	r2, [r4, #4]
 8004664:	2a01      	cmp	r2, #1
 8004666:	d057      	beq.n	8004718 <HAL_RCC_ClockConfig+0x118>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004668:	1e93      	subs	r3, r2, #2
 800466a:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800466c:	4b2f      	ldr	r3, [pc, #188]	@ (800472c <HAL_RCC_ClockConfig+0x12c>)
 800466e:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004670:	d94d      	bls.n	800470e <HAL_RCC_ClockConfig+0x10e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004672:	0799      	lsls	r1, r3, #30
 8004674:	d5d8      	bpl.n	8004628 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004676:	4e2d      	ldr	r6, [pc, #180]	@ (800472c <HAL_RCC_ClockConfig+0x12c>)
 8004678:	68b3      	ldr	r3, [r6, #8]
 800467a:	f023 0303 	bic.w	r3, r3, #3
 800467e:	4313      	orrs	r3, r2
 8004680:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004682:	f7fd fcc9 	bl	8002018 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004686:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800468a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468c:	e004      	b.n	8004698 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800468e:	f7fd fcc3 	bl	8002018 <HAL_GetTick>
 8004692:	1bc0      	subs	r0, r0, r7
 8004694:	4540      	cmp	r0, r8
 8004696:	d844      	bhi.n	8004722 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004698:	68b3      	ldr	r3, [r6, #8]
 800469a:	6862      	ldr	r2, [r4, #4]
 800469c:	f003 030c 	and.w	r3, r3, #12
 80046a0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80046a4:	d1f3      	bne.n	800468e <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046a6:	4a20      	ldr	r2, [pc, #128]	@ (8004728 <HAL_RCC_ClockConfig+0x128>)
 80046a8:	6813      	ldr	r3, [r2, #0]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	42ab      	cmp	r3, r5
 80046b0:	d906      	bls.n	80046c0 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046b2:	b2eb      	uxtb	r3, r5
 80046b4:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b6:	6813      	ldr	r3, [r2, #0]
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	42ab      	cmp	r3, r5
 80046be:	d1b3      	bne.n	8004628 <HAL_RCC_ClockConfig+0x28>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c0:	6823      	ldr	r3, [r4, #0]
 80046c2:	075a      	lsls	r2, r3, #29
 80046c4:	d506      	bpl.n	80046d4 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c6:	4919      	ldr	r1, [pc, #100]	@ (800472c <HAL_RCC_ClockConfig+0x12c>)
 80046c8:	68e0      	ldr	r0, [r4, #12]
 80046ca:	688a      	ldr	r2, [r1, #8]
 80046cc:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 80046d0:	4302      	orrs	r2, r0
 80046d2:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d4:	071b      	lsls	r3, r3, #28
 80046d6:	d507      	bpl.n	80046e8 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046d8:	4a14      	ldr	r2, [pc, #80]	@ (800472c <HAL_RCC_ClockConfig+0x12c>)
 80046da:	6921      	ldr	r1, [r4, #16]
 80046dc:	6893      	ldr	r3, [r2, #8]
 80046de:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80046e2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80046e6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046e8:	f7ff ff56 	bl	8004598 <HAL_RCC_GetSysClockFreq>
 80046ec:	4a0f      	ldr	r2, [pc, #60]	@ (800472c <HAL_RCC_ClockConfig+0x12c>)
 80046ee:	4c10      	ldr	r4, [pc, #64]	@ (8004730 <HAL_RCC_ClockConfig+0x130>)
 80046f0:	6892      	ldr	r2, [r2, #8]
 80046f2:	4910      	ldr	r1, [pc, #64]	@ (8004734 <HAL_RCC_ClockConfig+0x134>)
 80046f4:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80046f8:	4603      	mov	r3, r0
 80046fa:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick(uwTickPrio);
 80046fc:	480e      	ldr	r0, [pc, #56]	@ (8004738 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046fe:	40d3      	lsrs	r3, r2
  HAL_InitTick(uwTickPrio);
 8004700:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004702:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8004704:	f7fd f9c0 	bl	8001a88 <HAL_InitTick>
  return HAL_OK;
 8004708:	2000      	movs	r0, #0
}
 800470a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800470e:	0198      	lsls	r0, r3, #6
 8004710:	d4b1      	bmi.n	8004676 <HAL_RCC_ClockConfig+0x76>
 8004712:	e789      	b.n	8004628 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004714:	2001      	movs	r0, #1
}
 8004716:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004718:	4b04      	ldr	r3, [pc, #16]	@ (800472c <HAL_RCC_ClockConfig+0x12c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	039e      	lsls	r6, r3, #14
 800471e:	d4aa      	bmi.n	8004676 <HAL_RCC_ClockConfig+0x76>
 8004720:	e782      	b.n	8004628 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8004722:	2003      	movs	r0, #3
 8004724:	e781      	b.n	800462a <HAL_RCC_ClockConfig+0x2a>
 8004726:	bf00      	nop
 8004728:	40023c00 	.word	0x40023c00
 800472c:	40023800 	.word	0x40023800
 8004730:	0800c05c 	.word	0x0800c05c
 8004734:	20000000 	.word	0x20000000
 8004738:	20000008 	.word	0x20000008

0800473c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800473c:	4b04      	ldr	r3, [pc, #16]	@ (8004750 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800473e:	4905      	ldr	r1, [pc, #20]	@ (8004754 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	4a05      	ldr	r2, [pc, #20]	@ (8004758 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004744:	6808      	ldr	r0, [r1, #0]
 8004746:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800474a:	5cd3      	ldrb	r3, [r2, r3]
}
 800474c:	40d8      	lsrs	r0, r3
 800474e:	4770      	bx	lr
 8004750:	40023800 	.word	0x40023800
 8004754:	20000000 	.word	0x20000000
 8004758:	0800c054 	.word	0x0800c054

0800475c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800475c:	4b04      	ldr	r3, [pc, #16]	@ (8004770 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800475e:	4905      	ldr	r1, [pc, #20]	@ (8004774 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	4a05      	ldr	r2, [pc, #20]	@ (8004778 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004764:	6808      	ldr	r0, [r1, #0]
 8004766:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800476a:	5cd3      	ldrb	r3, [r2, r3]
}
 800476c:	40d8      	lsrs	r0, r3
 800476e:	4770      	bx	lr
 8004770:	40023800 	.word	0x40023800
 8004774:	20000000 	.word	0x20000000
 8004778:	0800c054 	.word	0x0800c054

0800477c <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800477c:	4b0e      	ldr	r3, [pc, #56]	@ (80047b8 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800477e:	220f      	movs	r2, #15
{
 8004780:	b410      	push	{r4}
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004782:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004784:	689a      	ldr	r2, [r3, #8]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004786:	4c0d      	ldr	r4, [pc, #52]	@ (80047bc <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004788:	f002 0203 	and.w	r2, r2, #3
 800478c:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8004794:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004796:	689a      	ldr	r2, [r3, #8]
 8004798:	f402 52e0 	and.w	r2, r2, #7168	@ 0x1c00
 800479c:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	08db      	lsrs	r3, r3, #3
 80047a2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80047a6:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80047a8:	6823      	ldr	r3, [r4, #0]
}
 80047aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	600b      	str	r3, [r1, #0]
}
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	40023800 	.word	0x40023800
 80047bc:	40023c00 	.word	0x40023c00

080047c0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c0:	2800      	cmp	r0, #0
 80047c2:	d071      	beq.n	80048a8 <HAL_TIM_Base_Init+0xe8>
{
 80047c4:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047c6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80047ca:	4604      	mov	r4, r0
 80047cc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d054      	beq.n	800487e <HAL_TIM_Base_Init+0xbe>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047d4:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047d6:	4e35      	ldr	r6, [pc, #212]	@ (80048ac <HAL_TIM_Base_Init+0xec>)
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047d8:	69a1      	ldr	r1, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047da:	68e5      	ldr	r5, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047dc:	6860      	ldr	r0, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 80047de:	2302      	movs	r3, #2
 80047e0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e4:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 80047e6:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e8:	d04e      	beq.n	8004888 <HAL_TIM_Base_Init+0xc8>
 80047ea:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80047ee:	d01c      	beq.n	800482a <HAL_TIM_Base_Init+0x6a>
 80047f0:	f5a6 467c 	sub.w	r6, r6, #64512	@ 0xfc00
 80047f4:	42b2      	cmp	r2, r6
 80047f6:	d018      	beq.n	800482a <HAL_TIM_Base_Init+0x6a>
 80047f8:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80047fc:	42b2      	cmp	r2, r6
 80047fe:	d014      	beq.n	800482a <HAL_TIM_Base_Init+0x6a>
 8004800:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004804:	42b2      	cmp	r2, r6
 8004806:	d010      	beq.n	800482a <HAL_TIM_Base_Init+0x6a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004808:	4e29      	ldr	r6, [pc, #164]	@ (80048b0 <HAL_TIM_Base_Init+0xf0>)
 800480a:	42b2      	cmp	r2, r6
 800480c:	d011      	beq.n	8004832 <HAL_TIM_Base_Init+0x72>
 800480e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004812:	42b2      	cmp	r2, r6
 8004814:	d00d      	beq.n	8004832 <HAL_TIM_Base_Init+0x72>
 8004816:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800481a:	42b2      	cmp	r2, r6
 800481c:	d009      	beq.n	8004832 <HAL_TIM_Base_Init+0x72>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800481e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004822:	62d5      	str	r5, [r2, #44]	@ 0x2c
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004824:	4319      	orrs	r1, r3
  TIMx->PSC = Structure->Prescaler;
 8004826:	6290      	str	r0, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004828:	e00c      	b.n	8004844 <HAL_TIM_Base_Init+0x84>
    tmpcr1 |= Structure->CounterMode;
 800482a:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800482c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004830:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004832:	6926      	ldr	r6, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004834:	62d5      	str	r5, [r2, #44]	@ 0x2c
    tmpcr1 &= ~TIM_CR1_CKD;
 8004836:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800483a:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800483c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004840:	4319      	orrs	r1, r3
  TIMx->PSC = Structure->Prescaler;
 8004842:	6290      	str	r0, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004844:	6810      	ldr	r0, [r2, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004846:	2301      	movs	r3, #1
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004848:	f040 0004 	orr.w	r0, r0, #4
 800484c:	6010      	str	r0, [r2, #0]
  TIMx->EGR = TIM_EGR_UG;
 800484e:	6153      	str	r3, [r2, #20]

  TIMx->CR1 = tmpcr1;
 8004850:	6011      	str	r1, [r2, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004852:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004856:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800485a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800485e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004862:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004866:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800486a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800486e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004872:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004876:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800487a:	2000      	movs	r0, #0
}
 800487c:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800487e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004882:	f7fd f9e3 	bl	8001c4c <HAL_TIM_Base_MspInit>
 8004886:	e7a5      	b.n	80047d4 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8004888:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800488a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800488e:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004890:	6926      	ldr	r6, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004892:	62d5      	str	r5, [r2, #44]	@ 0x2c
    tmpcr1 &= ~TIM_CR1_CKD;
 8004894:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  TIMx->PSC = Structure->Prescaler;
 8004898:	6290      	str	r0, [r2, #40]	@ 0x28
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800489a:	4333      	orrs	r3, r6
    TIMx->RCR = Structure->RepetitionCounter;
 800489c:	6960      	ldr	r0, [r4, #20]
 800489e:	6310      	str	r0, [r2, #48]	@ 0x30
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80048a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048a4:	4319      	orrs	r1, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80048a6:	e7cd      	b.n	8004844 <HAL_TIM_Base_Init+0x84>
    return HAL_ERROR;
 80048a8:	2001      	movs	r0, #1
}
 80048aa:	4770      	bx	lr
 80048ac:	40010000 	.word	0x40010000
 80048b0:	40014000 	.word	0x40014000

080048b4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80048b4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d127      	bne.n	800490c <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048bc:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048be:	4914      	ldr	r1, [pc, #80]	@ (8004910 <HAL_TIM_Base_Start_IT+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80048c0:	2202      	movs	r2, #2
 80048c2:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048c6:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c8:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d0:	d011      	beq.n	80048f6 <HAL_TIM_Base_Start_IT+0x42>
 80048d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048d6:	d00e      	beq.n	80048f6 <HAL_TIM_Base_Start_IT+0x42>
 80048d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004914 <HAL_TIM_Base_Start_IT+0x60>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d00b      	beq.n	80048f6 <HAL_TIM_Base_Start_IT+0x42>
 80048de:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d007      	beq.n	80048f6 <HAL_TIM_Base_Start_IT+0x42>
 80048e6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d003      	beq.n	80048f6 <HAL_TIM_Base_Start_IT+0x42>
 80048ee:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d104      	bne.n	8004900 <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fc:	2a06      	cmp	r2, #6
 80048fe:	d003      	beq.n	8004908 <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004908:	2000      	movs	r0, #0
 800490a:	4770      	bx	lr
    return HAL_ERROR;
 800490c:	2001      	movs	r0, #1
}
 800490e:	4770      	bx	lr
 8004910:	40010000 	.word	0x40010000
 8004914:	40000400 	.word	0x40000400

08004918 <HAL_TIM_OC_MspInit>:
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop

0800491c <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800491c:	2800      	cmp	r0, #0
 800491e:	d071      	beq.n	8004a04 <HAL_TIM_OC_Init+0xe8>
{
 8004920:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004922:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004926:	4604      	mov	r4, r0
 8004928:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800492c:	2b00      	cmp	r3, #0
 800492e:	d054      	beq.n	80049da <HAL_TIM_OC_Init+0xbe>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004930:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004932:	4e35      	ldr	r6, [pc, #212]	@ (8004a08 <HAL_TIM_OC_Init+0xec>)
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004934:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004936:	68e5      	ldr	r5, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8004938:	6860      	ldr	r0, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 800493a:	2302      	movs	r3, #2
 800493c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004940:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8004942:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004944:	d04e      	beq.n	80049e4 <HAL_TIM_OC_Init+0xc8>
 8004946:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800494a:	d01c      	beq.n	8004986 <HAL_TIM_OC_Init+0x6a>
 800494c:	f5a6 467c 	sub.w	r6, r6, #64512	@ 0xfc00
 8004950:	42b2      	cmp	r2, r6
 8004952:	d018      	beq.n	8004986 <HAL_TIM_OC_Init+0x6a>
 8004954:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004958:	42b2      	cmp	r2, r6
 800495a:	d014      	beq.n	8004986 <HAL_TIM_OC_Init+0x6a>
 800495c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004960:	42b2      	cmp	r2, r6
 8004962:	d010      	beq.n	8004986 <HAL_TIM_OC_Init+0x6a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004964:	4e29      	ldr	r6, [pc, #164]	@ (8004a0c <HAL_TIM_OC_Init+0xf0>)
 8004966:	42b2      	cmp	r2, r6
 8004968:	d011      	beq.n	800498e <HAL_TIM_OC_Init+0x72>
 800496a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800496e:	42b2      	cmp	r2, r6
 8004970:	d00d      	beq.n	800498e <HAL_TIM_OC_Init+0x72>
 8004972:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004976:	42b2      	cmp	r2, r6
 8004978:	d009      	beq.n	800498e <HAL_TIM_OC_Init+0x72>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800497a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800497e:	62d5      	str	r5, [r2, #44]	@ 0x2c
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004980:	4319      	orrs	r1, r3
  TIMx->PSC = Structure->Prescaler;
 8004982:	6290      	str	r0, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004984:	e00c      	b.n	80049a0 <HAL_TIM_OC_Init+0x84>
    tmpcr1 |= Structure->CounterMode;
 8004986:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004988:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800498c:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800498e:	6926      	ldr	r6, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004990:	62d5      	str	r5, [r2, #44]	@ 0x2c
    tmpcr1 &= ~TIM_CR1_CKD;
 8004992:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004996:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004998:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800499c:	4319      	orrs	r1, r3
  TIMx->PSC = Structure->Prescaler;
 800499e:	6290      	str	r0, [r2, #40]	@ 0x28
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80049a0:	6810      	ldr	r0, [r2, #0]
  TIMx->EGR = TIM_EGR_UG;
 80049a2:	2301      	movs	r3, #1
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80049a4:	f040 0004 	orr.w	r0, r0, #4
 80049a8:	6010      	str	r0, [r2, #0]
  TIMx->EGR = TIM_EGR_UG;
 80049aa:	6153      	str	r3, [r2, #20]
  TIMx->CR1 = tmpcr1;
 80049ac:	6011      	str	r1, [r2, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ae:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049b2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80049b6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80049ba:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80049be:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049c2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80049c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80049ca:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80049ce:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80049d2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80049d6:	2000      	movs	r0, #0
}
 80049d8:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80049da:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 80049de:	f7ff ff9b 	bl	8004918 <HAL_TIM_OC_MspInit>
 80049e2:	e7a5      	b.n	8004930 <HAL_TIM_OC_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 80049e4:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80049ea:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ec:	6926      	ldr	r6, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049ee:	62d5      	str	r5, [r2, #44]	@ 0x2c
    tmpcr1 &= ~TIM_CR1_CKD;
 80049f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  TIMx->PSC = Structure->Prescaler;
 80049f4:	6290      	str	r0, [r2, #40]	@ 0x28
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049f6:	4333      	orrs	r3, r6
    TIMx->RCR = Structure->RepetitionCounter;
 80049f8:	6960      	ldr	r0, [r4, #20]
 80049fa:	6310      	str	r0, [r2, #48]	@ 0x30
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a00:	4319      	orrs	r1, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8004a02:	e7cd      	b.n	80049a0 <HAL_TIM_OC_Init+0x84>
    return HAL_ERROR;
 8004a04:	2001      	movs	r0, #1
}
 8004a06:	4770      	bx	lr
 8004a08:	40010000 	.word	0x40010000
 8004a0c:	40014000 	.word	0x40014000

08004a10 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8004a10:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	f000 8081 	beq.w	8004b1c <HAL_TIM_OC_ConfigChannel+0x10c>
{
 8004a1a:	b470      	push	{r4, r5, r6}
 8004a1c:	4684      	mov	ip, r0
  switch (Channel)
 8004a1e:	2a0c      	cmp	r2, #12
 8004a20:	d808      	bhi.n	8004a34 <HAL_TIM_OC_ConfigChannel+0x24>
 8004a22:	e8df f002 	tbb	[pc, r2]
 8004a26:	072d      	.short	0x072d
 8004a28:	07460707 	.word	0x07460707
 8004a2c:	07610707 	.word	0x07610707
 8004a30:	0707      	.short	0x0707
 8004a32:	0d          	.byte	0x0d
 8004a33:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8004a34:	2300      	movs	r3, #0
 8004a36:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  switch (Channel)
 8004a3a:	2001      	movs	r0, #1
}
 8004a3c:	bc70      	pop	{r4, r5, r6}
 8004a3e:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a40:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a42:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8004a44:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a46:	6a18      	ldr	r0, [r3, #32]
 8004a48:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8004a4c:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004a4e:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004a50:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a52:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a56:	ea40 2005 	orr.w	r0, r0, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a5a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004a5c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a60:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a64:	4d47      	ldr	r5, [pc, #284]	@ (8004b84 <HAL_TIM_OC_ConfigChannel+0x174>)
 8004a66:	42ab      	cmp	r3, r5
 8004a68:	d076      	beq.n	8004b58 <HAL_TIM_OC_ConfigChannel+0x148>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a6a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004a6c:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004a6e:	61d8      	str	r0, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004a70:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a72:	621a      	str	r2, [r3, #32]
  __HAL_UNLOCK(htim);
 8004a74:	2300      	movs	r3, #0
 8004a76:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004a7a:	2000      	movs	r0, #0
}
 8004a7c:	bc70      	pop	{r4, r5, r6}
 8004a7e:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a80:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8004a82:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8004a84:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a86:	6a18      	ldr	r0, [r3, #32]
 8004a88:	f020 0001 	bic.w	r0, r0, #1
 8004a8c:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004a8e:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004a90:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a92:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004a96:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8004a98:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004a9a:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 8004a9e:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004aa0:	4d38      	ldr	r5, [pc, #224]	@ (8004b84 <HAL_TIM_OC_ConfigChannel+0x174>)
 8004aa2:	42ab      	cmp	r3, r5
 8004aa4:	d03c      	beq.n	8004b20 <HAL_TIM_OC_ConfigChannel+0x110>
  TIMx->CCR1 = OC_Config->Pulse;
 8004aa6:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004aa8:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004aaa:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004aac:	6359      	str	r1, [r3, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8004aae:	621a      	str	r2, [r3, #32]
}
 8004ab0:	e7e0      	b.n	8004a74 <HAL_TIM_OC_ConfigChannel+0x64>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ab2:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ab4:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8004ab6:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ab8:	6a18      	ldr	r0, [r3, #32]
 8004aba:	f020 0010 	bic.w	r0, r0, #16
 8004abe:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004ac0:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004ac2:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ac4:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ac8:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004acc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004ace:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ad2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ad6:	4d2b      	ldr	r5, [pc, #172]	@ (8004b84 <HAL_TIM_OC_ConfigChannel+0x174>)
 8004ad8:	42ab      	cmp	r3, r5
 8004ada:	d02e      	beq.n	8004b3a <HAL_TIM_OC_ConfigChannel+0x12a>
  TIMx->CCR2 = OC_Config->Pulse;
 8004adc:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004ade:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004ae0:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004ae2:	6399      	str	r1, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004ae4:	621a      	str	r2, [r3, #32]
}
 8004ae6:	e7c5      	b.n	8004a74 <HAL_TIM_OC_ConfigChannel+0x64>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ae8:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8004aea:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8004aec:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004aee:	6a18      	ldr	r0, [r3, #32]
 8004af0:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8004af4:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004af6:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004af8:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004afa:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004afe:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b00:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004b02:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b06:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b0a:	4d1e      	ldr	r5, [pc, #120]	@ (8004b84 <HAL_TIM_OC_ConfigChannel+0x174>)
 8004b0c:	42ab      	cmp	r3, r5
 8004b0e:	d029      	beq.n	8004b64 <HAL_TIM_OC_ConfigChannel+0x154>
  TIMx->CCR3 = OC_Config->Pulse;
 8004b10:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004b12:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004b14:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8004b16:	63d9      	str	r1, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8004b18:	621a      	str	r2, [r3, #32]
}
 8004b1a:	e7ab      	b.n	8004a74 <HAL_TIM_OC_ConfigChannel+0x64>
  __HAL_LOCK(htim);
 8004b1c:	2002      	movs	r0, #2
}
 8004b1e:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8004b20:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b22:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004b26:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b28:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b2c:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b30:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b32:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b36:	432c      	orrs	r4, r5
 8004b38:	e7b5      	b.n	8004aa6 <HAL_TIM_OC_ConfigChannel+0x96>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b3a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b3c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b40:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b44:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b48:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b4c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b52:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8004b56:	e7c1      	b.n	8004adc <HAL_TIM_OC_ConfigChannel+0xcc>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b58:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b5a:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b5e:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004b62:	e782      	b.n	8004a6a <HAL_TIM_OC_ConfigChannel+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b64:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b6a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b6e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b72:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b76:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b7c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8004b80:	e7c6      	b.n	8004b10 <HAL_TIM_OC_ConfigChannel+0x100>
 8004b82:	bf00      	nop
 8004b84:	40010000 	.word	0x40010000

08004b88 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004b88:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004b8c:	2a01      	cmp	r2, #1
 8004b8e:	d06e      	beq.n	8004c6e <HAL_TIM_ConfigClockSource+0xe6>
 8004b90:	4603      	mov	r3, r0
  tmpsmcr = htim->Instance->SMCR;
 8004b92:	6802      	ldr	r2, [r0, #0]
{
 8004b94:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8004b96:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004b98:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 8004b9a:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004b9e:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004ba2:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ba4:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
 8004ba8:	f024 0477 	bic.w	r4, r4, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004bac:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004bae:	680c      	ldr	r4, [r1, #0]
 8004bb0:	2c60      	cmp	r4, #96	@ 0x60
 8004bb2:	d076      	beq.n	8004ca2 <HAL_TIM_ConfigClockSource+0x11a>
 8004bb4:	d811      	bhi.n	8004bda <HAL_TIM_ConfigClockSource+0x52>
 8004bb6:	2c40      	cmp	r4, #64	@ 0x40
 8004bb8:	d05b      	beq.n	8004c72 <HAL_TIM_ConfigClockSource+0xea>
 8004bba:	d82e      	bhi.n	8004c1a <HAL_TIM_ConfigClockSource+0x92>
 8004bbc:	2c20      	cmp	r4, #32
 8004bbe:	d004      	beq.n	8004bca <HAL_TIM_ConfigClockSource+0x42>
 8004bc0:	f200 8088 	bhi.w	8004cd4 <HAL_TIM_ConfigClockSource+0x14c>
 8004bc4:	f034 0110 	bics.w	r1, r4, #16
 8004bc8:	d11f      	bne.n	8004c0a <HAL_TIM_ConfigClockSource+0x82>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bca:	6891      	ldr	r1, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bcc:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bd0:	4321      	orrs	r1, r4
 8004bd2:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bd6:	6091      	str	r1, [r2, #8]
}
 8004bd8:	e016      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 8004bda:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8004bde:	d013      	beq.n	8004c08 <HAL_TIM_ConfigClockSource+0x80>
 8004be0:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8004be4:	d033      	beq.n	8004c4e <HAL_TIM_ConfigClockSource+0xc6>
 8004be6:	2c70      	cmp	r4, #112	@ 0x70
 8004be8:	d10f      	bne.n	8004c0a <HAL_TIM_ConfigClockSource+0x82>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bea:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004bee:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bf0:	4328      	orrs	r0, r5
 8004bf2:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bf4:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bf8:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8004bfc:	4308      	orrs	r0, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bfe:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004c00:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c02:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004c06:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004c08:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004c0a:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8004c0c:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8004c0e:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004c16:	bc30      	pop	{r4, r5}
 8004c18:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004c1a:	2c50      	cmp	r4, #80	@ 0x50
 8004c1c:	d1f5      	bne.n	8004c0a <HAL_TIM_ConfigClockSource+0x82>
                               sClockSourceConfig->ClockPolarity,
 8004c1e:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004c20:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8004c22:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c24:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004c28:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c2a:	6a11      	ldr	r1, [r2, #32]
 8004c2c:	f021 0101 	bic.w	r1, r1, #1
 8004c30:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c32:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c34:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c38:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004c3c:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8004c3e:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8004c40:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c42:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c46:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 8004c4a:	6091      	str	r1, [r2, #8]
}
 8004c4c:	e7dc      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x80>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c4e:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004c52:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c54:	4328      	orrs	r0, r5
 8004c56:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c58:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c5c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8004c60:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8004c62:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c64:	6891      	ldr	r1, [r2, #8]
 8004c66:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8004c6a:	6091      	str	r1, [r2, #8]
      break;
 8004c6c:	e7cc      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x80>
  __HAL_LOCK(htim);
 8004c6e:	2002      	movs	r0, #2
}
 8004c70:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8004c72:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004c74:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8004c76:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c78:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004c7c:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c7e:	6a11      	ldr	r1, [r2, #32]
 8004c80:	f021 0101 	bic.w	r1, r1, #1
 8004c84:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c86:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c88:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c8c:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004c90:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8004c92:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8004c94:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c96:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c9a:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 8004c9e:	6091      	str	r1, [r2, #8]
}
 8004ca0:	e7b2      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x80>
                               sClockSourceConfig->ClockPolarity,
 8004ca2:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004ca4:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8004ca6:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ca8:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004cac:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cb0:	6a10      	ldr	r0, [r2, #32]
 8004cb2:	f020 0010 	bic.w	r0, r0, #16
 8004cb6:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cb8:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cba:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cbe:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004cc2:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8004cc4:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8004cc6:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cc8:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ccc:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8004cd0:	6091      	str	r1, [r2, #8]
}
 8004cd2:	e799      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 8004cd4:	2c30      	cmp	r4, #48	@ 0x30
 8004cd6:	f43f af78 	beq.w	8004bca <HAL_TIM_ConfigClockSource+0x42>
 8004cda:	e796      	b.n	8004c0a <HAL_TIM_ConfigClockSource+0x82>

08004cdc <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop

08004ce0 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop

08004ce4 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop

08004ce8 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop

08004cec <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8004cec:	6803      	ldr	r3, [r0, #0]
{
 8004cee:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8004cf0:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004cf2:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cf4:	07a9      	lsls	r1, r5, #30
{
 8004cf6:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cf8:	d501      	bpl.n	8004cfe <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cfa:	07b2      	lsls	r2, r6, #30
 8004cfc:	d451      	bmi.n	8004da2 <HAL_TIM_IRQHandler+0xb6>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cfe:	0769      	lsls	r1, r5, #29
 8004d00:	d501      	bpl.n	8004d06 <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d02:	0772      	lsls	r2, r6, #29
 8004d04:	d43a      	bmi.n	8004d7c <HAL_TIM_IRQHandler+0x90>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d06:	072b      	lsls	r3, r5, #28
 8004d08:	d501      	bpl.n	8004d0e <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d0a:	0730      	lsls	r0, r6, #28
 8004d0c:	d424      	bmi.n	8004d58 <HAL_TIM_IRQHandler+0x6c>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d0e:	06ea      	lsls	r2, r5, #27
 8004d10:	d501      	bpl.n	8004d16 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d12:	06f3      	lsls	r3, r6, #27
 8004d14:	d410      	bmi.n	8004d38 <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d16:	07e8      	lsls	r0, r5, #31
 8004d18:	d501      	bpl.n	8004d1e <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d1a:	07f1      	lsls	r1, r6, #31
 8004d1c:	d457      	bmi.n	8004dce <HAL_TIM_IRQHandler+0xe2>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d1e:	062a      	lsls	r2, r5, #24
 8004d20:	d501      	bpl.n	8004d26 <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d22:	0633      	lsls	r3, r6, #24
 8004d24:	d45b      	bmi.n	8004dde <HAL_TIM_IRQHandler+0xf2>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d26:	0668      	lsls	r0, r5, #25
 8004d28:	d501      	bpl.n	8004d2e <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d2a:	0671      	lsls	r1, r6, #25
 8004d2c:	d45f      	bmi.n	8004dee <HAL_TIM_IRQHandler+0x102>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d2e:	06aa      	lsls	r2, r5, #26
 8004d30:	d501      	bpl.n	8004d36 <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d32:	06b3      	lsls	r3, r6, #26
 8004d34:	d442      	bmi.n	8004dbc <HAL_TIM_IRQHandler+0xd0>
}
 8004d36:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	f06f 0210 	mvn.w	r2, #16
 8004d3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d40:	2208      	movs	r2, #8
 8004d42:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004d4a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d4c:	d063      	beq.n	8004e16 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004d4e:	f7ff ffc7 	bl	8004ce0 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d52:	2300      	movs	r3, #0
 8004d54:	7723      	strb	r3, [r4, #28]
 8004d56:	e7de      	b.n	8004d16 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d58:	6823      	ldr	r3, [r4, #0]
 8004d5a:	f06f 0208 	mvn.w	r2, #8
 8004d5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d60:	2204      	movs	r2, #4
 8004d62:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d64:	69db      	ldr	r3, [r3, #28]
 8004d66:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8004d68:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d6a:	d151      	bne.n	8004e10 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6c:	f7ff ffb6 	bl	8004cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d70:	4620      	mov	r0, r4
 8004d72:	f7ff ffb7 	bl	8004ce4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d76:	2300      	movs	r3, #0
 8004d78:	7723      	strb	r3, [r4, #28]
 8004d7a:	e7c8      	b.n	8004d0e <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d7c:	6823      	ldr	r3, [r4, #0]
 8004d7e:	f06f 0204 	mvn.w	r2, #4
 8004d82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d84:	2202      	movs	r2, #2
 8004d86:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8004d8e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d90:	d13b      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d92:	f7ff ffa3 	bl	8004cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d96:	4620      	mov	r0, r4
 8004d98:	f7ff ffa4 	bl	8004ce4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	7723      	strb	r3, [r4, #28]
 8004da0:	e7b1      	b.n	8004d06 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004da2:	f06f 0202 	mvn.w	r2, #2
 8004da6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004da8:	2201      	movs	r2, #1
 8004daa:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	079b      	lsls	r3, r3, #30
 8004db0:	d025      	beq.n	8004dfe <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8004db2:	f7ff ff95 	bl	8004ce0 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004db6:	2300      	movs	r3, #0
 8004db8:	7723      	strb	r3, [r4, #28]
 8004dba:	e7a0      	b.n	8004cfe <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dbc:	6823      	ldr	r3, [r4, #0]
 8004dbe:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004dc2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004dc4:	611a      	str	r2, [r3, #16]
}
 8004dc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 8004dca:	f000 b863 	b.w	8004e94 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	f06f 0201 	mvn.w	r2, #1
 8004dd4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dd6:	4620      	mov	r0, r4
 8004dd8:	f7fc fe2a 	bl	8001a30 <HAL_TIM_PeriodElapsedCallback>
 8004ddc:	e79f      	b.n	8004d1e <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004de4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004de6:	4620      	mov	r0, r4
 8004de8:	f000 f856 	bl	8004e98 <HAL_TIMEx_BreakCallback>
 8004dec:	e79b      	b.n	8004d26 <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004df4:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004df6:	4620      	mov	r0, r4
 8004df8:	f7ff ff76 	bl	8004ce8 <HAL_TIM_TriggerCallback>
 8004dfc:	e797      	b.n	8004d2e <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dfe:	f7ff ff6d 	bl	8004cdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e02:	4620      	mov	r0, r4
 8004e04:	f7ff ff6e 	bl	8004ce4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e08:	e7d5      	b.n	8004db6 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0a:	f7ff ff69 	bl	8004ce0 <HAL_TIM_IC_CaptureCallback>
 8004e0e:	e7c5      	b.n	8004d9c <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_IC_CaptureCallback(htim);
 8004e10:	f7ff ff66 	bl	8004ce0 <HAL_TIM_IC_CaptureCallback>
 8004e14:	e7af      	b.n	8004d76 <HAL_TIM_IRQHandler+0x8a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e16:	f7ff ff61 	bl	8004cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f7ff ff62 	bl	8004ce4 <HAL_TIM_PWM_PulseFinishedCallback>
 8004e20:	e797      	b.n	8004d52 <HAL_TIM_IRQHandler+0x66>
 8004e22:	bf00      	nop

08004e24 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e24:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8004e28:	2a01      	cmp	r2, #1
 8004e2a:	d02f      	beq.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004e2c:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e2e:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004e30:	2002      	movs	r0, #2
{
 8004e32:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004e34:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8004e38:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e3a:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004e3c:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e3e:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e42:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e44:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e46:	4812      	ldr	r0, [pc, #72]	@ (8004e90 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8004e48:	4282      	cmp	r2, r0
 8004e4a:	d012      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8004e4c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004e50:	d00f      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8004e52:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 8004e56:	4282      	cmp	r2, r0
 8004e58:	d00b      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8004e5a:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8004e5e:	4282      	cmp	r2, r0
 8004e60:	d007      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8004e62:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8004e66:	4282      	cmp	r2, r0
 8004e68:	d003      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8004e6a:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8004e6e:	4282      	cmp	r2, r0
 8004e70:	d104      	bne.n	8004e7c <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e72:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e74:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e78:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e7a:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8004e7c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004e84:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8004e88:	bc30      	pop	{r4, r5}
 8004e8a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004e8c:	2002      	movs	r0, #2
}
 8004e8e:	4770      	bx	lr
 8004e90:	40010000 	.word	0x40010000

08004e94 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop

08004e98 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8004e98:	4770      	bx	lr
 8004e9a:	bf00      	nop

08004e9c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	f000 8087 	beq.w	8004fb0 <HAL_UART_Init+0x114>
{
 8004ea2:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ea4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d079      	beq.n	8004fa6 <HAL_UART_Init+0x10a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004eb2:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eb4:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8004eb6:	2224      	movs	r2, #36	@ 0x24
 8004eb8:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ec2:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ec4:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ec6:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ec8:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8004ecc:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ece:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ed0:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ed2:	4302      	orrs	r2, r0
 8004ed4:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004ed6:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ed8:	4302      	orrs	r2, r0
 8004eda:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8004edc:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8004ee0:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ee4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004eea:	695a      	ldr	r2, [r3, #20]
 8004eec:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004eee:	4931      	ldr	r1, [pc, #196]	@ (8004fb4 <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ef0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004ef4:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ef6:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ef8:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004efa:	d036      	beq.n	8004f6a <HAL_UART_Init+0xce>
 8004efc:	4a2e      	ldr	r2, [pc, #184]	@ (8004fb8 <HAL_UART_Init+0x11c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d033      	beq.n	8004f6a <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f02:	f7ff fc1b 	bl	800473c <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f06:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f08:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f0a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f0e:	e9d4 5300 	ldrd	r5, r3, [r4]
 8004f12:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f16:	d02b      	beq.n	8004f70 <HAL_UART_Init+0xd4>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f18:	009a      	lsls	r2, r3, #2
 8004f1a:	0f9b      	lsrs	r3, r3, #30
 8004f1c:	f7fb febc 	bl	8000c98 <__aeabi_uldivmod>
 8004f20:	4a26      	ldr	r2, [pc, #152]	@ (8004fbc <HAL_UART_Init+0x120>)
 8004f22:	fba2 1300 	umull	r1, r3, r2, r0
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	2164      	movs	r1, #100	@ 0x64
 8004f2a:	fb01 0013 	mls	r0, r1, r3, r0
 8004f2e:	0100      	lsls	r0, r0, #4
 8004f30:	3032      	adds	r0, #50	@ 0x32
 8004f32:	fba2 2000 	umull	r2, r0, r2, r0
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8004f3c:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f3e:	692a      	ldr	r2, [r5, #16]
 8004f40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f44:	612a      	str	r2, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f46:	696a      	ldr	r2, [r5, #20]
 8004f48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f4c:	616a      	str	r2, [r5, #20]
  __HAL_UART_ENABLE(huart);
 8004f4e:	68ea      	ldr	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f50:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8004f52:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8004f54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f58:	60ea      	str	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f5a:	6463      	str	r3, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004f5c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004f60:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  return HAL_OK;
 8004f64:	4618      	mov	r0, r3
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f66:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8004f68:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f6a:	f7ff fbf7 	bl	800475c <HAL_RCC_GetPCLK2Freq>
 8004f6e:	e7ca      	b.n	8004f06 <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f70:	18da      	adds	r2, r3, r3
 8004f72:	f04f 0300 	mov.w	r3, #0
 8004f76:	415b      	adcs	r3, r3
 8004f78:	f7fb fe8e 	bl	8000c98 <__aeabi_uldivmod>
 8004f7c:	4a0f      	ldr	r2, [pc, #60]	@ (8004fbc <HAL_UART_Init+0x120>)
 8004f7e:	fba2 3100 	umull	r3, r1, r2, r0
 8004f82:	0949      	lsrs	r1, r1, #5
 8004f84:	2364      	movs	r3, #100	@ 0x64
 8004f86:	fb03 0311 	mls	r3, r3, r1, r0
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	3332      	adds	r3, #50	@ 0x32
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8004f96:	091b      	lsrs	r3, r3, #4
 8004f98:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004f9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fa0:	4413      	add	r3, r2
 8004fa2:	60ab      	str	r3, [r5, #8]
 8004fa4:	e7cb      	b.n	8004f3e <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 8004fa6:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8004faa:	f7fc ffa1 	bl	8001ef0 <HAL_UART_MspInit>
 8004fae:	e780      	b.n	8004eb2 <HAL_UART_Init+0x16>
    return HAL_ERROR;
 8004fb0:	2001      	movs	r0, #1
}
 8004fb2:	4770      	bx	lr
 8004fb4:	40011000 	.word	0x40011000
 8004fb8:	40011400 	.word	0x40011400
 8004fbc:	51eb851f 	.word	0x51eb851f

08004fc0 <HAL_UART_Transmit>:
{
 8004fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fc4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8004fc6:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8004fca:	2820      	cmp	r0, #32
 8004fcc:	d155      	bne.n	800507a <HAL_UART_Transmit+0xba>
    if ((pData == NULL) || (Size == 0U))
 8004fce:	460d      	mov	r5, r1
 8004fd0:	b109      	cbz	r1, 8004fd6 <HAL_UART_Transmit+0x16>
 8004fd2:	4616      	mov	r6, r2
 8004fd4:	b912      	cbnz	r2, 8004fdc <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 8004fd6:	2001      	movs	r0, #1
}
 8004fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fdc:	461f      	mov	r7, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fde:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fe2:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe4:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fe8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8004fec:	f7fd f814 	bl	8002018 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff0:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 8004ff2:	84a6      	strh	r6, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8004ff8:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8004ffa:	84e6      	strh	r6, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ffc:	d040      	beq.n	8005080 <HAL_UART_Transmit+0xc0>
    while (huart->TxXferCount > 0U)
 8004ffe:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005000:	6822      	ldr	r2, [r4, #0]
    while (huart->TxXferCount > 0U)
 8005002:	b29b      	uxth	r3, r3
 8005004:	2b00      	cmp	r3, #0
 8005006:	d047      	beq.n	8005098 <HAL_UART_Transmit+0xd8>
 8005008:	1c7b      	adds	r3, r7, #1
 800500a:	d124      	bne.n	8005056 <HAL_UART_Transmit+0x96>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800500c:	6813      	ldr	r3, [r2, #0]
 800500e:	061f      	lsls	r7, r3, #24
 8005010:	d5fc      	bpl.n	800500c <HAL_UART_Transmit+0x4c>
      if (pdata8bits == NULL)
 8005012:	2d00      	cmp	r5, #0
 8005014:	d02c      	beq.n	8005070 <HAL_UART_Transmit+0xb0>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005016:	f815 3b01 	ldrb.w	r3, [r5], #1
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800501a:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800501c:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800501e:	3b01      	subs	r3, #1
 8005020:	b29b      	uxth	r3, r3
 8005022:	84e3      	strh	r3, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005024:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8005026:	b29b      	uxth	r3, r3
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1ef      	bne.n	800500c <HAL_UART_Transmit+0x4c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800502c:	6813      	ldr	r3, [r2, #0]
 800502e:	0659      	lsls	r1, r3, #25
 8005030:	d5fc      	bpl.n	800502c <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8005032:	2320      	movs	r3, #32
 8005034:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8005038:	2000      	movs	r0, #0
}
 800503a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 800503e:	2d00      	cmp	r5, #0
 8005040:	d03d      	beq.n	80050be <HAL_UART_Transmit+0xfe>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005042:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005046:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8005048:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800504a:	3b01      	subs	r3, #1
 800504c:	b29b      	uxth	r3, r3
 800504e:	84e3      	strh	r3, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005050:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8005052:	b29b      	uxth	r3, r3
 8005054:	b313      	cbz	r3, 800509c <HAL_UART_Transmit+0xdc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005056:	6813      	ldr	r3, [r2, #0]
 8005058:	061e      	lsls	r6, r3, #24
 800505a:	d4f0      	bmi.n	800503e <HAL_UART_Transmit+0x7e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800505c:	f7fc ffdc 	bl	8002018 <HAL_GetTick>
 8005060:	eba0 0309 	sub.w	r3, r0, r9
 8005064:	429f      	cmp	r7, r3
 8005066:	d311      	bcc.n	800508c <HAL_UART_Transmit+0xcc>
 8005068:	b187      	cbz	r7, 800508c <HAL_UART_Transmit+0xcc>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800506a:	6822      	ldr	r2, [r4, #0]
 800506c:	68d3      	ldr	r3, [r2, #12]
 800506e:	e7f2      	b.n	8005056 <HAL_UART_Transmit+0x96>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005070:	f838 3b02 	ldrh.w	r3, [r8], #2
 8005074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005078:	e7cf      	b.n	800501a <HAL_UART_Transmit+0x5a>
    return HAL_BUSY;
 800507a:	2002      	movs	r0, #2
}
 800507c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005080:	6923      	ldr	r3, [r4, #16]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1bb      	bne.n	8004ffe <HAL_UART_Transmit+0x3e>
      pdata16bits = (const uint16_t *) pData;
 8005086:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8005088:	461d      	mov	r5, r3
 800508a:	e7b8      	b.n	8004ffe <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 800508c:	2320      	movs	r3, #32
 800508e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8005092:	2003      	movs	r0, #3
}
 8005094:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005098:	1c78      	adds	r0, r7, #1
 800509a:	d0c7      	beq.n	800502c <HAL_UART_Transmit+0x6c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800509c:	6813      	ldr	r3, [r2, #0]
 800509e:	065b      	lsls	r3, r3, #25
 80050a0:	d4c7      	bmi.n	8005032 <HAL_UART_Transmit+0x72>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050a2:	f7fc ffb9 	bl	8002018 <HAL_GetTick>
 80050a6:	eba0 0309 	sub.w	r3, r0, r9
 80050aa:	429f      	cmp	r7, r3
 80050ac:	d3ee      	bcc.n	800508c <HAL_UART_Transmit+0xcc>
 80050ae:	2f00      	cmp	r7, #0
 80050b0:	d0ec      	beq.n	800508c <HAL_UART_Transmit+0xcc>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050b2:	6822      	ldr	r2, [r4, #0]
 80050b4:	68d3      	ldr	r3, [r2, #12]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050b6:	6813      	ldr	r3, [r2, #0]
 80050b8:	065b      	lsls	r3, r3, #25
 80050ba:	d5f2      	bpl.n	80050a2 <HAL_UART_Transmit+0xe2>
 80050bc:	e7b9      	b.n	8005032 <HAL_UART_Transmit+0x72>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050be:	f838 3b02 	ldrh.w	r3, [r8], #2
 80050c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050c6:	e7be      	b.n	8005046 <HAL_UART_Transmit+0x86>

080050c8 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80050c8:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	d120      	bne.n	8005112 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80050d0:	b101      	cbz	r1, 80050d4 <HAL_UART_Receive_IT+0xc>
 80050d2:	b90a      	cbnz	r2, 80050d8 <HAL_UART_Receive_IT+0x10>
      return HAL_ERROR;
 80050d4:	2001      	movs	r0, #1
}
 80050d6:	4770      	bx	lr
{
 80050d8:	b410      	push	{r4}
  if (huart->Init.Parity != UART_PARITY_NONE)
 80050da:	6904      	ldr	r4, [r0, #16]
  huart->pRxBuffPtr = pData;
 80050dc:	6281      	str	r1, [r0, #40]	@ 0x28
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050de:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050e0:	2122      	movs	r1, #34	@ 0x22
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e2:	6303      	str	r3, [r0, #48]	@ 0x30
  huart->RxXferSize = Size;
 80050e4:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80050e6:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050e8:	6443      	str	r3, [r0, #68]	@ 0x44
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050ea:	6803      	ldr	r3, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050ec:	f880 1042 	strb.w	r1, [r0, #66]	@ 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 80050f0:	b11c      	cbz	r4, 80050fa <HAL_UART_Receive_IT+0x32>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050f8:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050fa:	695a      	ldr	r2, [r3, #20]
}
 80050fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005100:	f042 0201 	orr.w	r2, r2, #1
 8005104:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	f042 0220 	orr.w	r2, r2, #32
    return (UART_Start_Receive_IT(huart, pData, Size));
 800510c:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800510e:	60da      	str	r2, [r3, #12]
}
 8005110:	4770      	bx	lr
    return HAL_BUSY;
 8005112:	2002      	movs	r0, #2
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop

08005118 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop

0800511c <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop

08005120 <UART_DMAAbortOnError>:
{
 8005120:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005122:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8005124:	2300      	movs	r3, #0
 8005126:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  HAL_UART_ErrorCallback(huart);
 8005128:	f7ff fff8 	bl	800511c <HAL_UART_ErrorCallback>
}
 800512c:	bd08      	pop	{r3, pc}
 800512e:	bf00      	nop

08005130 <HAL_UARTEx_RxEventCallback>:
}
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop

08005134 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005134:	6883      	ldr	r3, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005136:	6801      	ldr	r1, [r0, #0]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005138:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800513a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800513e:	d042      	beq.n	80051c6 <UART_Receive_IT.part.0.isra.0+0x92>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005140:	2b00      	cmp	r3, #0
 8005142:	d039      	beq.n	80051b8 <UART_Receive_IT.part.0.isra.0+0x84>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005144:	684b      	ldr	r3, [r1, #4]
 8005146:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800514a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800514c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800514e:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 8005150:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
      huart->pRxBuffPtr += 2U;
 8005152:	6282      	str	r2, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8005154:	3b01      	subs	r3, #1
 8005156:	b29b      	uxth	r3, r3
 8005158:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800515a:	2b00      	cmp	r3, #0
 800515c:	d132      	bne.n	80051c4 <UART_Receive_IT.part.0.isra.0+0x90>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800515e:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005160:	6802      	ldr	r2, [r0, #0]
 8005162:	68d1      	ldr	r1, [r2, #12]
 8005164:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8005168:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800516a:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800516c:	68d1      	ldr	r1, [r2, #12]
 800516e:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8005172:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005174:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005176:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800517a:	f021 0101 	bic.w	r1, r1, #1
 800517e:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005180:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005184:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005186:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8005188:	2901      	cmp	r1, #1
 800518a:	d125      	bne.n	80051d8 <UART_Receive_IT.part.0.isra.0+0xa4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800518c:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800518e:	f102 030c 	add.w	r3, r2, #12
 8005192:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005196:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519a:	f102 0c0c 	add.w	ip, r2, #12
 800519e:	e84c 3100 	strex	r1, r3, [ip]
 80051a2:	2900      	cmp	r1, #0
 80051a4:	d1f3      	bne.n	800518e <UART_Receive_IT.part.0.isra.0+0x5a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051a6:	6813      	ldr	r3, [r2, #0]
 80051a8:	06db      	lsls	r3, r3, #27
 80051aa:	d41a      	bmi.n	80051e2 <UART_Receive_IT.part.0.isra.0+0xae>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051ac:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80051ae:	f7ff ffbf 	bl	8005130 <HAL_UARTEx_RxEventCallback>
}
 80051b2:	b003      	add	sp, #12
 80051b4:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80051b8:	6903      	ldr	r3, [r0, #16]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1c2      	bne.n	8005144 <UART_Receive_IT.part.0.isra.0+0x10>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80051be:	684b      	ldr	r3, [r1, #4]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	e7c2      	b.n	800514a <UART_Receive_IT.part.0.isra.0+0x16>
 80051c4:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051c6:	6903      	ldr	r3, [r0, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1f8      	bne.n	80051be <UART_Receive_IT.part.0.isra.0+0x8a>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051cc:	684b      	ldr	r3, [r1, #4]
 80051ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d2:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 80051d6:	e7bb      	b.n	8005150 <UART_Receive_IT.part.0.isra.0+0x1c>
        HAL_UART_RxCpltCallback(huart);
 80051d8:	f7fc fc10 	bl	80019fc <HAL_UART_RxCpltCallback>
}
 80051dc:	b003      	add	sp, #12
 80051de:	f85d fb04 	ldr.w	pc, [sp], #4
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051e2:	2300      	movs	r3, #0
 80051e4:	9301      	str	r3, [sp, #4]
 80051e6:	6813      	ldr	r3, [r2, #0]
 80051e8:	9301      	str	r3, [sp, #4]
 80051ea:	6853      	ldr	r3, [r2, #4]
 80051ec:	9301      	str	r3, [sp, #4]
 80051ee:	9b01      	ldr	r3, [sp, #4]
 80051f0:	e7dc      	b.n	80051ac <UART_Receive_IT.part.0.isra.0+0x78>
 80051f2:	bf00      	nop

080051f4 <HAL_UART_IRQHandler>:
{
 80051f4:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80051f6:	6803      	ldr	r3, [r0, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80051fa:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80051fc:	6959      	ldr	r1, [r3, #20]
  if (errorflags == RESET)
 80051fe:	f012 0f0f 	tst.w	r2, #15
{
 8005202:	b083      	sub	sp, #12
 8005204:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8005206:	d172      	bne.n	80052ee <HAL_UART_IRQHandler+0xfa>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005208:	0691      	lsls	r1, r2, #26
 800520a:	d502      	bpl.n	8005212 <HAL_UART_IRQHandler+0x1e>
 800520c:	06a9      	lsls	r1, r5, #26
 800520e:	f100 80a5 	bmi.w	800535c <HAL_UART_IRQHandler+0x168>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005212:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005214:	2901      	cmp	r1, #1
 8005216:	d00b      	beq.n	8005230 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005218:	0610      	lsls	r0, r2, #24
 800521a:	d502      	bpl.n	8005222 <HAL_UART_IRQHandler+0x2e>
 800521c:	0629      	lsls	r1, r5, #24
 800521e:	f100 80a7 	bmi.w	8005370 <HAL_UART_IRQHandler+0x17c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005222:	0652      	lsls	r2, r2, #25
 8005224:	d502      	bpl.n	800522c <HAL_UART_IRQHandler+0x38>
 8005226:	0668      	lsls	r0, r5, #25
 8005228:	f100 80c1 	bmi.w	80053ae <HAL_UART_IRQHandler+0x1ba>
}
 800522c:	b003      	add	sp, #12
 800522e:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005230:	06d0      	lsls	r0, r2, #27
 8005232:	d5f1      	bpl.n	8005218 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8005234:	06e9      	lsls	r1, r5, #27
 8005236:	d5ef      	bpl.n	8005218 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005238:	2200      	movs	r2, #0
 800523a:	9201      	str	r2, [sp, #4]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	9201      	str	r2, [sp, #4]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	9201      	str	r2, [sp, #4]
 8005244:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005246:	6959      	ldr	r1, [r3, #20]
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005248:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800524a:	064d      	lsls	r5, r1, #25
 800524c:	f140 813d 	bpl.w	80054ca <HAL_UART_IRQHandler+0x2d6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005250:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005252:	6801      	ldr	r1, [r0, #0]
 8005254:	6849      	ldr	r1, [r1, #4]
 8005256:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8005258:	2900      	cmp	r1, #0
 800525a:	f000 8170 	beq.w	800553e <HAL_UART_IRQHandler+0x34a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800525e:	4291      	cmp	r1, r2
 8005260:	f080 816d 	bcs.w	800553e <HAL_UART_IRQHandler+0x34a>
        huart->RxXferCount = nb_remaining_rx_data;
 8005264:	85e1      	strh	r1, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005266:	69c1      	ldr	r1, [r0, #28]
 8005268:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800526c:	d036      	beq.n	80052dc <HAL_UART_IRQHandler+0xe8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800526e:	f103 020c 	add.w	r2, r3, #12
 8005272:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005276:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527a:	f103 050c 	add.w	r5, r3, #12
 800527e:	e845 2100 	strex	r1, r2, [r5]
 8005282:	2900      	cmp	r1, #0
 8005284:	d1f3      	bne.n	800526e <HAL_UART_IRQHandler+0x7a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	f103 0214 	add.w	r2, r3, #20
 800528a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005292:	f103 0514 	add.w	r5, r3, #20
 8005296:	e845 2100 	strex	r1, r2, [r5]
 800529a:	2900      	cmp	r1, #0
 800529c:	d1f3      	bne.n	8005286 <HAL_UART_IRQHandler+0x92>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	f103 0214 	add.w	r2, r3, #20
 80052a2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052a6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	f103 0514 	add.w	r5, r3, #20
 80052ae:	e845 2100 	strex	r1, r2, [r5]
 80052b2:	2900      	cmp	r1, #0
 80052b4:	d1f3      	bne.n	800529e <HAL_UART_IRQHandler+0xaa>
          huart->RxState = HAL_UART_STATE_READY;
 80052b6:	2220      	movs	r2, #32
 80052b8:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052bc:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	f103 020c 	add.w	r2, r3, #12
 80052c2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	f103 050c 	add.w	r5, r3, #12
 80052ce:	e845 2100 	strex	r1, r2, [r5]
 80052d2:	2900      	cmp	r1, #0
 80052d4:	d1f3      	bne.n	80052be <HAL_UART_IRQHandler+0xca>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052d6:	f7fc ff95 	bl	8002204 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052da:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052dc:	2302      	movs	r3, #2
 80052de:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052e0:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
 80052e2:	1a51      	subs	r1, r2, r1
 80052e4:	4620      	mov	r0, r4
 80052e6:	b289      	uxth	r1, r1
 80052e8:	f7ff ff22 	bl	8005130 <HAL_UARTEx_RxEventCallback>
 80052ec:	e79e      	b.n	800522c <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80052ee:	f011 0101 	ands.w	r1, r1, #1
 80052f2:	f040 80cf 	bne.w	8005494 <HAL_UART_IRQHandler+0x2a0>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80052f6:	f415 7f90 	tst.w	r5, #288	@ 0x120
 80052fa:	d08a      	beq.n	8005212 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80052fc:	07d0      	lsls	r0, r2, #31
 80052fe:	d50b      	bpl.n	8005318 <HAL_UART_IRQHandler+0x124>
 8005300:	05e8      	lsls	r0, r5, #23
 8005302:	f140 80de 	bpl.w	80054c2 <HAL_UART_IRQHandler+0x2ce>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005306:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8005308:	f040 0001 	orr.w	r0, r0, #1
 800530c:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800530e:	0750      	lsls	r0, r2, #29
 8005310:	d55c      	bpl.n	80053cc <HAL_UART_IRQHandler+0x1d8>
 8005312:	2900      	cmp	r1, #0
 8005314:	f040 80c2 	bne.w	800549c <HAL_UART_IRQHandler+0x2a8>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005318:	0790      	lsls	r0, r2, #30
 800531a:	d566      	bpl.n	80053ea <HAL_UART_IRQHandler+0x1f6>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800531c:	0710      	lsls	r0, r2, #28
 800531e:	f100 80cd 	bmi.w	80054bc <HAL_UART_IRQHandler+0x2c8>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005322:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005324:	2900      	cmp	r1, #0
 8005326:	d081      	beq.n	800522c <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005328:	0691      	lsls	r1, r2, #26
 800532a:	d509      	bpl.n	8005340 <HAL_UART_IRQHandler+0x14c>
 800532c:	06aa      	lsls	r2, r5, #26
 800532e:	d507      	bpl.n	8005340 <HAL_UART_IRQHandler+0x14c>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005330:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8005334:	2a22      	cmp	r2, #34	@ 0x22
 8005336:	d103      	bne.n	8005340 <HAL_UART_IRQHandler+0x14c>
 8005338:	4620      	mov	r0, r4
 800533a:	f7ff fefb 	bl	8005134 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005342:	6c61      	ldr	r1, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005344:	f002 0240 	and.w	r2, r2, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005348:	f001 0108 	and.w	r1, r1, #8
 800534c:	ea52 0501 	orrs.w	r5, r2, r1
 8005350:	d155      	bne.n	80053fe <HAL_UART_IRQHandler+0x20a>
        HAL_UART_ErrorCallback(huart);
 8005352:	4620      	mov	r0, r4
 8005354:	f7ff fee2 	bl	800511c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005358:	6465      	str	r5, [r4, #68]	@ 0x44
 800535a:	e767      	b.n	800522c <HAL_UART_IRQHandler+0x38>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800535c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8005360:	2b22      	cmp	r3, #34	@ 0x22
 8005362:	f47f af63 	bne.w	800522c <HAL_UART_IRQHandler+0x38>
}
 8005366:	b003      	add	sp, #12
 8005368:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800536c:	f7ff bee2 	b.w	8005134 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005370:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8005374:	2a21      	cmp	r2, #33	@ 0x21
 8005376:	f47f af59 	bne.w	800522c <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800537a:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800537c:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800537e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8005382:	f000 80e5 	beq.w	8005550 <HAL_UART_IRQHandler+0x35c>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005386:	1c51      	adds	r1, r2, #1
 8005388:	6221      	str	r1, [r4, #32]
 800538a:	7812      	ldrb	r2, [r2, #0]
 800538c:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 800538e:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8005390:	3a01      	subs	r2, #1
 8005392:	b292      	uxth	r2, r2
 8005394:	84e2      	strh	r2, [r4, #38]	@ 0x26
 8005396:	2a00      	cmp	r2, #0
 8005398:	f47f af48 	bne.w	800522c <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800539c:	68da      	ldr	r2, [r3, #12]
 800539e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80053a2:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053aa:	60da      	str	r2, [r3, #12]
 80053ac:	e73e      	b.n	800522c <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053ae:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80053b0:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80053b6:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80053b8:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80053ba:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 80053be:	f7ff feab 	bl	8005118 <HAL_UART_TxCpltCallback>
    return;
 80053c2:	e733      	b.n	800522c <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053c4:	05e8      	lsls	r0, r5, #23
 80053c6:	d49e      	bmi.n	8005306 <HAL_UART_IRQHandler+0x112>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053c8:	0750      	lsls	r0, r2, #29
 80053ca:	d467      	bmi.n	800549c <HAL_UART_IRQHandler+0x2a8>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053cc:	0790      	lsls	r0, r2, #30
 80053ce:	d50c      	bpl.n	80053ea <HAL_UART_IRQHandler+0x1f6>
 80053d0:	2900      	cmp	r1, #0
 80053d2:	d0a3      	beq.n	800531c <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053d4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80053d6:	f041 0104 	orr.w	r1, r1, #4
 80053da:	6461      	str	r1, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053dc:	0711      	lsls	r1, r2, #28
 80053de:	d5a0      	bpl.n	8005322 <HAL_UART_IRQHandler+0x12e>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053e0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80053e2:	f041 0108 	orr.w	r1, r1, #8
 80053e6:	6461      	str	r1, [r4, #68]	@ 0x44
 80053e8:	e79b      	b.n	8005322 <HAL_UART_IRQHandler+0x12e>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053ea:	0710      	lsls	r0, r2, #28
 80053ec:	d599      	bpl.n	8005322 <HAL_UART_IRQHandler+0x12e>
 80053ee:	f005 0020 	and.w	r0, r5, #32
 80053f2:	4308      	orrs	r0, r1
 80053f4:	d1f4      	bne.n	80053e0 <HAL_UART_IRQHandler+0x1ec>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053f6:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80053f8:	2a00      	cmp	r2, #0
 80053fa:	d1a1      	bne.n	8005340 <HAL_UART_IRQHandler+0x14c>
 80053fc:	e716      	b.n	800522c <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fe:	f103 020c 	add.w	r2, r3, #12
 8005402:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005406:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800540a:	f103 000c 	add.w	r0, r3, #12
 800540e:	e840 2100 	strex	r1, r2, [r0]
 8005412:	2900      	cmp	r1, #0
 8005414:	d1f3      	bne.n	80053fe <HAL_UART_IRQHandler+0x20a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005416:	f103 0214 	add.w	r2, r3, #20
 800541a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800541e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005422:	f103 0014 	add.w	r0, r3, #20
 8005426:	e840 2100 	strex	r1, r2, [r0]
 800542a:	2900      	cmp	r1, #0
 800542c:	d1f3      	bne.n	8005416 <HAL_UART_IRQHandler+0x222>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800542e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005430:	2a01      	cmp	r2, #1
 8005432:	d022      	beq.n	800547a <HAL_UART_IRQHandler+0x286>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005434:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005436:	2120      	movs	r1, #32
 8005438:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543c:	6322      	str	r2, [r4, #48]	@ 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543e:	695a      	ldr	r2, [r3, #20]
 8005440:	0655      	lsls	r5, r2, #25
 8005442:	d534      	bpl.n	80054ae <HAL_UART_IRQHandler+0x2ba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005444:	f103 0214 	add.w	r2, r3, #20
 8005448:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800544c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005450:	f103 0014 	add.w	r0, r3, #20
 8005454:	e840 2100 	strex	r1, r2, [r0]
 8005458:	2900      	cmp	r1, #0
 800545a:	d1f3      	bne.n	8005444 <HAL_UART_IRQHandler+0x250>
          if (huart->hdmarx != NULL)
 800545c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800545e:	b330      	cbz	r0, 80054ae <HAL_UART_IRQHandler+0x2ba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005460:	4b41      	ldr	r3, [pc, #260]	@ (8005568 <HAL_UART_IRQHandler+0x374>)
 8005462:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005464:	f7fc ff18 	bl	8002298 <HAL_DMA_Abort_IT>
 8005468:	2800      	cmp	r0, #0
 800546a:	f43f aedf 	beq.w	800522c <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800546e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8005470:	6d03      	ldr	r3, [r0, #80]	@ 0x50
}
 8005472:	b003      	add	sp, #12
 8005474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005478:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	f103 020c 	add.w	r2, r3, #12
 800547e:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005482:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005486:	f103 000c 	add.w	r0, r3, #12
 800548a:	e840 2100 	strex	r1, r2, [r0]
 800548e:	2900      	cmp	r1, #0
 8005490:	d1f3      	bne.n	800547a <HAL_UART_IRQHandler+0x286>
 8005492:	e7cf      	b.n	8005434 <HAL_UART_IRQHandler+0x240>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005494:	07d0      	lsls	r0, r2, #31
 8005496:	d495      	bmi.n	80053c4 <HAL_UART_IRQHandler+0x1d0>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005498:	0750      	lsls	r0, r2, #29
 800549a:	d50c      	bpl.n	80054b6 <HAL_UART_IRQHandler+0x2c2>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800549c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800549e:	f041 0102 	orr.w	r1, r1, #2
 80054a2:	6461      	str	r1, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054a4:	0791      	lsls	r1, r2, #30
 80054a6:	d495      	bmi.n	80053d4 <HAL_UART_IRQHandler+0x1e0>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054a8:	0711      	lsls	r1, r2, #28
 80054aa:	d499      	bmi.n	80053e0 <HAL_UART_IRQHandler+0x1ec>
 80054ac:	e739      	b.n	8005322 <HAL_UART_IRQHandler+0x12e>
            HAL_UART_ErrorCallback(huart);
 80054ae:	4620      	mov	r0, r4
 80054b0:	f7ff fe34 	bl	800511c <HAL_UART_ErrorCallback>
 80054b4:	e6ba      	b.n	800522c <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054b6:	0791      	lsls	r1, r2, #30
 80054b8:	d48c      	bmi.n	80053d4 <HAL_UART_IRQHandler+0x1e0>
 80054ba:	e7f5      	b.n	80054a8 <HAL_UART_IRQHandler+0x2b4>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054bc:	06a9      	lsls	r1, r5, #26
 80054be:	d48f      	bmi.n	80053e0 <HAL_UART_IRQHandler+0x1ec>
 80054c0:	e799      	b.n	80053f6 <HAL_UART_IRQHandler+0x202>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054c2:	0750      	lsls	r0, r2, #29
 80054c4:	f53f af28 	bmi.w	8005318 <HAL_UART_IRQHandler+0x124>
 80054c8:	e780      	b.n	80053cc <HAL_UART_IRQHandler+0x1d8>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054ca:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 80054cc:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
 80054ce:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054d0:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 80054d2:	2900      	cmp	r1, #0
 80054d4:	f43f aeaa 	beq.w	800522c <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054d8:	1a12      	subs	r2, r2, r0
 80054da:	b291      	uxth	r1, r2
          && (nb_rx_data > 0U))
 80054dc:	2900      	cmp	r1, #0
 80054de:	f43f aea5 	beq.w	800522c <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054e2:	f103 020c 	add.w	r2, r3, #12
 80054e6:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054ea:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ee:	f103 050c 	add.w	r5, r3, #12
 80054f2:	e845 2000 	strex	r0, r2, [r5]
 80054f6:	2800      	cmp	r0, #0
 80054f8:	d1f3      	bne.n	80054e2 <HAL_UART_IRQHandler+0x2ee>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fa:	f103 0214 	add.w	r2, r3, #20
 80054fe:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005502:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005506:	f103 0514 	add.w	r5, r3, #20
 800550a:	e845 2000 	strex	r0, r2, [r5]
 800550e:	2800      	cmp	r0, #0
 8005510:	d1f3      	bne.n	80054fa <HAL_UART_IRQHandler+0x306>
        huart->RxState = HAL_UART_STATE_READY;
 8005512:	2220      	movs	r2, #32
 8005514:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005518:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	f103 020c 	add.w	r2, r3, #12
 800551e:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005522:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005526:	f103 050c 	add.w	r5, r3, #12
 800552a:	e845 2000 	strex	r0, r2, [r5]
 800552e:	2800      	cmp	r0, #0
 8005530:	d1f3      	bne.n	800551a <HAL_UART_IRQHandler+0x326>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005532:	2302      	movs	r3, #2
 8005534:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005536:	4620      	mov	r0, r4
 8005538:	f7ff fdfa 	bl	8005130 <HAL_UARTEx_RxEventCallback>
 800553c:	e676      	b.n	800522c <HAL_UART_IRQHandler+0x38>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800553e:	4291      	cmp	r1, r2
 8005540:	f47f ae74 	bne.w	800522c <HAL_UART_IRQHandler+0x38>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005544:	69c3      	ldr	r3, [r0, #28]
 8005546:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800554a:	f47f ae6f 	bne.w	800522c <HAL_UART_IRQHandler+0x38>
 800554e:	e7f0      	b.n	8005532 <HAL_UART_IRQHandler+0x33e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005550:	6921      	ldr	r1, [r4, #16]
 8005552:	2900      	cmp	r1, #0
 8005554:	f47f af17 	bne.w	8005386 <HAL_UART_IRQHandler+0x192>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005558:	f832 1b02 	ldrh.w	r1, [r2], #2
 800555c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005560:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005562:	6222      	str	r2, [r4, #32]
 8005564:	e713      	b.n	800538e <HAL_UART_IRQHandler+0x19a>
 8005566:	bf00      	nop
 8005568:	08005121 	.word	0x08005121

0800556c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800556c:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800556e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005572:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005574:	f001 fb20 	bl	8006bb8 <xTaskGetSchedulerState>
 8005578:	2801      	cmp	r0, #1
 800557a:	d100      	bne.n	800557e <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800557c:	bd08      	pop	{r3, pc}
 800557e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8005582:	f001 be1f 	b.w	80071c4 <xPortSysTickHandler>
 8005586:	bf00      	nop

08005588 <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005588:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800558c:	b92b      	cbnz	r3, 800559a <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800558e:	4b06      	ldr	r3, [pc, #24]	@ (80055a8 <osKernelInitialize+0x20>)
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	b928      	cbnz	r0, 80055a0 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005594:	2201      	movs	r2, #1
 8005596:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005598:	4770      	bx	lr
    stat = osErrorISR;
 800559a:	f06f 0005 	mvn.w	r0, #5
 800559e:	4770      	bx	lr
    } else {
      stat = osError;
 80055a0:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	20001344 	.word	0x20001344

080055ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80055ac:	b510      	push	{r4, lr}
 80055ae:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80055b2:	b974      	cbnz	r4, 80055d2 <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 80055b4:	4b08      	ldr	r3, [pc, #32]	@ (80055d8 <osKernelStart+0x2c>)
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	2a01      	cmp	r2, #1
 80055ba:	d107      	bne.n	80055cc <osKernelStart+0x20>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055bc:	4907      	ldr	r1, [pc, #28]	@ (80055dc <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80055be:	2202      	movs	r2, #2
 80055c0:	77cc      	strb	r4, [r1, #31]
 80055c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80055c4:	f001 f8dc 	bl	8006780 <vTaskStartScheduler>
      stat = osOK;
 80055c8:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 80055ca:	bd10      	pop	{r4, pc}
      stat = osError;
 80055cc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80055d0:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 80055d2:	f06f 0005 	mvn.w	r0, #5
}
 80055d6:	bd10      	pop	{r4, pc}
 80055d8:	20001344 	.word	0x20001344
 80055dc:	e000ed00 	.word	0xe000ed00

080055e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80055e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055e2:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80055e4:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80055e6:	4614      	mov	r4, r2
  hTask = NULL;
 80055e8:	9505      	str	r5, [sp, #20]
 80055ea:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80055ee:	b112      	cbz	r2, 80055f6 <osThreadNew+0x16>
      if (attr->priority != osPriorityNone) {
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
        return (NULL);
 80055f0:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 80055f2:	b007      	add	sp, #28
 80055f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (func != NULL)) {
 80055f6:	2800      	cmp	r0, #0
 80055f8:	d0fa      	beq.n	80055f0 <osThreadNew+0x10>
    if (attr != NULL) {
 80055fa:	b304      	cbz	r4, 800563e <osThreadNew+0x5e>
      if (attr->priority != osPriorityNone) {
 80055fc:	69a3      	ldr	r3, [r4, #24]
 80055fe:	b9d3      	cbnz	r3, 8005636 <osThreadNew+0x56>
    prio  = (UBaseType_t)osPriorityNormal;
 8005600:	2318      	movs	r3, #24
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005602:	6862      	ldr	r2, [r4, #4]
 8005604:	07d2      	lsls	r2, r2, #31
 8005606:	d4f3      	bmi.n	80055f0 <osThreadNew+0x10>
      if (attr->stack_size > 0U) {
 8005608:	6965      	ldr	r5, [r4, #20]
 800560a:	b32d      	cbz	r5, 8005658 <osThreadNew+0x78>
        stack = attr->stack_size / sizeof(StackType_t);
 800560c:	08aa      	lsrs	r2, r5, #2
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800560e:	68a6      	ldr	r6, [r4, #8]
      if (attr->name != NULL) {
 8005610:	f8d4 c000 	ldr.w	ip, [r4]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005614:	68e7      	ldr	r7, [r4, #12]
 8005616:	b30e      	cbz	r6, 800565c <osThreadNew+0x7c>
 8005618:	2fa7      	cmp	r7, #167	@ 0xa7
 800561a:	d9e9      	bls.n	80055f0 <osThreadNew+0x10>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800561c:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800561e:	2c00      	cmp	r4, #0
 8005620:	d0e6      	beq.n	80055f0 <osThreadNew+0x10>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005622:	2d00      	cmp	r5, #0
 8005624:	d0e4      	beq.n	80055f0 <osThreadNew+0x10>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	e9cd 4601 	strd	r4, r6, [sp, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	4661      	mov	r1, ip
 8005630:	f000 ff6a 	bl	8006508 <xTaskCreateStatic>
 8005634:	e7dd      	b.n	80055f2 <osThreadNew+0x12>
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005636:	1e5d      	subs	r5, r3, #1
 8005638:	2d37      	cmp	r5, #55	@ 0x37
 800563a:	d9e2      	bls.n	8005602 <osThreadNew+0x22>
 800563c:	e7d8      	b.n	80055f0 <osThreadNew+0x10>
 800563e:	2280      	movs	r2, #128	@ 0x80
    prio  = (UBaseType_t)osPriorityNormal;
 8005640:	2318      	movs	r3, #24
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	460b      	mov	r3, r1
 8005646:	4621      	mov	r1, r4
 8005648:	ac05      	add	r4, sp, #20
 800564a:	9401      	str	r4, [sp, #4]
 800564c:	f000 ff96 	bl	800657c <xTaskCreate>
 8005650:	2801      	cmp	r0, #1
 8005652:	d1cd      	bne.n	80055f0 <osThreadNew+0x10>
  return ((osThreadId_t)hTask);
 8005654:	9805      	ldr	r0, [sp, #20]
 8005656:	e7cc      	b.n	80055f2 <osThreadNew+0x12>
    stack = configMINIMAL_STACK_SIZE;
 8005658:	2280      	movs	r2, #128	@ 0x80
 800565a:	e7d8      	b.n	800560e <osThreadNew+0x2e>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800565c:	2f00      	cmp	r7, #0
 800565e:	d1c7      	bne.n	80055f0 <osThreadNew+0x10>
 8005660:	6924      	ldr	r4, [r4, #16]
 8005662:	2c00      	cmp	r4, #0
 8005664:	d1c4      	bne.n	80055f0 <osThreadNew+0x10>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005666:	b292      	uxth	r2, r2
 8005668:	4664      	mov	r4, ip
 800566a:	e7ea      	b.n	8005642 <osThreadNew+0x62>

0800566c <osDelay>:
 800566c:	f3ef 8205 	mrs	r2, IPSR
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8005670:	b93a      	cbnz	r2, 8005682 <osDelay+0x16>
osStatus_t osDelay (uint32_t ticks) {
 8005672:	b508      	push	{r3, lr}
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8005674:	b908      	cbnz	r0, 800567a <osDelay+0xe>
    stat = osOK;
 8005676:	2000      	movs	r0, #0
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 8005678:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800567a:	f001 f82b 	bl	80066d4 <vTaskDelay>
    stat = osOK;
 800567e:	2000      	movs	r0, #0
}
 8005680:	bd08      	pop	{r3, pc}
    stat = osErrorISR;
 8005682:	f06f 0005 	mvn.w	r0, #5
}
 8005686:	4770      	bx	lr

08005688 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005688:	4b04      	ldr	r3, [pc, #16]	@ (800569c <vApplicationGetIdleTaskMemory+0x14>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800568a:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800568c:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800568e:	4c04      	ldr	r4, [pc, #16]	@ (80056a0 <vApplicationGetIdleTaskMemory+0x18>)
 8005690:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005692:	2380      	movs	r3, #128	@ 0x80
}
 8005694:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005698:	6013      	str	r3, [r2, #0]
}
 800569a:	4770      	bx	lr
 800569c:	2000129c 	.word	0x2000129c
 80056a0:	2000109c 	.word	0x2000109c

080056a4 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80056a4:	4b05      	ldr	r3, [pc, #20]	@ (80056bc <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80056a6:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80056a8:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80056aa:	4c05      	ldr	r4, [pc, #20]	@ (80056c0 <vApplicationGetTimerTaskMemory+0x1c>)
 80056ac:	600c      	str	r4, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80056ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
}
 80056b2:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80056b6:	6013      	str	r3, [r2, #0]
}
 80056b8:	4770      	bx	lr
 80056ba:	bf00      	nop
 80056bc:	20000ff4 	.word	0x20000ff4
 80056c0:	20000bf4 	.word	0x20000bf4

080056c4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056c4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056c8:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056cc:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056ce:	e9c0 3101 	strd	r3, r1, [r0, #4]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056d2:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056d6:	6002      	str	r2, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056d8:	4770      	bx	lr
 80056da:	bf00      	nop

080056dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056dc:	2300      	movs	r3, #0
 80056de:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop

080056e4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80056e4:	6842      	ldr	r2, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80056e6:	6803      	ldr	r3, [r0, #0]
{
 80056e8:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056ea:	6894      	ldr	r4, [r2, #8]
	( pxList->uxNumberOfItems )++;
 80056ec:	3301      	adds	r3, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056ee:	e9c1 2401 	strd	r2, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056f2:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056f4:	6091      	str	r1, [r2, #8]
}
 80056f6:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 80056fa:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80056fc:	6003      	str	r3, [r0, #0]
}
 80056fe:	4770      	bx	lr

08005700 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005700:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005702:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005704:	1c6b      	adds	r3, r5, #1
 8005706:	d010      	beq.n	800572a <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005708:	f100 0308 	add.w	r3, r0, #8
 800570c:	461c      	mov	r4, r3
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	681a      	ldr	r2, [r3, #0]
 8005712:	42aa      	cmp	r2, r5
 8005714:	d9fa      	bls.n	800570c <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8005716:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8005718:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800571a:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800571c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800571e:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8005720:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8005722:	6108      	str	r0, [r1, #16]
}
 8005724:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 8005726:	6002      	str	r2, [r0, #0]
}
 8005728:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800572a:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800572c:	6863      	ldr	r3, [r4, #4]
 800572e:	e7f2      	b.n	8005716 <vListInsert+0x16>

08005730 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005730:	6903      	ldr	r3, [r0, #16]
{
 8005732:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005734:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005738:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800573a:	608a      	str	r2, [r1, #8]
	if( pxList->pxIndex == pxItemToRemove )
 800573c:	4284      	cmp	r4, r0
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800573e:	6051      	str	r1, [r2, #4]
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005740:	bf08      	it	eq
 8005742:	605a      	streq	r2, [r3, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;
 8005744:	681a      	ldr	r2, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8005746:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxContainer = NULL;
 800574a:	2100      	movs	r1, #0
	( pxList->uxNumberOfItems )--;
 800574c:	3a01      	subs	r2, #1
	pxItemToRemove->pxContainer = NULL;
 800574e:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005750:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8005752:	6818      	ldr	r0, [r3, #0]
}
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop

08005758 <prvCopyDataToQueue>:

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005758:	6c03      	ldr	r3, [r0, #64]	@ 0x40
{
 800575a:	b570      	push	{r4, r5, r6, lr}
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800575c:	6b85      	ldr	r5, [r0, #56]	@ 0x38
{
 800575e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005760:	b92b      	cbnz	r3, 800576e <prvCopyDataToQueue+0x16>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005762:	6806      	ldr	r6, [r0, #0]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005764:	3501      	adds	r5, #1
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005766:	b346      	cbz	r6, 80057ba <prvCopyDataToQueue+0x62>
BaseType_t xReturn = pdFALSE;
 8005768:	4618      	mov	r0, r3
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800576a:	63a5      	str	r5, [r4, #56]	@ 0x38

	return xReturn;
}
 800576c:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800576e:	4616      	mov	r6, r2
 8005770:	b982      	cbnz	r2, 8005794 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005772:	461a      	mov	r2, r3
 8005774:	6840      	ldr	r0, [r0, #4]
 8005776:	f003 fe6e 	bl	8009456 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800577a:	6863      	ldr	r3, [r4, #4]
 800577c:	6c21      	ldr	r1, [r4, #64]	@ 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800577e:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005780:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005782:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005784:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005786:	bf24      	itt	cs
 8005788:	6823      	ldrcs	r3, [r4, #0]
 800578a:	6063      	strcs	r3, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800578c:	3501      	adds	r5, #1
BaseType_t xReturn = pdFALSE;
 800578e:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005790:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8005792:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005794:	461a      	mov	r2, r3
 8005796:	68c0      	ldr	r0, [r0, #12]
 8005798:	f003 fe5d 	bl	8009456 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800579c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800579e:	68e3      	ldr	r3, [r4, #12]
 80057a0:	4251      	negs	r1, r2
 80057a2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057a4:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057a6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d202      	bcs.n	80057b2 <prvCopyDataToQueue+0x5a>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80057ac:	68a3      	ldr	r3, [r4, #8]
 80057ae:	440b      	add	r3, r1
 80057b0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80057b2:	2e02      	cmp	r6, #2
 80057b4:	d006      	beq.n	80057c4 <prvCopyDataToQueue+0x6c>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80057b6:	3501      	adds	r5, #1
 80057b8:	e7e9      	b.n	800578e <prvCopyDataToQueue+0x36>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80057ba:	6880      	ldr	r0, [r0, #8]
 80057bc:	f001 fa0c 	bl	8006bd8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80057c0:	60a6      	str	r6, [r4, #8]
 80057c2:	e7d2      	b.n	800576a <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057c4:	2d01      	cmp	r5, #1
 80057c6:	bf38      	it	cc
 80057c8:	2501      	movcc	r5, #1
BaseType_t xReturn = pdFALSE;
 80057ca:	2000      	movs	r0, #0
 80057cc:	e7cd      	b.n	800576a <prvCopyDataToQueue+0x12>
 80057ce:	bf00      	nop

080057d0 <xQueueGenericCreateStatic>:
	{
 80057d0:	b530      	push	{r4, r5, lr}
 80057d2:	b083      	sub	sp, #12
 80057d4:	f89d 5018 	ldrb.w	r5, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057d8:	b940      	cbnz	r0, 80057ec <xQueueGenericCreateStatic+0x1c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	e7fe      	b.n	80057ea <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 80057ec:	461c      	mov	r4, r3
 80057ee:	b183      	cbz	r3, 8005812 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80057f0:	2a00      	cmp	r2, #0
 80057f2:	d04a      	beq.n	800588a <xQueueGenericCreateStatic+0xba>
 80057f4:	b1b1      	cbz	r1, 8005824 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80057f6:	2350      	movs	r3, #80	@ 0x50
 80057f8:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 80057fa:	9b01      	ldr	r3, [sp, #4]
 80057fc:	2b50      	cmp	r3, #80	@ 0x50
 80057fe:	d01a      	beq.n	8005836 <xQueueGenericCreateStatic+0x66>
 8005800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	e7fe      	b.n	8005810 <xQueueGenericCreateStatic+0x40>
 8005812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8005822:	e7fe      	b.n	8005822 <xQueueGenericCreateStatic+0x52>
 8005824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005834:	e7fe      	b.n	8005834 <xQueueGenericCreateStatic+0x64>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005836:	9b01      	ldr	r3, [sp, #4]
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005838:	6022      	str	r2, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800583a:	2301      	movs	r3, #1
	pxNewQueue->uxItemSize = uxItemSize;
 800583c:	e9c4 010f 	strd	r0, r1, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005840:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
	taskENTER_CRITICAL();
 8005844:	f001 fc56 	bl	80070f4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005848:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	@ 0x3c
 800584c:	6821      	ldr	r1, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800584e:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005850:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005854:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005856:	440a      	add	r2, r1
 8005858:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800585a:	2200      	movs	r2, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800585c:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800585e:	63a2      	str	r2, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8005860:	22ff      	movs	r2, #255	@ 0xff
 8005862:	f884 2044 	strb.w	r2, [r4, #68]	@ 0x44
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005866:	60e3      	str	r3, [r4, #12]
		pxQueue->cTxLock = queueUNLOCKED;
 8005868:	f884 2045 	strb.w	r2, [r4, #69]	@ 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800586c:	f104 0010 	add.w	r0, r4, #16
 8005870:	f7ff ff28 	bl	80056c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005874:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005878:	f7ff ff24 	bl	80056c4 <vListInitialise>
	taskEXIT_CRITICAL();
 800587c:	f001 fc5c 	bl	8007138 <vPortExitCritical>
	}
 8005880:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 8005882:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
	}
 8005886:	b003      	add	sp, #12
 8005888:	bd30      	pop	{r4, r5, pc}
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800588a:	b939      	cbnz	r1, 800589c <xQueueGenericCreateStatic+0xcc>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800588c:	2350      	movs	r3, #80	@ 0x50
 800588e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005890:	9b01      	ldr	r3, [sp, #4]
 8005892:	2b50      	cmp	r3, #80	@ 0x50
 8005894:	d1b4      	bne.n	8005800 <xQueueGenericCreateStatic+0x30>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005896:	9b01      	ldr	r3, [sp, #4]
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005898:	4622      	mov	r2, r4
 800589a:	e7cd      	b.n	8005838 <xQueueGenericCreateStatic+0x68>
 800589c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058ac:	e7fe      	b.n	80058ac <xQueueGenericCreateStatic+0xdc>
 80058ae:	bf00      	nop

080058b0 <xQueueGenericSend>:
{
 80058b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058b4:	b085      	sub	sp, #20
 80058b6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80058b8:	2800      	cmp	r0, #0
 80058ba:	f000 811a 	beq.w	8005af2 <xQueueGenericSend+0x242>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058be:	4688      	mov	r8, r1
 80058c0:	461f      	mov	r7, r3
 80058c2:	4604      	mov	r4, r0
 80058c4:	2900      	cmp	r1, #0
 80058c6:	f000 80ae 	beq.w	8005a26 <xQueueGenericSend+0x176>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80058ca:	2f02      	cmp	r7, #2
 80058cc:	d10b      	bne.n	80058e6 <xQueueGenericSend+0x36>
 80058ce:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d008      	beq.n	80058e6 <xQueueGenericSend+0x36>
 80058d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d8:	f383 8811 	msr	BASEPRI, r3
 80058dc:	f3bf 8f6f 	isb	sy
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	e7fe      	b.n	80058e4 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058e6:	f001 f967 	bl	8006bb8 <xTaskGetSchedulerState>
 80058ea:	2800      	cmp	r0, #0
 80058ec:	f000 810a 	beq.w	8005b04 <xQueueGenericSend+0x254>
		taskENTER_CRITICAL();
 80058f0:	f001 fc00 	bl	80070f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058f4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80058f6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d37a      	bcc.n	80059f2 <xQueueGenericSend+0x142>
 80058fc:	2f02      	cmp	r7, #2
 80058fe:	d078      	beq.n	80059f2 <xQueueGenericSend+0x142>
 8005900:	2300      	movs	r3, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005902:	f104 0624 	add.w	r6, r4, #36	@ 0x24
				if( xTicksToWait == ( TickType_t ) 0 )
 8005906:	9a01      	ldr	r2, [sp, #4]
 8005908:	2a00      	cmp	r2, #0
 800590a:	f000 8108 	beq.w	8005b1e <xQueueGenericSend+0x26e>
				else if( xEntryTimeSet == pdFALSE )
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 80eb 	beq.w	8005aea <xQueueGenericSend+0x23a>
		taskEXIT_CRITICAL();
 8005914:	f001 fc10 	bl	8007138 <vPortExitCritical>
		vTaskSuspendAll();
 8005918:	f000 ffae 	bl	8006878 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800591c:	f001 fbea 	bl	80070f4 <vPortEnterCritical>
 8005920:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005924:	2bff      	cmp	r3, #255	@ 0xff
 8005926:	bf04      	itt	eq
 8005928:	2300      	moveq	r3, #0
 800592a:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 800592e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005932:	2bff      	cmp	r3, #255	@ 0xff
 8005934:	bf04      	itt	eq
 8005936:	2300      	moveq	r3, #0
 8005938:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 800593c:	f001 fbfc 	bl	8007138 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005940:	a901      	add	r1, sp, #4
 8005942:	a802      	add	r0, sp, #8
 8005944:	f001 f8f0 	bl	8006b28 <xTaskCheckForTimeOut>
 8005948:	2800      	cmp	r0, #0
 800594a:	f040 80ec 	bne.w	8005b26 <xQueueGenericSend+0x276>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800594e:	f001 fbd1 	bl	80070f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005952:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005954:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005956:	429a      	cmp	r2, r3
 8005958:	d072      	beq.n	8005a40 <xQueueGenericSend+0x190>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800595a:	f001 fbed 	bl	8007138 <vPortExitCritical>
	taskENTER_CRITICAL();
 800595e:	f001 fbc9 	bl	80070f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005962:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 8005966:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005968:	2d00      	cmp	r5, #0
 800596a:	dc04      	bgt.n	8005976 <xQueueGenericSend+0xc6>
 800596c:	e011      	b.n	8005992 <xQueueGenericSend+0xe2>
			--cTxLock;
 800596e:	1e6a      	subs	r2, r5, #1
 8005970:	b2d3      	uxtb	r3, r2
 8005972:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005974:	b16b      	cbz	r3, 8005992 <xQueueGenericSend+0xe2>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005976:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005978:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800597a:	b153      	cbz	r3, 8005992 <xQueueGenericSend+0xe2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800597c:	f001 f884 	bl	8006a88 <xTaskRemoveFromEventList>
 8005980:	2800      	cmp	r0, #0
 8005982:	d0f4      	beq.n	800596e <xQueueGenericSend+0xbe>
						vTaskMissedYield();
 8005984:	f001 f912 	bl	8006bac <vTaskMissedYield>
			--cTxLock;
 8005988:	1e6a      	subs	r2, r5, #1
 800598a:	b2d3      	uxtb	r3, r2
 800598c:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1f1      	bne.n	8005976 <xQueueGenericSend+0xc6>
		pxQueue->cTxLock = queueUNLOCKED;
 8005992:	23ff      	movs	r3, #255	@ 0xff
 8005994:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8005998:	f001 fbce 	bl	8007138 <vPortExitCritical>
	taskENTER_CRITICAL();
 800599c:	f001 fbaa 	bl	80070f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80059a0:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80059a4:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059a6:	2d00      	cmp	r5, #0
 80059a8:	dd14      	ble.n	80059d4 <xQueueGenericSend+0x124>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059aa:	f104 0910 	add.w	r9, r4, #16
 80059ae:	e003      	b.n	80059b8 <xQueueGenericSend+0x108>
				--cRxLock;
 80059b0:	1e6a      	subs	r2, r5, #1
 80059b2:	b2d3      	uxtb	r3, r2
 80059b4:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059b6:	b16b      	cbz	r3, 80059d4 <xQueueGenericSend+0x124>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059b8:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059ba:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059bc:	b153      	cbz	r3, 80059d4 <xQueueGenericSend+0x124>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059be:	f001 f863 	bl	8006a88 <xTaskRemoveFromEventList>
 80059c2:	2800      	cmp	r0, #0
 80059c4:	d0f4      	beq.n	80059b0 <xQueueGenericSend+0x100>
					vTaskMissedYield();
 80059c6:	f001 f8f1 	bl	8006bac <vTaskMissedYield>
				--cRxLock;
 80059ca:	1e6a      	subs	r2, r5, #1
 80059cc:	b2d3      	uxtb	r3, r2
 80059ce:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1f1      	bne.n	80059b8 <xQueueGenericSend+0x108>
		pxQueue->cRxLock = queueUNLOCKED;
 80059d4:	23ff      	movs	r3, #255	@ 0xff
 80059d6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 80059da:	f001 fbad 	bl	8007138 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80059de:	f000 ff53 	bl	8006888 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80059e2:	f001 fb87 	bl	80070f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059e6:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80059e8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80059ea:	4291      	cmp	r1, r2
 80059ec:	f04f 0301 	mov.w	r3, #1
 80059f0:	d289      	bcs.n	8005906 <xQueueGenericSend+0x56>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059f2:	463a      	mov	r2, r7
 80059f4:	4641      	mov	r1, r8
 80059f6:	4620      	mov	r0, r4
 80059f8:	f7ff feae 	bl	8005758 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059fc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f040 80ce 	bne.w	8005ba0 <xQueueGenericSend+0x2f0>
					else if( xYieldRequired != pdFALSE )
 8005a04:	b148      	cbz	r0, 8005a1a <xQueueGenericSend+0x16a>
						queueYIELD_IF_USING_PREEMPTION();
 8005a06:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a0e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005a12:	f3bf 8f4f 	dsb	sy
 8005a16:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8005a1a:	f001 fb8d 	bl	8007138 <vPortExitCritical>
				return pdPASS;
 8005a1e:	2001      	movs	r0, #1
}
 8005a20:	b005      	add	sp, #20
 8005a22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a26:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	f43f af4e 	beq.w	80058ca <xQueueGenericSend+0x1a>
 8005a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	e7fe      	b.n	8005a3e <xQueueGenericSend+0x18e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a40:	f104 0910 	add.w	r9, r4, #16
	taskEXIT_CRITICAL();
 8005a44:	f001 fb78 	bl	8007138 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a48:	9901      	ldr	r1, [sp, #4]
 8005a4a:	4648      	mov	r0, r9
 8005a4c:	f000 ff8e 	bl	800696c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8005a50:	f001 fb50 	bl	80070f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005a54:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005a58:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a5a:	2d00      	cmp	r5, #0
 8005a5c:	dc04      	bgt.n	8005a68 <xQueueGenericSend+0x1b8>
 8005a5e:	e011      	b.n	8005a84 <xQueueGenericSend+0x1d4>
			--cTxLock;
 8005a60:	1e6b      	subs	r3, r5, #1
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a66:	b16a      	cbz	r2, 8005a84 <xQueueGenericSend+0x1d4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a68:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a6a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a6c:	b153      	cbz	r3, 8005a84 <xQueueGenericSend+0x1d4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a6e:	f001 f80b 	bl	8006a88 <xTaskRemoveFromEventList>
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d0f4      	beq.n	8005a60 <xQueueGenericSend+0x1b0>
						vTaskMissedYield();
 8005a76:	f001 f899 	bl	8006bac <vTaskMissedYield>
			--cTxLock;
 8005a7a:	1e6b      	subs	r3, r5, #1
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a80:	2a00      	cmp	r2, #0
 8005a82:	d1f1      	bne.n	8005a68 <xQueueGenericSend+0x1b8>
		pxQueue->cTxLock = queueUNLOCKED;
 8005a84:	23ff      	movs	r3, #255	@ 0xff
 8005a86:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8005a8a:	f001 fb55 	bl	8007138 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005a8e:	f001 fb31 	bl	80070f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005a92:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005a96:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a98:	2d00      	cmp	r5, #0
 8005a9a:	dc04      	bgt.n	8005aa6 <xQueueGenericSend+0x1f6>
 8005a9c:	e011      	b.n	8005ac2 <xQueueGenericSend+0x212>
				--cRxLock;
 8005a9e:	1e6b      	subs	r3, r5, #1
 8005aa0:	b2da      	uxtb	r2, r3
 8005aa2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005aa4:	b16a      	cbz	r2, 8005ac2 <xQueueGenericSend+0x212>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005aa6:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aa8:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005aaa:	b153      	cbz	r3, 8005ac2 <xQueueGenericSend+0x212>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005aac:	f000 ffec 	bl	8006a88 <xTaskRemoveFromEventList>
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	d0f4      	beq.n	8005a9e <xQueueGenericSend+0x1ee>
					vTaskMissedYield();
 8005ab4:	f001 f87a 	bl	8006bac <vTaskMissedYield>
				--cRxLock;
 8005ab8:	1e6b      	subs	r3, r5, #1
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005abe:	2a00      	cmp	r2, #0
 8005ac0:	d1f1      	bne.n	8005aa6 <xQueueGenericSend+0x1f6>
		pxQueue->cRxLock = queueUNLOCKED;
 8005ac2:	23ff      	movs	r3, #255	@ 0xff
 8005ac4:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8005ac8:	f001 fb36 	bl	8007138 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8005acc:	f000 fedc 	bl	8006888 <xTaskResumeAll>
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	d186      	bne.n	80059e2 <xQueueGenericSend+0x132>
					portYIELD_WITHIN_API();
 8005ad4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005ad8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005adc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	e77b      	b.n	80059e2 <xQueueGenericSend+0x132>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005aea:	a802      	add	r0, sp, #8
 8005aec:	f001 f810 	bl	8006b10 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005af0:	e710      	b.n	8005914 <xQueueGenericSend+0x64>
 8005af2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005b02:	e7fe      	b.n	8005b02 <xQueueGenericSend+0x252>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b04:	9b01      	ldr	r3, [sp, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f43f aef2 	beq.w	80058f0 <xQueueGenericSend+0x40>
 8005b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	e7fe      	b.n	8005b1c <xQueueGenericSend+0x26c>
					taskEXIT_CRITICAL();
 8005b1e:	f001 fb0b 	bl	8007138 <vPortExitCritical>
					return errQUEUE_FULL;
 8005b22:	2000      	movs	r0, #0
 8005b24:	e77c      	b.n	8005a20 <xQueueGenericSend+0x170>
	taskENTER_CRITICAL();
 8005b26:	f001 fae5 	bl	80070f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005b2a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005b2e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b30:	2d00      	cmp	r5, #0
 8005b32:	dd10      	ble.n	8005b56 <xQueueGenericSend+0x2a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b34:	f104 0624 	add.w	r6, r4, #36	@ 0x24
 8005b38:	e003      	b.n	8005b42 <xQueueGenericSend+0x292>
			--cTxLock;
 8005b3a:	1e6b      	subs	r3, r5, #1
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b40:	b14a      	cbz	r2, 8005b56 <xQueueGenericSend+0x2a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b42:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b44:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b46:	b133      	cbz	r3, 8005b56 <xQueueGenericSend+0x2a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b48:	f000 ff9e 	bl	8006a88 <xTaskRemoveFromEventList>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d0f4      	beq.n	8005b3a <xQueueGenericSend+0x28a>
						vTaskMissedYield();
 8005b50:	f001 f82c 	bl	8006bac <vTaskMissedYield>
 8005b54:	e7f1      	b.n	8005b3a <xQueueGenericSend+0x28a>
		pxQueue->cTxLock = queueUNLOCKED;
 8005b56:	23ff      	movs	r3, #255	@ 0xff
 8005b58:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8005b5c:	f001 faec 	bl	8007138 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005b60:	f001 fac8 	bl	80070f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005b64:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005b68:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b6a:	2d00      	cmp	r5, #0
 8005b6c:	dd10      	ble.n	8005b90 <xQueueGenericSend+0x2e0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b6e:	f104 0610 	add.w	r6, r4, #16
 8005b72:	e003      	b.n	8005b7c <xQueueGenericSend+0x2cc>
				--cRxLock;
 8005b74:	1e6b      	subs	r3, r5, #1
 8005b76:	b2da      	uxtb	r2, r3
 8005b78:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b7a:	b14a      	cbz	r2, 8005b90 <xQueueGenericSend+0x2e0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b7c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b7e:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b80:	b133      	cbz	r3, 8005b90 <xQueueGenericSend+0x2e0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b82:	f000 ff81 	bl	8006a88 <xTaskRemoveFromEventList>
 8005b86:	2800      	cmp	r0, #0
 8005b88:	d0f4      	beq.n	8005b74 <xQueueGenericSend+0x2c4>
					vTaskMissedYield();
 8005b8a:	f001 f80f 	bl	8006bac <vTaskMissedYield>
 8005b8e:	e7f1      	b.n	8005b74 <xQueueGenericSend+0x2c4>
		pxQueue->cRxLock = queueUNLOCKED;
 8005b90:	23ff      	movs	r3, #255	@ 0xff
 8005b92:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8005b96:	f001 facf 	bl	8007138 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8005b9a:	f000 fe75 	bl	8006888 <xTaskResumeAll>
			return errQUEUE_FULL;
 8005b9e:	e7c0      	b.n	8005b22 <xQueueGenericSend+0x272>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ba0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8005ba4:	f000 ff70 	bl	8006a88 <xTaskRemoveFromEventList>
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	f43f af36 	beq.w	8005a1a <xQueueGenericSend+0x16a>
 8005bae:	e72a      	b.n	8005a06 <xQueueGenericSend+0x156>

08005bb0 <xQueueReceive>:
{
 8005bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bb4:	b085      	sub	sp, #20
 8005bb6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	f000 8147 	beq.w	8005e4c <xQueueReceive+0x29c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bbe:	460f      	mov	r7, r1
 8005bc0:	4604      	mov	r4, r0
 8005bc2:	2900      	cmp	r1, #0
 8005bc4:	d07b      	beq.n	8005cbe <xQueueReceive+0x10e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bc6:	f000 fff7 	bl	8006bb8 <xTaskGetSchedulerState>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	f000 8083 	beq.w	8005cd6 <xQueueReceive+0x126>
		taskENTER_CRITICAL();
 8005bd0:	f001 fa90 	bl	80070f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bd4:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005bd6:	2d00      	cmp	r5, #0
 8005bd8:	f040 8141 	bne.w	8005e5e <xQueueReceive+0x2ae>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bdc:	9b01      	ldr	r3, [sp, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f000 80d7 	beq.w	8005d92 <xQueueReceive+0x1e2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005be4:	a802      	add	r0, sp, #8
 8005be6:	f000 ff93 	bl	8006b10 <vTaskInternalSetTimeOutState>
		prvLockQueue( pxQueue );
 8005bea:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bec:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		taskEXIT_CRITICAL();
 8005bf0:	f001 faa2 	bl	8007138 <vPortExitCritical>
		vTaskSuspendAll();
 8005bf4:	f000 fe40 	bl	8006878 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bf8:	f001 fa7c 	bl	80070f4 <vPortEnterCritical>
 8005bfc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005c00:	2bff      	cmp	r3, #255	@ 0xff
 8005c02:	bf08      	it	eq
 8005c04:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8005c08:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005c0c:	2bff      	cmp	r3, #255	@ 0xff
 8005c0e:	bf08      	it	eq
 8005c10:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8005c14:	f001 fa90 	bl	8007138 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c18:	a901      	add	r1, sp, #4
 8005c1a:	a802      	add	r0, sp, #8
 8005c1c:	f000 ff84 	bl	8006b28 <xTaskCheckForTimeOut>
 8005c20:	2800      	cmp	r0, #0
 8005c22:	d165      	bne.n	8005cf0 <xQueueReceive+0x140>
	taskENTER_CRITICAL();
 8005c24:	f001 fa66 	bl	80070f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c28:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f000 80b7 	beq.w	8005d9e <xQueueReceive+0x1ee>
	taskEXIT_CRITICAL();
 8005c30:	f001 fa82 	bl	8007138 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005c34:	f001 fa5e 	bl	80070f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005c38:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005c3c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c3e:	2d00      	cmp	r5, #0
 8005c40:	dd14      	ble.n	8005c6c <xQueueReceive+0xbc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c42:	f104 0924 	add.w	r9, r4, #36	@ 0x24
 8005c46:	e003      	b.n	8005c50 <xQueueReceive+0xa0>
			--cTxLock;
 8005c48:	1e6b      	subs	r3, r5, #1
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c4e:	b16a      	cbz	r2, 8005c6c <xQueueReceive+0xbc>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c50:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c52:	4648      	mov	r0, r9
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c54:	b153      	cbz	r3, 8005c6c <xQueueReceive+0xbc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c56:	f000 ff17 	bl	8006a88 <xTaskRemoveFromEventList>
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	d0f4      	beq.n	8005c48 <xQueueReceive+0x98>
						vTaskMissedYield();
 8005c5e:	f000 ffa5 	bl	8006bac <vTaskMissedYield>
			--cTxLock;
 8005c62:	1e6b      	subs	r3, r5, #1
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c68:	2a00      	cmp	r2, #0
 8005c6a:	d1f1      	bne.n	8005c50 <xQueueReceive+0xa0>
		pxQueue->cTxLock = queueUNLOCKED;
 8005c6c:	23ff      	movs	r3, #255	@ 0xff
 8005c6e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8005c72:	f001 fa61 	bl	8007138 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005c76:	f001 fa3d 	bl	80070f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005c7a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005c7e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c80:	2d00      	cmp	r5, #0
 8005c82:	dd14      	ble.n	8005cae <xQueueReceive+0xfe>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c84:	f104 0910 	add.w	r9, r4, #16
 8005c88:	e003      	b.n	8005c92 <xQueueReceive+0xe2>
				--cRxLock;
 8005c8a:	1e6b      	subs	r3, r5, #1
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c90:	b16a      	cbz	r2, 8005cae <xQueueReceive+0xfe>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c92:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c94:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c96:	b153      	cbz	r3, 8005cae <xQueueReceive+0xfe>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c98:	f000 fef6 	bl	8006a88 <xTaskRemoveFromEventList>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	d0f4      	beq.n	8005c8a <xQueueReceive+0xda>
					vTaskMissedYield();
 8005ca0:	f000 ff84 	bl	8006bac <vTaskMissedYield>
				--cRxLock;
 8005ca4:	1e6b      	subs	r3, r5, #1
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005caa:	2a00      	cmp	r2, #0
 8005cac:	d1f1      	bne.n	8005c92 <xQueueReceive+0xe2>
		pxQueue->cRxLock = queueUNLOCKED;
 8005cae:	23ff      	movs	r3, #255	@ 0xff
 8005cb0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8005cb4:	f001 fa40 	bl	8007138 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8005cb8:	f000 fde6 	bl	8006888 <xTaskResumeAll>
 8005cbc:	e060      	b.n	8005d80 <xQueueReceive+0x1d0>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cbe:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d080      	beq.n	8005bc6 <xQueueReceive+0x16>
 8005cc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc8:	f383 8811 	msr	BASEPRI, r3
 8005ccc:	f3bf 8f6f 	isb	sy
 8005cd0:	f3bf 8f4f 	dsb	sy
 8005cd4:	e7fe      	b.n	8005cd4 <xQueueReceive+0x124>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cd6:	9b01      	ldr	r3, [sp, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f43f af79 	beq.w	8005bd0 <xQueueReceive+0x20>
 8005cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	e7fe      	b.n	8005cee <xQueueReceive+0x13e>
	taskENTER_CRITICAL();
 8005cf0:	f001 fa00 	bl	80070f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005cf4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005cf8:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cfa:	2d00      	cmp	r5, #0
 8005cfc:	dc04      	bgt.n	8005d08 <xQueueReceive+0x158>
 8005cfe:	e011      	b.n	8005d24 <xQueueReceive+0x174>
			--cTxLock;
 8005d00:	1e6b      	subs	r3, r5, #1
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d06:	b16a      	cbz	r2, 8005d24 <xQueueReceive+0x174>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d08:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d0a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d0c:	b153      	cbz	r3, 8005d24 <xQueueReceive+0x174>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d0e:	f000 febb 	bl	8006a88 <xTaskRemoveFromEventList>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d0f4      	beq.n	8005d00 <xQueueReceive+0x150>
						vTaskMissedYield();
 8005d16:	f000 ff49 	bl	8006bac <vTaskMissedYield>
			--cTxLock;
 8005d1a:	1e6b      	subs	r3, r5, #1
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d20:	2a00      	cmp	r2, #0
 8005d22:	d1f1      	bne.n	8005d08 <xQueueReceive+0x158>
		pxQueue->cTxLock = queueUNLOCKED;
 8005d24:	23ff      	movs	r3, #255	@ 0xff
 8005d26:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8005d2a:	f001 fa05 	bl	8007138 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005d2e:	f001 f9e1 	bl	80070f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005d32:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005d36:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d38:	2d00      	cmp	r5, #0
 8005d3a:	dd14      	ble.n	8005d66 <xQueueReceive+0x1b6>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d3c:	f104 0910 	add.w	r9, r4, #16
 8005d40:	e003      	b.n	8005d4a <xQueueReceive+0x19a>
				--cRxLock;
 8005d42:	1e6b      	subs	r3, r5, #1
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d48:	b16a      	cbz	r2, 8005d66 <xQueueReceive+0x1b6>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d4a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d4c:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d4e:	b153      	cbz	r3, 8005d66 <xQueueReceive+0x1b6>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d50:	f000 fe9a 	bl	8006a88 <xTaskRemoveFromEventList>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	d0f4      	beq.n	8005d42 <xQueueReceive+0x192>
					vTaskMissedYield();
 8005d58:	f000 ff28 	bl	8006bac <vTaskMissedYield>
				--cRxLock;
 8005d5c:	1e6b      	subs	r3, r5, #1
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d62:	2a00      	cmp	r2, #0
 8005d64:	d1f1      	bne.n	8005d4a <xQueueReceive+0x19a>
		pxQueue->cRxLock = queueUNLOCKED;
 8005d66:	23ff      	movs	r3, #255	@ 0xff
 8005d68:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8005d6c:	f001 f9e4 	bl	8007138 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8005d70:	f000 fd8a 	bl	8006888 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8005d74:	f001 f9be 	bl	80070f4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d78:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8005d7a:	b153      	cbz	r3, 8005d92 <xQueueReceive+0x1e2>
	taskEXIT_CRITICAL();
 8005d7c:	f001 f9dc 	bl	8007138 <vPortExitCritical>
		taskENTER_CRITICAL();
 8005d80:	f001 f9b8 	bl	80070f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d84:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d86:	2d00      	cmp	r5, #0
 8005d88:	d169      	bne.n	8005e5e <xQueueReceive+0x2ae>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d8a:	9b01      	ldr	r3, [sp, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f47f af2f 	bne.w	8005bf0 <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 8005d92:	f001 f9d1 	bl	8007138 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005d96:	2000      	movs	r0, #0
}
 8005d98:	b005      	add	sp, #20
 8005d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d9e:	f104 0924 	add.w	r9, r4, #36	@ 0x24
	taskEXIT_CRITICAL();
 8005da2:	f001 f9c9 	bl	8007138 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005da6:	9901      	ldr	r1, [sp, #4]
 8005da8:	4648      	mov	r0, r9
 8005daa:	f000 fddf 	bl	800696c <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8005dae:	f001 f9a1 	bl	80070f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005db2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005db6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005db8:	2d00      	cmp	r5, #0
 8005dba:	dc04      	bgt.n	8005dc6 <xQueueReceive+0x216>
 8005dbc:	e011      	b.n	8005de2 <xQueueReceive+0x232>
			--cTxLock;
 8005dbe:	1e6b      	subs	r3, r5, #1
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dc4:	b16a      	cbz	r2, 8005de2 <xQueueReceive+0x232>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dc6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dc8:	4648      	mov	r0, r9
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dca:	b153      	cbz	r3, 8005de2 <xQueueReceive+0x232>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005dcc:	f000 fe5c 	bl	8006a88 <xTaskRemoveFromEventList>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	d0f4      	beq.n	8005dbe <xQueueReceive+0x20e>
						vTaskMissedYield();
 8005dd4:	f000 feea 	bl	8006bac <vTaskMissedYield>
			--cTxLock;
 8005dd8:	1e6b      	subs	r3, r5, #1
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005dde:	2a00      	cmp	r2, #0
 8005de0:	d1f1      	bne.n	8005dc6 <xQueueReceive+0x216>
		pxQueue->cTxLock = queueUNLOCKED;
 8005de2:	23ff      	movs	r3, #255	@ 0xff
 8005de4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8005de8:	f001 f9a6 	bl	8007138 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005dec:	f001 f982 	bl	80070f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005df0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005df4:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005df6:	2d00      	cmp	r5, #0
 8005df8:	dd14      	ble.n	8005e24 <xQueueReceive+0x274>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dfa:	f104 0910 	add.w	r9, r4, #16
 8005dfe:	e003      	b.n	8005e08 <xQueueReceive+0x258>
				--cRxLock;
 8005e00:	1e6b      	subs	r3, r5, #1
 8005e02:	b2da      	uxtb	r2, r3
 8005e04:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e06:	b16a      	cbz	r2, 8005e24 <xQueueReceive+0x274>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e08:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e0a:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e0c:	b153      	cbz	r3, 8005e24 <xQueueReceive+0x274>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e0e:	f000 fe3b 	bl	8006a88 <xTaskRemoveFromEventList>
 8005e12:	2800      	cmp	r0, #0
 8005e14:	d0f4      	beq.n	8005e00 <xQueueReceive+0x250>
					vTaskMissedYield();
 8005e16:	f000 fec9 	bl	8006bac <vTaskMissedYield>
				--cRxLock;
 8005e1a:	1e6b      	subs	r3, r5, #1
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005e20:	2a00      	cmp	r2, #0
 8005e22:	d1f1      	bne.n	8005e08 <xQueueReceive+0x258>
		pxQueue->cRxLock = queueUNLOCKED;
 8005e24:	23ff      	movs	r3, #255	@ 0xff
 8005e26:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8005e2a:	f001 f985 	bl	8007138 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8005e2e:	f000 fd2b 	bl	8006888 <xTaskResumeAll>
 8005e32:	2800      	cmp	r0, #0
 8005e34:	d1a4      	bne.n	8005d80 <xQueueReceive+0x1d0>
					portYIELD_WITHIN_API();
 8005e36:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005e3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e3e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	e799      	b.n	8005d80 <xQueueReceive+0x1d0>
 8005e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 8005e5c:	e7fe      	b.n	8005e5c <xQueueReceive+0x2ac>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e5e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005e60:	b152      	cbz	r2, 8005e78 <xQueueReceive+0x2c8>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e62:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e64:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e66:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e68:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e6a:	60e1      	str	r1, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e6c:	bf24      	itt	cs
 8005e6e:	6821      	ldrcs	r1, [r4, #0]
 8005e70:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e72:	4638      	mov	r0, r7
 8005e74:	f003 faef 	bl	8009456 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e78:	3d01      	subs	r5, #1
 8005e7a:	63a5      	str	r5, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e7c:	6923      	ldr	r3, [r4, #16]
 8005e7e:	b91b      	cbnz	r3, 8005e88 <xQueueReceive+0x2d8>
				taskEXIT_CRITICAL();
 8005e80:	f001 f95a 	bl	8007138 <vPortExitCritical>
				return pdPASS;
 8005e84:	2001      	movs	r0, #1
 8005e86:	e787      	b.n	8005d98 <xQueueReceive+0x1e8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e88:	f104 0010 	add.w	r0, r4, #16
 8005e8c:	f000 fdfc 	bl	8006a88 <xTaskRemoveFromEventList>
 8005e90:	2800      	cmp	r0, #0
 8005e92:	d0f5      	beq.n	8005e80 <xQueueReceive+0x2d0>
						queueYIELD_IF_USING_PREEMPTION();
 8005e94:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005e98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e9c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	e7ea      	b.n	8005e80 <xQueueReceive+0x2d0>
 8005eaa:	bf00      	nop

08005eac <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005eac:	4b12      	ldr	r3, [pc, #72]	@ (8005ef8 <vQueueAddToRegistry+0x4c>)
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	b17a      	cbz	r2, 8005ed2 <vQueueAddToRegistry+0x26>
 8005eb2:	689a      	ldr	r2, [r3, #8]
 8005eb4:	b162      	cbz	r2, 8005ed0 <vQueueAddToRegistry+0x24>
 8005eb6:	691a      	ldr	r2, [r3, #16]
 8005eb8:	b192      	cbz	r2, 8005ee0 <vQueueAddToRegistry+0x34>
 8005eba:	699a      	ldr	r2, [r3, #24]
 8005ebc:	b192      	cbz	r2, 8005ee4 <vQueueAddToRegistry+0x38>
 8005ebe:	6a1a      	ldr	r2, [r3, #32]
 8005ec0:	b192      	cbz	r2, 8005ee8 <vQueueAddToRegistry+0x3c>
 8005ec2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005ec4:	b192      	cbz	r2, 8005eec <vQueueAddToRegistry+0x40>
 8005ec6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ec8:	b192      	cbz	r2, 8005ef0 <vQueueAddToRegistry+0x44>
 8005eca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ecc:	b192      	cbz	r2, 8005ef4 <vQueueAddToRegistry+0x48>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005ece:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ed0:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005ed2:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ed6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005eda:	f8cc 0004 	str.w	r0, [ip, #4]
	}
 8005ede:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	e7f6      	b.n	8005ed2 <vQueueAddToRegistry+0x26>
 8005ee4:	2203      	movs	r2, #3
 8005ee6:	e7f4      	b.n	8005ed2 <vQueueAddToRegistry+0x26>
 8005ee8:	2204      	movs	r2, #4
 8005eea:	e7f2      	b.n	8005ed2 <vQueueAddToRegistry+0x26>
 8005eec:	2205      	movs	r2, #5
 8005eee:	e7f0      	b.n	8005ed2 <vQueueAddToRegistry+0x26>
 8005ef0:	2206      	movs	r2, #6
 8005ef2:	e7ee      	b.n	8005ed2 <vQueueAddToRegistry+0x26>
 8005ef4:	2207      	movs	r2, #7
 8005ef6:	e7ec      	b.n	8005ed2 <vQueueAddToRegistry+0x26>
 8005ef8:	20001348 	.word	0x20001348

08005efc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005efc:	b570      	push	{r4, r5, r6, lr}
 8005efe:	4605      	mov	r5, r0
 8005f00:	460e      	mov	r6, r1
 8005f02:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005f04:	f001 f8f6 	bl	80070f4 <vPortEnterCritical>
 8005f08:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8005f0c:	2bff      	cmp	r3, #255	@ 0xff
 8005f0e:	bf04      	itt	eq
 8005f10:	2300      	moveq	r3, #0
 8005f12:	f885 3044 	strbeq.w	r3, [r5, #68]	@ 0x44
 8005f16:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8005f1a:	2bff      	cmp	r3, #255	@ 0xff
 8005f1c:	bf04      	itt	eq
 8005f1e:	2300      	moveq	r3, #0
 8005f20:	f885 3045 	strbeq.w	r3, [r5, #69]	@ 0x45
 8005f24:	f001 f908 	bl	8007138 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005f28:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d043      	beq.n	8005fb6 <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
 8005f2e:	f001 f8e1 	bl	80070f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8005f32:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 8005f36:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f38:	2c00      	cmp	r4, #0
 8005f3a:	dd14      	ble.n	8005f66 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f3c:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 8005f40:	e003      	b.n	8005f4a <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
 8005f42:	1e63      	subs	r3, r4, #1
 8005f44:	b2da      	uxtb	r2, r3
 8005f46:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f48:	b16a      	cbz	r2, 8005f66 <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f4a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f4c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f4e:	b153      	cbz	r3, 8005f66 <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f50:	f000 fd9a 	bl	8006a88 <xTaskRemoveFromEventList>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d0f4      	beq.n	8005f42 <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 8005f58:	f000 fe28 	bl	8006bac <vTaskMissedYield>
			--cTxLock;
 8005f5c:	1e63      	subs	r3, r4, #1
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005f62:	2a00      	cmp	r2, #0
 8005f64:	d1f1      	bne.n	8005f4a <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
 8005f66:	23ff      	movs	r3, #255	@ 0xff
 8005f68:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8005f6c:	f001 f8e4 	bl	8007138 <vPortExitCritical>
	taskENTER_CRITICAL();
 8005f70:	f001 f8c0 	bl	80070f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005f74:	f895 3044 	ldrb.w	r3, [r5, #68]	@ 0x44
 8005f78:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f7a:	2c00      	cmp	r4, #0
 8005f7c:	dd14      	ble.n	8005fa8 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f7e:	f105 0610 	add.w	r6, r5, #16
 8005f82:	e003      	b.n	8005f8c <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
 8005f84:	1e63      	subs	r3, r4, #1
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f8a:	b16a      	cbz	r2, 8005fa8 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f8c:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f8e:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f90:	b153      	cbz	r3, 8005fa8 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f92:	f000 fd79 	bl	8006a88 <xTaskRemoveFromEventList>
 8005f96:	2800      	cmp	r0, #0
 8005f98:	d0f4      	beq.n	8005f84 <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
 8005f9a:	f000 fe07 	bl	8006bac <vTaskMissedYield>
				--cRxLock;
 8005f9e:	1e63      	subs	r3, r4, #1
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005fa4:	2a00      	cmp	r2, #0
 8005fa6:	d1f1      	bne.n	8005f8c <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
 8005fa8:	23ff      	movs	r3, #255	@ 0xff
 8005faa:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 8005fae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8005fb2:	f001 b8c1 	b.w	8007138 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005fb6:	4622      	mov	r2, r4
 8005fb8:	4631      	mov	r1, r6
 8005fba:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8005fbe:	f000 fd19 	bl	80069f4 <vTaskPlaceOnEventListRestricted>
 8005fc2:	e7b4      	b.n	8005f2e <vQueueWaitForMessageRestricted+0x32>

08005fc4 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fc8:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005fca:	f001 f893 	bl	80070f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005fce:	4a33      	ldr	r2, [pc, #204]	@ (800609c <prvAddNewTaskToReadyList+0xd8>)
		if( pxCurrentTCB == NULL )
 8005fd0:	4e33      	ldr	r6, [pc, #204]	@ (80060a0 <prvAddNewTaskToReadyList+0xdc>)
		uxCurrentNumberOfTasks++;
 8005fd2:	6813      	ldr	r3, [r2, #0]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005fd8:	6833      	ldr	r3, [r6, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d031      	beq.n	8006042 <prvAddNewTaskToReadyList+0x7e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005fde:	4c31      	ldr	r4, [pc, #196]	@ (80060a4 <prvAddNewTaskToReadyList+0xe0>)
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005fe0:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8005fe2:	6823      	ldr	r3, [r4, #0]
 8005fe4:	b333      	cbz	r3, 8006034 <prvAddNewTaskToReadyList+0x70>
 8005fe6:	4f30      	ldr	r7, [pc, #192]	@ (80060a8 <prvAddNewTaskToReadyList+0xe4>)
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005fe8:	4a30      	ldr	r2, [pc, #192]	@ (80060ac <prvAddNewTaskToReadyList+0xe8>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005fea:	4931      	ldr	r1, [pc, #196]	@ (80060b0 <prvAddNewTaskToReadyList+0xec>)
		uxTaskNumber++;
 8005fec:	6813      	ldr	r3, [r2, #0]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ff2:	646b      	str	r3, [r5, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8005ff4:	680b      	ldr	r3, [r1, #0]
 8005ff6:	4283      	cmp	r3, r0
 8005ff8:	bf38      	it	cc
 8005ffa:	6008      	strcc	r0, [r1, #0]
 8005ffc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006000:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8006004:	1d29      	adds	r1, r5, #4
 8006006:	f7ff fb6d 	bl	80056e4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800600a:	f001 f895 	bl	8007138 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800600e:	6823      	ldr	r3, [r4, #0]
 8006010:	b173      	cbz	r3, 8006030 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006012:	6832      	ldr	r2, [r6, #0]
 8006014:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8006016:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006018:	429a      	cmp	r2, r3
 800601a:	d209      	bcs.n	8006030 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800601c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006020:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006024:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006034:	6833      	ldr	r3, [r6, #0]
 8006036:	4f1c      	ldr	r7, [pc, #112]	@ (80060a8 <prvAddNewTaskToReadyList+0xe4>)
 8006038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800603a:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 800603c:	bf98      	it	ls
 800603e:	6035      	strls	r5, [r6, #0]
 8006040:	e7d2      	b.n	8005fe8 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 8006042:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006044:	6813      	ldr	r3, [r2, #0]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d003      	beq.n	8006052 <prvAddNewTaskToReadyList+0x8e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800604a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800604c:	4f16      	ldr	r7, [pc, #88]	@ (80060a8 <prvAddNewTaskToReadyList+0xe4>)
 800604e:	4c15      	ldr	r4, [pc, #84]	@ (80060a4 <prvAddNewTaskToReadyList+0xe0>)
 8006050:	e7ca      	b.n	8005fe8 <prvAddNewTaskToReadyList+0x24>
 8006052:	4f15      	ldr	r7, [pc, #84]	@ (80060a8 <prvAddNewTaskToReadyList+0xe4>)
 8006054:	463c      	mov	r4, r7
 8006056:	f507 688c 	add.w	r8, r7, #1120	@ 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800605a:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800605c:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800605e:	f7ff fb31 	bl	80056c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006062:	45a0      	cmp	r8, r4
 8006064:	d1f9      	bne.n	800605a <prvAddNewTaskToReadyList+0x96>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006066:	f8df 8064 	ldr.w	r8, [pc, #100]	@ 80060cc <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
 800606a:	4c12      	ldr	r4, [pc, #72]	@ (80060b4 <prvAddNewTaskToReadyList+0xf0>)
	vListInitialise( &xDelayedTaskList1 );
 800606c:	4640      	mov	r0, r8
 800606e:	f7ff fb29 	bl	80056c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006072:	4620      	mov	r0, r4
 8006074:	f7ff fb26 	bl	80056c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006078:	480f      	ldr	r0, [pc, #60]	@ (80060b8 <prvAddNewTaskToReadyList+0xf4>)
 800607a:	f7ff fb23 	bl	80056c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800607e:	480f      	ldr	r0, [pc, #60]	@ (80060bc <prvAddNewTaskToReadyList+0xf8>)
 8006080:	f7ff fb20 	bl	80056c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006084:	480e      	ldr	r0, [pc, #56]	@ (80060c0 <prvAddNewTaskToReadyList+0xfc>)
 8006086:	f7ff fb1d 	bl	80056c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800608a:	4b0e      	ldr	r3, [pc, #56]	@ (80060c4 <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
 800608c:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
 800608e:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006092:	4b0d      	ldr	r3, [pc, #52]	@ (80060c8 <prvAddNewTaskToReadyList+0x104>)
 8006094:	601c      	str	r4, [r3, #0]
 8006096:	4c03      	ldr	r4, [pc, #12]	@ (80060a4 <prvAddNewTaskToReadyList+0xe0>)
}
 8006098:	e7a6      	b.n	8005fe8 <prvAddNewTaskToReadyList+0x24>
 800609a:	bf00      	nop
 800609c:	200013ac 	.word	0x200013ac
 80060a0:	20001880 	.word	0x20001880
 80060a4:	200013a0 	.word	0x200013a0
 80060a8:	20001420 	.word	0x20001420
 80060ac:	20001390 	.word	0x20001390
 80060b0:	200013a4 	.word	0x200013a4
 80060b4:	200013f8 	.word	0x200013f8
 80060b8:	200013dc 	.word	0x200013dc
 80060bc:	200013c8 	.word	0x200013c8
 80060c0:	200013b0 	.word	0x200013b0
 80060c4:	200013f4 	.word	0x200013f4
 80060c8:	200013f0 	.word	0x200013f0
 80060cc:	2000140c 	.word	0x2000140c

080060d0 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80060d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80060d6:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80060da:	0096      	lsls	r6, r2, #2
 80060dc:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80060de:	4607      	mov	r7, r0
 80060e0:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80060e2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80060e4:	21a5      	movs	r1, #165	@ 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80060e6:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80060e8:	f003 f89b 	bl	8009222 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80060ec:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80060ee:	3e04      	subs	r6, #4
 80060f0:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80060f2:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 80060f6:	2d00      	cmp	r5, #0
 80060f8:	d072      	beq.n	80061e0 <prvInitialiseNewTask.constprop.0+0x110>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060fa:	782b      	ldrb	r3, [r5, #0]
 80060fc:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
			if( pcName[ x ] == ( char ) 0x00 )
 8006100:	2b00      	cmp	r3, #0
 8006102:	d036      	beq.n	8006172 <prvInitialiseNewTask.constprop.0+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006104:	786b      	ldrb	r3, [r5, #1]
 8006106:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
			if( pcName[ x ] == ( char ) 0x00 )
 800610a:	b393      	cbz	r3, 8006172 <prvInitialiseNewTask.constprop.0+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800610c:	78ab      	ldrb	r3, [r5, #2]
 800610e:	f884 3036 	strb.w	r3, [r4, #54]	@ 0x36
			if( pcName[ x ] == ( char ) 0x00 )
 8006112:	b373      	cbz	r3, 8006172 <prvInitialiseNewTask.constprop.0+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006114:	78eb      	ldrb	r3, [r5, #3]
 8006116:	f884 3037 	strb.w	r3, [r4, #55]	@ 0x37
			if( pcName[ x ] == ( char ) 0x00 )
 800611a:	b353      	cbz	r3, 8006172 <prvInitialiseNewTask.constprop.0+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800611c:	792b      	ldrb	r3, [r5, #4]
 800611e:	f884 3038 	strb.w	r3, [r4, #56]	@ 0x38
			if( pcName[ x ] == ( char ) 0x00 )
 8006122:	b333      	cbz	r3, 8006172 <prvInitialiseNewTask.constprop.0+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006124:	796b      	ldrb	r3, [r5, #5]
 8006126:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
			if( pcName[ x ] == ( char ) 0x00 )
 800612a:	b313      	cbz	r3, 8006172 <prvInitialiseNewTask.constprop.0+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800612c:	79ab      	ldrb	r3, [r5, #6]
 800612e:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
 8006132:	b1f3      	cbz	r3, 8006172 <prvInitialiseNewTask.constprop.0+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006134:	79eb      	ldrb	r3, [r5, #7]
 8006136:	f884 303b 	strb.w	r3, [r4, #59]	@ 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
 800613a:	b1d3      	cbz	r3, 8006172 <prvInitialiseNewTask.constprop.0+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800613c:	7a2b      	ldrb	r3, [r5, #8]
 800613e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
 8006142:	b1b3      	cbz	r3, 8006172 <prvInitialiseNewTask.constprop.0+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006144:	7a6b      	ldrb	r3, [r5, #9]
 8006146:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
 800614a:	b193      	cbz	r3, 8006172 <prvInitialiseNewTask.constprop.0+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800614c:	7aab      	ldrb	r3, [r5, #10]
 800614e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
 8006152:	b173      	cbz	r3, 8006172 <prvInitialiseNewTask.constprop.0+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006154:	7aeb      	ldrb	r3, [r5, #11]
 8006156:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
 800615a:	b153      	cbz	r3, 8006172 <prvInitialiseNewTask.constprop.0+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800615c:	7b2b      	ldrb	r3, [r5, #12]
 800615e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
			if( pcName[ x ] == ( char ) 0x00 )
 8006162:	b133      	cbz	r3, 8006172 <prvInitialiseNewTask.constprop.0+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006164:	7b6b      	ldrb	r3, [r5, #13]
 8006166:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
			if( pcName[ x ] == ( char ) 0x00 )
 800616a:	b113      	cbz	r3, 8006172 <prvInitialiseNewTask.constprop.0+0xa2>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800616c:	7bab      	ldrb	r3, [r5, #14]
 800616e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006172:	2300      	movs	r3, #0
 8006174:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006178:	9d08      	ldr	r5, [sp, #32]
 800617a:	2d37      	cmp	r5, #55	@ 0x37
 800617c:	bf28      	it	cs
 800617e:	2537      	movcs	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 8006180:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8006184:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8006186:	64e5      	str	r5, [r4, #76]	@ 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006188:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 800618a:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800618e:	f7ff faa5 	bl	80056dc <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006192:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006196:	f104 0018 	add.w	r0, r4, #24
 800619a:	f7ff fa9f 	bl	80056dc <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800619e:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 80061a0:	f8c4 a0a0 	str.w	sl, [r4, #160]	@ 0xa0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80061a4:	4651      	mov	r1, sl
 80061a6:	224c      	movs	r2, #76	@ 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80061a8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80061aa:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80061ac:	f884 a0a4 	strb.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80061b0:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 80061b4:	f003 f835 	bl	8009222 <memset>
 80061b8:	4b0b      	ldr	r3, [pc, #44]	@ (80061e8 <prvInitialiseNewTask.constprop.0+0x118>)
 80061ba:	65a3      	str	r3, [r4, #88]	@ 0x58
 80061bc:	f103 0568 	add.w	r5, r3, #104	@ 0x68
 80061c0:	33d0      	adds	r3, #208	@ 0xd0
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061c2:	4642      	mov	r2, r8
 80061c4:	4639      	mov	r1, r7
 80061c6:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80061c8:	65e5      	str	r5, [r4, #92]	@ 0x5c
 80061ca:	6623      	str	r3, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80061cc:	f000 ff68 	bl	80070a0 <pxPortInitialiseStack>
 80061d0:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80061d2:	f1b9 0f00 	cmp.w	r9, #0
 80061d6:	d001      	beq.n	80061dc <prvInitialiseNewTask.constprop.0+0x10c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80061d8:	f8c9 4000 	str.w	r4, [r9]
}
 80061dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80061e0:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 80061e4:	e7c8      	b.n	8006178 <prvInitialiseNewTask.constprop.0+0xa8>
 80061e6:	bf00      	nop
 80061e8:	200055d8 	.word	0x200055d8

080061ec <prvIdleTask>:
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	4d23      	ldr	r5, [pc, #140]	@ (800627c <prvIdleTask+0x90>)
 80061f0:	4f23      	ldr	r7, [pc, #140]	@ (8006280 <prvIdleTask+0x94>)
 80061f2:	4e24      	ldr	r6, [pc, #144]	@ (8006284 <prvIdleTask+0x98>)
 80061f4:	f8df 8090 	ldr.w	r8, [pc, #144]	@ 8006288 <prvIdleTask+0x9c>
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061f8:	682b      	ldr	r3, [r5, #0]
 80061fa:	b35b      	cbz	r3, 8006254 <prvIdleTask+0x68>
		{
			taskENTER_CRITICAL();
 80061fc:	f000 ff7a 	bl	80070f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006204:	1d20      	adds	r0, r4, #4
 8006206:	f7ff fa93 	bl	8005730 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800620a:	6833      	ldr	r3, [r6, #0]
 800620c:	3b01      	subs	r3, #1
 800620e:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006210:	682b      	ldr	r3, [r5, #0]
 8006212:	3b01      	subs	r3, #1
 8006214:	602b      	str	r3, [r5, #0]
			}
			taskEXIT_CRITICAL();
 8006216:	f000 ff8f 	bl	8007138 <vPortExitCritical>
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800621a:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 800621e:	f003 f859 	bl	80092d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006222:	f894 30a5 	ldrb.w	r3, [r4, #165]	@ 0xa5
 8006226:	b163      	cbz	r3, 8006242 <prvIdleTask+0x56>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006228:	2b01      	cmp	r3, #1
 800622a:	d022      	beq.n	8006272 <prvIdleTask+0x86>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800622c:	2b02      	cmp	r3, #2
 800622e:	d0e3      	beq.n	80061f8 <prvIdleTask+0xc>
 8006230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	e7fe      	b.n	8006240 <prvIdleTask+0x54>
				vPortFree( pxTCB->pxStack );
 8006242:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8006244:	f001 f946 	bl	80074d4 <vPortFree>
				vPortFree( pxTCB );
 8006248:	4620      	mov	r0, r4
 800624a:	f001 f943 	bl	80074d4 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800624e:	682b      	ldr	r3, [r5, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1d3      	bne.n	80061fc <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006254:	f8d8 3000 	ldr.w	r3, [r8]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d9cd      	bls.n	80061f8 <prvIdleTask+0xc>
				taskYIELD();
 800625c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006260:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006264:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	e7c2      	b.n	80061f8 <prvIdleTask+0xc>
				vPortFree( pxTCB );
 8006272:	4620      	mov	r0, r4
 8006274:	f001 f92e 	bl	80074d4 <vPortFree>
 8006278:	e7be      	b.n	80061f8 <prvIdleTask+0xc>
 800627a:	bf00      	nop
 800627c:	200013c4 	.word	0x200013c4
 8006280:	200013c8 	.word	0x200013c8
 8006284:	200013ac 	.word	0x200013ac
 8006288:	20001420 	.word	0x20001420

0800628c <xTaskIncrementTick.part.0>:
BaseType_t xTaskIncrementTick( void )
 800628c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006290:	4b46      	ldr	r3, [pc, #280]	@ (80063ac <xTaskIncrementTick.part.0+0x120>)
 8006292:	681e      	ldr	r6, [r3, #0]
 8006294:	3601      	adds	r6, #1
BaseType_t xTaskIncrementTick( void )
 8006296:	b083      	sub	sp, #12
		xTickCount = xConstTickCount;
 8006298:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800629a:	2e00      	cmp	r6, #0
 800629c:	d03e      	beq.n	800631c <xTaskIncrementTick.part.0+0x90>
 800629e:	4b44      	ldr	r3, [pc, #272]	@ (80063b0 <xTaskIncrementTick.part.0+0x124>)
 80062a0:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	429e      	cmp	r6, r3
 80062a6:	d346      	bcc.n	8006336 <xTaskIncrementTick.part.0+0xaa>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062a8:	4f42      	ldr	r7, [pc, #264]	@ (80063b4 <xTaskIncrementTick.part.0+0x128>)
 80062aa:	f8df 9118 	ldr.w	r9, [pc, #280]	@ 80063c4 <xTaskIncrementTick.part.0+0x138>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	f8df a114 	ldr.w	sl, [pc, #276]	@ 80063c8 <xTaskIncrementTick.part.0+0x13c>
 80062b4:	681d      	ldr	r5, [r3, #0]
 80062b6:	2d00      	cmp	r5, #0
 80062b8:	d073      	beq.n	80063a2 <xTaskIncrementTick.part.0+0x116>
					prvAddTaskToReadyList( pxTCB );
 80062ba:	f8df 8110 	ldr.w	r8, [pc, #272]	@ 80063cc <xTaskIncrementTick.part.0+0x140>
BaseType_t xSwitchRequired = pdFALSE;
 80062be:	2500      	movs	r5, #0
 80062c0:	e020      	b.n	8006304 <xTaskIncrementTick.part.0+0x78>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062c2:	f7ff fa35 	bl	8005730 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062c6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062c8:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062cc:	b10b      	cbz	r3, 80062d2 <xTaskIncrementTick.part.0+0x46>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062ce:	f7ff fa2f 	bl	8005730 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062d2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80062d4:	f8d8 2000 	ldr.w	r2, [r8]
 80062d8:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80062dc:	4293      	cmp	r3, r2
 80062de:	4659      	mov	r1, fp
 80062e0:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 80062e4:	bf88      	it	hi
 80062e6:	f8c8 3000 	strhi.w	r3, [r8]
 80062ea:	f7ff f9fb 	bl	80056e4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062ee:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062f2:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062f4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80062f6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062f8:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 80062fa:	4291      	cmp	r1, r2
 80062fc:	bf28      	it	cs
 80062fe:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006300:	2b00      	cmp	r3, #0
 8006302:	d04e      	beq.n	80063a2 <xTaskIncrementTick.part.0+0x116>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800630a:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800630c:	f104 0b04 	add.w	fp, r4, #4
					if( xConstTickCount < xItemValue )
 8006310:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006312:	4658      	mov	r0, fp
					if( xConstTickCount < xItemValue )
 8006314:	d2d5      	bcs.n	80062c2 <xTaskIncrementTick.part.0+0x36>
						xNextTaskUnblockTime = xItemValue;
 8006316:	9a01      	ldr	r2, [sp, #4]
 8006318:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800631a:	e011      	b.n	8006340 <xTaskIncrementTick.part.0+0xb4>
			taskSWITCH_DELAYED_LISTS();
 800631c:	4b25      	ldr	r3, [pc, #148]	@ (80063b4 <xTaskIncrementTick.part.0+0x128>)
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	6812      	ldr	r2, [r2, #0]
 8006322:	b30a      	cbz	r2, 8006368 <xTaskIncrementTick.part.0+0xdc>
 8006324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	e7fe      	b.n	8006334 <xTaskIncrementTick.part.0+0xa8>
 8006336:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80063c4 <xTaskIncrementTick.part.0+0x138>
 800633a:	f8df a08c 	ldr.w	sl, [pc, #140]	@ 80063c8 <xTaskIncrementTick.part.0+0x13c>
BaseType_t xSwitchRequired = pdFALSE;
 800633e:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006340:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
 8006344:	491c      	ldr	r1, [pc, #112]	@ (80063b8 <xTaskIncrementTick.part.0+0x12c>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006348:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
 8006352:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
 8006354:	2a02      	cmp	r2, #2
 8006356:	bf28      	it	cs
 8006358:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 800635a:	2b00      	cmp	r3, #0
}
 800635c:	bf0c      	ite	eq
 800635e:	4628      	moveq	r0, r5
 8006360:	2001      	movne	r0, #1
 8006362:	b003      	add	sp, #12
 8006364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8006368:	4a14      	ldr	r2, [pc, #80]	@ (80063bc <xTaskIncrementTick.part.0+0x130>)
 800636a:	6818      	ldr	r0, [r3, #0]
 800636c:	6811      	ldr	r1, [r2, #0]
 800636e:	6019      	str	r1, [r3, #0]
 8006370:	4913      	ldr	r1, [pc, #76]	@ (80063c0 <xTaskIncrementTick.part.0+0x134>)
 8006372:	6010      	str	r0, [r2, #0]
 8006374:	680a      	ldr	r2, [r1, #0]
 8006376:	3201      	adds	r2, #1
 8006378:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	6812      	ldr	r2, [r2, #0]
 800637e:	b93a      	cbnz	r2, 8006390 <xTaskIncrementTick.part.0+0x104>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006380:	4b0b      	ldr	r3, [pc, #44]	@ (80063b0 <xTaskIncrementTick.part.0+0x124>)
 8006382:	9301      	str	r3, [sp, #4]
 8006384:	461a      	mov	r2, r3
 8006386:	f04f 33ff 	mov.w	r3, #4294967295
 800638a:	6013      	str	r3, [r2, #0]
 800638c:	4613      	mov	r3, r2
 800638e:	e788      	b.n	80062a2 <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006390:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006392:	4a07      	ldr	r2, [pc, #28]	@ (80063b0 <xTaskIncrementTick.part.0+0x124>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006394:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006396:	9201      	str	r2, [sp, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	4613      	mov	r3, r2
	}
}
 80063a0:	e77f      	b.n	80062a2 <xTaskIncrementTick.part.0+0x16>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063a2:	9a01      	ldr	r2, [sp, #4]
 80063a4:	f04f 33ff 	mov.w	r3, #4294967295
 80063a8:	6013      	str	r3, [r2, #0]
					break;
 80063aa:	e7c9      	b.n	8006340 <xTaskIncrementTick.part.0+0xb4>
 80063ac:	200013a8 	.word	0x200013a8
 80063b0:	2000138c 	.word	0x2000138c
 80063b4:	200013f4 	.word	0x200013f4
 80063b8:	20001398 	.word	0x20001398
 80063bc:	200013f0 	.word	0x200013f0
 80063c0:	20001394 	.word	0x20001394
 80063c4:	20001420 	.word	0x20001420
 80063c8:	20001880 	.word	0x20001880
 80063cc:	200013a4 	.word	0x200013a4

080063d0 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 80063d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
 80063d4:	4d42      	ldr	r5, [pc, #264]	@ (80064e0 <xTaskResumeAll.part.0+0x110>)
	taskENTER_CRITICAL();
 80063d6:	f000 fe8d 	bl	80070f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80063da:	682b      	ldr	r3, [r5, #0]
 80063dc:	3b01      	subs	r3, #1
 80063de:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063e0:	682b      	ldr	r3, [r5, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d165      	bne.n	80064b2 <xTaskResumeAll.part.0+0xe2>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063e6:	4b3f      	ldr	r3, [pc, #252]	@ (80064e4 <xTaskResumeAll.part.0+0x114>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d061      	beq.n	80064b2 <xTaskResumeAll.part.0+0xe2>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063ee:	4e3e      	ldr	r6, [pc, #248]	@ (80064e8 <xTaskResumeAll.part.0+0x118>)
 80063f0:	6833      	ldr	r3, [r6, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d070      	beq.n	80064d8 <xTaskResumeAll.part.0+0x108>
 80063f6:	4f3d      	ldr	r7, [pc, #244]	@ (80064ec <xTaskResumeAll.part.0+0x11c>)
 80063f8:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 80064fc <xTaskResumeAll.part.0+0x12c>
 80063fc:	f8df 8100 	ldr.w	r8, [pc, #256]	@ 8006500 <xTaskResumeAll.part.0+0x130>
 8006400:	f8df a100 	ldr.w	sl, [pc, #256]	@ 8006504 <xTaskResumeAll.part.0+0x134>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006404:	68f3      	ldr	r3, [r6, #12]
 8006406:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006408:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800640c:	f104 0018 	add.w	r0, r4, #24
 8006410:	f7ff f98e 	bl	8005730 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006414:	4658      	mov	r0, fp
 8006416:	f7ff f98b 	bl	8005730 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800641a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800641c:	683a      	ldr	r2, [r7, #0]
 800641e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8006422:	4293      	cmp	r3, r2
 8006424:	4659      	mov	r1, fp
 8006426:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 800642a:	bf88      	it	hi
 800642c:	603b      	strhi	r3, [r7, #0]
 800642e:	f7ff f959 	bl	80056e4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006432:	f8d8 3000 	ldr.w	r3, [r8]
 8006436:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643a:	429a      	cmp	r2, r3
 800643c:	d33f      	bcc.n	80064be <xTaskResumeAll.part.0+0xee>
						xYieldPending = pdTRUE;
 800643e:	2301      	movs	r3, #1
 8006440:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006444:	6833      	ldr	r3, [r6, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1dc      	bne.n	8006404 <xTaskResumeAll.part.0+0x34>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800644a:	4b29      	ldr	r3, [pc, #164]	@ (80064f0 <xTaskResumeAll.part.0+0x120>)
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	6812      	ldr	r2, [r2, #0]
 8006450:	2a00      	cmp	r2, #0
 8006452:	d03c      	beq.n	80064ce <xTaskResumeAll.part.0+0xfe>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006454:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006456:	4b27      	ldr	r3, [pc, #156]	@ (80064f4 <xTaskResumeAll.part.0+0x124>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006458:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800645a:	68d2      	ldr	r2, [r2, #12]
 800645c:	6852      	ldr	r2, [r2, #4]
 800645e:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006460:	4e25      	ldr	r6, [pc, #148]	@ (80064f8 <xTaskResumeAll.part.0+0x128>)
 8006462:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8006464:	b194      	cbz	r4, 800648c <xTaskResumeAll.part.0+0xbc>
								xYieldPending = pdTRUE;
 8006466:	2701      	movs	r7, #1
 8006468:	e006      	b.n	8006478 <xTaskResumeAll.part.0+0xa8>
 800646a:	f7ff ff0f 	bl	800628c <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
 800646e:	b108      	cbz	r0, 8006474 <xTaskResumeAll.part.0+0xa4>
								xYieldPending = pdTRUE;
 8006470:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006474:	3c01      	subs	r4, #1
 8006476:	d008      	beq.n	800648a <xTaskResumeAll.part.0+0xba>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006478:	682b      	ldr	r3, [r5, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0f5      	beq.n	800646a <xTaskResumeAll.part.0+0x9a>
		++xPendedTicks;
 800647e:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006480:	3c01      	subs	r4, #1
		++xPendedTicks;
 8006482:	f103 0301 	add.w	r3, r3, #1
 8006486:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006488:	d1f6      	bne.n	8006478 <xTaskResumeAll.part.0+0xa8>
						xPendedTicks = 0;
 800648a:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800648c:	f8da 3000 	ldr.w	r3, [sl]
 8006490:	b17b      	cbz	r3, 80064b2 <xTaskResumeAll.part.0+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
 8006492:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800649a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80064a6:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 80064a8:	f000 fe46 	bl	8007138 <vPortExitCritical>
}
 80064ac:	4620      	mov	r0, r4
 80064ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 80064b2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80064b4:	f000 fe40 	bl	8007138 <vPortExitCritical>
}
 80064b8:	4620      	mov	r0, r4
 80064ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064be:	6833      	ldr	r3, [r6, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d19f      	bne.n	8006404 <xTaskResumeAll.part.0+0x34>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064c4:	4b0a      	ldr	r3, [pc, #40]	@ (80064f0 <xTaskResumeAll.part.0+0x120>)
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	6812      	ldr	r2, [r2, #0]
 80064ca:	2a00      	cmp	r2, #0
 80064cc:	d1c2      	bne.n	8006454 <xTaskResumeAll.part.0+0x84>
		xNextTaskUnblockTime = portMAX_DELAY;
 80064ce:	4b09      	ldr	r3, [pc, #36]	@ (80064f4 <xTaskResumeAll.part.0+0x124>)
 80064d0:	f04f 32ff 	mov.w	r2, #4294967295
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	e7c3      	b.n	8006460 <xTaskResumeAll.part.0+0x90>
 80064d8:	f8df a028 	ldr.w	sl, [pc, #40]	@ 8006504 <xTaskResumeAll.part.0+0x134>
 80064dc:	e7c0      	b.n	8006460 <xTaskResumeAll.part.0+0x90>
 80064de:	bf00      	nop
 80064e0:	20001388 	.word	0x20001388
 80064e4:	200013ac 	.word	0x200013ac
 80064e8:	200013dc 	.word	0x200013dc
 80064ec:	200013a4 	.word	0x200013a4
 80064f0:	200013f4 	.word	0x200013f4
 80064f4:	2000138c 	.word	0x2000138c
 80064f8:	2000139c 	.word	0x2000139c
 80064fc:	20001420 	.word	0x20001420
 8006500:	20001880 	.word	0x20001880
 8006504:	20001398 	.word	0x20001398

08006508 <xTaskCreateStatic>:
	{
 8006508:	b530      	push	{r4, r5, lr}
 800650a:	b087      	sub	sp, #28
 800650c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800650e:	b1c4      	cbz	r4, 8006542 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8006510:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8006512:	b16d      	cbz	r5, 8006530 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8006514:	25a8      	movs	r5, #168	@ 0xa8
 8006516:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006518:	9d05      	ldr	r5, [sp, #20]
 800651a:	2da8      	cmp	r5, #168	@ 0xa8
 800651c:	d01a      	beq.n	8006554 <xTaskCreateStatic+0x4c>
 800651e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	e7fe      	b.n	800652e <xTaskCreateStatic+0x26>
 8006530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006534:	f383 8811 	msr	BASEPRI, r3
 8006538:	f3bf 8f6f 	isb	sy
 800653c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8006540:	e7fe      	b.n	8006540 <xTaskCreateStatic+0x38>
 8006542:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006546:	f383 8811 	msr	BASEPRI, r3
 800654a:	f3bf 8f6f 	isb	sy
 800654e:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8006552:	e7fe      	b.n	8006552 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006554:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8006556:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006558:	2402      	movs	r4, #2
 800655a:	f885 40a5 	strb.w	r4, [r5, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800655e:	ac04      	add	r4, sp, #16
 8006560:	e9cd 4501 	strd	r4, r5, [sp, #4]
 8006564:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006566:	9400      	str	r4, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006568:	9c05      	ldr	r4, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800656a:	f7ff fdb1 	bl	80060d0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800656e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8006570:	f7ff fd28 	bl	8005fc4 <prvAddNewTaskToReadyList>
	}
 8006574:	9804      	ldr	r0, [sp, #16]
 8006576:	b007      	add	sp, #28
 8006578:	bd30      	pop	{r4, r5, pc}
 800657a:	bf00      	nop

0800657c <xTaskCreate>:
	{
 800657c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006580:	4607      	mov	r7, r0
 8006582:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006584:	0090      	lsls	r0, r2, #2
	{
 8006586:	4615      	mov	r5, r2
 8006588:	4688      	mov	r8, r1
 800658a:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800658c:	f000 fee4 	bl	8007358 <pvPortMalloc>
			if( pxStack != NULL )
 8006590:	b1f0      	cbz	r0, 80065d0 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006592:	4604      	mov	r4, r0
 8006594:	20a8      	movs	r0, #168	@ 0xa8
 8006596:	f000 fedf 	bl	8007358 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800659a:	4606      	mov	r6, r0
 800659c:	b1a8      	cbz	r0, 80065ca <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 800659e:	6304      	str	r4, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80065a0:	2400      	movs	r4, #0
 80065a2:	f886 40a5 	strb.w	r4, [r6, #165]	@ 0xa5
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80065a6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80065a8:	9401      	str	r4, [sp, #4]
 80065aa:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80065ac:	9602      	str	r6, [sp, #8]
 80065ae:	464b      	mov	r3, r9
 80065b0:	462a      	mov	r2, r5
 80065b2:	4641      	mov	r1, r8
 80065b4:	4638      	mov	r0, r7
 80065b6:	9400      	str	r4, [sp, #0]
 80065b8:	f7ff fd8a 	bl	80060d0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80065bc:	4630      	mov	r0, r6
 80065be:	f7ff fd01 	bl	8005fc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80065c2:	2001      	movs	r0, #1
	}
 80065c4:	b005      	add	sp, #20
 80065c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80065ca:	4620      	mov	r0, r4
 80065cc:	f000 ff82 	bl	80074d4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065d0:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80065d4:	b005      	add	sp, #20
 80065d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065da:	bf00      	nop

080065dc <vTaskDelayUntil>:
		configASSERT( pxPreviousWakeTime );
 80065dc:	b340      	cbz	r0, 8006630 <vTaskDelayUntil+0x54>
		configASSERT( ( xTimeIncrement > 0U ) );
 80065de:	b941      	cbnz	r1, 80065f2 <vTaskDelayUntil+0x16>
 80065e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	e7fe      	b.n	80065f0 <vTaskDelayUntil+0x14>
	{
 80065f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		configASSERT( uxSchedulerSuspended == 0 );
 80065f6:	4d31      	ldr	r5, [pc, #196]	@ (80066bc <vTaskDelayUntil+0xe0>)
 80065f8:	682b      	ldr	r3, [r5, #0]
 80065fa:	bb13      	cbnz	r3, 8006642 <vTaskDelayUntil+0x66>
	++uxSchedulerSuspended;
 80065fc:	682b      	ldr	r3, [r5, #0]
 80065fe:	3301      	adds	r3, #1
 8006600:	602b      	str	r3, [r5, #0]
			const TickType_t xConstTickCount = xTickCount;
 8006602:	4e2f      	ldr	r6, [pc, #188]	@ (80066c0 <vTaskDelayUntil+0xe4>)
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006604:	6803      	ldr	r3, [r0, #0]
			const TickType_t xConstTickCount = xTickCount;
 8006606:	6832      	ldr	r2, [r6, #0]
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006608:	185c      	adds	r4, r3, r1
 800660a:	bf2c      	ite	cs
 800660c:	2101      	movcs	r1, #1
 800660e:	2100      	movcc	r1, #0
			if( xConstTickCount < *pxPreviousWakeTime )
 8006610:	4293      	cmp	r3, r2
 8006612:	d91f      	bls.n	8006654 <vTaskDelayUntil+0x78>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006614:	b9f9      	cbnz	r1, 8006656 <vTaskDelayUntil+0x7a>
			*pxPreviousWakeTime = xTimeToWake;
 8006616:	6004      	str	r4, [r0, #0]
	configASSERT( uxSchedulerSuspended );
 8006618:	682b      	ldr	r3, [r5, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d133      	bne.n	8006686 <vTaskDelayUntil+0xaa>
 800661e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	e7fe      	b.n	800662e <vTaskDelayUntil+0x52>
 8006630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxPreviousWakeTime );
 8006640:	e7fe      	b.n	8006640 <vTaskDelayUntil+0x64>
 8006642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
		configASSERT( uxSchedulerSuspended == 0 );
 8006652:	e7fe      	b.n	8006652 <vTaskDelayUntil+0x76>
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006654:	b909      	cbnz	r1, 800665a <vTaskDelayUntil+0x7e>
 8006656:	42a2      	cmp	r2, r4
 8006658:	d2dd      	bcs.n	8006616 <vTaskDelayUntil+0x3a>
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800665a:	4f1a      	ldr	r7, [pc, #104]	@ (80066c4 <vTaskDelayUntil+0xe8>)
const TickType_t xConstTickCount = xTickCount;
 800665c:	f8d6 8000 	ldr.w	r8, [r6]
			*pxPreviousWakeTime = xTimeToWake;
 8006660:	6004      	str	r4, [r0, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006662:	6838      	ldr	r0, [r7, #0]
 8006664:	eba8 0602 	sub.w	r6, r8, r2
 8006668:	3004      	adds	r0, #4
 800666a:	f7ff f861 	bl	8005730 <uxListRemove>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 800666e:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006670:	683b      	ldr	r3, [r7, #0]

			if( xTimeToWake < xConstTickCount )
 8006672:	45a0      	cmp	r8, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006674:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006676:	d915      	bls.n	80066a4 <vTaskDelayUntil+0xc8>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006678:	4b13      	ldr	r3, [pc, #76]	@ (80066c8 <vTaskDelayUntil+0xec>)
 800667a:	6818      	ldr	r0, [r3, #0]
 800667c:	6839      	ldr	r1, [r7, #0]
 800667e:	3104      	adds	r1, #4
 8006680:	f7ff f83e 	bl	8005700 <vListInsert>
 8006684:	e7c8      	b.n	8006618 <vTaskDelayUntil+0x3c>
 8006686:	f7ff fea3 	bl	80063d0 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 800668a:	b948      	cbnz	r0, 80066a0 <vTaskDelayUntil+0xc4>
			portYIELD_WITHIN_API();
 800668c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006690:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006694:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	f3bf 8f6f 	isb	sy
	}
 80066a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066a4:	4b09      	ldr	r3, [pc, #36]	@ (80066cc <vTaskDelayUntil+0xf0>)
 80066a6:	6818      	ldr	r0, [r3, #0]
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	3104      	adds	r1, #4
 80066ac:	f7ff f828 	bl	8005700 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80066b0:	4b07      	ldr	r3, [pc, #28]	@ (80066d0 <vTaskDelayUntil+0xf4>)
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 80066b6:	bf38      	it	cc
 80066b8:	601c      	strcc	r4, [r3, #0]
 80066ba:	e7ad      	b.n	8006618 <vTaskDelayUntil+0x3c>
 80066bc:	20001388 	.word	0x20001388
 80066c0:	200013a8 	.word	0x200013a8
 80066c4:	20001880 	.word	0x20001880
 80066c8:	200013f0 	.word	0x200013f0
 80066cc:	200013f4 	.word	0x200013f4
 80066d0:	2000138c 	.word	0x2000138c

080066d4 <vTaskDelay>:
	{
 80066d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80066d6:	b950      	cbnz	r0, 80066ee <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80066d8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80066dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066e0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	f3bf 8f6f 	isb	sy
	}
 80066ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80066ee:	4d1e      	ldr	r5, [pc, #120]	@ (8006768 <vTaskDelay+0x94>)
 80066f0:	682b      	ldr	r3, [r5, #0]
 80066f2:	b143      	cbz	r3, 8006706 <vTaskDelay+0x32>
 80066f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066f8:	f383 8811 	msr	BASEPRI, r3
 80066fc:	f3bf 8f6f 	isb	sy
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	e7fe      	b.n	8006704 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
 8006706:	682b      	ldr	r3, [r5, #0]
 8006708:	3301      	adds	r3, #1
 800670a:	4604      	mov	r4, r0
 800670c:	602b      	str	r3, [r5, #0]
const TickType_t xConstTickCount = xTickCount;
 800670e:	4b17      	ldr	r3, [pc, #92]	@ (800676c <vTaskDelay+0x98>)
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006710:	4e17      	ldr	r6, [pc, #92]	@ (8006770 <vTaskDelay+0x9c>)
const TickType_t xConstTickCount = xTickCount;
 8006712:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006714:	6830      	ldr	r0, [r6, #0]
 8006716:	3004      	adds	r0, #4
 8006718:	f7ff f80a 	bl	8005730 <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800671c:	6833      	ldr	r3, [r6, #0]
 800671e:	19e4      	adds	r4, r4, r7
 8006720:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006722:	d310      	bcc.n	8006746 <vTaskDelay+0x72>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006724:	4b13      	ldr	r3, [pc, #76]	@ (8006774 <vTaskDelay+0xa0>)
 8006726:	6818      	ldr	r0, [r3, #0]
 8006728:	6831      	ldr	r1, [r6, #0]
 800672a:	3104      	adds	r1, #4
 800672c:	f7fe ffe8 	bl	8005700 <vListInsert>
	configASSERT( uxSchedulerSuspended );
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	b9a3      	cbnz	r3, 800675e <vTaskDelay+0x8a>
 8006734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	e7fe      	b.n	8006744 <vTaskDelay+0x70>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006746:	4b0c      	ldr	r3, [pc, #48]	@ (8006778 <vTaskDelay+0xa4>)
 8006748:	6818      	ldr	r0, [r3, #0]
 800674a:	6831      	ldr	r1, [r6, #0]
 800674c:	3104      	adds	r1, #4
 800674e:	f7fe ffd7 	bl	8005700 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006752:	4b0a      	ldr	r3, [pc, #40]	@ (800677c <vTaskDelay+0xa8>)
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8006758:	bf38      	it	cc
 800675a:	601c      	strcc	r4, [r3, #0]
 800675c:	e7e8      	b.n	8006730 <vTaskDelay+0x5c>
 800675e:	f7ff fe37 	bl	80063d0 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8006762:	2800      	cmp	r0, #0
 8006764:	d0b8      	beq.n	80066d8 <vTaskDelay+0x4>
	}
 8006766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006768:	20001388 	.word	0x20001388
 800676c:	200013a8 	.word	0x200013a8
 8006770:	20001880 	.word	0x20001880
 8006774:	200013f0 	.word	0x200013f0
 8006778:	200013f4 	.word	0x200013f4
 800677c:	2000138c 	.word	0x2000138c

08006780 <vTaskStartScheduler>:
{
 8006780:	b530      	push	{r4, r5, lr}
 8006782:	b08b      	sub	sp, #44	@ 0x2c
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006784:	aa07      	add	r2, sp, #28
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006786:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006788:	a906      	add	r1, sp, #24
 800678a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800678c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006790:	f7fe ff7a 	bl	8005688 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006794:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006798:	9d05      	ldr	r5, [sp, #20]
		configASSERT( puxStackBuffer != NULL );
 800679a:	b1bb      	cbz	r3, 80067cc <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
 800679c:	b16d      	cbz	r5, 80067ba <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800679e:	21a8      	movs	r1, #168	@ 0xa8
 80067a0:	9109      	str	r1, [sp, #36]	@ 0x24
			configASSERT( xSize == sizeof( TCB_t ) );
 80067a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80067a4:	29a8      	cmp	r1, #168	@ 0xa8
 80067a6:	d01a      	beq.n	80067de <vTaskStartScheduler+0x5e>
 80067a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	e7fe      	b.n	80067b8 <vTaskStartScheduler+0x38>
 80067ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 80067ca:	e7fe      	b.n	80067ca <vTaskStartScheduler+0x4a>
 80067cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 80067dc:	e7fe      	b.n	80067dc <vTaskStartScheduler+0x5c>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80067de:	632b      	str	r3, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80067e0:	2102      	movs	r1, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80067e2:	ab08      	add	r3, sp, #32
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80067e4:	f885 10a5 	strb.w	r1, [r5, #165]	@ 0xa5
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80067e8:	9809      	ldr	r0, [sp, #36]	@ 0x24
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80067ea:	491c      	ldr	r1, [pc, #112]	@ (800685c <vTaskStartScheduler+0xdc>)
 80067ec:	481c      	ldr	r0, [pc, #112]	@ (8006860 <vTaskStartScheduler+0xe0>)
 80067ee:	9400      	str	r4, [sp, #0]
 80067f0:	e9cd 3501 	strd	r3, r5, [sp, #4]
 80067f4:	4623      	mov	r3, r4
 80067f6:	f7ff fc6b 	bl	80060d0 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80067fa:	4628      	mov	r0, r5
 80067fc:	f7ff fbe2 	bl	8005fc4 <prvAddNewTaskToReadyList>
		return xReturn;
 8006800:	9b08      	ldr	r3, [sp, #32]
		if( xIdleTaskHandle != NULL )
 8006802:	b17b      	cbz	r3, 8006824 <vTaskStartScheduler+0xa4>
			xReturn = xTimerCreateTimerTask();
 8006804:	f000 fbb0 	bl	8006f68 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8006808:	2801      	cmp	r0, #1
			xReturn = xTimerCreateTimerTask();
 800680a:	4603      	mov	r3, r0
	if( xReturn == pdPASS )
 800680c:	d00c      	beq.n	8006828 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800680e:	3301      	adds	r3, #1
 8006810:	d108      	bne.n	8006824 <vTaskStartScheduler+0xa4>
 8006812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	e7fe      	b.n	8006822 <vTaskStartScheduler+0xa2>
}
 8006824:	b00b      	add	sp, #44	@ 0x2c
 8006826:	bd30      	pop	{r4, r5, pc}
 8006828:	f04f 0250 	mov.w	r2, #80	@ 0x50
 800682c:	f382 8811 	msr	BASEPRI, r2
 8006830:	f3bf 8f6f 	isb	sy
 8006834:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006838:	4a0a      	ldr	r2, [pc, #40]	@ (8006864 <vTaskStartScheduler+0xe4>)
 800683a:	490b      	ldr	r1, [pc, #44]	@ (8006868 <vTaskStartScheduler+0xe8>)
 800683c:	6812      	ldr	r2, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800683e:	480b      	ldr	r0, [pc, #44]	@ (800686c <vTaskStartScheduler+0xec>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006840:	3254      	adds	r2, #84	@ 0x54
 8006842:	600a      	str	r2, [r1, #0]
		xSchedulerRunning = pdTRUE;
 8006844:	490a      	ldr	r1, [pc, #40]	@ (8006870 <vTaskStartScheduler+0xf0>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006846:	4a0b      	ldr	r2, [pc, #44]	@ (8006874 <vTaskStartScheduler+0xf4>)
		xNextTaskUnblockTime = portMAX_DELAY;
 8006848:	f04f 35ff 	mov.w	r5, #4294967295
 800684c:	6005      	str	r5, [r0, #0]
		xSchedulerRunning = pdTRUE;
 800684e:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006850:	6014      	str	r4, [r2, #0]
}
 8006852:	b00b      	add	sp, #44	@ 0x2c
 8006854:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8006858:	f000 bcde 	b.w	8007218 <xPortStartScheduler>
 800685c:	0800bff4 	.word	0x0800bff4
 8006860:	080061ed 	.word	0x080061ed
 8006864:	20001880 	.word	0x20001880
 8006868:	20000188 	.word	0x20000188
 800686c:	2000138c 	.word	0x2000138c
 8006870:	200013a0 	.word	0x200013a0
 8006874:	200013a8 	.word	0x200013a8

08006878 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8006878:	4a02      	ldr	r2, [pc, #8]	@ (8006884 <vTaskSuspendAll+0xc>)
 800687a:	6813      	ldr	r3, [r2, #0]
 800687c:	3301      	adds	r3, #1
 800687e:	6013      	str	r3, [r2, #0]
}
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	20001388 	.word	0x20001388

08006888 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8006888:	4b06      	ldr	r3, [pc, #24]	@ (80068a4 <xTaskResumeAll+0x1c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	b943      	cbnz	r3, 80068a0 <xTaskResumeAll+0x18>
 800688e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	e7fe      	b.n	800689e <xTaskResumeAll+0x16>
 80068a0:	f7ff bd96 	b.w	80063d0 <xTaskResumeAll.part.0>
 80068a4:	20001388 	.word	0x20001388

080068a8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80068a8:	4b01      	ldr	r3, [pc, #4]	@ (80068b0 <xTaskGetTickCount+0x8>)
 80068aa:	6818      	ldr	r0, [r3, #0]
}
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	200013a8 	.word	0x200013a8

080068b4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068b4:	4b05      	ldr	r3, [pc, #20]	@ (80068cc <xTaskIncrementTick+0x18>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	b90b      	cbnz	r3, 80068be <xTaskIncrementTick+0xa>
 80068ba:	f7ff bce7 	b.w	800628c <xTaskIncrementTick.part.0>
		++xPendedTicks;
 80068be:	4a04      	ldr	r2, [pc, #16]	@ (80068d0 <xTaskIncrementTick+0x1c>)
 80068c0:	6813      	ldr	r3, [r2, #0]
 80068c2:	3301      	adds	r3, #1
}
 80068c4:	2000      	movs	r0, #0
		++xPendedTicks;
 80068c6:	6013      	str	r3, [r2, #0]
}
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	20001388 	.word	0x20001388
 80068d0:	2000139c 	.word	0x2000139c

080068d4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80068d4:	4b1f      	ldr	r3, [pc, #124]	@ (8006954 <vTaskSwitchContext+0x80>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	b11b      	cbz	r3, 80068e2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 80068da:	4b1f      	ldr	r3, [pc, #124]	@ (8006958 <vTaskSwitchContext+0x84>)
 80068dc:	2201      	movs	r2, #1
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	4770      	bx	lr
		xYieldPending = pdFALSE;
 80068e2:	4a1d      	ldr	r2, [pc, #116]	@ (8006958 <vTaskSwitchContext+0x84>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068e4:	491d      	ldr	r1, [pc, #116]	@ (800695c <vTaskSwitchContext+0x88>)
{
 80068e6:	b410      	push	{r4}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068e8:	4c1d      	ldr	r4, [pc, #116]	@ (8006960 <vTaskSwitchContext+0x8c>)
		xYieldPending = pdFALSE;
 80068ea:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80068f2:	0092      	lsls	r2, r2, #2
 80068f4:	0098      	lsls	r0, r3, #2
 80068f6:	588a      	ldr	r2, [r1, r2]
 80068f8:	b942      	cbnz	r2, 800690c <vTaskSwitchContext+0x38>
 80068fa:	b313      	cbz	r3, 8006942 <vTaskSwitchContext+0x6e>
 80068fc:	3b01      	subs	r3, #1
 80068fe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006902:	0098      	lsls	r0, r3, #2
 8006904:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006908:	2a00      	cmp	r2, #0
 800690a:	d0f6      	beq.n	80068fa <vTaskSwitchContext+0x26>
 800690c:	4418      	add	r0, r3
 800690e:	eb01 0c80 	add.w	ip, r1, r0, lsl #2
 8006912:	4662      	mov	r2, ip
 8006914:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8006918:	6849      	ldr	r1, [r1, #4]
 800691a:	f8cc 1004 	str.w	r1, [ip, #4]
 800691e:	3208      	adds	r2, #8
 8006920:	4291      	cmp	r1, r2
 8006922:	bf08      	it	eq
 8006924:	6849      	ldreq	r1, [r1, #4]
 8006926:	4a0f      	ldr	r2, [pc, #60]	@ (8006964 <vTaskSwitchContext+0x90>)
 8006928:	bf08      	it	eq
 800692a:	f8cc 1004 	streq.w	r1, [ip, #4]
 800692e:	68c9      	ldr	r1, [r1, #12]
 8006930:	6011      	str	r1, [r2, #0]
 8006932:	6023      	str	r3, [r4, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006934:	6813      	ldr	r3, [r2, #0]
 8006936:	4a0c      	ldr	r2, [pc, #48]	@ (8006968 <vTaskSwitchContext+0x94>)
}
 8006938:	f85d 4b04 	ldr.w	r4, [sp], #4
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800693c:	3354      	adds	r3, #84	@ 0x54
 800693e:	6013      	str	r3, [r2, #0]
}
 8006940:	4770      	bx	lr
 8006942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8006952:	e7fe      	b.n	8006952 <vTaskSwitchContext+0x7e>
 8006954:	20001388 	.word	0x20001388
 8006958:	20001398 	.word	0x20001398
 800695c:	20001420 	.word	0x20001420
 8006960:	200013a4 	.word	0x200013a4
 8006964:	20001880 	.word	0x20001880
 8006968:	20000188 	.word	0x20000188

0800696c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800696c:	b1d0      	cbz	r0, 80069a4 <vTaskPlaceOnEventList+0x38>
{
 800696e:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006970:	4d1a      	ldr	r5, [pc, #104]	@ (80069dc <vTaskPlaceOnEventList+0x70>)
 8006972:	460c      	mov	r4, r1
 8006974:	6829      	ldr	r1, [r5, #0]
 8006976:	3118      	adds	r1, #24
 8006978:	f7fe fec2 	bl	8005700 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800697c:	4b18      	ldr	r3, [pc, #96]	@ (80069e0 <vTaskPlaceOnEventList+0x74>)
 800697e:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006980:	6828      	ldr	r0, [r5, #0]
 8006982:	3004      	adds	r0, #4
 8006984:	f7fe fed4 	bl	8005730 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006988:	1c63      	adds	r3, r4, #1
 800698a:	d014      	beq.n	80069b6 <vTaskPlaceOnEventList+0x4a>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800698c:	682b      	ldr	r3, [r5, #0]
 800698e:	19a4      	adds	r4, r4, r6
 8006990:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006992:	d317      	bcc.n	80069c4 <vTaskPlaceOnEventList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006994:	4b13      	ldr	r3, [pc, #76]	@ (80069e4 <vTaskPlaceOnEventList+0x78>)
 8006996:	6818      	ldr	r0, [r3, #0]
 8006998:	6829      	ldr	r1, [r5, #0]
}
 800699a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800699e:	3104      	adds	r1, #4
 80069a0:	f7fe beae 	b.w	8005700 <vListInsert>
 80069a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a8:	f383 8811 	msr	BASEPRI, r3
 80069ac:	f3bf 8f6f 	isb	sy
 80069b0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 80069b4:	e7fe      	b.n	80069b4 <vTaskPlaceOnEventList+0x48>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069b6:	6829      	ldr	r1, [r5, #0]
 80069b8:	480b      	ldr	r0, [pc, #44]	@ (80069e8 <vTaskPlaceOnEventList+0x7c>)
}
 80069ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069be:	3104      	adds	r1, #4
 80069c0:	f7fe be90 	b.w	80056e4 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069c4:	4b09      	ldr	r3, [pc, #36]	@ (80069ec <vTaskPlaceOnEventList+0x80>)
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	6829      	ldr	r1, [r5, #0]
 80069ca:	3104      	adds	r1, #4
 80069cc:	f7fe fe98 	bl	8005700 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80069d0:	4b07      	ldr	r3, [pc, #28]	@ (80069f0 <vTaskPlaceOnEventList+0x84>)
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80069d6:	bf38      	it	cc
 80069d8:	601c      	strcc	r4, [r3, #0]
}
 80069da:	bd70      	pop	{r4, r5, r6, pc}
 80069dc:	20001880 	.word	0x20001880
 80069e0:	200013a8 	.word	0x200013a8
 80069e4:	200013f0 	.word	0x200013f0
 80069e8:	200013b0 	.word	0x200013b0
 80069ec:	200013f4 	.word	0x200013f4
 80069f0:	2000138c 	.word	0x2000138c

080069f4 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
 80069f4:	b330      	cbz	r0, 8006a44 <vTaskPlaceOnEventListRestricted+0x50>
	{
 80069f6:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80069f8:	4e1d      	ldr	r6, [pc, #116]	@ (8006a70 <vTaskPlaceOnEventListRestricted+0x7c>)
 80069fa:	460c      	mov	r4, r1
 80069fc:	6831      	ldr	r1, [r6, #0]
 80069fe:	4615      	mov	r5, r2
 8006a00:	3118      	adds	r1, #24
 8006a02:	f7fe fe6f 	bl	80056e4 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 8006a06:	4b1b      	ldr	r3, [pc, #108]	@ (8006a74 <vTaskPlaceOnEventListRestricted+0x80>)
		if( xWaitIndefinitely != pdFALSE )
 8006a08:	b985      	cbnz	r5, 8006a2c <vTaskPlaceOnEventListRestricted+0x38>
const TickType_t xConstTickCount = xTickCount;
 8006a0a:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a0c:	6830      	ldr	r0, [r6, #0]
 8006a0e:	3004      	adds	r0, #4
 8006a10:	f7fe fe8e 	bl	8005730 <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a14:	6833      	ldr	r3, [r6, #0]
 8006a16:	1964      	adds	r4, r4, r5
 8006a18:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a1a:	d31c      	bcc.n	8006a56 <vTaskPlaceOnEventListRestricted+0x62>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a1c:	4b16      	ldr	r3, [pc, #88]	@ (8006a78 <vTaskPlaceOnEventListRestricted+0x84>)
 8006a1e:	6818      	ldr	r0, [r3, #0]
 8006a20:	6831      	ldr	r1, [r6, #0]
	}
 8006a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a26:	3104      	adds	r1, #4
 8006a28:	f7fe be6a 	b.w	8005700 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8006a2c:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a2e:	6830      	ldr	r0, [r6, #0]
 8006a30:	3004      	adds	r0, #4
 8006a32:	f7fe fe7d 	bl	8005730 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a36:	6831      	ldr	r1, [r6, #0]
 8006a38:	4810      	ldr	r0, [pc, #64]	@ (8006a7c <vTaskPlaceOnEventListRestricted+0x88>)
	}
 8006a3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a3e:	3104      	adds	r1, #4
 8006a40:	f7fe be50 	b.w	80056e4 <vListInsertEnd>
 8006a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a48:	f383 8811 	msr	BASEPRI, r3
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 8006a54:	e7fe      	b.n	8006a54 <vTaskPlaceOnEventListRestricted+0x60>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a56:	4b0a      	ldr	r3, [pc, #40]	@ (8006a80 <vTaskPlaceOnEventListRestricted+0x8c>)
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	6831      	ldr	r1, [r6, #0]
 8006a5c:	3104      	adds	r1, #4
 8006a5e:	f7fe fe4f 	bl	8005700 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a62:	4b08      	ldr	r3, [pc, #32]	@ (8006a84 <vTaskPlaceOnEventListRestricted+0x90>)
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8006a68:	bf38      	it	cc
 8006a6a:	601c      	strcc	r4, [r3, #0]
	}
 8006a6c:	bd70      	pop	{r4, r5, r6, pc}
 8006a6e:	bf00      	nop
 8006a70:	20001880 	.word	0x20001880
 8006a74:	200013a8 	.word	0x200013a8
 8006a78:	200013f0 	.word	0x200013f0
 8006a7c:	200013b0 	.word	0x200013b0
 8006a80:	200013f4 	.word	0x200013f4
 8006a84:	2000138c 	.word	0x2000138c

08006a88 <xTaskRemoveFromEventList>:
{
 8006a88:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a8a:	68c3      	ldr	r3, [r0, #12]
 8006a8c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8006a8e:	b34c      	cbz	r4, 8006ae4 <xTaskRemoveFromEventList+0x5c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006a90:	f104 0518 	add.w	r5, r4, #24
 8006a94:	4628      	mov	r0, r5
 8006a96:	f7fe fe4b 	bl	8005730 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a9a:	4b17      	ldr	r3, [pc, #92]	@ (8006af8 <xTaskRemoveFromEventList+0x70>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	b173      	cbz	r3, 8006abe <xTaskRemoveFromEventList+0x36>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006aa0:	4816      	ldr	r0, [pc, #88]	@ (8006afc <xTaskRemoveFromEventList+0x74>)
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	f7fe fe1e 	bl	80056e4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006aa8:	4b15      	ldr	r3, [pc, #84]	@ (8006b00 <xTaskRemoveFromEventList+0x78>)
 8006aaa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab0:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8006ab2:	bf83      	ittte	hi
 8006ab4:	4b13      	ldrhi	r3, [pc, #76]	@ (8006b04 <xTaskRemoveFromEventList+0x7c>)
 8006ab6:	2001      	movhi	r0, #1
 8006ab8:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8006aba:	2000      	movls	r0, #0
}
 8006abc:	bd38      	pop	{r3, r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006abe:	1d25      	adds	r5, r4, #4
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	f7fe fe35 	bl	8005730 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006ac6:	4a10      	ldr	r2, [pc, #64]	@ (8006b08 <xTaskRemoveFromEventList+0x80>)
 8006ac8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8006aca:	6811      	ldr	r1, [r2, #0]
 8006acc:	480f      	ldr	r0, [pc, #60]	@ (8006b0c <xTaskRemoveFromEventList+0x84>)
 8006ace:	428b      	cmp	r3, r1
 8006ad0:	bf88      	it	hi
 8006ad2:	6013      	strhi	r3, [r2, #0]
 8006ad4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006ad8:	4629      	mov	r1, r5
 8006ada:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006ade:	f7fe fe01 	bl	80056e4 <vListInsertEnd>
 8006ae2:	e7e1      	b.n	8006aa8 <xTaskRemoveFromEventList+0x20>
 8006ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006af4:	e7fe      	b.n	8006af4 <xTaskRemoveFromEventList+0x6c>
 8006af6:	bf00      	nop
 8006af8:	20001388 	.word	0x20001388
 8006afc:	200013dc 	.word	0x200013dc
 8006b00:	20001880 	.word	0x20001880
 8006b04:	20001398 	.word	0x20001398
 8006b08:	200013a4 	.word	0x200013a4
 8006b0c:	20001420 	.word	0x20001420

08006b10 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b10:	4a03      	ldr	r2, [pc, #12]	@ (8006b20 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b12:	4b04      	ldr	r3, [pc, #16]	@ (8006b24 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b14:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	e9c0 2300 	strd	r2, r3, [r0]
}
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	20001394 	.word	0x20001394
 8006b24:	200013a8 	.word	0x200013a8

08006b28 <xTaskCheckForTimeOut>:
{
 8006b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8006b2a:	b308      	cbz	r0, 8006b70 <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 8006b2c:	460d      	mov	r5, r1
 8006b2e:	b1b1      	cbz	r1, 8006b5e <xTaskCheckForTimeOut+0x36>
 8006b30:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8006b32:	f000 fadf 	bl	80070f4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8006b36:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8006b38:	4a1a      	ldr	r2, [pc, #104]	@ (8006ba4 <xTaskCheckForTimeOut+0x7c>)
			if( *pxTicksToWait == portMAX_DELAY )
 8006b3a:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8006b3c:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8006b3e:	d02c      	beq.n	8006b9a <xTaskCheckForTimeOut+0x72>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006b40:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8006ba8 <xTaskCheckForTimeOut+0x80>
 8006b44:	e9d4 6000 	ldrd	r6, r0, [r4]
 8006b48:	f8dc 7000 	ldr.w	r7, [ip]
 8006b4c:	42be      	cmp	r6, r7
 8006b4e:	d018      	beq.n	8006b82 <xTaskCheckForTimeOut+0x5a>
 8006b50:	4288      	cmp	r0, r1
 8006b52:	d816      	bhi.n	8006b82 <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 8006b54:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8006b56:	f000 faef 	bl	8007138 <vPortExitCritical>
}
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 8006b6e:	e7fe      	b.n	8006b6e <xTaskCheckForTimeOut+0x46>
 8006b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b74:	f383 8811 	msr	BASEPRI, r3
 8006b78:	f3bf 8f6f 	isb	sy
 8006b7c:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 8006b80:	e7fe      	b.n	8006b80 <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006b82:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006b86:	4573      	cmp	r3, lr
 8006b88:	d909      	bls.n	8006b9e <xTaskCheckForTimeOut+0x76>
			*pxTicksToWait -= xElapsedTime;
 8006b8a:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b8c:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b90:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 8006b92:	4403      	add	r3, r0
 8006b94:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b96:	e9c4 1200 	strd	r1, r2, [r4]
				xReturn = pdFALSE;
 8006b9a:	2400      	movs	r4, #0
 8006b9c:	e7db      	b.n	8006b56 <xTaskCheckForTimeOut+0x2e>
			*pxTicksToWait = 0;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8006ba2:	e7d7      	b.n	8006b54 <xTaskCheckForTimeOut+0x2c>
 8006ba4:	200013a8 	.word	0x200013a8
 8006ba8:	20001394 	.word	0x20001394

08006bac <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006bac:	4b01      	ldr	r3, [pc, #4]	@ (8006bb4 <vTaskMissedYield+0x8>)
 8006bae:	2201      	movs	r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]
}
 8006bb2:	4770      	bx	lr
 8006bb4:	20001398 	.word	0x20001398

08006bb8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006bb8:	4b05      	ldr	r3, [pc, #20]	@ (8006bd0 <xTaskGetSchedulerState+0x18>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	b133      	cbz	r3, 8006bcc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bbe:	4b05      	ldr	r3, [pc, #20]	@ (8006bd4 <xTaskGetSchedulerState+0x1c>)
 8006bc0:	6818      	ldr	r0, [r3, #0]
 8006bc2:	fab0 f080 	clz	r0, r0
 8006bc6:	0940      	lsrs	r0, r0, #5
 8006bc8:	0040      	lsls	r0, r0, #1
 8006bca:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006bcc:	2001      	movs	r0, #1
	}
 8006bce:	4770      	bx	lr
 8006bd0:	200013a0 	.word	0x200013a0
 8006bd4:	20001388 	.word	0x20001388

08006bd8 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8006bd8:	b308      	cbz	r0, 8006c1e <xTaskPriorityDisinherit+0x46>
	{
 8006bda:	b538      	push	{r3, r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 8006bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8006c54 <xTaskPriorityDisinherit+0x7c>)
 8006bde:	681c      	ldr	r4, [r3, #0]
 8006be0:	4284      	cmp	r4, r0
 8006be2:	d008      	beq.n	8006bf6 <xTaskPriorityDisinherit+0x1e>
 8006be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	e7fe      	b.n	8006bf4 <xTaskPriorityDisinherit+0x1c>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bf6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8006bf8:	b143      	cbz	r3, 8006c0c <xTaskPriorityDisinherit+0x34>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006bfa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006bfc:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 8006bfe:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c00:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8006c02:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c04:	d000      	beq.n	8006c08 <xTaskPriorityDisinherit+0x30>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c06:	b163      	cbz	r3, 8006c22 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8006c08:	2000      	movs	r0, #0
	}
 8006c0a:	bd38      	pop	{r3, r4, r5, pc}
 8006c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 8006c1c:	e7fe      	b.n	8006c1c <xTaskPriorityDisinherit+0x44>
	BaseType_t xReturn = pdFALSE;
 8006c1e:	2000      	movs	r0, #0
	}
 8006c20:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c22:	1d25      	adds	r5, r4, #4
 8006c24:	4628      	mov	r0, r5
 8006c26:	f7fe fd83 	bl	8005730 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c2a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					prvAddTaskToReadyList( pxTCB );
 8006c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8006c58 <xTaskPriorityDisinherit+0x80>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c2e:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c30:	f1c3 0038 	rsb	r0, r3, #56	@ 0x38
 8006c34:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c36:	6810      	ldr	r0, [r2, #0]
 8006c38:	4283      	cmp	r3, r0
 8006c3a:	4808      	ldr	r0, [pc, #32]	@ (8006c5c <xTaskPriorityDisinherit+0x84>)
 8006c3c:	bf88      	it	hi
 8006c3e:	6013      	strhi	r3, [r2, #0]
 8006c40:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006c44:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006c48:	4629      	mov	r1, r5
 8006c4a:	f7fe fd4b 	bl	80056e4 <vListInsertEnd>
					xReturn = pdTRUE;
 8006c4e:	2001      	movs	r0, #1
	}
 8006c50:	bd38      	pop	{r3, r4, r5, pc}
 8006c52:	bf00      	nop
 8006c54:	20001880 	.word	0x20001880
 8006c58:	200013a4 	.word	0x200013a4
 8006c5c:	20001420 	.word	0x20001420

08006c60 <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c64:	4e21      	ldr	r6, [pc, #132]	@ (8006cec <prvSwitchTimerLists+0x8c>)
 8006c66:	b084      	sub	sp, #16

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c68:	e00d      	b.n	8006c86 <prvSwitchTimerLists+0x26>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c6a:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c6c:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c6e:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c70:	1d25      	adds	r5, r4, #4
 8006c72:	4628      	mov	r0, r5
 8006c74:	f7fe fd5c 	bl	8005730 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c78:	6a23      	ldr	r3, [r4, #32]
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c7e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8006c82:	075b      	lsls	r3, r3, #29
 8006c84:	d40a      	bmi.n	8006c9c <prvSwitchTimerLists+0x3c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c86:	6833      	ldr	r3, [r6, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	2a00      	cmp	r2, #0
 8006c8c:	d1ed      	bne.n	8006c6a <prvSwitchTimerLists+0xa>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 8006c8e:	4a18      	ldr	r2, [pc, #96]	@ (8006cf0 <prvSwitchTimerLists+0x90>)
 8006c90:	6811      	ldr	r1, [r2, #0]
 8006c92:	6031      	str	r1, [r6, #0]
	pxOverflowTimerList = pxTemp;
 8006c94:	6013      	str	r3, [r2, #0]
}
 8006c96:	b004      	add	sp, #16
 8006c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c9c:	69a3      	ldr	r3, [r4, #24]
	if( xTimerQueue != NULL )
 8006c9e:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 8006cf4 <prvSwitchTimerLists+0x94>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006ca2:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 8006ca4:	429f      	cmp	r7, r3
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ca6:	4629      	mov	r1, r5
			if( xReloadTime > xNextExpireTime )
 8006ca8:	d205      	bcs.n	8006cb6 <prvSwitchTimerLists+0x56>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006caa:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006cac:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cae:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cb0:	f7fe fd26 	bl	8005700 <vListInsert>
 8006cb4:	e7e7      	b.n	8006c86 <prvSwitchTimerLists+0x26>
	if( xTimerQueue != NULL )
 8006cb6:	f8d8 3000 	ldr.w	r3, [r8]
		xMessage.xMessageID = xCommandID;
 8006cba:	2500      	movs	r5, #0
	if( xTimerQueue != NULL )
 8006cbc:	b16b      	cbz	r3, 8006cda <prvSwitchTimerLists+0x7a>
		xMessage.xMessageID = xCommandID;
 8006cbe:	e9cd 5700 	strd	r5, r7, [sp]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006cc2:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006cc4:	f7ff ff78 	bl	8006bb8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006cc8:	f8d8 0000 	ldr.w	r0, [r8]
 8006ccc:	462b      	mov	r3, r5
 8006cce:	462a      	mov	r2, r5
 8006cd0:	4669      	mov	r1, sp
 8006cd2:	f7fe fded 	bl	80058b0 <xQueueGenericSend>
				configASSERT( xResult );
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	d1d5      	bne.n	8006c86 <prvSwitchTimerLists+0x26>
 8006cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	e7fe      	b.n	8006cea <prvSwitchTimerLists+0x8a>
 8006cec:	20001984 	.word	0x20001984
 8006cf0:	20001980 	.word	0x20001980
 8006cf4:	2000197c 	.word	0x2000197c

08006cf8 <prvTimerTask>:
{
 8006cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	4e96      	ldr	r6, [pc, #600]	@ (8006f58 <prvTimerTask+0x260>)
 8006cfe:	4d97      	ldr	r5, [pc, #604]	@ (8006f5c <prvTimerTask+0x264>)
 8006d00:	4c97      	ldr	r4, [pc, #604]	@ (8006f60 <prvTimerTask+0x268>)
 8006d02:	b08b      	sub	sp, #44	@ 0x2c
					portYIELD_WITHIN_API();
 8006d04:	f04f 29e0 	mov.w	r9, #3758153728	@ 0xe000e000
 8006d08:	f04f 5880 	mov.w	r8, #268435456	@ 0x10000000
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d0c:	6832      	ldr	r2, [r6, #0]
 8006d0e:	6817      	ldr	r7, [r2, #0]
 8006d10:	2f00      	cmp	r7, #0
 8006d12:	f040 80a7 	bne.w	8006e64 <prvTimerTask+0x16c>
	vTaskSuspendAll();
 8006d16:	f7ff fdaf 	bl	8006878 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8006d1a:	f7ff fdc5 	bl	80068a8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006d1e:	682a      	ldr	r2, [r5, #0]
 8006d20:	4290      	cmp	r0, r2
	xTimeNow = xTaskGetTickCount();
 8006d22:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8006d24:	f0c0 80ad 	bcc.w	8006e82 <prvTimerTask+0x18a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d28:	4b8e      	ldr	r3, [pc, #568]	@ (8006f64 <prvTimerTask+0x26c>)
	xLastTime = xTimeNow;
 8006d2a:	6028      	str	r0, [r5, #0]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	6812      	ldr	r2, [r2, #0]
 8006d30:	fab2 f282 	clz	r2, r2
 8006d34:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d36:	6820      	ldr	r0, [r4, #0]
 8006d38:	eba7 010a 	sub.w	r1, r7, sl
 8006d3c:	f7ff f8de 	bl	8005efc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d40:	f7ff fda2 	bl	8006888 <xTaskResumeAll>
 8006d44:	b928      	cbnz	r0, 8006d52 <prvTimerTask+0x5a>
					portYIELD_WITHIN_API();
 8006d46:	f8c9 8d04 	str.w	r8, [r9, #3332]	@ 0xd04
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d52:	6820      	ldr	r0, [r4, #0]
 8006d54:	2200      	movs	r2, #0
 8006d56:	a902      	add	r1, sp, #8
 8006d58:	f7fe ff2a 	bl	8005bb0 <xQueueReceive>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	d0d5      	beq.n	8006d0c <prvTimerTask+0x14>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d60:	9b02      	ldr	r3, [sp, #8]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006d62:	9804      	ldr	r0, [sp, #16]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	db75      	blt.n	8006e54 <prvTimerTask+0x15c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006d68:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	b113      	cbz	r3, 8006d74 <prvTimerTask+0x7c>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d6e:	1d38      	adds	r0, r7, #4
 8006d70:	f7fe fcde 	bl	8005730 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8006d74:	f7ff fd98 	bl	80068a8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006d78:	682b      	ldr	r3, [r5, #0]
 8006d7a:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8006d7c:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8006d7e:	f0c0 8087 	bcc.w	8006e90 <prvTimerTask+0x198>
			switch( xMessage.xMessageID )
 8006d82:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8006d84:	f8c5 b000 	str.w	fp, [r5]
			switch( xMessage.xMessageID )
 8006d88:	2b09      	cmp	r3, #9
 8006d8a:	d8e2      	bhi.n	8006d52 <prvTimerTask+0x5a>
 8006d8c:	e8df f003 	tbb	[pc, r3]
 8006d90:	52050505 	.word	0x52050505
 8006d94:	0505593c 	.word	0x0505593c
 8006d98:	3c52      	.short	0x3c52
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d9a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d9e:	9b03      	ldr	r3, [sp, #12]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006da0:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006da2:	f042 0201 	orr.w	r2, r2, #1
 8006da6:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	1899      	adds	r1, r3, r2
 8006dae:	bf2c      	ite	cs
 8006db0:	2001      	movcs	r0, #1
 8006db2:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8006db4:	4559      	cmp	r1, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006db6:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8006db8:	d86d      	bhi.n	8006e96 <prvTimerTask+0x19e>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dba:	ebab 0303 	sub.w	r3, fp, r3
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d832      	bhi.n	8006e28 <prvTimerTask+0x130>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	4638      	mov	r0, r7
 8006dc6:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dc8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006dcc:	0759      	lsls	r1, r3, #29
 8006dce:	d5c0      	bpl.n	8006d52 <prvTimerTask+0x5a>
	if( xTimerQueue != NULL )
 8006dd0:	6821      	ldr	r1, [r4, #0]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006dd2:	9b03      	ldr	r3, [sp, #12]
 8006dd4:	69ba      	ldr	r2, [r7, #24]
	if( xTimerQueue != NULL )
 8006dd6:	b171      	cbz	r1, 8006df6 <prvTimerTask+0xfe>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006dd8:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006dda:	e9cd 3707 	strd	r3, r7, [sp, #28]
		xMessage.xMessageID = xCommandID;
 8006dde:	2700      	movs	r7, #0
 8006de0:	9706      	str	r7, [sp, #24]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006de2:	f7ff fee9 	bl	8006bb8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006de6:	6820      	ldr	r0, [r4, #0]
 8006de8:	463b      	mov	r3, r7
 8006dea:	463a      	mov	r2, r7
 8006dec:	a906      	add	r1, sp, #24
 8006dee:	f7fe fd5f 	bl	80058b0 <xQueueGenericSend>
							configASSERT( xResult );
 8006df2:	2800      	cmp	r0, #0
 8006df4:	d1ad      	bne.n	8006d52 <prvTimerTask+0x5a>
 8006df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	e7fe      	b.n	8006e06 <prvTimerTask+0x10e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e08:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006e0c:	9b03      	ldr	r3, [sp, #12]
 8006e0e:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e10:	f042 0201 	orr.w	r2, r2, #1
 8006e14:	f887 2028 	strb.w	r2, [r7, #40]	@ 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 8093 	beq.w	8006f44 <prvTimerTask+0x24c>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006e1e:	445b      	add	r3, fp
	if( xNextExpiryTime <= xTimeNow )
 8006e20:	455b      	cmp	r3, fp
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e22:	607b      	str	r3, [r7, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e24:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 8006e26:	d83a      	bhi.n	8006e9e <prvTimerTask+0x1a6>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e28:	4b4e      	ldr	r3, [pc, #312]	@ (8006f64 <prvTimerTask+0x26c>)
 8006e2a:	1d39      	adds	r1, r7, #4
 8006e2c:	6818      	ldr	r0, [r3, #0]
 8006e2e:	f7fe fc67 	bl	8005700 <vListInsert>
 8006e32:	e78e      	b.n	8006d52 <prvTimerTask+0x5a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e34:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e38:	f023 0301 	bic.w	r3, r3, #1
 8006e3c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
					break;
 8006e40:	e787      	b.n	8006d52 <prvTimerTask+0x5a>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006e42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e46:	079a      	lsls	r2, r3, #30
 8006e48:	d549      	bpl.n	8006ede <prvTimerTask+0x1e6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e4a:	f023 0301 	bic.w	r3, r3, #1
 8006e4e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8006e52:	e77e      	b.n	8006d52 <prvTimerTask+0x5a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e54:	9b03      	ldr	r3, [sp, #12]
 8006e56:	9905      	ldr	r1, [sp, #20]
 8006e58:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e5a:	9b02      	ldr	r3, [sp, #8]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f6ff af78 	blt.w	8006d52 <prvTimerTask+0x5a>
 8006e62:	e781      	b.n	8006d68 <prvTimerTask+0x70>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e64:	68d3      	ldr	r3, [r2, #12]
 8006e66:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8006e68:	f7ff fd06 	bl	8006878 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8006e6c:	f7ff fd1c 	bl	80068a8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8006e70:	682a      	ldr	r2, [r5, #0]
 8006e72:	4282      	cmp	r2, r0
	xTimeNow = xTaskGetTickCount();
 8006e74:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8006e76:	d804      	bhi.n	8006e82 <prvTimerTask+0x18a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e78:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 8006e7a:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e7c:	d914      	bls.n	8006ea8 <prvTimerTask+0x1b0>
 8006e7e:	2200      	movs	r2, #0
 8006e80:	e759      	b.n	8006d36 <prvTimerTask+0x3e>
		prvSwitchTimerLists();
 8006e82:	f7ff feed 	bl	8006c60 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8006e86:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 8006e8a:	f7ff fcfd 	bl	8006888 <xTaskResumeAll>
 8006e8e:	e760      	b.n	8006d52 <prvTimerTask+0x5a>
		prvSwitchTimerLists();
 8006e90:	f7ff fee6 	bl	8006c60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e94:	e775      	b.n	8006d82 <prvTimerTask+0x8a>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e96:	455b      	cmp	r3, fp
 8006e98:	d901      	bls.n	8006e9e <prvTimerTask+0x1a6>
 8006e9a:	2800      	cmp	r0, #0
 8006e9c:	d091      	beq.n	8006dc2 <prvTimerTask+0xca>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e9e:	6830      	ldr	r0, [r6, #0]
 8006ea0:	1d39      	adds	r1, r7, #4
 8006ea2:	f7fe fc2d 	bl	8005700 <vListInsert>
 8006ea6:	e754      	b.n	8006d52 <prvTimerTask+0x5a>
				( void ) xTaskResumeAll();
 8006ea8:	f7ff fcee 	bl	8006888 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eac:	6832      	ldr	r2, [r6, #0]
 8006eae:	68d2      	ldr	r2, [r2, #12]
 8006eb0:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006eb4:	f10b 0104 	add.w	r1, fp, #4
 8006eb8:	4608      	mov	r0, r1
 8006eba:	9101      	str	r1, [sp, #4]
 8006ebc:	f7fe fc38 	bl	8005730 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ec0:	f89b 2028 	ldrb.w	r2, [fp, #40]	@ 0x28
 8006ec4:	9901      	ldr	r1, [sp, #4]
 8006ec6:	f012 0f04 	tst.w	r2, #4
 8006eca:	d10c      	bne.n	8006ee6 <prvTimerTask+0x1ee>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ecc:	f022 0201 	bic.w	r2, r2, #1
 8006ed0:	f88b 2028 	strb.w	r2, [fp, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ed4:	f8db 3020 	ldr.w	r3, [fp, #32]
 8006ed8:	4658      	mov	r0, fp
 8006eda:	4798      	blx	r3
}
 8006edc:	e739      	b.n	8006d52 <prvTimerTask+0x5a>
							vPortFree( pxTimer );
 8006ede:	4638      	mov	r0, r7
 8006ee0:	f000 faf8 	bl	80074d4 <vPortFree>
 8006ee4:	e735      	b.n	8006d52 <prvTimerTask+0x5a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006ee6:	f8db 0018 	ldr.w	r0, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006eea:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006eee:	183a      	adds	r2, r7, r0
	if( xNextExpiryTime <= xTimeNow )
 8006ef0:	4552      	cmp	r2, sl
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ef2:	f8cb 2004 	str.w	r2, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 8006ef6:	d903      	bls.n	8006f00 <prvTimerTask+0x208>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ef8:	6830      	ldr	r0, [r6, #0]
 8006efa:	f7fe fc01 	bl	8005700 <vListInsert>
	return xProcessTimerNow;
 8006efe:	e7e9      	b.n	8006ed4 <prvTimerTask+0x1dc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f00:	ebaa 0a07 	sub.w	sl, sl, r7
 8006f04:	4550      	cmp	r0, sl
 8006f06:	d818      	bhi.n	8006f3a <prvTimerTask+0x242>
	if( xTimerQueue != NULL )
 8006f08:	6822      	ldr	r2, [r4, #0]
 8006f0a:	b16a      	cbz	r2, 8006f28 <prvTimerTask+0x230>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006f0c:	e9cd 7b07 	strd	r7, fp, [sp, #28]
		xMessage.xMessageID = xCommandID;
 8006f10:	2700      	movs	r7, #0
 8006f12:	9706      	str	r7, [sp, #24]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006f14:	f7ff fe50 	bl	8006bb8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006f18:	6820      	ldr	r0, [r4, #0]
 8006f1a:	463b      	mov	r3, r7
 8006f1c:	463a      	mov	r2, r7
 8006f1e:	a906      	add	r1, sp, #24
 8006f20:	f7fe fcc6 	bl	80058b0 <xQueueGenericSend>
			configASSERT( xResult );
 8006f24:	2800      	cmp	r0, #0
 8006f26:	d1d5      	bne.n	8006ed4 <prvTimerTask+0x1dc>
 8006f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	e7fe      	b.n	8006f38 <prvTimerTask+0x240>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f64 <prvTimerTask+0x26c>)
 8006f3c:	6818      	ldr	r0, [r3, #0]
 8006f3e:	f7fe fbdf 	bl	8005700 <vListInsert>
	return xProcessTimerNow;
 8006f42:	e7c7      	b.n	8006ed4 <prvTimerTask+0x1dc>
 8006f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f54:	e7fe      	b.n	8006f54 <prvTimerTask+0x25c>
 8006f56:	bf00      	nop
 8006f58:	20001984 	.word	0x20001984
 8006f5c:	20001974 	.word	0x20001974
 8006f60:	2000197c 	.word	0x2000197c
 8006f64:	20001980 	.word	0x20001980

08006f68 <xTimerCreateTimerTask>:
{
 8006f68:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8006f6a:	4c23      	ldr	r4, [pc, #140]	@ (8006ff8 <xTimerCreateTimerTask+0x90>)
{
 8006f6c:	b089      	sub	sp, #36	@ 0x24
	taskENTER_CRITICAL();
 8006f6e:	f000 f8c1 	bl	80070f4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8006f72:	6825      	ldr	r5, [r4, #0]
 8006f74:	b335      	cbz	r5, 8006fc4 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f76:	f000 f8df 	bl	8007138 <vPortExitCritical>
	if( xTimerQueue != NULL )
 8006f7a:	6823      	ldr	r3, [r4, #0]
 8006f7c:	b1cb      	cbz	r3, 8006fb2 <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f7e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f80:	aa07      	add	r2, sp, #28
 8006f82:	a906      	add	r1, sp, #24
 8006f84:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f86:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f8a:	f7fe fb8b 	bl	80056a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f8e:	e9dd 0205 	ldrd	r0, r2, [sp, #20]
 8006f92:	2302      	movs	r3, #2
 8006f94:	e9cd 2001 	strd	r2, r0, [sp, #4]
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	4918      	ldr	r1, [pc, #96]	@ (8006ffc <xTimerCreateTimerTask+0x94>)
 8006f9c:	9a07      	ldr	r2, [sp, #28]
 8006f9e:	4818      	ldr	r0, [pc, #96]	@ (8007000 <xTimerCreateTimerTask+0x98>)
 8006fa0:	4623      	mov	r3, r4
 8006fa2:	f7ff fab1 	bl	8006508 <xTaskCreateStatic>
 8006fa6:	4b17      	ldr	r3, [pc, #92]	@ (8007004 <xTimerCreateTimerTask+0x9c>)
 8006fa8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8006faa:	b110      	cbz	r0, 8006fb2 <xTimerCreateTimerTask+0x4a>
}
 8006fac:	2001      	movs	r0, #1
 8006fae:	b009      	add	sp, #36	@ 0x24
 8006fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb6:	f383 8811 	msr	BASEPRI, r3
 8006fba:	f3bf 8f6f 	isb	sy
 8006fbe:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8006fc2:	e7fe      	b.n	8006fc2 <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 8006fc4:	4f10      	ldr	r7, [pc, #64]	@ (8007008 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 8006fc6:	4e11      	ldr	r6, [pc, #68]	@ (800700c <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 8006fc8:	4638      	mov	r0, r7
 8006fca:	f7fe fb7b 	bl	80056c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006fce:	4630      	mov	r0, r6
 8006fd0:	f7fe fb78 	bl	80056c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006fd4:	4a0e      	ldr	r2, [pc, #56]	@ (8007010 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006fd6:	9500      	str	r5, [sp, #0]
			pxCurrentTimerList = &xActiveTimerList1;
 8006fd8:	6017      	str	r7, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006fda:	4a0e      	ldr	r2, [pc, #56]	@ (8007014 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006fdc:	4b0e      	ldr	r3, [pc, #56]	@ (8007018 <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
 8006fde:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006fe0:	2110      	movs	r1, #16
 8006fe2:	4a0e      	ldr	r2, [pc, #56]	@ (800701c <xTimerCreateTimerTask+0xb4>)
 8006fe4:	200a      	movs	r0, #10
 8006fe6:	f7fe fbf3 	bl	80057d0 <xQueueGenericCreateStatic>
 8006fea:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8006fec:	2800      	cmp	r0, #0
 8006fee:	d0c2      	beq.n	8006f76 <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ff0:	490b      	ldr	r1, [pc, #44]	@ (8007020 <xTimerCreateTimerTask+0xb8>)
 8006ff2:	f7fe ff5b 	bl	8005eac <vQueueAddToRegistry>
 8006ff6:	e7be      	b.n	8006f76 <xTimerCreateTimerTask+0xe>
 8006ff8:	2000197c 	.word	0x2000197c
 8006ffc:	0800c004 	.word	0x0800c004
 8007000:	08006cf9 	.word	0x08006cf9
 8007004:	20001978 	.word	0x20001978
 8007008:	2000199c 	.word	0x2000199c
 800700c:	20001988 	.word	0x20001988
 8007010:	20001984 	.word	0x20001984
 8007014:	20001980 	.word	0x20001980
 8007018:	20001884 	.word	0x20001884
 800701c:	200018d4 	.word	0x200018d4
 8007020:	0800bffc 	.word	0x0800bffc

08007024 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007024:	4808      	ldr	r0, [pc, #32]	@ (8007048 <prvPortStartFirstTask+0x24>)
 8007026:	6800      	ldr	r0, [r0, #0]
 8007028:	6800      	ldr	r0, [r0, #0]
 800702a:	f380 8808 	msr	MSP, r0
 800702e:	f04f 0000 	mov.w	r0, #0
 8007032:	f380 8814 	msr	CONTROL, r0
 8007036:	b662      	cpsie	i
 8007038:	b661      	cpsie	f
 800703a:	f3bf 8f4f 	dsb	sy
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	df00      	svc	0
 8007044:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007046:	0000      	.short	0x0000
 8007048:	e000ed08 	.word	0xe000ed08

0800704c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800704c:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800705c <vPortEnableVFP+0x10>
 8007050:	6801      	ldr	r1, [r0, #0]
 8007052:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007056:	6001      	str	r1, [r0, #0]
 8007058:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800705a:	0000      	.short	0x0000
 800705c:	e000ed88 	.word	0xe000ed88

08007060 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8007060:	4b0e      	ldr	r3, [pc, #56]	@ (800709c <prvTaskExitError+0x3c>)
 8007062:	681b      	ldr	r3, [r3, #0]
{
 8007064:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8007066:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8007068:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 800706a:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800706c:	d008      	beq.n	8007080 <prvTaskExitError+0x20>
 800706e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	e7fe      	b.n	800707e <prvTaskExitError+0x1e>
 8007080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8007090:	9b01      	ldr	r3, [sp, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d0fc      	beq.n	8007090 <prvTaskExitError+0x30>
}
 8007096:	b002      	add	sp, #8
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	2000000c 	.word	0x2000000c

080070a0 <pxPortInitialiseStack>:
{
 80070a0:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070a6:	4c07      	ldr	r4, [pc, #28]	@ (80070c4 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80070a8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80070ac:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070b0:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80070b4:	e940 4103 	strd	r4, r1, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80070b8:	e940 3209 	strd	r3, r2, [r0, #-36]	@ 0x24
}
 80070bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070c0:	3844      	subs	r0, #68	@ 0x44
 80070c2:	4770      	bx	lr
 80070c4:	08007061 	.word	0x08007061
	...

080070d0 <SVC_Handler>:
	__asm volatile (
 80070d0:	4b07      	ldr	r3, [pc, #28]	@ (80070f0 <pxCurrentTCBConst2>)
 80070d2:	6819      	ldr	r1, [r3, #0]
 80070d4:	6808      	ldr	r0, [r1, #0]
 80070d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070da:	f380 8809 	msr	PSP, r0
 80070de:	f3bf 8f6f 	isb	sy
 80070e2:	f04f 0000 	mov.w	r0, #0
 80070e6:	f380 8811 	msr	BASEPRI, r0
 80070ea:	4770      	bx	lr
 80070ec:	f3af 8000 	nop.w

080070f0 <pxCurrentTCBConst2>:
 80070f0:	20001880 	.word	0x20001880

080070f4 <vPortEnterCritical>:
 80070f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8007104:	4a0b      	ldr	r2, [pc, #44]	@ (8007134 <vPortEnterCritical+0x40>)
 8007106:	6813      	ldr	r3, [r2, #0]
 8007108:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800710a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800710c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800710e:	d000      	beq.n	8007112 <vPortEnterCritical+0x1e>
}
 8007110:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007112:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8007116:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b00      	cmp	r3, #0
 800711e:	d0f7      	beq.n	8007110 <vPortEnterCritical+0x1c>
 8007120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	e7fe      	b.n	8007130 <vPortEnterCritical+0x3c>
 8007132:	bf00      	nop
 8007134:	2000000c 	.word	0x2000000c

08007138 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8007138:	4a08      	ldr	r2, [pc, #32]	@ (800715c <vPortExitCritical+0x24>)
 800713a:	6813      	ldr	r3, [r2, #0]
 800713c:	b943      	cbnz	r3, 8007150 <vPortExitCritical+0x18>
 800713e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007142:	f383 8811 	msr	BASEPRI, r3
 8007146:	f3bf 8f6f 	isb	sy
 800714a:	f3bf 8f4f 	dsb	sy
 800714e:	e7fe      	b.n	800714e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8007150:	3b01      	subs	r3, #1
 8007152:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007154:	b90b      	cbnz	r3, 800715a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007156:	f383 8811 	msr	BASEPRI, r3
}
 800715a:	4770      	bx	lr
 800715c:	2000000c 	.word	0x2000000c

08007160 <PendSV_Handler>:
	__asm volatile
 8007160:	f3ef 8009 	mrs	r0, PSP
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	4b15      	ldr	r3, [pc, #84]	@ (80071c0 <pxCurrentTCBConst>)
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	f01e 0f10 	tst.w	lr, #16
 8007170:	bf08      	it	eq
 8007172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800717a:	6010      	str	r0, [r2, #0]
 800717c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007180:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007184:	f380 8811 	msr	BASEPRI, r0
 8007188:	f3bf 8f4f 	dsb	sy
 800718c:	f3bf 8f6f 	isb	sy
 8007190:	f7ff fba0 	bl	80068d4 <vTaskSwitchContext>
 8007194:	f04f 0000 	mov.w	r0, #0
 8007198:	f380 8811 	msr	BASEPRI, r0
 800719c:	bc09      	pop	{r0, r3}
 800719e:	6819      	ldr	r1, [r3, #0]
 80071a0:	6808      	ldr	r0, [r1, #0]
 80071a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a6:	f01e 0f10 	tst.w	lr, #16
 80071aa:	bf08      	it	eq
 80071ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071b0:	f380 8809 	msr	PSP, r0
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	f3af 8000 	nop.w

080071c0 <pxCurrentTCBConst>:
 80071c0:	20001880 	.word	0x20001880

080071c4 <xPortSysTickHandler>:
{
 80071c4:	b508      	push	{r3, lr}
	__asm volatile
 80071c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80071d6:	f7ff fb6d 	bl	80068b4 <xTaskIncrementTick>
 80071da:	b128      	cbz	r0, 80071e8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80071e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 80071e8:	2300      	movs	r3, #0
 80071ea:	f383 8811 	msr	BASEPRI, r3
}
 80071ee:	bd08      	pop	{r3, pc}

080071f0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80071f0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80071f4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071f6:	4906      	ldr	r1, [pc, #24]	@ (8007210 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80071f8:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80071fa:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071fc:	680b      	ldr	r3, [r1, #0]
 80071fe:	4905      	ldr	r1, [pc, #20]	@ (8007214 <vPortSetupTimerInterrupt+0x24>)
 8007200:	fba1 1303 	umull	r1, r3, r1, r3
 8007204:	099b      	lsrs	r3, r3, #6
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007206:	2007      	movs	r0, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007208:	3b01      	subs	r3, #1
 800720a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800720c:	6110      	str	r0, [r2, #16]
}
 800720e:	4770      	bx	lr
 8007210:	20000000 	.word	0x20000000
 8007214:	10624dd3 	.word	0x10624dd3

08007218 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007218:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800721c:	4a48      	ldr	r2, [pc, #288]	@ (8007340 <xPortStartScheduler+0x128>)
 800721e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 8007222:	4291      	cmp	r1, r2
 8007224:	d041      	beq.n	80072aa <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007226:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800722a:	4b46      	ldr	r3, [pc, #280]	@ (8007344 <xPortStartScheduler+0x12c>)
 800722c:	429a      	cmp	r2, r3
 800722e:	d033      	beq.n	8007298 <xPortStartScheduler+0x80>
{
 8007230:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007232:	4b45      	ldr	r3, [pc, #276]	@ (8007348 <xPortStartScheduler+0x130>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007234:	4c45      	ldr	r4, [pc, #276]	@ (800734c <xPortStartScheduler+0x134>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007236:	781a      	ldrb	r2, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007238:	4845      	ldr	r0, [pc, #276]	@ (8007350 <xPortStartScheduler+0x138>)
{
 800723a:	b084      	sub	sp, #16
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800723c:	21ff      	movs	r1, #255	@ 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007242:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	b2db      	uxtb	r3, r3
 8007248:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800724c:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007250:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007254:	f003 0350 	and.w	r3, r3, #80	@ 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007258:	2107      	movs	r1, #7
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800725a:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800725c:	7023      	strb	r3, [r4, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800725e:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007260:	bf48      	it	mi
 8007262:	2206      	movmi	r2, #6
 8007264:	d50f      	bpl.n	8007286 <xPortStartScheduler+0x6e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007266:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800726a:	005b      	lsls	r3, r3, #1
 800726c:	b2db      	uxtb	r3, r3
 800726e:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007272:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007276:	061b      	lsls	r3, r3, #24
 8007278:	4611      	mov	r1, r2
 800727a:	f102 32ff 	add.w	r2, r2, #4294967295
 800727e:	d4f2      	bmi.n	8007266 <xPortStartScheduler+0x4e>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007280:	2903      	cmp	r1, #3
 8007282:	d01b      	beq.n	80072bc <xPortStartScheduler+0xa4>
 8007284:	6001      	str	r1, [r0, #0]
	__asm volatile
 8007286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800728a:	f383 8811 	msr	BASEPRI, r3
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f3bf 8f4f 	dsb	sy
 8007296:	e7fe      	b.n	8007296 <xPortStartScheduler+0x7e>
 8007298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800729c:	f383 8811 	msr	BASEPRI, r3
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80072a8:	e7fe      	b.n	80072a8 <xPortStartScheduler+0x90>
 80072aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ae:	f383 8811 	msr	BASEPRI, r3
 80072b2:	f3bf 8f6f 	isb	sy
 80072b6:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072ba:	e7fe      	b.n	80072ba <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072bc:	9b02      	ldr	r3, [sp, #8]
 80072be:	4a22      	ldr	r2, [pc, #136]	@ (8007348 <xPortStartScheduler+0x130>)
	uxCriticalNesting = 0;
 80072c0:	4e24      	ldr	r6, [pc, #144]	@ (8007354 <xPortStartScheduler+0x13c>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072c2:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072c6:	f44f 7140 	mov.w	r1, #768	@ 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072ca:	b2db      	uxtb	r3, r3
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072cc:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072ce:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072d0:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80072d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80072d8:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072dc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 80072e0:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80072e4:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	uxCriticalNesting = 0;
 80072e8:	2500      	movs	r5, #0
	vPortSetupTimerInterrupt();
 80072ea:	f7ff ff81 	bl	80071f0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80072ee:	6035      	str	r5, [r6, #0]
	vPortEnableVFP();
 80072f0:	f7ff feac 	bl	800704c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80072f4:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 80072f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80072fc:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8007300:	f7ff fe90 	bl	8007024 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8007304:	f7ff fae6 	bl	80068d4 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 8007308:	6833      	ldr	r3, [r6, #0]
volatile uint32_t ulDummy = 0;
 800730a:	9503      	str	r5, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 800730c:	3301      	adds	r3, #1
 800730e:	d008      	beq.n	8007322 <xPortStartScheduler+0x10a>
 8007310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007314:	f383 8811 	msr	BASEPRI, r3
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	f3bf 8f4f 	dsb	sy
 8007320:	e7fe      	b.n	8007320 <xPortStartScheduler+0x108>
 8007322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007326:	f383 8811 	msr	BASEPRI, r3
 800732a:	f3bf 8f6f 	isb	sy
 800732e:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8007332:	9b03      	ldr	r3, [sp, #12]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d0fc      	beq.n	8007332 <xPortStartScheduler+0x11a>
}
 8007338:	2000      	movs	r0, #0
 800733a:	b004      	add	sp, #16
 800733c:	bd70      	pop	{r4, r5, r6, pc}
 800733e:	bf00      	nop
 8007340:	410fc271 	.word	0x410fc271
 8007344:	410fc270 	.word	0x410fc270
 8007348:	e000e400 	.word	0xe000e400
 800734c:	200019b4 	.word	0x200019b4
 8007350:	200019b0 	.word	0x200019b0
 8007354:	2000000c 	.word	0x2000000c

08007358 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800735c:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 800735e:	f7ff fa8b 	bl	8006878 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007362:	4a54      	ldr	r2, [pc, #336]	@ (80074b4 <pvPortMalloc+0x15c>)
 8007364:	6816      	ldr	r6, [r2, #0]
 8007366:	2e00      	cmp	r6, #0
 8007368:	d035      	beq.n	80073d6 <pvPortMalloc+0x7e>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800736a:	4b53      	ldr	r3, [pc, #332]	@ (80074b8 <pvPortMalloc+0x160>)
 800736c:	681f      	ldr	r7, [r3, #0]
 800736e:	423d      	tst	r5, r7
 8007370:	d12b      	bne.n	80073ca <pvPortMalloc+0x72>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007372:	b355      	cbz	r5, 80073ca <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8007374:	f105 0408 	add.w	r4, r5, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007378:	0768      	lsls	r0, r5, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800737a:	bf1c      	itt	ne
 800737c:	f024 0407 	bicne.w	r4, r4, #7
 8007380:	3408      	addne	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007382:	b314      	cbz	r4, 80073ca <pvPortMalloc+0x72>
 8007384:	f8df c144 	ldr.w	ip, [pc, #324]	@ 80074cc <pvPortMalloc+0x174>
 8007388:	f8dc 5000 	ldr.w	r5, [ip]
 800738c:	42a5      	cmp	r5, r4
 800738e:	d31c      	bcc.n	80073ca <pvPortMalloc+0x72>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8007390:	484a      	ldr	r0, [pc, #296]	@ (80074bc <pvPortMalloc+0x164>)
 8007392:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007394:	e003      	b.n	800739e <pvPortMalloc+0x46>
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	b122      	cbz	r2, 80073a4 <pvPortMalloc+0x4c>
				{
					pxPreviousBlock = pxBlock;
 800739a:	4618      	mov	r0, r3
					pxBlock = pxBlock->pxNextFreeBlock;
 800739c:	4613      	mov	r3, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800739e:	6859      	ldr	r1, [r3, #4]
 80073a0:	42a1      	cmp	r1, r4
 80073a2:	d3f8      	bcc.n	8007396 <pvPortMalloc+0x3e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073a4:	42b3      	cmp	r3, r6
 80073a6:	d010      	beq.n	80073ca <pvPortMalloc+0x72>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	6002      	str	r2, [r0, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073ac:	1b08      	subs	r0, r1, r4
 80073ae:	2810      	cmp	r0, #16
 80073b0:	d947      	bls.n	8007442 <pvPortMalloc+0xea>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073b2:	191a      	adds	r2, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073b4:	0751      	lsls	r1, r2, #29
 80073b6:	d02c      	beq.n	8007412 <pvPortMalloc+0xba>
 80073b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	e7fe      	b.n	80073c8 <pvPortMalloc+0x70>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80073ca:	f7ff fa5d 	bl	8006888 <xTaskResumeAll>
void *pvReturn = NULL;
 80073ce:	2400      	movs	r4, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 80073d0:	4620      	mov	r0, r4
 80073d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80073d6:	4b3a      	ldr	r3, [pc, #232]	@ (80074c0 <pvPortMalloc+0x168>)
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
 80073d8:	4e3a      	ldr	r6, [pc, #232]	@ (80074c4 <pvPortMalloc+0x16c>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80073da:	4838      	ldr	r0, [pc, #224]	@ (80074bc <pvPortMalloc+0x164>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80073dc:	075c      	lsls	r4, r3, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80073de:	bf18      	it	ne
 80073e0:	3307      	addne	r3, #7
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073e2:	f026 0607 	bic.w	r6, r6, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073e6:	bf18      	it	ne
 80073e8:	f023 0307 	bicne.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80073ec:	6016      	str	r6, [r2, #0]
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073ee:	4a36      	ldr	r2, [pc, #216]	@ (80074c8 <pvPortMalloc+0x170>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80073f0:	6003      	str	r3, [r0, #0]
 80073f2:	4619      	mov	r1, r3
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80073f4:	1af3      	subs	r3, r6, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073f8:	4a34      	ldr	r2, [pc, #208]	@ (80074cc <pvPortMalloc+0x174>)

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073fa:	4c2f      	ldr	r4, [pc, #188]	@ (80074b8 <pvPortMalloc+0x160>)
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80073fc:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80073fe:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 8007402:	2200      	movs	r2, #0
 8007404:	6042      	str	r2, [r0, #4]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007406:	6027      	str	r7, [r4, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8007408:	e9c6 2200 	strd	r2, r2, [r6]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800740c:	e9c1 6300 	strd	r6, r3, [r1]
}
 8007410:	e7ad      	b.n	800736e <pvPortMalloc+0x16>
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007412:	492a      	ldr	r1, [pc, #168]	@ (80074bc <pvPortMalloc+0x164>)
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007414:	6050      	str	r0, [r2, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007416:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007418:	4608      	mov	r0, r1
 800741a:	6809      	ldr	r1, [r1, #0]
 800741c:	428a      	cmp	r2, r1
 800741e:	d8fb      	bhi.n	8007418 <pvPortMalloc+0xc0>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007420:	f8d0 e004 	ldr.w	lr, [r0, #4]
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007424:	f8d2 8004 	ldr.w	r8, [r2, #4]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007428:	eb00 090e 	add.w	r9, r0, lr
 800742c:	454a      	cmp	r2, r9
 800742e:	d027      	beq.n	8007480 <pvPortMalloc+0x128>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007430:	eb02 0e08 	add.w	lr, r2, r8
 8007434:	4571      	cmp	r1, lr
 8007436:	d02b      	beq.n	8007490 <pvPortMalloc+0x138>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007438:	6011      	str	r1, [r2, #0]
 800743a:	4621      	mov	r1, r4

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800743c:	4282      	cmp	r2, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800743e:	bf18      	it	ne
 8007440:	6002      	strne	r2, [r0, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007442:	4a21      	ldr	r2, [pc, #132]	@ (80074c8 <pvPortMalloc+0x170>)
 8007444:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007446:	1a6d      	subs	r5, r5, r1
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007448:	4285      	cmp	r5, r0
					xNumberOfSuccessfulAllocations++;
 800744a:	4821      	ldr	r0, [pc, #132]	@ (80074d0 <pvPortMalloc+0x178>)
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800744c:	bf38      	it	cc
 800744e:	6015      	strcc	r5, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007450:	430f      	orrs	r7, r1
					xNumberOfSuccessfulAllocations++;
 8007452:	6801      	ldr	r1, [r0, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007454:	f8cc 5000 	str.w	r5, [ip]
					pxBlock->pxNextFreeBlock = NULL;
 8007458:	2400      	movs	r4, #0
 800745a:	e9c3 4700 	strd	r4, r7, [r3]
					xNumberOfSuccessfulAllocations++;
 800745e:	3101      	adds	r1, #1
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007460:	f103 0408 	add.w	r4, r3, #8
					xNumberOfSuccessfulAllocations++;
 8007464:	6001      	str	r1, [r0, #0]
	( void ) xTaskResumeAll();
 8007466:	f7ff fa0f 	bl	8006888 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800746a:	0763      	lsls	r3, r4, #29
 800746c:	d0b0      	beq.n	80073d0 <pvPortMalloc+0x78>
 800746e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	e7fe      	b.n	800747e <pvPortMalloc+0x126>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007480:	eb0e 0208 	add.w	r2, lr, r8
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007484:	1884      	adds	r4, r0, r2
 8007486:	42a1      	cmp	r1, r4
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007488:	6042      	str	r2, [r0, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800748a:	d00a      	beq.n	80074a2 <pvPortMalloc+0x14a>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800748c:	6859      	ldr	r1, [r3, #4]
	if( pxIterator != pxBlockToInsert )
 800748e:	e7d8      	b.n	8007442 <pvPortMalloc+0xea>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007490:	42b1      	cmp	r1, r6
 8007492:	d0d1      	beq.n	8007438 <pvPortMalloc+0xe0>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007494:	684c      	ldr	r4, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007496:	6809      	ldr	r1, [r1, #0]
 8007498:	6011      	str	r1, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800749a:	4444      	add	r4, r8
 800749c:	6054      	str	r4, [r2, #4]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800749e:	6859      	ldr	r1, [r3, #4]
 80074a0:	e7cc      	b.n	800743c <pvPortMalloc+0xe4>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80074a2:	42b1      	cmp	r1, r6
 80074a4:	d0f2      	beq.n	800748c <pvPortMalloc+0x134>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074a6:	684c      	ldr	r4, [r1, #4]
 80074a8:	4414      	add	r4, r2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80074aa:	680a      	ldr	r2, [r1, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074ac:	6044      	str	r4, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80074ae:	6002      	str	r2, [r0, #0]
 80074b0:	e7ec      	b.n	800748c <pvPortMalloc+0x134>
 80074b2:	bf00      	nop
 80074b4:	200019cc 	.word	0x200019cc
 80074b8:	200019b8 	.word	0x200019b8
 80074bc:	200019d0 	.word	0x200019d0
 80074c0:	200019d8 	.word	0x200019d8
 80074c4:	200055d0 	.word	0x200055d0
 80074c8:	200019c4 	.word	0x200019c4
 80074cc:	200019c8 	.word	0x200019c8
 80074d0:	200019c0 	.word	0x200019c0

080074d4 <vPortFree>:
	if( pv != NULL )
 80074d4:	b1d0      	cbz	r0, 800750c <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80074d6:	4a2f      	ldr	r2, [pc, #188]	@ (8007594 <vPortFree+0xc0>)
 80074d8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80074dc:	6812      	ldr	r2, [r2, #0]
 80074de:	4213      	tst	r3, r2
 80074e0:	d00b      	beq.n	80074fa <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074e2:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80074e6:	b191      	cbz	r1, 800750e <vPortFree+0x3a>
 80074e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ec:	f383 8811 	msr	BASEPRI, r3
 80074f0:	f3bf 8f6f 	isb	sy
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	e7fe      	b.n	80074f8 <vPortFree+0x24>
 80074fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fe:	f383 8811 	msr	BASEPRI, r3
 8007502:	f3bf 8f6f 	isb	sy
 8007506:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800750a:	e7fe      	b.n	800750a <vPortFree+0x36>
 800750c:	4770      	bx	lr
{
 800750e:	b530      	push	{r4, r5, lr}
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007510:	ea23 0302 	bic.w	r3, r3, r2
{
 8007514:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007516:	f840 3c04 	str.w	r3, [r0, #-4]
					xFreeBytesRemaining += pxLink->xBlockSize;
 800751a:	4d1f      	ldr	r5, [pc, #124]	@ (8007598 <vPortFree+0xc4>)
		puc -= xHeapStructSize;
 800751c:	9001      	str	r0, [sp, #4]
 800751e:	f1a0 0408 	sub.w	r4, r0, #8
				vTaskSuspendAll();
 8007522:	f7ff f9a9 	bl	8006878 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007526:	9801      	ldr	r0, [sp, #4]
 8007528:	682a      	ldr	r2, [r5, #0]
 800752a:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800752e:	4b1b      	ldr	r3, [pc, #108]	@ (800759c <vPortFree+0xc8>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007530:	440a      	add	r2, r1
 8007532:	602a      	str	r2, [r5, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007534:	461a      	mov	r2, r3
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	429c      	cmp	r4, r3
 800753a:	d8fb      	bhi.n	8007534 <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800753c:	6855      	ldr	r5, [r2, #4]
 800753e:	eb02 0e05 	add.w	lr, r2, r5
 8007542:	4574      	cmp	r4, lr
 8007544:	d011      	beq.n	800756a <vPortFree+0x96>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007546:	eb04 0c01 	add.w	ip, r4, r1
 800754a:	4563      	cmp	r3, ip
 800754c:	d01d      	beq.n	800758a <vPortFree+0xb6>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800754e:	f840 3c08 	str.w	r3, [r0, #-8]
	if( pxIterator != pxBlockToInsert )
 8007552:	42a2      	cmp	r2, r4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007554:	bf18      	it	ne
 8007556:	6014      	strne	r4, [r2, #0]
					xNumberOfSuccessfulFrees++;
 8007558:	4a11      	ldr	r2, [pc, #68]	@ (80075a0 <vPortFree+0xcc>)
 800755a:	6813      	ldr	r3, [r2, #0]
 800755c:	3301      	adds	r3, #1
 800755e:	6013      	str	r3, [r2, #0]
}
 8007560:	b003      	add	sp, #12
 8007562:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				( void ) xTaskResumeAll();
 8007566:	f7ff b98f 	b.w	8006888 <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800756a:	4429      	add	r1, r5
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800756c:	1850      	adds	r0, r2, r1
 800756e:	4283      	cmp	r3, r0
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007570:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007572:	d1f1      	bne.n	8007558 <vPortFree+0x84>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007574:	480b      	ldr	r0, [pc, #44]	@ (80075a4 <vPortFree+0xd0>)
 8007576:	6800      	ldr	r0, [r0, #0]
 8007578:	4283      	cmp	r3, r0
 800757a:	d0ed      	beq.n	8007558 <vPortFree+0x84>
		pxBlockToInsert = pxIterator;
 800757c:	4614      	mov	r4, r2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800757e:	e9d3 3000 	ldrd	r3, r0, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007582:	4401      	add	r1, r0
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007584:	6023      	str	r3, [r4, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007586:	6061      	str	r1, [r4, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007588:	e7e3      	b.n	8007552 <vPortFree+0x7e>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800758a:	4d06      	ldr	r5, [pc, #24]	@ (80075a4 <vPortFree+0xd0>)
 800758c:	682d      	ldr	r5, [r5, #0]
 800758e:	42ab      	cmp	r3, r5
 8007590:	d1f5      	bne.n	800757e <vPortFree+0xaa>
 8007592:	e7dc      	b.n	800754e <vPortFree+0x7a>
 8007594:	200019b8 	.word	0x200019b8
 8007598:	200019c8 	.word	0x200019c8
 800759c:	200019d0 	.word	0x200019d0
 80075a0:	200019bc 	.word	0x200019bc
 80075a4:	200019cc 	.word	0x200019cc

080075a8 <arm_copy_f32>:
 80075a8:	b4f0      	push	{r4, r5, r6, r7}
 80075aa:	0897      	lsrs	r7, r2, #2
 80075ac:	d01e      	beq.n	80075ec <arm_copy_f32+0x44>
 80075ae:	f100 0410 	add.w	r4, r0, #16
 80075b2:	f101 0310 	add.w	r3, r1, #16
 80075b6:	463d      	mov	r5, r7
 80075b8:	f854 6c10 	ldr.w	r6, [r4, #-16]
 80075bc:	f843 6c10 	str.w	r6, [r3, #-16]
 80075c0:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 80075c4:	f843 6c0c 	str.w	r6, [r3, #-12]
 80075c8:	f854 6c08 	ldr.w	r6, [r4, #-8]
 80075cc:	f843 6c08 	str.w	r6, [r3, #-8]
 80075d0:	f854 6c04 	ldr.w	r6, [r4, #-4]
 80075d4:	f843 6c04 	str.w	r6, [r3, #-4]
 80075d8:	3d01      	subs	r5, #1
 80075da:	f104 0410 	add.w	r4, r4, #16
 80075de:	f103 0310 	add.w	r3, r3, #16
 80075e2:	d1e9      	bne.n	80075b8 <arm_copy_f32+0x10>
 80075e4:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 80075e8:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 80075ec:	f012 0203 	ands.w	r2, r2, #3
 80075f0:	d009      	beq.n	8007606 <arm_copy_f32+0x5e>
 80075f2:	6803      	ldr	r3, [r0, #0]
 80075f4:	600b      	str	r3, [r1, #0]
 80075f6:	3a01      	subs	r2, #1
 80075f8:	d005      	beq.n	8007606 <arm_copy_f32+0x5e>
 80075fa:	6843      	ldr	r3, [r0, #4]
 80075fc:	604b      	str	r3, [r1, #4]
 80075fe:	2a01      	cmp	r2, #1
 8007600:	bf1c      	itt	ne
 8007602:	6883      	ldrne	r3, [r0, #8]
 8007604:	608b      	strne	r3, [r1, #8]
 8007606:	bcf0      	pop	{r4, r5, r6, r7}
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop

0800760c <arm_mat_init_f32>:
 800760c:	8001      	strh	r1, [r0, #0]
 800760e:	8042      	strh	r2, [r0, #2]
 8007610:	6043      	str	r3, [r0, #4]
 8007612:	4770      	bx	lr

08007614 <atof>:
 8007614:	2100      	movs	r1, #0
 8007616:	f000 be09 	b.w	800822c <strtod>

0800761a <sulp>:
 800761a:	b570      	push	{r4, r5, r6, lr}
 800761c:	4604      	mov	r4, r0
 800761e:	460d      	mov	r5, r1
 8007620:	ec45 4b10 	vmov	d0, r4, r5
 8007624:	4616      	mov	r6, r2
 8007626:	f003 fd47 	bl	800b0b8 <__ulp>
 800762a:	ec51 0b10 	vmov	r0, r1, d0
 800762e:	b17e      	cbz	r6, 8007650 <sulp+0x36>
 8007630:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007634:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007638:	2b00      	cmp	r3, #0
 800763a:	dd09      	ble.n	8007650 <sulp+0x36>
 800763c:	051b      	lsls	r3, r3, #20
 800763e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007642:	2400      	movs	r4, #0
 8007644:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007648:	4622      	mov	r2, r4
 800764a:	462b      	mov	r3, r5
 800764c:	f7f8 ffdc 	bl	8000608 <__aeabi_dmul>
 8007650:	ec41 0b10 	vmov	d0, r0, r1
 8007654:	bd70      	pop	{r4, r5, r6, pc}
	...

08007658 <_strtod_l>:
 8007658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765c:	b09f      	sub	sp, #124	@ 0x7c
 800765e:	460c      	mov	r4, r1
 8007660:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007662:	2200      	movs	r2, #0
 8007664:	921a      	str	r2, [sp, #104]	@ 0x68
 8007666:	9005      	str	r0, [sp, #20]
 8007668:	f04f 0a00 	mov.w	sl, #0
 800766c:	f04f 0b00 	mov.w	fp, #0
 8007670:	460a      	mov	r2, r1
 8007672:	9219      	str	r2, [sp, #100]	@ 0x64
 8007674:	7811      	ldrb	r1, [r2, #0]
 8007676:	292b      	cmp	r1, #43	@ 0x2b
 8007678:	d04a      	beq.n	8007710 <_strtod_l+0xb8>
 800767a:	d838      	bhi.n	80076ee <_strtod_l+0x96>
 800767c:	290d      	cmp	r1, #13
 800767e:	d832      	bhi.n	80076e6 <_strtod_l+0x8e>
 8007680:	2908      	cmp	r1, #8
 8007682:	d832      	bhi.n	80076ea <_strtod_l+0x92>
 8007684:	2900      	cmp	r1, #0
 8007686:	d03b      	beq.n	8007700 <_strtod_l+0xa8>
 8007688:	2200      	movs	r2, #0
 800768a:	920e      	str	r2, [sp, #56]	@ 0x38
 800768c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800768e:	782a      	ldrb	r2, [r5, #0]
 8007690:	2a30      	cmp	r2, #48	@ 0x30
 8007692:	f040 80b2 	bne.w	80077fa <_strtod_l+0x1a2>
 8007696:	786a      	ldrb	r2, [r5, #1]
 8007698:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800769c:	2a58      	cmp	r2, #88	@ 0x58
 800769e:	d16e      	bne.n	800777e <_strtod_l+0x126>
 80076a0:	9302      	str	r3, [sp, #8]
 80076a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076a4:	9301      	str	r3, [sp, #4]
 80076a6:	ab1a      	add	r3, sp, #104	@ 0x68
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	4a8f      	ldr	r2, [pc, #572]	@ (80078e8 <_strtod_l+0x290>)
 80076ac:	9805      	ldr	r0, [sp, #20]
 80076ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 80076b0:	a919      	add	r1, sp, #100	@ 0x64
 80076b2:	f002 fdfb 	bl	800a2ac <__gethex>
 80076b6:	f010 060f 	ands.w	r6, r0, #15
 80076ba:	4604      	mov	r4, r0
 80076bc:	d005      	beq.n	80076ca <_strtod_l+0x72>
 80076be:	2e06      	cmp	r6, #6
 80076c0:	d128      	bne.n	8007714 <_strtod_l+0xbc>
 80076c2:	3501      	adds	r5, #1
 80076c4:	2300      	movs	r3, #0
 80076c6:	9519      	str	r5, [sp, #100]	@ 0x64
 80076c8:	930e      	str	r3, [sp, #56]	@ 0x38
 80076ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f040 858e 	bne.w	80081ee <_strtod_l+0xb96>
 80076d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076d4:	b1cb      	cbz	r3, 800770a <_strtod_l+0xb2>
 80076d6:	4652      	mov	r2, sl
 80076d8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80076dc:	ec43 2b10 	vmov	d0, r2, r3
 80076e0:	b01f      	add	sp, #124	@ 0x7c
 80076e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e6:	2920      	cmp	r1, #32
 80076e8:	d1ce      	bne.n	8007688 <_strtod_l+0x30>
 80076ea:	3201      	adds	r2, #1
 80076ec:	e7c1      	b.n	8007672 <_strtod_l+0x1a>
 80076ee:	292d      	cmp	r1, #45	@ 0x2d
 80076f0:	d1ca      	bne.n	8007688 <_strtod_l+0x30>
 80076f2:	2101      	movs	r1, #1
 80076f4:	910e      	str	r1, [sp, #56]	@ 0x38
 80076f6:	1c51      	adds	r1, r2, #1
 80076f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80076fa:	7852      	ldrb	r2, [r2, #1]
 80076fc:	2a00      	cmp	r2, #0
 80076fe:	d1c5      	bne.n	800768c <_strtod_l+0x34>
 8007700:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007702:	9419      	str	r4, [sp, #100]	@ 0x64
 8007704:	2b00      	cmp	r3, #0
 8007706:	f040 8570 	bne.w	80081ea <_strtod_l+0xb92>
 800770a:	4652      	mov	r2, sl
 800770c:	465b      	mov	r3, fp
 800770e:	e7e5      	b.n	80076dc <_strtod_l+0x84>
 8007710:	2100      	movs	r1, #0
 8007712:	e7ef      	b.n	80076f4 <_strtod_l+0x9c>
 8007714:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007716:	b13a      	cbz	r2, 8007728 <_strtod_l+0xd0>
 8007718:	2135      	movs	r1, #53	@ 0x35
 800771a:	a81c      	add	r0, sp, #112	@ 0x70
 800771c:	f003 fdc6 	bl	800b2ac <__copybits>
 8007720:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007722:	9805      	ldr	r0, [sp, #20]
 8007724:	f003 f99c 	bl	800aa60 <_Bfree>
 8007728:	3e01      	subs	r6, #1
 800772a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800772c:	2e04      	cmp	r6, #4
 800772e:	d806      	bhi.n	800773e <_strtod_l+0xe6>
 8007730:	e8df f006 	tbb	[pc, r6]
 8007734:	201d0314 	.word	0x201d0314
 8007738:	14          	.byte	0x14
 8007739:	00          	.byte	0x00
 800773a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800773e:	05e1      	lsls	r1, r4, #23
 8007740:	bf48      	it	mi
 8007742:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007746:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800774a:	0d1b      	lsrs	r3, r3, #20
 800774c:	051b      	lsls	r3, r3, #20
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1bb      	bne.n	80076ca <_strtod_l+0x72>
 8007752:	f001 fe53 	bl	80093fc <__errno>
 8007756:	2322      	movs	r3, #34	@ 0x22
 8007758:	6003      	str	r3, [r0, #0]
 800775a:	e7b6      	b.n	80076ca <_strtod_l+0x72>
 800775c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007760:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007764:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007768:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800776c:	e7e7      	b.n	800773e <_strtod_l+0xe6>
 800776e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80078f0 <_strtod_l+0x298>
 8007772:	e7e4      	b.n	800773e <_strtod_l+0xe6>
 8007774:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007778:	f04f 3aff 	mov.w	sl, #4294967295
 800777c:	e7df      	b.n	800773e <_strtod_l+0xe6>
 800777e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	9219      	str	r2, [sp, #100]	@ 0x64
 8007784:	785b      	ldrb	r3, [r3, #1]
 8007786:	2b30      	cmp	r3, #48	@ 0x30
 8007788:	d0f9      	beq.n	800777e <_strtod_l+0x126>
 800778a:	2b00      	cmp	r3, #0
 800778c:	d09d      	beq.n	80076ca <_strtod_l+0x72>
 800778e:	2301      	movs	r3, #1
 8007790:	2700      	movs	r7, #0
 8007792:	9308      	str	r3, [sp, #32]
 8007794:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007796:	930c      	str	r3, [sp, #48]	@ 0x30
 8007798:	970b      	str	r7, [sp, #44]	@ 0x2c
 800779a:	46b9      	mov	r9, r7
 800779c:	220a      	movs	r2, #10
 800779e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80077a0:	7805      	ldrb	r5, [r0, #0]
 80077a2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80077a6:	b2d9      	uxtb	r1, r3
 80077a8:	2909      	cmp	r1, #9
 80077aa:	d928      	bls.n	80077fe <_strtod_l+0x1a6>
 80077ac:	494f      	ldr	r1, [pc, #316]	@ (80078ec <_strtod_l+0x294>)
 80077ae:	2201      	movs	r2, #1
 80077b0:	f001 fd3f 	bl	8009232 <strncmp>
 80077b4:	2800      	cmp	r0, #0
 80077b6:	d032      	beq.n	800781e <_strtod_l+0x1c6>
 80077b8:	2000      	movs	r0, #0
 80077ba:	462a      	mov	r2, r5
 80077bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80077be:	464d      	mov	r5, r9
 80077c0:	4603      	mov	r3, r0
 80077c2:	2a65      	cmp	r2, #101	@ 0x65
 80077c4:	d001      	beq.n	80077ca <_strtod_l+0x172>
 80077c6:	2a45      	cmp	r2, #69	@ 0x45
 80077c8:	d114      	bne.n	80077f4 <_strtod_l+0x19c>
 80077ca:	b91d      	cbnz	r5, 80077d4 <_strtod_l+0x17c>
 80077cc:	9a08      	ldr	r2, [sp, #32]
 80077ce:	4302      	orrs	r2, r0
 80077d0:	d096      	beq.n	8007700 <_strtod_l+0xa8>
 80077d2:	2500      	movs	r5, #0
 80077d4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80077d6:	1c62      	adds	r2, r4, #1
 80077d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80077da:	7862      	ldrb	r2, [r4, #1]
 80077dc:	2a2b      	cmp	r2, #43	@ 0x2b
 80077de:	d07a      	beq.n	80078d6 <_strtod_l+0x27e>
 80077e0:	2a2d      	cmp	r2, #45	@ 0x2d
 80077e2:	d07e      	beq.n	80078e2 <_strtod_l+0x28a>
 80077e4:	f04f 0c00 	mov.w	ip, #0
 80077e8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80077ec:	2909      	cmp	r1, #9
 80077ee:	f240 8085 	bls.w	80078fc <_strtod_l+0x2a4>
 80077f2:	9419      	str	r4, [sp, #100]	@ 0x64
 80077f4:	f04f 0800 	mov.w	r8, #0
 80077f8:	e0a5      	b.n	8007946 <_strtod_l+0x2ee>
 80077fa:	2300      	movs	r3, #0
 80077fc:	e7c8      	b.n	8007790 <_strtod_l+0x138>
 80077fe:	f1b9 0f08 	cmp.w	r9, #8
 8007802:	bfd8      	it	le
 8007804:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007806:	f100 0001 	add.w	r0, r0, #1
 800780a:	bfda      	itte	le
 800780c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007810:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007812:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007816:	f109 0901 	add.w	r9, r9, #1
 800781a:	9019      	str	r0, [sp, #100]	@ 0x64
 800781c:	e7bf      	b.n	800779e <_strtod_l+0x146>
 800781e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007820:	1c5a      	adds	r2, r3, #1
 8007822:	9219      	str	r2, [sp, #100]	@ 0x64
 8007824:	785a      	ldrb	r2, [r3, #1]
 8007826:	f1b9 0f00 	cmp.w	r9, #0
 800782a:	d03b      	beq.n	80078a4 <_strtod_l+0x24c>
 800782c:	900a      	str	r0, [sp, #40]	@ 0x28
 800782e:	464d      	mov	r5, r9
 8007830:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007834:	2b09      	cmp	r3, #9
 8007836:	d912      	bls.n	800785e <_strtod_l+0x206>
 8007838:	2301      	movs	r3, #1
 800783a:	e7c2      	b.n	80077c2 <_strtod_l+0x16a>
 800783c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800783e:	1c5a      	adds	r2, r3, #1
 8007840:	9219      	str	r2, [sp, #100]	@ 0x64
 8007842:	785a      	ldrb	r2, [r3, #1]
 8007844:	3001      	adds	r0, #1
 8007846:	2a30      	cmp	r2, #48	@ 0x30
 8007848:	d0f8      	beq.n	800783c <_strtod_l+0x1e4>
 800784a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800784e:	2b08      	cmp	r3, #8
 8007850:	f200 84d2 	bhi.w	80081f8 <_strtod_l+0xba0>
 8007854:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007856:	900a      	str	r0, [sp, #40]	@ 0x28
 8007858:	2000      	movs	r0, #0
 800785a:	930c      	str	r3, [sp, #48]	@ 0x30
 800785c:	4605      	mov	r5, r0
 800785e:	3a30      	subs	r2, #48	@ 0x30
 8007860:	f100 0301 	add.w	r3, r0, #1
 8007864:	d018      	beq.n	8007898 <_strtod_l+0x240>
 8007866:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007868:	4419      	add	r1, r3
 800786a:	910a      	str	r1, [sp, #40]	@ 0x28
 800786c:	462e      	mov	r6, r5
 800786e:	f04f 0e0a 	mov.w	lr, #10
 8007872:	1c71      	adds	r1, r6, #1
 8007874:	eba1 0c05 	sub.w	ip, r1, r5
 8007878:	4563      	cmp	r3, ip
 800787a:	dc15      	bgt.n	80078a8 <_strtod_l+0x250>
 800787c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007880:	182b      	adds	r3, r5, r0
 8007882:	2b08      	cmp	r3, #8
 8007884:	f105 0501 	add.w	r5, r5, #1
 8007888:	4405      	add	r5, r0
 800788a:	dc1a      	bgt.n	80078c2 <_strtod_l+0x26a>
 800788c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800788e:	230a      	movs	r3, #10
 8007890:	fb03 2301 	mla	r3, r3, r1, r2
 8007894:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007896:	2300      	movs	r3, #0
 8007898:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800789a:	1c51      	adds	r1, r2, #1
 800789c:	9119      	str	r1, [sp, #100]	@ 0x64
 800789e:	7852      	ldrb	r2, [r2, #1]
 80078a0:	4618      	mov	r0, r3
 80078a2:	e7c5      	b.n	8007830 <_strtod_l+0x1d8>
 80078a4:	4648      	mov	r0, r9
 80078a6:	e7ce      	b.n	8007846 <_strtod_l+0x1ee>
 80078a8:	2e08      	cmp	r6, #8
 80078aa:	dc05      	bgt.n	80078b8 <_strtod_l+0x260>
 80078ac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80078ae:	fb0e f606 	mul.w	r6, lr, r6
 80078b2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80078b4:	460e      	mov	r6, r1
 80078b6:	e7dc      	b.n	8007872 <_strtod_l+0x21a>
 80078b8:	2910      	cmp	r1, #16
 80078ba:	bfd8      	it	le
 80078bc:	fb0e f707 	mulle.w	r7, lr, r7
 80078c0:	e7f8      	b.n	80078b4 <_strtod_l+0x25c>
 80078c2:	2b0f      	cmp	r3, #15
 80078c4:	bfdc      	itt	le
 80078c6:	230a      	movle	r3, #10
 80078c8:	fb03 2707 	mlale	r7, r3, r7, r2
 80078cc:	e7e3      	b.n	8007896 <_strtod_l+0x23e>
 80078ce:	2300      	movs	r3, #0
 80078d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80078d2:	2301      	movs	r3, #1
 80078d4:	e77a      	b.n	80077cc <_strtod_l+0x174>
 80078d6:	f04f 0c00 	mov.w	ip, #0
 80078da:	1ca2      	adds	r2, r4, #2
 80078dc:	9219      	str	r2, [sp, #100]	@ 0x64
 80078de:	78a2      	ldrb	r2, [r4, #2]
 80078e0:	e782      	b.n	80077e8 <_strtod_l+0x190>
 80078e2:	f04f 0c01 	mov.w	ip, #1
 80078e6:	e7f8      	b.n	80078da <_strtod_l+0x282>
 80078e8:	0800c260 	.word	0x0800c260
 80078ec:	0800c074 	.word	0x0800c074
 80078f0:	7ff00000 	.word	0x7ff00000
 80078f4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80078f6:	1c51      	adds	r1, r2, #1
 80078f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80078fa:	7852      	ldrb	r2, [r2, #1]
 80078fc:	2a30      	cmp	r2, #48	@ 0x30
 80078fe:	d0f9      	beq.n	80078f4 <_strtod_l+0x29c>
 8007900:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007904:	2908      	cmp	r1, #8
 8007906:	f63f af75 	bhi.w	80077f4 <_strtod_l+0x19c>
 800790a:	3a30      	subs	r2, #48	@ 0x30
 800790c:	9209      	str	r2, [sp, #36]	@ 0x24
 800790e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007910:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007912:	f04f 080a 	mov.w	r8, #10
 8007916:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007918:	1c56      	adds	r6, r2, #1
 800791a:	9619      	str	r6, [sp, #100]	@ 0x64
 800791c:	7852      	ldrb	r2, [r2, #1]
 800791e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007922:	f1be 0f09 	cmp.w	lr, #9
 8007926:	d939      	bls.n	800799c <_strtod_l+0x344>
 8007928:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800792a:	1a76      	subs	r6, r6, r1
 800792c:	2e08      	cmp	r6, #8
 800792e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007932:	dc03      	bgt.n	800793c <_strtod_l+0x2e4>
 8007934:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007936:	4588      	cmp	r8, r1
 8007938:	bfa8      	it	ge
 800793a:	4688      	movge	r8, r1
 800793c:	f1bc 0f00 	cmp.w	ip, #0
 8007940:	d001      	beq.n	8007946 <_strtod_l+0x2ee>
 8007942:	f1c8 0800 	rsb	r8, r8, #0
 8007946:	2d00      	cmp	r5, #0
 8007948:	d14e      	bne.n	80079e8 <_strtod_l+0x390>
 800794a:	9908      	ldr	r1, [sp, #32]
 800794c:	4308      	orrs	r0, r1
 800794e:	f47f aebc 	bne.w	80076ca <_strtod_l+0x72>
 8007952:	2b00      	cmp	r3, #0
 8007954:	f47f aed4 	bne.w	8007700 <_strtod_l+0xa8>
 8007958:	2a69      	cmp	r2, #105	@ 0x69
 800795a:	d028      	beq.n	80079ae <_strtod_l+0x356>
 800795c:	dc25      	bgt.n	80079aa <_strtod_l+0x352>
 800795e:	2a49      	cmp	r2, #73	@ 0x49
 8007960:	d025      	beq.n	80079ae <_strtod_l+0x356>
 8007962:	2a4e      	cmp	r2, #78	@ 0x4e
 8007964:	f47f aecc 	bne.w	8007700 <_strtod_l+0xa8>
 8007968:	499a      	ldr	r1, [pc, #616]	@ (8007bd4 <_strtod_l+0x57c>)
 800796a:	a819      	add	r0, sp, #100	@ 0x64
 800796c:	f002 fec0 	bl	800a6f0 <__match>
 8007970:	2800      	cmp	r0, #0
 8007972:	f43f aec5 	beq.w	8007700 <_strtod_l+0xa8>
 8007976:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	2b28      	cmp	r3, #40	@ 0x28
 800797c:	d12e      	bne.n	80079dc <_strtod_l+0x384>
 800797e:	4996      	ldr	r1, [pc, #600]	@ (8007bd8 <_strtod_l+0x580>)
 8007980:	aa1c      	add	r2, sp, #112	@ 0x70
 8007982:	a819      	add	r0, sp, #100	@ 0x64
 8007984:	f002 fec8 	bl	800a718 <__hexnan>
 8007988:	2805      	cmp	r0, #5
 800798a:	d127      	bne.n	80079dc <_strtod_l+0x384>
 800798c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800798e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007992:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007996:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800799a:	e696      	b.n	80076ca <_strtod_l+0x72>
 800799c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800799e:	fb08 2101 	mla	r1, r8, r1, r2
 80079a2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80079a6:	9209      	str	r2, [sp, #36]	@ 0x24
 80079a8:	e7b5      	b.n	8007916 <_strtod_l+0x2be>
 80079aa:	2a6e      	cmp	r2, #110	@ 0x6e
 80079ac:	e7da      	b.n	8007964 <_strtod_l+0x30c>
 80079ae:	498b      	ldr	r1, [pc, #556]	@ (8007bdc <_strtod_l+0x584>)
 80079b0:	a819      	add	r0, sp, #100	@ 0x64
 80079b2:	f002 fe9d 	bl	800a6f0 <__match>
 80079b6:	2800      	cmp	r0, #0
 80079b8:	f43f aea2 	beq.w	8007700 <_strtod_l+0xa8>
 80079bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079be:	4988      	ldr	r1, [pc, #544]	@ (8007be0 <_strtod_l+0x588>)
 80079c0:	3b01      	subs	r3, #1
 80079c2:	a819      	add	r0, sp, #100	@ 0x64
 80079c4:	9319      	str	r3, [sp, #100]	@ 0x64
 80079c6:	f002 fe93 	bl	800a6f0 <__match>
 80079ca:	b910      	cbnz	r0, 80079d2 <_strtod_l+0x37a>
 80079cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80079ce:	3301      	adds	r3, #1
 80079d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80079d2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8007bf0 <_strtod_l+0x598>
 80079d6:	f04f 0a00 	mov.w	sl, #0
 80079da:	e676      	b.n	80076ca <_strtod_l+0x72>
 80079dc:	4881      	ldr	r0, [pc, #516]	@ (8007be4 <_strtod_l+0x58c>)
 80079de:	f001 fd4b 	bl	8009478 <nan>
 80079e2:	ec5b ab10 	vmov	sl, fp, d0
 80079e6:	e670      	b.n	80076ca <_strtod_l+0x72>
 80079e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079ea:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80079ec:	eba8 0303 	sub.w	r3, r8, r3
 80079f0:	f1b9 0f00 	cmp.w	r9, #0
 80079f4:	bf08      	it	eq
 80079f6:	46a9      	moveq	r9, r5
 80079f8:	2d10      	cmp	r5, #16
 80079fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80079fc:	462c      	mov	r4, r5
 80079fe:	bfa8      	it	ge
 8007a00:	2410      	movge	r4, #16
 8007a02:	f7f8 fd87 	bl	8000514 <__aeabi_ui2d>
 8007a06:	2d09      	cmp	r5, #9
 8007a08:	4682      	mov	sl, r0
 8007a0a:	468b      	mov	fp, r1
 8007a0c:	dc13      	bgt.n	8007a36 <_strtod_l+0x3de>
 8007a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	f43f ae5a 	beq.w	80076ca <_strtod_l+0x72>
 8007a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a18:	dd78      	ble.n	8007b0c <_strtod_l+0x4b4>
 8007a1a:	2b16      	cmp	r3, #22
 8007a1c:	dc5f      	bgt.n	8007ade <_strtod_l+0x486>
 8007a1e:	4972      	ldr	r1, [pc, #456]	@ (8007be8 <_strtod_l+0x590>)
 8007a20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a28:	4652      	mov	r2, sl
 8007a2a:	465b      	mov	r3, fp
 8007a2c:	f7f8 fdec 	bl	8000608 <__aeabi_dmul>
 8007a30:	4682      	mov	sl, r0
 8007a32:	468b      	mov	fp, r1
 8007a34:	e649      	b.n	80076ca <_strtod_l+0x72>
 8007a36:	4b6c      	ldr	r3, [pc, #432]	@ (8007be8 <_strtod_l+0x590>)
 8007a38:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a3c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007a40:	f7f8 fde2 	bl	8000608 <__aeabi_dmul>
 8007a44:	4682      	mov	sl, r0
 8007a46:	4638      	mov	r0, r7
 8007a48:	468b      	mov	fp, r1
 8007a4a:	f7f8 fd63 	bl	8000514 <__aeabi_ui2d>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	460b      	mov	r3, r1
 8007a52:	4650      	mov	r0, sl
 8007a54:	4659      	mov	r1, fp
 8007a56:	f7f8 fc21 	bl	800029c <__adddf3>
 8007a5a:	2d0f      	cmp	r5, #15
 8007a5c:	4682      	mov	sl, r0
 8007a5e:	468b      	mov	fp, r1
 8007a60:	ddd5      	ble.n	8007a0e <_strtod_l+0x3b6>
 8007a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a64:	1b2c      	subs	r4, r5, r4
 8007a66:	441c      	add	r4, r3
 8007a68:	2c00      	cmp	r4, #0
 8007a6a:	f340 8093 	ble.w	8007b94 <_strtod_l+0x53c>
 8007a6e:	f014 030f 	ands.w	r3, r4, #15
 8007a72:	d00a      	beq.n	8007a8a <_strtod_l+0x432>
 8007a74:	495c      	ldr	r1, [pc, #368]	@ (8007be8 <_strtod_l+0x590>)
 8007a76:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007a7a:	4652      	mov	r2, sl
 8007a7c:	465b      	mov	r3, fp
 8007a7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a82:	f7f8 fdc1 	bl	8000608 <__aeabi_dmul>
 8007a86:	4682      	mov	sl, r0
 8007a88:	468b      	mov	fp, r1
 8007a8a:	f034 040f 	bics.w	r4, r4, #15
 8007a8e:	d073      	beq.n	8007b78 <_strtod_l+0x520>
 8007a90:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007a94:	dd49      	ble.n	8007b2a <_strtod_l+0x4d2>
 8007a96:	2400      	movs	r4, #0
 8007a98:	46a0      	mov	r8, r4
 8007a9a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007a9c:	46a1      	mov	r9, r4
 8007a9e:	9a05      	ldr	r2, [sp, #20]
 8007aa0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8007bf0 <_strtod_l+0x598>
 8007aa4:	2322      	movs	r3, #34	@ 0x22
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	f04f 0a00 	mov.w	sl, #0
 8007aac:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	f43f ae0b 	beq.w	80076ca <_strtod_l+0x72>
 8007ab4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ab6:	9805      	ldr	r0, [sp, #20]
 8007ab8:	f002 ffd2 	bl	800aa60 <_Bfree>
 8007abc:	9805      	ldr	r0, [sp, #20]
 8007abe:	4649      	mov	r1, r9
 8007ac0:	f002 ffce 	bl	800aa60 <_Bfree>
 8007ac4:	9805      	ldr	r0, [sp, #20]
 8007ac6:	4641      	mov	r1, r8
 8007ac8:	f002 ffca 	bl	800aa60 <_Bfree>
 8007acc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ace:	9805      	ldr	r0, [sp, #20]
 8007ad0:	f002 ffc6 	bl	800aa60 <_Bfree>
 8007ad4:	9805      	ldr	r0, [sp, #20]
 8007ad6:	4621      	mov	r1, r4
 8007ad8:	f002 ffc2 	bl	800aa60 <_Bfree>
 8007adc:	e5f5      	b.n	80076ca <_strtod_l+0x72>
 8007ade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ae0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	dbbc      	blt.n	8007a62 <_strtod_l+0x40a>
 8007ae8:	4c3f      	ldr	r4, [pc, #252]	@ (8007be8 <_strtod_l+0x590>)
 8007aea:	f1c5 050f 	rsb	r5, r5, #15
 8007aee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007af2:	4652      	mov	r2, sl
 8007af4:	465b      	mov	r3, fp
 8007af6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007afa:	f7f8 fd85 	bl	8000608 <__aeabi_dmul>
 8007afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b00:	1b5d      	subs	r5, r3, r5
 8007b02:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007b06:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007b0a:	e78f      	b.n	8007a2c <_strtod_l+0x3d4>
 8007b0c:	3316      	adds	r3, #22
 8007b0e:	dba8      	blt.n	8007a62 <_strtod_l+0x40a>
 8007b10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b12:	eba3 0808 	sub.w	r8, r3, r8
 8007b16:	4b34      	ldr	r3, [pc, #208]	@ (8007be8 <_strtod_l+0x590>)
 8007b18:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007b1c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007b20:	4650      	mov	r0, sl
 8007b22:	4659      	mov	r1, fp
 8007b24:	f7f8 fe9a 	bl	800085c <__aeabi_ddiv>
 8007b28:	e782      	b.n	8007a30 <_strtod_l+0x3d8>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	4f2f      	ldr	r7, [pc, #188]	@ (8007bec <_strtod_l+0x594>)
 8007b2e:	1124      	asrs	r4, r4, #4
 8007b30:	4650      	mov	r0, sl
 8007b32:	4659      	mov	r1, fp
 8007b34:	461e      	mov	r6, r3
 8007b36:	2c01      	cmp	r4, #1
 8007b38:	dc21      	bgt.n	8007b7e <_strtod_l+0x526>
 8007b3a:	b10b      	cbz	r3, 8007b40 <_strtod_l+0x4e8>
 8007b3c:	4682      	mov	sl, r0
 8007b3e:	468b      	mov	fp, r1
 8007b40:	492a      	ldr	r1, [pc, #168]	@ (8007bec <_strtod_l+0x594>)
 8007b42:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007b46:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007b4a:	4652      	mov	r2, sl
 8007b4c:	465b      	mov	r3, fp
 8007b4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b52:	f7f8 fd59 	bl	8000608 <__aeabi_dmul>
 8007b56:	4b26      	ldr	r3, [pc, #152]	@ (8007bf0 <_strtod_l+0x598>)
 8007b58:	460a      	mov	r2, r1
 8007b5a:	400b      	ands	r3, r1
 8007b5c:	4925      	ldr	r1, [pc, #148]	@ (8007bf4 <_strtod_l+0x59c>)
 8007b5e:	428b      	cmp	r3, r1
 8007b60:	4682      	mov	sl, r0
 8007b62:	d898      	bhi.n	8007a96 <_strtod_l+0x43e>
 8007b64:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007b68:	428b      	cmp	r3, r1
 8007b6a:	bf86      	itte	hi
 8007b6c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8007bf8 <_strtod_l+0x5a0>
 8007b70:	f04f 3aff 	movhi.w	sl, #4294967295
 8007b74:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007b78:	2300      	movs	r3, #0
 8007b7a:	9308      	str	r3, [sp, #32]
 8007b7c:	e076      	b.n	8007c6c <_strtod_l+0x614>
 8007b7e:	07e2      	lsls	r2, r4, #31
 8007b80:	d504      	bpl.n	8007b8c <_strtod_l+0x534>
 8007b82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b86:	f7f8 fd3f 	bl	8000608 <__aeabi_dmul>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	3601      	adds	r6, #1
 8007b8e:	1064      	asrs	r4, r4, #1
 8007b90:	3708      	adds	r7, #8
 8007b92:	e7d0      	b.n	8007b36 <_strtod_l+0x4de>
 8007b94:	d0f0      	beq.n	8007b78 <_strtod_l+0x520>
 8007b96:	4264      	negs	r4, r4
 8007b98:	f014 020f 	ands.w	r2, r4, #15
 8007b9c:	d00a      	beq.n	8007bb4 <_strtod_l+0x55c>
 8007b9e:	4b12      	ldr	r3, [pc, #72]	@ (8007be8 <_strtod_l+0x590>)
 8007ba0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ba4:	4650      	mov	r0, sl
 8007ba6:	4659      	mov	r1, fp
 8007ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bac:	f7f8 fe56 	bl	800085c <__aeabi_ddiv>
 8007bb0:	4682      	mov	sl, r0
 8007bb2:	468b      	mov	fp, r1
 8007bb4:	1124      	asrs	r4, r4, #4
 8007bb6:	d0df      	beq.n	8007b78 <_strtod_l+0x520>
 8007bb8:	2c1f      	cmp	r4, #31
 8007bba:	dd1f      	ble.n	8007bfc <_strtod_l+0x5a4>
 8007bbc:	2400      	movs	r4, #0
 8007bbe:	46a0      	mov	r8, r4
 8007bc0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007bc2:	46a1      	mov	r9, r4
 8007bc4:	9a05      	ldr	r2, [sp, #20]
 8007bc6:	2322      	movs	r3, #34	@ 0x22
 8007bc8:	f04f 0a00 	mov.w	sl, #0
 8007bcc:	f04f 0b00 	mov.w	fp, #0
 8007bd0:	6013      	str	r3, [r2, #0]
 8007bd2:	e76b      	b.n	8007aac <_strtod_l+0x454>
 8007bd4:	0800c083 	.word	0x0800c083
 8007bd8:	0800c24c 	.word	0x0800c24c
 8007bdc:	0800c07b 	.word	0x0800c07b
 8007be0:	0800c0ba 	.word	0x0800c0ba
 8007be4:	0800c249 	.word	0x0800c249
 8007be8:	0800c2d8 	.word	0x0800c2d8
 8007bec:	0800c2b0 	.word	0x0800c2b0
 8007bf0:	7ff00000 	.word	0x7ff00000
 8007bf4:	7ca00000 	.word	0x7ca00000
 8007bf8:	7fefffff 	.word	0x7fefffff
 8007bfc:	f014 0310 	ands.w	r3, r4, #16
 8007c00:	bf18      	it	ne
 8007c02:	236a      	movne	r3, #106	@ 0x6a
 8007c04:	4ea9      	ldr	r6, [pc, #676]	@ (8007eac <_strtod_l+0x854>)
 8007c06:	9308      	str	r3, [sp, #32]
 8007c08:	4650      	mov	r0, sl
 8007c0a:	4659      	mov	r1, fp
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	07e7      	lsls	r7, r4, #31
 8007c10:	d504      	bpl.n	8007c1c <_strtod_l+0x5c4>
 8007c12:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007c16:	f7f8 fcf7 	bl	8000608 <__aeabi_dmul>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	1064      	asrs	r4, r4, #1
 8007c1e:	f106 0608 	add.w	r6, r6, #8
 8007c22:	d1f4      	bne.n	8007c0e <_strtod_l+0x5b6>
 8007c24:	b10b      	cbz	r3, 8007c2a <_strtod_l+0x5d2>
 8007c26:	4682      	mov	sl, r0
 8007c28:	468b      	mov	fp, r1
 8007c2a:	9b08      	ldr	r3, [sp, #32]
 8007c2c:	b1b3      	cbz	r3, 8007c5c <_strtod_l+0x604>
 8007c2e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007c32:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	4659      	mov	r1, fp
 8007c3a:	dd0f      	ble.n	8007c5c <_strtod_l+0x604>
 8007c3c:	2b1f      	cmp	r3, #31
 8007c3e:	dd56      	ble.n	8007cee <_strtod_l+0x696>
 8007c40:	2b34      	cmp	r3, #52	@ 0x34
 8007c42:	bfde      	ittt	le
 8007c44:	f04f 33ff 	movle.w	r3, #4294967295
 8007c48:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007c4c:	4093      	lslle	r3, r2
 8007c4e:	f04f 0a00 	mov.w	sl, #0
 8007c52:	bfcc      	ite	gt
 8007c54:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007c58:	ea03 0b01 	andle.w	fp, r3, r1
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	2300      	movs	r3, #0
 8007c60:	4650      	mov	r0, sl
 8007c62:	4659      	mov	r1, fp
 8007c64:	f7f8 ff38 	bl	8000ad8 <__aeabi_dcmpeq>
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	d1a7      	bne.n	8007bbc <_strtod_l+0x564>
 8007c6c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007c72:	9805      	ldr	r0, [sp, #20]
 8007c74:	462b      	mov	r3, r5
 8007c76:	464a      	mov	r2, r9
 8007c78:	f002 ff5a 	bl	800ab30 <__s2b>
 8007c7c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	f43f af09 	beq.w	8007a96 <_strtod_l+0x43e>
 8007c84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c88:	2a00      	cmp	r2, #0
 8007c8a:	eba3 0308 	sub.w	r3, r3, r8
 8007c8e:	bfa8      	it	ge
 8007c90:	2300      	movge	r3, #0
 8007c92:	9312      	str	r3, [sp, #72]	@ 0x48
 8007c94:	2400      	movs	r4, #0
 8007c96:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007c9a:	9316      	str	r3, [sp, #88]	@ 0x58
 8007c9c:	46a0      	mov	r8, r4
 8007c9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ca0:	9805      	ldr	r0, [sp, #20]
 8007ca2:	6859      	ldr	r1, [r3, #4]
 8007ca4:	f002 fe9c 	bl	800a9e0 <_Balloc>
 8007ca8:	4681      	mov	r9, r0
 8007caa:	2800      	cmp	r0, #0
 8007cac:	f43f aef7 	beq.w	8007a9e <_strtod_l+0x446>
 8007cb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cb2:	691a      	ldr	r2, [r3, #16]
 8007cb4:	3202      	adds	r2, #2
 8007cb6:	f103 010c 	add.w	r1, r3, #12
 8007cba:	0092      	lsls	r2, r2, #2
 8007cbc:	300c      	adds	r0, #12
 8007cbe:	f001 fbca 	bl	8009456 <memcpy>
 8007cc2:	ec4b ab10 	vmov	d0, sl, fp
 8007cc6:	9805      	ldr	r0, [sp, #20]
 8007cc8:	aa1c      	add	r2, sp, #112	@ 0x70
 8007cca:	a91b      	add	r1, sp, #108	@ 0x6c
 8007ccc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007cd0:	f003 fa62 	bl	800b198 <__d2b>
 8007cd4:	901a      	str	r0, [sp, #104]	@ 0x68
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	f43f aee1 	beq.w	8007a9e <_strtod_l+0x446>
 8007cdc:	9805      	ldr	r0, [sp, #20]
 8007cde:	2101      	movs	r1, #1
 8007ce0:	f002 ffbc 	bl	800ac5c <__i2b>
 8007ce4:	4680      	mov	r8, r0
 8007ce6:	b948      	cbnz	r0, 8007cfc <_strtod_l+0x6a4>
 8007ce8:	f04f 0800 	mov.w	r8, #0
 8007cec:	e6d7      	b.n	8007a9e <_strtod_l+0x446>
 8007cee:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf6:	ea03 0a0a 	and.w	sl, r3, sl
 8007cfa:	e7af      	b.n	8007c5c <_strtod_l+0x604>
 8007cfc:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007cfe:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007d00:	2d00      	cmp	r5, #0
 8007d02:	bfab      	itete	ge
 8007d04:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007d06:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007d08:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007d0a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007d0c:	bfac      	ite	ge
 8007d0e:	18ef      	addge	r7, r5, r3
 8007d10:	1b5e      	sublt	r6, r3, r5
 8007d12:	9b08      	ldr	r3, [sp, #32]
 8007d14:	1aed      	subs	r5, r5, r3
 8007d16:	4415      	add	r5, r2
 8007d18:	4b65      	ldr	r3, [pc, #404]	@ (8007eb0 <_strtod_l+0x858>)
 8007d1a:	3d01      	subs	r5, #1
 8007d1c:	429d      	cmp	r5, r3
 8007d1e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007d22:	da50      	bge.n	8007dc6 <_strtod_l+0x76e>
 8007d24:	1b5b      	subs	r3, r3, r5
 8007d26:	2b1f      	cmp	r3, #31
 8007d28:	eba2 0203 	sub.w	r2, r2, r3
 8007d2c:	f04f 0101 	mov.w	r1, #1
 8007d30:	dc3d      	bgt.n	8007dae <_strtod_l+0x756>
 8007d32:	fa01 f303 	lsl.w	r3, r1, r3
 8007d36:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d38:	2300      	movs	r3, #0
 8007d3a:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d3c:	18bd      	adds	r5, r7, r2
 8007d3e:	9b08      	ldr	r3, [sp, #32]
 8007d40:	42af      	cmp	r7, r5
 8007d42:	4416      	add	r6, r2
 8007d44:	441e      	add	r6, r3
 8007d46:	463b      	mov	r3, r7
 8007d48:	bfa8      	it	ge
 8007d4a:	462b      	movge	r3, r5
 8007d4c:	42b3      	cmp	r3, r6
 8007d4e:	bfa8      	it	ge
 8007d50:	4633      	movge	r3, r6
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	bfc2      	ittt	gt
 8007d56:	1aed      	subgt	r5, r5, r3
 8007d58:	1af6      	subgt	r6, r6, r3
 8007d5a:	1aff      	subgt	r7, r7, r3
 8007d5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	dd16      	ble.n	8007d90 <_strtod_l+0x738>
 8007d62:	4641      	mov	r1, r8
 8007d64:	9805      	ldr	r0, [sp, #20]
 8007d66:	461a      	mov	r2, r3
 8007d68:	f003 f830 	bl	800adcc <__pow5mult>
 8007d6c:	4680      	mov	r8, r0
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	d0ba      	beq.n	8007ce8 <_strtod_l+0x690>
 8007d72:	4601      	mov	r1, r0
 8007d74:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007d76:	9805      	ldr	r0, [sp, #20]
 8007d78:	f002 ff86 	bl	800ac88 <__multiply>
 8007d7c:	900a      	str	r0, [sp, #40]	@ 0x28
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	f43f ae8d 	beq.w	8007a9e <_strtod_l+0x446>
 8007d84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d86:	9805      	ldr	r0, [sp, #20]
 8007d88:	f002 fe6a 	bl	800aa60 <_Bfree>
 8007d8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d90:	2d00      	cmp	r5, #0
 8007d92:	dc1d      	bgt.n	8007dd0 <_strtod_l+0x778>
 8007d94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	dd23      	ble.n	8007de2 <_strtod_l+0x78a>
 8007d9a:	4649      	mov	r1, r9
 8007d9c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007d9e:	9805      	ldr	r0, [sp, #20]
 8007da0:	f003 f814 	bl	800adcc <__pow5mult>
 8007da4:	4681      	mov	r9, r0
 8007da6:	b9e0      	cbnz	r0, 8007de2 <_strtod_l+0x78a>
 8007da8:	f04f 0900 	mov.w	r9, #0
 8007dac:	e677      	b.n	8007a9e <_strtod_l+0x446>
 8007dae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007db2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007db6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007dba:	35e2      	adds	r5, #226	@ 0xe2
 8007dbc:	fa01 f305 	lsl.w	r3, r1, r5
 8007dc0:	9310      	str	r3, [sp, #64]	@ 0x40
 8007dc2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007dc4:	e7ba      	b.n	8007d3c <_strtod_l+0x6e4>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	9310      	str	r3, [sp, #64]	@ 0x40
 8007dca:	2301      	movs	r3, #1
 8007dcc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007dce:	e7b5      	b.n	8007d3c <_strtod_l+0x6e4>
 8007dd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007dd2:	9805      	ldr	r0, [sp, #20]
 8007dd4:	462a      	mov	r2, r5
 8007dd6:	f003 f853 	bl	800ae80 <__lshift>
 8007dda:	901a      	str	r0, [sp, #104]	@ 0x68
 8007ddc:	2800      	cmp	r0, #0
 8007dde:	d1d9      	bne.n	8007d94 <_strtod_l+0x73c>
 8007de0:	e65d      	b.n	8007a9e <_strtod_l+0x446>
 8007de2:	2e00      	cmp	r6, #0
 8007de4:	dd07      	ble.n	8007df6 <_strtod_l+0x79e>
 8007de6:	4649      	mov	r1, r9
 8007de8:	9805      	ldr	r0, [sp, #20]
 8007dea:	4632      	mov	r2, r6
 8007dec:	f003 f848 	bl	800ae80 <__lshift>
 8007df0:	4681      	mov	r9, r0
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d0d8      	beq.n	8007da8 <_strtod_l+0x750>
 8007df6:	2f00      	cmp	r7, #0
 8007df8:	dd08      	ble.n	8007e0c <_strtod_l+0x7b4>
 8007dfa:	4641      	mov	r1, r8
 8007dfc:	9805      	ldr	r0, [sp, #20]
 8007dfe:	463a      	mov	r2, r7
 8007e00:	f003 f83e 	bl	800ae80 <__lshift>
 8007e04:	4680      	mov	r8, r0
 8007e06:	2800      	cmp	r0, #0
 8007e08:	f43f ae49 	beq.w	8007a9e <_strtod_l+0x446>
 8007e0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e0e:	9805      	ldr	r0, [sp, #20]
 8007e10:	464a      	mov	r2, r9
 8007e12:	f003 f8bd 	bl	800af90 <__mdiff>
 8007e16:	4604      	mov	r4, r0
 8007e18:	2800      	cmp	r0, #0
 8007e1a:	f43f ae40 	beq.w	8007a9e <_strtod_l+0x446>
 8007e1e:	68c3      	ldr	r3, [r0, #12]
 8007e20:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007e22:	2300      	movs	r3, #0
 8007e24:	60c3      	str	r3, [r0, #12]
 8007e26:	4641      	mov	r1, r8
 8007e28:	f003 f896 	bl	800af58 <__mcmp>
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	da45      	bge.n	8007ebc <_strtod_l+0x864>
 8007e30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e32:	ea53 030a 	orrs.w	r3, r3, sl
 8007e36:	d16b      	bne.n	8007f10 <_strtod_l+0x8b8>
 8007e38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d167      	bne.n	8007f10 <_strtod_l+0x8b8>
 8007e40:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e44:	0d1b      	lsrs	r3, r3, #20
 8007e46:	051b      	lsls	r3, r3, #20
 8007e48:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007e4c:	d960      	bls.n	8007f10 <_strtod_l+0x8b8>
 8007e4e:	6963      	ldr	r3, [r4, #20]
 8007e50:	b913      	cbnz	r3, 8007e58 <_strtod_l+0x800>
 8007e52:	6923      	ldr	r3, [r4, #16]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	dd5b      	ble.n	8007f10 <_strtod_l+0x8b8>
 8007e58:	4621      	mov	r1, r4
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	9805      	ldr	r0, [sp, #20]
 8007e5e:	f003 f80f 	bl	800ae80 <__lshift>
 8007e62:	4641      	mov	r1, r8
 8007e64:	4604      	mov	r4, r0
 8007e66:	f003 f877 	bl	800af58 <__mcmp>
 8007e6a:	2800      	cmp	r0, #0
 8007e6c:	dd50      	ble.n	8007f10 <_strtod_l+0x8b8>
 8007e6e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e72:	9a08      	ldr	r2, [sp, #32]
 8007e74:	0d1b      	lsrs	r3, r3, #20
 8007e76:	051b      	lsls	r3, r3, #20
 8007e78:	2a00      	cmp	r2, #0
 8007e7a:	d06a      	beq.n	8007f52 <_strtod_l+0x8fa>
 8007e7c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007e80:	d867      	bhi.n	8007f52 <_strtod_l+0x8fa>
 8007e82:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007e86:	f67f ae9d 	bls.w	8007bc4 <_strtod_l+0x56c>
 8007e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8007eb4 <_strtod_l+0x85c>)
 8007e8c:	4650      	mov	r0, sl
 8007e8e:	4659      	mov	r1, fp
 8007e90:	2200      	movs	r2, #0
 8007e92:	f7f8 fbb9 	bl	8000608 <__aeabi_dmul>
 8007e96:	4b08      	ldr	r3, [pc, #32]	@ (8007eb8 <_strtod_l+0x860>)
 8007e98:	400b      	ands	r3, r1
 8007e9a:	4682      	mov	sl, r0
 8007e9c:	468b      	mov	fp, r1
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f47f ae08 	bne.w	8007ab4 <_strtod_l+0x45c>
 8007ea4:	9a05      	ldr	r2, [sp, #20]
 8007ea6:	2322      	movs	r3, #34	@ 0x22
 8007ea8:	6013      	str	r3, [r2, #0]
 8007eaa:	e603      	b.n	8007ab4 <_strtod_l+0x45c>
 8007eac:	0800c278 	.word	0x0800c278
 8007eb0:	fffffc02 	.word	0xfffffc02
 8007eb4:	39500000 	.word	0x39500000
 8007eb8:	7ff00000 	.word	0x7ff00000
 8007ebc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007ec0:	d165      	bne.n	8007f8e <_strtod_l+0x936>
 8007ec2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007ec4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ec8:	b35a      	cbz	r2, 8007f22 <_strtod_l+0x8ca>
 8007eca:	4a9f      	ldr	r2, [pc, #636]	@ (8008148 <_strtod_l+0xaf0>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d12b      	bne.n	8007f28 <_strtod_l+0x8d0>
 8007ed0:	9b08      	ldr	r3, [sp, #32]
 8007ed2:	4651      	mov	r1, sl
 8007ed4:	b303      	cbz	r3, 8007f18 <_strtod_l+0x8c0>
 8007ed6:	4b9d      	ldr	r3, [pc, #628]	@ (800814c <_strtod_l+0xaf4>)
 8007ed8:	465a      	mov	r2, fp
 8007eda:	4013      	ands	r3, r2
 8007edc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ee4:	d81b      	bhi.n	8007f1e <_strtod_l+0x8c6>
 8007ee6:	0d1b      	lsrs	r3, r3, #20
 8007ee8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007eec:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef0:	4299      	cmp	r1, r3
 8007ef2:	d119      	bne.n	8007f28 <_strtod_l+0x8d0>
 8007ef4:	4b96      	ldr	r3, [pc, #600]	@ (8008150 <_strtod_l+0xaf8>)
 8007ef6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d102      	bne.n	8007f02 <_strtod_l+0x8aa>
 8007efc:	3101      	adds	r1, #1
 8007efe:	f43f adce 	beq.w	8007a9e <_strtod_l+0x446>
 8007f02:	4b92      	ldr	r3, [pc, #584]	@ (800814c <_strtod_l+0xaf4>)
 8007f04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f06:	401a      	ands	r2, r3
 8007f08:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007f0c:	f04f 0a00 	mov.w	sl, #0
 8007f10:	9b08      	ldr	r3, [sp, #32]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d1b9      	bne.n	8007e8a <_strtod_l+0x832>
 8007f16:	e5cd      	b.n	8007ab4 <_strtod_l+0x45c>
 8007f18:	f04f 33ff 	mov.w	r3, #4294967295
 8007f1c:	e7e8      	b.n	8007ef0 <_strtod_l+0x898>
 8007f1e:	4613      	mov	r3, r2
 8007f20:	e7e6      	b.n	8007ef0 <_strtod_l+0x898>
 8007f22:	ea53 030a 	orrs.w	r3, r3, sl
 8007f26:	d0a2      	beq.n	8007e6e <_strtod_l+0x816>
 8007f28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007f2a:	b1db      	cbz	r3, 8007f64 <_strtod_l+0x90c>
 8007f2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f2e:	4213      	tst	r3, r2
 8007f30:	d0ee      	beq.n	8007f10 <_strtod_l+0x8b8>
 8007f32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f34:	9a08      	ldr	r2, [sp, #32]
 8007f36:	4650      	mov	r0, sl
 8007f38:	4659      	mov	r1, fp
 8007f3a:	b1bb      	cbz	r3, 8007f6c <_strtod_l+0x914>
 8007f3c:	f7ff fb6d 	bl	800761a <sulp>
 8007f40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f44:	ec53 2b10 	vmov	r2, r3, d0
 8007f48:	f7f8 f9a8 	bl	800029c <__adddf3>
 8007f4c:	4682      	mov	sl, r0
 8007f4e:	468b      	mov	fp, r1
 8007f50:	e7de      	b.n	8007f10 <_strtod_l+0x8b8>
 8007f52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007f56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007f5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007f5e:	f04f 3aff 	mov.w	sl, #4294967295
 8007f62:	e7d5      	b.n	8007f10 <_strtod_l+0x8b8>
 8007f64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007f66:	ea13 0f0a 	tst.w	r3, sl
 8007f6a:	e7e1      	b.n	8007f30 <_strtod_l+0x8d8>
 8007f6c:	f7ff fb55 	bl	800761a <sulp>
 8007f70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f74:	ec53 2b10 	vmov	r2, r3, d0
 8007f78:	f7f8 f98e 	bl	8000298 <__aeabi_dsub>
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	2300      	movs	r3, #0
 8007f80:	4682      	mov	sl, r0
 8007f82:	468b      	mov	fp, r1
 8007f84:	f7f8 fda8 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d0c1      	beq.n	8007f10 <_strtod_l+0x8b8>
 8007f8c:	e61a      	b.n	8007bc4 <_strtod_l+0x56c>
 8007f8e:	4641      	mov	r1, r8
 8007f90:	4620      	mov	r0, r4
 8007f92:	f003 f959 	bl	800b248 <__ratio>
 8007f96:	ec57 6b10 	vmov	r6, r7, d0
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007fa0:	4630      	mov	r0, r6
 8007fa2:	4639      	mov	r1, r7
 8007fa4:	f7f8 fdac 	bl	8000b00 <__aeabi_dcmple>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d06f      	beq.n	800808c <_strtod_l+0xa34>
 8007fac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d17a      	bne.n	80080a8 <_strtod_l+0xa50>
 8007fb2:	f1ba 0f00 	cmp.w	sl, #0
 8007fb6:	d158      	bne.n	800806a <_strtod_l+0xa12>
 8007fb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d15a      	bne.n	8008078 <_strtod_l+0xa20>
 8007fc2:	4b64      	ldr	r3, [pc, #400]	@ (8008154 <_strtod_l+0xafc>)
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	4639      	mov	r1, r7
 8007fca:	f7f8 fd8f 	bl	8000aec <__aeabi_dcmplt>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	d159      	bne.n	8008086 <_strtod_l+0xa2e>
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	4639      	mov	r1, r7
 8007fd6:	4b60      	ldr	r3, [pc, #384]	@ (8008158 <_strtod_l+0xb00>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f7f8 fb15 	bl	8000608 <__aeabi_dmul>
 8007fde:	4606      	mov	r6, r0
 8007fe0:	460f      	mov	r7, r1
 8007fe2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007fe6:	9606      	str	r6, [sp, #24]
 8007fe8:	9307      	str	r3, [sp, #28]
 8007fea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007fee:	4d57      	ldr	r5, [pc, #348]	@ (800814c <_strtod_l+0xaf4>)
 8007ff0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007ff4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ff6:	401d      	ands	r5, r3
 8007ff8:	4b58      	ldr	r3, [pc, #352]	@ (800815c <_strtod_l+0xb04>)
 8007ffa:	429d      	cmp	r5, r3
 8007ffc:	f040 80b2 	bne.w	8008164 <_strtod_l+0xb0c>
 8008000:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008002:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008006:	ec4b ab10 	vmov	d0, sl, fp
 800800a:	f003 f855 	bl	800b0b8 <__ulp>
 800800e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008012:	ec51 0b10 	vmov	r0, r1, d0
 8008016:	f7f8 faf7 	bl	8000608 <__aeabi_dmul>
 800801a:	4652      	mov	r2, sl
 800801c:	465b      	mov	r3, fp
 800801e:	f7f8 f93d 	bl	800029c <__adddf3>
 8008022:	460b      	mov	r3, r1
 8008024:	4949      	ldr	r1, [pc, #292]	@ (800814c <_strtod_l+0xaf4>)
 8008026:	4a4e      	ldr	r2, [pc, #312]	@ (8008160 <_strtod_l+0xb08>)
 8008028:	4019      	ands	r1, r3
 800802a:	4291      	cmp	r1, r2
 800802c:	4682      	mov	sl, r0
 800802e:	d942      	bls.n	80080b6 <_strtod_l+0xa5e>
 8008030:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008032:	4b47      	ldr	r3, [pc, #284]	@ (8008150 <_strtod_l+0xaf8>)
 8008034:	429a      	cmp	r2, r3
 8008036:	d103      	bne.n	8008040 <_strtod_l+0x9e8>
 8008038:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800803a:	3301      	adds	r3, #1
 800803c:	f43f ad2f 	beq.w	8007a9e <_strtod_l+0x446>
 8008040:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008150 <_strtod_l+0xaf8>
 8008044:	f04f 3aff 	mov.w	sl, #4294967295
 8008048:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800804a:	9805      	ldr	r0, [sp, #20]
 800804c:	f002 fd08 	bl	800aa60 <_Bfree>
 8008050:	9805      	ldr	r0, [sp, #20]
 8008052:	4649      	mov	r1, r9
 8008054:	f002 fd04 	bl	800aa60 <_Bfree>
 8008058:	9805      	ldr	r0, [sp, #20]
 800805a:	4641      	mov	r1, r8
 800805c:	f002 fd00 	bl	800aa60 <_Bfree>
 8008060:	9805      	ldr	r0, [sp, #20]
 8008062:	4621      	mov	r1, r4
 8008064:	f002 fcfc 	bl	800aa60 <_Bfree>
 8008068:	e619      	b.n	8007c9e <_strtod_l+0x646>
 800806a:	f1ba 0f01 	cmp.w	sl, #1
 800806e:	d103      	bne.n	8008078 <_strtod_l+0xa20>
 8008070:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008072:	2b00      	cmp	r3, #0
 8008074:	f43f ada6 	beq.w	8007bc4 <_strtod_l+0x56c>
 8008078:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008128 <_strtod_l+0xad0>
 800807c:	4f35      	ldr	r7, [pc, #212]	@ (8008154 <_strtod_l+0xafc>)
 800807e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008082:	2600      	movs	r6, #0
 8008084:	e7b1      	b.n	8007fea <_strtod_l+0x992>
 8008086:	4f34      	ldr	r7, [pc, #208]	@ (8008158 <_strtod_l+0xb00>)
 8008088:	2600      	movs	r6, #0
 800808a:	e7aa      	b.n	8007fe2 <_strtod_l+0x98a>
 800808c:	4b32      	ldr	r3, [pc, #200]	@ (8008158 <_strtod_l+0xb00>)
 800808e:	4630      	mov	r0, r6
 8008090:	4639      	mov	r1, r7
 8008092:	2200      	movs	r2, #0
 8008094:	f7f8 fab8 	bl	8000608 <__aeabi_dmul>
 8008098:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800809a:	4606      	mov	r6, r0
 800809c:	460f      	mov	r7, r1
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d09f      	beq.n	8007fe2 <_strtod_l+0x98a>
 80080a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80080a6:	e7a0      	b.n	8007fea <_strtod_l+0x992>
 80080a8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008130 <_strtod_l+0xad8>
 80080ac:	ed8d 7b06 	vstr	d7, [sp, #24]
 80080b0:	ec57 6b17 	vmov	r6, r7, d7
 80080b4:	e799      	b.n	8007fea <_strtod_l+0x992>
 80080b6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80080ba:	9b08      	ldr	r3, [sp, #32]
 80080bc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d1c1      	bne.n	8008048 <_strtod_l+0x9f0>
 80080c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80080c8:	0d1b      	lsrs	r3, r3, #20
 80080ca:	051b      	lsls	r3, r3, #20
 80080cc:	429d      	cmp	r5, r3
 80080ce:	d1bb      	bne.n	8008048 <_strtod_l+0x9f0>
 80080d0:	4630      	mov	r0, r6
 80080d2:	4639      	mov	r1, r7
 80080d4:	f7f8 fdf8 	bl	8000cc8 <__aeabi_d2lz>
 80080d8:	f7f8 fa68 	bl	80005ac <__aeabi_l2d>
 80080dc:	4602      	mov	r2, r0
 80080de:	460b      	mov	r3, r1
 80080e0:	4630      	mov	r0, r6
 80080e2:	4639      	mov	r1, r7
 80080e4:	f7f8 f8d8 	bl	8000298 <__aeabi_dsub>
 80080e8:	460b      	mov	r3, r1
 80080ea:	4602      	mov	r2, r0
 80080ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80080f0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80080f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080f6:	ea46 060a 	orr.w	r6, r6, sl
 80080fa:	431e      	orrs	r6, r3
 80080fc:	d06f      	beq.n	80081de <_strtod_l+0xb86>
 80080fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8008138 <_strtod_l+0xae0>)
 8008100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008104:	f7f8 fcf2 	bl	8000aec <__aeabi_dcmplt>
 8008108:	2800      	cmp	r0, #0
 800810a:	f47f acd3 	bne.w	8007ab4 <_strtod_l+0x45c>
 800810e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008140 <_strtod_l+0xae8>)
 8008110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008114:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008118:	f7f8 fd06 	bl	8000b28 <__aeabi_dcmpgt>
 800811c:	2800      	cmp	r0, #0
 800811e:	d093      	beq.n	8008048 <_strtod_l+0x9f0>
 8008120:	e4c8      	b.n	8007ab4 <_strtod_l+0x45c>
 8008122:	bf00      	nop
 8008124:	f3af 8000 	nop.w
 8008128:	00000000 	.word	0x00000000
 800812c:	bff00000 	.word	0xbff00000
 8008130:	00000000 	.word	0x00000000
 8008134:	3ff00000 	.word	0x3ff00000
 8008138:	94a03595 	.word	0x94a03595
 800813c:	3fdfffff 	.word	0x3fdfffff
 8008140:	35afe535 	.word	0x35afe535
 8008144:	3fe00000 	.word	0x3fe00000
 8008148:	000fffff 	.word	0x000fffff
 800814c:	7ff00000 	.word	0x7ff00000
 8008150:	7fefffff 	.word	0x7fefffff
 8008154:	3ff00000 	.word	0x3ff00000
 8008158:	3fe00000 	.word	0x3fe00000
 800815c:	7fe00000 	.word	0x7fe00000
 8008160:	7c9fffff 	.word	0x7c9fffff
 8008164:	9b08      	ldr	r3, [sp, #32]
 8008166:	b323      	cbz	r3, 80081b2 <_strtod_l+0xb5a>
 8008168:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800816c:	d821      	bhi.n	80081b2 <_strtod_l+0xb5a>
 800816e:	a328      	add	r3, pc, #160	@ (adr r3, 8008210 <_strtod_l+0xbb8>)
 8008170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008174:	4630      	mov	r0, r6
 8008176:	4639      	mov	r1, r7
 8008178:	f7f8 fcc2 	bl	8000b00 <__aeabi_dcmple>
 800817c:	b1a0      	cbz	r0, 80081a8 <_strtod_l+0xb50>
 800817e:	4639      	mov	r1, r7
 8008180:	4630      	mov	r0, r6
 8008182:	f7f8 fd19 	bl	8000bb8 <__aeabi_d2uiz>
 8008186:	2801      	cmp	r0, #1
 8008188:	bf38      	it	cc
 800818a:	2001      	movcc	r0, #1
 800818c:	f7f8 f9c2 	bl	8000514 <__aeabi_ui2d>
 8008190:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008192:	4606      	mov	r6, r0
 8008194:	460f      	mov	r7, r1
 8008196:	b9fb      	cbnz	r3, 80081d8 <_strtod_l+0xb80>
 8008198:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800819c:	9014      	str	r0, [sp, #80]	@ 0x50
 800819e:	9315      	str	r3, [sp, #84]	@ 0x54
 80081a0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80081a4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80081a8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80081aa:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80081ae:	1b5b      	subs	r3, r3, r5
 80081b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80081b2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80081b6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80081ba:	f002 ff7d 	bl	800b0b8 <__ulp>
 80081be:	4650      	mov	r0, sl
 80081c0:	ec53 2b10 	vmov	r2, r3, d0
 80081c4:	4659      	mov	r1, fp
 80081c6:	f7f8 fa1f 	bl	8000608 <__aeabi_dmul>
 80081ca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80081ce:	f7f8 f865 	bl	800029c <__adddf3>
 80081d2:	4682      	mov	sl, r0
 80081d4:	468b      	mov	fp, r1
 80081d6:	e770      	b.n	80080ba <_strtod_l+0xa62>
 80081d8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80081dc:	e7e0      	b.n	80081a0 <_strtod_l+0xb48>
 80081de:	a30e      	add	r3, pc, #56	@ (adr r3, 8008218 <_strtod_l+0xbc0>)
 80081e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e4:	f7f8 fc82 	bl	8000aec <__aeabi_dcmplt>
 80081e8:	e798      	b.n	800811c <_strtod_l+0xac4>
 80081ea:	2300      	movs	r3, #0
 80081ec:	930e      	str	r3, [sp, #56]	@ 0x38
 80081ee:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80081f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081f2:	6013      	str	r3, [r2, #0]
 80081f4:	f7ff ba6d 	b.w	80076d2 <_strtod_l+0x7a>
 80081f8:	2a65      	cmp	r2, #101	@ 0x65
 80081fa:	f43f ab68 	beq.w	80078ce <_strtod_l+0x276>
 80081fe:	2a45      	cmp	r2, #69	@ 0x45
 8008200:	f43f ab65 	beq.w	80078ce <_strtod_l+0x276>
 8008204:	2301      	movs	r3, #1
 8008206:	f7ff bba0 	b.w	800794a <_strtod_l+0x2f2>
 800820a:	bf00      	nop
 800820c:	f3af 8000 	nop.w
 8008210:	ffc00000 	.word	0xffc00000
 8008214:	41dfffff 	.word	0x41dfffff
 8008218:	94a03595 	.word	0x94a03595
 800821c:	3fcfffff 	.word	0x3fcfffff

08008220 <_strtod_r>:
 8008220:	4b01      	ldr	r3, [pc, #4]	@ (8008228 <_strtod_r+0x8>)
 8008222:	f7ff ba19 	b.w	8007658 <_strtod_l>
 8008226:	bf00      	nop
 8008228:	2000001c 	.word	0x2000001c

0800822c <strtod>:
 800822c:	460a      	mov	r2, r1
 800822e:	4601      	mov	r1, r0
 8008230:	4802      	ldr	r0, [pc, #8]	@ (800823c <strtod+0x10>)
 8008232:	4b03      	ldr	r3, [pc, #12]	@ (8008240 <strtod+0x14>)
 8008234:	6800      	ldr	r0, [r0, #0]
 8008236:	f7ff ba0f 	b.w	8007658 <_strtod_l>
 800823a:	bf00      	nop
 800823c:	20000188 	.word	0x20000188
 8008240:	2000001c 	.word	0x2000001c

08008244 <strtof>:
 8008244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008248:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8008308 <strtof+0xc4>
 800824c:	4b29      	ldr	r3, [pc, #164]	@ (80082f4 <strtof+0xb0>)
 800824e:	460a      	mov	r2, r1
 8008250:	ed2d 8b02 	vpush	{d8}
 8008254:	4601      	mov	r1, r0
 8008256:	f8d8 0000 	ldr.w	r0, [r8]
 800825a:	f7ff f9fd 	bl	8007658 <_strtod_l>
 800825e:	ec55 4b10 	vmov	r4, r5, d0
 8008262:	4622      	mov	r2, r4
 8008264:	462b      	mov	r3, r5
 8008266:	4620      	mov	r0, r4
 8008268:	4629      	mov	r1, r5
 800826a:	f7f8 fc67 	bl	8000b3c <__aeabi_dcmpun>
 800826e:	b190      	cbz	r0, 8008296 <strtof+0x52>
 8008270:	2d00      	cmp	r5, #0
 8008272:	4821      	ldr	r0, [pc, #132]	@ (80082f8 <strtof+0xb4>)
 8008274:	da09      	bge.n	800828a <strtof+0x46>
 8008276:	f001 f907 	bl	8009488 <nanf>
 800827a:	eeb1 8a40 	vneg.f32	s16, s0
 800827e:	eeb0 0a48 	vmov.f32	s0, s16
 8008282:	ecbd 8b02 	vpop	{d8}
 8008286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800828a:	ecbd 8b02 	vpop	{d8}
 800828e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008292:	f001 b8f9 	b.w	8009488 <nanf>
 8008296:	4620      	mov	r0, r4
 8008298:	4629      	mov	r1, r5
 800829a:	f7f8 fcad 	bl	8000bf8 <__aeabi_d2f>
 800829e:	ee08 0a10 	vmov	s16, r0
 80082a2:	eddf 7a16 	vldr	s15, [pc, #88]	@ 80082fc <strtof+0xb8>
 80082a6:	eeb0 7ac8 	vabs.f32	s14, s16
 80082aa:	eeb4 7a67 	vcmp.f32	s14, s15
 80082ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082b2:	dd11      	ble.n	80082d8 <strtof+0x94>
 80082b4:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 80082b8:	4b11      	ldr	r3, [pc, #68]	@ (8008300 <strtof+0xbc>)
 80082ba:	f04f 32ff 	mov.w	r2, #4294967295
 80082be:	4620      	mov	r0, r4
 80082c0:	4639      	mov	r1, r7
 80082c2:	f7f8 fc3b 	bl	8000b3c <__aeabi_dcmpun>
 80082c6:	b980      	cbnz	r0, 80082ea <strtof+0xa6>
 80082c8:	4b0d      	ldr	r3, [pc, #52]	@ (8008300 <strtof+0xbc>)
 80082ca:	f04f 32ff 	mov.w	r2, #4294967295
 80082ce:	4620      	mov	r0, r4
 80082d0:	4639      	mov	r1, r7
 80082d2:	f7f8 fc15 	bl	8000b00 <__aeabi_dcmple>
 80082d6:	b940      	cbnz	r0, 80082ea <strtof+0xa6>
 80082d8:	ee18 3a10 	vmov	r3, s16
 80082dc:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80082e0:	d1cd      	bne.n	800827e <strtof+0x3a>
 80082e2:	4b08      	ldr	r3, [pc, #32]	@ (8008304 <strtof+0xc0>)
 80082e4:	402b      	ands	r3, r5
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d0c9      	beq.n	800827e <strtof+0x3a>
 80082ea:	f8d8 3000 	ldr.w	r3, [r8]
 80082ee:	2222      	movs	r2, #34	@ 0x22
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	e7c4      	b.n	800827e <strtof+0x3a>
 80082f4:	2000001c 	.word	0x2000001c
 80082f8:	0800c249 	.word	0x0800c249
 80082fc:	7f7fffff 	.word	0x7f7fffff
 8008300:	7fefffff 	.word	0x7fefffff
 8008304:	7ff00000 	.word	0x7ff00000
 8008308:	20000188 	.word	0x20000188

0800830c <__cvt>:
 800830c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008310:	ec57 6b10 	vmov	r6, r7, d0
 8008314:	2f00      	cmp	r7, #0
 8008316:	460c      	mov	r4, r1
 8008318:	4619      	mov	r1, r3
 800831a:	463b      	mov	r3, r7
 800831c:	bfbb      	ittet	lt
 800831e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008322:	461f      	movlt	r7, r3
 8008324:	2300      	movge	r3, #0
 8008326:	232d      	movlt	r3, #45	@ 0x2d
 8008328:	700b      	strb	r3, [r1, #0]
 800832a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800832c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008330:	4691      	mov	r9, r2
 8008332:	f023 0820 	bic.w	r8, r3, #32
 8008336:	bfbc      	itt	lt
 8008338:	4632      	movlt	r2, r6
 800833a:	4616      	movlt	r6, r2
 800833c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008340:	d005      	beq.n	800834e <__cvt+0x42>
 8008342:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008346:	d100      	bne.n	800834a <__cvt+0x3e>
 8008348:	3401      	adds	r4, #1
 800834a:	2102      	movs	r1, #2
 800834c:	e000      	b.n	8008350 <__cvt+0x44>
 800834e:	2103      	movs	r1, #3
 8008350:	ab03      	add	r3, sp, #12
 8008352:	9301      	str	r3, [sp, #4]
 8008354:	ab02      	add	r3, sp, #8
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	ec47 6b10 	vmov	d0, r6, r7
 800835c:	4653      	mov	r3, sl
 800835e:	4622      	mov	r2, r4
 8008360:	f001 f922 	bl	80095a8 <_dtoa_r>
 8008364:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008368:	4605      	mov	r5, r0
 800836a:	d119      	bne.n	80083a0 <__cvt+0x94>
 800836c:	f019 0f01 	tst.w	r9, #1
 8008370:	d00e      	beq.n	8008390 <__cvt+0x84>
 8008372:	eb00 0904 	add.w	r9, r0, r4
 8008376:	2200      	movs	r2, #0
 8008378:	2300      	movs	r3, #0
 800837a:	4630      	mov	r0, r6
 800837c:	4639      	mov	r1, r7
 800837e:	f7f8 fbab 	bl	8000ad8 <__aeabi_dcmpeq>
 8008382:	b108      	cbz	r0, 8008388 <__cvt+0x7c>
 8008384:	f8cd 900c 	str.w	r9, [sp, #12]
 8008388:	2230      	movs	r2, #48	@ 0x30
 800838a:	9b03      	ldr	r3, [sp, #12]
 800838c:	454b      	cmp	r3, r9
 800838e:	d31e      	bcc.n	80083ce <__cvt+0xc2>
 8008390:	9b03      	ldr	r3, [sp, #12]
 8008392:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008394:	1b5b      	subs	r3, r3, r5
 8008396:	4628      	mov	r0, r5
 8008398:	6013      	str	r3, [r2, #0]
 800839a:	b004      	add	sp, #16
 800839c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80083a4:	eb00 0904 	add.w	r9, r0, r4
 80083a8:	d1e5      	bne.n	8008376 <__cvt+0x6a>
 80083aa:	7803      	ldrb	r3, [r0, #0]
 80083ac:	2b30      	cmp	r3, #48	@ 0x30
 80083ae:	d10a      	bne.n	80083c6 <__cvt+0xba>
 80083b0:	2200      	movs	r2, #0
 80083b2:	2300      	movs	r3, #0
 80083b4:	4630      	mov	r0, r6
 80083b6:	4639      	mov	r1, r7
 80083b8:	f7f8 fb8e 	bl	8000ad8 <__aeabi_dcmpeq>
 80083bc:	b918      	cbnz	r0, 80083c6 <__cvt+0xba>
 80083be:	f1c4 0401 	rsb	r4, r4, #1
 80083c2:	f8ca 4000 	str.w	r4, [sl]
 80083c6:	f8da 3000 	ldr.w	r3, [sl]
 80083ca:	4499      	add	r9, r3
 80083cc:	e7d3      	b.n	8008376 <__cvt+0x6a>
 80083ce:	1c59      	adds	r1, r3, #1
 80083d0:	9103      	str	r1, [sp, #12]
 80083d2:	701a      	strb	r2, [r3, #0]
 80083d4:	e7d9      	b.n	800838a <__cvt+0x7e>

080083d6 <__exponent>:
 80083d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083d8:	2900      	cmp	r1, #0
 80083da:	bfba      	itte	lt
 80083dc:	4249      	neglt	r1, r1
 80083de:	232d      	movlt	r3, #45	@ 0x2d
 80083e0:	232b      	movge	r3, #43	@ 0x2b
 80083e2:	2909      	cmp	r1, #9
 80083e4:	7002      	strb	r2, [r0, #0]
 80083e6:	7043      	strb	r3, [r0, #1]
 80083e8:	dd29      	ble.n	800843e <__exponent+0x68>
 80083ea:	f10d 0307 	add.w	r3, sp, #7
 80083ee:	461d      	mov	r5, r3
 80083f0:	270a      	movs	r7, #10
 80083f2:	461a      	mov	r2, r3
 80083f4:	fbb1 f6f7 	udiv	r6, r1, r7
 80083f8:	fb07 1416 	mls	r4, r7, r6, r1
 80083fc:	3430      	adds	r4, #48	@ 0x30
 80083fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008402:	460c      	mov	r4, r1
 8008404:	2c63      	cmp	r4, #99	@ 0x63
 8008406:	f103 33ff 	add.w	r3, r3, #4294967295
 800840a:	4631      	mov	r1, r6
 800840c:	dcf1      	bgt.n	80083f2 <__exponent+0x1c>
 800840e:	3130      	adds	r1, #48	@ 0x30
 8008410:	1e94      	subs	r4, r2, #2
 8008412:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008416:	1c41      	adds	r1, r0, #1
 8008418:	4623      	mov	r3, r4
 800841a:	42ab      	cmp	r3, r5
 800841c:	d30a      	bcc.n	8008434 <__exponent+0x5e>
 800841e:	f10d 0309 	add.w	r3, sp, #9
 8008422:	1a9b      	subs	r3, r3, r2
 8008424:	42ac      	cmp	r4, r5
 8008426:	bf88      	it	hi
 8008428:	2300      	movhi	r3, #0
 800842a:	3302      	adds	r3, #2
 800842c:	4403      	add	r3, r0
 800842e:	1a18      	subs	r0, r3, r0
 8008430:	b003      	add	sp, #12
 8008432:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008434:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008438:	f801 6f01 	strb.w	r6, [r1, #1]!
 800843c:	e7ed      	b.n	800841a <__exponent+0x44>
 800843e:	2330      	movs	r3, #48	@ 0x30
 8008440:	3130      	adds	r1, #48	@ 0x30
 8008442:	7083      	strb	r3, [r0, #2]
 8008444:	70c1      	strb	r1, [r0, #3]
 8008446:	1d03      	adds	r3, r0, #4
 8008448:	e7f1      	b.n	800842e <__exponent+0x58>
	...

0800844c <_printf_float>:
 800844c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008450:	b08d      	sub	sp, #52	@ 0x34
 8008452:	460c      	mov	r4, r1
 8008454:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008458:	4616      	mov	r6, r2
 800845a:	461f      	mov	r7, r3
 800845c:	4605      	mov	r5, r0
 800845e:	f000 ff25 	bl	80092ac <_localeconv_r>
 8008462:	6803      	ldr	r3, [r0, #0]
 8008464:	9304      	str	r3, [sp, #16]
 8008466:	4618      	mov	r0, r3
 8008468:	f7f7 ff0a 	bl	8000280 <strlen>
 800846c:	2300      	movs	r3, #0
 800846e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008470:	f8d8 3000 	ldr.w	r3, [r8]
 8008474:	9005      	str	r0, [sp, #20]
 8008476:	3307      	adds	r3, #7
 8008478:	f023 0307 	bic.w	r3, r3, #7
 800847c:	f103 0208 	add.w	r2, r3, #8
 8008480:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008484:	f8d4 b000 	ldr.w	fp, [r4]
 8008488:	f8c8 2000 	str.w	r2, [r8]
 800848c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008490:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008494:	9307      	str	r3, [sp, #28]
 8008496:	f8cd 8018 	str.w	r8, [sp, #24]
 800849a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800849e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084a2:	4b9c      	ldr	r3, [pc, #624]	@ (8008714 <_printf_float+0x2c8>)
 80084a4:	f04f 32ff 	mov.w	r2, #4294967295
 80084a8:	f7f8 fb48 	bl	8000b3c <__aeabi_dcmpun>
 80084ac:	bb70      	cbnz	r0, 800850c <_printf_float+0xc0>
 80084ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084b2:	4b98      	ldr	r3, [pc, #608]	@ (8008714 <_printf_float+0x2c8>)
 80084b4:	f04f 32ff 	mov.w	r2, #4294967295
 80084b8:	f7f8 fb22 	bl	8000b00 <__aeabi_dcmple>
 80084bc:	bb30      	cbnz	r0, 800850c <_printf_float+0xc0>
 80084be:	2200      	movs	r2, #0
 80084c0:	2300      	movs	r3, #0
 80084c2:	4640      	mov	r0, r8
 80084c4:	4649      	mov	r1, r9
 80084c6:	f7f8 fb11 	bl	8000aec <__aeabi_dcmplt>
 80084ca:	b110      	cbz	r0, 80084d2 <_printf_float+0x86>
 80084cc:	232d      	movs	r3, #45	@ 0x2d
 80084ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80084d2:	4a91      	ldr	r2, [pc, #580]	@ (8008718 <_printf_float+0x2cc>)
 80084d4:	4b91      	ldr	r3, [pc, #580]	@ (800871c <_printf_float+0x2d0>)
 80084d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80084da:	bf8c      	ite	hi
 80084dc:	4690      	movhi	r8, r2
 80084de:	4698      	movls	r8, r3
 80084e0:	2303      	movs	r3, #3
 80084e2:	6123      	str	r3, [r4, #16]
 80084e4:	f02b 0304 	bic.w	r3, fp, #4
 80084e8:	6023      	str	r3, [r4, #0]
 80084ea:	f04f 0900 	mov.w	r9, #0
 80084ee:	9700      	str	r7, [sp, #0]
 80084f0:	4633      	mov	r3, r6
 80084f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80084f4:	4621      	mov	r1, r4
 80084f6:	4628      	mov	r0, r5
 80084f8:	f000 f9d2 	bl	80088a0 <_printf_common>
 80084fc:	3001      	adds	r0, #1
 80084fe:	f040 808d 	bne.w	800861c <_printf_float+0x1d0>
 8008502:	f04f 30ff 	mov.w	r0, #4294967295
 8008506:	b00d      	add	sp, #52	@ 0x34
 8008508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800850c:	4642      	mov	r2, r8
 800850e:	464b      	mov	r3, r9
 8008510:	4640      	mov	r0, r8
 8008512:	4649      	mov	r1, r9
 8008514:	f7f8 fb12 	bl	8000b3c <__aeabi_dcmpun>
 8008518:	b140      	cbz	r0, 800852c <_printf_float+0xe0>
 800851a:	464b      	mov	r3, r9
 800851c:	2b00      	cmp	r3, #0
 800851e:	bfbc      	itt	lt
 8008520:	232d      	movlt	r3, #45	@ 0x2d
 8008522:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008526:	4a7e      	ldr	r2, [pc, #504]	@ (8008720 <_printf_float+0x2d4>)
 8008528:	4b7e      	ldr	r3, [pc, #504]	@ (8008724 <_printf_float+0x2d8>)
 800852a:	e7d4      	b.n	80084d6 <_printf_float+0x8a>
 800852c:	6863      	ldr	r3, [r4, #4]
 800852e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008532:	9206      	str	r2, [sp, #24]
 8008534:	1c5a      	adds	r2, r3, #1
 8008536:	d13b      	bne.n	80085b0 <_printf_float+0x164>
 8008538:	2306      	movs	r3, #6
 800853a:	6063      	str	r3, [r4, #4]
 800853c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008540:	2300      	movs	r3, #0
 8008542:	6022      	str	r2, [r4, #0]
 8008544:	9303      	str	r3, [sp, #12]
 8008546:	ab0a      	add	r3, sp, #40	@ 0x28
 8008548:	e9cd a301 	strd	sl, r3, [sp, #4]
 800854c:	ab09      	add	r3, sp, #36	@ 0x24
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	6861      	ldr	r1, [r4, #4]
 8008552:	ec49 8b10 	vmov	d0, r8, r9
 8008556:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800855a:	4628      	mov	r0, r5
 800855c:	f7ff fed6 	bl	800830c <__cvt>
 8008560:	9b06      	ldr	r3, [sp, #24]
 8008562:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008564:	2b47      	cmp	r3, #71	@ 0x47
 8008566:	4680      	mov	r8, r0
 8008568:	d129      	bne.n	80085be <_printf_float+0x172>
 800856a:	1cc8      	adds	r0, r1, #3
 800856c:	db02      	blt.n	8008574 <_printf_float+0x128>
 800856e:	6863      	ldr	r3, [r4, #4]
 8008570:	4299      	cmp	r1, r3
 8008572:	dd41      	ble.n	80085f8 <_printf_float+0x1ac>
 8008574:	f1aa 0a02 	sub.w	sl, sl, #2
 8008578:	fa5f fa8a 	uxtb.w	sl, sl
 800857c:	3901      	subs	r1, #1
 800857e:	4652      	mov	r2, sl
 8008580:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008584:	9109      	str	r1, [sp, #36]	@ 0x24
 8008586:	f7ff ff26 	bl	80083d6 <__exponent>
 800858a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800858c:	1813      	adds	r3, r2, r0
 800858e:	2a01      	cmp	r2, #1
 8008590:	4681      	mov	r9, r0
 8008592:	6123      	str	r3, [r4, #16]
 8008594:	dc02      	bgt.n	800859c <_printf_float+0x150>
 8008596:	6822      	ldr	r2, [r4, #0]
 8008598:	07d2      	lsls	r2, r2, #31
 800859a:	d501      	bpl.n	80085a0 <_printf_float+0x154>
 800859c:	3301      	adds	r3, #1
 800859e:	6123      	str	r3, [r4, #16]
 80085a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d0a2      	beq.n	80084ee <_printf_float+0xa2>
 80085a8:	232d      	movs	r3, #45	@ 0x2d
 80085aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085ae:	e79e      	b.n	80084ee <_printf_float+0xa2>
 80085b0:	9a06      	ldr	r2, [sp, #24]
 80085b2:	2a47      	cmp	r2, #71	@ 0x47
 80085b4:	d1c2      	bne.n	800853c <_printf_float+0xf0>
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1c0      	bne.n	800853c <_printf_float+0xf0>
 80085ba:	2301      	movs	r3, #1
 80085bc:	e7bd      	b.n	800853a <_printf_float+0xee>
 80085be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80085c2:	d9db      	bls.n	800857c <_printf_float+0x130>
 80085c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80085c8:	d118      	bne.n	80085fc <_printf_float+0x1b0>
 80085ca:	2900      	cmp	r1, #0
 80085cc:	6863      	ldr	r3, [r4, #4]
 80085ce:	dd0b      	ble.n	80085e8 <_printf_float+0x19c>
 80085d0:	6121      	str	r1, [r4, #16]
 80085d2:	b913      	cbnz	r3, 80085da <_printf_float+0x18e>
 80085d4:	6822      	ldr	r2, [r4, #0]
 80085d6:	07d0      	lsls	r0, r2, #31
 80085d8:	d502      	bpl.n	80085e0 <_printf_float+0x194>
 80085da:	3301      	adds	r3, #1
 80085dc:	440b      	add	r3, r1
 80085de:	6123      	str	r3, [r4, #16]
 80085e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80085e2:	f04f 0900 	mov.w	r9, #0
 80085e6:	e7db      	b.n	80085a0 <_printf_float+0x154>
 80085e8:	b913      	cbnz	r3, 80085f0 <_printf_float+0x1a4>
 80085ea:	6822      	ldr	r2, [r4, #0]
 80085ec:	07d2      	lsls	r2, r2, #31
 80085ee:	d501      	bpl.n	80085f4 <_printf_float+0x1a8>
 80085f0:	3302      	adds	r3, #2
 80085f2:	e7f4      	b.n	80085de <_printf_float+0x192>
 80085f4:	2301      	movs	r3, #1
 80085f6:	e7f2      	b.n	80085de <_printf_float+0x192>
 80085f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80085fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085fe:	4299      	cmp	r1, r3
 8008600:	db05      	blt.n	800860e <_printf_float+0x1c2>
 8008602:	6823      	ldr	r3, [r4, #0]
 8008604:	6121      	str	r1, [r4, #16]
 8008606:	07d8      	lsls	r0, r3, #31
 8008608:	d5ea      	bpl.n	80085e0 <_printf_float+0x194>
 800860a:	1c4b      	adds	r3, r1, #1
 800860c:	e7e7      	b.n	80085de <_printf_float+0x192>
 800860e:	2900      	cmp	r1, #0
 8008610:	bfd4      	ite	le
 8008612:	f1c1 0202 	rsble	r2, r1, #2
 8008616:	2201      	movgt	r2, #1
 8008618:	4413      	add	r3, r2
 800861a:	e7e0      	b.n	80085de <_printf_float+0x192>
 800861c:	6823      	ldr	r3, [r4, #0]
 800861e:	055a      	lsls	r2, r3, #21
 8008620:	d407      	bmi.n	8008632 <_printf_float+0x1e6>
 8008622:	6923      	ldr	r3, [r4, #16]
 8008624:	4642      	mov	r2, r8
 8008626:	4631      	mov	r1, r6
 8008628:	4628      	mov	r0, r5
 800862a:	47b8      	blx	r7
 800862c:	3001      	adds	r0, #1
 800862e:	d12b      	bne.n	8008688 <_printf_float+0x23c>
 8008630:	e767      	b.n	8008502 <_printf_float+0xb6>
 8008632:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008636:	f240 80dd 	bls.w	80087f4 <_printf_float+0x3a8>
 800863a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800863e:	2200      	movs	r2, #0
 8008640:	2300      	movs	r3, #0
 8008642:	f7f8 fa49 	bl	8000ad8 <__aeabi_dcmpeq>
 8008646:	2800      	cmp	r0, #0
 8008648:	d033      	beq.n	80086b2 <_printf_float+0x266>
 800864a:	4a37      	ldr	r2, [pc, #220]	@ (8008728 <_printf_float+0x2dc>)
 800864c:	2301      	movs	r3, #1
 800864e:	4631      	mov	r1, r6
 8008650:	4628      	mov	r0, r5
 8008652:	47b8      	blx	r7
 8008654:	3001      	adds	r0, #1
 8008656:	f43f af54 	beq.w	8008502 <_printf_float+0xb6>
 800865a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800865e:	4543      	cmp	r3, r8
 8008660:	db02      	blt.n	8008668 <_printf_float+0x21c>
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	07d8      	lsls	r0, r3, #31
 8008666:	d50f      	bpl.n	8008688 <_printf_float+0x23c>
 8008668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800866c:	4631      	mov	r1, r6
 800866e:	4628      	mov	r0, r5
 8008670:	47b8      	blx	r7
 8008672:	3001      	adds	r0, #1
 8008674:	f43f af45 	beq.w	8008502 <_printf_float+0xb6>
 8008678:	f04f 0900 	mov.w	r9, #0
 800867c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008680:	f104 0a1a 	add.w	sl, r4, #26
 8008684:	45c8      	cmp	r8, r9
 8008686:	dc09      	bgt.n	800869c <_printf_float+0x250>
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	079b      	lsls	r3, r3, #30
 800868c:	f100 8103 	bmi.w	8008896 <_printf_float+0x44a>
 8008690:	68e0      	ldr	r0, [r4, #12]
 8008692:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008694:	4298      	cmp	r0, r3
 8008696:	bfb8      	it	lt
 8008698:	4618      	movlt	r0, r3
 800869a:	e734      	b.n	8008506 <_printf_float+0xba>
 800869c:	2301      	movs	r3, #1
 800869e:	4652      	mov	r2, sl
 80086a0:	4631      	mov	r1, r6
 80086a2:	4628      	mov	r0, r5
 80086a4:	47b8      	blx	r7
 80086a6:	3001      	adds	r0, #1
 80086a8:	f43f af2b 	beq.w	8008502 <_printf_float+0xb6>
 80086ac:	f109 0901 	add.w	r9, r9, #1
 80086b0:	e7e8      	b.n	8008684 <_printf_float+0x238>
 80086b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	dc39      	bgt.n	800872c <_printf_float+0x2e0>
 80086b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008728 <_printf_float+0x2dc>)
 80086ba:	2301      	movs	r3, #1
 80086bc:	4631      	mov	r1, r6
 80086be:	4628      	mov	r0, r5
 80086c0:	47b8      	blx	r7
 80086c2:	3001      	adds	r0, #1
 80086c4:	f43f af1d 	beq.w	8008502 <_printf_float+0xb6>
 80086c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80086cc:	ea59 0303 	orrs.w	r3, r9, r3
 80086d0:	d102      	bne.n	80086d8 <_printf_float+0x28c>
 80086d2:	6823      	ldr	r3, [r4, #0]
 80086d4:	07d9      	lsls	r1, r3, #31
 80086d6:	d5d7      	bpl.n	8008688 <_printf_float+0x23c>
 80086d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086dc:	4631      	mov	r1, r6
 80086de:	4628      	mov	r0, r5
 80086e0:	47b8      	blx	r7
 80086e2:	3001      	adds	r0, #1
 80086e4:	f43f af0d 	beq.w	8008502 <_printf_float+0xb6>
 80086e8:	f04f 0a00 	mov.w	sl, #0
 80086ec:	f104 0b1a 	add.w	fp, r4, #26
 80086f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086f2:	425b      	negs	r3, r3
 80086f4:	4553      	cmp	r3, sl
 80086f6:	dc01      	bgt.n	80086fc <_printf_float+0x2b0>
 80086f8:	464b      	mov	r3, r9
 80086fa:	e793      	b.n	8008624 <_printf_float+0x1d8>
 80086fc:	2301      	movs	r3, #1
 80086fe:	465a      	mov	r2, fp
 8008700:	4631      	mov	r1, r6
 8008702:	4628      	mov	r0, r5
 8008704:	47b8      	blx	r7
 8008706:	3001      	adds	r0, #1
 8008708:	f43f aefb 	beq.w	8008502 <_printf_float+0xb6>
 800870c:	f10a 0a01 	add.w	sl, sl, #1
 8008710:	e7ee      	b.n	80086f0 <_printf_float+0x2a4>
 8008712:	bf00      	nop
 8008714:	7fefffff 	.word	0x7fefffff
 8008718:	0800c07a 	.word	0x0800c07a
 800871c:	0800c076 	.word	0x0800c076
 8008720:	0800c082 	.word	0x0800c082
 8008724:	0800c07e 	.word	0x0800c07e
 8008728:	0800c086 	.word	0x0800c086
 800872c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800872e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008732:	4553      	cmp	r3, sl
 8008734:	bfa8      	it	ge
 8008736:	4653      	movge	r3, sl
 8008738:	2b00      	cmp	r3, #0
 800873a:	4699      	mov	r9, r3
 800873c:	dc36      	bgt.n	80087ac <_printf_float+0x360>
 800873e:	f04f 0b00 	mov.w	fp, #0
 8008742:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008746:	f104 021a 	add.w	r2, r4, #26
 800874a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800874c:	9306      	str	r3, [sp, #24]
 800874e:	eba3 0309 	sub.w	r3, r3, r9
 8008752:	455b      	cmp	r3, fp
 8008754:	dc31      	bgt.n	80087ba <_printf_float+0x36e>
 8008756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008758:	459a      	cmp	sl, r3
 800875a:	dc3a      	bgt.n	80087d2 <_printf_float+0x386>
 800875c:	6823      	ldr	r3, [r4, #0]
 800875e:	07da      	lsls	r2, r3, #31
 8008760:	d437      	bmi.n	80087d2 <_printf_float+0x386>
 8008762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008764:	ebaa 0903 	sub.w	r9, sl, r3
 8008768:	9b06      	ldr	r3, [sp, #24]
 800876a:	ebaa 0303 	sub.w	r3, sl, r3
 800876e:	4599      	cmp	r9, r3
 8008770:	bfa8      	it	ge
 8008772:	4699      	movge	r9, r3
 8008774:	f1b9 0f00 	cmp.w	r9, #0
 8008778:	dc33      	bgt.n	80087e2 <_printf_float+0x396>
 800877a:	f04f 0800 	mov.w	r8, #0
 800877e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008782:	f104 0b1a 	add.w	fp, r4, #26
 8008786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008788:	ebaa 0303 	sub.w	r3, sl, r3
 800878c:	eba3 0309 	sub.w	r3, r3, r9
 8008790:	4543      	cmp	r3, r8
 8008792:	f77f af79 	ble.w	8008688 <_printf_float+0x23c>
 8008796:	2301      	movs	r3, #1
 8008798:	465a      	mov	r2, fp
 800879a:	4631      	mov	r1, r6
 800879c:	4628      	mov	r0, r5
 800879e:	47b8      	blx	r7
 80087a0:	3001      	adds	r0, #1
 80087a2:	f43f aeae 	beq.w	8008502 <_printf_float+0xb6>
 80087a6:	f108 0801 	add.w	r8, r8, #1
 80087aa:	e7ec      	b.n	8008786 <_printf_float+0x33a>
 80087ac:	4642      	mov	r2, r8
 80087ae:	4631      	mov	r1, r6
 80087b0:	4628      	mov	r0, r5
 80087b2:	47b8      	blx	r7
 80087b4:	3001      	adds	r0, #1
 80087b6:	d1c2      	bne.n	800873e <_printf_float+0x2f2>
 80087b8:	e6a3      	b.n	8008502 <_printf_float+0xb6>
 80087ba:	2301      	movs	r3, #1
 80087bc:	4631      	mov	r1, r6
 80087be:	4628      	mov	r0, r5
 80087c0:	9206      	str	r2, [sp, #24]
 80087c2:	47b8      	blx	r7
 80087c4:	3001      	adds	r0, #1
 80087c6:	f43f ae9c 	beq.w	8008502 <_printf_float+0xb6>
 80087ca:	9a06      	ldr	r2, [sp, #24]
 80087cc:	f10b 0b01 	add.w	fp, fp, #1
 80087d0:	e7bb      	b.n	800874a <_printf_float+0x2fe>
 80087d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087d6:	4631      	mov	r1, r6
 80087d8:	4628      	mov	r0, r5
 80087da:	47b8      	blx	r7
 80087dc:	3001      	adds	r0, #1
 80087de:	d1c0      	bne.n	8008762 <_printf_float+0x316>
 80087e0:	e68f      	b.n	8008502 <_printf_float+0xb6>
 80087e2:	9a06      	ldr	r2, [sp, #24]
 80087e4:	464b      	mov	r3, r9
 80087e6:	4442      	add	r2, r8
 80087e8:	4631      	mov	r1, r6
 80087ea:	4628      	mov	r0, r5
 80087ec:	47b8      	blx	r7
 80087ee:	3001      	adds	r0, #1
 80087f0:	d1c3      	bne.n	800877a <_printf_float+0x32e>
 80087f2:	e686      	b.n	8008502 <_printf_float+0xb6>
 80087f4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80087f8:	f1ba 0f01 	cmp.w	sl, #1
 80087fc:	dc01      	bgt.n	8008802 <_printf_float+0x3b6>
 80087fe:	07db      	lsls	r3, r3, #31
 8008800:	d536      	bpl.n	8008870 <_printf_float+0x424>
 8008802:	2301      	movs	r3, #1
 8008804:	4642      	mov	r2, r8
 8008806:	4631      	mov	r1, r6
 8008808:	4628      	mov	r0, r5
 800880a:	47b8      	blx	r7
 800880c:	3001      	adds	r0, #1
 800880e:	f43f ae78 	beq.w	8008502 <_printf_float+0xb6>
 8008812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008816:	4631      	mov	r1, r6
 8008818:	4628      	mov	r0, r5
 800881a:	47b8      	blx	r7
 800881c:	3001      	adds	r0, #1
 800881e:	f43f ae70 	beq.w	8008502 <_printf_float+0xb6>
 8008822:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008826:	2200      	movs	r2, #0
 8008828:	2300      	movs	r3, #0
 800882a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800882e:	f7f8 f953 	bl	8000ad8 <__aeabi_dcmpeq>
 8008832:	b9c0      	cbnz	r0, 8008866 <_printf_float+0x41a>
 8008834:	4653      	mov	r3, sl
 8008836:	f108 0201 	add.w	r2, r8, #1
 800883a:	4631      	mov	r1, r6
 800883c:	4628      	mov	r0, r5
 800883e:	47b8      	blx	r7
 8008840:	3001      	adds	r0, #1
 8008842:	d10c      	bne.n	800885e <_printf_float+0x412>
 8008844:	e65d      	b.n	8008502 <_printf_float+0xb6>
 8008846:	2301      	movs	r3, #1
 8008848:	465a      	mov	r2, fp
 800884a:	4631      	mov	r1, r6
 800884c:	4628      	mov	r0, r5
 800884e:	47b8      	blx	r7
 8008850:	3001      	adds	r0, #1
 8008852:	f43f ae56 	beq.w	8008502 <_printf_float+0xb6>
 8008856:	f108 0801 	add.w	r8, r8, #1
 800885a:	45d0      	cmp	r8, sl
 800885c:	dbf3      	blt.n	8008846 <_printf_float+0x3fa>
 800885e:	464b      	mov	r3, r9
 8008860:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008864:	e6df      	b.n	8008626 <_printf_float+0x1da>
 8008866:	f04f 0800 	mov.w	r8, #0
 800886a:	f104 0b1a 	add.w	fp, r4, #26
 800886e:	e7f4      	b.n	800885a <_printf_float+0x40e>
 8008870:	2301      	movs	r3, #1
 8008872:	4642      	mov	r2, r8
 8008874:	e7e1      	b.n	800883a <_printf_float+0x3ee>
 8008876:	2301      	movs	r3, #1
 8008878:	464a      	mov	r2, r9
 800887a:	4631      	mov	r1, r6
 800887c:	4628      	mov	r0, r5
 800887e:	47b8      	blx	r7
 8008880:	3001      	adds	r0, #1
 8008882:	f43f ae3e 	beq.w	8008502 <_printf_float+0xb6>
 8008886:	f108 0801 	add.w	r8, r8, #1
 800888a:	68e3      	ldr	r3, [r4, #12]
 800888c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800888e:	1a5b      	subs	r3, r3, r1
 8008890:	4543      	cmp	r3, r8
 8008892:	dcf0      	bgt.n	8008876 <_printf_float+0x42a>
 8008894:	e6fc      	b.n	8008690 <_printf_float+0x244>
 8008896:	f04f 0800 	mov.w	r8, #0
 800889a:	f104 0919 	add.w	r9, r4, #25
 800889e:	e7f4      	b.n	800888a <_printf_float+0x43e>

080088a0 <_printf_common>:
 80088a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088a4:	4616      	mov	r6, r2
 80088a6:	4698      	mov	r8, r3
 80088a8:	688a      	ldr	r2, [r1, #8]
 80088aa:	690b      	ldr	r3, [r1, #16]
 80088ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80088b0:	4293      	cmp	r3, r2
 80088b2:	bfb8      	it	lt
 80088b4:	4613      	movlt	r3, r2
 80088b6:	6033      	str	r3, [r6, #0]
 80088b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80088bc:	4607      	mov	r7, r0
 80088be:	460c      	mov	r4, r1
 80088c0:	b10a      	cbz	r2, 80088c6 <_printf_common+0x26>
 80088c2:	3301      	adds	r3, #1
 80088c4:	6033      	str	r3, [r6, #0]
 80088c6:	6823      	ldr	r3, [r4, #0]
 80088c8:	0699      	lsls	r1, r3, #26
 80088ca:	bf42      	ittt	mi
 80088cc:	6833      	ldrmi	r3, [r6, #0]
 80088ce:	3302      	addmi	r3, #2
 80088d0:	6033      	strmi	r3, [r6, #0]
 80088d2:	6825      	ldr	r5, [r4, #0]
 80088d4:	f015 0506 	ands.w	r5, r5, #6
 80088d8:	d106      	bne.n	80088e8 <_printf_common+0x48>
 80088da:	f104 0a19 	add.w	sl, r4, #25
 80088de:	68e3      	ldr	r3, [r4, #12]
 80088e0:	6832      	ldr	r2, [r6, #0]
 80088e2:	1a9b      	subs	r3, r3, r2
 80088e4:	42ab      	cmp	r3, r5
 80088e6:	dc26      	bgt.n	8008936 <_printf_common+0x96>
 80088e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80088ec:	6822      	ldr	r2, [r4, #0]
 80088ee:	3b00      	subs	r3, #0
 80088f0:	bf18      	it	ne
 80088f2:	2301      	movne	r3, #1
 80088f4:	0692      	lsls	r2, r2, #26
 80088f6:	d42b      	bmi.n	8008950 <_printf_common+0xb0>
 80088f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80088fc:	4641      	mov	r1, r8
 80088fe:	4638      	mov	r0, r7
 8008900:	47c8      	blx	r9
 8008902:	3001      	adds	r0, #1
 8008904:	d01e      	beq.n	8008944 <_printf_common+0xa4>
 8008906:	6823      	ldr	r3, [r4, #0]
 8008908:	6922      	ldr	r2, [r4, #16]
 800890a:	f003 0306 	and.w	r3, r3, #6
 800890e:	2b04      	cmp	r3, #4
 8008910:	bf02      	ittt	eq
 8008912:	68e5      	ldreq	r5, [r4, #12]
 8008914:	6833      	ldreq	r3, [r6, #0]
 8008916:	1aed      	subeq	r5, r5, r3
 8008918:	68a3      	ldr	r3, [r4, #8]
 800891a:	bf0c      	ite	eq
 800891c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008920:	2500      	movne	r5, #0
 8008922:	4293      	cmp	r3, r2
 8008924:	bfc4      	itt	gt
 8008926:	1a9b      	subgt	r3, r3, r2
 8008928:	18ed      	addgt	r5, r5, r3
 800892a:	2600      	movs	r6, #0
 800892c:	341a      	adds	r4, #26
 800892e:	42b5      	cmp	r5, r6
 8008930:	d11a      	bne.n	8008968 <_printf_common+0xc8>
 8008932:	2000      	movs	r0, #0
 8008934:	e008      	b.n	8008948 <_printf_common+0xa8>
 8008936:	2301      	movs	r3, #1
 8008938:	4652      	mov	r2, sl
 800893a:	4641      	mov	r1, r8
 800893c:	4638      	mov	r0, r7
 800893e:	47c8      	blx	r9
 8008940:	3001      	adds	r0, #1
 8008942:	d103      	bne.n	800894c <_printf_common+0xac>
 8008944:	f04f 30ff 	mov.w	r0, #4294967295
 8008948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800894c:	3501      	adds	r5, #1
 800894e:	e7c6      	b.n	80088de <_printf_common+0x3e>
 8008950:	18e1      	adds	r1, r4, r3
 8008952:	1c5a      	adds	r2, r3, #1
 8008954:	2030      	movs	r0, #48	@ 0x30
 8008956:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800895a:	4422      	add	r2, r4
 800895c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008960:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008964:	3302      	adds	r3, #2
 8008966:	e7c7      	b.n	80088f8 <_printf_common+0x58>
 8008968:	2301      	movs	r3, #1
 800896a:	4622      	mov	r2, r4
 800896c:	4641      	mov	r1, r8
 800896e:	4638      	mov	r0, r7
 8008970:	47c8      	blx	r9
 8008972:	3001      	adds	r0, #1
 8008974:	d0e6      	beq.n	8008944 <_printf_common+0xa4>
 8008976:	3601      	adds	r6, #1
 8008978:	e7d9      	b.n	800892e <_printf_common+0x8e>
	...

0800897c <_printf_i>:
 800897c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008980:	7e0f      	ldrb	r7, [r1, #24]
 8008982:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008984:	2f78      	cmp	r7, #120	@ 0x78
 8008986:	4691      	mov	r9, r2
 8008988:	4680      	mov	r8, r0
 800898a:	460c      	mov	r4, r1
 800898c:	469a      	mov	sl, r3
 800898e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008992:	d807      	bhi.n	80089a4 <_printf_i+0x28>
 8008994:	2f62      	cmp	r7, #98	@ 0x62
 8008996:	d80a      	bhi.n	80089ae <_printf_i+0x32>
 8008998:	2f00      	cmp	r7, #0
 800899a:	f000 80d1 	beq.w	8008b40 <_printf_i+0x1c4>
 800899e:	2f58      	cmp	r7, #88	@ 0x58
 80089a0:	f000 80b8 	beq.w	8008b14 <_printf_i+0x198>
 80089a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80089ac:	e03a      	b.n	8008a24 <_printf_i+0xa8>
 80089ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80089b2:	2b15      	cmp	r3, #21
 80089b4:	d8f6      	bhi.n	80089a4 <_printf_i+0x28>
 80089b6:	a101      	add	r1, pc, #4	@ (adr r1, 80089bc <_printf_i+0x40>)
 80089b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089bc:	08008a15 	.word	0x08008a15
 80089c0:	08008a29 	.word	0x08008a29
 80089c4:	080089a5 	.word	0x080089a5
 80089c8:	080089a5 	.word	0x080089a5
 80089cc:	080089a5 	.word	0x080089a5
 80089d0:	080089a5 	.word	0x080089a5
 80089d4:	08008a29 	.word	0x08008a29
 80089d8:	080089a5 	.word	0x080089a5
 80089dc:	080089a5 	.word	0x080089a5
 80089e0:	080089a5 	.word	0x080089a5
 80089e4:	080089a5 	.word	0x080089a5
 80089e8:	08008b27 	.word	0x08008b27
 80089ec:	08008a53 	.word	0x08008a53
 80089f0:	08008ae1 	.word	0x08008ae1
 80089f4:	080089a5 	.word	0x080089a5
 80089f8:	080089a5 	.word	0x080089a5
 80089fc:	08008b49 	.word	0x08008b49
 8008a00:	080089a5 	.word	0x080089a5
 8008a04:	08008a53 	.word	0x08008a53
 8008a08:	080089a5 	.word	0x080089a5
 8008a0c:	080089a5 	.word	0x080089a5
 8008a10:	08008ae9 	.word	0x08008ae9
 8008a14:	6833      	ldr	r3, [r6, #0]
 8008a16:	1d1a      	adds	r2, r3, #4
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	6032      	str	r2, [r6, #0]
 8008a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a24:	2301      	movs	r3, #1
 8008a26:	e09c      	b.n	8008b62 <_printf_i+0x1e6>
 8008a28:	6833      	ldr	r3, [r6, #0]
 8008a2a:	6820      	ldr	r0, [r4, #0]
 8008a2c:	1d19      	adds	r1, r3, #4
 8008a2e:	6031      	str	r1, [r6, #0]
 8008a30:	0606      	lsls	r6, r0, #24
 8008a32:	d501      	bpl.n	8008a38 <_printf_i+0xbc>
 8008a34:	681d      	ldr	r5, [r3, #0]
 8008a36:	e003      	b.n	8008a40 <_printf_i+0xc4>
 8008a38:	0645      	lsls	r5, r0, #25
 8008a3a:	d5fb      	bpl.n	8008a34 <_printf_i+0xb8>
 8008a3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a40:	2d00      	cmp	r5, #0
 8008a42:	da03      	bge.n	8008a4c <_printf_i+0xd0>
 8008a44:	232d      	movs	r3, #45	@ 0x2d
 8008a46:	426d      	negs	r5, r5
 8008a48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a4c:	4858      	ldr	r0, [pc, #352]	@ (8008bb0 <_printf_i+0x234>)
 8008a4e:	230a      	movs	r3, #10
 8008a50:	e011      	b.n	8008a76 <_printf_i+0xfa>
 8008a52:	6821      	ldr	r1, [r4, #0]
 8008a54:	6833      	ldr	r3, [r6, #0]
 8008a56:	0608      	lsls	r0, r1, #24
 8008a58:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a5c:	d402      	bmi.n	8008a64 <_printf_i+0xe8>
 8008a5e:	0649      	lsls	r1, r1, #25
 8008a60:	bf48      	it	mi
 8008a62:	b2ad      	uxthmi	r5, r5
 8008a64:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a66:	4852      	ldr	r0, [pc, #328]	@ (8008bb0 <_printf_i+0x234>)
 8008a68:	6033      	str	r3, [r6, #0]
 8008a6a:	bf14      	ite	ne
 8008a6c:	230a      	movne	r3, #10
 8008a6e:	2308      	moveq	r3, #8
 8008a70:	2100      	movs	r1, #0
 8008a72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008a76:	6866      	ldr	r6, [r4, #4]
 8008a78:	60a6      	str	r6, [r4, #8]
 8008a7a:	2e00      	cmp	r6, #0
 8008a7c:	db05      	blt.n	8008a8a <_printf_i+0x10e>
 8008a7e:	6821      	ldr	r1, [r4, #0]
 8008a80:	432e      	orrs	r6, r5
 8008a82:	f021 0104 	bic.w	r1, r1, #4
 8008a86:	6021      	str	r1, [r4, #0]
 8008a88:	d04b      	beq.n	8008b22 <_printf_i+0x1a6>
 8008a8a:	4616      	mov	r6, r2
 8008a8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a90:	fb03 5711 	mls	r7, r3, r1, r5
 8008a94:	5dc7      	ldrb	r7, [r0, r7]
 8008a96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a9a:	462f      	mov	r7, r5
 8008a9c:	42bb      	cmp	r3, r7
 8008a9e:	460d      	mov	r5, r1
 8008aa0:	d9f4      	bls.n	8008a8c <_printf_i+0x110>
 8008aa2:	2b08      	cmp	r3, #8
 8008aa4:	d10b      	bne.n	8008abe <_printf_i+0x142>
 8008aa6:	6823      	ldr	r3, [r4, #0]
 8008aa8:	07df      	lsls	r7, r3, #31
 8008aaa:	d508      	bpl.n	8008abe <_printf_i+0x142>
 8008aac:	6923      	ldr	r3, [r4, #16]
 8008aae:	6861      	ldr	r1, [r4, #4]
 8008ab0:	4299      	cmp	r1, r3
 8008ab2:	bfde      	ittt	le
 8008ab4:	2330      	movle	r3, #48	@ 0x30
 8008ab6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008aba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008abe:	1b92      	subs	r2, r2, r6
 8008ac0:	6122      	str	r2, [r4, #16]
 8008ac2:	f8cd a000 	str.w	sl, [sp]
 8008ac6:	464b      	mov	r3, r9
 8008ac8:	aa03      	add	r2, sp, #12
 8008aca:	4621      	mov	r1, r4
 8008acc:	4640      	mov	r0, r8
 8008ace:	f7ff fee7 	bl	80088a0 <_printf_common>
 8008ad2:	3001      	adds	r0, #1
 8008ad4:	d14a      	bne.n	8008b6c <_printf_i+0x1f0>
 8008ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8008ada:	b004      	add	sp, #16
 8008adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ae0:	6823      	ldr	r3, [r4, #0]
 8008ae2:	f043 0320 	orr.w	r3, r3, #32
 8008ae6:	6023      	str	r3, [r4, #0]
 8008ae8:	4832      	ldr	r0, [pc, #200]	@ (8008bb4 <_printf_i+0x238>)
 8008aea:	2778      	movs	r7, #120	@ 0x78
 8008aec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008af0:	6823      	ldr	r3, [r4, #0]
 8008af2:	6831      	ldr	r1, [r6, #0]
 8008af4:	061f      	lsls	r7, r3, #24
 8008af6:	f851 5b04 	ldr.w	r5, [r1], #4
 8008afa:	d402      	bmi.n	8008b02 <_printf_i+0x186>
 8008afc:	065f      	lsls	r7, r3, #25
 8008afe:	bf48      	it	mi
 8008b00:	b2ad      	uxthmi	r5, r5
 8008b02:	6031      	str	r1, [r6, #0]
 8008b04:	07d9      	lsls	r1, r3, #31
 8008b06:	bf44      	itt	mi
 8008b08:	f043 0320 	orrmi.w	r3, r3, #32
 8008b0c:	6023      	strmi	r3, [r4, #0]
 8008b0e:	b11d      	cbz	r5, 8008b18 <_printf_i+0x19c>
 8008b10:	2310      	movs	r3, #16
 8008b12:	e7ad      	b.n	8008a70 <_printf_i+0xf4>
 8008b14:	4826      	ldr	r0, [pc, #152]	@ (8008bb0 <_printf_i+0x234>)
 8008b16:	e7e9      	b.n	8008aec <_printf_i+0x170>
 8008b18:	6823      	ldr	r3, [r4, #0]
 8008b1a:	f023 0320 	bic.w	r3, r3, #32
 8008b1e:	6023      	str	r3, [r4, #0]
 8008b20:	e7f6      	b.n	8008b10 <_printf_i+0x194>
 8008b22:	4616      	mov	r6, r2
 8008b24:	e7bd      	b.n	8008aa2 <_printf_i+0x126>
 8008b26:	6833      	ldr	r3, [r6, #0]
 8008b28:	6825      	ldr	r5, [r4, #0]
 8008b2a:	6961      	ldr	r1, [r4, #20]
 8008b2c:	1d18      	adds	r0, r3, #4
 8008b2e:	6030      	str	r0, [r6, #0]
 8008b30:	062e      	lsls	r6, r5, #24
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	d501      	bpl.n	8008b3a <_printf_i+0x1be>
 8008b36:	6019      	str	r1, [r3, #0]
 8008b38:	e002      	b.n	8008b40 <_printf_i+0x1c4>
 8008b3a:	0668      	lsls	r0, r5, #25
 8008b3c:	d5fb      	bpl.n	8008b36 <_printf_i+0x1ba>
 8008b3e:	8019      	strh	r1, [r3, #0]
 8008b40:	2300      	movs	r3, #0
 8008b42:	6123      	str	r3, [r4, #16]
 8008b44:	4616      	mov	r6, r2
 8008b46:	e7bc      	b.n	8008ac2 <_printf_i+0x146>
 8008b48:	6833      	ldr	r3, [r6, #0]
 8008b4a:	1d1a      	adds	r2, r3, #4
 8008b4c:	6032      	str	r2, [r6, #0]
 8008b4e:	681e      	ldr	r6, [r3, #0]
 8008b50:	6862      	ldr	r2, [r4, #4]
 8008b52:	2100      	movs	r1, #0
 8008b54:	4630      	mov	r0, r6
 8008b56:	f7f7 fb43 	bl	80001e0 <memchr>
 8008b5a:	b108      	cbz	r0, 8008b60 <_printf_i+0x1e4>
 8008b5c:	1b80      	subs	r0, r0, r6
 8008b5e:	6060      	str	r0, [r4, #4]
 8008b60:	6863      	ldr	r3, [r4, #4]
 8008b62:	6123      	str	r3, [r4, #16]
 8008b64:	2300      	movs	r3, #0
 8008b66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b6a:	e7aa      	b.n	8008ac2 <_printf_i+0x146>
 8008b6c:	6923      	ldr	r3, [r4, #16]
 8008b6e:	4632      	mov	r2, r6
 8008b70:	4649      	mov	r1, r9
 8008b72:	4640      	mov	r0, r8
 8008b74:	47d0      	blx	sl
 8008b76:	3001      	adds	r0, #1
 8008b78:	d0ad      	beq.n	8008ad6 <_printf_i+0x15a>
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	079b      	lsls	r3, r3, #30
 8008b7e:	d413      	bmi.n	8008ba8 <_printf_i+0x22c>
 8008b80:	68e0      	ldr	r0, [r4, #12]
 8008b82:	9b03      	ldr	r3, [sp, #12]
 8008b84:	4298      	cmp	r0, r3
 8008b86:	bfb8      	it	lt
 8008b88:	4618      	movlt	r0, r3
 8008b8a:	e7a6      	b.n	8008ada <_printf_i+0x15e>
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	4632      	mov	r2, r6
 8008b90:	4649      	mov	r1, r9
 8008b92:	4640      	mov	r0, r8
 8008b94:	47d0      	blx	sl
 8008b96:	3001      	adds	r0, #1
 8008b98:	d09d      	beq.n	8008ad6 <_printf_i+0x15a>
 8008b9a:	3501      	adds	r5, #1
 8008b9c:	68e3      	ldr	r3, [r4, #12]
 8008b9e:	9903      	ldr	r1, [sp, #12]
 8008ba0:	1a5b      	subs	r3, r3, r1
 8008ba2:	42ab      	cmp	r3, r5
 8008ba4:	dcf2      	bgt.n	8008b8c <_printf_i+0x210>
 8008ba6:	e7eb      	b.n	8008b80 <_printf_i+0x204>
 8008ba8:	2500      	movs	r5, #0
 8008baa:	f104 0619 	add.w	r6, r4, #25
 8008bae:	e7f5      	b.n	8008b9c <_printf_i+0x220>
 8008bb0:	0800c088 	.word	0x0800c088
 8008bb4:	0800c099 	.word	0x0800c099

08008bb8 <_scanf_float>:
 8008bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bbc:	b087      	sub	sp, #28
 8008bbe:	4691      	mov	r9, r2
 8008bc0:	9303      	str	r3, [sp, #12]
 8008bc2:	688b      	ldr	r3, [r1, #8]
 8008bc4:	1e5a      	subs	r2, r3, #1
 8008bc6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008bca:	bf81      	itttt	hi
 8008bcc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008bd0:	eb03 0b05 	addhi.w	fp, r3, r5
 8008bd4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008bd8:	608b      	strhi	r3, [r1, #8]
 8008bda:	680b      	ldr	r3, [r1, #0]
 8008bdc:	460a      	mov	r2, r1
 8008bde:	f04f 0500 	mov.w	r5, #0
 8008be2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008be6:	f842 3b1c 	str.w	r3, [r2], #28
 8008bea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008bee:	4680      	mov	r8, r0
 8008bf0:	460c      	mov	r4, r1
 8008bf2:	bf98      	it	ls
 8008bf4:	f04f 0b00 	movls.w	fp, #0
 8008bf8:	9201      	str	r2, [sp, #4]
 8008bfa:	4616      	mov	r6, r2
 8008bfc:	46aa      	mov	sl, r5
 8008bfe:	462f      	mov	r7, r5
 8008c00:	9502      	str	r5, [sp, #8]
 8008c02:	68a2      	ldr	r2, [r4, #8]
 8008c04:	b15a      	cbz	r2, 8008c1e <_scanf_float+0x66>
 8008c06:	f8d9 3000 	ldr.w	r3, [r9]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	2b4e      	cmp	r3, #78	@ 0x4e
 8008c0e:	d863      	bhi.n	8008cd8 <_scanf_float+0x120>
 8008c10:	2b40      	cmp	r3, #64	@ 0x40
 8008c12:	d83b      	bhi.n	8008c8c <_scanf_float+0xd4>
 8008c14:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008c18:	b2c8      	uxtb	r0, r1
 8008c1a:	280e      	cmp	r0, #14
 8008c1c:	d939      	bls.n	8008c92 <_scanf_float+0xda>
 8008c1e:	b11f      	cbz	r7, 8008c28 <_scanf_float+0x70>
 8008c20:	6823      	ldr	r3, [r4, #0]
 8008c22:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c26:	6023      	str	r3, [r4, #0]
 8008c28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c2c:	f1ba 0f01 	cmp.w	sl, #1
 8008c30:	f200 8114 	bhi.w	8008e5c <_scanf_float+0x2a4>
 8008c34:	9b01      	ldr	r3, [sp, #4]
 8008c36:	429e      	cmp	r6, r3
 8008c38:	f200 8105 	bhi.w	8008e46 <_scanf_float+0x28e>
 8008c3c:	2001      	movs	r0, #1
 8008c3e:	b007      	add	sp, #28
 8008c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c44:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008c48:	2a0d      	cmp	r2, #13
 8008c4a:	d8e8      	bhi.n	8008c1e <_scanf_float+0x66>
 8008c4c:	a101      	add	r1, pc, #4	@ (adr r1, 8008c54 <_scanf_float+0x9c>)
 8008c4e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008c52:	bf00      	nop
 8008c54:	08008d9d 	.word	0x08008d9d
 8008c58:	08008c1f 	.word	0x08008c1f
 8008c5c:	08008c1f 	.word	0x08008c1f
 8008c60:	08008c1f 	.word	0x08008c1f
 8008c64:	08008df9 	.word	0x08008df9
 8008c68:	08008dd3 	.word	0x08008dd3
 8008c6c:	08008c1f 	.word	0x08008c1f
 8008c70:	08008c1f 	.word	0x08008c1f
 8008c74:	08008dab 	.word	0x08008dab
 8008c78:	08008c1f 	.word	0x08008c1f
 8008c7c:	08008c1f 	.word	0x08008c1f
 8008c80:	08008c1f 	.word	0x08008c1f
 8008c84:	08008c1f 	.word	0x08008c1f
 8008c88:	08008d67 	.word	0x08008d67
 8008c8c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008c90:	e7da      	b.n	8008c48 <_scanf_float+0x90>
 8008c92:	290e      	cmp	r1, #14
 8008c94:	d8c3      	bhi.n	8008c1e <_scanf_float+0x66>
 8008c96:	a001      	add	r0, pc, #4	@ (adr r0, 8008c9c <_scanf_float+0xe4>)
 8008c98:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008c9c:	08008d57 	.word	0x08008d57
 8008ca0:	08008c1f 	.word	0x08008c1f
 8008ca4:	08008d57 	.word	0x08008d57
 8008ca8:	08008de7 	.word	0x08008de7
 8008cac:	08008c1f 	.word	0x08008c1f
 8008cb0:	08008cf9 	.word	0x08008cf9
 8008cb4:	08008d3d 	.word	0x08008d3d
 8008cb8:	08008d3d 	.word	0x08008d3d
 8008cbc:	08008d3d 	.word	0x08008d3d
 8008cc0:	08008d3d 	.word	0x08008d3d
 8008cc4:	08008d3d 	.word	0x08008d3d
 8008cc8:	08008d3d 	.word	0x08008d3d
 8008ccc:	08008d3d 	.word	0x08008d3d
 8008cd0:	08008d3d 	.word	0x08008d3d
 8008cd4:	08008d3d 	.word	0x08008d3d
 8008cd8:	2b6e      	cmp	r3, #110	@ 0x6e
 8008cda:	d809      	bhi.n	8008cf0 <_scanf_float+0x138>
 8008cdc:	2b60      	cmp	r3, #96	@ 0x60
 8008cde:	d8b1      	bhi.n	8008c44 <_scanf_float+0x8c>
 8008ce0:	2b54      	cmp	r3, #84	@ 0x54
 8008ce2:	d07b      	beq.n	8008ddc <_scanf_float+0x224>
 8008ce4:	2b59      	cmp	r3, #89	@ 0x59
 8008ce6:	d19a      	bne.n	8008c1e <_scanf_float+0x66>
 8008ce8:	2d07      	cmp	r5, #7
 8008cea:	d198      	bne.n	8008c1e <_scanf_float+0x66>
 8008cec:	2508      	movs	r5, #8
 8008cee:	e02f      	b.n	8008d50 <_scanf_float+0x198>
 8008cf0:	2b74      	cmp	r3, #116	@ 0x74
 8008cf2:	d073      	beq.n	8008ddc <_scanf_float+0x224>
 8008cf4:	2b79      	cmp	r3, #121	@ 0x79
 8008cf6:	e7f6      	b.n	8008ce6 <_scanf_float+0x12e>
 8008cf8:	6821      	ldr	r1, [r4, #0]
 8008cfa:	05c8      	lsls	r0, r1, #23
 8008cfc:	d51e      	bpl.n	8008d3c <_scanf_float+0x184>
 8008cfe:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008d02:	6021      	str	r1, [r4, #0]
 8008d04:	3701      	adds	r7, #1
 8008d06:	f1bb 0f00 	cmp.w	fp, #0
 8008d0a:	d003      	beq.n	8008d14 <_scanf_float+0x15c>
 8008d0c:	3201      	adds	r2, #1
 8008d0e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d12:	60a2      	str	r2, [r4, #8]
 8008d14:	68a3      	ldr	r3, [r4, #8]
 8008d16:	3b01      	subs	r3, #1
 8008d18:	60a3      	str	r3, [r4, #8]
 8008d1a:	6923      	ldr	r3, [r4, #16]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	6123      	str	r3, [r4, #16]
 8008d20:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008d24:	3b01      	subs	r3, #1
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	f8c9 3004 	str.w	r3, [r9, #4]
 8008d2c:	f340 8082 	ble.w	8008e34 <_scanf_float+0x27c>
 8008d30:	f8d9 3000 	ldr.w	r3, [r9]
 8008d34:	3301      	adds	r3, #1
 8008d36:	f8c9 3000 	str.w	r3, [r9]
 8008d3a:	e762      	b.n	8008c02 <_scanf_float+0x4a>
 8008d3c:	eb1a 0105 	adds.w	r1, sl, r5
 8008d40:	f47f af6d 	bne.w	8008c1e <_scanf_float+0x66>
 8008d44:	6822      	ldr	r2, [r4, #0]
 8008d46:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008d4a:	6022      	str	r2, [r4, #0]
 8008d4c:	460d      	mov	r5, r1
 8008d4e:	468a      	mov	sl, r1
 8008d50:	f806 3b01 	strb.w	r3, [r6], #1
 8008d54:	e7de      	b.n	8008d14 <_scanf_float+0x15c>
 8008d56:	6822      	ldr	r2, [r4, #0]
 8008d58:	0610      	lsls	r0, r2, #24
 8008d5a:	f57f af60 	bpl.w	8008c1e <_scanf_float+0x66>
 8008d5e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008d62:	6022      	str	r2, [r4, #0]
 8008d64:	e7f4      	b.n	8008d50 <_scanf_float+0x198>
 8008d66:	f1ba 0f00 	cmp.w	sl, #0
 8008d6a:	d10c      	bne.n	8008d86 <_scanf_float+0x1ce>
 8008d6c:	b977      	cbnz	r7, 8008d8c <_scanf_float+0x1d4>
 8008d6e:	6822      	ldr	r2, [r4, #0]
 8008d70:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008d74:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008d78:	d108      	bne.n	8008d8c <_scanf_float+0x1d4>
 8008d7a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008d7e:	6022      	str	r2, [r4, #0]
 8008d80:	f04f 0a01 	mov.w	sl, #1
 8008d84:	e7e4      	b.n	8008d50 <_scanf_float+0x198>
 8008d86:	f1ba 0f02 	cmp.w	sl, #2
 8008d8a:	d050      	beq.n	8008e2e <_scanf_float+0x276>
 8008d8c:	2d01      	cmp	r5, #1
 8008d8e:	d002      	beq.n	8008d96 <_scanf_float+0x1de>
 8008d90:	2d04      	cmp	r5, #4
 8008d92:	f47f af44 	bne.w	8008c1e <_scanf_float+0x66>
 8008d96:	3501      	adds	r5, #1
 8008d98:	b2ed      	uxtb	r5, r5
 8008d9a:	e7d9      	b.n	8008d50 <_scanf_float+0x198>
 8008d9c:	f1ba 0f01 	cmp.w	sl, #1
 8008da0:	f47f af3d 	bne.w	8008c1e <_scanf_float+0x66>
 8008da4:	f04f 0a02 	mov.w	sl, #2
 8008da8:	e7d2      	b.n	8008d50 <_scanf_float+0x198>
 8008daa:	b975      	cbnz	r5, 8008dca <_scanf_float+0x212>
 8008dac:	2f00      	cmp	r7, #0
 8008dae:	f47f af37 	bne.w	8008c20 <_scanf_float+0x68>
 8008db2:	6822      	ldr	r2, [r4, #0]
 8008db4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008db8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008dbc:	f040 8103 	bne.w	8008fc6 <_scanf_float+0x40e>
 8008dc0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008dc4:	6022      	str	r2, [r4, #0]
 8008dc6:	2501      	movs	r5, #1
 8008dc8:	e7c2      	b.n	8008d50 <_scanf_float+0x198>
 8008dca:	2d03      	cmp	r5, #3
 8008dcc:	d0e3      	beq.n	8008d96 <_scanf_float+0x1de>
 8008dce:	2d05      	cmp	r5, #5
 8008dd0:	e7df      	b.n	8008d92 <_scanf_float+0x1da>
 8008dd2:	2d02      	cmp	r5, #2
 8008dd4:	f47f af23 	bne.w	8008c1e <_scanf_float+0x66>
 8008dd8:	2503      	movs	r5, #3
 8008dda:	e7b9      	b.n	8008d50 <_scanf_float+0x198>
 8008ddc:	2d06      	cmp	r5, #6
 8008dde:	f47f af1e 	bne.w	8008c1e <_scanf_float+0x66>
 8008de2:	2507      	movs	r5, #7
 8008de4:	e7b4      	b.n	8008d50 <_scanf_float+0x198>
 8008de6:	6822      	ldr	r2, [r4, #0]
 8008de8:	0591      	lsls	r1, r2, #22
 8008dea:	f57f af18 	bpl.w	8008c1e <_scanf_float+0x66>
 8008dee:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008df2:	6022      	str	r2, [r4, #0]
 8008df4:	9702      	str	r7, [sp, #8]
 8008df6:	e7ab      	b.n	8008d50 <_scanf_float+0x198>
 8008df8:	6822      	ldr	r2, [r4, #0]
 8008dfa:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008dfe:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008e02:	d005      	beq.n	8008e10 <_scanf_float+0x258>
 8008e04:	0550      	lsls	r0, r2, #21
 8008e06:	f57f af0a 	bpl.w	8008c1e <_scanf_float+0x66>
 8008e0a:	2f00      	cmp	r7, #0
 8008e0c:	f000 80db 	beq.w	8008fc6 <_scanf_float+0x40e>
 8008e10:	0591      	lsls	r1, r2, #22
 8008e12:	bf58      	it	pl
 8008e14:	9902      	ldrpl	r1, [sp, #8]
 8008e16:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008e1a:	bf58      	it	pl
 8008e1c:	1a79      	subpl	r1, r7, r1
 8008e1e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008e22:	bf58      	it	pl
 8008e24:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008e28:	6022      	str	r2, [r4, #0]
 8008e2a:	2700      	movs	r7, #0
 8008e2c:	e790      	b.n	8008d50 <_scanf_float+0x198>
 8008e2e:	f04f 0a03 	mov.w	sl, #3
 8008e32:	e78d      	b.n	8008d50 <_scanf_float+0x198>
 8008e34:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008e38:	4649      	mov	r1, r9
 8008e3a:	4640      	mov	r0, r8
 8008e3c:	4798      	blx	r3
 8008e3e:	2800      	cmp	r0, #0
 8008e40:	f43f aedf 	beq.w	8008c02 <_scanf_float+0x4a>
 8008e44:	e6eb      	b.n	8008c1e <_scanf_float+0x66>
 8008e46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e4e:	464a      	mov	r2, r9
 8008e50:	4640      	mov	r0, r8
 8008e52:	4798      	blx	r3
 8008e54:	6923      	ldr	r3, [r4, #16]
 8008e56:	3b01      	subs	r3, #1
 8008e58:	6123      	str	r3, [r4, #16]
 8008e5a:	e6eb      	b.n	8008c34 <_scanf_float+0x7c>
 8008e5c:	1e6b      	subs	r3, r5, #1
 8008e5e:	2b06      	cmp	r3, #6
 8008e60:	d824      	bhi.n	8008eac <_scanf_float+0x2f4>
 8008e62:	2d02      	cmp	r5, #2
 8008e64:	d836      	bhi.n	8008ed4 <_scanf_float+0x31c>
 8008e66:	9b01      	ldr	r3, [sp, #4]
 8008e68:	429e      	cmp	r6, r3
 8008e6a:	f67f aee7 	bls.w	8008c3c <_scanf_float+0x84>
 8008e6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e76:	464a      	mov	r2, r9
 8008e78:	4640      	mov	r0, r8
 8008e7a:	4798      	blx	r3
 8008e7c:	6923      	ldr	r3, [r4, #16]
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	6123      	str	r3, [r4, #16]
 8008e82:	e7f0      	b.n	8008e66 <_scanf_float+0x2ae>
 8008e84:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008e88:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008e8c:	464a      	mov	r2, r9
 8008e8e:	4640      	mov	r0, r8
 8008e90:	4798      	blx	r3
 8008e92:	6923      	ldr	r3, [r4, #16]
 8008e94:	3b01      	subs	r3, #1
 8008e96:	6123      	str	r3, [r4, #16]
 8008e98:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e9c:	fa5f fa8a 	uxtb.w	sl, sl
 8008ea0:	f1ba 0f02 	cmp.w	sl, #2
 8008ea4:	d1ee      	bne.n	8008e84 <_scanf_float+0x2cc>
 8008ea6:	3d03      	subs	r5, #3
 8008ea8:	b2ed      	uxtb	r5, r5
 8008eaa:	1b76      	subs	r6, r6, r5
 8008eac:	6823      	ldr	r3, [r4, #0]
 8008eae:	05da      	lsls	r2, r3, #23
 8008eb0:	d530      	bpl.n	8008f14 <_scanf_float+0x35c>
 8008eb2:	055b      	lsls	r3, r3, #21
 8008eb4:	d511      	bpl.n	8008eda <_scanf_float+0x322>
 8008eb6:	9b01      	ldr	r3, [sp, #4]
 8008eb8:	429e      	cmp	r6, r3
 8008eba:	f67f aebf 	bls.w	8008c3c <_scanf_float+0x84>
 8008ebe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ec2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ec6:	464a      	mov	r2, r9
 8008ec8:	4640      	mov	r0, r8
 8008eca:	4798      	blx	r3
 8008ecc:	6923      	ldr	r3, [r4, #16]
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	6123      	str	r3, [r4, #16]
 8008ed2:	e7f0      	b.n	8008eb6 <_scanf_float+0x2fe>
 8008ed4:	46aa      	mov	sl, r5
 8008ed6:	46b3      	mov	fp, r6
 8008ed8:	e7de      	b.n	8008e98 <_scanf_float+0x2e0>
 8008eda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008ede:	6923      	ldr	r3, [r4, #16]
 8008ee0:	2965      	cmp	r1, #101	@ 0x65
 8008ee2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ee6:	f106 35ff 	add.w	r5, r6, #4294967295
 8008eea:	6123      	str	r3, [r4, #16]
 8008eec:	d00c      	beq.n	8008f08 <_scanf_float+0x350>
 8008eee:	2945      	cmp	r1, #69	@ 0x45
 8008ef0:	d00a      	beq.n	8008f08 <_scanf_float+0x350>
 8008ef2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008ef6:	464a      	mov	r2, r9
 8008ef8:	4640      	mov	r0, r8
 8008efa:	4798      	blx	r3
 8008efc:	6923      	ldr	r3, [r4, #16]
 8008efe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008f02:	3b01      	subs	r3, #1
 8008f04:	1eb5      	subs	r5, r6, #2
 8008f06:	6123      	str	r3, [r4, #16]
 8008f08:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008f0c:	464a      	mov	r2, r9
 8008f0e:	4640      	mov	r0, r8
 8008f10:	4798      	blx	r3
 8008f12:	462e      	mov	r6, r5
 8008f14:	6822      	ldr	r2, [r4, #0]
 8008f16:	f012 0210 	ands.w	r2, r2, #16
 8008f1a:	d001      	beq.n	8008f20 <_scanf_float+0x368>
 8008f1c:	2000      	movs	r0, #0
 8008f1e:	e68e      	b.n	8008c3e <_scanf_float+0x86>
 8008f20:	7032      	strb	r2, [r6, #0]
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f2c:	d125      	bne.n	8008f7a <_scanf_float+0x3c2>
 8008f2e:	9b02      	ldr	r3, [sp, #8]
 8008f30:	429f      	cmp	r7, r3
 8008f32:	d00a      	beq.n	8008f4a <_scanf_float+0x392>
 8008f34:	1bda      	subs	r2, r3, r7
 8008f36:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008f3a:	429e      	cmp	r6, r3
 8008f3c:	bf28      	it	cs
 8008f3e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008f42:	4922      	ldr	r1, [pc, #136]	@ (8008fcc <_scanf_float+0x414>)
 8008f44:	4630      	mov	r0, r6
 8008f46:	f000 f907 	bl	8009158 <siprintf>
 8008f4a:	9901      	ldr	r1, [sp, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	4640      	mov	r0, r8
 8008f50:	f7ff f966 	bl	8008220 <_strtod_r>
 8008f54:	9b03      	ldr	r3, [sp, #12]
 8008f56:	6821      	ldr	r1, [r4, #0]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f011 0f02 	tst.w	r1, #2
 8008f5e:	ec57 6b10 	vmov	r6, r7, d0
 8008f62:	f103 0204 	add.w	r2, r3, #4
 8008f66:	d015      	beq.n	8008f94 <_scanf_float+0x3dc>
 8008f68:	9903      	ldr	r1, [sp, #12]
 8008f6a:	600a      	str	r2, [r1, #0]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	e9c3 6700 	strd	r6, r7, [r3]
 8008f72:	68e3      	ldr	r3, [r4, #12]
 8008f74:	3301      	adds	r3, #1
 8008f76:	60e3      	str	r3, [r4, #12]
 8008f78:	e7d0      	b.n	8008f1c <_scanf_float+0x364>
 8008f7a:	9b04      	ldr	r3, [sp, #16]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d0e4      	beq.n	8008f4a <_scanf_float+0x392>
 8008f80:	9905      	ldr	r1, [sp, #20]
 8008f82:	230a      	movs	r3, #10
 8008f84:	3101      	adds	r1, #1
 8008f86:	4640      	mov	r0, r8
 8008f88:	f002 fa4e 	bl	800b428 <_strtol_r>
 8008f8c:	9b04      	ldr	r3, [sp, #16]
 8008f8e:	9e05      	ldr	r6, [sp, #20]
 8008f90:	1ac2      	subs	r2, r0, r3
 8008f92:	e7d0      	b.n	8008f36 <_scanf_float+0x37e>
 8008f94:	f011 0f04 	tst.w	r1, #4
 8008f98:	9903      	ldr	r1, [sp, #12]
 8008f9a:	600a      	str	r2, [r1, #0]
 8008f9c:	d1e6      	bne.n	8008f6c <_scanf_float+0x3b4>
 8008f9e:	681d      	ldr	r5, [r3, #0]
 8008fa0:	4632      	mov	r2, r6
 8008fa2:	463b      	mov	r3, r7
 8008fa4:	4630      	mov	r0, r6
 8008fa6:	4639      	mov	r1, r7
 8008fa8:	f7f7 fdc8 	bl	8000b3c <__aeabi_dcmpun>
 8008fac:	b128      	cbz	r0, 8008fba <_scanf_float+0x402>
 8008fae:	4808      	ldr	r0, [pc, #32]	@ (8008fd0 <_scanf_float+0x418>)
 8008fb0:	f000 fa6a 	bl	8009488 <nanf>
 8008fb4:	ed85 0a00 	vstr	s0, [r5]
 8008fb8:	e7db      	b.n	8008f72 <_scanf_float+0x3ba>
 8008fba:	4630      	mov	r0, r6
 8008fbc:	4639      	mov	r1, r7
 8008fbe:	f7f7 fe1b 	bl	8000bf8 <__aeabi_d2f>
 8008fc2:	6028      	str	r0, [r5, #0]
 8008fc4:	e7d5      	b.n	8008f72 <_scanf_float+0x3ba>
 8008fc6:	2700      	movs	r7, #0
 8008fc8:	e62e      	b.n	8008c28 <_scanf_float+0x70>
 8008fca:	bf00      	nop
 8008fcc:	0800c0aa 	.word	0x0800c0aa
 8008fd0:	0800c249 	.word	0x0800c249

08008fd4 <std>:
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	b510      	push	{r4, lr}
 8008fd8:	4604      	mov	r4, r0
 8008fda:	e9c0 3300 	strd	r3, r3, [r0]
 8008fde:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fe2:	6083      	str	r3, [r0, #8]
 8008fe4:	8181      	strh	r1, [r0, #12]
 8008fe6:	6643      	str	r3, [r0, #100]	@ 0x64
 8008fe8:	81c2      	strh	r2, [r0, #14]
 8008fea:	6183      	str	r3, [r0, #24]
 8008fec:	4619      	mov	r1, r3
 8008fee:	2208      	movs	r2, #8
 8008ff0:	305c      	adds	r0, #92	@ 0x5c
 8008ff2:	f000 f916 	bl	8009222 <memset>
 8008ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800902c <std+0x58>)
 8008ff8:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8009030 <std+0x5c>)
 8008ffc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8009034 <std+0x60>)
 8009000:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009002:	4b0d      	ldr	r3, [pc, #52]	@ (8009038 <std+0x64>)
 8009004:	6323      	str	r3, [r4, #48]	@ 0x30
 8009006:	4b0d      	ldr	r3, [pc, #52]	@ (800903c <std+0x68>)
 8009008:	6224      	str	r4, [r4, #32]
 800900a:	429c      	cmp	r4, r3
 800900c:	d006      	beq.n	800901c <std+0x48>
 800900e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009012:	4294      	cmp	r4, r2
 8009014:	d002      	beq.n	800901c <std+0x48>
 8009016:	33d0      	adds	r3, #208	@ 0xd0
 8009018:	429c      	cmp	r4, r3
 800901a:	d105      	bne.n	8009028 <std+0x54>
 800901c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009024:	f000 ba14 	b.w	8009450 <__retarget_lock_init_recursive>
 8009028:	bd10      	pop	{r4, pc}
 800902a:	bf00      	nop
 800902c:	0800919d 	.word	0x0800919d
 8009030:	080091bf 	.word	0x080091bf
 8009034:	080091f7 	.word	0x080091f7
 8009038:	0800921b 	.word	0x0800921b
 800903c:	200055d8 	.word	0x200055d8

08009040 <stdio_exit_handler>:
 8009040:	4a02      	ldr	r2, [pc, #8]	@ (800904c <stdio_exit_handler+0xc>)
 8009042:	4903      	ldr	r1, [pc, #12]	@ (8009050 <stdio_exit_handler+0x10>)
 8009044:	4803      	ldr	r0, [pc, #12]	@ (8009054 <stdio_exit_handler+0x14>)
 8009046:	f000 b869 	b.w	800911c <_fwalk_sglue>
 800904a:	bf00      	nop
 800904c:	20000010 	.word	0x20000010
 8009050:	0800b7fd 	.word	0x0800b7fd
 8009054:	2000018c 	.word	0x2000018c

08009058 <cleanup_stdio>:
 8009058:	6841      	ldr	r1, [r0, #4]
 800905a:	4b0c      	ldr	r3, [pc, #48]	@ (800908c <cleanup_stdio+0x34>)
 800905c:	4299      	cmp	r1, r3
 800905e:	b510      	push	{r4, lr}
 8009060:	4604      	mov	r4, r0
 8009062:	d001      	beq.n	8009068 <cleanup_stdio+0x10>
 8009064:	f002 fbca 	bl	800b7fc <_fflush_r>
 8009068:	68a1      	ldr	r1, [r4, #8]
 800906a:	4b09      	ldr	r3, [pc, #36]	@ (8009090 <cleanup_stdio+0x38>)
 800906c:	4299      	cmp	r1, r3
 800906e:	d002      	beq.n	8009076 <cleanup_stdio+0x1e>
 8009070:	4620      	mov	r0, r4
 8009072:	f002 fbc3 	bl	800b7fc <_fflush_r>
 8009076:	68e1      	ldr	r1, [r4, #12]
 8009078:	4b06      	ldr	r3, [pc, #24]	@ (8009094 <cleanup_stdio+0x3c>)
 800907a:	4299      	cmp	r1, r3
 800907c:	d004      	beq.n	8009088 <cleanup_stdio+0x30>
 800907e:	4620      	mov	r0, r4
 8009080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009084:	f002 bbba 	b.w	800b7fc <_fflush_r>
 8009088:	bd10      	pop	{r4, pc}
 800908a:	bf00      	nop
 800908c:	200055d8 	.word	0x200055d8
 8009090:	20005640 	.word	0x20005640
 8009094:	200056a8 	.word	0x200056a8

08009098 <global_stdio_init.part.0>:
 8009098:	b510      	push	{r4, lr}
 800909a:	4b0b      	ldr	r3, [pc, #44]	@ (80090c8 <global_stdio_init.part.0+0x30>)
 800909c:	4c0b      	ldr	r4, [pc, #44]	@ (80090cc <global_stdio_init.part.0+0x34>)
 800909e:	4a0c      	ldr	r2, [pc, #48]	@ (80090d0 <global_stdio_init.part.0+0x38>)
 80090a0:	601a      	str	r2, [r3, #0]
 80090a2:	4620      	mov	r0, r4
 80090a4:	2200      	movs	r2, #0
 80090a6:	2104      	movs	r1, #4
 80090a8:	f7ff ff94 	bl	8008fd4 <std>
 80090ac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80090b0:	2201      	movs	r2, #1
 80090b2:	2109      	movs	r1, #9
 80090b4:	f7ff ff8e 	bl	8008fd4 <std>
 80090b8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80090bc:	2202      	movs	r2, #2
 80090be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090c2:	2112      	movs	r1, #18
 80090c4:	f7ff bf86 	b.w	8008fd4 <std>
 80090c8:	20005710 	.word	0x20005710
 80090cc:	200055d8 	.word	0x200055d8
 80090d0:	08009041 	.word	0x08009041

080090d4 <__sfp_lock_acquire>:
 80090d4:	4801      	ldr	r0, [pc, #4]	@ (80090dc <__sfp_lock_acquire+0x8>)
 80090d6:	f000 b9bc 	b.w	8009452 <__retarget_lock_acquire_recursive>
 80090da:	bf00      	nop
 80090dc:	20005719 	.word	0x20005719

080090e0 <__sfp_lock_release>:
 80090e0:	4801      	ldr	r0, [pc, #4]	@ (80090e8 <__sfp_lock_release+0x8>)
 80090e2:	f000 b9b7 	b.w	8009454 <__retarget_lock_release_recursive>
 80090e6:	bf00      	nop
 80090e8:	20005719 	.word	0x20005719

080090ec <__sinit>:
 80090ec:	b510      	push	{r4, lr}
 80090ee:	4604      	mov	r4, r0
 80090f0:	f7ff fff0 	bl	80090d4 <__sfp_lock_acquire>
 80090f4:	6a23      	ldr	r3, [r4, #32]
 80090f6:	b11b      	cbz	r3, 8009100 <__sinit+0x14>
 80090f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090fc:	f7ff bff0 	b.w	80090e0 <__sfp_lock_release>
 8009100:	4b04      	ldr	r3, [pc, #16]	@ (8009114 <__sinit+0x28>)
 8009102:	6223      	str	r3, [r4, #32]
 8009104:	4b04      	ldr	r3, [pc, #16]	@ (8009118 <__sinit+0x2c>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d1f5      	bne.n	80090f8 <__sinit+0xc>
 800910c:	f7ff ffc4 	bl	8009098 <global_stdio_init.part.0>
 8009110:	e7f2      	b.n	80090f8 <__sinit+0xc>
 8009112:	bf00      	nop
 8009114:	08009059 	.word	0x08009059
 8009118:	20005710 	.word	0x20005710

0800911c <_fwalk_sglue>:
 800911c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009120:	4607      	mov	r7, r0
 8009122:	4688      	mov	r8, r1
 8009124:	4614      	mov	r4, r2
 8009126:	2600      	movs	r6, #0
 8009128:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800912c:	f1b9 0901 	subs.w	r9, r9, #1
 8009130:	d505      	bpl.n	800913e <_fwalk_sglue+0x22>
 8009132:	6824      	ldr	r4, [r4, #0]
 8009134:	2c00      	cmp	r4, #0
 8009136:	d1f7      	bne.n	8009128 <_fwalk_sglue+0xc>
 8009138:	4630      	mov	r0, r6
 800913a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800913e:	89ab      	ldrh	r3, [r5, #12]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d907      	bls.n	8009154 <_fwalk_sglue+0x38>
 8009144:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009148:	3301      	adds	r3, #1
 800914a:	d003      	beq.n	8009154 <_fwalk_sglue+0x38>
 800914c:	4629      	mov	r1, r5
 800914e:	4638      	mov	r0, r7
 8009150:	47c0      	blx	r8
 8009152:	4306      	orrs	r6, r0
 8009154:	3568      	adds	r5, #104	@ 0x68
 8009156:	e7e9      	b.n	800912c <_fwalk_sglue+0x10>

08009158 <siprintf>:
 8009158:	b40e      	push	{r1, r2, r3}
 800915a:	b510      	push	{r4, lr}
 800915c:	b09d      	sub	sp, #116	@ 0x74
 800915e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009160:	9002      	str	r0, [sp, #8]
 8009162:	9006      	str	r0, [sp, #24]
 8009164:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009168:	480a      	ldr	r0, [pc, #40]	@ (8009194 <siprintf+0x3c>)
 800916a:	9107      	str	r1, [sp, #28]
 800916c:	9104      	str	r1, [sp, #16]
 800916e:	490a      	ldr	r1, [pc, #40]	@ (8009198 <siprintf+0x40>)
 8009170:	f853 2b04 	ldr.w	r2, [r3], #4
 8009174:	9105      	str	r1, [sp, #20]
 8009176:	2400      	movs	r4, #0
 8009178:	a902      	add	r1, sp, #8
 800917a:	6800      	ldr	r0, [r0, #0]
 800917c:	9301      	str	r3, [sp, #4]
 800917e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009180:	f002 f9bc 	bl	800b4fc <_svfiprintf_r>
 8009184:	9b02      	ldr	r3, [sp, #8]
 8009186:	701c      	strb	r4, [r3, #0]
 8009188:	b01d      	add	sp, #116	@ 0x74
 800918a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800918e:	b003      	add	sp, #12
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	20000188 	.word	0x20000188
 8009198:	ffff0208 	.word	0xffff0208

0800919c <__sread>:
 800919c:	b510      	push	{r4, lr}
 800919e:	460c      	mov	r4, r1
 80091a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091a4:	f000 f906 	bl	80093b4 <_read_r>
 80091a8:	2800      	cmp	r0, #0
 80091aa:	bfab      	itete	ge
 80091ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80091ae:	89a3      	ldrhlt	r3, [r4, #12]
 80091b0:	181b      	addge	r3, r3, r0
 80091b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80091b6:	bfac      	ite	ge
 80091b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80091ba:	81a3      	strhlt	r3, [r4, #12]
 80091bc:	bd10      	pop	{r4, pc}

080091be <__swrite>:
 80091be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091c2:	461f      	mov	r7, r3
 80091c4:	898b      	ldrh	r3, [r1, #12]
 80091c6:	05db      	lsls	r3, r3, #23
 80091c8:	4605      	mov	r5, r0
 80091ca:	460c      	mov	r4, r1
 80091cc:	4616      	mov	r6, r2
 80091ce:	d505      	bpl.n	80091dc <__swrite+0x1e>
 80091d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091d4:	2302      	movs	r3, #2
 80091d6:	2200      	movs	r2, #0
 80091d8:	f000 f8da 	bl	8009390 <_lseek_r>
 80091dc:	89a3      	ldrh	r3, [r4, #12]
 80091de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80091e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80091e6:	81a3      	strh	r3, [r4, #12]
 80091e8:	4632      	mov	r2, r6
 80091ea:	463b      	mov	r3, r7
 80091ec:	4628      	mov	r0, r5
 80091ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80091f2:	f000 b8f1 	b.w	80093d8 <_write_r>

080091f6 <__sseek>:
 80091f6:	b510      	push	{r4, lr}
 80091f8:	460c      	mov	r4, r1
 80091fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091fe:	f000 f8c7 	bl	8009390 <_lseek_r>
 8009202:	1c43      	adds	r3, r0, #1
 8009204:	89a3      	ldrh	r3, [r4, #12]
 8009206:	bf15      	itete	ne
 8009208:	6560      	strne	r0, [r4, #84]	@ 0x54
 800920a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800920e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009212:	81a3      	strheq	r3, [r4, #12]
 8009214:	bf18      	it	ne
 8009216:	81a3      	strhne	r3, [r4, #12]
 8009218:	bd10      	pop	{r4, pc}

0800921a <__sclose>:
 800921a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800921e:	f000 b849 	b.w	80092b4 <_close_r>

08009222 <memset>:
 8009222:	4402      	add	r2, r0
 8009224:	4603      	mov	r3, r0
 8009226:	4293      	cmp	r3, r2
 8009228:	d100      	bne.n	800922c <memset+0xa>
 800922a:	4770      	bx	lr
 800922c:	f803 1b01 	strb.w	r1, [r3], #1
 8009230:	e7f9      	b.n	8009226 <memset+0x4>

08009232 <strncmp>:
 8009232:	b510      	push	{r4, lr}
 8009234:	b16a      	cbz	r2, 8009252 <strncmp+0x20>
 8009236:	3901      	subs	r1, #1
 8009238:	1884      	adds	r4, r0, r2
 800923a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800923e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009242:	429a      	cmp	r2, r3
 8009244:	d103      	bne.n	800924e <strncmp+0x1c>
 8009246:	42a0      	cmp	r0, r4
 8009248:	d001      	beq.n	800924e <strncmp+0x1c>
 800924a:	2a00      	cmp	r2, #0
 800924c:	d1f5      	bne.n	800923a <strncmp+0x8>
 800924e:	1ad0      	subs	r0, r2, r3
 8009250:	bd10      	pop	{r4, pc}
 8009252:	4610      	mov	r0, r2
 8009254:	e7fc      	b.n	8009250 <strncmp+0x1e>

08009256 <__strtok_r>:
 8009256:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009258:	4604      	mov	r4, r0
 800925a:	b908      	cbnz	r0, 8009260 <__strtok_r+0xa>
 800925c:	6814      	ldr	r4, [r2, #0]
 800925e:	b144      	cbz	r4, 8009272 <__strtok_r+0x1c>
 8009260:	4620      	mov	r0, r4
 8009262:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009266:	460f      	mov	r7, r1
 8009268:	f817 6b01 	ldrb.w	r6, [r7], #1
 800926c:	b91e      	cbnz	r6, 8009276 <__strtok_r+0x20>
 800926e:	b965      	cbnz	r5, 800928a <__strtok_r+0x34>
 8009270:	6015      	str	r5, [r2, #0]
 8009272:	2000      	movs	r0, #0
 8009274:	e005      	b.n	8009282 <__strtok_r+0x2c>
 8009276:	42b5      	cmp	r5, r6
 8009278:	d1f6      	bne.n	8009268 <__strtok_r+0x12>
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1f0      	bne.n	8009260 <__strtok_r+0xa>
 800927e:	6014      	str	r4, [r2, #0]
 8009280:	7003      	strb	r3, [r0, #0]
 8009282:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009284:	461c      	mov	r4, r3
 8009286:	e00c      	b.n	80092a2 <__strtok_r+0x4c>
 8009288:	b91d      	cbnz	r5, 8009292 <__strtok_r+0x3c>
 800928a:	4627      	mov	r7, r4
 800928c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009290:	460e      	mov	r6, r1
 8009292:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009296:	42ab      	cmp	r3, r5
 8009298:	d1f6      	bne.n	8009288 <__strtok_r+0x32>
 800929a:	2b00      	cmp	r3, #0
 800929c:	d0f2      	beq.n	8009284 <__strtok_r+0x2e>
 800929e:	2300      	movs	r3, #0
 80092a0:	703b      	strb	r3, [r7, #0]
 80092a2:	6014      	str	r4, [r2, #0]
 80092a4:	e7ed      	b.n	8009282 <__strtok_r+0x2c>

080092a6 <strtok_r>:
 80092a6:	2301      	movs	r3, #1
 80092a8:	f7ff bfd5 	b.w	8009256 <__strtok_r>

080092ac <_localeconv_r>:
 80092ac:	4800      	ldr	r0, [pc, #0]	@ (80092b0 <_localeconv_r+0x4>)
 80092ae:	4770      	bx	lr
 80092b0:	2000010c 	.word	0x2000010c

080092b4 <_close_r>:
 80092b4:	b538      	push	{r3, r4, r5, lr}
 80092b6:	4d06      	ldr	r5, [pc, #24]	@ (80092d0 <_close_r+0x1c>)
 80092b8:	2300      	movs	r3, #0
 80092ba:	4604      	mov	r4, r0
 80092bc:	4608      	mov	r0, r1
 80092be:	602b      	str	r3, [r5, #0]
 80092c0:	f7f8 fc8a 	bl	8001bd8 <_close>
 80092c4:	1c43      	adds	r3, r0, #1
 80092c6:	d102      	bne.n	80092ce <_close_r+0x1a>
 80092c8:	682b      	ldr	r3, [r5, #0]
 80092ca:	b103      	cbz	r3, 80092ce <_close_r+0x1a>
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	bd38      	pop	{r3, r4, r5, pc}
 80092d0:	20005714 	.word	0x20005714

080092d4 <_reclaim_reent>:
 80092d4:	4b2d      	ldr	r3, [pc, #180]	@ (800938c <_reclaim_reent+0xb8>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4283      	cmp	r3, r0
 80092da:	b570      	push	{r4, r5, r6, lr}
 80092dc:	4604      	mov	r4, r0
 80092de:	d053      	beq.n	8009388 <_reclaim_reent+0xb4>
 80092e0:	69c3      	ldr	r3, [r0, #28]
 80092e2:	b31b      	cbz	r3, 800932c <_reclaim_reent+0x58>
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	b163      	cbz	r3, 8009302 <_reclaim_reent+0x2e>
 80092e8:	2500      	movs	r5, #0
 80092ea:	69e3      	ldr	r3, [r4, #28]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	5959      	ldr	r1, [r3, r5]
 80092f0:	b9b1      	cbnz	r1, 8009320 <_reclaim_reent+0x4c>
 80092f2:	3504      	adds	r5, #4
 80092f4:	2d80      	cmp	r5, #128	@ 0x80
 80092f6:	d1f8      	bne.n	80092ea <_reclaim_reent+0x16>
 80092f8:	69e3      	ldr	r3, [r4, #28]
 80092fa:	4620      	mov	r0, r4
 80092fc:	68d9      	ldr	r1, [r3, #12]
 80092fe:	f000 ff23 	bl	800a148 <_free_r>
 8009302:	69e3      	ldr	r3, [r4, #28]
 8009304:	6819      	ldr	r1, [r3, #0]
 8009306:	b111      	cbz	r1, 800930e <_reclaim_reent+0x3a>
 8009308:	4620      	mov	r0, r4
 800930a:	f000 ff1d 	bl	800a148 <_free_r>
 800930e:	69e3      	ldr	r3, [r4, #28]
 8009310:	689d      	ldr	r5, [r3, #8]
 8009312:	b15d      	cbz	r5, 800932c <_reclaim_reent+0x58>
 8009314:	4629      	mov	r1, r5
 8009316:	4620      	mov	r0, r4
 8009318:	682d      	ldr	r5, [r5, #0]
 800931a:	f000 ff15 	bl	800a148 <_free_r>
 800931e:	e7f8      	b.n	8009312 <_reclaim_reent+0x3e>
 8009320:	680e      	ldr	r6, [r1, #0]
 8009322:	4620      	mov	r0, r4
 8009324:	f000 ff10 	bl	800a148 <_free_r>
 8009328:	4631      	mov	r1, r6
 800932a:	e7e1      	b.n	80092f0 <_reclaim_reent+0x1c>
 800932c:	6961      	ldr	r1, [r4, #20]
 800932e:	b111      	cbz	r1, 8009336 <_reclaim_reent+0x62>
 8009330:	4620      	mov	r0, r4
 8009332:	f000 ff09 	bl	800a148 <_free_r>
 8009336:	69e1      	ldr	r1, [r4, #28]
 8009338:	b111      	cbz	r1, 8009340 <_reclaim_reent+0x6c>
 800933a:	4620      	mov	r0, r4
 800933c:	f000 ff04 	bl	800a148 <_free_r>
 8009340:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009342:	b111      	cbz	r1, 800934a <_reclaim_reent+0x76>
 8009344:	4620      	mov	r0, r4
 8009346:	f000 feff 	bl	800a148 <_free_r>
 800934a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800934c:	b111      	cbz	r1, 8009354 <_reclaim_reent+0x80>
 800934e:	4620      	mov	r0, r4
 8009350:	f000 fefa 	bl	800a148 <_free_r>
 8009354:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009356:	b111      	cbz	r1, 800935e <_reclaim_reent+0x8a>
 8009358:	4620      	mov	r0, r4
 800935a:	f000 fef5 	bl	800a148 <_free_r>
 800935e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009360:	b111      	cbz	r1, 8009368 <_reclaim_reent+0x94>
 8009362:	4620      	mov	r0, r4
 8009364:	f000 fef0 	bl	800a148 <_free_r>
 8009368:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800936a:	b111      	cbz	r1, 8009372 <_reclaim_reent+0x9e>
 800936c:	4620      	mov	r0, r4
 800936e:	f000 feeb 	bl	800a148 <_free_r>
 8009372:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009374:	b111      	cbz	r1, 800937c <_reclaim_reent+0xa8>
 8009376:	4620      	mov	r0, r4
 8009378:	f000 fee6 	bl	800a148 <_free_r>
 800937c:	6a23      	ldr	r3, [r4, #32]
 800937e:	b11b      	cbz	r3, 8009388 <_reclaim_reent+0xb4>
 8009380:	4620      	mov	r0, r4
 8009382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009386:	4718      	bx	r3
 8009388:	bd70      	pop	{r4, r5, r6, pc}
 800938a:	bf00      	nop
 800938c:	20000188 	.word	0x20000188

08009390 <_lseek_r>:
 8009390:	b538      	push	{r3, r4, r5, lr}
 8009392:	4d07      	ldr	r5, [pc, #28]	@ (80093b0 <_lseek_r+0x20>)
 8009394:	4604      	mov	r4, r0
 8009396:	4608      	mov	r0, r1
 8009398:	4611      	mov	r1, r2
 800939a:	2200      	movs	r2, #0
 800939c:	602a      	str	r2, [r5, #0]
 800939e:	461a      	mov	r2, r3
 80093a0:	f7f8 fc26 	bl	8001bf0 <_lseek>
 80093a4:	1c43      	adds	r3, r0, #1
 80093a6:	d102      	bne.n	80093ae <_lseek_r+0x1e>
 80093a8:	682b      	ldr	r3, [r5, #0]
 80093aa:	b103      	cbz	r3, 80093ae <_lseek_r+0x1e>
 80093ac:	6023      	str	r3, [r4, #0]
 80093ae:	bd38      	pop	{r3, r4, r5, pc}
 80093b0:	20005714 	.word	0x20005714

080093b4 <_read_r>:
 80093b4:	b538      	push	{r3, r4, r5, lr}
 80093b6:	4d07      	ldr	r5, [pc, #28]	@ (80093d4 <_read_r+0x20>)
 80093b8:	4604      	mov	r4, r0
 80093ba:	4608      	mov	r0, r1
 80093bc:	4611      	mov	r1, r2
 80093be:	2200      	movs	r2, #0
 80093c0:	602a      	str	r2, [r5, #0]
 80093c2:	461a      	mov	r2, r3
 80093c4:	f7f8 fbec 	bl	8001ba0 <_read>
 80093c8:	1c43      	adds	r3, r0, #1
 80093ca:	d102      	bne.n	80093d2 <_read_r+0x1e>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	b103      	cbz	r3, 80093d2 <_read_r+0x1e>
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	bd38      	pop	{r3, r4, r5, pc}
 80093d4:	20005714 	.word	0x20005714

080093d8 <_write_r>:
 80093d8:	b538      	push	{r3, r4, r5, lr}
 80093da:	4d07      	ldr	r5, [pc, #28]	@ (80093f8 <_write_r+0x20>)
 80093dc:	4604      	mov	r4, r0
 80093de:	4608      	mov	r0, r1
 80093e0:	4611      	mov	r1, r2
 80093e2:	2200      	movs	r2, #0
 80093e4:	602a      	str	r2, [r5, #0]
 80093e6:	461a      	mov	r2, r3
 80093e8:	f7f8 fbe8 	bl	8001bbc <_write>
 80093ec:	1c43      	adds	r3, r0, #1
 80093ee:	d102      	bne.n	80093f6 <_write_r+0x1e>
 80093f0:	682b      	ldr	r3, [r5, #0]
 80093f2:	b103      	cbz	r3, 80093f6 <_write_r+0x1e>
 80093f4:	6023      	str	r3, [r4, #0]
 80093f6:	bd38      	pop	{r3, r4, r5, pc}
 80093f8:	20005714 	.word	0x20005714

080093fc <__errno>:
 80093fc:	4b01      	ldr	r3, [pc, #4]	@ (8009404 <__errno+0x8>)
 80093fe:	6818      	ldr	r0, [r3, #0]
 8009400:	4770      	bx	lr
 8009402:	bf00      	nop
 8009404:	20000188 	.word	0x20000188

08009408 <__libc_init_array>:
 8009408:	b570      	push	{r4, r5, r6, lr}
 800940a:	4d0d      	ldr	r5, [pc, #52]	@ (8009440 <__libc_init_array+0x38>)
 800940c:	4c0d      	ldr	r4, [pc, #52]	@ (8009444 <__libc_init_array+0x3c>)
 800940e:	1b64      	subs	r4, r4, r5
 8009410:	10a4      	asrs	r4, r4, #2
 8009412:	2600      	movs	r6, #0
 8009414:	42a6      	cmp	r6, r4
 8009416:	d109      	bne.n	800942c <__libc_init_array+0x24>
 8009418:	4d0b      	ldr	r5, [pc, #44]	@ (8009448 <__libc_init_array+0x40>)
 800941a:	4c0c      	ldr	r4, [pc, #48]	@ (800944c <__libc_init_array+0x44>)
 800941c:	f002 fd5e 	bl	800bedc <_init>
 8009420:	1b64      	subs	r4, r4, r5
 8009422:	10a4      	asrs	r4, r4, #2
 8009424:	2600      	movs	r6, #0
 8009426:	42a6      	cmp	r6, r4
 8009428:	d105      	bne.n	8009436 <__libc_init_array+0x2e>
 800942a:	bd70      	pop	{r4, r5, r6, pc}
 800942c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009430:	4798      	blx	r3
 8009432:	3601      	adds	r6, #1
 8009434:	e7ee      	b.n	8009414 <__libc_init_array+0xc>
 8009436:	f855 3b04 	ldr.w	r3, [r5], #4
 800943a:	4798      	blx	r3
 800943c:	3601      	adds	r6, #1
 800943e:	e7f2      	b.n	8009426 <__libc_init_array+0x1e>
 8009440:	0800c4ac 	.word	0x0800c4ac
 8009444:	0800c4ac 	.word	0x0800c4ac
 8009448:	0800c4ac 	.word	0x0800c4ac
 800944c:	0800c4b0 	.word	0x0800c4b0

08009450 <__retarget_lock_init_recursive>:
 8009450:	4770      	bx	lr

08009452 <__retarget_lock_acquire_recursive>:
 8009452:	4770      	bx	lr

08009454 <__retarget_lock_release_recursive>:
 8009454:	4770      	bx	lr

08009456 <memcpy>:
 8009456:	440a      	add	r2, r1
 8009458:	4291      	cmp	r1, r2
 800945a:	f100 33ff 	add.w	r3, r0, #4294967295
 800945e:	d100      	bne.n	8009462 <memcpy+0xc>
 8009460:	4770      	bx	lr
 8009462:	b510      	push	{r4, lr}
 8009464:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009468:	f803 4f01 	strb.w	r4, [r3, #1]!
 800946c:	4291      	cmp	r1, r2
 800946e:	d1f9      	bne.n	8009464 <memcpy+0xe>
 8009470:	bd10      	pop	{r4, pc}
 8009472:	0000      	movs	r0, r0
 8009474:	0000      	movs	r0, r0
	...

08009478 <nan>:
 8009478:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009480 <nan+0x8>
 800947c:	4770      	bx	lr
 800947e:	bf00      	nop
 8009480:	00000000 	.word	0x00000000
 8009484:	7ff80000 	.word	0x7ff80000

08009488 <nanf>:
 8009488:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009490 <nanf+0x8>
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	7fc00000 	.word	0x7fc00000

08009494 <quorem>:
 8009494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009498:	6903      	ldr	r3, [r0, #16]
 800949a:	690c      	ldr	r4, [r1, #16]
 800949c:	42a3      	cmp	r3, r4
 800949e:	4607      	mov	r7, r0
 80094a0:	db7e      	blt.n	80095a0 <quorem+0x10c>
 80094a2:	3c01      	subs	r4, #1
 80094a4:	f101 0814 	add.w	r8, r1, #20
 80094a8:	00a3      	lsls	r3, r4, #2
 80094aa:	f100 0514 	add.w	r5, r0, #20
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094b4:	9301      	str	r3, [sp, #4]
 80094b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80094ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094be:	3301      	adds	r3, #1
 80094c0:	429a      	cmp	r2, r3
 80094c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80094c6:	fbb2 f6f3 	udiv	r6, r2, r3
 80094ca:	d32e      	bcc.n	800952a <quorem+0x96>
 80094cc:	f04f 0a00 	mov.w	sl, #0
 80094d0:	46c4      	mov	ip, r8
 80094d2:	46ae      	mov	lr, r5
 80094d4:	46d3      	mov	fp, sl
 80094d6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80094da:	b298      	uxth	r0, r3
 80094dc:	fb06 a000 	mla	r0, r6, r0, sl
 80094e0:	0c02      	lsrs	r2, r0, #16
 80094e2:	0c1b      	lsrs	r3, r3, #16
 80094e4:	fb06 2303 	mla	r3, r6, r3, r2
 80094e8:	f8de 2000 	ldr.w	r2, [lr]
 80094ec:	b280      	uxth	r0, r0
 80094ee:	b292      	uxth	r2, r2
 80094f0:	1a12      	subs	r2, r2, r0
 80094f2:	445a      	add	r2, fp
 80094f4:	f8de 0000 	ldr.w	r0, [lr]
 80094f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009502:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009506:	b292      	uxth	r2, r2
 8009508:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800950c:	45e1      	cmp	r9, ip
 800950e:	f84e 2b04 	str.w	r2, [lr], #4
 8009512:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009516:	d2de      	bcs.n	80094d6 <quorem+0x42>
 8009518:	9b00      	ldr	r3, [sp, #0]
 800951a:	58eb      	ldr	r3, [r5, r3]
 800951c:	b92b      	cbnz	r3, 800952a <quorem+0x96>
 800951e:	9b01      	ldr	r3, [sp, #4]
 8009520:	3b04      	subs	r3, #4
 8009522:	429d      	cmp	r5, r3
 8009524:	461a      	mov	r2, r3
 8009526:	d32f      	bcc.n	8009588 <quorem+0xf4>
 8009528:	613c      	str	r4, [r7, #16]
 800952a:	4638      	mov	r0, r7
 800952c:	f001 fd14 	bl	800af58 <__mcmp>
 8009530:	2800      	cmp	r0, #0
 8009532:	db25      	blt.n	8009580 <quorem+0xec>
 8009534:	4629      	mov	r1, r5
 8009536:	2000      	movs	r0, #0
 8009538:	f858 2b04 	ldr.w	r2, [r8], #4
 800953c:	f8d1 c000 	ldr.w	ip, [r1]
 8009540:	fa1f fe82 	uxth.w	lr, r2
 8009544:	fa1f f38c 	uxth.w	r3, ip
 8009548:	eba3 030e 	sub.w	r3, r3, lr
 800954c:	4403      	add	r3, r0
 800954e:	0c12      	lsrs	r2, r2, #16
 8009550:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009554:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009558:	b29b      	uxth	r3, r3
 800955a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800955e:	45c1      	cmp	r9, r8
 8009560:	f841 3b04 	str.w	r3, [r1], #4
 8009564:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009568:	d2e6      	bcs.n	8009538 <quorem+0xa4>
 800956a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800956e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009572:	b922      	cbnz	r2, 800957e <quorem+0xea>
 8009574:	3b04      	subs	r3, #4
 8009576:	429d      	cmp	r5, r3
 8009578:	461a      	mov	r2, r3
 800957a:	d30b      	bcc.n	8009594 <quorem+0x100>
 800957c:	613c      	str	r4, [r7, #16]
 800957e:	3601      	adds	r6, #1
 8009580:	4630      	mov	r0, r6
 8009582:	b003      	add	sp, #12
 8009584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009588:	6812      	ldr	r2, [r2, #0]
 800958a:	3b04      	subs	r3, #4
 800958c:	2a00      	cmp	r2, #0
 800958e:	d1cb      	bne.n	8009528 <quorem+0x94>
 8009590:	3c01      	subs	r4, #1
 8009592:	e7c6      	b.n	8009522 <quorem+0x8e>
 8009594:	6812      	ldr	r2, [r2, #0]
 8009596:	3b04      	subs	r3, #4
 8009598:	2a00      	cmp	r2, #0
 800959a:	d1ef      	bne.n	800957c <quorem+0xe8>
 800959c:	3c01      	subs	r4, #1
 800959e:	e7ea      	b.n	8009576 <quorem+0xe2>
 80095a0:	2000      	movs	r0, #0
 80095a2:	e7ee      	b.n	8009582 <quorem+0xee>
 80095a4:	0000      	movs	r0, r0
	...

080095a8 <_dtoa_r>:
 80095a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095ac:	69c7      	ldr	r7, [r0, #28]
 80095ae:	b097      	sub	sp, #92	@ 0x5c
 80095b0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80095b4:	ec55 4b10 	vmov	r4, r5, d0
 80095b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80095ba:	9107      	str	r1, [sp, #28]
 80095bc:	4681      	mov	r9, r0
 80095be:	920c      	str	r2, [sp, #48]	@ 0x30
 80095c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80095c2:	b97f      	cbnz	r7, 80095e4 <_dtoa_r+0x3c>
 80095c4:	2010      	movs	r0, #16
 80095c6:	f001 f943 	bl	800a850 <malloc>
 80095ca:	4602      	mov	r2, r0
 80095cc:	f8c9 001c 	str.w	r0, [r9, #28]
 80095d0:	b920      	cbnz	r0, 80095dc <_dtoa_r+0x34>
 80095d2:	4ba9      	ldr	r3, [pc, #676]	@ (8009878 <_dtoa_r+0x2d0>)
 80095d4:	21ef      	movs	r1, #239	@ 0xef
 80095d6:	48a9      	ldr	r0, [pc, #676]	@ (800987c <_dtoa_r+0x2d4>)
 80095d8:	f002 f962 	bl	800b8a0 <__assert_func>
 80095dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80095e0:	6007      	str	r7, [r0, #0]
 80095e2:	60c7      	str	r7, [r0, #12]
 80095e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80095e8:	6819      	ldr	r1, [r3, #0]
 80095ea:	b159      	cbz	r1, 8009604 <_dtoa_r+0x5c>
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	604a      	str	r2, [r1, #4]
 80095f0:	2301      	movs	r3, #1
 80095f2:	4093      	lsls	r3, r2
 80095f4:	608b      	str	r3, [r1, #8]
 80095f6:	4648      	mov	r0, r9
 80095f8:	f001 fa32 	bl	800aa60 <_Bfree>
 80095fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009600:	2200      	movs	r2, #0
 8009602:	601a      	str	r2, [r3, #0]
 8009604:	1e2b      	subs	r3, r5, #0
 8009606:	bfb9      	ittee	lt
 8009608:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800960c:	9305      	strlt	r3, [sp, #20]
 800960e:	2300      	movge	r3, #0
 8009610:	6033      	strge	r3, [r6, #0]
 8009612:	9f05      	ldr	r7, [sp, #20]
 8009614:	4b9a      	ldr	r3, [pc, #616]	@ (8009880 <_dtoa_r+0x2d8>)
 8009616:	bfbc      	itt	lt
 8009618:	2201      	movlt	r2, #1
 800961a:	6032      	strlt	r2, [r6, #0]
 800961c:	43bb      	bics	r3, r7
 800961e:	d112      	bne.n	8009646 <_dtoa_r+0x9e>
 8009620:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009622:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009626:	6013      	str	r3, [r2, #0]
 8009628:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800962c:	4323      	orrs	r3, r4
 800962e:	f000 855a 	beq.w	800a0e6 <_dtoa_r+0xb3e>
 8009632:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009634:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009894 <_dtoa_r+0x2ec>
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 855c 	beq.w	800a0f6 <_dtoa_r+0xb4e>
 800963e:	f10a 0303 	add.w	r3, sl, #3
 8009642:	f000 bd56 	b.w	800a0f2 <_dtoa_r+0xb4a>
 8009646:	ed9d 7b04 	vldr	d7, [sp, #16]
 800964a:	2200      	movs	r2, #0
 800964c:	ec51 0b17 	vmov	r0, r1, d7
 8009650:	2300      	movs	r3, #0
 8009652:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009656:	f7f7 fa3f 	bl	8000ad8 <__aeabi_dcmpeq>
 800965a:	4680      	mov	r8, r0
 800965c:	b158      	cbz	r0, 8009676 <_dtoa_r+0xce>
 800965e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009660:	2301      	movs	r3, #1
 8009662:	6013      	str	r3, [r2, #0]
 8009664:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009666:	b113      	cbz	r3, 800966e <_dtoa_r+0xc6>
 8009668:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800966a:	4b86      	ldr	r3, [pc, #536]	@ (8009884 <_dtoa_r+0x2dc>)
 800966c:	6013      	str	r3, [r2, #0]
 800966e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009898 <_dtoa_r+0x2f0>
 8009672:	f000 bd40 	b.w	800a0f6 <_dtoa_r+0xb4e>
 8009676:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800967a:	aa14      	add	r2, sp, #80	@ 0x50
 800967c:	a915      	add	r1, sp, #84	@ 0x54
 800967e:	4648      	mov	r0, r9
 8009680:	f001 fd8a 	bl	800b198 <__d2b>
 8009684:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009688:	9002      	str	r0, [sp, #8]
 800968a:	2e00      	cmp	r6, #0
 800968c:	d078      	beq.n	8009780 <_dtoa_r+0x1d8>
 800968e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009690:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009698:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800969c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80096a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80096a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80096a8:	4619      	mov	r1, r3
 80096aa:	2200      	movs	r2, #0
 80096ac:	4b76      	ldr	r3, [pc, #472]	@ (8009888 <_dtoa_r+0x2e0>)
 80096ae:	f7f6 fdf3 	bl	8000298 <__aeabi_dsub>
 80096b2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009860 <_dtoa_r+0x2b8>)
 80096b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b8:	f7f6 ffa6 	bl	8000608 <__aeabi_dmul>
 80096bc:	a36a      	add	r3, pc, #424	@ (adr r3, 8009868 <_dtoa_r+0x2c0>)
 80096be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c2:	f7f6 fdeb 	bl	800029c <__adddf3>
 80096c6:	4604      	mov	r4, r0
 80096c8:	4630      	mov	r0, r6
 80096ca:	460d      	mov	r5, r1
 80096cc:	f7f6 ff32 	bl	8000534 <__aeabi_i2d>
 80096d0:	a367      	add	r3, pc, #412	@ (adr r3, 8009870 <_dtoa_r+0x2c8>)
 80096d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d6:	f7f6 ff97 	bl	8000608 <__aeabi_dmul>
 80096da:	4602      	mov	r2, r0
 80096dc:	460b      	mov	r3, r1
 80096de:	4620      	mov	r0, r4
 80096e0:	4629      	mov	r1, r5
 80096e2:	f7f6 fddb 	bl	800029c <__adddf3>
 80096e6:	4604      	mov	r4, r0
 80096e8:	460d      	mov	r5, r1
 80096ea:	f7f7 fa3d 	bl	8000b68 <__aeabi_d2iz>
 80096ee:	2200      	movs	r2, #0
 80096f0:	4607      	mov	r7, r0
 80096f2:	2300      	movs	r3, #0
 80096f4:	4620      	mov	r0, r4
 80096f6:	4629      	mov	r1, r5
 80096f8:	f7f7 f9f8 	bl	8000aec <__aeabi_dcmplt>
 80096fc:	b140      	cbz	r0, 8009710 <_dtoa_r+0x168>
 80096fe:	4638      	mov	r0, r7
 8009700:	f7f6 ff18 	bl	8000534 <__aeabi_i2d>
 8009704:	4622      	mov	r2, r4
 8009706:	462b      	mov	r3, r5
 8009708:	f7f7 f9e6 	bl	8000ad8 <__aeabi_dcmpeq>
 800970c:	b900      	cbnz	r0, 8009710 <_dtoa_r+0x168>
 800970e:	3f01      	subs	r7, #1
 8009710:	2f16      	cmp	r7, #22
 8009712:	d852      	bhi.n	80097ba <_dtoa_r+0x212>
 8009714:	4b5d      	ldr	r3, [pc, #372]	@ (800988c <_dtoa_r+0x2e4>)
 8009716:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800971a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009722:	f7f7 f9e3 	bl	8000aec <__aeabi_dcmplt>
 8009726:	2800      	cmp	r0, #0
 8009728:	d049      	beq.n	80097be <_dtoa_r+0x216>
 800972a:	3f01      	subs	r7, #1
 800972c:	2300      	movs	r3, #0
 800972e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009730:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009732:	1b9b      	subs	r3, r3, r6
 8009734:	1e5a      	subs	r2, r3, #1
 8009736:	bf45      	ittet	mi
 8009738:	f1c3 0301 	rsbmi	r3, r3, #1
 800973c:	9300      	strmi	r3, [sp, #0]
 800973e:	2300      	movpl	r3, #0
 8009740:	2300      	movmi	r3, #0
 8009742:	9206      	str	r2, [sp, #24]
 8009744:	bf54      	ite	pl
 8009746:	9300      	strpl	r3, [sp, #0]
 8009748:	9306      	strmi	r3, [sp, #24]
 800974a:	2f00      	cmp	r7, #0
 800974c:	db39      	blt.n	80097c2 <_dtoa_r+0x21a>
 800974e:	9b06      	ldr	r3, [sp, #24]
 8009750:	970d      	str	r7, [sp, #52]	@ 0x34
 8009752:	443b      	add	r3, r7
 8009754:	9306      	str	r3, [sp, #24]
 8009756:	2300      	movs	r3, #0
 8009758:	9308      	str	r3, [sp, #32]
 800975a:	9b07      	ldr	r3, [sp, #28]
 800975c:	2b09      	cmp	r3, #9
 800975e:	d863      	bhi.n	8009828 <_dtoa_r+0x280>
 8009760:	2b05      	cmp	r3, #5
 8009762:	bfc4      	itt	gt
 8009764:	3b04      	subgt	r3, #4
 8009766:	9307      	strgt	r3, [sp, #28]
 8009768:	9b07      	ldr	r3, [sp, #28]
 800976a:	f1a3 0302 	sub.w	r3, r3, #2
 800976e:	bfcc      	ite	gt
 8009770:	2400      	movgt	r4, #0
 8009772:	2401      	movle	r4, #1
 8009774:	2b03      	cmp	r3, #3
 8009776:	d863      	bhi.n	8009840 <_dtoa_r+0x298>
 8009778:	e8df f003 	tbb	[pc, r3]
 800977c:	2b375452 	.word	0x2b375452
 8009780:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009784:	441e      	add	r6, r3
 8009786:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800978a:	2b20      	cmp	r3, #32
 800978c:	bfc1      	itttt	gt
 800978e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009792:	409f      	lslgt	r7, r3
 8009794:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009798:	fa24 f303 	lsrgt.w	r3, r4, r3
 800979c:	bfd6      	itet	le
 800979e:	f1c3 0320 	rsble	r3, r3, #32
 80097a2:	ea47 0003 	orrgt.w	r0, r7, r3
 80097a6:	fa04 f003 	lslle.w	r0, r4, r3
 80097aa:	f7f6 feb3 	bl	8000514 <__aeabi_ui2d>
 80097ae:	2201      	movs	r2, #1
 80097b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80097b4:	3e01      	subs	r6, #1
 80097b6:	9212      	str	r2, [sp, #72]	@ 0x48
 80097b8:	e776      	b.n	80096a8 <_dtoa_r+0x100>
 80097ba:	2301      	movs	r3, #1
 80097bc:	e7b7      	b.n	800972e <_dtoa_r+0x186>
 80097be:	9010      	str	r0, [sp, #64]	@ 0x40
 80097c0:	e7b6      	b.n	8009730 <_dtoa_r+0x188>
 80097c2:	9b00      	ldr	r3, [sp, #0]
 80097c4:	1bdb      	subs	r3, r3, r7
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	427b      	negs	r3, r7
 80097ca:	9308      	str	r3, [sp, #32]
 80097cc:	2300      	movs	r3, #0
 80097ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80097d0:	e7c3      	b.n	800975a <_dtoa_r+0x1b2>
 80097d2:	2301      	movs	r3, #1
 80097d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80097d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097d8:	eb07 0b03 	add.w	fp, r7, r3
 80097dc:	f10b 0301 	add.w	r3, fp, #1
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	9303      	str	r3, [sp, #12]
 80097e4:	bfb8      	it	lt
 80097e6:	2301      	movlt	r3, #1
 80097e8:	e006      	b.n	80097f8 <_dtoa_r+0x250>
 80097ea:	2301      	movs	r3, #1
 80097ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80097ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	dd28      	ble.n	8009846 <_dtoa_r+0x29e>
 80097f4:	469b      	mov	fp, r3
 80097f6:	9303      	str	r3, [sp, #12]
 80097f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80097fc:	2100      	movs	r1, #0
 80097fe:	2204      	movs	r2, #4
 8009800:	f102 0514 	add.w	r5, r2, #20
 8009804:	429d      	cmp	r5, r3
 8009806:	d926      	bls.n	8009856 <_dtoa_r+0x2ae>
 8009808:	6041      	str	r1, [r0, #4]
 800980a:	4648      	mov	r0, r9
 800980c:	f001 f8e8 	bl	800a9e0 <_Balloc>
 8009810:	4682      	mov	sl, r0
 8009812:	2800      	cmp	r0, #0
 8009814:	d142      	bne.n	800989c <_dtoa_r+0x2f4>
 8009816:	4b1e      	ldr	r3, [pc, #120]	@ (8009890 <_dtoa_r+0x2e8>)
 8009818:	4602      	mov	r2, r0
 800981a:	f240 11af 	movw	r1, #431	@ 0x1af
 800981e:	e6da      	b.n	80095d6 <_dtoa_r+0x2e>
 8009820:	2300      	movs	r3, #0
 8009822:	e7e3      	b.n	80097ec <_dtoa_r+0x244>
 8009824:	2300      	movs	r3, #0
 8009826:	e7d5      	b.n	80097d4 <_dtoa_r+0x22c>
 8009828:	2401      	movs	r4, #1
 800982a:	2300      	movs	r3, #0
 800982c:	9307      	str	r3, [sp, #28]
 800982e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009830:	f04f 3bff 	mov.w	fp, #4294967295
 8009834:	2200      	movs	r2, #0
 8009836:	f8cd b00c 	str.w	fp, [sp, #12]
 800983a:	2312      	movs	r3, #18
 800983c:	920c      	str	r2, [sp, #48]	@ 0x30
 800983e:	e7db      	b.n	80097f8 <_dtoa_r+0x250>
 8009840:	2301      	movs	r3, #1
 8009842:	9309      	str	r3, [sp, #36]	@ 0x24
 8009844:	e7f4      	b.n	8009830 <_dtoa_r+0x288>
 8009846:	f04f 0b01 	mov.w	fp, #1
 800984a:	f8cd b00c 	str.w	fp, [sp, #12]
 800984e:	465b      	mov	r3, fp
 8009850:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009854:	e7d0      	b.n	80097f8 <_dtoa_r+0x250>
 8009856:	3101      	adds	r1, #1
 8009858:	0052      	lsls	r2, r2, #1
 800985a:	e7d1      	b.n	8009800 <_dtoa_r+0x258>
 800985c:	f3af 8000 	nop.w
 8009860:	636f4361 	.word	0x636f4361
 8009864:	3fd287a7 	.word	0x3fd287a7
 8009868:	8b60c8b3 	.word	0x8b60c8b3
 800986c:	3fc68a28 	.word	0x3fc68a28
 8009870:	509f79fb 	.word	0x509f79fb
 8009874:	3fd34413 	.word	0x3fd34413
 8009878:	0800c0c4 	.word	0x0800c0c4
 800987c:	0800c0db 	.word	0x0800c0db
 8009880:	7ff00000 	.word	0x7ff00000
 8009884:	0800c087 	.word	0x0800c087
 8009888:	3ff80000 	.word	0x3ff80000
 800988c:	0800c2d8 	.word	0x0800c2d8
 8009890:	0800c133 	.word	0x0800c133
 8009894:	0800c0c0 	.word	0x0800c0c0
 8009898:	0800c086 	.word	0x0800c086
 800989c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80098a0:	6018      	str	r0, [r3, #0]
 80098a2:	9b03      	ldr	r3, [sp, #12]
 80098a4:	2b0e      	cmp	r3, #14
 80098a6:	f200 80a1 	bhi.w	80099ec <_dtoa_r+0x444>
 80098aa:	2c00      	cmp	r4, #0
 80098ac:	f000 809e 	beq.w	80099ec <_dtoa_r+0x444>
 80098b0:	2f00      	cmp	r7, #0
 80098b2:	dd33      	ble.n	800991c <_dtoa_r+0x374>
 80098b4:	4b9c      	ldr	r3, [pc, #624]	@ (8009b28 <_dtoa_r+0x580>)
 80098b6:	f007 020f 	and.w	r2, r7, #15
 80098ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098be:	ed93 7b00 	vldr	d7, [r3]
 80098c2:	05f8      	lsls	r0, r7, #23
 80098c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80098c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80098cc:	d516      	bpl.n	80098fc <_dtoa_r+0x354>
 80098ce:	4b97      	ldr	r3, [pc, #604]	@ (8009b2c <_dtoa_r+0x584>)
 80098d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80098d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80098d8:	f7f6 ffc0 	bl	800085c <__aeabi_ddiv>
 80098dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098e0:	f004 040f 	and.w	r4, r4, #15
 80098e4:	2603      	movs	r6, #3
 80098e6:	4d91      	ldr	r5, [pc, #580]	@ (8009b2c <_dtoa_r+0x584>)
 80098e8:	b954      	cbnz	r4, 8009900 <_dtoa_r+0x358>
 80098ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80098ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098f2:	f7f6 ffb3 	bl	800085c <__aeabi_ddiv>
 80098f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098fa:	e028      	b.n	800994e <_dtoa_r+0x3a6>
 80098fc:	2602      	movs	r6, #2
 80098fe:	e7f2      	b.n	80098e6 <_dtoa_r+0x33e>
 8009900:	07e1      	lsls	r1, r4, #31
 8009902:	d508      	bpl.n	8009916 <_dtoa_r+0x36e>
 8009904:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009908:	e9d5 2300 	ldrd	r2, r3, [r5]
 800990c:	f7f6 fe7c 	bl	8000608 <__aeabi_dmul>
 8009910:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009914:	3601      	adds	r6, #1
 8009916:	1064      	asrs	r4, r4, #1
 8009918:	3508      	adds	r5, #8
 800991a:	e7e5      	b.n	80098e8 <_dtoa_r+0x340>
 800991c:	f000 80af 	beq.w	8009a7e <_dtoa_r+0x4d6>
 8009920:	427c      	negs	r4, r7
 8009922:	4b81      	ldr	r3, [pc, #516]	@ (8009b28 <_dtoa_r+0x580>)
 8009924:	4d81      	ldr	r5, [pc, #516]	@ (8009b2c <_dtoa_r+0x584>)
 8009926:	f004 020f 	and.w	r2, r4, #15
 800992a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800992e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009932:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009936:	f7f6 fe67 	bl	8000608 <__aeabi_dmul>
 800993a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800993e:	1124      	asrs	r4, r4, #4
 8009940:	2300      	movs	r3, #0
 8009942:	2602      	movs	r6, #2
 8009944:	2c00      	cmp	r4, #0
 8009946:	f040 808f 	bne.w	8009a68 <_dtoa_r+0x4c0>
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1d3      	bne.n	80098f6 <_dtoa_r+0x34e>
 800994e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009950:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009954:	2b00      	cmp	r3, #0
 8009956:	f000 8094 	beq.w	8009a82 <_dtoa_r+0x4da>
 800995a:	4b75      	ldr	r3, [pc, #468]	@ (8009b30 <_dtoa_r+0x588>)
 800995c:	2200      	movs	r2, #0
 800995e:	4620      	mov	r0, r4
 8009960:	4629      	mov	r1, r5
 8009962:	f7f7 f8c3 	bl	8000aec <__aeabi_dcmplt>
 8009966:	2800      	cmp	r0, #0
 8009968:	f000 808b 	beq.w	8009a82 <_dtoa_r+0x4da>
 800996c:	9b03      	ldr	r3, [sp, #12]
 800996e:	2b00      	cmp	r3, #0
 8009970:	f000 8087 	beq.w	8009a82 <_dtoa_r+0x4da>
 8009974:	f1bb 0f00 	cmp.w	fp, #0
 8009978:	dd34      	ble.n	80099e4 <_dtoa_r+0x43c>
 800997a:	4620      	mov	r0, r4
 800997c:	4b6d      	ldr	r3, [pc, #436]	@ (8009b34 <_dtoa_r+0x58c>)
 800997e:	2200      	movs	r2, #0
 8009980:	4629      	mov	r1, r5
 8009982:	f7f6 fe41 	bl	8000608 <__aeabi_dmul>
 8009986:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800998a:	f107 38ff 	add.w	r8, r7, #4294967295
 800998e:	3601      	adds	r6, #1
 8009990:	465c      	mov	r4, fp
 8009992:	4630      	mov	r0, r6
 8009994:	f7f6 fdce 	bl	8000534 <__aeabi_i2d>
 8009998:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800999c:	f7f6 fe34 	bl	8000608 <__aeabi_dmul>
 80099a0:	4b65      	ldr	r3, [pc, #404]	@ (8009b38 <_dtoa_r+0x590>)
 80099a2:	2200      	movs	r2, #0
 80099a4:	f7f6 fc7a 	bl	800029c <__adddf3>
 80099a8:	4605      	mov	r5, r0
 80099aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80099ae:	2c00      	cmp	r4, #0
 80099b0:	d16a      	bne.n	8009a88 <_dtoa_r+0x4e0>
 80099b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099b6:	4b61      	ldr	r3, [pc, #388]	@ (8009b3c <_dtoa_r+0x594>)
 80099b8:	2200      	movs	r2, #0
 80099ba:	f7f6 fc6d 	bl	8000298 <__aeabi_dsub>
 80099be:	4602      	mov	r2, r0
 80099c0:	460b      	mov	r3, r1
 80099c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80099c6:	462a      	mov	r2, r5
 80099c8:	4633      	mov	r3, r6
 80099ca:	f7f7 f8ad 	bl	8000b28 <__aeabi_dcmpgt>
 80099ce:	2800      	cmp	r0, #0
 80099d0:	f040 8298 	bne.w	8009f04 <_dtoa_r+0x95c>
 80099d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099d8:	462a      	mov	r2, r5
 80099da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80099de:	f7f7 f885 	bl	8000aec <__aeabi_dcmplt>
 80099e2:	bb38      	cbnz	r0, 8009a34 <_dtoa_r+0x48c>
 80099e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80099e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80099ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f2c0 8157 	blt.w	8009ca2 <_dtoa_r+0x6fa>
 80099f4:	2f0e      	cmp	r7, #14
 80099f6:	f300 8154 	bgt.w	8009ca2 <_dtoa_r+0x6fa>
 80099fa:	4b4b      	ldr	r3, [pc, #300]	@ (8009b28 <_dtoa_r+0x580>)
 80099fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a00:	ed93 7b00 	vldr	d7, [r3]
 8009a04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	ed8d 7b00 	vstr	d7, [sp]
 8009a0c:	f280 80e5 	bge.w	8009bda <_dtoa_r+0x632>
 8009a10:	9b03      	ldr	r3, [sp, #12]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	f300 80e1 	bgt.w	8009bda <_dtoa_r+0x632>
 8009a18:	d10c      	bne.n	8009a34 <_dtoa_r+0x48c>
 8009a1a:	4b48      	ldr	r3, [pc, #288]	@ (8009b3c <_dtoa_r+0x594>)
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	ec51 0b17 	vmov	r0, r1, d7
 8009a22:	f7f6 fdf1 	bl	8000608 <__aeabi_dmul>
 8009a26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a2a:	f7f7 f873 	bl	8000b14 <__aeabi_dcmpge>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	f000 8266 	beq.w	8009f00 <_dtoa_r+0x958>
 8009a34:	2400      	movs	r4, #0
 8009a36:	4625      	mov	r5, r4
 8009a38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a3a:	4656      	mov	r6, sl
 8009a3c:	ea6f 0803 	mvn.w	r8, r3
 8009a40:	2700      	movs	r7, #0
 8009a42:	4621      	mov	r1, r4
 8009a44:	4648      	mov	r0, r9
 8009a46:	f001 f80b 	bl	800aa60 <_Bfree>
 8009a4a:	2d00      	cmp	r5, #0
 8009a4c:	f000 80bd 	beq.w	8009bca <_dtoa_r+0x622>
 8009a50:	b12f      	cbz	r7, 8009a5e <_dtoa_r+0x4b6>
 8009a52:	42af      	cmp	r7, r5
 8009a54:	d003      	beq.n	8009a5e <_dtoa_r+0x4b6>
 8009a56:	4639      	mov	r1, r7
 8009a58:	4648      	mov	r0, r9
 8009a5a:	f001 f801 	bl	800aa60 <_Bfree>
 8009a5e:	4629      	mov	r1, r5
 8009a60:	4648      	mov	r0, r9
 8009a62:	f000 fffd 	bl	800aa60 <_Bfree>
 8009a66:	e0b0      	b.n	8009bca <_dtoa_r+0x622>
 8009a68:	07e2      	lsls	r2, r4, #31
 8009a6a:	d505      	bpl.n	8009a78 <_dtoa_r+0x4d0>
 8009a6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a70:	f7f6 fdca 	bl	8000608 <__aeabi_dmul>
 8009a74:	3601      	adds	r6, #1
 8009a76:	2301      	movs	r3, #1
 8009a78:	1064      	asrs	r4, r4, #1
 8009a7a:	3508      	adds	r5, #8
 8009a7c:	e762      	b.n	8009944 <_dtoa_r+0x39c>
 8009a7e:	2602      	movs	r6, #2
 8009a80:	e765      	b.n	800994e <_dtoa_r+0x3a6>
 8009a82:	9c03      	ldr	r4, [sp, #12]
 8009a84:	46b8      	mov	r8, r7
 8009a86:	e784      	b.n	8009992 <_dtoa_r+0x3ea>
 8009a88:	4b27      	ldr	r3, [pc, #156]	@ (8009b28 <_dtoa_r+0x580>)
 8009a8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009a90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a94:	4454      	add	r4, sl
 8009a96:	2900      	cmp	r1, #0
 8009a98:	d054      	beq.n	8009b44 <_dtoa_r+0x59c>
 8009a9a:	4929      	ldr	r1, [pc, #164]	@ (8009b40 <_dtoa_r+0x598>)
 8009a9c:	2000      	movs	r0, #0
 8009a9e:	f7f6 fedd 	bl	800085c <__aeabi_ddiv>
 8009aa2:	4633      	mov	r3, r6
 8009aa4:	462a      	mov	r2, r5
 8009aa6:	f7f6 fbf7 	bl	8000298 <__aeabi_dsub>
 8009aaa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009aae:	4656      	mov	r6, sl
 8009ab0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ab4:	f7f7 f858 	bl	8000b68 <__aeabi_d2iz>
 8009ab8:	4605      	mov	r5, r0
 8009aba:	f7f6 fd3b 	bl	8000534 <__aeabi_i2d>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ac6:	f7f6 fbe7 	bl	8000298 <__aeabi_dsub>
 8009aca:	3530      	adds	r5, #48	@ 0x30
 8009acc:	4602      	mov	r2, r0
 8009ace:	460b      	mov	r3, r1
 8009ad0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ad4:	f806 5b01 	strb.w	r5, [r6], #1
 8009ad8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009adc:	f7f7 f806 	bl	8000aec <__aeabi_dcmplt>
 8009ae0:	2800      	cmp	r0, #0
 8009ae2:	d172      	bne.n	8009bca <_dtoa_r+0x622>
 8009ae4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ae8:	4911      	ldr	r1, [pc, #68]	@ (8009b30 <_dtoa_r+0x588>)
 8009aea:	2000      	movs	r0, #0
 8009aec:	f7f6 fbd4 	bl	8000298 <__aeabi_dsub>
 8009af0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009af4:	f7f6 fffa 	bl	8000aec <__aeabi_dcmplt>
 8009af8:	2800      	cmp	r0, #0
 8009afa:	f040 80b4 	bne.w	8009c66 <_dtoa_r+0x6be>
 8009afe:	42a6      	cmp	r6, r4
 8009b00:	f43f af70 	beq.w	80099e4 <_dtoa_r+0x43c>
 8009b04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009b08:	4b0a      	ldr	r3, [pc, #40]	@ (8009b34 <_dtoa_r+0x58c>)
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f7f6 fd7c 	bl	8000608 <__aeabi_dmul>
 8009b10:	4b08      	ldr	r3, [pc, #32]	@ (8009b34 <_dtoa_r+0x58c>)
 8009b12:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009b16:	2200      	movs	r2, #0
 8009b18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b1c:	f7f6 fd74 	bl	8000608 <__aeabi_dmul>
 8009b20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b24:	e7c4      	b.n	8009ab0 <_dtoa_r+0x508>
 8009b26:	bf00      	nop
 8009b28:	0800c2d8 	.word	0x0800c2d8
 8009b2c:	0800c2b0 	.word	0x0800c2b0
 8009b30:	3ff00000 	.word	0x3ff00000
 8009b34:	40240000 	.word	0x40240000
 8009b38:	401c0000 	.word	0x401c0000
 8009b3c:	40140000 	.word	0x40140000
 8009b40:	3fe00000 	.word	0x3fe00000
 8009b44:	4631      	mov	r1, r6
 8009b46:	4628      	mov	r0, r5
 8009b48:	f7f6 fd5e 	bl	8000608 <__aeabi_dmul>
 8009b4c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009b50:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009b52:	4656      	mov	r6, sl
 8009b54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b58:	f7f7 f806 	bl	8000b68 <__aeabi_d2iz>
 8009b5c:	4605      	mov	r5, r0
 8009b5e:	f7f6 fce9 	bl	8000534 <__aeabi_i2d>
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b6a:	f7f6 fb95 	bl	8000298 <__aeabi_dsub>
 8009b6e:	3530      	adds	r5, #48	@ 0x30
 8009b70:	f806 5b01 	strb.w	r5, [r6], #1
 8009b74:	4602      	mov	r2, r0
 8009b76:	460b      	mov	r3, r1
 8009b78:	42a6      	cmp	r6, r4
 8009b7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009b7e:	f04f 0200 	mov.w	r2, #0
 8009b82:	d124      	bne.n	8009bce <_dtoa_r+0x626>
 8009b84:	4baf      	ldr	r3, [pc, #700]	@ (8009e44 <_dtoa_r+0x89c>)
 8009b86:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009b8a:	f7f6 fb87 	bl	800029c <__adddf3>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b96:	f7f6 ffc7 	bl	8000b28 <__aeabi_dcmpgt>
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	d163      	bne.n	8009c66 <_dtoa_r+0x6be>
 8009b9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009ba2:	49a8      	ldr	r1, [pc, #672]	@ (8009e44 <_dtoa_r+0x89c>)
 8009ba4:	2000      	movs	r0, #0
 8009ba6:	f7f6 fb77 	bl	8000298 <__aeabi_dsub>
 8009baa:	4602      	mov	r2, r0
 8009bac:	460b      	mov	r3, r1
 8009bae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bb2:	f7f6 ff9b 	bl	8000aec <__aeabi_dcmplt>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	f43f af14 	beq.w	80099e4 <_dtoa_r+0x43c>
 8009bbc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009bbe:	1e73      	subs	r3, r6, #1
 8009bc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009bc2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009bc6:	2b30      	cmp	r3, #48	@ 0x30
 8009bc8:	d0f8      	beq.n	8009bbc <_dtoa_r+0x614>
 8009bca:	4647      	mov	r7, r8
 8009bcc:	e03b      	b.n	8009c46 <_dtoa_r+0x69e>
 8009bce:	4b9e      	ldr	r3, [pc, #632]	@ (8009e48 <_dtoa_r+0x8a0>)
 8009bd0:	f7f6 fd1a 	bl	8000608 <__aeabi_dmul>
 8009bd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bd8:	e7bc      	b.n	8009b54 <_dtoa_r+0x5ac>
 8009bda:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009bde:	4656      	mov	r6, sl
 8009be0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009be4:	4620      	mov	r0, r4
 8009be6:	4629      	mov	r1, r5
 8009be8:	f7f6 fe38 	bl	800085c <__aeabi_ddiv>
 8009bec:	f7f6 ffbc 	bl	8000b68 <__aeabi_d2iz>
 8009bf0:	4680      	mov	r8, r0
 8009bf2:	f7f6 fc9f 	bl	8000534 <__aeabi_i2d>
 8009bf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bfa:	f7f6 fd05 	bl	8000608 <__aeabi_dmul>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	460b      	mov	r3, r1
 8009c02:	4620      	mov	r0, r4
 8009c04:	4629      	mov	r1, r5
 8009c06:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009c0a:	f7f6 fb45 	bl	8000298 <__aeabi_dsub>
 8009c0e:	f806 4b01 	strb.w	r4, [r6], #1
 8009c12:	9d03      	ldr	r5, [sp, #12]
 8009c14:	eba6 040a 	sub.w	r4, r6, sl
 8009c18:	42a5      	cmp	r5, r4
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	d133      	bne.n	8009c88 <_dtoa_r+0x6e0>
 8009c20:	f7f6 fb3c 	bl	800029c <__adddf3>
 8009c24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c28:	4604      	mov	r4, r0
 8009c2a:	460d      	mov	r5, r1
 8009c2c:	f7f6 ff7c 	bl	8000b28 <__aeabi_dcmpgt>
 8009c30:	b9c0      	cbnz	r0, 8009c64 <_dtoa_r+0x6bc>
 8009c32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c36:	4620      	mov	r0, r4
 8009c38:	4629      	mov	r1, r5
 8009c3a:	f7f6 ff4d 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c3e:	b110      	cbz	r0, 8009c46 <_dtoa_r+0x69e>
 8009c40:	f018 0f01 	tst.w	r8, #1
 8009c44:	d10e      	bne.n	8009c64 <_dtoa_r+0x6bc>
 8009c46:	9902      	ldr	r1, [sp, #8]
 8009c48:	4648      	mov	r0, r9
 8009c4a:	f000 ff09 	bl	800aa60 <_Bfree>
 8009c4e:	2300      	movs	r3, #0
 8009c50:	7033      	strb	r3, [r6, #0]
 8009c52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009c54:	3701      	adds	r7, #1
 8009c56:	601f      	str	r7, [r3, #0]
 8009c58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	f000 824b 	beq.w	800a0f6 <_dtoa_r+0xb4e>
 8009c60:	601e      	str	r6, [r3, #0]
 8009c62:	e248      	b.n	800a0f6 <_dtoa_r+0xb4e>
 8009c64:	46b8      	mov	r8, r7
 8009c66:	4633      	mov	r3, r6
 8009c68:	461e      	mov	r6, r3
 8009c6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c6e:	2a39      	cmp	r2, #57	@ 0x39
 8009c70:	d106      	bne.n	8009c80 <_dtoa_r+0x6d8>
 8009c72:	459a      	cmp	sl, r3
 8009c74:	d1f8      	bne.n	8009c68 <_dtoa_r+0x6c0>
 8009c76:	2230      	movs	r2, #48	@ 0x30
 8009c78:	f108 0801 	add.w	r8, r8, #1
 8009c7c:	f88a 2000 	strb.w	r2, [sl]
 8009c80:	781a      	ldrb	r2, [r3, #0]
 8009c82:	3201      	adds	r2, #1
 8009c84:	701a      	strb	r2, [r3, #0]
 8009c86:	e7a0      	b.n	8009bca <_dtoa_r+0x622>
 8009c88:	4b6f      	ldr	r3, [pc, #444]	@ (8009e48 <_dtoa_r+0x8a0>)
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	f7f6 fcbc 	bl	8000608 <__aeabi_dmul>
 8009c90:	2200      	movs	r2, #0
 8009c92:	2300      	movs	r3, #0
 8009c94:	4604      	mov	r4, r0
 8009c96:	460d      	mov	r5, r1
 8009c98:	f7f6 ff1e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c9c:	2800      	cmp	r0, #0
 8009c9e:	d09f      	beq.n	8009be0 <_dtoa_r+0x638>
 8009ca0:	e7d1      	b.n	8009c46 <_dtoa_r+0x69e>
 8009ca2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ca4:	2a00      	cmp	r2, #0
 8009ca6:	f000 80ea 	beq.w	8009e7e <_dtoa_r+0x8d6>
 8009caa:	9a07      	ldr	r2, [sp, #28]
 8009cac:	2a01      	cmp	r2, #1
 8009cae:	f300 80cd 	bgt.w	8009e4c <_dtoa_r+0x8a4>
 8009cb2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009cb4:	2a00      	cmp	r2, #0
 8009cb6:	f000 80c1 	beq.w	8009e3c <_dtoa_r+0x894>
 8009cba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009cbe:	9c08      	ldr	r4, [sp, #32]
 8009cc0:	9e00      	ldr	r6, [sp, #0]
 8009cc2:	9a00      	ldr	r2, [sp, #0]
 8009cc4:	441a      	add	r2, r3
 8009cc6:	9200      	str	r2, [sp, #0]
 8009cc8:	9a06      	ldr	r2, [sp, #24]
 8009cca:	2101      	movs	r1, #1
 8009ccc:	441a      	add	r2, r3
 8009cce:	4648      	mov	r0, r9
 8009cd0:	9206      	str	r2, [sp, #24]
 8009cd2:	f000 ffc3 	bl	800ac5c <__i2b>
 8009cd6:	4605      	mov	r5, r0
 8009cd8:	b166      	cbz	r6, 8009cf4 <_dtoa_r+0x74c>
 8009cda:	9b06      	ldr	r3, [sp, #24]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	dd09      	ble.n	8009cf4 <_dtoa_r+0x74c>
 8009ce0:	42b3      	cmp	r3, r6
 8009ce2:	9a00      	ldr	r2, [sp, #0]
 8009ce4:	bfa8      	it	ge
 8009ce6:	4633      	movge	r3, r6
 8009ce8:	1ad2      	subs	r2, r2, r3
 8009cea:	9200      	str	r2, [sp, #0]
 8009cec:	9a06      	ldr	r2, [sp, #24]
 8009cee:	1af6      	subs	r6, r6, r3
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	9306      	str	r3, [sp, #24]
 8009cf4:	9b08      	ldr	r3, [sp, #32]
 8009cf6:	b30b      	cbz	r3, 8009d3c <_dtoa_r+0x794>
 8009cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	f000 80c6 	beq.w	8009e8c <_dtoa_r+0x8e4>
 8009d00:	2c00      	cmp	r4, #0
 8009d02:	f000 80c0 	beq.w	8009e86 <_dtoa_r+0x8de>
 8009d06:	4629      	mov	r1, r5
 8009d08:	4622      	mov	r2, r4
 8009d0a:	4648      	mov	r0, r9
 8009d0c:	f001 f85e 	bl	800adcc <__pow5mult>
 8009d10:	9a02      	ldr	r2, [sp, #8]
 8009d12:	4601      	mov	r1, r0
 8009d14:	4605      	mov	r5, r0
 8009d16:	4648      	mov	r0, r9
 8009d18:	f000 ffb6 	bl	800ac88 <__multiply>
 8009d1c:	9902      	ldr	r1, [sp, #8]
 8009d1e:	4680      	mov	r8, r0
 8009d20:	4648      	mov	r0, r9
 8009d22:	f000 fe9d 	bl	800aa60 <_Bfree>
 8009d26:	9b08      	ldr	r3, [sp, #32]
 8009d28:	1b1b      	subs	r3, r3, r4
 8009d2a:	9308      	str	r3, [sp, #32]
 8009d2c:	f000 80b1 	beq.w	8009e92 <_dtoa_r+0x8ea>
 8009d30:	9a08      	ldr	r2, [sp, #32]
 8009d32:	4641      	mov	r1, r8
 8009d34:	4648      	mov	r0, r9
 8009d36:	f001 f849 	bl	800adcc <__pow5mult>
 8009d3a:	9002      	str	r0, [sp, #8]
 8009d3c:	2101      	movs	r1, #1
 8009d3e:	4648      	mov	r0, r9
 8009d40:	f000 ff8c 	bl	800ac5c <__i2b>
 8009d44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d46:	4604      	mov	r4, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	f000 81d8 	beq.w	800a0fe <_dtoa_r+0xb56>
 8009d4e:	461a      	mov	r2, r3
 8009d50:	4601      	mov	r1, r0
 8009d52:	4648      	mov	r0, r9
 8009d54:	f001 f83a 	bl	800adcc <__pow5mult>
 8009d58:	9b07      	ldr	r3, [sp, #28]
 8009d5a:	2b01      	cmp	r3, #1
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	f300 809f 	bgt.w	8009ea0 <_dtoa_r+0x8f8>
 8009d62:	9b04      	ldr	r3, [sp, #16]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f040 8097 	bne.w	8009e98 <_dtoa_r+0x8f0>
 8009d6a:	9b05      	ldr	r3, [sp, #20]
 8009d6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	f040 8093 	bne.w	8009e9c <_dtoa_r+0x8f4>
 8009d76:	9b05      	ldr	r3, [sp, #20]
 8009d78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009d7c:	0d1b      	lsrs	r3, r3, #20
 8009d7e:	051b      	lsls	r3, r3, #20
 8009d80:	b133      	cbz	r3, 8009d90 <_dtoa_r+0x7e8>
 8009d82:	9b00      	ldr	r3, [sp, #0]
 8009d84:	3301      	adds	r3, #1
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	9b06      	ldr	r3, [sp, #24]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	9306      	str	r3, [sp, #24]
 8009d8e:	2301      	movs	r3, #1
 8009d90:	9308      	str	r3, [sp, #32]
 8009d92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	f000 81b8 	beq.w	800a10a <_dtoa_r+0xb62>
 8009d9a:	6923      	ldr	r3, [r4, #16]
 8009d9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009da0:	6918      	ldr	r0, [r3, #16]
 8009da2:	f000 ff0f 	bl	800abc4 <__hi0bits>
 8009da6:	f1c0 0020 	rsb	r0, r0, #32
 8009daa:	9b06      	ldr	r3, [sp, #24]
 8009dac:	4418      	add	r0, r3
 8009dae:	f010 001f 	ands.w	r0, r0, #31
 8009db2:	f000 8082 	beq.w	8009eba <_dtoa_r+0x912>
 8009db6:	f1c0 0320 	rsb	r3, r0, #32
 8009dba:	2b04      	cmp	r3, #4
 8009dbc:	dd73      	ble.n	8009ea6 <_dtoa_r+0x8fe>
 8009dbe:	9b00      	ldr	r3, [sp, #0]
 8009dc0:	f1c0 001c 	rsb	r0, r0, #28
 8009dc4:	4403      	add	r3, r0
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	9b06      	ldr	r3, [sp, #24]
 8009dca:	4403      	add	r3, r0
 8009dcc:	4406      	add	r6, r0
 8009dce:	9306      	str	r3, [sp, #24]
 8009dd0:	9b00      	ldr	r3, [sp, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	dd05      	ble.n	8009de2 <_dtoa_r+0x83a>
 8009dd6:	9902      	ldr	r1, [sp, #8]
 8009dd8:	461a      	mov	r2, r3
 8009dda:	4648      	mov	r0, r9
 8009ddc:	f001 f850 	bl	800ae80 <__lshift>
 8009de0:	9002      	str	r0, [sp, #8]
 8009de2:	9b06      	ldr	r3, [sp, #24]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	dd05      	ble.n	8009df4 <_dtoa_r+0x84c>
 8009de8:	4621      	mov	r1, r4
 8009dea:	461a      	mov	r2, r3
 8009dec:	4648      	mov	r0, r9
 8009dee:	f001 f847 	bl	800ae80 <__lshift>
 8009df2:	4604      	mov	r4, r0
 8009df4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d061      	beq.n	8009ebe <_dtoa_r+0x916>
 8009dfa:	9802      	ldr	r0, [sp, #8]
 8009dfc:	4621      	mov	r1, r4
 8009dfe:	f001 f8ab 	bl	800af58 <__mcmp>
 8009e02:	2800      	cmp	r0, #0
 8009e04:	da5b      	bge.n	8009ebe <_dtoa_r+0x916>
 8009e06:	2300      	movs	r3, #0
 8009e08:	9902      	ldr	r1, [sp, #8]
 8009e0a:	220a      	movs	r2, #10
 8009e0c:	4648      	mov	r0, r9
 8009e0e:	f000 fe49 	bl	800aaa4 <__multadd>
 8009e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e14:	9002      	str	r0, [sp, #8]
 8009e16:	f107 38ff 	add.w	r8, r7, #4294967295
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f000 8177 	beq.w	800a10e <_dtoa_r+0xb66>
 8009e20:	4629      	mov	r1, r5
 8009e22:	2300      	movs	r3, #0
 8009e24:	220a      	movs	r2, #10
 8009e26:	4648      	mov	r0, r9
 8009e28:	f000 fe3c 	bl	800aaa4 <__multadd>
 8009e2c:	f1bb 0f00 	cmp.w	fp, #0
 8009e30:	4605      	mov	r5, r0
 8009e32:	dc6f      	bgt.n	8009f14 <_dtoa_r+0x96c>
 8009e34:	9b07      	ldr	r3, [sp, #28]
 8009e36:	2b02      	cmp	r3, #2
 8009e38:	dc49      	bgt.n	8009ece <_dtoa_r+0x926>
 8009e3a:	e06b      	b.n	8009f14 <_dtoa_r+0x96c>
 8009e3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009e3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009e42:	e73c      	b.n	8009cbe <_dtoa_r+0x716>
 8009e44:	3fe00000 	.word	0x3fe00000
 8009e48:	40240000 	.word	0x40240000
 8009e4c:	9b03      	ldr	r3, [sp, #12]
 8009e4e:	1e5c      	subs	r4, r3, #1
 8009e50:	9b08      	ldr	r3, [sp, #32]
 8009e52:	42a3      	cmp	r3, r4
 8009e54:	db09      	blt.n	8009e6a <_dtoa_r+0x8c2>
 8009e56:	1b1c      	subs	r4, r3, r4
 8009e58:	9b03      	ldr	r3, [sp, #12]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	f6bf af30 	bge.w	8009cc0 <_dtoa_r+0x718>
 8009e60:	9b00      	ldr	r3, [sp, #0]
 8009e62:	9a03      	ldr	r2, [sp, #12]
 8009e64:	1a9e      	subs	r6, r3, r2
 8009e66:	2300      	movs	r3, #0
 8009e68:	e72b      	b.n	8009cc2 <_dtoa_r+0x71a>
 8009e6a:	9b08      	ldr	r3, [sp, #32]
 8009e6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e6e:	9408      	str	r4, [sp, #32]
 8009e70:	1ae3      	subs	r3, r4, r3
 8009e72:	441a      	add	r2, r3
 8009e74:	9e00      	ldr	r6, [sp, #0]
 8009e76:	9b03      	ldr	r3, [sp, #12]
 8009e78:	920d      	str	r2, [sp, #52]	@ 0x34
 8009e7a:	2400      	movs	r4, #0
 8009e7c:	e721      	b.n	8009cc2 <_dtoa_r+0x71a>
 8009e7e:	9c08      	ldr	r4, [sp, #32]
 8009e80:	9e00      	ldr	r6, [sp, #0]
 8009e82:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009e84:	e728      	b.n	8009cd8 <_dtoa_r+0x730>
 8009e86:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009e8a:	e751      	b.n	8009d30 <_dtoa_r+0x788>
 8009e8c:	9a08      	ldr	r2, [sp, #32]
 8009e8e:	9902      	ldr	r1, [sp, #8]
 8009e90:	e750      	b.n	8009d34 <_dtoa_r+0x78c>
 8009e92:	f8cd 8008 	str.w	r8, [sp, #8]
 8009e96:	e751      	b.n	8009d3c <_dtoa_r+0x794>
 8009e98:	2300      	movs	r3, #0
 8009e9a:	e779      	b.n	8009d90 <_dtoa_r+0x7e8>
 8009e9c:	9b04      	ldr	r3, [sp, #16]
 8009e9e:	e777      	b.n	8009d90 <_dtoa_r+0x7e8>
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	9308      	str	r3, [sp, #32]
 8009ea4:	e779      	b.n	8009d9a <_dtoa_r+0x7f2>
 8009ea6:	d093      	beq.n	8009dd0 <_dtoa_r+0x828>
 8009ea8:	9a00      	ldr	r2, [sp, #0]
 8009eaa:	331c      	adds	r3, #28
 8009eac:	441a      	add	r2, r3
 8009eae:	9200      	str	r2, [sp, #0]
 8009eb0:	9a06      	ldr	r2, [sp, #24]
 8009eb2:	441a      	add	r2, r3
 8009eb4:	441e      	add	r6, r3
 8009eb6:	9206      	str	r2, [sp, #24]
 8009eb8:	e78a      	b.n	8009dd0 <_dtoa_r+0x828>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	e7f4      	b.n	8009ea8 <_dtoa_r+0x900>
 8009ebe:	9b03      	ldr	r3, [sp, #12]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	46b8      	mov	r8, r7
 8009ec4:	dc20      	bgt.n	8009f08 <_dtoa_r+0x960>
 8009ec6:	469b      	mov	fp, r3
 8009ec8:	9b07      	ldr	r3, [sp, #28]
 8009eca:	2b02      	cmp	r3, #2
 8009ecc:	dd1e      	ble.n	8009f0c <_dtoa_r+0x964>
 8009ece:	f1bb 0f00 	cmp.w	fp, #0
 8009ed2:	f47f adb1 	bne.w	8009a38 <_dtoa_r+0x490>
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	465b      	mov	r3, fp
 8009eda:	2205      	movs	r2, #5
 8009edc:	4648      	mov	r0, r9
 8009ede:	f000 fde1 	bl	800aaa4 <__multadd>
 8009ee2:	4601      	mov	r1, r0
 8009ee4:	4604      	mov	r4, r0
 8009ee6:	9802      	ldr	r0, [sp, #8]
 8009ee8:	f001 f836 	bl	800af58 <__mcmp>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	f77f ada3 	ble.w	8009a38 <_dtoa_r+0x490>
 8009ef2:	4656      	mov	r6, sl
 8009ef4:	2331      	movs	r3, #49	@ 0x31
 8009ef6:	f806 3b01 	strb.w	r3, [r6], #1
 8009efa:	f108 0801 	add.w	r8, r8, #1
 8009efe:	e59f      	b.n	8009a40 <_dtoa_r+0x498>
 8009f00:	9c03      	ldr	r4, [sp, #12]
 8009f02:	46b8      	mov	r8, r7
 8009f04:	4625      	mov	r5, r4
 8009f06:	e7f4      	b.n	8009ef2 <_dtoa_r+0x94a>
 8009f08:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009f0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f000 8101 	beq.w	800a116 <_dtoa_r+0xb6e>
 8009f14:	2e00      	cmp	r6, #0
 8009f16:	dd05      	ble.n	8009f24 <_dtoa_r+0x97c>
 8009f18:	4629      	mov	r1, r5
 8009f1a:	4632      	mov	r2, r6
 8009f1c:	4648      	mov	r0, r9
 8009f1e:	f000 ffaf 	bl	800ae80 <__lshift>
 8009f22:	4605      	mov	r5, r0
 8009f24:	9b08      	ldr	r3, [sp, #32]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d05c      	beq.n	8009fe4 <_dtoa_r+0xa3c>
 8009f2a:	6869      	ldr	r1, [r5, #4]
 8009f2c:	4648      	mov	r0, r9
 8009f2e:	f000 fd57 	bl	800a9e0 <_Balloc>
 8009f32:	4606      	mov	r6, r0
 8009f34:	b928      	cbnz	r0, 8009f42 <_dtoa_r+0x99a>
 8009f36:	4b82      	ldr	r3, [pc, #520]	@ (800a140 <_dtoa_r+0xb98>)
 8009f38:	4602      	mov	r2, r0
 8009f3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009f3e:	f7ff bb4a 	b.w	80095d6 <_dtoa_r+0x2e>
 8009f42:	692a      	ldr	r2, [r5, #16]
 8009f44:	3202      	adds	r2, #2
 8009f46:	0092      	lsls	r2, r2, #2
 8009f48:	f105 010c 	add.w	r1, r5, #12
 8009f4c:	300c      	adds	r0, #12
 8009f4e:	f7ff fa82 	bl	8009456 <memcpy>
 8009f52:	2201      	movs	r2, #1
 8009f54:	4631      	mov	r1, r6
 8009f56:	4648      	mov	r0, r9
 8009f58:	f000 ff92 	bl	800ae80 <__lshift>
 8009f5c:	f10a 0301 	add.w	r3, sl, #1
 8009f60:	9300      	str	r3, [sp, #0]
 8009f62:	eb0a 030b 	add.w	r3, sl, fp
 8009f66:	9308      	str	r3, [sp, #32]
 8009f68:	9b04      	ldr	r3, [sp, #16]
 8009f6a:	f003 0301 	and.w	r3, r3, #1
 8009f6e:	462f      	mov	r7, r5
 8009f70:	9306      	str	r3, [sp, #24]
 8009f72:	4605      	mov	r5, r0
 8009f74:	9b00      	ldr	r3, [sp, #0]
 8009f76:	9802      	ldr	r0, [sp, #8]
 8009f78:	4621      	mov	r1, r4
 8009f7a:	f103 3bff 	add.w	fp, r3, #4294967295
 8009f7e:	f7ff fa89 	bl	8009494 <quorem>
 8009f82:	4603      	mov	r3, r0
 8009f84:	3330      	adds	r3, #48	@ 0x30
 8009f86:	9003      	str	r0, [sp, #12]
 8009f88:	4639      	mov	r1, r7
 8009f8a:	9802      	ldr	r0, [sp, #8]
 8009f8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f8e:	f000 ffe3 	bl	800af58 <__mcmp>
 8009f92:	462a      	mov	r2, r5
 8009f94:	9004      	str	r0, [sp, #16]
 8009f96:	4621      	mov	r1, r4
 8009f98:	4648      	mov	r0, r9
 8009f9a:	f000 fff9 	bl	800af90 <__mdiff>
 8009f9e:	68c2      	ldr	r2, [r0, #12]
 8009fa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	bb02      	cbnz	r2, 8009fe8 <_dtoa_r+0xa40>
 8009fa6:	4601      	mov	r1, r0
 8009fa8:	9802      	ldr	r0, [sp, #8]
 8009faa:	f000 ffd5 	bl	800af58 <__mcmp>
 8009fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	4631      	mov	r1, r6
 8009fb4:	4648      	mov	r0, r9
 8009fb6:	920c      	str	r2, [sp, #48]	@ 0x30
 8009fb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fba:	f000 fd51 	bl	800aa60 <_Bfree>
 8009fbe:	9b07      	ldr	r3, [sp, #28]
 8009fc0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009fc2:	9e00      	ldr	r6, [sp, #0]
 8009fc4:	ea42 0103 	orr.w	r1, r2, r3
 8009fc8:	9b06      	ldr	r3, [sp, #24]
 8009fca:	4319      	orrs	r1, r3
 8009fcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fce:	d10d      	bne.n	8009fec <_dtoa_r+0xa44>
 8009fd0:	2b39      	cmp	r3, #57	@ 0x39
 8009fd2:	d027      	beq.n	800a024 <_dtoa_r+0xa7c>
 8009fd4:	9a04      	ldr	r2, [sp, #16]
 8009fd6:	2a00      	cmp	r2, #0
 8009fd8:	dd01      	ble.n	8009fde <_dtoa_r+0xa36>
 8009fda:	9b03      	ldr	r3, [sp, #12]
 8009fdc:	3331      	adds	r3, #49	@ 0x31
 8009fde:	f88b 3000 	strb.w	r3, [fp]
 8009fe2:	e52e      	b.n	8009a42 <_dtoa_r+0x49a>
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	e7b9      	b.n	8009f5c <_dtoa_r+0x9b4>
 8009fe8:	2201      	movs	r2, #1
 8009fea:	e7e2      	b.n	8009fb2 <_dtoa_r+0xa0a>
 8009fec:	9904      	ldr	r1, [sp, #16]
 8009fee:	2900      	cmp	r1, #0
 8009ff0:	db04      	blt.n	8009ffc <_dtoa_r+0xa54>
 8009ff2:	9807      	ldr	r0, [sp, #28]
 8009ff4:	4301      	orrs	r1, r0
 8009ff6:	9806      	ldr	r0, [sp, #24]
 8009ff8:	4301      	orrs	r1, r0
 8009ffa:	d120      	bne.n	800a03e <_dtoa_r+0xa96>
 8009ffc:	2a00      	cmp	r2, #0
 8009ffe:	ddee      	ble.n	8009fde <_dtoa_r+0xa36>
 800a000:	9902      	ldr	r1, [sp, #8]
 800a002:	9300      	str	r3, [sp, #0]
 800a004:	2201      	movs	r2, #1
 800a006:	4648      	mov	r0, r9
 800a008:	f000 ff3a 	bl	800ae80 <__lshift>
 800a00c:	4621      	mov	r1, r4
 800a00e:	9002      	str	r0, [sp, #8]
 800a010:	f000 ffa2 	bl	800af58 <__mcmp>
 800a014:	2800      	cmp	r0, #0
 800a016:	9b00      	ldr	r3, [sp, #0]
 800a018:	dc02      	bgt.n	800a020 <_dtoa_r+0xa78>
 800a01a:	d1e0      	bne.n	8009fde <_dtoa_r+0xa36>
 800a01c:	07da      	lsls	r2, r3, #31
 800a01e:	d5de      	bpl.n	8009fde <_dtoa_r+0xa36>
 800a020:	2b39      	cmp	r3, #57	@ 0x39
 800a022:	d1da      	bne.n	8009fda <_dtoa_r+0xa32>
 800a024:	2339      	movs	r3, #57	@ 0x39
 800a026:	f88b 3000 	strb.w	r3, [fp]
 800a02a:	4633      	mov	r3, r6
 800a02c:	461e      	mov	r6, r3
 800a02e:	3b01      	subs	r3, #1
 800a030:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a034:	2a39      	cmp	r2, #57	@ 0x39
 800a036:	d04e      	beq.n	800a0d6 <_dtoa_r+0xb2e>
 800a038:	3201      	adds	r2, #1
 800a03a:	701a      	strb	r2, [r3, #0]
 800a03c:	e501      	b.n	8009a42 <_dtoa_r+0x49a>
 800a03e:	2a00      	cmp	r2, #0
 800a040:	dd03      	ble.n	800a04a <_dtoa_r+0xaa2>
 800a042:	2b39      	cmp	r3, #57	@ 0x39
 800a044:	d0ee      	beq.n	800a024 <_dtoa_r+0xa7c>
 800a046:	3301      	adds	r3, #1
 800a048:	e7c9      	b.n	8009fde <_dtoa_r+0xa36>
 800a04a:	9a00      	ldr	r2, [sp, #0]
 800a04c:	9908      	ldr	r1, [sp, #32]
 800a04e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a052:	428a      	cmp	r2, r1
 800a054:	d028      	beq.n	800a0a8 <_dtoa_r+0xb00>
 800a056:	9902      	ldr	r1, [sp, #8]
 800a058:	2300      	movs	r3, #0
 800a05a:	220a      	movs	r2, #10
 800a05c:	4648      	mov	r0, r9
 800a05e:	f000 fd21 	bl	800aaa4 <__multadd>
 800a062:	42af      	cmp	r7, r5
 800a064:	9002      	str	r0, [sp, #8]
 800a066:	f04f 0300 	mov.w	r3, #0
 800a06a:	f04f 020a 	mov.w	r2, #10
 800a06e:	4639      	mov	r1, r7
 800a070:	4648      	mov	r0, r9
 800a072:	d107      	bne.n	800a084 <_dtoa_r+0xadc>
 800a074:	f000 fd16 	bl	800aaa4 <__multadd>
 800a078:	4607      	mov	r7, r0
 800a07a:	4605      	mov	r5, r0
 800a07c:	9b00      	ldr	r3, [sp, #0]
 800a07e:	3301      	adds	r3, #1
 800a080:	9300      	str	r3, [sp, #0]
 800a082:	e777      	b.n	8009f74 <_dtoa_r+0x9cc>
 800a084:	f000 fd0e 	bl	800aaa4 <__multadd>
 800a088:	4629      	mov	r1, r5
 800a08a:	4607      	mov	r7, r0
 800a08c:	2300      	movs	r3, #0
 800a08e:	220a      	movs	r2, #10
 800a090:	4648      	mov	r0, r9
 800a092:	f000 fd07 	bl	800aaa4 <__multadd>
 800a096:	4605      	mov	r5, r0
 800a098:	e7f0      	b.n	800a07c <_dtoa_r+0xad4>
 800a09a:	f1bb 0f00 	cmp.w	fp, #0
 800a09e:	bfcc      	ite	gt
 800a0a0:	465e      	movgt	r6, fp
 800a0a2:	2601      	movle	r6, #1
 800a0a4:	4456      	add	r6, sl
 800a0a6:	2700      	movs	r7, #0
 800a0a8:	9902      	ldr	r1, [sp, #8]
 800a0aa:	9300      	str	r3, [sp, #0]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	4648      	mov	r0, r9
 800a0b0:	f000 fee6 	bl	800ae80 <__lshift>
 800a0b4:	4621      	mov	r1, r4
 800a0b6:	9002      	str	r0, [sp, #8]
 800a0b8:	f000 ff4e 	bl	800af58 <__mcmp>
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	dcb4      	bgt.n	800a02a <_dtoa_r+0xa82>
 800a0c0:	d102      	bne.n	800a0c8 <_dtoa_r+0xb20>
 800a0c2:	9b00      	ldr	r3, [sp, #0]
 800a0c4:	07db      	lsls	r3, r3, #31
 800a0c6:	d4b0      	bmi.n	800a02a <_dtoa_r+0xa82>
 800a0c8:	4633      	mov	r3, r6
 800a0ca:	461e      	mov	r6, r3
 800a0cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0d0:	2a30      	cmp	r2, #48	@ 0x30
 800a0d2:	d0fa      	beq.n	800a0ca <_dtoa_r+0xb22>
 800a0d4:	e4b5      	b.n	8009a42 <_dtoa_r+0x49a>
 800a0d6:	459a      	cmp	sl, r3
 800a0d8:	d1a8      	bne.n	800a02c <_dtoa_r+0xa84>
 800a0da:	2331      	movs	r3, #49	@ 0x31
 800a0dc:	f108 0801 	add.w	r8, r8, #1
 800a0e0:	f88a 3000 	strb.w	r3, [sl]
 800a0e4:	e4ad      	b.n	8009a42 <_dtoa_r+0x49a>
 800a0e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a0e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a144 <_dtoa_r+0xb9c>
 800a0ec:	b11b      	cbz	r3, 800a0f6 <_dtoa_r+0xb4e>
 800a0ee:	f10a 0308 	add.w	r3, sl, #8
 800a0f2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a0f4:	6013      	str	r3, [r2, #0]
 800a0f6:	4650      	mov	r0, sl
 800a0f8:	b017      	add	sp, #92	@ 0x5c
 800a0fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fe:	9b07      	ldr	r3, [sp, #28]
 800a100:	2b01      	cmp	r3, #1
 800a102:	f77f ae2e 	ble.w	8009d62 <_dtoa_r+0x7ba>
 800a106:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a108:	9308      	str	r3, [sp, #32]
 800a10a:	2001      	movs	r0, #1
 800a10c:	e64d      	b.n	8009daa <_dtoa_r+0x802>
 800a10e:	f1bb 0f00 	cmp.w	fp, #0
 800a112:	f77f aed9 	ble.w	8009ec8 <_dtoa_r+0x920>
 800a116:	4656      	mov	r6, sl
 800a118:	9802      	ldr	r0, [sp, #8]
 800a11a:	4621      	mov	r1, r4
 800a11c:	f7ff f9ba 	bl	8009494 <quorem>
 800a120:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a124:	f806 3b01 	strb.w	r3, [r6], #1
 800a128:	eba6 020a 	sub.w	r2, r6, sl
 800a12c:	4593      	cmp	fp, r2
 800a12e:	ddb4      	ble.n	800a09a <_dtoa_r+0xaf2>
 800a130:	9902      	ldr	r1, [sp, #8]
 800a132:	2300      	movs	r3, #0
 800a134:	220a      	movs	r2, #10
 800a136:	4648      	mov	r0, r9
 800a138:	f000 fcb4 	bl	800aaa4 <__multadd>
 800a13c:	9002      	str	r0, [sp, #8]
 800a13e:	e7eb      	b.n	800a118 <_dtoa_r+0xb70>
 800a140:	0800c133 	.word	0x0800c133
 800a144:	0800c0b7 	.word	0x0800c0b7

0800a148 <_free_r>:
 800a148:	b538      	push	{r3, r4, r5, lr}
 800a14a:	4605      	mov	r5, r0
 800a14c:	2900      	cmp	r1, #0
 800a14e:	d041      	beq.n	800a1d4 <_free_r+0x8c>
 800a150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a154:	1f0c      	subs	r4, r1, #4
 800a156:	2b00      	cmp	r3, #0
 800a158:	bfb8      	it	lt
 800a15a:	18e4      	addlt	r4, r4, r3
 800a15c:	f000 fc34 	bl	800a9c8 <__malloc_lock>
 800a160:	4a1d      	ldr	r2, [pc, #116]	@ (800a1d8 <_free_r+0x90>)
 800a162:	6813      	ldr	r3, [r2, #0]
 800a164:	b933      	cbnz	r3, 800a174 <_free_r+0x2c>
 800a166:	6063      	str	r3, [r4, #4]
 800a168:	6014      	str	r4, [r2, #0]
 800a16a:	4628      	mov	r0, r5
 800a16c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a170:	f000 bc30 	b.w	800a9d4 <__malloc_unlock>
 800a174:	42a3      	cmp	r3, r4
 800a176:	d908      	bls.n	800a18a <_free_r+0x42>
 800a178:	6820      	ldr	r0, [r4, #0]
 800a17a:	1821      	adds	r1, r4, r0
 800a17c:	428b      	cmp	r3, r1
 800a17e:	bf01      	itttt	eq
 800a180:	6819      	ldreq	r1, [r3, #0]
 800a182:	685b      	ldreq	r3, [r3, #4]
 800a184:	1809      	addeq	r1, r1, r0
 800a186:	6021      	streq	r1, [r4, #0]
 800a188:	e7ed      	b.n	800a166 <_free_r+0x1e>
 800a18a:	461a      	mov	r2, r3
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	b10b      	cbz	r3, 800a194 <_free_r+0x4c>
 800a190:	42a3      	cmp	r3, r4
 800a192:	d9fa      	bls.n	800a18a <_free_r+0x42>
 800a194:	6811      	ldr	r1, [r2, #0]
 800a196:	1850      	adds	r0, r2, r1
 800a198:	42a0      	cmp	r0, r4
 800a19a:	d10b      	bne.n	800a1b4 <_free_r+0x6c>
 800a19c:	6820      	ldr	r0, [r4, #0]
 800a19e:	4401      	add	r1, r0
 800a1a0:	1850      	adds	r0, r2, r1
 800a1a2:	4283      	cmp	r3, r0
 800a1a4:	6011      	str	r1, [r2, #0]
 800a1a6:	d1e0      	bne.n	800a16a <_free_r+0x22>
 800a1a8:	6818      	ldr	r0, [r3, #0]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	6053      	str	r3, [r2, #4]
 800a1ae:	4408      	add	r0, r1
 800a1b0:	6010      	str	r0, [r2, #0]
 800a1b2:	e7da      	b.n	800a16a <_free_r+0x22>
 800a1b4:	d902      	bls.n	800a1bc <_free_r+0x74>
 800a1b6:	230c      	movs	r3, #12
 800a1b8:	602b      	str	r3, [r5, #0]
 800a1ba:	e7d6      	b.n	800a16a <_free_r+0x22>
 800a1bc:	6820      	ldr	r0, [r4, #0]
 800a1be:	1821      	adds	r1, r4, r0
 800a1c0:	428b      	cmp	r3, r1
 800a1c2:	bf04      	itt	eq
 800a1c4:	6819      	ldreq	r1, [r3, #0]
 800a1c6:	685b      	ldreq	r3, [r3, #4]
 800a1c8:	6063      	str	r3, [r4, #4]
 800a1ca:	bf04      	itt	eq
 800a1cc:	1809      	addeq	r1, r1, r0
 800a1ce:	6021      	streq	r1, [r4, #0]
 800a1d0:	6054      	str	r4, [r2, #4]
 800a1d2:	e7ca      	b.n	800a16a <_free_r+0x22>
 800a1d4:	bd38      	pop	{r3, r4, r5, pc}
 800a1d6:	bf00      	nop
 800a1d8:	20005720 	.word	0x20005720

0800a1dc <rshift>:
 800a1dc:	6903      	ldr	r3, [r0, #16]
 800a1de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a1e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a1e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a1ea:	f100 0414 	add.w	r4, r0, #20
 800a1ee:	dd45      	ble.n	800a27c <rshift+0xa0>
 800a1f0:	f011 011f 	ands.w	r1, r1, #31
 800a1f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a1f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a1fc:	d10c      	bne.n	800a218 <rshift+0x3c>
 800a1fe:	f100 0710 	add.w	r7, r0, #16
 800a202:	4629      	mov	r1, r5
 800a204:	42b1      	cmp	r1, r6
 800a206:	d334      	bcc.n	800a272 <rshift+0x96>
 800a208:	1a9b      	subs	r3, r3, r2
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	1eea      	subs	r2, r5, #3
 800a20e:	4296      	cmp	r6, r2
 800a210:	bf38      	it	cc
 800a212:	2300      	movcc	r3, #0
 800a214:	4423      	add	r3, r4
 800a216:	e015      	b.n	800a244 <rshift+0x68>
 800a218:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a21c:	f1c1 0820 	rsb	r8, r1, #32
 800a220:	40cf      	lsrs	r7, r1
 800a222:	f105 0e04 	add.w	lr, r5, #4
 800a226:	46a1      	mov	r9, r4
 800a228:	4576      	cmp	r6, lr
 800a22a:	46f4      	mov	ip, lr
 800a22c:	d815      	bhi.n	800a25a <rshift+0x7e>
 800a22e:	1a9a      	subs	r2, r3, r2
 800a230:	0092      	lsls	r2, r2, #2
 800a232:	3a04      	subs	r2, #4
 800a234:	3501      	adds	r5, #1
 800a236:	42ae      	cmp	r6, r5
 800a238:	bf38      	it	cc
 800a23a:	2200      	movcc	r2, #0
 800a23c:	18a3      	adds	r3, r4, r2
 800a23e:	50a7      	str	r7, [r4, r2]
 800a240:	b107      	cbz	r7, 800a244 <rshift+0x68>
 800a242:	3304      	adds	r3, #4
 800a244:	1b1a      	subs	r2, r3, r4
 800a246:	42a3      	cmp	r3, r4
 800a248:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a24c:	bf08      	it	eq
 800a24e:	2300      	moveq	r3, #0
 800a250:	6102      	str	r2, [r0, #16]
 800a252:	bf08      	it	eq
 800a254:	6143      	streq	r3, [r0, #20]
 800a256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a25a:	f8dc c000 	ldr.w	ip, [ip]
 800a25e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a262:	ea4c 0707 	orr.w	r7, ip, r7
 800a266:	f849 7b04 	str.w	r7, [r9], #4
 800a26a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a26e:	40cf      	lsrs	r7, r1
 800a270:	e7da      	b.n	800a228 <rshift+0x4c>
 800a272:	f851 cb04 	ldr.w	ip, [r1], #4
 800a276:	f847 cf04 	str.w	ip, [r7, #4]!
 800a27a:	e7c3      	b.n	800a204 <rshift+0x28>
 800a27c:	4623      	mov	r3, r4
 800a27e:	e7e1      	b.n	800a244 <rshift+0x68>

0800a280 <__hexdig_fun>:
 800a280:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a284:	2b09      	cmp	r3, #9
 800a286:	d802      	bhi.n	800a28e <__hexdig_fun+0xe>
 800a288:	3820      	subs	r0, #32
 800a28a:	b2c0      	uxtb	r0, r0
 800a28c:	4770      	bx	lr
 800a28e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a292:	2b05      	cmp	r3, #5
 800a294:	d801      	bhi.n	800a29a <__hexdig_fun+0x1a>
 800a296:	3847      	subs	r0, #71	@ 0x47
 800a298:	e7f7      	b.n	800a28a <__hexdig_fun+0xa>
 800a29a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a29e:	2b05      	cmp	r3, #5
 800a2a0:	d801      	bhi.n	800a2a6 <__hexdig_fun+0x26>
 800a2a2:	3827      	subs	r0, #39	@ 0x27
 800a2a4:	e7f1      	b.n	800a28a <__hexdig_fun+0xa>
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	4770      	bx	lr
	...

0800a2ac <__gethex>:
 800a2ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b0:	b085      	sub	sp, #20
 800a2b2:	468a      	mov	sl, r1
 800a2b4:	9302      	str	r3, [sp, #8]
 800a2b6:	680b      	ldr	r3, [r1, #0]
 800a2b8:	9001      	str	r0, [sp, #4]
 800a2ba:	4690      	mov	r8, r2
 800a2bc:	1c9c      	adds	r4, r3, #2
 800a2be:	46a1      	mov	r9, r4
 800a2c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a2c4:	2830      	cmp	r0, #48	@ 0x30
 800a2c6:	d0fa      	beq.n	800a2be <__gethex+0x12>
 800a2c8:	eba9 0303 	sub.w	r3, r9, r3
 800a2cc:	f1a3 0b02 	sub.w	fp, r3, #2
 800a2d0:	f7ff ffd6 	bl	800a280 <__hexdig_fun>
 800a2d4:	4605      	mov	r5, r0
 800a2d6:	2800      	cmp	r0, #0
 800a2d8:	d168      	bne.n	800a3ac <__gethex+0x100>
 800a2da:	49a0      	ldr	r1, [pc, #640]	@ (800a55c <__gethex+0x2b0>)
 800a2dc:	2201      	movs	r2, #1
 800a2de:	4648      	mov	r0, r9
 800a2e0:	f7fe ffa7 	bl	8009232 <strncmp>
 800a2e4:	4607      	mov	r7, r0
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	d167      	bne.n	800a3ba <__gethex+0x10e>
 800a2ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a2ee:	4626      	mov	r6, r4
 800a2f0:	f7ff ffc6 	bl	800a280 <__hexdig_fun>
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	d062      	beq.n	800a3be <__gethex+0x112>
 800a2f8:	4623      	mov	r3, r4
 800a2fa:	7818      	ldrb	r0, [r3, #0]
 800a2fc:	2830      	cmp	r0, #48	@ 0x30
 800a2fe:	4699      	mov	r9, r3
 800a300:	f103 0301 	add.w	r3, r3, #1
 800a304:	d0f9      	beq.n	800a2fa <__gethex+0x4e>
 800a306:	f7ff ffbb 	bl	800a280 <__hexdig_fun>
 800a30a:	fab0 f580 	clz	r5, r0
 800a30e:	096d      	lsrs	r5, r5, #5
 800a310:	f04f 0b01 	mov.w	fp, #1
 800a314:	464a      	mov	r2, r9
 800a316:	4616      	mov	r6, r2
 800a318:	3201      	adds	r2, #1
 800a31a:	7830      	ldrb	r0, [r6, #0]
 800a31c:	f7ff ffb0 	bl	800a280 <__hexdig_fun>
 800a320:	2800      	cmp	r0, #0
 800a322:	d1f8      	bne.n	800a316 <__gethex+0x6a>
 800a324:	498d      	ldr	r1, [pc, #564]	@ (800a55c <__gethex+0x2b0>)
 800a326:	2201      	movs	r2, #1
 800a328:	4630      	mov	r0, r6
 800a32a:	f7fe ff82 	bl	8009232 <strncmp>
 800a32e:	2800      	cmp	r0, #0
 800a330:	d13f      	bne.n	800a3b2 <__gethex+0x106>
 800a332:	b944      	cbnz	r4, 800a346 <__gethex+0x9a>
 800a334:	1c74      	adds	r4, r6, #1
 800a336:	4622      	mov	r2, r4
 800a338:	4616      	mov	r6, r2
 800a33a:	3201      	adds	r2, #1
 800a33c:	7830      	ldrb	r0, [r6, #0]
 800a33e:	f7ff ff9f 	bl	800a280 <__hexdig_fun>
 800a342:	2800      	cmp	r0, #0
 800a344:	d1f8      	bne.n	800a338 <__gethex+0x8c>
 800a346:	1ba4      	subs	r4, r4, r6
 800a348:	00a7      	lsls	r7, r4, #2
 800a34a:	7833      	ldrb	r3, [r6, #0]
 800a34c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a350:	2b50      	cmp	r3, #80	@ 0x50
 800a352:	d13e      	bne.n	800a3d2 <__gethex+0x126>
 800a354:	7873      	ldrb	r3, [r6, #1]
 800a356:	2b2b      	cmp	r3, #43	@ 0x2b
 800a358:	d033      	beq.n	800a3c2 <__gethex+0x116>
 800a35a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a35c:	d034      	beq.n	800a3c8 <__gethex+0x11c>
 800a35e:	1c71      	adds	r1, r6, #1
 800a360:	2400      	movs	r4, #0
 800a362:	7808      	ldrb	r0, [r1, #0]
 800a364:	f7ff ff8c 	bl	800a280 <__hexdig_fun>
 800a368:	1e43      	subs	r3, r0, #1
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	2b18      	cmp	r3, #24
 800a36e:	d830      	bhi.n	800a3d2 <__gethex+0x126>
 800a370:	f1a0 0210 	sub.w	r2, r0, #16
 800a374:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a378:	f7ff ff82 	bl	800a280 <__hexdig_fun>
 800a37c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a380:	fa5f fc8c 	uxtb.w	ip, ip
 800a384:	f1bc 0f18 	cmp.w	ip, #24
 800a388:	f04f 030a 	mov.w	r3, #10
 800a38c:	d91e      	bls.n	800a3cc <__gethex+0x120>
 800a38e:	b104      	cbz	r4, 800a392 <__gethex+0xe6>
 800a390:	4252      	negs	r2, r2
 800a392:	4417      	add	r7, r2
 800a394:	f8ca 1000 	str.w	r1, [sl]
 800a398:	b1ed      	cbz	r5, 800a3d6 <__gethex+0x12a>
 800a39a:	f1bb 0f00 	cmp.w	fp, #0
 800a39e:	bf0c      	ite	eq
 800a3a0:	2506      	moveq	r5, #6
 800a3a2:	2500      	movne	r5, #0
 800a3a4:	4628      	mov	r0, r5
 800a3a6:	b005      	add	sp, #20
 800a3a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ac:	2500      	movs	r5, #0
 800a3ae:	462c      	mov	r4, r5
 800a3b0:	e7b0      	b.n	800a314 <__gethex+0x68>
 800a3b2:	2c00      	cmp	r4, #0
 800a3b4:	d1c7      	bne.n	800a346 <__gethex+0x9a>
 800a3b6:	4627      	mov	r7, r4
 800a3b8:	e7c7      	b.n	800a34a <__gethex+0x9e>
 800a3ba:	464e      	mov	r6, r9
 800a3bc:	462f      	mov	r7, r5
 800a3be:	2501      	movs	r5, #1
 800a3c0:	e7c3      	b.n	800a34a <__gethex+0x9e>
 800a3c2:	2400      	movs	r4, #0
 800a3c4:	1cb1      	adds	r1, r6, #2
 800a3c6:	e7cc      	b.n	800a362 <__gethex+0xb6>
 800a3c8:	2401      	movs	r4, #1
 800a3ca:	e7fb      	b.n	800a3c4 <__gethex+0x118>
 800a3cc:	fb03 0002 	mla	r0, r3, r2, r0
 800a3d0:	e7ce      	b.n	800a370 <__gethex+0xc4>
 800a3d2:	4631      	mov	r1, r6
 800a3d4:	e7de      	b.n	800a394 <__gethex+0xe8>
 800a3d6:	eba6 0309 	sub.w	r3, r6, r9
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	4629      	mov	r1, r5
 800a3de:	2b07      	cmp	r3, #7
 800a3e0:	dc0a      	bgt.n	800a3f8 <__gethex+0x14c>
 800a3e2:	9801      	ldr	r0, [sp, #4]
 800a3e4:	f000 fafc 	bl	800a9e0 <_Balloc>
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	b940      	cbnz	r0, 800a3fe <__gethex+0x152>
 800a3ec:	4b5c      	ldr	r3, [pc, #368]	@ (800a560 <__gethex+0x2b4>)
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	21e4      	movs	r1, #228	@ 0xe4
 800a3f2:	485c      	ldr	r0, [pc, #368]	@ (800a564 <__gethex+0x2b8>)
 800a3f4:	f001 fa54 	bl	800b8a0 <__assert_func>
 800a3f8:	3101      	adds	r1, #1
 800a3fa:	105b      	asrs	r3, r3, #1
 800a3fc:	e7ef      	b.n	800a3de <__gethex+0x132>
 800a3fe:	f100 0a14 	add.w	sl, r0, #20
 800a402:	2300      	movs	r3, #0
 800a404:	4655      	mov	r5, sl
 800a406:	469b      	mov	fp, r3
 800a408:	45b1      	cmp	r9, r6
 800a40a:	d337      	bcc.n	800a47c <__gethex+0x1d0>
 800a40c:	f845 bb04 	str.w	fp, [r5], #4
 800a410:	eba5 050a 	sub.w	r5, r5, sl
 800a414:	10ad      	asrs	r5, r5, #2
 800a416:	6125      	str	r5, [r4, #16]
 800a418:	4658      	mov	r0, fp
 800a41a:	f000 fbd3 	bl	800abc4 <__hi0bits>
 800a41e:	016d      	lsls	r5, r5, #5
 800a420:	f8d8 6000 	ldr.w	r6, [r8]
 800a424:	1a2d      	subs	r5, r5, r0
 800a426:	42b5      	cmp	r5, r6
 800a428:	dd54      	ble.n	800a4d4 <__gethex+0x228>
 800a42a:	1bad      	subs	r5, r5, r6
 800a42c:	4629      	mov	r1, r5
 800a42e:	4620      	mov	r0, r4
 800a430:	f000 ff5f 	bl	800b2f2 <__any_on>
 800a434:	4681      	mov	r9, r0
 800a436:	b178      	cbz	r0, 800a458 <__gethex+0x1ac>
 800a438:	1e6b      	subs	r3, r5, #1
 800a43a:	1159      	asrs	r1, r3, #5
 800a43c:	f003 021f 	and.w	r2, r3, #31
 800a440:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a444:	f04f 0901 	mov.w	r9, #1
 800a448:	fa09 f202 	lsl.w	r2, r9, r2
 800a44c:	420a      	tst	r2, r1
 800a44e:	d003      	beq.n	800a458 <__gethex+0x1ac>
 800a450:	454b      	cmp	r3, r9
 800a452:	dc36      	bgt.n	800a4c2 <__gethex+0x216>
 800a454:	f04f 0902 	mov.w	r9, #2
 800a458:	4629      	mov	r1, r5
 800a45a:	4620      	mov	r0, r4
 800a45c:	f7ff febe 	bl	800a1dc <rshift>
 800a460:	442f      	add	r7, r5
 800a462:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a466:	42bb      	cmp	r3, r7
 800a468:	da42      	bge.n	800a4f0 <__gethex+0x244>
 800a46a:	9801      	ldr	r0, [sp, #4]
 800a46c:	4621      	mov	r1, r4
 800a46e:	f000 faf7 	bl	800aa60 <_Bfree>
 800a472:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a474:	2300      	movs	r3, #0
 800a476:	6013      	str	r3, [r2, #0]
 800a478:	25a3      	movs	r5, #163	@ 0xa3
 800a47a:	e793      	b.n	800a3a4 <__gethex+0xf8>
 800a47c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a480:	2a2e      	cmp	r2, #46	@ 0x2e
 800a482:	d012      	beq.n	800a4aa <__gethex+0x1fe>
 800a484:	2b20      	cmp	r3, #32
 800a486:	d104      	bne.n	800a492 <__gethex+0x1e6>
 800a488:	f845 bb04 	str.w	fp, [r5], #4
 800a48c:	f04f 0b00 	mov.w	fp, #0
 800a490:	465b      	mov	r3, fp
 800a492:	7830      	ldrb	r0, [r6, #0]
 800a494:	9303      	str	r3, [sp, #12]
 800a496:	f7ff fef3 	bl	800a280 <__hexdig_fun>
 800a49a:	9b03      	ldr	r3, [sp, #12]
 800a49c:	f000 000f 	and.w	r0, r0, #15
 800a4a0:	4098      	lsls	r0, r3
 800a4a2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a4a6:	3304      	adds	r3, #4
 800a4a8:	e7ae      	b.n	800a408 <__gethex+0x15c>
 800a4aa:	45b1      	cmp	r9, r6
 800a4ac:	d8ea      	bhi.n	800a484 <__gethex+0x1d8>
 800a4ae:	492b      	ldr	r1, [pc, #172]	@ (800a55c <__gethex+0x2b0>)
 800a4b0:	9303      	str	r3, [sp, #12]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	f7fe febc 	bl	8009232 <strncmp>
 800a4ba:	9b03      	ldr	r3, [sp, #12]
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	d1e1      	bne.n	800a484 <__gethex+0x1d8>
 800a4c0:	e7a2      	b.n	800a408 <__gethex+0x15c>
 800a4c2:	1ea9      	subs	r1, r5, #2
 800a4c4:	4620      	mov	r0, r4
 800a4c6:	f000 ff14 	bl	800b2f2 <__any_on>
 800a4ca:	2800      	cmp	r0, #0
 800a4cc:	d0c2      	beq.n	800a454 <__gethex+0x1a8>
 800a4ce:	f04f 0903 	mov.w	r9, #3
 800a4d2:	e7c1      	b.n	800a458 <__gethex+0x1ac>
 800a4d4:	da09      	bge.n	800a4ea <__gethex+0x23e>
 800a4d6:	1b75      	subs	r5, r6, r5
 800a4d8:	4621      	mov	r1, r4
 800a4da:	9801      	ldr	r0, [sp, #4]
 800a4dc:	462a      	mov	r2, r5
 800a4de:	f000 fccf 	bl	800ae80 <__lshift>
 800a4e2:	1b7f      	subs	r7, r7, r5
 800a4e4:	4604      	mov	r4, r0
 800a4e6:	f100 0a14 	add.w	sl, r0, #20
 800a4ea:	f04f 0900 	mov.w	r9, #0
 800a4ee:	e7b8      	b.n	800a462 <__gethex+0x1b6>
 800a4f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a4f4:	42bd      	cmp	r5, r7
 800a4f6:	dd6f      	ble.n	800a5d8 <__gethex+0x32c>
 800a4f8:	1bed      	subs	r5, r5, r7
 800a4fa:	42ae      	cmp	r6, r5
 800a4fc:	dc34      	bgt.n	800a568 <__gethex+0x2bc>
 800a4fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a502:	2b02      	cmp	r3, #2
 800a504:	d022      	beq.n	800a54c <__gethex+0x2a0>
 800a506:	2b03      	cmp	r3, #3
 800a508:	d024      	beq.n	800a554 <__gethex+0x2a8>
 800a50a:	2b01      	cmp	r3, #1
 800a50c:	d115      	bne.n	800a53a <__gethex+0x28e>
 800a50e:	42ae      	cmp	r6, r5
 800a510:	d113      	bne.n	800a53a <__gethex+0x28e>
 800a512:	2e01      	cmp	r6, #1
 800a514:	d10b      	bne.n	800a52e <__gethex+0x282>
 800a516:	9a02      	ldr	r2, [sp, #8]
 800a518:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a51c:	6013      	str	r3, [r2, #0]
 800a51e:	2301      	movs	r3, #1
 800a520:	6123      	str	r3, [r4, #16]
 800a522:	f8ca 3000 	str.w	r3, [sl]
 800a526:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a528:	2562      	movs	r5, #98	@ 0x62
 800a52a:	601c      	str	r4, [r3, #0]
 800a52c:	e73a      	b.n	800a3a4 <__gethex+0xf8>
 800a52e:	1e71      	subs	r1, r6, #1
 800a530:	4620      	mov	r0, r4
 800a532:	f000 fede 	bl	800b2f2 <__any_on>
 800a536:	2800      	cmp	r0, #0
 800a538:	d1ed      	bne.n	800a516 <__gethex+0x26a>
 800a53a:	9801      	ldr	r0, [sp, #4]
 800a53c:	4621      	mov	r1, r4
 800a53e:	f000 fa8f 	bl	800aa60 <_Bfree>
 800a542:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a544:	2300      	movs	r3, #0
 800a546:	6013      	str	r3, [r2, #0]
 800a548:	2550      	movs	r5, #80	@ 0x50
 800a54a:	e72b      	b.n	800a3a4 <__gethex+0xf8>
 800a54c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1f3      	bne.n	800a53a <__gethex+0x28e>
 800a552:	e7e0      	b.n	800a516 <__gethex+0x26a>
 800a554:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a556:	2b00      	cmp	r3, #0
 800a558:	d1dd      	bne.n	800a516 <__gethex+0x26a>
 800a55a:	e7ee      	b.n	800a53a <__gethex+0x28e>
 800a55c:	0800c074 	.word	0x0800c074
 800a560:	0800c133 	.word	0x0800c133
 800a564:	0800c144 	.word	0x0800c144
 800a568:	1e6f      	subs	r7, r5, #1
 800a56a:	f1b9 0f00 	cmp.w	r9, #0
 800a56e:	d130      	bne.n	800a5d2 <__gethex+0x326>
 800a570:	b127      	cbz	r7, 800a57c <__gethex+0x2d0>
 800a572:	4639      	mov	r1, r7
 800a574:	4620      	mov	r0, r4
 800a576:	f000 febc 	bl	800b2f2 <__any_on>
 800a57a:	4681      	mov	r9, r0
 800a57c:	117a      	asrs	r2, r7, #5
 800a57e:	2301      	movs	r3, #1
 800a580:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a584:	f007 071f 	and.w	r7, r7, #31
 800a588:	40bb      	lsls	r3, r7
 800a58a:	4213      	tst	r3, r2
 800a58c:	4629      	mov	r1, r5
 800a58e:	4620      	mov	r0, r4
 800a590:	bf18      	it	ne
 800a592:	f049 0902 	orrne.w	r9, r9, #2
 800a596:	f7ff fe21 	bl	800a1dc <rshift>
 800a59a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a59e:	1b76      	subs	r6, r6, r5
 800a5a0:	2502      	movs	r5, #2
 800a5a2:	f1b9 0f00 	cmp.w	r9, #0
 800a5a6:	d047      	beq.n	800a638 <__gethex+0x38c>
 800a5a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5ac:	2b02      	cmp	r3, #2
 800a5ae:	d015      	beq.n	800a5dc <__gethex+0x330>
 800a5b0:	2b03      	cmp	r3, #3
 800a5b2:	d017      	beq.n	800a5e4 <__gethex+0x338>
 800a5b4:	2b01      	cmp	r3, #1
 800a5b6:	d109      	bne.n	800a5cc <__gethex+0x320>
 800a5b8:	f019 0f02 	tst.w	r9, #2
 800a5bc:	d006      	beq.n	800a5cc <__gethex+0x320>
 800a5be:	f8da 3000 	ldr.w	r3, [sl]
 800a5c2:	ea49 0903 	orr.w	r9, r9, r3
 800a5c6:	f019 0f01 	tst.w	r9, #1
 800a5ca:	d10e      	bne.n	800a5ea <__gethex+0x33e>
 800a5cc:	f045 0510 	orr.w	r5, r5, #16
 800a5d0:	e032      	b.n	800a638 <__gethex+0x38c>
 800a5d2:	f04f 0901 	mov.w	r9, #1
 800a5d6:	e7d1      	b.n	800a57c <__gethex+0x2d0>
 800a5d8:	2501      	movs	r5, #1
 800a5da:	e7e2      	b.n	800a5a2 <__gethex+0x2f6>
 800a5dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5de:	f1c3 0301 	rsb	r3, r3, #1
 800a5e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a5e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d0f0      	beq.n	800a5cc <__gethex+0x320>
 800a5ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a5ee:	f104 0314 	add.w	r3, r4, #20
 800a5f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a5f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a5fa:	f04f 0c00 	mov.w	ip, #0
 800a5fe:	4618      	mov	r0, r3
 800a600:	f853 2b04 	ldr.w	r2, [r3], #4
 800a604:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a608:	d01b      	beq.n	800a642 <__gethex+0x396>
 800a60a:	3201      	adds	r2, #1
 800a60c:	6002      	str	r2, [r0, #0]
 800a60e:	2d02      	cmp	r5, #2
 800a610:	f104 0314 	add.w	r3, r4, #20
 800a614:	d13c      	bne.n	800a690 <__gethex+0x3e4>
 800a616:	f8d8 2000 	ldr.w	r2, [r8]
 800a61a:	3a01      	subs	r2, #1
 800a61c:	42b2      	cmp	r2, r6
 800a61e:	d109      	bne.n	800a634 <__gethex+0x388>
 800a620:	1171      	asrs	r1, r6, #5
 800a622:	2201      	movs	r2, #1
 800a624:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a628:	f006 061f 	and.w	r6, r6, #31
 800a62c:	fa02 f606 	lsl.w	r6, r2, r6
 800a630:	421e      	tst	r6, r3
 800a632:	d13a      	bne.n	800a6aa <__gethex+0x3fe>
 800a634:	f045 0520 	orr.w	r5, r5, #32
 800a638:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a63a:	601c      	str	r4, [r3, #0]
 800a63c:	9b02      	ldr	r3, [sp, #8]
 800a63e:	601f      	str	r7, [r3, #0]
 800a640:	e6b0      	b.n	800a3a4 <__gethex+0xf8>
 800a642:	4299      	cmp	r1, r3
 800a644:	f843 cc04 	str.w	ip, [r3, #-4]
 800a648:	d8d9      	bhi.n	800a5fe <__gethex+0x352>
 800a64a:	68a3      	ldr	r3, [r4, #8]
 800a64c:	459b      	cmp	fp, r3
 800a64e:	db17      	blt.n	800a680 <__gethex+0x3d4>
 800a650:	6861      	ldr	r1, [r4, #4]
 800a652:	9801      	ldr	r0, [sp, #4]
 800a654:	3101      	adds	r1, #1
 800a656:	f000 f9c3 	bl	800a9e0 <_Balloc>
 800a65a:	4681      	mov	r9, r0
 800a65c:	b918      	cbnz	r0, 800a666 <__gethex+0x3ba>
 800a65e:	4b1a      	ldr	r3, [pc, #104]	@ (800a6c8 <__gethex+0x41c>)
 800a660:	4602      	mov	r2, r0
 800a662:	2184      	movs	r1, #132	@ 0x84
 800a664:	e6c5      	b.n	800a3f2 <__gethex+0x146>
 800a666:	6922      	ldr	r2, [r4, #16]
 800a668:	3202      	adds	r2, #2
 800a66a:	f104 010c 	add.w	r1, r4, #12
 800a66e:	0092      	lsls	r2, r2, #2
 800a670:	300c      	adds	r0, #12
 800a672:	f7fe fef0 	bl	8009456 <memcpy>
 800a676:	4621      	mov	r1, r4
 800a678:	9801      	ldr	r0, [sp, #4]
 800a67a:	f000 f9f1 	bl	800aa60 <_Bfree>
 800a67e:	464c      	mov	r4, r9
 800a680:	6923      	ldr	r3, [r4, #16]
 800a682:	1c5a      	adds	r2, r3, #1
 800a684:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a688:	6122      	str	r2, [r4, #16]
 800a68a:	2201      	movs	r2, #1
 800a68c:	615a      	str	r2, [r3, #20]
 800a68e:	e7be      	b.n	800a60e <__gethex+0x362>
 800a690:	6922      	ldr	r2, [r4, #16]
 800a692:	455a      	cmp	r2, fp
 800a694:	dd0b      	ble.n	800a6ae <__gethex+0x402>
 800a696:	2101      	movs	r1, #1
 800a698:	4620      	mov	r0, r4
 800a69a:	f7ff fd9f 	bl	800a1dc <rshift>
 800a69e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6a2:	3701      	adds	r7, #1
 800a6a4:	42bb      	cmp	r3, r7
 800a6a6:	f6ff aee0 	blt.w	800a46a <__gethex+0x1be>
 800a6aa:	2501      	movs	r5, #1
 800a6ac:	e7c2      	b.n	800a634 <__gethex+0x388>
 800a6ae:	f016 061f 	ands.w	r6, r6, #31
 800a6b2:	d0fa      	beq.n	800a6aa <__gethex+0x3fe>
 800a6b4:	4453      	add	r3, sl
 800a6b6:	f1c6 0620 	rsb	r6, r6, #32
 800a6ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a6be:	f000 fa81 	bl	800abc4 <__hi0bits>
 800a6c2:	42b0      	cmp	r0, r6
 800a6c4:	dbe7      	blt.n	800a696 <__gethex+0x3ea>
 800a6c6:	e7f0      	b.n	800a6aa <__gethex+0x3fe>
 800a6c8:	0800c133 	.word	0x0800c133

0800a6cc <L_shift>:
 800a6cc:	f1c2 0208 	rsb	r2, r2, #8
 800a6d0:	0092      	lsls	r2, r2, #2
 800a6d2:	b570      	push	{r4, r5, r6, lr}
 800a6d4:	f1c2 0620 	rsb	r6, r2, #32
 800a6d8:	6843      	ldr	r3, [r0, #4]
 800a6da:	6804      	ldr	r4, [r0, #0]
 800a6dc:	fa03 f506 	lsl.w	r5, r3, r6
 800a6e0:	432c      	orrs	r4, r5
 800a6e2:	40d3      	lsrs	r3, r2
 800a6e4:	6004      	str	r4, [r0, #0]
 800a6e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a6ea:	4288      	cmp	r0, r1
 800a6ec:	d3f4      	bcc.n	800a6d8 <L_shift+0xc>
 800a6ee:	bd70      	pop	{r4, r5, r6, pc}

0800a6f0 <__match>:
 800a6f0:	b530      	push	{r4, r5, lr}
 800a6f2:	6803      	ldr	r3, [r0, #0]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6fa:	b914      	cbnz	r4, 800a702 <__match+0x12>
 800a6fc:	6003      	str	r3, [r0, #0]
 800a6fe:	2001      	movs	r0, #1
 800a700:	bd30      	pop	{r4, r5, pc}
 800a702:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a706:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a70a:	2d19      	cmp	r5, #25
 800a70c:	bf98      	it	ls
 800a70e:	3220      	addls	r2, #32
 800a710:	42a2      	cmp	r2, r4
 800a712:	d0f0      	beq.n	800a6f6 <__match+0x6>
 800a714:	2000      	movs	r0, #0
 800a716:	e7f3      	b.n	800a700 <__match+0x10>

0800a718 <__hexnan>:
 800a718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a71c:	680b      	ldr	r3, [r1, #0]
 800a71e:	6801      	ldr	r1, [r0, #0]
 800a720:	115e      	asrs	r6, r3, #5
 800a722:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a726:	f013 031f 	ands.w	r3, r3, #31
 800a72a:	b087      	sub	sp, #28
 800a72c:	bf18      	it	ne
 800a72e:	3604      	addne	r6, #4
 800a730:	2500      	movs	r5, #0
 800a732:	1f37      	subs	r7, r6, #4
 800a734:	4682      	mov	sl, r0
 800a736:	4690      	mov	r8, r2
 800a738:	9301      	str	r3, [sp, #4]
 800a73a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a73e:	46b9      	mov	r9, r7
 800a740:	463c      	mov	r4, r7
 800a742:	9502      	str	r5, [sp, #8]
 800a744:	46ab      	mov	fp, r5
 800a746:	784a      	ldrb	r2, [r1, #1]
 800a748:	1c4b      	adds	r3, r1, #1
 800a74a:	9303      	str	r3, [sp, #12]
 800a74c:	b342      	cbz	r2, 800a7a0 <__hexnan+0x88>
 800a74e:	4610      	mov	r0, r2
 800a750:	9105      	str	r1, [sp, #20]
 800a752:	9204      	str	r2, [sp, #16]
 800a754:	f7ff fd94 	bl	800a280 <__hexdig_fun>
 800a758:	2800      	cmp	r0, #0
 800a75a:	d151      	bne.n	800a800 <__hexnan+0xe8>
 800a75c:	9a04      	ldr	r2, [sp, #16]
 800a75e:	9905      	ldr	r1, [sp, #20]
 800a760:	2a20      	cmp	r2, #32
 800a762:	d818      	bhi.n	800a796 <__hexnan+0x7e>
 800a764:	9b02      	ldr	r3, [sp, #8]
 800a766:	459b      	cmp	fp, r3
 800a768:	dd13      	ble.n	800a792 <__hexnan+0x7a>
 800a76a:	454c      	cmp	r4, r9
 800a76c:	d206      	bcs.n	800a77c <__hexnan+0x64>
 800a76e:	2d07      	cmp	r5, #7
 800a770:	dc04      	bgt.n	800a77c <__hexnan+0x64>
 800a772:	462a      	mov	r2, r5
 800a774:	4649      	mov	r1, r9
 800a776:	4620      	mov	r0, r4
 800a778:	f7ff ffa8 	bl	800a6cc <L_shift>
 800a77c:	4544      	cmp	r4, r8
 800a77e:	d952      	bls.n	800a826 <__hexnan+0x10e>
 800a780:	2300      	movs	r3, #0
 800a782:	f1a4 0904 	sub.w	r9, r4, #4
 800a786:	f844 3c04 	str.w	r3, [r4, #-4]
 800a78a:	f8cd b008 	str.w	fp, [sp, #8]
 800a78e:	464c      	mov	r4, r9
 800a790:	461d      	mov	r5, r3
 800a792:	9903      	ldr	r1, [sp, #12]
 800a794:	e7d7      	b.n	800a746 <__hexnan+0x2e>
 800a796:	2a29      	cmp	r2, #41	@ 0x29
 800a798:	d157      	bne.n	800a84a <__hexnan+0x132>
 800a79a:	3102      	adds	r1, #2
 800a79c:	f8ca 1000 	str.w	r1, [sl]
 800a7a0:	f1bb 0f00 	cmp.w	fp, #0
 800a7a4:	d051      	beq.n	800a84a <__hexnan+0x132>
 800a7a6:	454c      	cmp	r4, r9
 800a7a8:	d206      	bcs.n	800a7b8 <__hexnan+0xa0>
 800a7aa:	2d07      	cmp	r5, #7
 800a7ac:	dc04      	bgt.n	800a7b8 <__hexnan+0xa0>
 800a7ae:	462a      	mov	r2, r5
 800a7b0:	4649      	mov	r1, r9
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f7ff ff8a 	bl	800a6cc <L_shift>
 800a7b8:	4544      	cmp	r4, r8
 800a7ba:	d936      	bls.n	800a82a <__hexnan+0x112>
 800a7bc:	f1a8 0204 	sub.w	r2, r8, #4
 800a7c0:	4623      	mov	r3, r4
 800a7c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a7c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a7ca:	429f      	cmp	r7, r3
 800a7cc:	d2f9      	bcs.n	800a7c2 <__hexnan+0xaa>
 800a7ce:	1b3b      	subs	r3, r7, r4
 800a7d0:	f023 0303 	bic.w	r3, r3, #3
 800a7d4:	3304      	adds	r3, #4
 800a7d6:	3401      	adds	r4, #1
 800a7d8:	3e03      	subs	r6, #3
 800a7da:	42b4      	cmp	r4, r6
 800a7dc:	bf88      	it	hi
 800a7de:	2304      	movhi	r3, #4
 800a7e0:	4443      	add	r3, r8
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f843 2b04 	str.w	r2, [r3], #4
 800a7e8:	429f      	cmp	r7, r3
 800a7ea:	d2fb      	bcs.n	800a7e4 <__hexnan+0xcc>
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	b91b      	cbnz	r3, 800a7f8 <__hexnan+0xe0>
 800a7f0:	4547      	cmp	r7, r8
 800a7f2:	d128      	bne.n	800a846 <__hexnan+0x12e>
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	603b      	str	r3, [r7, #0]
 800a7f8:	2005      	movs	r0, #5
 800a7fa:	b007      	add	sp, #28
 800a7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a800:	3501      	adds	r5, #1
 800a802:	2d08      	cmp	r5, #8
 800a804:	f10b 0b01 	add.w	fp, fp, #1
 800a808:	dd06      	ble.n	800a818 <__hexnan+0x100>
 800a80a:	4544      	cmp	r4, r8
 800a80c:	d9c1      	bls.n	800a792 <__hexnan+0x7a>
 800a80e:	2300      	movs	r3, #0
 800a810:	f844 3c04 	str.w	r3, [r4, #-4]
 800a814:	2501      	movs	r5, #1
 800a816:	3c04      	subs	r4, #4
 800a818:	6822      	ldr	r2, [r4, #0]
 800a81a:	f000 000f 	and.w	r0, r0, #15
 800a81e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a822:	6020      	str	r0, [r4, #0]
 800a824:	e7b5      	b.n	800a792 <__hexnan+0x7a>
 800a826:	2508      	movs	r5, #8
 800a828:	e7b3      	b.n	800a792 <__hexnan+0x7a>
 800a82a:	9b01      	ldr	r3, [sp, #4]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d0dd      	beq.n	800a7ec <__hexnan+0xd4>
 800a830:	f1c3 0320 	rsb	r3, r3, #32
 800a834:	f04f 32ff 	mov.w	r2, #4294967295
 800a838:	40da      	lsrs	r2, r3
 800a83a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a83e:	4013      	ands	r3, r2
 800a840:	f846 3c04 	str.w	r3, [r6, #-4]
 800a844:	e7d2      	b.n	800a7ec <__hexnan+0xd4>
 800a846:	3f04      	subs	r7, #4
 800a848:	e7d0      	b.n	800a7ec <__hexnan+0xd4>
 800a84a:	2004      	movs	r0, #4
 800a84c:	e7d5      	b.n	800a7fa <__hexnan+0xe2>
	...

0800a850 <malloc>:
 800a850:	4b02      	ldr	r3, [pc, #8]	@ (800a85c <malloc+0xc>)
 800a852:	4601      	mov	r1, r0
 800a854:	6818      	ldr	r0, [r3, #0]
 800a856:	f000 b825 	b.w	800a8a4 <_malloc_r>
 800a85a:	bf00      	nop
 800a85c:	20000188 	.word	0x20000188

0800a860 <sbrk_aligned>:
 800a860:	b570      	push	{r4, r5, r6, lr}
 800a862:	4e0f      	ldr	r6, [pc, #60]	@ (800a8a0 <sbrk_aligned+0x40>)
 800a864:	460c      	mov	r4, r1
 800a866:	6831      	ldr	r1, [r6, #0]
 800a868:	4605      	mov	r5, r0
 800a86a:	b911      	cbnz	r1, 800a872 <sbrk_aligned+0x12>
 800a86c:	f001 f808 	bl	800b880 <_sbrk_r>
 800a870:	6030      	str	r0, [r6, #0]
 800a872:	4621      	mov	r1, r4
 800a874:	4628      	mov	r0, r5
 800a876:	f001 f803 	bl	800b880 <_sbrk_r>
 800a87a:	1c43      	adds	r3, r0, #1
 800a87c:	d103      	bne.n	800a886 <sbrk_aligned+0x26>
 800a87e:	f04f 34ff 	mov.w	r4, #4294967295
 800a882:	4620      	mov	r0, r4
 800a884:	bd70      	pop	{r4, r5, r6, pc}
 800a886:	1cc4      	adds	r4, r0, #3
 800a888:	f024 0403 	bic.w	r4, r4, #3
 800a88c:	42a0      	cmp	r0, r4
 800a88e:	d0f8      	beq.n	800a882 <sbrk_aligned+0x22>
 800a890:	1a21      	subs	r1, r4, r0
 800a892:	4628      	mov	r0, r5
 800a894:	f000 fff4 	bl	800b880 <_sbrk_r>
 800a898:	3001      	adds	r0, #1
 800a89a:	d1f2      	bne.n	800a882 <sbrk_aligned+0x22>
 800a89c:	e7ef      	b.n	800a87e <sbrk_aligned+0x1e>
 800a89e:	bf00      	nop
 800a8a0:	2000571c 	.word	0x2000571c

0800a8a4 <_malloc_r>:
 800a8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8a8:	1ccd      	adds	r5, r1, #3
 800a8aa:	f025 0503 	bic.w	r5, r5, #3
 800a8ae:	3508      	adds	r5, #8
 800a8b0:	2d0c      	cmp	r5, #12
 800a8b2:	bf38      	it	cc
 800a8b4:	250c      	movcc	r5, #12
 800a8b6:	2d00      	cmp	r5, #0
 800a8b8:	4606      	mov	r6, r0
 800a8ba:	db01      	blt.n	800a8c0 <_malloc_r+0x1c>
 800a8bc:	42a9      	cmp	r1, r5
 800a8be:	d904      	bls.n	800a8ca <_malloc_r+0x26>
 800a8c0:	230c      	movs	r3, #12
 800a8c2:	6033      	str	r3, [r6, #0]
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a9a0 <_malloc_r+0xfc>
 800a8ce:	f000 f87b 	bl	800a9c8 <__malloc_lock>
 800a8d2:	f8d8 3000 	ldr.w	r3, [r8]
 800a8d6:	461c      	mov	r4, r3
 800a8d8:	bb44      	cbnz	r4, 800a92c <_malloc_r+0x88>
 800a8da:	4629      	mov	r1, r5
 800a8dc:	4630      	mov	r0, r6
 800a8de:	f7ff ffbf 	bl	800a860 <sbrk_aligned>
 800a8e2:	1c43      	adds	r3, r0, #1
 800a8e4:	4604      	mov	r4, r0
 800a8e6:	d158      	bne.n	800a99a <_malloc_r+0xf6>
 800a8e8:	f8d8 4000 	ldr.w	r4, [r8]
 800a8ec:	4627      	mov	r7, r4
 800a8ee:	2f00      	cmp	r7, #0
 800a8f0:	d143      	bne.n	800a97a <_malloc_r+0xd6>
 800a8f2:	2c00      	cmp	r4, #0
 800a8f4:	d04b      	beq.n	800a98e <_malloc_r+0xea>
 800a8f6:	6823      	ldr	r3, [r4, #0]
 800a8f8:	4639      	mov	r1, r7
 800a8fa:	4630      	mov	r0, r6
 800a8fc:	eb04 0903 	add.w	r9, r4, r3
 800a900:	f000 ffbe 	bl	800b880 <_sbrk_r>
 800a904:	4581      	cmp	r9, r0
 800a906:	d142      	bne.n	800a98e <_malloc_r+0xea>
 800a908:	6821      	ldr	r1, [r4, #0]
 800a90a:	1a6d      	subs	r5, r5, r1
 800a90c:	4629      	mov	r1, r5
 800a90e:	4630      	mov	r0, r6
 800a910:	f7ff ffa6 	bl	800a860 <sbrk_aligned>
 800a914:	3001      	adds	r0, #1
 800a916:	d03a      	beq.n	800a98e <_malloc_r+0xea>
 800a918:	6823      	ldr	r3, [r4, #0]
 800a91a:	442b      	add	r3, r5
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	f8d8 3000 	ldr.w	r3, [r8]
 800a922:	685a      	ldr	r2, [r3, #4]
 800a924:	bb62      	cbnz	r2, 800a980 <_malloc_r+0xdc>
 800a926:	f8c8 7000 	str.w	r7, [r8]
 800a92a:	e00f      	b.n	800a94c <_malloc_r+0xa8>
 800a92c:	6822      	ldr	r2, [r4, #0]
 800a92e:	1b52      	subs	r2, r2, r5
 800a930:	d420      	bmi.n	800a974 <_malloc_r+0xd0>
 800a932:	2a0b      	cmp	r2, #11
 800a934:	d917      	bls.n	800a966 <_malloc_r+0xc2>
 800a936:	1961      	adds	r1, r4, r5
 800a938:	42a3      	cmp	r3, r4
 800a93a:	6025      	str	r5, [r4, #0]
 800a93c:	bf18      	it	ne
 800a93e:	6059      	strne	r1, [r3, #4]
 800a940:	6863      	ldr	r3, [r4, #4]
 800a942:	bf08      	it	eq
 800a944:	f8c8 1000 	streq.w	r1, [r8]
 800a948:	5162      	str	r2, [r4, r5]
 800a94a:	604b      	str	r3, [r1, #4]
 800a94c:	4630      	mov	r0, r6
 800a94e:	f000 f841 	bl	800a9d4 <__malloc_unlock>
 800a952:	f104 000b 	add.w	r0, r4, #11
 800a956:	1d23      	adds	r3, r4, #4
 800a958:	f020 0007 	bic.w	r0, r0, #7
 800a95c:	1ac2      	subs	r2, r0, r3
 800a95e:	bf1c      	itt	ne
 800a960:	1a1b      	subne	r3, r3, r0
 800a962:	50a3      	strne	r3, [r4, r2]
 800a964:	e7af      	b.n	800a8c6 <_malloc_r+0x22>
 800a966:	6862      	ldr	r2, [r4, #4]
 800a968:	42a3      	cmp	r3, r4
 800a96a:	bf0c      	ite	eq
 800a96c:	f8c8 2000 	streq.w	r2, [r8]
 800a970:	605a      	strne	r2, [r3, #4]
 800a972:	e7eb      	b.n	800a94c <_malloc_r+0xa8>
 800a974:	4623      	mov	r3, r4
 800a976:	6864      	ldr	r4, [r4, #4]
 800a978:	e7ae      	b.n	800a8d8 <_malloc_r+0x34>
 800a97a:	463c      	mov	r4, r7
 800a97c:	687f      	ldr	r7, [r7, #4]
 800a97e:	e7b6      	b.n	800a8ee <_malloc_r+0x4a>
 800a980:	461a      	mov	r2, r3
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	42a3      	cmp	r3, r4
 800a986:	d1fb      	bne.n	800a980 <_malloc_r+0xdc>
 800a988:	2300      	movs	r3, #0
 800a98a:	6053      	str	r3, [r2, #4]
 800a98c:	e7de      	b.n	800a94c <_malloc_r+0xa8>
 800a98e:	230c      	movs	r3, #12
 800a990:	6033      	str	r3, [r6, #0]
 800a992:	4630      	mov	r0, r6
 800a994:	f000 f81e 	bl	800a9d4 <__malloc_unlock>
 800a998:	e794      	b.n	800a8c4 <_malloc_r+0x20>
 800a99a:	6005      	str	r5, [r0, #0]
 800a99c:	e7d6      	b.n	800a94c <_malloc_r+0xa8>
 800a99e:	bf00      	nop
 800a9a0:	20005720 	.word	0x20005720

0800a9a4 <__ascii_mbtowc>:
 800a9a4:	b082      	sub	sp, #8
 800a9a6:	b901      	cbnz	r1, 800a9aa <__ascii_mbtowc+0x6>
 800a9a8:	a901      	add	r1, sp, #4
 800a9aa:	b142      	cbz	r2, 800a9be <__ascii_mbtowc+0x1a>
 800a9ac:	b14b      	cbz	r3, 800a9c2 <__ascii_mbtowc+0x1e>
 800a9ae:	7813      	ldrb	r3, [r2, #0]
 800a9b0:	600b      	str	r3, [r1, #0]
 800a9b2:	7812      	ldrb	r2, [r2, #0]
 800a9b4:	1e10      	subs	r0, r2, #0
 800a9b6:	bf18      	it	ne
 800a9b8:	2001      	movne	r0, #1
 800a9ba:	b002      	add	sp, #8
 800a9bc:	4770      	bx	lr
 800a9be:	4610      	mov	r0, r2
 800a9c0:	e7fb      	b.n	800a9ba <__ascii_mbtowc+0x16>
 800a9c2:	f06f 0001 	mvn.w	r0, #1
 800a9c6:	e7f8      	b.n	800a9ba <__ascii_mbtowc+0x16>

0800a9c8 <__malloc_lock>:
 800a9c8:	4801      	ldr	r0, [pc, #4]	@ (800a9d0 <__malloc_lock+0x8>)
 800a9ca:	f7fe bd42 	b.w	8009452 <__retarget_lock_acquire_recursive>
 800a9ce:	bf00      	nop
 800a9d0:	20005718 	.word	0x20005718

0800a9d4 <__malloc_unlock>:
 800a9d4:	4801      	ldr	r0, [pc, #4]	@ (800a9dc <__malloc_unlock+0x8>)
 800a9d6:	f7fe bd3d 	b.w	8009454 <__retarget_lock_release_recursive>
 800a9da:	bf00      	nop
 800a9dc:	20005718 	.word	0x20005718

0800a9e0 <_Balloc>:
 800a9e0:	b570      	push	{r4, r5, r6, lr}
 800a9e2:	69c6      	ldr	r6, [r0, #28]
 800a9e4:	4604      	mov	r4, r0
 800a9e6:	460d      	mov	r5, r1
 800a9e8:	b976      	cbnz	r6, 800aa08 <_Balloc+0x28>
 800a9ea:	2010      	movs	r0, #16
 800a9ec:	f7ff ff30 	bl	800a850 <malloc>
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	61e0      	str	r0, [r4, #28]
 800a9f4:	b920      	cbnz	r0, 800aa00 <_Balloc+0x20>
 800a9f6:	4b18      	ldr	r3, [pc, #96]	@ (800aa58 <_Balloc+0x78>)
 800a9f8:	4818      	ldr	r0, [pc, #96]	@ (800aa5c <_Balloc+0x7c>)
 800a9fa:	216b      	movs	r1, #107	@ 0x6b
 800a9fc:	f000 ff50 	bl	800b8a0 <__assert_func>
 800aa00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa04:	6006      	str	r6, [r0, #0]
 800aa06:	60c6      	str	r6, [r0, #12]
 800aa08:	69e6      	ldr	r6, [r4, #28]
 800aa0a:	68f3      	ldr	r3, [r6, #12]
 800aa0c:	b183      	cbz	r3, 800aa30 <_Balloc+0x50>
 800aa0e:	69e3      	ldr	r3, [r4, #28]
 800aa10:	68db      	ldr	r3, [r3, #12]
 800aa12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aa16:	b9b8      	cbnz	r0, 800aa48 <_Balloc+0x68>
 800aa18:	2101      	movs	r1, #1
 800aa1a:	fa01 f605 	lsl.w	r6, r1, r5
 800aa1e:	1d72      	adds	r2, r6, #5
 800aa20:	0092      	lsls	r2, r2, #2
 800aa22:	4620      	mov	r0, r4
 800aa24:	f000 ff5a 	bl	800b8dc <_calloc_r>
 800aa28:	b160      	cbz	r0, 800aa44 <_Balloc+0x64>
 800aa2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aa2e:	e00e      	b.n	800aa4e <_Balloc+0x6e>
 800aa30:	2221      	movs	r2, #33	@ 0x21
 800aa32:	2104      	movs	r1, #4
 800aa34:	4620      	mov	r0, r4
 800aa36:	f000 ff51 	bl	800b8dc <_calloc_r>
 800aa3a:	69e3      	ldr	r3, [r4, #28]
 800aa3c:	60f0      	str	r0, [r6, #12]
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d1e4      	bne.n	800aa0e <_Balloc+0x2e>
 800aa44:	2000      	movs	r0, #0
 800aa46:	bd70      	pop	{r4, r5, r6, pc}
 800aa48:	6802      	ldr	r2, [r0, #0]
 800aa4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa4e:	2300      	movs	r3, #0
 800aa50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa54:	e7f7      	b.n	800aa46 <_Balloc+0x66>
 800aa56:	bf00      	nop
 800aa58:	0800c0c4 	.word	0x0800c0c4
 800aa5c:	0800c1a4 	.word	0x0800c1a4

0800aa60 <_Bfree>:
 800aa60:	b570      	push	{r4, r5, r6, lr}
 800aa62:	69c6      	ldr	r6, [r0, #28]
 800aa64:	4605      	mov	r5, r0
 800aa66:	460c      	mov	r4, r1
 800aa68:	b976      	cbnz	r6, 800aa88 <_Bfree+0x28>
 800aa6a:	2010      	movs	r0, #16
 800aa6c:	f7ff fef0 	bl	800a850 <malloc>
 800aa70:	4602      	mov	r2, r0
 800aa72:	61e8      	str	r0, [r5, #28]
 800aa74:	b920      	cbnz	r0, 800aa80 <_Bfree+0x20>
 800aa76:	4b09      	ldr	r3, [pc, #36]	@ (800aa9c <_Bfree+0x3c>)
 800aa78:	4809      	ldr	r0, [pc, #36]	@ (800aaa0 <_Bfree+0x40>)
 800aa7a:	218f      	movs	r1, #143	@ 0x8f
 800aa7c:	f000 ff10 	bl	800b8a0 <__assert_func>
 800aa80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa84:	6006      	str	r6, [r0, #0]
 800aa86:	60c6      	str	r6, [r0, #12]
 800aa88:	b13c      	cbz	r4, 800aa9a <_Bfree+0x3a>
 800aa8a:	69eb      	ldr	r3, [r5, #28]
 800aa8c:	6862      	ldr	r2, [r4, #4]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa94:	6021      	str	r1, [r4, #0]
 800aa96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa9a:	bd70      	pop	{r4, r5, r6, pc}
 800aa9c:	0800c0c4 	.word	0x0800c0c4
 800aaa0:	0800c1a4 	.word	0x0800c1a4

0800aaa4 <__multadd>:
 800aaa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaa8:	690d      	ldr	r5, [r1, #16]
 800aaaa:	4607      	mov	r7, r0
 800aaac:	460c      	mov	r4, r1
 800aaae:	461e      	mov	r6, r3
 800aab0:	f101 0c14 	add.w	ip, r1, #20
 800aab4:	2000      	movs	r0, #0
 800aab6:	f8dc 3000 	ldr.w	r3, [ip]
 800aaba:	b299      	uxth	r1, r3
 800aabc:	fb02 6101 	mla	r1, r2, r1, r6
 800aac0:	0c1e      	lsrs	r6, r3, #16
 800aac2:	0c0b      	lsrs	r3, r1, #16
 800aac4:	fb02 3306 	mla	r3, r2, r6, r3
 800aac8:	b289      	uxth	r1, r1
 800aaca:	3001      	adds	r0, #1
 800aacc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aad0:	4285      	cmp	r5, r0
 800aad2:	f84c 1b04 	str.w	r1, [ip], #4
 800aad6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aada:	dcec      	bgt.n	800aab6 <__multadd+0x12>
 800aadc:	b30e      	cbz	r6, 800ab22 <__multadd+0x7e>
 800aade:	68a3      	ldr	r3, [r4, #8]
 800aae0:	42ab      	cmp	r3, r5
 800aae2:	dc19      	bgt.n	800ab18 <__multadd+0x74>
 800aae4:	6861      	ldr	r1, [r4, #4]
 800aae6:	4638      	mov	r0, r7
 800aae8:	3101      	adds	r1, #1
 800aaea:	f7ff ff79 	bl	800a9e0 <_Balloc>
 800aaee:	4680      	mov	r8, r0
 800aaf0:	b928      	cbnz	r0, 800aafe <__multadd+0x5a>
 800aaf2:	4602      	mov	r2, r0
 800aaf4:	4b0c      	ldr	r3, [pc, #48]	@ (800ab28 <__multadd+0x84>)
 800aaf6:	480d      	ldr	r0, [pc, #52]	@ (800ab2c <__multadd+0x88>)
 800aaf8:	21ba      	movs	r1, #186	@ 0xba
 800aafa:	f000 fed1 	bl	800b8a0 <__assert_func>
 800aafe:	6922      	ldr	r2, [r4, #16]
 800ab00:	3202      	adds	r2, #2
 800ab02:	f104 010c 	add.w	r1, r4, #12
 800ab06:	0092      	lsls	r2, r2, #2
 800ab08:	300c      	adds	r0, #12
 800ab0a:	f7fe fca4 	bl	8009456 <memcpy>
 800ab0e:	4621      	mov	r1, r4
 800ab10:	4638      	mov	r0, r7
 800ab12:	f7ff ffa5 	bl	800aa60 <_Bfree>
 800ab16:	4644      	mov	r4, r8
 800ab18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ab1c:	3501      	adds	r5, #1
 800ab1e:	615e      	str	r6, [r3, #20]
 800ab20:	6125      	str	r5, [r4, #16]
 800ab22:	4620      	mov	r0, r4
 800ab24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab28:	0800c133 	.word	0x0800c133
 800ab2c:	0800c1a4 	.word	0x0800c1a4

0800ab30 <__s2b>:
 800ab30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab34:	460c      	mov	r4, r1
 800ab36:	4615      	mov	r5, r2
 800ab38:	461f      	mov	r7, r3
 800ab3a:	2209      	movs	r2, #9
 800ab3c:	3308      	adds	r3, #8
 800ab3e:	4606      	mov	r6, r0
 800ab40:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab44:	2100      	movs	r1, #0
 800ab46:	2201      	movs	r2, #1
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	db09      	blt.n	800ab60 <__s2b+0x30>
 800ab4c:	4630      	mov	r0, r6
 800ab4e:	f7ff ff47 	bl	800a9e0 <_Balloc>
 800ab52:	b940      	cbnz	r0, 800ab66 <__s2b+0x36>
 800ab54:	4602      	mov	r2, r0
 800ab56:	4b19      	ldr	r3, [pc, #100]	@ (800abbc <__s2b+0x8c>)
 800ab58:	4819      	ldr	r0, [pc, #100]	@ (800abc0 <__s2b+0x90>)
 800ab5a:	21d3      	movs	r1, #211	@ 0xd3
 800ab5c:	f000 fea0 	bl	800b8a0 <__assert_func>
 800ab60:	0052      	lsls	r2, r2, #1
 800ab62:	3101      	adds	r1, #1
 800ab64:	e7f0      	b.n	800ab48 <__s2b+0x18>
 800ab66:	9b08      	ldr	r3, [sp, #32]
 800ab68:	6143      	str	r3, [r0, #20]
 800ab6a:	2d09      	cmp	r5, #9
 800ab6c:	f04f 0301 	mov.w	r3, #1
 800ab70:	6103      	str	r3, [r0, #16]
 800ab72:	dd16      	ble.n	800aba2 <__s2b+0x72>
 800ab74:	f104 0909 	add.w	r9, r4, #9
 800ab78:	46c8      	mov	r8, r9
 800ab7a:	442c      	add	r4, r5
 800ab7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ab80:	4601      	mov	r1, r0
 800ab82:	3b30      	subs	r3, #48	@ 0x30
 800ab84:	220a      	movs	r2, #10
 800ab86:	4630      	mov	r0, r6
 800ab88:	f7ff ff8c 	bl	800aaa4 <__multadd>
 800ab8c:	45a0      	cmp	r8, r4
 800ab8e:	d1f5      	bne.n	800ab7c <__s2b+0x4c>
 800ab90:	f1a5 0408 	sub.w	r4, r5, #8
 800ab94:	444c      	add	r4, r9
 800ab96:	1b2d      	subs	r5, r5, r4
 800ab98:	1963      	adds	r3, r4, r5
 800ab9a:	42bb      	cmp	r3, r7
 800ab9c:	db04      	blt.n	800aba8 <__s2b+0x78>
 800ab9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aba2:	340a      	adds	r4, #10
 800aba4:	2509      	movs	r5, #9
 800aba6:	e7f6      	b.n	800ab96 <__s2b+0x66>
 800aba8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800abac:	4601      	mov	r1, r0
 800abae:	3b30      	subs	r3, #48	@ 0x30
 800abb0:	220a      	movs	r2, #10
 800abb2:	4630      	mov	r0, r6
 800abb4:	f7ff ff76 	bl	800aaa4 <__multadd>
 800abb8:	e7ee      	b.n	800ab98 <__s2b+0x68>
 800abba:	bf00      	nop
 800abbc:	0800c133 	.word	0x0800c133
 800abc0:	0800c1a4 	.word	0x0800c1a4

0800abc4 <__hi0bits>:
 800abc4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800abc8:	4603      	mov	r3, r0
 800abca:	bf36      	itet	cc
 800abcc:	0403      	lslcc	r3, r0, #16
 800abce:	2000      	movcs	r0, #0
 800abd0:	2010      	movcc	r0, #16
 800abd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800abd6:	bf3c      	itt	cc
 800abd8:	021b      	lslcc	r3, r3, #8
 800abda:	3008      	addcc	r0, #8
 800abdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800abe0:	bf3c      	itt	cc
 800abe2:	011b      	lslcc	r3, r3, #4
 800abe4:	3004      	addcc	r0, #4
 800abe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800abea:	bf3c      	itt	cc
 800abec:	009b      	lslcc	r3, r3, #2
 800abee:	3002      	addcc	r0, #2
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	db05      	blt.n	800ac00 <__hi0bits+0x3c>
 800abf4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800abf8:	f100 0001 	add.w	r0, r0, #1
 800abfc:	bf08      	it	eq
 800abfe:	2020      	moveq	r0, #32
 800ac00:	4770      	bx	lr

0800ac02 <__lo0bits>:
 800ac02:	6803      	ldr	r3, [r0, #0]
 800ac04:	4602      	mov	r2, r0
 800ac06:	f013 0007 	ands.w	r0, r3, #7
 800ac0a:	d00b      	beq.n	800ac24 <__lo0bits+0x22>
 800ac0c:	07d9      	lsls	r1, r3, #31
 800ac0e:	d421      	bmi.n	800ac54 <__lo0bits+0x52>
 800ac10:	0798      	lsls	r0, r3, #30
 800ac12:	bf49      	itett	mi
 800ac14:	085b      	lsrmi	r3, r3, #1
 800ac16:	089b      	lsrpl	r3, r3, #2
 800ac18:	2001      	movmi	r0, #1
 800ac1a:	6013      	strmi	r3, [r2, #0]
 800ac1c:	bf5c      	itt	pl
 800ac1e:	6013      	strpl	r3, [r2, #0]
 800ac20:	2002      	movpl	r0, #2
 800ac22:	4770      	bx	lr
 800ac24:	b299      	uxth	r1, r3
 800ac26:	b909      	cbnz	r1, 800ac2c <__lo0bits+0x2a>
 800ac28:	0c1b      	lsrs	r3, r3, #16
 800ac2a:	2010      	movs	r0, #16
 800ac2c:	b2d9      	uxtb	r1, r3
 800ac2e:	b909      	cbnz	r1, 800ac34 <__lo0bits+0x32>
 800ac30:	3008      	adds	r0, #8
 800ac32:	0a1b      	lsrs	r3, r3, #8
 800ac34:	0719      	lsls	r1, r3, #28
 800ac36:	bf04      	itt	eq
 800ac38:	091b      	lsreq	r3, r3, #4
 800ac3a:	3004      	addeq	r0, #4
 800ac3c:	0799      	lsls	r1, r3, #30
 800ac3e:	bf04      	itt	eq
 800ac40:	089b      	lsreq	r3, r3, #2
 800ac42:	3002      	addeq	r0, #2
 800ac44:	07d9      	lsls	r1, r3, #31
 800ac46:	d403      	bmi.n	800ac50 <__lo0bits+0x4e>
 800ac48:	085b      	lsrs	r3, r3, #1
 800ac4a:	f100 0001 	add.w	r0, r0, #1
 800ac4e:	d003      	beq.n	800ac58 <__lo0bits+0x56>
 800ac50:	6013      	str	r3, [r2, #0]
 800ac52:	4770      	bx	lr
 800ac54:	2000      	movs	r0, #0
 800ac56:	4770      	bx	lr
 800ac58:	2020      	movs	r0, #32
 800ac5a:	4770      	bx	lr

0800ac5c <__i2b>:
 800ac5c:	b510      	push	{r4, lr}
 800ac5e:	460c      	mov	r4, r1
 800ac60:	2101      	movs	r1, #1
 800ac62:	f7ff febd 	bl	800a9e0 <_Balloc>
 800ac66:	4602      	mov	r2, r0
 800ac68:	b928      	cbnz	r0, 800ac76 <__i2b+0x1a>
 800ac6a:	4b05      	ldr	r3, [pc, #20]	@ (800ac80 <__i2b+0x24>)
 800ac6c:	4805      	ldr	r0, [pc, #20]	@ (800ac84 <__i2b+0x28>)
 800ac6e:	f240 1145 	movw	r1, #325	@ 0x145
 800ac72:	f000 fe15 	bl	800b8a0 <__assert_func>
 800ac76:	2301      	movs	r3, #1
 800ac78:	6144      	str	r4, [r0, #20]
 800ac7a:	6103      	str	r3, [r0, #16]
 800ac7c:	bd10      	pop	{r4, pc}
 800ac7e:	bf00      	nop
 800ac80:	0800c133 	.word	0x0800c133
 800ac84:	0800c1a4 	.word	0x0800c1a4

0800ac88 <__multiply>:
 800ac88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac8c:	4617      	mov	r7, r2
 800ac8e:	690a      	ldr	r2, [r1, #16]
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	429a      	cmp	r2, r3
 800ac94:	bfa8      	it	ge
 800ac96:	463b      	movge	r3, r7
 800ac98:	4689      	mov	r9, r1
 800ac9a:	bfa4      	itt	ge
 800ac9c:	460f      	movge	r7, r1
 800ac9e:	4699      	movge	r9, r3
 800aca0:	693d      	ldr	r5, [r7, #16]
 800aca2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	6879      	ldr	r1, [r7, #4]
 800acaa:	eb05 060a 	add.w	r6, r5, sl
 800acae:	42b3      	cmp	r3, r6
 800acb0:	b085      	sub	sp, #20
 800acb2:	bfb8      	it	lt
 800acb4:	3101      	addlt	r1, #1
 800acb6:	f7ff fe93 	bl	800a9e0 <_Balloc>
 800acba:	b930      	cbnz	r0, 800acca <__multiply+0x42>
 800acbc:	4602      	mov	r2, r0
 800acbe:	4b41      	ldr	r3, [pc, #260]	@ (800adc4 <__multiply+0x13c>)
 800acc0:	4841      	ldr	r0, [pc, #260]	@ (800adc8 <__multiply+0x140>)
 800acc2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800acc6:	f000 fdeb 	bl	800b8a0 <__assert_func>
 800acca:	f100 0414 	add.w	r4, r0, #20
 800acce:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800acd2:	4623      	mov	r3, r4
 800acd4:	2200      	movs	r2, #0
 800acd6:	4573      	cmp	r3, lr
 800acd8:	d320      	bcc.n	800ad1c <__multiply+0x94>
 800acda:	f107 0814 	add.w	r8, r7, #20
 800acde:	f109 0114 	add.w	r1, r9, #20
 800ace2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800ace6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800acea:	9302      	str	r3, [sp, #8]
 800acec:	1beb      	subs	r3, r5, r7
 800acee:	3b15      	subs	r3, #21
 800acf0:	f023 0303 	bic.w	r3, r3, #3
 800acf4:	3304      	adds	r3, #4
 800acf6:	3715      	adds	r7, #21
 800acf8:	42bd      	cmp	r5, r7
 800acfa:	bf38      	it	cc
 800acfc:	2304      	movcc	r3, #4
 800acfe:	9301      	str	r3, [sp, #4]
 800ad00:	9b02      	ldr	r3, [sp, #8]
 800ad02:	9103      	str	r1, [sp, #12]
 800ad04:	428b      	cmp	r3, r1
 800ad06:	d80c      	bhi.n	800ad22 <__multiply+0x9a>
 800ad08:	2e00      	cmp	r6, #0
 800ad0a:	dd03      	ble.n	800ad14 <__multiply+0x8c>
 800ad0c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d055      	beq.n	800adc0 <__multiply+0x138>
 800ad14:	6106      	str	r6, [r0, #16]
 800ad16:	b005      	add	sp, #20
 800ad18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad1c:	f843 2b04 	str.w	r2, [r3], #4
 800ad20:	e7d9      	b.n	800acd6 <__multiply+0x4e>
 800ad22:	f8b1 a000 	ldrh.w	sl, [r1]
 800ad26:	f1ba 0f00 	cmp.w	sl, #0
 800ad2a:	d01f      	beq.n	800ad6c <__multiply+0xe4>
 800ad2c:	46c4      	mov	ip, r8
 800ad2e:	46a1      	mov	r9, r4
 800ad30:	2700      	movs	r7, #0
 800ad32:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ad36:	f8d9 3000 	ldr.w	r3, [r9]
 800ad3a:	fa1f fb82 	uxth.w	fp, r2
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	fb0a 330b 	mla	r3, sl, fp, r3
 800ad44:	443b      	add	r3, r7
 800ad46:	f8d9 7000 	ldr.w	r7, [r9]
 800ad4a:	0c12      	lsrs	r2, r2, #16
 800ad4c:	0c3f      	lsrs	r7, r7, #16
 800ad4e:	fb0a 7202 	mla	r2, sl, r2, r7
 800ad52:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad5c:	4565      	cmp	r5, ip
 800ad5e:	f849 3b04 	str.w	r3, [r9], #4
 800ad62:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ad66:	d8e4      	bhi.n	800ad32 <__multiply+0xaa>
 800ad68:	9b01      	ldr	r3, [sp, #4]
 800ad6a:	50e7      	str	r7, [r4, r3]
 800ad6c:	9b03      	ldr	r3, [sp, #12]
 800ad6e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ad72:	3104      	adds	r1, #4
 800ad74:	f1b9 0f00 	cmp.w	r9, #0
 800ad78:	d020      	beq.n	800adbc <__multiply+0x134>
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	4647      	mov	r7, r8
 800ad7e:	46a4      	mov	ip, r4
 800ad80:	f04f 0a00 	mov.w	sl, #0
 800ad84:	f8b7 b000 	ldrh.w	fp, [r7]
 800ad88:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ad8c:	fb09 220b 	mla	r2, r9, fp, r2
 800ad90:	4452      	add	r2, sl
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ad98:	f84c 3b04 	str.w	r3, [ip], #4
 800ad9c:	f857 3b04 	ldr.w	r3, [r7], #4
 800ada0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ada4:	f8bc 3000 	ldrh.w	r3, [ip]
 800ada8:	fb09 330a 	mla	r3, r9, sl, r3
 800adac:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800adb0:	42bd      	cmp	r5, r7
 800adb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800adb6:	d8e5      	bhi.n	800ad84 <__multiply+0xfc>
 800adb8:	9a01      	ldr	r2, [sp, #4]
 800adba:	50a3      	str	r3, [r4, r2]
 800adbc:	3404      	adds	r4, #4
 800adbe:	e79f      	b.n	800ad00 <__multiply+0x78>
 800adc0:	3e01      	subs	r6, #1
 800adc2:	e7a1      	b.n	800ad08 <__multiply+0x80>
 800adc4:	0800c133 	.word	0x0800c133
 800adc8:	0800c1a4 	.word	0x0800c1a4

0800adcc <__pow5mult>:
 800adcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800add0:	4615      	mov	r5, r2
 800add2:	f012 0203 	ands.w	r2, r2, #3
 800add6:	4607      	mov	r7, r0
 800add8:	460e      	mov	r6, r1
 800adda:	d007      	beq.n	800adec <__pow5mult+0x20>
 800addc:	4c25      	ldr	r4, [pc, #148]	@ (800ae74 <__pow5mult+0xa8>)
 800adde:	3a01      	subs	r2, #1
 800ade0:	2300      	movs	r3, #0
 800ade2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ade6:	f7ff fe5d 	bl	800aaa4 <__multadd>
 800adea:	4606      	mov	r6, r0
 800adec:	10ad      	asrs	r5, r5, #2
 800adee:	d03d      	beq.n	800ae6c <__pow5mult+0xa0>
 800adf0:	69fc      	ldr	r4, [r7, #28]
 800adf2:	b97c      	cbnz	r4, 800ae14 <__pow5mult+0x48>
 800adf4:	2010      	movs	r0, #16
 800adf6:	f7ff fd2b 	bl	800a850 <malloc>
 800adfa:	4602      	mov	r2, r0
 800adfc:	61f8      	str	r0, [r7, #28]
 800adfe:	b928      	cbnz	r0, 800ae0c <__pow5mult+0x40>
 800ae00:	4b1d      	ldr	r3, [pc, #116]	@ (800ae78 <__pow5mult+0xac>)
 800ae02:	481e      	ldr	r0, [pc, #120]	@ (800ae7c <__pow5mult+0xb0>)
 800ae04:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ae08:	f000 fd4a 	bl	800b8a0 <__assert_func>
 800ae0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae10:	6004      	str	r4, [r0, #0]
 800ae12:	60c4      	str	r4, [r0, #12]
 800ae14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ae18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae1c:	b94c      	cbnz	r4, 800ae32 <__pow5mult+0x66>
 800ae1e:	f240 2171 	movw	r1, #625	@ 0x271
 800ae22:	4638      	mov	r0, r7
 800ae24:	f7ff ff1a 	bl	800ac5c <__i2b>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae2e:	4604      	mov	r4, r0
 800ae30:	6003      	str	r3, [r0, #0]
 800ae32:	f04f 0900 	mov.w	r9, #0
 800ae36:	07eb      	lsls	r3, r5, #31
 800ae38:	d50a      	bpl.n	800ae50 <__pow5mult+0x84>
 800ae3a:	4631      	mov	r1, r6
 800ae3c:	4622      	mov	r2, r4
 800ae3e:	4638      	mov	r0, r7
 800ae40:	f7ff ff22 	bl	800ac88 <__multiply>
 800ae44:	4631      	mov	r1, r6
 800ae46:	4680      	mov	r8, r0
 800ae48:	4638      	mov	r0, r7
 800ae4a:	f7ff fe09 	bl	800aa60 <_Bfree>
 800ae4e:	4646      	mov	r6, r8
 800ae50:	106d      	asrs	r5, r5, #1
 800ae52:	d00b      	beq.n	800ae6c <__pow5mult+0xa0>
 800ae54:	6820      	ldr	r0, [r4, #0]
 800ae56:	b938      	cbnz	r0, 800ae68 <__pow5mult+0x9c>
 800ae58:	4622      	mov	r2, r4
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	4638      	mov	r0, r7
 800ae5e:	f7ff ff13 	bl	800ac88 <__multiply>
 800ae62:	6020      	str	r0, [r4, #0]
 800ae64:	f8c0 9000 	str.w	r9, [r0]
 800ae68:	4604      	mov	r4, r0
 800ae6a:	e7e4      	b.n	800ae36 <__pow5mult+0x6a>
 800ae6c:	4630      	mov	r0, r6
 800ae6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae72:	bf00      	nop
 800ae74:	0800c2a0 	.word	0x0800c2a0
 800ae78:	0800c0c4 	.word	0x0800c0c4
 800ae7c:	0800c1a4 	.word	0x0800c1a4

0800ae80 <__lshift>:
 800ae80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae84:	460c      	mov	r4, r1
 800ae86:	6849      	ldr	r1, [r1, #4]
 800ae88:	6923      	ldr	r3, [r4, #16]
 800ae8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae8e:	68a3      	ldr	r3, [r4, #8]
 800ae90:	4607      	mov	r7, r0
 800ae92:	4691      	mov	r9, r2
 800ae94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae98:	f108 0601 	add.w	r6, r8, #1
 800ae9c:	42b3      	cmp	r3, r6
 800ae9e:	db0b      	blt.n	800aeb8 <__lshift+0x38>
 800aea0:	4638      	mov	r0, r7
 800aea2:	f7ff fd9d 	bl	800a9e0 <_Balloc>
 800aea6:	4605      	mov	r5, r0
 800aea8:	b948      	cbnz	r0, 800aebe <__lshift+0x3e>
 800aeaa:	4602      	mov	r2, r0
 800aeac:	4b28      	ldr	r3, [pc, #160]	@ (800af50 <__lshift+0xd0>)
 800aeae:	4829      	ldr	r0, [pc, #164]	@ (800af54 <__lshift+0xd4>)
 800aeb0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aeb4:	f000 fcf4 	bl	800b8a0 <__assert_func>
 800aeb8:	3101      	adds	r1, #1
 800aeba:	005b      	lsls	r3, r3, #1
 800aebc:	e7ee      	b.n	800ae9c <__lshift+0x1c>
 800aebe:	2300      	movs	r3, #0
 800aec0:	f100 0114 	add.w	r1, r0, #20
 800aec4:	f100 0210 	add.w	r2, r0, #16
 800aec8:	4618      	mov	r0, r3
 800aeca:	4553      	cmp	r3, sl
 800aecc:	db33      	blt.n	800af36 <__lshift+0xb6>
 800aece:	6920      	ldr	r0, [r4, #16]
 800aed0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aed4:	f104 0314 	add.w	r3, r4, #20
 800aed8:	f019 091f 	ands.w	r9, r9, #31
 800aedc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aee0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aee4:	d02b      	beq.n	800af3e <__lshift+0xbe>
 800aee6:	f1c9 0e20 	rsb	lr, r9, #32
 800aeea:	468a      	mov	sl, r1
 800aeec:	2200      	movs	r2, #0
 800aeee:	6818      	ldr	r0, [r3, #0]
 800aef0:	fa00 f009 	lsl.w	r0, r0, r9
 800aef4:	4310      	orrs	r0, r2
 800aef6:	f84a 0b04 	str.w	r0, [sl], #4
 800aefa:	f853 2b04 	ldr.w	r2, [r3], #4
 800aefe:	459c      	cmp	ip, r3
 800af00:	fa22 f20e 	lsr.w	r2, r2, lr
 800af04:	d8f3      	bhi.n	800aeee <__lshift+0x6e>
 800af06:	ebac 0304 	sub.w	r3, ip, r4
 800af0a:	3b15      	subs	r3, #21
 800af0c:	f023 0303 	bic.w	r3, r3, #3
 800af10:	3304      	adds	r3, #4
 800af12:	f104 0015 	add.w	r0, r4, #21
 800af16:	4560      	cmp	r0, ip
 800af18:	bf88      	it	hi
 800af1a:	2304      	movhi	r3, #4
 800af1c:	50ca      	str	r2, [r1, r3]
 800af1e:	b10a      	cbz	r2, 800af24 <__lshift+0xa4>
 800af20:	f108 0602 	add.w	r6, r8, #2
 800af24:	3e01      	subs	r6, #1
 800af26:	4638      	mov	r0, r7
 800af28:	612e      	str	r6, [r5, #16]
 800af2a:	4621      	mov	r1, r4
 800af2c:	f7ff fd98 	bl	800aa60 <_Bfree>
 800af30:	4628      	mov	r0, r5
 800af32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af36:	f842 0f04 	str.w	r0, [r2, #4]!
 800af3a:	3301      	adds	r3, #1
 800af3c:	e7c5      	b.n	800aeca <__lshift+0x4a>
 800af3e:	3904      	subs	r1, #4
 800af40:	f853 2b04 	ldr.w	r2, [r3], #4
 800af44:	f841 2f04 	str.w	r2, [r1, #4]!
 800af48:	459c      	cmp	ip, r3
 800af4a:	d8f9      	bhi.n	800af40 <__lshift+0xc0>
 800af4c:	e7ea      	b.n	800af24 <__lshift+0xa4>
 800af4e:	bf00      	nop
 800af50:	0800c133 	.word	0x0800c133
 800af54:	0800c1a4 	.word	0x0800c1a4

0800af58 <__mcmp>:
 800af58:	690a      	ldr	r2, [r1, #16]
 800af5a:	4603      	mov	r3, r0
 800af5c:	6900      	ldr	r0, [r0, #16]
 800af5e:	1a80      	subs	r0, r0, r2
 800af60:	b530      	push	{r4, r5, lr}
 800af62:	d10e      	bne.n	800af82 <__mcmp+0x2a>
 800af64:	3314      	adds	r3, #20
 800af66:	3114      	adds	r1, #20
 800af68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800af6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800af70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800af74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800af78:	4295      	cmp	r5, r2
 800af7a:	d003      	beq.n	800af84 <__mcmp+0x2c>
 800af7c:	d205      	bcs.n	800af8a <__mcmp+0x32>
 800af7e:	f04f 30ff 	mov.w	r0, #4294967295
 800af82:	bd30      	pop	{r4, r5, pc}
 800af84:	42a3      	cmp	r3, r4
 800af86:	d3f3      	bcc.n	800af70 <__mcmp+0x18>
 800af88:	e7fb      	b.n	800af82 <__mcmp+0x2a>
 800af8a:	2001      	movs	r0, #1
 800af8c:	e7f9      	b.n	800af82 <__mcmp+0x2a>
	...

0800af90 <__mdiff>:
 800af90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af94:	4689      	mov	r9, r1
 800af96:	4606      	mov	r6, r0
 800af98:	4611      	mov	r1, r2
 800af9a:	4648      	mov	r0, r9
 800af9c:	4614      	mov	r4, r2
 800af9e:	f7ff ffdb 	bl	800af58 <__mcmp>
 800afa2:	1e05      	subs	r5, r0, #0
 800afa4:	d112      	bne.n	800afcc <__mdiff+0x3c>
 800afa6:	4629      	mov	r1, r5
 800afa8:	4630      	mov	r0, r6
 800afaa:	f7ff fd19 	bl	800a9e0 <_Balloc>
 800afae:	4602      	mov	r2, r0
 800afb0:	b928      	cbnz	r0, 800afbe <__mdiff+0x2e>
 800afb2:	4b3f      	ldr	r3, [pc, #252]	@ (800b0b0 <__mdiff+0x120>)
 800afb4:	f240 2137 	movw	r1, #567	@ 0x237
 800afb8:	483e      	ldr	r0, [pc, #248]	@ (800b0b4 <__mdiff+0x124>)
 800afba:	f000 fc71 	bl	800b8a0 <__assert_func>
 800afbe:	2301      	movs	r3, #1
 800afc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800afc4:	4610      	mov	r0, r2
 800afc6:	b003      	add	sp, #12
 800afc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afcc:	bfbc      	itt	lt
 800afce:	464b      	movlt	r3, r9
 800afd0:	46a1      	movlt	r9, r4
 800afd2:	4630      	mov	r0, r6
 800afd4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800afd8:	bfba      	itte	lt
 800afda:	461c      	movlt	r4, r3
 800afdc:	2501      	movlt	r5, #1
 800afde:	2500      	movge	r5, #0
 800afe0:	f7ff fcfe 	bl	800a9e0 <_Balloc>
 800afe4:	4602      	mov	r2, r0
 800afe6:	b918      	cbnz	r0, 800aff0 <__mdiff+0x60>
 800afe8:	4b31      	ldr	r3, [pc, #196]	@ (800b0b0 <__mdiff+0x120>)
 800afea:	f240 2145 	movw	r1, #581	@ 0x245
 800afee:	e7e3      	b.n	800afb8 <__mdiff+0x28>
 800aff0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aff4:	6926      	ldr	r6, [r4, #16]
 800aff6:	60c5      	str	r5, [r0, #12]
 800aff8:	f109 0310 	add.w	r3, r9, #16
 800affc:	f109 0514 	add.w	r5, r9, #20
 800b000:	f104 0e14 	add.w	lr, r4, #20
 800b004:	f100 0b14 	add.w	fp, r0, #20
 800b008:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b00c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b010:	9301      	str	r3, [sp, #4]
 800b012:	46d9      	mov	r9, fp
 800b014:	f04f 0c00 	mov.w	ip, #0
 800b018:	9b01      	ldr	r3, [sp, #4]
 800b01a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b01e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b022:	9301      	str	r3, [sp, #4]
 800b024:	fa1f f38a 	uxth.w	r3, sl
 800b028:	4619      	mov	r1, r3
 800b02a:	b283      	uxth	r3, r0
 800b02c:	1acb      	subs	r3, r1, r3
 800b02e:	0c00      	lsrs	r0, r0, #16
 800b030:	4463      	add	r3, ip
 800b032:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b036:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b03a:	b29b      	uxth	r3, r3
 800b03c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b040:	4576      	cmp	r6, lr
 800b042:	f849 3b04 	str.w	r3, [r9], #4
 800b046:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b04a:	d8e5      	bhi.n	800b018 <__mdiff+0x88>
 800b04c:	1b33      	subs	r3, r6, r4
 800b04e:	3b15      	subs	r3, #21
 800b050:	f023 0303 	bic.w	r3, r3, #3
 800b054:	3415      	adds	r4, #21
 800b056:	3304      	adds	r3, #4
 800b058:	42a6      	cmp	r6, r4
 800b05a:	bf38      	it	cc
 800b05c:	2304      	movcc	r3, #4
 800b05e:	441d      	add	r5, r3
 800b060:	445b      	add	r3, fp
 800b062:	461e      	mov	r6, r3
 800b064:	462c      	mov	r4, r5
 800b066:	4544      	cmp	r4, r8
 800b068:	d30e      	bcc.n	800b088 <__mdiff+0xf8>
 800b06a:	f108 0103 	add.w	r1, r8, #3
 800b06e:	1b49      	subs	r1, r1, r5
 800b070:	f021 0103 	bic.w	r1, r1, #3
 800b074:	3d03      	subs	r5, #3
 800b076:	45a8      	cmp	r8, r5
 800b078:	bf38      	it	cc
 800b07a:	2100      	movcc	r1, #0
 800b07c:	440b      	add	r3, r1
 800b07e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b082:	b191      	cbz	r1, 800b0aa <__mdiff+0x11a>
 800b084:	6117      	str	r7, [r2, #16]
 800b086:	e79d      	b.n	800afc4 <__mdiff+0x34>
 800b088:	f854 1b04 	ldr.w	r1, [r4], #4
 800b08c:	46e6      	mov	lr, ip
 800b08e:	0c08      	lsrs	r0, r1, #16
 800b090:	fa1c fc81 	uxtah	ip, ip, r1
 800b094:	4471      	add	r1, lr
 800b096:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b09a:	b289      	uxth	r1, r1
 800b09c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b0a0:	f846 1b04 	str.w	r1, [r6], #4
 800b0a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b0a8:	e7dd      	b.n	800b066 <__mdiff+0xd6>
 800b0aa:	3f01      	subs	r7, #1
 800b0ac:	e7e7      	b.n	800b07e <__mdiff+0xee>
 800b0ae:	bf00      	nop
 800b0b0:	0800c133 	.word	0x0800c133
 800b0b4:	0800c1a4 	.word	0x0800c1a4

0800b0b8 <__ulp>:
 800b0b8:	b082      	sub	sp, #8
 800b0ba:	ed8d 0b00 	vstr	d0, [sp]
 800b0be:	9a01      	ldr	r2, [sp, #4]
 800b0c0:	4b0f      	ldr	r3, [pc, #60]	@ (800b100 <__ulp+0x48>)
 800b0c2:	4013      	ands	r3, r2
 800b0c4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	dc08      	bgt.n	800b0de <__ulp+0x26>
 800b0cc:	425b      	negs	r3, r3
 800b0ce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800b0d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b0d6:	da04      	bge.n	800b0e2 <__ulp+0x2a>
 800b0d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800b0dc:	4113      	asrs	r3, r2
 800b0de:	2200      	movs	r2, #0
 800b0e0:	e008      	b.n	800b0f4 <__ulp+0x3c>
 800b0e2:	f1a2 0314 	sub.w	r3, r2, #20
 800b0e6:	2b1e      	cmp	r3, #30
 800b0e8:	bfda      	itte	le
 800b0ea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800b0ee:	40da      	lsrle	r2, r3
 800b0f0:	2201      	movgt	r2, #1
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	4610      	mov	r0, r2
 800b0f8:	ec41 0b10 	vmov	d0, r0, r1
 800b0fc:	b002      	add	sp, #8
 800b0fe:	4770      	bx	lr
 800b100:	7ff00000 	.word	0x7ff00000

0800b104 <__b2d>:
 800b104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b108:	6906      	ldr	r6, [r0, #16]
 800b10a:	f100 0814 	add.w	r8, r0, #20
 800b10e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b112:	1f37      	subs	r7, r6, #4
 800b114:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b118:	4610      	mov	r0, r2
 800b11a:	f7ff fd53 	bl	800abc4 <__hi0bits>
 800b11e:	f1c0 0320 	rsb	r3, r0, #32
 800b122:	280a      	cmp	r0, #10
 800b124:	600b      	str	r3, [r1, #0]
 800b126:	491b      	ldr	r1, [pc, #108]	@ (800b194 <__b2d+0x90>)
 800b128:	dc15      	bgt.n	800b156 <__b2d+0x52>
 800b12a:	f1c0 0c0b 	rsb	ip, r0, #11
 800b12e:	fa22 f30c 	lsr.w	r3, r2, ip
 800b132:	45b8      	cmp	r8, r7
 800b134:	ea43 0501 	orr.w	r5, r3, r1
 800b138:	bf34      	ite	cc
 800b13a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b13e:	2300      	movcs	r3, #0
 800b140:	3015      	adds	r0, #21
 800b142:	fa02 f000 	lsl.w	r0, r2, r0
 800b146:	fa23 f30c 	lsr.w	r3, r3, ip
 800b14a:	4303      	orrs	r3, r0
 800b14c:	461c      	mov	r4, r3
 800b14e:	ec45 4b10 	vmov	d0, r4, r5
 800b152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b156:	45b8      	cmp	r8, r7
 800b158:	bf3a      	itte	cc
 800b15a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b15e:	f1a6 0708 	subcc.w	r7, r6, #8
 800b162:	2300      	movcs	r3, #0
 800b164:	380b      	subs	r0, #11
 800b166:	d012      	beq.n	800b18e <__b2d+0x8a>
 800b168:	f1c0 0120 	rsb	r1, r0, #32
 800b16c:	fa23 f401 	lsr.w	r4, r3, r1
 800b170:	4082      	lsls	r2, r0
 800b172:	4322      	orrs	r2, r4
 800b174:	4547      	cmp	r7, r8
 800b176:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800b17a:	bf8c      	ite	hi
 800b17c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b180:	2200      	movls	r2, #0
 800b182:	4083      	lsls	r3, r0
 800b184:	40ca      	lsrs	r2, r1
 800b186:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b18a:	4313      	orrs	r3, r2
 800b18c:	e7de      	b.n	800b14c <__b2d+0x48>
 800b18e:	ea42 0501 	orr.w	r5, r2, r1
 800b192:	e7db      	b.n	800b14c <__b2d+0x48>
 800b194:	3ff00000 	.word	0x3ff00000

0800b198 <__d2b>:
 800b198:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b19c:	460f      	mov	r7, r1
 800b19e:	2101      	movs	r1, #1
 800b1a0:	ec59 8b10 	vmov	r8, r9, d0
 800b1a4:	4616      	mov	r6, r2
 800b1a6:	f7ff fc1b 	bl	800a9e0 <_Balloc>
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	b930      	cbnz	r0, 800b1bc <__d2b+0x24>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	4b23      	ldr	r3, [pc, #140]	@ (800b240 <__d2b+0xa8>)
 800b1b2:	4824      	ldr	r0, [pc, #144]	@ (800b244 <__d2b+0xac>)
 800b1b4:	f240 310f 	movw	r1, #783	@ 0x30f
 800b1b8:	f000 fb72 	bl	800b8a0 <__assert_func>
 800b1bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b1c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1c4:	b10d      	cbz	r5, 800b1ca <__d2b+0x32>
 800b1c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b1ca:	9301      	str	r3, [sp, #4]
 800b1cc:	f1b8 0300 	subs.w	r3, r8, #0
 800b1d0:	d023      	beq.n	800b21a <__d2b+0x82>
 800b1d2:	4668      	mov	r0, sp
 800b1d4:	9300      	str	r3, [sp, #0]
 800b1d6:	f7ff fd14 	bl	800ac02 <__lo0bits>
 800b1da:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b1de:	b1d0      	cbz	r0, 800b216 <__d2b+0x7e>
 800b1e0:	f1c0 0320 	rsb	r3, r0, #32
 800b1e4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1e8:	430b      	orrs	r3, r1
 800b1ea:	40c2      	lsrs	r2, r0
 800b1ec:	6163      	str	r3, [r4, #20]
 800b1ee:	9201      	str	r2, [sp, #4]
 800b1f0:	9b01      	ldr	r3, [sp, #4]
 800b1f2:	61a3      	str	r3, [r4, #24]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	bf0c      	ite	eq
 800b1f8:	2201      	moveq	r2, #1
 800b1fa:	2202      	movne	r2, #2
 800b1fc:	6122      	str	r2, [r4, #16]
 800b1fe:	b1a5      	cbz	r5, 800b22a <__d2b+0x92>
 800b200:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b204:	4405      	add	r5, r0
 800b206:	603d      	str	r5, [r7, #0]
 800b208:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b20c:	6030      	str	r0, [r6, #0]
 800b20e:	4620      	mov	r0, r4
 800b210:	b003      	add	sp, #12
 800b212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b216:	6161      	str	r1, [r4, #20]
 800b218:	e7ea      	b.n	800b1f0 <__d2b+0x58>
 800b21a:	a801      	add	r0, sp, #4
 800b21c:	f7ff fcf1 	bl	800ac02 <__lo0bits>
 800b220:	9b01      	ldr	r3, [sp, #4]
 800b222:	6163      	str	r3, [r4, #20]
 800b224:	3020      	adds	r0, #32
 800b226:	2201      	movs	r2, #1
 800b228:	e7e8      	b.n	800b1fc <__d2b+0x64>
 800b22a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b22e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b232:	6038      	str	r0, [r7, #0]
 800b234:	6918      	ldr	r0, [r3, #16]
 800b236:	f7ff fcc5 	bl	800abc4 <__hi0bits>
 800b23a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b23e:	e7e5      	b.n	800b20c <__d2b+0x74>
 800b240:	0800c133 	.word	0x0800c133
 800b244:	0800c1a4 	.word	0x0800c1a4

0800b248 <__ratio>:
 800b248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b24c:	b085      	sub	sp, #20
 800b24e:	e9cd 1000 	strd	r1, r0, [sp]
 800b252:	a902      	add	r1, sp, #8
 800b254:	f7ff ff56 	bl	800b104 <__b2d>
 800b258:	9800      	ldr	r0, [sp, #0]
 800b25a:	a903      	add	r1, sp, #12
 800b25c:	ec55 4b10 	vmov	r4, r5, d0
 800b260:	f7ff ff50 	bl	800b104 <__b2d>
 800b264:	9b01      	ldr	r3, [sp, #4]
 800b266:	6919      	ldr	r1, [r3, #16]
 800b268:	9b00      	ldr	r3, [sp, #0]
 800b26a:	691b      	ldr	r3, [r3, #16]
 800b26c:	1ac9      	subs	r1, r1, r3
 800b26e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b272:	1a9b      	subs	r3, r3, r2
 800b274:	ec5b ab10 	vmov	sl, fp, d0
 800b278:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	bfce      	itee	gt
 800b280:	462a      	movgt	r2, r5
 800b282:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b286:	465a      	movle	r2, fp
 800b288:	462f      	mov	r7, r5
 800b28a:	46d9      	mov	r9, fp
 800b28c:	bfcc      	ite	gt
 800b28e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b292:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b296:	464b      	mov	r3, r9
 800b298:	4652      	mov	r2, sl
 800b29a:	4620      	mov	r0, r4
 800b29c:	4639      	mov	r1, r7
 800b29e:	f7f5 fadd 	bl	800085c <__aeabi_ddiv>
 800b2a2:	ec41 0b10 	vmov	d0, r0, r1
 800b2a6:	b005      	add	sp, #20
 800b2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b2ac <__copybits>:
 800b2ac:	3901      	subs	r1, #1
 800b2ae:	b570      	push	{r4, r5, r6, lr}
 800b2b0:	1149      	asrs	r1, r1, #5
 800b2b2:	6914      	ldr	r4, [r2, #16]
 800b2b4:	3101      	adds	r1, #1
 800b2b6:	f102 0314 	add.w	r3, r2, #20
 800b2ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b2be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b2c2:	1f05      	subs	r5, r0, #4
 800b2c4:	42a3      	cmp	r3, r4
 800b2c6:	d30c      	bcc.n	800b2e2 <__copybits+0x36>
 800b2c8:	1aa3      	subs	r3, r4, r2
 800b2ca:	3b11      	subs	r3, #17
 800b2cc:	f023 0303 	bic.w	r3, r3, #3
 800b2d0:	3211      	adds	r2, #17
 800b2d2:	42a2      	cmp	r2, r4
 800b2d4:	bf88      	it	hi
 800b2d6:	2300      	movhi	r3, #0
 800b2d8:	4418      	add	r0, r3
 800b2da:	2300      	movs	r3, #0
 800b2dc:	4288      	cmp	r0, r1
 800b2de:	d305      	bcc.n	800b2ec <__copybits+0x40>
 800b2e0:	bd70      	pop	{r4, r5, r6, pc}
 800b2e2:	f853 6b04 	ldr.w	r6, [r3], #4
 800b2e6:	f845 6f04 	str.w	r6, [r5, #4]!
 800b2ea:	e7eb      	b.n	800b2c4 <__copybits+0x18>
 800b2ec:	f840 3b04 	str.w	r3, [r0], #4
 800b2f0:	e7f4      	b.n	800b2dc <__copybits+0x30>

0800b2f2 <__any_on>:
 800b2f2:	f100 0214 	add.w	r2, r0, #20
 800b2f6:	6900      	ldr	r0, [r0, #16]
 800b2f8:	114b      	asrs	r3, r1, #5
 800b2fa:	4298      	cmp	r0, r3
 800b2fc:	b510      	push	{r4, lr}
 800b2fe:	db11      	blt.n	800b324 <__any_on+0x32>
 800b300:	dd0a      	ble.n	800b318 <__any_on+0x26>
 800b302:	f011 011f 	ands.w	r1, r1, #31
 800b306:	d007      	beq.n	800b318 <__any_on+0x26>
 800b308:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b30c:	fa24 f001 	lsr.w	r0, r4, r1
 800b310:	fa00 f101 	lsl.w	r1, r0, r1
 800b314:	428c      	cmp	r4, r1
 800b316:	d10b      	bne.n	800b330 <__any_on+0x3e>
 800b318:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b31c:	4293      	cmp	r3, r2
 800b31e:	d803      	bhi.n	800b328 <__any_on+0x36>
 800b320:	2000      	movs	r0, #0
 800b322:	bd10      	pop	{r4, pc}
 800b324:	4603      	mov	r3, r0
 800b326:	e7f7      	b.n	800b318 <__any_on+0x26>
 800b328:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b32c:	2900      	cmp	r1, #0
 800b32e:	d0f5      	beq.n	800b31c <__any_on+0x2a>
 800b330:	2001      	movs	r0, #1
 800b332:	e7f6      	b.n	800b322 <__any_on+0x30>

0800b334 <_strtol_l.isra.0>:
 800b334:	2b24      	cmp	r3, #36	@ 0x24
 800b336:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b33a:	4686      	mov	lr, r0
 800b33c:	4690      	mov	r8, r2
 800b33e:	d801      	bhi.n	800b344 <_strtol_l.isra.0+0x10>
 800b340:	2b01      	cmp	r3, #1
 800b342:	d106      	bne.n	800b352 <_strtol_l.isra.0+0x1e>
 800b344:	f7fe f85a 	bl	80093fc <__errno>
 800b348:	2316      	movs	r3, #22
 800b34a:	6003      	str	r3, [r0, #0]
 800b34c:	2000      	movs	r0, #0
 800b34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b352:	4834      	ldr	r0, [pc, #208]	@ (800b424 <_strtol_l.isra.0+0xf0>)
 800b354:	460d      	mov	r5, r1
 800b356:	462a      	mov	r2, r5
 800b358:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b35c:	5d06      	ldrb	r6, [r0, r4]
 800b35e:	f016 0608 	ands.w	r6, r6, #8
 800b362:	d1f8      	bne.n	800b356 <_strtol_l.isra.0+0x22>
 800b364:	2c2d      	cmp	r4, #45	@ 0x2d
 800b366:	d110      	bne.n	800b38a <_strtol_l.isra.0+0x56>
 800b368:	782c      	ldrb	r4, [r5, #0]
 800b36a:	2601      	movs	r6, #1
 800b36c:	1c95      	adds	r5, r2, #2
 800b36e:	f033 0210 	bics.w	r2, r3, #16
 800b372:	d115      	bne.n	800b3a0 <_strtol_l.isra.0+0x6c>
 800b374:	2c30      	cmp	r4, #48	@ 0x30
 800b376:	d10d      	bne.n	800b394 <_strtol_l.isra.0+0x60>
 800b378:	782a      	ldrb	r2, [r5, #0]
 800b37a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b37e:	2a58      	cmp	r2, #88	@ 0x58
 800b380:	d108      	bne.n	800b394 <_strtol_l.isra.0+0x60>
 800b382:	786c      	ldrb	r4, [r5, #1]
 800b384:	3502      	adds	r5, #2
 800b386:	2310      	movs	r3, #16
 800b388:	e00a      	b.n	800b3a0 <_strtol_l.isra.0+0x6c>
 800b38a:	2c2b      	cmp	r4, #43	@ 0x2b
 800b38c:	bf04      	itt	eq
 800b38e:	782c      	ldrbeq	r4, [r5, #0]
 800b390:	1c95      	addeq	r5, r2, #2
 800b392:	e7ec      	b.n	800b36e <_strtol_l.isra.0+0x3a>
 800b394:	2b00      	cmp	r3, #0
 800b396:	d1f6      	bne.n	800b386 <_strtol_l.isra.0+0x52>
 800b398:	2c30      	cmp	r4, #48	@ 0x30
 800b39a:	bf14      	ite	ne
 800b39c:	230a      	movne	r3, #10
 800b39e:	2308      	moveq	r3, #8
 800b3a0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b3a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	fbbc f9f3 	udiv	r9, ip, r3
 800b3ae:	4610      	mov	r0, r2
 800b3b0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b3b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b3b8:	2f09      	cmp	r7, #9
 800b3ba:	d80f      	bhi.n	800b3dc <_strtol_l.isra.0+0xa8>
 800b3bc:	463c      	mov	r4, r7
 800b3be:	42a3      	cmp	r3, r4
 800b3c0:	dd1b      	ble.n	800b3fa <_strtol_l.isra.0+0xc6>
 800b3c2:	1c57      	adds	r7, r2, #1
 800b3c4:	d007      	beq.n	800b3d6 <_strtol_l.isra.0+0xa2>
 800b3c6:	4581      	cmp	r9, r0
 800b3c8:	d314      	bcc.n	800b3f4 <_strtol_l.isra.0+0xc0>
 800b3ca:	d101      	bne.n	800b3d0 <_strtol_l.isra.0+0x9c>
 800b3cc:	45a2      	cmp	sl, r4
 800b3ce:	db11      	blt.n	800b3f4 <_strtol_l.isra.0+0xc0>
 800b3d0:	fb00 4003 	mla	r0, r0, r3, r4
 800b3d4:	2201      	movs	r2, #1
 800b3d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b3da:	e7eb      	b.n	800b3b4 <_strtol_l.isra.0+0x80>
 800b3dc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b3e0:	2f19      	cmp	r7, #25
 800b3e2:	d801      	bhi.n	800b3e8 <_strtol_l.isra.0+0xb4>
 800b3e4:	3c37      	subs	r4, #55	@ 0x37
 800b3e6:	e7ea      	b.n	800b3be <_strtol_l.isra.0+0x8a>
 800b3e8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b3ec:	2f19      	cmp	r7, #25
 800b3ee:	d804      	bhi.n	800b3fa <_strtol_l.isra.0+0xc6>
 800b3f0:	3c57      	subs	r4, #87	@ 0x57
 800b3f2:	e7e4      	b.n	800b3be <_strtol_l.isra.0+0x8a>
 800b3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800b3f8:	e7ed      	b.n	800b3d6 <_strtol_l.isra.0+0xa2>
 800b3fa:	1c53      	adds	r3, r2, #1
 800b3fc:	d108      	bne.n	800b410 <_strtol_l.isra.0+0xdc>
 800b3fe:	2322      	movs	r3, #34	@ 0x22
 800b400:	f8ce 3000 	str.w	r3, [lr]
 800b404:	4660      	mov	r0, ip
 800b406:	f1b8 0f00 	cmp.w	r8, #0
 800b40a:	d0a0      	beq.n	800b34e <_strtol_l.isra.0+0x1a>
 800b40c:	1e69      	subs	r1, r5, #1
 800b40e:	e006      	b.n	800b41e <_strtol_l.isra.0+0xea>
 800b410:	b106      	cbz	r6, 800b414 <_strtol_l.isra.0+0xe0>
 800b412:	4240      	negs	r0, r0
 800b414:	f1b8 0f00 	cmp.w	r8, #0
 800b418:	d099      	beq.n	800b34e <_strtol_l.isra.0+0x1a>
 800b41a:	2a00      	cmp	r2, #0
 800b41c:	d1f6      	bne.n	800b40c <_strtol_l.isra.0+0xd8>
 800b41e:	f8c8 1000 	str.w	r1, [r8]
 800b422:	e794      	b.n	800b34e <_strtol_l.isra.0+0x1a>
 800b424:	0800c3a1 	.word	0x0800c3a1

0800b428 <_strtol_r>:
 800b428:	f7ff bf84 	b.w	800b334 <_strtol_l.isra.0>

0800b42c <__ascii_wctomb>:
 800b42c:	4603      	mov	r3, r0
 800b42e:	4608      	mov	r0, r1
 800b430:	b141      	cbz	r1, 800b444 <__ascii_wctomb+0x18>
 800b432:	2aff      	cmp	r2, #255	@ 0xff
 800b434:	d904      	bls.n	800b440 <__ascii_wctomb+0x14>
 800b436:	228a      	movs	r2, #138	@ 0x8a
 800b438:	601a      	str	r2, [r3, #0]
 800b43a:	f04f 30ff 	mov.w	r0, #4294967295
 800b43e:	4770      	bx	lr
 800b440:	700a      	strb	r2, [r1, #0]
 800b442:	2001      	movs	r0, #1
 800b444:	4770      	bx	lr

0800b446 <__ssputs_r>:
 800b446:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b44a:	688e      	ldr	r6, [r1, #8]
 800b44c:	461f      	mov	r7, r3
 800b44e:	42be      	cmp	r6, r7
 800b450:	680b      	ldr	r3, [r1, #0]
 800b452:	4682      	mov	sl, r0
 800b454:	460c      	mov	r4, r1
 800b456:	4690      	mov	r8, r2
 800b458:	d82d      	bhi.n	800b4b6 <__ssputs_r+0x70>
 800b45a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b45e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b462:	d026      	beq.n	800b4b2 <__ssputs_r+0x6c>
 800b464:	6965      	ldr	r5, [r4, #20]
 800b466:	6909      	ldr	r1, [r1, #16]
 800b468:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b46c:	eba3 0901 	sub.w	r9, r3, r1
 800b470:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b474:	1c7b      	adds	r3, r7, #1
 800b476:	444b      	add	r3, r9
 800b478:	106d      	asrs	r5, r5, #1
 800b47a:	429d      	cmp	r5, r3
 800b47c:	bf38      	it	cc
 800b47e:	461d      	movcc	r5, r3
 800b480:	0553      	lsls	r3, r2, #21
 800b482:	d527      	bpl.n	800b4d4 <__ssputs_r+0x8e>
 800b484:	4629      	mov	r1, r5
 800b486:	f7ff fa0d 	bl	800a8a4 <_malloc_r>
 800b48a:	4606      	mov	r6, r0
 800b48c:	b360      	cbz	r0, 800b4e8 <__ssputs_r+0xa2>
 800b48e:	6921      	ldr	r1, [r4, #16]
 800b490:	464a      	mov	r2, r9
 800b492:	f7fd ffe0 	bl	8009456 <memcpy>
 800b496:	89a3      	ldrh	r3, [r4, #12]
 800b498:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b49c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b4a0:	81a3      	strh	r3, [r4, #12]
 800b4a2:	6126      	str	r6, [r4, #16]
 800b4a4:	6165      	str	r5, [r4, #20]
 800b4a6:	444e      	add	r6, r9
 800b4a8:	eba5 0509 	sub.w	r5, r5, r9
 800b4ac:	6026      	str	r6, [r4, #0]
 800b4ae:	60a5      	str	r5, [r4, #8]
 800b4b0:	463e      	mov	r6, r7
 800b4b2:	42be      	cmp	r6, r7
 800b4b4:	d900      	bls.n	800b4b8 <__ssputs_r+0x72>
 800b4b6:	463e      	mov	r6, r7
 800b4b8:	6820      	ldr	r0, [r4, #0]
 800b4ba:	4632      	mov	r2, r6
 800b4bc:	4641      	mov	r1, r8
 800b4be:	f000 f9c5 	bl	800b84c <memmove>
 800b4c2:	68a3      	ldr	r3, [r4, #8]
 800b4c4:	1b9b      	subs	r3, r3, r6
 800b4c6:	60a3      	str	r3, [r4, #8]
 800b4c8:	6823      	ldr	r3, [r4, #0]
 800b4ca:	4433      	add	r3, r6
 800b4cc:	6023      	str	r3, [r4, #0]
 800b4ce:	2000      	movs	r0, #0
 800b4d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4d4:	462a      	mov	r2, r5
 800b4d6:	f000 fa15 	bl	800b904 <_realloc_r>
 800b4da:	4606      	mov	r6, r0
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	d1e0      	bne.n	800b4a2 <__ssputs_r+0x5c>
 800b4e0:	6921      	ldr	r1, [r4, #16]
 800b4e2:	4650      	mov	r0, sl
 800b4e4:	f7fe fe30 	bl	800a148 <_free_r>
 800b4e8:	230c      	movs	r3, #12
 800b4ea:	f8ca 3000 	str.w	r3, [sl]
 800b4ee:	89a3      	ldrh	r3, [r4, #12]
 800b4f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4f4:	81a3      	strh	r3, [r4, #12]
 800b4f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b4fa:	e7e9      	b.n	800b4d0 <__ssputs_r+0x8a>

0800b4fc <_svfiprintf_r>:
 800b4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b500:	4698      	mov	r8, r3
 800b502:	898b      	ldrh	r3, [r1, #12]
 800b504:	061b      	lsls	r3, r3, #24
 800b506:	b09d      	sub	sp, #116	@ 0x74
 800b508:	4607      	mov	r7, r0
 800b50a:	460d      	mov	r5, r1
 800b50c:	4614      	mov	r4, r2
 800b50e:	d510      	bpl.n	800b532 <_svfiprintf_r+0x36>
 800b510:	690b      	ldr	r3, [r1, #16]
 800b512:	b973      	cbnz	r3, 800b532 <_svfiprintf_r+0x36>
 800b514:	2140      	movs	r1, #64	@ 0x40
 800b516:	f7ff f9c5 	bl	800a8a4 <_malloc_r>
 800b51a:	6028      	str	r0, [r5, #0]
 800b51c:	6128      	str	r0, [r5, #16]
 800b51e:	b930      	cbnz	r0, 800b52e <_svfiprintf_r+0x32>
 800b520:	230c      	movs	r3, #12
 800b522:	603b      	str	r3, [r7, #0]
 800b524:	f04f 30ff 	mov.w	r0, #4294967295
 800b528:	b01d      	add	sp, #116	@ 0x74
 800b52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b52e:	2340      	movs	r3, #64	@ 0x40
 800b530:	616b      	str	r3, [r5, #20]
 800b532:	2300      	movs	r3, #0
 800b534:	9309      	str	r3, [sp, #36]	@ 0x24
 800b536:	2320      	movs	r3, #32
 800b538:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b53c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b540:	2330      	movs	r3, #48	@ 0x30
 800b542:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b6e0 <_svfiprintf_r+0x1e4>
 800b546:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b54a:	f04f 0901 	mov.w	r9, #1
 800b54e:	4623      	mov	r3, r4
 800b550:	469a      	mov	sl, r3
 800b552:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b556:	b10a      	cbz	r2, 800b55c <_svfiprintf_r+0x60>
 800b558:	2a25      	cmp	r2, #37	@ 0x25
 800b55a:	d1f9      	bne.n	800b550 <_svfiprintf_r+0x54>
 800b55c:	ebba 0b04 	subs.w	fp, sl, r4
 800b560:	d00b      	beq.n	800b57a <_svfiprintf_r+0x7e>
 800b562:	465b      	mov	r3, fp
 800b564:	4622      	mov	r2, r4
 800b566:	4629      	mov	r1, r5
 800b568:	4638      	mov	r0, r7
 800b56a:	f7ff ff6c 	bl	800b446 <__ssputs_r>
 800b56e:	3001      	adds	r0, #1
 800b570:	f000 80a7 	beq.w	800b6c2 <_svfiprintf_r+0x1c6>
 800b574:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b576:	445a      	add	r2, fp
 800b578:	9209      	str	r2, [sp, #36]	@ 0x24
 800b57a:	f89a 3000 	ldrb.w	r3, [sl]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	f000 809f 	beq.w	800b6c2 <_svfiprintf_r+0x1c6>
 800b584:	2300      	movs	r3, #0
 800b586:	f04f 32ff 	mov.w	r2, #4294967295
 800b58a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b58e:	f10a 0a01 	add.w	sl, sl, #1
 800b592:	9304      	str	r3, [sp, #16]
 800b594:	9307      	str	r3, [sp, #28]
 800b596:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b59a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b59c:	4654      	mov	r4, sl
 800b59e:	2205      	movs	r2, #5
 800b5a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5a4:	484e      	ldr	r0, [pc, #312]	@ (800b6e0 <_svfiprintf_r+0x1e4>)
 800b5a6:	f7f4 fe1b 	bl	80001e0 <memchr>
 800b5aa:	9a04      	ldr	r2, [sp, #16]
 800b5ac:	b9d8      	cbnz	r0, 800b5e6 <_svfiprintf_r+0xea>
 800b5ae:	06d0      	lsls	r0, r2, #27
 800b5b0:	bf44      	itt	mi
 800b5b2:	2320      	movmi	r3, #32
 800b5b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5b8:	0711      	lsls	r1, r2, #28
 800b5ba:	bf44      	itt	mi
 800b5bc:	232b      	movmi	r3, #43	@ 0x2b
 800b5be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b5c2:	f89a 3000 	ldrb.w	r3, [sl]
 800b5c6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b5c8:	d015      	beq.n	800b5f6 <_svfiprintf_r+0xfa>
 800b5ca:	9a07      	ldr	r2, [sp, #28]
 800b5cc:	4654      	mov	r4, sl
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	f04f 0c0a 	mov.w	ip, #10
 800b5d4:	4621      	mov	r1, r4
 800b5d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5da:	3b30      	subs	r3, #48	@ 0x30
 800b5dc:	2b09      	cmp	r3, #9
 800b5de:	d94b      	bls.n	800b678 <_svfiprintf_r+0x17c>
 800b5e0:	b1b0      	cbz	r0, 800b610 <_svfiprintf_r+0x114>
 800b5e2:	9207      	str	r2, [sp, #28]
 800b5e4:	e014      	b.n	800b610 <_svfiprintf_r+0x114>
 800b5e6:	eba0 0308 	sub.w	r3, r0, r8
 800b5ea:	fa09 f303 	lsl.w	r3, r9, r3
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	9304      	str	r3, [sp, #16]
 800b5f2:	46a2      	mov	sl, r4
 800b5f4:	e7d2      	b.n	800b59c <_svfiprintf_r+0xa0>
 800b5f6:	9b03      	ldr	r3, [sp, #12]
 800b5f8:	1d19      	adds	r1, r3, #4
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	9103      	str	r1, [sp, #12]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	bfbb      	ittet	lt
 800b602:	425b      	neglt	r3, r3
 800b604:	f042 0202 	orrlt.w	r2, r2, #2
 800b608:	9307      	strge	r3, [sp, #28]
 800b60a:	9307      	strlt	r3, [sp, #28]
 800b60c:	bfb8      	it	lt
 800b60e:	9204      	strlt	r2, [sp, #16]
 800b610:	7823      	ldrb	r3, [r4, #0]
 800b612:	2b2e      	cmp	r3, #46	@ 0x2e
 800b614:	d10a      	bne.n	800b62c <_svfiprintf_r+0x130>
 800b616:	7863      	ldrb	r3, [r4, #1]
 800b618:	2b2a      	cmp	r3, #42	@ 0x2a
 800b61a:	d132      	bne.n	800b682 <_svfiprintf_r+0x186>
 800b61c:	9b03      	ldr	r3, [sp, #12]
 800b61e:	1d1a      	adds	r2, r3, #4
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	9203      	str	r2, [sp, #12]
 800b624:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b628:	3402      	adds	r4, #2
 800b62a:	9305      	str	r3, [sp, #20]
 800b62c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b6f0 <_svfiprintf_r+0x1f4>
 800b630:	7821      	ldrb	r1, [r4, #0]
 800b632:	2203      	movs	r2, #3
 800b634:	4650      	mov	r0, sl
 800b636:	f7f4 fdd3 	bl	80001e0 <memchr>
 800b63a:	b138      	cbz	r0, 800b64c <_svfiprintf_r+0x150>
 800b63c:	9b04      	ldr	r3, [sp, #16]
 800b63e:	eba0 000a 	sub.w	r0, r0, sl
 800b642:	2240      	movs	r2, #64	@ 0x40
 800b644:	4082      	lsls	r2, r0
 800b646:	4313      	orrs	r3, r2
 800b648:	3401      	adds	r4, #1
 800b64a:	9304      	str	r3, [sp, #16]
 800b64c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b650:	4824      	ldr	r0, [pc, #144]	@ (800b6e4 <_svfiprintf_r+0x1e8>)
 800b652:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b656:	2206      	movs	r2, #6
 800b658:	f7f4 fdc2 	bl	80001e0 <memchr>
 800b65c:	2800      	cmp	r0, #0
 800b65e:	d036      	beq.n	800b6ce <_svfiprintf_r+0x1d2>
 800b660:	4b21      	ldr	r3, [pc, #132]	@ (800b6e8 <_svfiprintf_r+0x1ec>)
 800b662:	bb1b      	cbnz	r3, 800b6ac <_svfiprintf_r+0x1b0>
 800b664:	9b03      	ldr	r3, [sp, #12]
 800b666:	3307      	adds	r3, #7
 800b668:	f023 0307 	bic.w	r3, r3, #7
 800b66c:	3308      	adds	r3, #8
 800b66e:	9303      	str	r3, [sp, #12]
 800b670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b672:	4433      	add	r3, r6
 800b674:	9309      	str	r3, [sp, #36]	@ 0x24
 800b676:	e76a      	b.n	800b54e <_svfiprintf_r+0x52>
 800b678:	fb0c 3202 	mla	r2, ip, r2, r3
 800b67c:	460c      	mov	r4, r1
 800b67e:	2001      	movs	r0, #1
 800b680:	e7a8      	b.n	800b5d4 <_svfiprintf_r+0xd8>
 800b682:	2300      	movs	r3, #0
 800b684:	3401      	adds	r4, #1
 800b686:	9305      	str	r3, [sp, #20]
 800b688:	4619      	mov	r1, r3
 800b68a:	f04f 0c0a 	mov.w	ip, #10
 800b68e:	4620      	mov	r0, r4
 800b690:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b694:	3a30      	subs	r2, #48	@ 0x30
 800b696:	2a09      	cmp	r2, #9
 800b698:	d903      	bls.n	800b6a2 <_svfiprintf_r+0x1a6>
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d0c6      	beq.n	800b62c <_svfiprintf_r+0x130>
 800b69e:	9105      	str	r1, [sp, #20]
 800b6a0:	e7c4      	b.n	800b62c <_svfiprintf_r+0x130>
 800b6a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6a6:	4604      	mov	r4, r0
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e7f0      	b.n	800b68e <_svfiprintf_r+0x192>
 800b6ac:	ab03      	add	r3, sp, #12
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	462a      	mov	r2, r5
 800b6b2:	4b0e      	ldr	r3, [pc, #56]	@ (800b6ec <_svfiprintf_r+0x1f0>)
 800b6b4:	a904      	add	r1, sp, #16
 800b6b6:	4638      	mov	r0, r7
 800b6b8:	f7fc fec8 	bl	800844c <_printf_float>
 800b6bc:	1c42      	adds	r2, r0, #1
 800b6be:	4606      	mov	r6, r0
 800b6c0:	d1d6      	bne.n	800b670 <_svfiprintf_r+0x174>
 800b6c2:	89ab      	ldrh	r3, [r5, #12]
 800b6c4:	065b      	lsls	r3, r3, #25
 800b6c6:	f53f af2d 	bmi.w	800b524 <_svfiprintf_r+0x28>
 800b6ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b6cc:	e72c      	b.n	800b528 <_svfiprintf_r+0x2c>
 800b6ce:	ab03      	add	r3, sp, #12
 800b6d0:	9300      	str	r3, [sp, #0]
 800b6d2:	462a      	mov	r2, r5
 800b6d4:	4b05      	ldr	r3, [pc, #20]	@ (800b6ec <_svfiprintf_r+0x1f0>)
 800b6d6:	a904      	add	r1, sp, #16
 800b6d8:	4638      	mov	r0, r7
 800b6da:	f7fd f94f 	bl	800897c <_printf_i>
 800b6de:	e7ed      	b.n	800b6bc <_svfiprintf_r+0x1c0>
 800b6e0:	0800c1fd 	.word	0x0800c1fd
 800b6e4:	0800c207 	.word	0x0800c207
 800b6e8:	0800844d 	.word	0x0800844d
 800b6ec:	0800b447 	.word	0x0800b447
 800b6f0:	0800c203 	.word	0x0800c203

0800b6f4 <__sflush_r>:
 800b6f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6fc:	0716      	lsls	r6, r2, #28
 800b6fe:	4605      	mov	r5, r0
 800b700:	460c      	mov	r4, r1
 800b702:	d454      	bmi.n	800b7ae <__sflush_r+0xba>
 800b704:	684b      	ldr	r3, [r1, #4]
 800b706:	2b00      	cmp	r3, #0
 800b708:	dc02      	bgt.n	800b710 <__sflush_r+0x1c>
 800b70a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	dd48      	ble.n	800b7a2 <__sflush_r+0xae>
 800b710:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b712:	2e00      	cmp	r6, #0
 800b714:	d045      	beq.n	800b7a2 <__sflush_r+0xae>
 800b716:	2300      	movs	r3, #0
 800b718:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b71c:	682f      	ldr	r7, [r5, #0]
 800b71e:	6a21      	ldr	r1, [r4, #32]
 800b720:	602b      	str	r3, [r5, #0]
 800b722:	d030      	beq.n	800b786 <__sflush_r+0x92>
 800b724:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b726:	89a3      	ldrh	r3, [r4, #12]
 800b728:	0759      	lsls	r1, r3, #29
 800b72a:	d505      	bpl.n	800b738 <__sflush_r+0x44>
 800b72c:	6863      	ldr	r3, [r4, #4]
 800b72e:	1ad2      	subs	r2, r2, r3
 800b730:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b732:	b10b      	cbz	r3, 800b738 <__sflush_r+0x44>
 800b734:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b736:	1ad2      	subs	r2, r2, r3
 800b738:	2300      	movs	r3, #0
 800b73a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b73c:	6a21      	ldr	r1, [r4, #32]
 800b73e:	4628      	mov	r0, r5
 800b740:	47b0      	blx	r6
 800b742:	1c43      	adds	r3, r0, #1
 800b744:	89a3      	ldrh	r3, [r4, #12]
 800b746:	d106      	bne.n	800b756 <__sflush_r+0x62>
 800b748:	6829      	ldr	r1, [r5, #0]
 800b74a:	291d      	cmp	r1, #29
 800b74c:	d82b      	bhi.n	800b7a6 <__sflush_r+0xb2>
 800b74e:	4a2a      	ldr	r2, [pc, #168]	@ (800b7f8 <__sflush_r+0x104>)
 800b750:	40ca      	lsrs	r2, r1
 800b752:	07d6      	lsls	r6, r2, #31
 800b754:	d527      	bpl.n	800b7a6 <__sflush_r+0xb2>
 800b756:	2200      	movs	r2, #0
 800b758:	6062      	str	r2, [r4, #4]
 800b75a:	04d9      	lsls	r1, r3, #19
 800b75c:	6922      	ldr	r2, [r4, #16]
 800b75e:	6022      	str	r2, [r4, #0]
 800b760:	d504      	bpl.n	800b76c <__sflush_r+0x78>
 800b762:	1c42      	adds	r2, r0, #1
 800b764:	d101      	bne.n	800b76a <__sflush_r+0x76>
 800b766:	682b      	ldr	r3, [r5, #0]
 800b768:	b903      	cbnz	r3, 800b76c <__sflush_r+0x78>
 800b76a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b76c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b76e:	602f      	str	r7, [r5, #0]
 800b770:	b1b9      	cbz	r1, 800b7a2 <__sflush_r+0xae>
 800b772:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b776:	4299      	cmp	r1, r3
 800b778:	d002      	beq.n	800b780 <__sflush_r+0x8c>
 800b77a:	4628      	mov	r0, r5
 800b77c:	f7fe fce4 	bl	800a148 <_free_r>
 800b780:	2300      	movs	r3, #0
 800b782:	6363      	str	r3, [r4, #52]	@ 0x34
 800b784:	e00d      	b.n	800b7a2 <__sflush_r+0xae>
 800b786:	2301      	movs	r3, #1
 800b788:	4628      	mov	r0, r5
 800b78a:	47b0      	blx	r6
 800b78c:	4602      	mov	r2, r0
 800b78e:	1c50      	adds	r0, r2, #1
 800b790:	d1c9      	bne.n	800b726 <__sflush_r+0x32>
 800b792:	682b      	ldr	r3, [r5, #0]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d0c6      	beq.n	800b726 <__sflush_r+0x32>
 800b798:	2b1d      	cmp	r3, #29
 800b79a:	d001      	beq.n	800b7a0 <__sflush_r+0xac>
 800b79c:	2b16      	cmp	r3, #22
 800b79e:	d11e      	bne.n	800b7de <__sflush_r+0xea>
 800b7a0:	602f      	str	r7, [r5, #0]
 800b7a2:	2000      	movs	r0, #0
 800b7a4:	e022      	b.n	800b7ec <__sflush_r+0xf8>
 800b7a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7aa:	b21b      	sxth	r3, r3
 800b7ac:	e01b      	b.n	800b7e6 <__sflush_r+0xf2>
 800b7ae:	690f      	ldr	r7, [r1, #16]
 800b7b0:	2f00      	cmp	r7, #0
 800b7b2:	d0f6      	beq.n	800b7a2 <__sflush_r+0xae>
 800b7b4:	0793      	lsls	r3, r2, #30
 800b7b6:	680e      	ldr	r6, [r1, #0]
 800b7b8:	bf08      	it	eq
 800b7ba:	694b      	ldreq	r3, [r1, #20]
 800b7bc:	600f      	str	r7, [r1, #0]
 800b7be:	bf18      	it	ne
 800b7c0:	2300      	movne	r3, #0
 800b7c2:	eba6 0807 	sub.w	r8, r6, r7
 800b7c6:	608b      	str	r3, [r1, #8]
 800b7c8:	f1b8 0f00 	cmp.w	r8, #0
 800b7cc:	dde9      	ble.n	800b7a2 <__sflush_r+0xae>
 800b7ce:	6a21      	ldr	r1, [r4, #32]
 800b7d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b7d2:	4643      	mov	r3, r8
 800b7d4:	463a      	mov	r2, r7
 800b7d6:	4628      	mov	r0, r5
 800b7d8:	47b0      	blx	r6
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	dc08      	bgt.n	800b7f0 <__sflush_r+0xfc>
 800b7de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7e6:	81a3      	strh	r3, [r4, #12]
 800b7e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b7f0:	4407      	add	r7, r0
 800b7f2:	eba8 0800 	sub.w	r8, r8, r0
 800b7f6:	e7e7      	b.n	800b7c8 <__sflush_r+0xd4>
 800b7f8:	20400001 	.word	0x20400001

0800b7fc <_fflush_r>:
 800b7fc:	b538      	push	{r3, r4, r5, lr}
 800b7fe:	690b      	ldr	r3, [r1, #16]
 800b800:	4605      	mov	r5, r0
 800b802:	460c      	mov	r4, r1
 800b804:	b913      	cbnz	r3, 800b80c <_fflush_r+0x10>
 800b806:	2500      	movs	r5, #0
 800b808:	4628      	mov	r0, r5
 800b80a:	bd38      	pop	{r3, r4, r5, pc}
 800b80c:	b118      	cbz	r0, 800b816 <_fflush_r+0x1a>
 800b80e:	6a03      	ldr	r3, [r0, #32]
 800b810:	b90b      	cbnz	r3, 800b816 <_fflush_r+0x1a>
 800b812:	f7fd fc6b 	bl	80090ec <__sinit>
 800b816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d0f3      	beq.n	800b806 <_fflush_r+0xa>
 800b81e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b820:	07d0      	lsls	r0, r2, #31
 800b822:	d404      	bmi.n	800b82e <_fflush_r+0x32>
 800b824:	0599      	lsls	r1, r3, #22
 800b826:	d402      	bmi.n	800b82e <_fflush_r+0x32>
 800b828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b82a:	f7fd fe12 	bl	8009452 <__retarget_lock_acquire_recursive>
 800b82e:	4628      	mov	r0, r5
 800b830:	4621      	mov	r1, r4
 800b832:	f7ff ff5f 	bl	800b6f4 <__sflush_r>
 800b836:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b838:	07da      	lsls	r2, r3, #31
 800b83a:	4605      	mov	r5, r0
 800b83c:	d4e4      	bmi.n	800b808 <_fflush_r+0xc>
 800b83e:	89a3      	ldrh	r3, [r4, #12]
 800b840:	059b      	lsls	r3, r3, #22
 800b842:	d4e1      	bmi.n	800b808 <_fflush_r+0xc>
 800b844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b846:	f7fd fe05 	bl	8009454 <__retarget_lock_release_recursive>
 800b84a:	e7dd      	b.n	800b808 <_fflush_r+0xc>

0800b84c <memmove>:
 800b84c:	4288      	cmp	r0, r1
 800b84e:	b510      	push	{r4, lr}
 800b850:	eb01 0402 	add.w	r4, r1, r2
 800b854:	d902      	bls.n	800b85c <memmove+0x10>
 800b856:	4284      	cmp	r4, r0
 800b858:	4623      	mov	r3, r4
 800b85a:	d807      	bhi.n	800b86c <memmove+0x20>
 800b85c:	1e43      	subs	r3, r0, #1
 800b85e:	42a1      	cmp	r1, r4
 800b860:	d008      	beq.n	800b874 <memmove+0x28>
 800b862:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b866:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b86a:	e7f8      	b.n	800b85e <memmove+0x12>
 800b86c:	4402      	add	r2, r0
 800b86e:	4601      	mov	r1, r0
 800b870:	428a      	cmp	r2, r1
 800b872:	d100      	bne.n	800b876 <memmove+0x2a>
 800b874:	bd10      	pop	{r4, pc}
 800b876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b87a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b87e:	e7f7      	b.n	800b870 <memmove+0x24>

0800b880 <_sbrk_r>:
 800b880:	b538      	push	{r3, r4, r5, lr}
 800b882:	4d06      	ldr	r5, [pc, #24]	@ (800b89c <_sbrk_r+0x1c>)
 800b884:	2300      	movs	r3, #0
 800b886:	4604      	mov	r4, r0
 800b888:	4608      	mov	r0, r1
 800b88a:	602b      	str	r3, [r5, #0]
 800b88c:	f7f6 f9b2 	bl	8001bf4 <_sbrk>
 800b890:	1c43      	adds	r3, r0, #1
 800b892:	d102      	bne.n	800b89a <_sbrk_r+0x1a>
 800b894:	682b      	ldr	r3, [r5, #0]
 800b896:	b103      	cbz	r3, 800b89a <_sbrk_r+0x1a>
 800b898:	6023      	str	r3, [r4, #0]
 800b89a:	bd38      	pop	{r3, r4, r5, pc}
 800b89c:	20005714 	.word	0x20005714

0800b8a0 <__assert_func>:
 800b8a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8a2:	4614      	mov	r4, r2
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	4b09      	ldr	r3, [pc, #36]	@ (800b8cc <__assert_func+0x2c>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4605      	mov	r5, r0
 800b8ac:	68d8      	ldr	r0, [r3, #12]
 800b8ae:	b14c      	cbz	r4, 800b8c4 <__assert_func+0x24>
 800b8b0:	4b07      	ldr	r3, [pc, #28]	@ (800b8d0 <__assert_func+0x30>)
 800b8b2:	9100      	str	r1, [sp, #0]
 800b8b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b8b8:	4906      	ldr	r1, [pc, #24]	@ (800b8d4 <__assert_func+0x34>)
 800b8ba:	462b      	mov	r3, r5
 800b8bc:	f000 f850 	bl	800b960 <fiprintf>
 800b8c0:	f000 f860 	bl	800b984 <abort>
 800b8c4:	4b04      	ldr	r3, [pc, #16]	@ (800b8d8 <__assert_func+0x38>)
 800b8c6:	461c      	mov	r4, r3
 800b8c8:	e7f3      	b.n	800b8b2 <__assert_func+0x12>
 800b8ca:	bf00      	nop
 800b8cc:	20000188 	.word	0x20000188
 800b8d0:	0800c20e 	.word	0x0800c20e
 800b8d4:	0800c21b 	.word	0x0800c21b
 800b8d8:	0800c249 	.word	0x0800c249

0800b8dc <_calloc_r>:
 800b8dc:	b570      	push	{r4, r5, r6, lr}
 800b8de:	fba1 5402 	umull	r5, r4, r1, r2
 800b8e2:	b934      	cbnz	r4, 800b8f2 <_calloc_r+0x16>
 800b8e4:	4629      	mov	r1, r5
 800b8e6:	f7fe ffdd 	bl	800a8a4 <_malloc_r>
 800b8ea:	4606      	mov	r6, r0
 800b8ec:	b928      	cbnz	r0, 800b8fa <_calloc_r+0x1e>
 800b8ee:	4630      	mov	r0, r6
 800b8f0:	bd70      	pop	{r4, r5, r6, pc}
 800b8f2:	220c      	movs	r2, #12
 800b8f4:	6002      	str	r2, [r0, #0]
 800b8f6:	2600      	movs	r6, #0
 800b8f8:	e7f9      	b.n	800b8ee <_calloc_r+0x12>
 800b8fa:	462a      	mov	r2, r5
 800b8fc:	4621      	mov	r1, r4
 800b8fe:	f7fd fc90 	bl	8009222 <memset>
 800b902:	e7f4      	b.n	800b8ee <_calloc_r+0x12>

0800b904 <_realloc_r>:
 800b904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b908:	4607      	mov	r7, r0
 800b90a:	4614      	mov	r4, r2
 800b90c:	460d      	mov	r5, r1
 800b90e:	b921      	cbnz	r1, 800b91a <_realloc_r+0x16>
 800b910:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b914:	4611      	mov	r1, r2
 800b916:	f7fe bfc5 	b.w	800a8a4 <_malloc_r>
 800b91a:	b92a      	cbnz	r2, 800b928 <_realloc_r+0x24>
 800b91c:	f7fe fc14 	bl	800a148 <_free_r>
 800b920:	4625      	mov	r5, r4
 800b922:	4628      	mov	r0, r5
 800b924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b928:	f000 f833 	bl	800b992 <_malloc_usable_size_r>
 800b92c:	4284      	cmp	r4, r0
 800b92e:	4606      	mov	r6, r0
 800b930:	d802      	bhi.n	800b938 <_realloc_r+0x34>
 800b932:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b936:	d8f4      	bhi.n	800b922 <_realloc_r+0x1e>
 800b938:	4621      	mov	r1, r4
 800b93a:	4638      	mov	r0, r7
 800b93c:	f7fe ffb2 	bl	800a8a4 <_malloc_r>
 800b940:	4680      	mov	r8, r0
 800b942:	b908      	cbnz	r0, 800b948 <_realloc_r+0x44>
 800b944:	4645      	mov	r5, r8
 800b946:	e7ec      	b.n	800b922 <_realloc_r+0x1e>
 800b948:	42b4      	cmp	r4, r6
 800b94a:	4622      	mov	r2, r4
 800b94c:	4629      	mov	r1, r5
 800b94e:	bf28      	it	cs
 800b950:	4632      	movcs	r2, r6
 800b952:	f7fd fd80 	bl	8009456 <memcpy>
 800b956:	4629      	mov	r1, r5
 800b958:	4638      	mov	r0, r7
 800b95a:	f7fe fbf5 	bl	800a148 <_free_r>
 800b95e:	e7f1      	b.n	800b944 <_realloc_r+0x40>

0800b960 <fiprintf>:
 800b960:	b40e      	push	{r1, r2, r3}
 800b962:	b503      	push	{r0, r1, lr}
 800b964:	4601      	mov	r1, r0
 800b966:	ab03      	add	r3, sp, #12
 800b968:	4805      	ldr	r0, [pc, #20]	@ (800b980 <fiprintf+0x20>)
 800b96a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b96e:	6800      	ldr	r0, [r0, #0]
 800b970:	9301      	str	r3, [sp, #4]
 800b972:	f000 f83f 	bl	800b9f4 <_vfiprintf_r>
 800b976:	b002      	add	sp, #8
 800b978:	f85d eb04 	ldr.w	lr, [sp], #4
 800b97c:	b003      	add	sp, #12
 800b97e:	4770      	bx	lr
 800b980:	20000188 	.word	0x20000188

0800b984 <abort>:
 800b984:	b508      	push	{r3, lr}
 800b986:	2006      	movs	r0, #6
 800b988:	f000 fa08 	bl	800bd9c <raise>
 800b98c:	2001      	movs	r0, #1
 800b98e:	f7f6 f901 	bl	8001b94 <_exit>

0800b992 <_malloc_usable_size_r>:
 800b992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b996:	1f18      	subs	r0, r3, #4
 800b998:	2b00      	cmp	r3, #0
 800b99a:	bfbc      	itt	lt
 800b99c:	580b      	ldrlt	r3, [r1, r0]
 800b99e:	18c0      	addlt	r0, r0, r3
 800b9a0:	4770      	bx	lr

0800b9a2 <__sfputc_r>:
 800b9a2:	6893      	ldr	r3, [r2, #8]
 800b9a4:	3b01      	subs	r3, #1
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	b410      	push	{r4}
 800b9aa:	6093      	str	r3, [r2, #8]
 800b9ac:	da08      	bge.n	800b9c0 <__sfputc_r+0x1e>
 800b9ae:	6994      	ldr	r4, [r2, #24]
 800b9b0:	42a3      	cmp	r3, r4
 800b9b2:	db01      	blt.n	800b9b8 <__sfputc_r+0x16>
 800b9b4:	290a      	cmp	r1, #10
 800b9b6:	d103      	bne.n	800b9c0 <__sfputc_r+0x1e>
 800b9b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9bc:	f000 b932 	b.w	800bc24 <__swbuf_r>
 800b9c0:	6813      	ldr	r3, [r2, #0]
 800b9c2:	1c58      	adds	r0, r3, #1
 800b9c4:	6010      	str	r0, [r2, #0]
 800b9c6:	7019      	strb	r1, [r3, #0]
 800b9c8:	4608      	mov	r0, r1
 800b9ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9ce:	4770      	bx	lr

0800b9d0 <__sfputs_r>:
 800b9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9d2:	4606      	mov	r6, r0
 800b9d4:	460f      	mov	r7, r1
 800b9d6:	4614      	mov	r4, r2
 800b9d8:	18d5      	adds	r5, r2, r3
 800b9da:	42ac      	cmp	r4, r5
 800b9dc:	d101      	bne.n	800b9e2 <__sfputs_r+0x12>
 800b9de:	2000      	movs	r0, #0
 800b9e0:	e007      	b.n	800b9f2 <__sfputs_r+0x22>
 800b9e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9e6:	463a      	mov	r2, r7
 800b9e8:	4630      	mov	r0, r6
 800b9ea:	f7ff ffda 	bl	800b9a2 <__sfputc_r>
 800b9ee:	1c43      	adds	r3, r0, #1
 800b9f0:	d1f3      	bne.n	800b9da <__sfputs_r+0xa>
 800b9f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b9f4 <_vfiprintf_r>:
 800b9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f8:	460d      	mov	r5, r1
 800b9fa:	b09d      	sub	sp, #116	@ 0x74
 800b9fc:	4614      	mov	r4, r2
 800b9fe:	4698      	mov	r8, r3
 800ba00:	4606      	mov	r6, r0
 800ba02:	b118      	cbz	r0, 800ba0c <_vfiprintf_r+0x18>
 800ba04:	6a03      	ldr	r3, [r0, #32]
 800ba06:	b90b      	cbnz	r3, 800ba0c <_vfiprintf_r+0x18>
 800ba08:	f7fd fb70 	bl	80090ec <__sinit>
 800ba0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba0e:	07d9      	lsls	r1, r3, #31
 800ba10:	d405      	bmi.n	800ba1e <_vfiprintf_r+0x2a>
 800ba12:	89ab      	ldrh	r3, [r5, #12]
 800ba14:	059a      	lsls	r2, r3, #22
 800ba16:	d402      	bmi.n	800ba1e <_vfiprintf_r+0x2a>
 800ba18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba1a:	f7fd fd1a 	bl	8009452 <__retarget_lock_acquire_recursive>
 800ba1e:	89ab      	ldrh	r3, [r5, #12]
 800ba20:	071b      	lsls	r3, r3, #28
 800ba22:	d501      	bpl.n	800ba28 <_vfiprintf_r+0x34>
 800ba24:	692b      	ldr	r3, [r5, #16]
 800ba26:	b99b      	cbnz	r3, 800ba50 <_vfiprintf_r+0x5c>
 800ba28:	4629      	mov	r1, r5
 800ba2a:	4630      	mov	r0, r6
 800ba2c:	f000 f938 	bl	800bca0 <__swsetup_r>
 800ba30:	b170      	cbz	r0, 800ba50 <_vfiprintf_r+0x5c>
 800ba32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba34:	07dc      	lsls	r4, r3, #31
 800ba36:	d504      	bpl.n	800ba42 <_vfiprintf_r+0x4e>
 800ba38:	f04f 30ff 	mov.w	r0, #4294967295
 800ba3c:	b01d      	add	sp, #116	@ 0x74
 800ba3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba42:	89ab      	ldrh	r3, [r5, #12]
 800ba44:	0598      	lsls	r0, r3, #22
 800ba46:	d4f7      	bmi.n	800ba38 <_vfiprintf_r+0x44>
 800ba48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba4a:	f7fd fd03 	bl	8009454 <__retarget_lock_release_recursive>
 800ba4e:	e7f3      	b.n	800ba38 <_vfiprintf_r+0x44>
 800ba50:	2300      	movs	r3, #0
 800ba52:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba54:	2320      	movs	r3, #32
 800ba56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba5e:	2330      	movs	r3, #48	@ 0x30
 800ba60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bc10 <_vfiprintf_r+0x21c>
 800ba64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba68:	f04f 0901 	mov.w	r9, #1
 800ba6c:	4623      	mov	r3, r4
 800ba6e:	469a      	mov	sl, r3
 800ba70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba74:	b10a      	cbz	r2, 800ba7a <_vfiprintf_r+0x86>
 800ba76:	2a25      	cmp	r2, #37	@ 0x25
 800ba78:	d1f9      	bne.n	800ba6e <_vfiprintf_r+0x7a>
 800ba7a:	ebba 0b04 	subs.w	fp, sl, r4
 800ba7e:	d00b      	beq.n	800ba98 <_vfiprintf_r+0xa4>
 800ba80:	465b      	mov	r3, fp
 800ba82:	4622      	mov	r2, r4
 800ba84:	4629      	mov	r1, r5
 800ba86:	4630      	mov	r0, r6
 800ba88:	f7ff ffa2 	bl	800b9d0 <__sfputs_r>
 800ba8c:	3001      	adds	r0, #1
 800ba8e:	f000 80a7 	beq.w	800bbe0 <_vfiprintf_r+0x1ec>
 800ba92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ba94:	445a      	add	r2, fp
 800ba96:	9209      	str	r2, [sp, #36]	@ 0x24
 800ba98:	f89a 3000 	ldrb.w	r3, [sl]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	f000 809f 	beq.w	800bbe0 <_vfiprintf_r+0x1ec>
 800baa2:	2300      	movs	r3, #0
 800baa4:	f04f 32ff 	mov.w	r2, #4294967295
 800baa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800baac:	f10a 0a01 	add.w	sl, sl, #1
 800bab0:	9304      	str	r3, [sp, #16]
 800bab2:	9307      	str	r3, [sp, #28]
 800bab4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bab8:	931a      	str	r3, [sp, #104]	@ 0x68
 800baba:	4654      	mov	r4, sl
 800babc:	2205      	movs	r2, #5
 800babe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bac2:	4853      	ldr	r0, [pc, #332]	@ (800bc10 <_vfiprintf_r+0x21c>)
 800bac4:	f7f4 fb8c 	bl	80001e0 <memchr>
 800bac8:	9a04      	ldr	r2, [sp, #16]
 800baca:	b9d8      	cbnz	r0, 800bb04 <_vfiprintf_r+0x110>
 800bacc:	06d1      	lsls	r1, r2, #27
 800bace:	bf44      	itt	mi
 800bad0:	2320      	movmi	r3, #32
 800bad2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bad6:	0713      	lsls	r3, r2, #28
 800bad8:	bf44      	itt	mi
 800bada:	232b      	movmi	r3, #43	@ 0x2b
 800badc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bae0:	f89a 3000 	ldrb.w	r3, [sl]
 800bae4:	2b2a      	cmp	r3, #42	@ 0x2a
 800bae6:	d015      	beq.n	800bb14 <_vfiprintf_r+0x120>
 800bae8:	9a07      	ldr	r2, [sp, #28]
 800baea:	4654      	mov	r4, sl
 800baec:	2000      	movs	r0, #0
 800baee:	f04f 0c0a 	mov.w	ip, #10
 800baf2:	4621      	mov	r1, r4
 800baf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800baf8:	3b30      	subs	r3, #48	@ 0x30
 800bafa:	2b09      	cmp	r3, #9
 800bafc:	d94b      	bls.n	800bb96 <_vfiprintf_r+0x1a2>
 800bafe:	b1b0      	cbz	r0, 800bb2e <_vfiprintf_r+0x13a>
 800bb00:	9207      	str	r2, [sp, #28]
 800bb02:	e014      	b.n	800bb2e <_vfiprintf_r+0x13a>
 800bb04:	eba0 0308 	sub.w	r3, r0, r8
 800bb08:	fa09 f303 	lsl.w	r3, r9, r3
 800bb0c:	4313      	orrs	r3, r2
 800bb0e:	9304      	str	r3, [sp, #16]
 800bb10:	46a2      	mov	sl, r4
 800bb12:	e7d2      	b.n	800baba <_vfiprintf_r+0xc6>
 800bb14:	9b03      	ldr	r3, [sp, #12]
 800bb16:	1d19      	adds	r1, r3, #4
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	9103      	str	r1, [sp, #12]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	bfbb      	ittet	lt
 800bb20:	425b      	neglt	r3, r3
 800bb22:	f042 0202 	orrlt.w	r2, r2, #2
 800bb26:	9307      	strge	r3, [sp, #28]
 800bb28:	9307      	strlt	r3, [sp, #28]
 800bb2a:	bfb8      	it	lt
 800bb2c:	9204      	strlt	r2, [sp, #16]
 800bb2e:	7823      	ldrb	r3, [r4, #0]
 800bb30:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb32:	d10a      	bne.n	800bb4a <_vfiprintf_r+0x156>
 800bb34:	7863      	ldrb	r3, [r4, #1]
 800bb36:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb38:	d132      	bne.n	800bba0 <_vfiprintf_r+0x1ac>
 800bb3a:	9b03      	ldr	r3, [sp, #12]
 800bb3c:	1d1a      	adds	r2, r3, #4
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	9203      	str	r2, [sp, #12]
 800bb42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb46:	3402      	adds	r4, #2
 800bb48:	9305      	str	r3, [sp, #20]
 800bb4a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bc20 <_vfiprintf_r+0x22c>
 800bb4e:	7821      	ldrb	r1, [r4, #0]
 800bb50:	2203      	movs	r2, #3
 800bb52:	4650      	mov	r0, sl
 800bb54:	f7f4 fb44 	bl	80001e0 <memchr>
 800bb58:	b138      	cbz	r0, 800bb6a <_vfiprintf_r+0x176>
 800bb5a:	9b04      	ldr	r3, [sp, #16]
 800bb5c:	eba0 000a 	sub.w	r0, r0, sl
 800bb60:	2240      	movs	r2, #64	@ 0x40
 800bb62:	4082      	lsls	r2, r0
 800bb64:	4313      	orrs	r3, r2
 800bb66:	3401      	adds	r4, #1
 800bb68:	9304      	str	r3, [sp, #16]
 800bb6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb6e:	4829      	ldr	r0, [pc, #164]	@ (800bc14 <_vfiprintf_r+0x220>)
 800bb70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb74:	2206      	movs	r2, #6
 800bb76:	f7f4 fb33 	bl	80001e0 <memchr>
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	d03f      	beq.n	800bbfe <_vfiprintf_r+0x20a>
 800bb7e:	4b26      	ldr	r3, [pc, #152]	@ (800bc18 <_vfiprintf_r+0x224>)
 800bb80:	bb1b      	cbnz	r3, 800bbca <_vfiprintf_r+0x1d6>
 800bb82:	9b03      	ldr	r3, [sp, #12]
 800bb84:	3307      	adds	r3, #7
 800bb86:	f023 0307 	bic.w	r3, r3, #7
 800bb8a:	3308      	adds	r3, #8
 800bb8c:	9303      	str	r3, [sp, #12]
 800bb8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bb90:	443b      	add	r3, r7
 800bb92:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb94:	e76a      	b.n	800ba6c <_vfiprintf_r+0x78>
 800bb96:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb9a:	460c      	mov	r4, r1
 800bb9c:	2001      	movs	r0, #1
 800bb9e:	e7a8      	b.n	800baf2 <_vfiprintf_r+0xfe>
 800bba0:	2300      	movs	r3, #0
 800bba2:	3401      	adds	r4, #1
 800bba4:	9305      	str	r3, [sp, #20]
 800bba6:	4619      	mov	r1, r3
 800bba8:	f04f 0c0a 	mov.w	ip, #10
 800bbac:	4620      	mov	r0, r4
 800bbae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbb2:	3a30      	subs	r2, #48	@ 0x30
 800bbb4:	2a09      	cmp	r2, #9
 800bbb6:	d903      	bls.n	800bbc0 <_vfiprintf_r+0x1cc>
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d0c6      	beq.n	800bb4a <_vfiprintf_r+0x156>
 800bbbc:	9105      	str	r1, [sp, #20]
 800bbbe:	e7c4      	b.n	800bb4a <_vfiprintf_r+0x156>
 800bbc0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbc4:	4604      	mov	r4, r0
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e7f0      	b.n	800bbac <_vfiprintf_r+0x1b8>
 800bbca:	ab03      	add	r3, sp, #12
 800bbcc:	9300      	str	r3, [sp, #0]
 800bbce:	462a      	mov	r2, r5
 800bbd0:	4b12      	ldr	r3, [pc, #72]	@ (800bc1c <_vfiprintf_r+0x228>)
 800bbd2:	a904      	add	r1, sp, #16
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	f7fc fc39 	bl	800844c <_printf_float>
 800bbda:	4607      	mov	r7, r0
 800bbdc:	1c78      	adds	r0, r7, #1
 800bbde:	d1d6      	bne.n	800bb8e <_vfiprintf_r+0x19a>
 800bbe0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbe2:	07d9      	lsls	r1, r3, #31
 800bbe4:	d405      	bmi.n	800bbf2 <_vfiprintf_r+0x1fe>
 800bbe6:	89ab      	ldrh	r3, [r5, #12]
 800bbe8:	059a      	lsls	r2, r3, #22
 800bbea:	d402      	bmi.n	800bbf2 <_vfiprintf_r+0x1fe>
 800bbec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbee:	f7fd fc31 	bl	8009454 <__retarget_lock_release_recursive>
 800bbf2:	89ab      	ldrh	r3, [r5, #12]
 800bbf4:	065b      	lsls	r3, r3, #25
 800bbf6:	f53f af1f 	bmi.w	800ba38 <_vfiprintf_r+0x44>
 800bbfa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bbfc:	e71e      	b.n	800ba3c <_vfiprintf_r+0x48>
 800bbfe:	ab03      	add	r3, sp, #12
 800bc00:	9300      	str	r3, [sp, #0]
 800bc02:	462a      	mov	r2, r5
 800bc04:	4b05      	ldr	r3, [pc, #20]	@ (800bc1c <_vfiprintf_r+0x228>)
 800bc06:	a904      	add	r1, sp, #16
 800bc08:	4630      	mov	r0, r6
 800bc0a:	f7fc feb7 	bl	800897c <_printf_i>
 800bc0e:	e7e4      	b.n	800bbda <_vfiprintf_r+0x1e6>
 800bc10:	0800c1fd 	.word	0x0800c1fd
 800bc14:	0800c207 	.word	0x0800c207
 800bc18:	0800844d 	.word	0x0800844d
 800bc1c:	0800b9d1 	.word	0x0800b9d1
 800bc20:	0800c203 	.word	0x0800c203

0800bc24 <__swbuf_r>:
 800bc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc26:	460e      	mov	r6, r1
 800bc28:	4614      	mov	r4, r2
 800bc2a:	4605      	mov	r5, r0
 800bc2c:	b118      	cbz	r0, 800bc36 <__swbuf_r+0x12>
 800bc2e:	6a03      	ldr	r3, [r0, #32]
 800bc30:	b90b      	cbnz	r3, 800bc36 <__swbuf_r+0x12>
 800bc32:	f7fd fa5b 	bl	80090ec <__sinit>
 800bc36:	69a3      	ldr	r3, [r4, #24]
 800bc38:	60a3      	str	r3, [r4, #8]
 800bc3a:	89a3      	ldrh	r3, [r4, #12]
 800bc3c:	071a      	lsls	r2, r3, #28
 800bc3e:	d501      	bpl.n	800bc44 <__swbuf_r+0x20>
 800bc40:	6923      	ldr	r3, [r4, #16]
 800bc42:	b943      	cbnz	r3, 800bc56 <__swbuf_r+0x32>
 800bc44:	4621      	mov	r1, r4
 800bc46:	4628      	mov	r0, r5
 800bc48:	f000 f82a 	bl	800bca0 <__swsetup_r>
 800bc4c:	b118      	cbz	r0, 800bc56 <__swbuf_r+0x32>
 800bc4e:	f04f 37ff 	mov.w	r7, #4294967295
 800bc52:	4638      	mov	r0, r7
 800bc54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc56:	6823      	ldr	r3, [r4, #0]
 800bc58:	6922      	ldr	r2, [r4, #16]
 800bc5a:	1a98      	subs	r0, r3, r2
 800bc5c:	6963      	ldr	r3, [r4, #20]
 800bc5e:	b2f6      	uxtb	r6, r6
 800bc60:	4283      	cmp	r3, r0
 800bc62:	4637      	mov	r7, r6
 800bc64:	dc05      	bgt.n	800bc72 <__swbuf_r+0x4e>
 800bc66:	4621      	mov	r1, r4
 800bc68:	4628      	mov	r0, r5
 800bc6a:	f7ff fdc7 	bl	800b7fc <_fflush_r>
 800bc6e:	2800      	cmp	r0, #0
 800bc70:	d1ed      	bne.n	800bc4e <__swbuf_r+0x2a>
 800bc72:	68a3      	ldr	r3, [r4, #8]
 800bc74:	3b01      	subs	r3, #1
 800bc76:	60a3      	str	r3, [r4, #8]
 800bc78:	6823      	ldr	r3, [r4, #0]
 800bc7a:	1c5a      	adds	r2, r3, #1
 800bc7c:	6022      	str	r2, [r4, #0]
 800bc7e:	701e      	strb	r6, [r3, #0]
 800bc80:	6962      	ldr	r2, [r4, #20]
 800bc82:	1c43      	adds	r3, r0, #1
 800bc84:	429a      	cmp	r2, r3
 800bc86:	d004      	beq.n	800bc92 <__swbuf_r+0x6e>
 800bc88:	89a3      	ldrh	r3, [r4, #12]
 800bc8a:	07db      	lsls	r3, r3, #31
 800bc8c:	d5e1      	bpl.n	800bc52 <__swbuf_r+0x2e>
 800bc8e:	2e0a      	cmp	r6, #10
 800bc90:	d1df      	bne.n	800bc52 <__swbuf_r+0x2e>
 800bc92:	4621      	mov	r1, r4
 800bc94:	4628      	mov	r0, r5
 800bc96:	f7ff fdb1 	bl	800b7fc <_fflush_r>
 800bc9a:	2800      	cmp	r0, #0
 800bc9c:	d0d9      	beq.n	800bc52 <__swbuf_r+0x2e>
 800bc9e:	e7d6      	b.n	800bc4e <__swbuf_r+0x2a>

0800bca0 <__swsetup_r>:
 800bca0:	b538      	push	{r3, r4, r5, lr}
 800bca2:	4b29      	ldr	r3, [pc, #164]	@ (800bd48 <__swsetup_r+0xa8>)
 800bca4:	4605      	mov	r5, r0
 800bca6:	6818      	ldr	r0, [r3, #0]
 800bca8:	460c      	mov	r4, r1
 800bcaa:	b118      	cbz	r0, 800bcb4 <__swsetup_r+0x14>
 800bcac:	6a03      	ldr	r3, [r0, #32]
 800bcae:	b90b      	cbnz	r3, 800bcb4 <__swsetup_r+0x14>
 800bcb0:	f7fd fa1c 	bl	80090ec <__sinit>
 800bcb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcb8:	0719      	lsls	r1, r3, #28
 800bcba:	d422      	bmi.n	800bd02 <__swsetup_r+0x62>
 800bcbc:	06da      	lsls	r2, r3, #27
 800bcbe:	d407      	bmi.n	800bcd0 <__swsetup_r+0x30>
 800bcc0:	2209      	movs	r2, #9
 800bcc2:	602a      	str	r2, [r5, #0]
 800bcc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcc8:	81a3      	strh	r3, [r4, #12]
 800bcca:	f04f 30ff 	mov.w	r0, #4294967295
 800bcce:	e033      	b.n	800bd38 <__swsetup_r+0x98>
 800bcd0:	0758      	lsls	r0, r3, #29
 800bcd2:	d512      	bpl.n	800bcfa <__swsetup_r+0x5a>
 800bcd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcd6:	b141      	cbz	r1, 800bcea <__swsetup_r+0x4a>
 800bcd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcdc:	4299      	cmp	r1, r3
 800bcde:	d002      	beq.n	800bce6 <__swsetup_r+0x46>
 800bce0:	4628      	mov	r0, r5
 800bce2:	f7fe fa31 	bl	800a148 <_free_r>
 800bce6:	2300      	movs	r3, #0
 800bce8:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcea:	89a3      	ldrh	r3, [r4, #12]
 800bcec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bcf0:	81a3      	strh	r3, [r4, #12]
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	6063      	str	r3, [r4, #4]
 800bcf6:	6923      	ldr	r3, [r4, #16]
 800bcf8:	6023      	str	r3, [r4, #0]
 800bcfa:	89a3      	ldrh	r3, [r4, #12]
 800bcfc:	f043 0308 	orr.w	r3, r3, #8
 800bd00:	81a3      	strh	r3, [r4, #12]
 800bd02:	6923      	ldr	r3, [r4, #16]
 800bd04:	b94b      	cbnz	r3, 800bd1a <__swsetup_r+0x7a>
 800bd06:	89a3      	ldrh	r3, [r4, #12]
 800bd08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bd0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd10:	d003      	beq.n	800bd1a <__swsetup_r+0x7a>
 800bd12:	4621      	mov	r1, r4
 800bd14:	4628      	mov	r0, r5
 800bd16:	f000 f883 	bl	800be20 <__smakebuf_r>
 800bd1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd1e:	f013 0201 	ands.w	r2, r3, #1
 800bd22:	d00a      	beq.n	800bd3a <__swsetup_r+0x9a>
 800bd24:	2200      	movs	r2, #0
 800bd26:	60a2      	str	r2, [r4, #8]
 800bd28:	6962      	ldr	r2, [r4, #20]
 800bd2a:	4252      	negs	r2, r2
 800bd2c:	61a2      	str	r2, [r4, #24]
 800bd2e:	6922      	ldr	r2, [r4, #16]
 800bd30:	b942      	cbnz	r2, 800bd44 <__swsetup_r+0xa4>
 800bd32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bd36:	d1c5      	bne.n	800bcc4 <__swsetup_r+0x24>
 800bd38:	bd38      	pop	{r3, r4, r5, pc}
 800bd3a:	0799      	lsls	r1, r3, #30
 800bd3c:	bf58      	it	pl
 800bd3e:	6962      	ldrpl	r2, [r4, #20]
 800bd40:	60a2      	str	r2, [r4, #8]
 800bd42:	e7f4      	b.n	800bd2e <__swsetup_r+0x8e>
 800bd44:	2000      	movs	r0, #0
 800bd46:	e7f7      	b.n	800bd38 <__swsetup_r+0x98>
 800bd48:	20000188 	.word	0x20000188

0800bd4c <_raise_r>:
 800bd4c:	291f      	cmp	r1, #31
 800bd4e:	b538      	push	{r3, r4, r5, lr}
 800bd50:	4605      	mov	r5, r0
 800bd52:	460c      	mov	r4, r1
 800bd54:	d904      	bls.n	800bd60 <_raise_r+0x14>
 800bd56:	2316      	movs	r3, #22
 800bd58:	6003      	str	r3, [r0, #0]
 800bd5a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd5e:	bd38      	pop	{r3, r4, r5, pc}
 800bd60:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bd62:	b112      	cbz	r2, 800bd6a <_raise_r+0x1e>
 800bd64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd68:	b94b      	cbnz	r3, 800bd7e <_raise_r+0x32>
 800bd6a:	4628      	mov	r0, r5
 800bd6c:	f000 f830 	bl	800bdd0 <_getpid_r>
 800bd70:	4622      	mov	r2, r4
 800bd72:	4601      	mov	r1, r0
 800bd74:	4628      	mov	r0, r5
 800bd76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd7a:	f000 b817 	b.w	800bdac <_kill_r>
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d00a      	beq.n	800bd98 <_raise_r+0x4c>
 800bd82:	1c59      	adds	r1, r3, #1
 800bd84:	d103      	bne.n	800bd8e <_raise_r+0x42>
 800bd86:	2316      	movs	r3, #22
 800bd88:	6003      	str	r3, [r0, #0]
 800bd8a:	2001      	movs	r0, #1
 800bd8c:	e7e7      	b.n	800bd5e <_raise_r+0x12>
 800bd8e:	2100      	movs	r1, #0
 800bd90:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bd94:	4620      	mov	r0, r4
 800bd96:	4798      	blx	r3
 800bd98:	2000      	movs	r0, #0
 800bd9a:	e7e0      	b.n	800bd5e <_raise_r+0x12>

0800bd9c <raise>:
 800bd9c:	4b02      	ldr	r3, [pc, #8]	@ (800bda8 <raise+0xc>)
 800bd9e:	4601      	mov	r1, r0
 800bda0:	6818      	ldr	r0, [r3, #0]
 800bda2:	f7ff bfd3 	b.w	800bd4c <_raise_r>
 800bda6:	bf00      	nop
 800bda8:	20000188 	.word	0x20000188

0800bdac <_kill_r>:
 800bdac:	b538      	push	{r3, r4, r5, lr}
 800bdae:	4d07      	ldr	r5, [pc, #28]	@ (800bdcc <_kill_r+0x20>)
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	4604      	mov	r4, r0
 800bdb4:	4608      	mov	r0, r1
 800bdb6:	4611      	mov	r1, r2
 800bdb8:	602b      	str	r3, [r5, #0]
 800bdba:	f7f5 fee3 	bl	8001b84 <_kill>
 800bdbe:	1c43      	adds	r3, r0, #1
 800bdc0:	d102      	bne.n	800bdc8 <_kill_r+0x1c>
 800bdc2:	682b      	ldr	r3, [r5, #0]
 800bdc4:	b103      	cbz	r3, 800bdc8 <_kill_r+0x1c>
 800bdc6:	6023      	str	r3, [r4, #0]
 800bdc8:	bd38      	pop	{r3, r4, r5, pc}
 800bdca:	bf00      	nop
 800bdcc:	20005714 	.word	0x20005714

0800bdd0 <_getpid_r>:
 800bdd0:	f7f5 bed6 	b.w	8001b80 <_getpid>

0800bdd4 <__swhatbuf_r>:
 800bdd4:	b570      	push	{r4, r5, r6, lr}
 800bdd6:	460c      	mov	r4, r1
 800bdd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bddc:	2900      	cmp	r1, #0
 800bdde:	b096      	sub	sp, #88	@ 0x58
 800bde0:	4615      	mov	r5, r2
 800bde2:	461e      	mov	r6, r3
 800bde4:	da0d      	bge.n	800be02 <__swhatbuf_r+0x2e>
 800bde6:	89a3      	ldrh	r3, [r4, #12]
 800bde8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bdec:	f04f 0100 	mov.w	r1, #0
 800bdf0:	bf14      	ite	ne
 800bdf2:	2340      	movne	r3, #64	@ 0x40
 800bdf4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bdf8:	2000      	movs	r0, #0
 800bdfa:	6031      	str	r1, [r6, #0]
 800bdfc:	602b      	str	r3, [r5, #0]
 800bdfe:	b016      	add	sp, #88	@ 0x58
 800be00:	bd70      	pop	{r4, r5, r6, pc}
 800be02:	466a      	mov	r2, sp
 800be04:	f000 f848 	bl	800be98 <_fstat_r>
 800be08:	2800      	cmp	r0, #0
 800be0a:	dbec      	blt.n	800bde6 <__swhatbuf_r+0x12>
 800be0c:	9901      	ldr	r1, [sp, #4]
 800be0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be16:	4259      	negs	r1, r3
 800be18:	4159      	adcs	r1, r3
 800be1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be1e:	e7eb      	b.n	800bdf8 <__swhatbuf_r+0x24>

0800be20 <__smakebuf_r>:
 800be20:	898b      	ldrh	r3, [r1, #12]
 800be22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be24:	079d      	lsls	r5, r3, #30
 800be26:	4606      	mov	r6, r0
 800be28:	460c      	mov	r4, r1
 800be2a:	d507      	bpl.n	800be3c <__smakebuf_r+0x1c>
 800be2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be30:	6023      	str	r3, [r4, #0]
 800be32:	6123      	str	r3, [r4, #16]
 800be34:	2301      	movs	r3, #1
 800be36:	6163      	str	r3, [r4, #20]
 800be38:	b003      	add	sp, #12
 800be3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be3c:	ab01      	add	r3, sp, #4
 800be3e:	466a      	mov	r2, sp
 800be40:	f7ff ffc8 	bl	800bdd4 <__swhatbuf_r>
 800be44:	9f00      	ldr	r7, [sp, #0]
 800be46:	4605      	mov	r5, r0
 800be48:	4639      	mov	r1, r7
 800be4a:	4630      	mov	r0, r6
 800be4c:	f7fe fd2a 	bl	800a8a4 <_malloc_r>
 800be50:	b948      	cbnz	r0, 800be66 <__smakebuf_r+0x46>
 800be52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be56:	059a      	lsls	r2, r3, #22
 800be58:	d4ee      	bmi.n	800be38 <__smakebuf_r+0x18>
 800be5a:	f023 0303 	bic.w	r3, r3, #3
 800be5e:	f043 0302 	orr.w	r3, r3, #2
 800be62:	81a3      	strh	r3, [r4, #12]
 800be64:	e7e2      	b.n	800be2c <__smakebuf_r+0xc>
 800be66:	89a3      	ldrh	r3, [r4, #12]
 800be68:	6020      	str	r0, [r4, #0]
 800be6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be6e:	81a3      	strh	r3, [r4, #12]
 800be70:	9b01      	ldr	r3, [sp, #4]
 800be72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be76:	b15b      	cbz	r3, 800be90 <__smakebuf_r+0x70>
 800be78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be7c:	4630      	mov	r0, r6
 800be7e:	f000 f81d 	bl	800bebc <_isatty_r>
 800be82:	b128      	cbz	r0, 800be90 <__smakebuf_r+0x70>
 800be84:	89a3      	ldrh	r3, [r4, #12]
 800be86:	f023 0303 	bic.w	r3, r3, #3
 800be8a:	f043 0301 	orr.w	r3, r3, #1
 800be8e:	81a3      	strh	r3, [r4, #12]
 800be90:	89a3      	ldrh	r3, [r4, #12]
 800be92:	431d      	orrs	r5, r3
 800be94:	81a5      	strh	r5, [r4, #12]
 800be96:	e7cf      	b.n	800be38 <__smakebuf_r+0x18>

0800be98 <_fstat_r>:
 800be98:	b538      	push	{r3, r4, r5, lr}
 800be9a:	4d07      	ldr	r5, [pc, #28]	@ (800beb8 <_fstat_r+0x20>)
 800be9c:	2300      	movs	r3, #0
 800be9e:	4604      	mov	r4, r0
 800bea0:	4608      	mov	r0, r1
 800bea2:	4611      	mov	r1, r2
 800bea4:	602b      	str	r3, [r5, #0]
 800bea6:	f7f5 fe9b 	bl	8001be0 <_fstat>
 800beaa:	1c43      	adds	r3, r0, #1
 800beac:	d102      	bne.n	800beb4 <_fstat_r+0x1c>
 800beae:	682b      	ldr	r3, [r5, #0]
 800beb0:	b103      	cbz	r3, 800beb4 <_fstat_r+0x1c>
 800beb2:	6023      	str	r3, [r4, #0]
 800beb4:	bd38      	pop	{r3, r4, r5, pc}
 800beb6:	bf00      	nop
 800beb8:	20005714 	.word	0x20005714

0800bebc <_isatty_r>:
 800bebc:	b538      	push	{r3, r4, r5, lr}
 800bebe:	4d06      	ldr	r5, [pc, #24]	@ (800bed8 <_isatty_r+0x1c>)
 800bec0:	2300      	movs	r3, #0
 800bec2:	4604      	mov	r4, r0
 800bec4:	4608      	mov	r0, r1
 800bec6:	602b      	str	r3, [r5, #0]
 800bec8:	f7f5 fe90 	bl	8001bec <_isatty>
 800becc:	1c43      	adds	r3, r0, #1
 800bece:	d102      	bne.n	800bed6 <_isatty_r+0x1a>
 800bed0:	682b      	ldr	r3, [r5, #0]
 800bed2:	b103      	cbz	r3, 800bed6 <_isatty_r+0x1a>
 800bed4:	6023      	str	r3, [r4, #0]
 800bed6:	bd38      	pop	{r3, r4, r5, pc}
 800bed8:	20005714 	.word	0x20005714

0800bedc <_init>:
 800bedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bede:	bf00      	nop
 800bee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bee2:	bc08      	pop	{r3}
 800bee4:	469e      	mov	lr, r3
 800bee6:	4770      	bx	lr

0800bee8 <_fini>:
 800bee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beea:	bf00      	nop
 800beec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beee:	bc08      	pop	{r3}
 800bef0:	469e      	mov	lr, r3
 800bef2:	4770      	bx	lr
