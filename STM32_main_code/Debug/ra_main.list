
ra_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096c4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000537c  08009868  08009868  0000a868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebe4  0800ebe4  000101f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ebe4  0800ebe4  0000fbe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ebec  0800ebec  000101f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ebec  0800ebec  0000fbec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ebf0  0800ebf0  0000fbf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800ebf4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae8  200001f8  0800ede8  000101f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ce0  0800ede8  00010ce0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ffae  00000000  00000000  00010224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046f0  00000000  00000000  000301d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000fd20  00000000  00000000  000348c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  000445e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ad4  00000000  00000000  00045618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019ded  00000000  00000000  000470ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023578  00000000  00000000  00060ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095a25  00000000  00000000  00084451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  00119e76  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004448  00000000  00000000  00119f34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0011e37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000013a6  00000000  00000000  0011e3ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000078  00000000  00000000  0011f792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800984c 	.word	0x0800984c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800984c 	.word	0x0800984c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <MultivariablePID_Init>:
#define CMD_SET_KI              ( ('K'<<8) | 'I') // "KI"
#define CMD_SET_KD              ( ('K'<<8) | 'D') // "KD"

#define MAX_UART_BUFFER 800

void MultivariablePID_Init(MultivariablePID *pid) {
 8001030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (int i = 0; i < NUM_JOINTS*NUM_JOINTS; i++) {
		pid->Kp_data[i] = 0.0f;
 8001034:	22c0      	movs	r2, #192	@ 0xc0
 8001036:	2100      	movs	r1, #0
void MultivariablePID_Init(MultivariablePID *pid) {
 8001038:	4604      	mov	r4, r0
		pid->Kp_data[i] = 0.0f;
 800103a:	f005 fe0a 	bl	8006c52 <memset>
		pid->Ki_data[i] = 0.0f;
		pid->Kd_data[i] = 0.0f;
	}

	arm_mat_init_f32(&(pid->Kp_mat), NUM_JOINTS, NUM_JOINTS, pid->Kp_data);
 800103e:	2204      	movs	r2, #4
 8001040:	4623      	mov	r3, r4
 8001042:	4611      	mov	r1, r2
 8001044:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 8001048:	f003 ff46 	bl	8004ed8 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->Ki_mat), NUM_JOINTS, NUM_JOINTS, pid->Ki_data);
 800104c:	2204      	movs	r2, #4
 800104e:	4611      	mov	r1, r2
 8001050:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8001054:	f104 00c8 	add.w	r0, r4, #200	@ 0xc8
 8001058:	f003 ff3e 	bl	8004ed8 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->Kd_mat), NUM_JOINTS, NUM_JOINTS, pid->Kd_data);
 800105c:	2204      	movs	r2, #4
 800105e:	4611      	mov	r1, r2
 8001060:	f104 0380 	add.w	r3, r4, #128	@ 0x80
 8001064:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001068:	f003 ff36 	bl	8004ed8 <arm_mat_init_f32>

	// Initialize data arrays to zero
	for (int i = 0; i < NUM_JOINTS; i++) {
		pid->setpoint_data[i] = 2048.0f;
		pid->meas_data[i] = 0.0f;
 800106c:	f04f 0820 	mov.w	r8, #32
		pid->setpoint_data[i] = 2048.0f;
 8001070:	f04f 438a 	mov.w	r3, #1157627904	@ 0x45000000
 8001074:	f104 07e8 	add.w	r7, r4, #232	@ 0xe8
 8001078:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 800107c:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 8001080:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001084:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
		pid->meas_data[i] = 0.0f;
 8001088:	4642      	mov	r2, r8
 800108a:	f504 7690 	add.w	r6, r4, #288	@ 0x120
 800108e:	2100      	movs	r1, #0
 8001090:	4638      	mov	r0, r7
 8001092:	f005 fdde 	bl	8006c52 <memset>
 8001096:	f504 75b4 	add.w	r5, r4, #360	@ 0x168
		pid->output_data[i] = 0.0f;

		pid->error_data[i] = 0.0f;
 800109a:	2230      	movs	r2, #48	@ 0x30
 800109c:	2100      	movs	r1, #0
 800109e:	4630      	mov	r0, r6
 80010a0:	f005 fdd7 	bl	8006c52 <memset>
		pid->error_sum_data[i] = 0.0f;
		pid->error_prev_data[i] = 0.0f;

		pid->temp1_N_1_data[i] = 0.0f;
 80010a4:	4642      	mov	r2, r8
 80010a6:	2100      	movs	r1, #0
 80010a8:	4628      	mov	r0, r5
 80010aa:	f005 fdd2 	bl	8006c52 <memset>
		pid->temp2_N_1_data[i] = 0.0f;
	}

	arm_mat_init_f32(&(pid->setpoint_mat), NUM_JOINTS, 1, pid->setpoint_data);
 80010ae:	f104 03d8 	add.w	r3, r4, #216	@ 0xd8
 80010b2:	f504 7084 	add.w	r0, r4, #264	@ 0x108
 80010b6:	2201      	movs	r2, #1
 80010b8:	2104      	movs	r1, #4
 80010ba:	f003 ff0d 	bl	8004ed8 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->meas_mat), NUM_JOINTS, 1, pid->meas_data);
 80010be:	463b      	mov	r3, r7
 80010c0:	f504 7088 	add.w	r0, r4, #272	@ 0x110
 80010c4:	2201      	movs	r2, #1
 80010c6:	2104      	movs	r1, #4
 80010c8:	f003 ff06 	bl	8004ed8 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->output_mat), NUM_JOINTS, 1, pid->output_data);
 80010cc:	f104 03f8 	add.w	r3, r4, #248	@ 0xf8
 80010d0:	f504 708c 	add.w	r0, r4, #280	@ 0x118
 80010d4:	2201      	movs	r2, #1
 80010d6:	2104      	movs	r1, #4
 80010d8:	f003 fefe 	bl	8004ed8 <arm_mat_init_f32>

	arm_mat_init_f32(&(pid->error_mat), NUM_JOINTS, 1, pid->error_data);
 80010dc:	4633      	mov	r3, r6
 80010de:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 80010e2:	2201      	movs	r2, #1
 80010e4:	2104      	movs	r1, #4
 80010e6:	f003 fef7 	bl	8004ed8 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->error_sum_mat), NUM_JOINTS, 1, pid->error_sum_data);
 80010ea:	f504 7398 	add.w	r3, r4, #304	@ 0x130
 80010ee:	f504 70ac 	add.w	r0, r4, #344	@ 0x158
 80010f2:	2201      	movs	r2, #1
 80010f4:	2104      	movs	r1, #4
 80010f6:	f003 feef 	bl	8004ed8 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->error_prev_mat), NUM_JOINTS, 1, pid->error_prev_data);
 80010fa:	f504 73a0 	add.w	r3, r4, #320	@ 0x140
 80010fe:	f504 70b0 	add.w	r0, r4, #352	@ 0x160
 8001102:	2201      	movs	r2, #1
 8001104:	2104      	movs	r1, #4
 8001106:	f003 fee7 	bl	8004ed8 <arm_mat_init_f32>

	arm_mat_init_f32(&(pid->temp1_N_1_mat), NUM_JOINTS, 1, pid->temp1_N_1_data);
 800110a:	462b      	mov	r3, r5
 800110c:	f504 70c4 	add.w	r0, r4, #392	@ 0x188
 8001110:	2201      	movs	r2, #1
 8001112:	2104      	movs	r1, #4
 8001114:	f003 fee0 	bl	8004ed8 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->temp2_N_1_mat), NUM_JOINTS, 1, pid->temp2_N_1_data);
 8001118:	f504 73bc 	add.w	r3, r4, #376	@ 0x178
 800111c:	f504 70c8 	add.w	r0, r4, #400	@ 0x190
 8001120:	2201      	movs	r2, #1
 8001122:	2104      	movs	r1, #4
 8001124:	f003 fed8 	bl	8004ed8 <arm_mat_init_f32>

	pid->invert_data[0] = 1.0f;
 8001128:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
	pid->invert_data[1] = 1.0f;
	pid->invert_data[2] = 1.0f;
	pid->invert_data[3] = -1.0f;
 800112c:	4a09      	ldr	r2, [pc, #36]	@ (8001154 <MultivariablePID_Init+0x124>)
	pid->invert_data[0] = 1.0f;
 800112e:	f8c4 3198 	str.w	r3, [r4, #408]	@ 0x198
	pid->invert_data[1] = 1.0f;
 8001132:	f8c4 319c 	str.w	r3, [r4, #412]	@ 0x19c
	pid->invert_data[2] = 1.0f;
 8001136:	f8c4 31a0 	str.w	r3, [r4, #416]	@ 0x1a0
	pid->invert_data[3] = -1.0f;
 800113a:	f8c4 21a4 	str.w	r2, [r4, #420]	@ 0x1a4
	arm_mat_init_f32(&(pid->invert_mat), NUM_JOINTS, 1, pid->invert_data);
 800113e:	f504 73cc 	add.w	r3, r4, #408	@ 0x198
 8001142:	f504 70d4 	add.w	r0, r4, #424	@ 0x1a8
 8001146:	2201      	movs	r2, #1
}
 8001148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	arm_mat_init_f32(&(pid->invert_mat), NUM_JOINTS, 1, pid->invert_data);
 800114c:	2104      	movs	r1, #4
 800114e:	f003 bec3 	b.w	8004ed8 <arm_mat_init_f32>
 8001152:	bf00      	nop
 8001154:	bf800000 	.word	0xbf800000

08001158 <MultivariablePID_SetSetpoint>:

void MultivariablePID_SetSetpoint(MultivariablePID *pid, float32_t *setpoint) {
	if (pid == NULL || setpoint == NULL) return;
 8001158:	2800      	cmp	r0, #0
 800115a:	d04d      	beq.n	80011f8 <MultivariablePID_SetSetpoint+0xa0>
 800115c:	2900      	cmp	r1, #0
 800115e:	d04b      	beq.n	80011f8 <MultivariablePID_SetSetpoint+0xa0>

	for (int i = 0; i < NUM_JOINTS; i++) {
		// Check if setpoint is within valid range
		if (setpoint[i] < SETPOINT_MIN) {
			pid->setpoint_data[i] = SETPOINT_MIN;
		} else if (setpoint[i] > SETPOINT_MAX) {
 8001160:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80011fc <MultivariablePID_SetSetpoint+0xa4>
 8001164:	edd1 6a00 	vldr	s13, [r1]
			pid->setpoint_data[i] = SETPOINT_MIN;
 8001168:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8001200 <MultivariablePID_SetSetpoint+0xa8>
		} else if (setpoint[i] > SETPOINT_MAX) {
 800116c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001174:	bf88      	it	hi
 8001176:	eef0 6a47 	vmovhi.f32	s13, s14
			pid->setpoint_data[i] = SETPOINT_MIN;
 800117a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800117e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001182:	bfb8      	it	lt
 8001184:	eef0 6a67 	vmovlt.f32	s13, s15
 8001188:	edc0 6a36 	vstr	s13, [r0, #216]	@ 0xd8
		} else if (setpoint[i] > SETPOINT_MAX) {
 800118c:	edd1 6a01 	vldr	s13, [r1, #4]
 8001190:	eef4 6ac7 	vcmpe.f32	s13, s14
 8001194:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001198:	bf88      	it	hi
 800119a:	eef0 6a47 	vmovhi.f32	s13, s14
			pid->setpoint_data[i] = SETPOINT_MIN;
 800119e:	eef4 6ae7 	vcmpe.f32	s13, s15
 80011a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a6:	bfb8      	it	lt
 80011a8:	eef0 6a67 	vmovlt.f32	s13, s15
 80011ac:	edc0 6a37 	vstr	s13, [r0, #220]	@ 0xdc
		} else if (setpoint[i] > SETPOINT_MAX) {
 80011b0:	edd1 6a02 	vldr	s13, [r1, #8]
 80011b4:	eef4 6ac7 	vcmpe.f32	s13, s14
 80011b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011bc:	bf88      	it	hi
 80011be:	eef0 6a47 	vmovhi.f32	s13, s14
			pid->setpoint_data[i] = SETPOINT_MIN;
 80011c2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80011c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ca:	bfb8      	it	lt
 80011cc:	eef0 6a67 	vmovlt.f32	s13, s15
 80011d0:	edc0 6a38 	vstr	s13, [r0, #224]	@ 0xe0
		} else if (setpoint[i] > SETPOINT_MAX) {
 80011d4:	edd1 6a03 	vldr	s13, [r1, #12]
 80011d8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80011dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e0:	bf98      	it	ls
 80011e2:	eeb0 7a66 	vmovls.f32	s14, s13
			pid->setpoint_data[i] = SETPOINT_MIN;
 80011e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ee:	bfb8      	it	lt
 80011f0:	eeb0 7a67 	vmovlt.f32	s14, s15
 80011f4:	ed80 7a39 	vstr	s14, [r0, #228]	@ 0xe4
			pid->setpoint_data[i] = SETPOINT_MAX;
		} else {
			pid->setpoint_data[i] = setpoint[i];
		}
	}
}
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	453b8000 	.word	0x453b8000
 8001200:	44898000 	.word	0x44898000

08001204 <MultivariablePID_Compute>:

void MultivariablePID_Compute(MultivariablePID *pid, float32_t *meas) {
  if (pid == NULL || meas == NULL) return;
 8001204:	2800      	cmp	r0, #0
 8001206:	d069      	beq.n	80012dc <MultivariablePID_Compute+0xd8>
 8001208:	2900      	cmp	r1, #0
 800120a:	d067      	beq.n	80012dc <MultivariablePID_Compute+0xd8>

  for (int i = 0; i < NUM_JOINTS; i++) {
    pid->meas_data[i] = meas[i];
 800120c:	680b      	ldr	r3, [r1, #0]
void MultivariablePID_Compute(MultivariablePID *pid, float32_t *meas) {
 800120e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    pid->meas_data[i] = meas[i];
 8001212:	f8c0 30e8 	str.w	r3, [r0, #232]	@ 0xe8
 8001216:	684b      	ldr	r3, [r1, #4]
 8001218:	f8c0 30ec 	str.w	r3, [r0, #236]	@ 0xec
 800121c:	688b      	ldr	r3, [r1, #8]
 800121e:	f8c0 30f0 	str.w	r3, [r0, #240]	@ 0xf0
 8001222:	4604      	mov	r4, r0
 8001224:	68cb      	ldr	r3, [r1, #12]
 8001226:	f8c0 30f4 	str.w	r3, [r0, #244]	@ 0xf4
  }

  // error = setpoint - measurement
  arm_mat_sub_f32(&(pid->setpoint_mat), &(pid->meas_mat), &(pid->error_mat));
 800122a:	f500 77a8 	add.w	r7, r0, #336	@ 0x150

  // Proportional Term: P = Kp * error
  arm_mat_mult_f32(&(pid->Kp_mat), &(pid->error_mat), &(pid->output_mat));
 800122e:	f504 768c 	add.w	r6, r4, #280	@ 0x118
  arm_mat_sub_f32(&(pid->setpoint_mat), &(pid->meas_mat), &(pid->error_mat));
 8001232:	463a      	mov	r2, r7
 8001234:	f500 7188 	add.w	r1, r0, #272	@ 0x110
 8001238:	f500 7084 	add.w	r0, r0, #264	@ 0x108
 800123c:	f003 fcd0 	bl	8004be0 <arm_mat_sub_f32>

  // Integral Term: I = Ki * integral(error)
  // Update error sum (accumulate integral of error)
  // Scale by dt (sample time)
  arm_mat_add_f32(&(pid->error_sum_mat), &(pid->error_mat), &(pid->error_sum_mat));
 8001240:	f504 75ac 	add.w	r5, r4, #344	@ 0x158
  arm_mat_mult_f32(&(pid->Kp_mat), &(pid->error_mat), &(pid->output_mat));
 8001244:	4632      	mov	r2, r6
 8001246:	4639      	mov	r1, r7
 8001248:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 800124c:	f003 fd34 	bl	8004cb8 <arm_mat_mult_f32>
  arm_mat_mult_f32(&(pid->Ki_mat), &(pid->error_sum_mat), &(pid->temp1_N_1_mat));
 8001250:	f504 78c4 	add.w	r8, r4, #392	@ 0x188
  arm_mat_add_f32(&(pid->error_sum_mat), &(pid->error_mat), &(pid->error_sum_mat));
 8001254:	462a      	mov	r2, r5
 8001256:	4639      	mov	r1, r7
 8001258:	4628      	mov	r0, r5
 800125a:	f003 fe41 	bl	8004ee0 <arm_mat_add_f32>
  arm_mat_mult_f32(&(pid->Ki_mat), &(pid->error_sum_mat), &(pid->temp1_N_1_mat));
 800125e:	4629      	mov	r1, r5
 8001260:	4642      	mov	r2, r8
 8001262:	f104 00c8 	add.w	r0, r4, #200	@ 0xc8
 8001266:	f003 fd27 	bl	8004cb8 <arm_mat_mult_f32>
  arm_scale_f32(pid->temp1_N_1_data, pid->dt, pid->temp1_N_1_data, NUM_JOINTS);
 800126a:	f504 71b4 	add.w	r1, r4, #360	@ 0x168
 800126e:	ed94 0a6c 	vldr	s0, [r4, #432]	@ 0x1b0

  // Derivative Term: D = Kd * (error - previous_error)
  // Update the derivative term (change in error)
  // Scale by dt (sample time)
  arm_mat_sub_f32(&(pid->error_mat), &(pid->error_prev_mat), &(pid->temp2_N_1_mat));
 8001272:	f504 75c8 	add.w	r5, r4, #400	@ 0x190
  arm_scale_f32(pid->temp1_N_1_data, pid->dt, pid->temp1_N_1_data, NUM_JOINTS);
 8001276:	4608      	mov	r0, r1
 8001278:	2204      	movs	r2, #4
 800127a:	f003 fe9d 	bl	8004fb8 <arm_scale_f32>
  arm_mat_sub_f32(&(pid->error_mat), &(pid->error_prev_mat), &(pid->temp2_N_1_mat));
 800127e:	462a      	mov	r2, r5
 8001280:	f504 71b0 	add.w	r1, r4, #352	@ 0x160
 8001284:	4638      	mov	r0, r7
 8001286:	f003 fcab 	bl	8004be0 <arm_mat_sub_f32>
  arm_mat_mult_f32(&(pid->Kd_mat), &(pid->temp2_N_1_mat), &(pid->temp2_N_1_mat));
 800128a:	462a      	mov	r2, r5
 800128c:	4629      	mov	r1, r5
 800128e:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001292:	f003 fd11 	bl	8004cb8 <arm_mat_mult_f32>
  arm_scale_f32(pid->temp2_N_1_data, pid->dt, pid->temp2_N_1_data, NUM_JOINTS);
 8001296:	f504 71bc 	add.w	r1, r4, #376	@ 0x178
 800129a:	ed94 0a6c 	vldr	s0, [r4, #432]	@ 0x1b0
 800129e:	4608      	mov	r0, r1
 80012a0:	2204      	movs	r2, #4
 80012a2:	f003 fe89 	bl	8004fb8 <arm_scale_f32>

  // Sum the P, I, D terms
  arm_mat_add_f32(&(pid->output_mat), &(pid->temp1_N_1_mat), &(pid->output_mat));  // P + I
 80012a6:	4632      	mov	r2, r6
 80012a8:	4641      	mov	r1, r8
 80012aa:	4630      	mov	r0, r6
 80012ac:	f003 fe18 	bl	8004ee0 <arm_mat_add_f32>
  arm_mat_add_f32(&(pid->output_mat), &(pid->temp2_N_1_mat), &(pid->output_mat));  // P + I + D
 80012b0:	4632      	mov	r2, r6
 80012b2:	4629      	mov	r1, r5
 80012b4:	4630      	mov	r0, r6
 80012b6:	f003 fe13 	bl	8004ee0 <arm_mat_add_f32>

  // Optionally scale the final output if necessary (e.g., by a factor to adjust magnitude)
  float32_t output_scale_factor = 0.01f;
  arm_scale_f32(pid->output_data, output_scale_factor, pid->output_data, NUM_JOINTS);
 80012ba:	f104 01f8 	add.w	r1, r4, #248	@ 0xf8
 80012be:	4608      	mov	r0, r1
 80012c0:	2204      	movs	r2, #4
 80012c2:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80012e0 <MultivariablePID_Compute+0xdc>
 80012c6:	f003 fe77 	bl	8004fb8 <arm_scale_f32>

  // Apply the inversion to the output (multiply each output by its corresponding inversion value)
  //  arm_mult_f32(pid->output_data, pid->invert_data, pid->output_data, NUM_JOINTS);

  // Save the current error as the previous error for the next iteration
  arm_copy_f32(pid->error_data, pid->error_prev_data, NUM_JOINTS);
 80012ca:	f504 71a0 	add.w	r1, r4, #320	@ 0x140
 80012ce:	f504 7090 	add.w	r0, r4, #288	@ 0x120
 80012d2:	2204      	movs	r2, #4
}
 80012d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  arm_copy_f32(pid->error_data, pid->error_prev_data, NUM_JOINTS);
 80012d8:	f003 bc50 	b.w	8004b7c <arm_copy_f32>
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	3c23d70a 	.word	0x3c23d70a

080012e4 <ParsePIDParametersFromUART>:
    arm_copy_f32(new_matrix, target_data, NUM_JOINTS*NUM_JOINTS);
    // No need to re-initialize the matrix as the data pointer remains the same
}

uint8_t ParsePIDParametersFromUART(MultivariablePID *pid, char *uart_str, uint16_t len) {
    if (pid == NULL || uart_str == NULL || len == 0) return 0;
 80012e4:	2800      	cmp	r0, #0
 80012e6:	d04d      	beq.n	8001384 <ParsePIDParametersFromUART+0xa0>
uint8_t ParsePIDParametersFromUART(MultivariablePID *pid, char *uart_str, uint16_t len) {
 80012e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012ec:	460c      	mov	r4, r1
 80012ee:	b092      	sub	sp, #72	@ 0x48
    if (pid == NULL || uart_str == NULL || len == 0) return 0;
 80012f0:	2900      	cmp	r1, #0
 80012f2:	d043      	beq.n	800137c <ParsePIDParametersFromUART+0x98>
 80012f4:	2a00      	cmp	r2, #0
 80012f6:	d041      	beq.n	800137c <ParsePIDParametersFromUART+0x98>

    // Make sure the string is null-terminated
    if (uart_str[len-1] != '\0') {
 80012f8:	188b      	adds	r3, r1, r2
 80012fa:	4606      	mov	r6, r0
 80012fc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8001300:	b123      	cbz	r3, 800130c <ParsePIDParametersFromUART+0x28>
        if (len >= MAX_UART_BUFFER) {
 8001302:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 8001306:	d239      	bcs.n	800137c <ParsePIDParametersFromUART+0x98>
            // String too long, can't safely null-terminate
            return 0;
        }
        uart_str[len] = '\0';
 8001308:	2300      	movs	r3, #0
 800130a:	548b      	strb	r3, [r1, r2]
    }

    float32_t parsed_values[NUM_JOINTS*NUM_JOINTS];
    for (int i = 0; i < NUM_JOINTS*NUM_JOINTS; i++) {
        parsed_values[i] = 0.0f;
 800130c:	2240      	movs	r2, #64	@ 0x40
 800130e:	2100      	movs	r1, #0
 8001310:	a802      	add	r0, sp, #8
 8001312:	f005 fc9e 	bl	8006c52 <memset>

    // Determine which parameter is being updated
    uint16_t chosen_param;
    char *data_start = NULL;

    if (strncmp(uart_str, "KP", 2) == 0) {
 8001316:	7823      	ldrb	r3, [r4, #0]
 8001318:	2b4b      	cmp	r3, #75	@ 0x4b
 800131a:	d12f      	bne.n	800137c <ParsePIDParametersFromUART+0x98>
 800131c:	7862      	ldrb	r2, [r4, #1]
 800131e:	2a50      	cmp	r2, #80	@ 0x50
 8001320:	d137      	bne.n	8001392 <ParsePIDParametersFromUART+0xae>
        chosen_param = CMD_SET_KP;
 8001322:	f644 3750 	movw	r7, #19280	@ 0x4b50
    }
    else {
        // Unrecognized parameter
        return 0;
    }
    data_start = uart_str + 2;
 8001326:	1ca0      	adds	r0, r4, #2
    // Parse the comma-separated values
    char *token;
    char *rest = data_start;
    int index = 0;

    while ((token = strtok_r(rest, ",", &rest)) != NULL && index < NUM_JOINTS*NUM_JOINTS) {
 8001328:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 80013b0 <ParsePIDParametersFromUART+0xcc>
    char *rest = data_start;
 800132c:	9001      	str	r0, [sp, #4]
    while ((token = strtok_r(rest, ",", &rest)) != NULL && index < NUM_JOINTS*NUM_JOINTS) {
 800132e:	ad02      	add	r5, sp, #8
    int index = 0;
 8001330:	2400      	movs	r4, #0
    while ((token = strtok_r(rest, ",", &rest)) != NULL && index < NUM_JOINTS*NUM_JOINTS) {
 8001332:	e00a      	b.n	800134a <ParsePIDParametersFromUART+0x66>
        // Convert the token to float
        parsed_values[index] = (float32_t)atof(token);
 8001334:	f003 fe86 	bl	8005044 <atof>
 8001338:	ec51 0b10 	vmov	r0, r1, d0
 800133c:	f7ff fc5c 	bl	8000bf8 <__aeabi_d2f>
 8001340:	4603      	mov	r3, r0
 8001342:	f845 3b04 	str.w	r3, [r5], #4
    while ((token = strtok_r(rest, ",", &rest)) != NULL && index < NUM_JOINTS*NUM_JOINTS) {
 8001346:	9801      	ldr	r0, [sp, #4]
        index++;
 8001348:	3401      	adds	r4, #1
    while ((token = strtok_r(rest, ",", &rest)) != NULL && index < NUM_JOINTS*NUM_JOINTS) {
 800134a:	aa01      	add	r2, sp, #4
 800134c:	4641      	mov	r1, r8
 800134e:	f005 fcc2 	bl	8006cd6 <strtok_r>
 8001352:	b188      	cbz	r0, 8001378 <ParsePIDParametersFromUART+0x94>
 8001354:	2c10      	cmp	r4, #16
 8001356:	d1ed      	bne.n	8001334 <ParsePIDParametersFromUART+0x50>
    switch (chosen_param) {
 8001358:	f644 3349 	movw	r3, #19273	@ 0x4b49
 800135c:	429f      	cmp	r7, r3
 800135e:	d013      	beq.n	8001388 <ParsePIDParametersFromUART+0xa4>
 8001360:	f644 3350 	movw	r3, #19280	@ 0x4b50
 8001364:	429f      	cmp	r7, r3
 8001366:	d012      	beq.n	800138e <ParsePIDParametersFromUART+0xaa>
            target_data = pid->Kd_data;
 8001368:	f106 0180 	add.w	r1, r6, #128	@ 0x80
    arm_copy_f32(new_matrix, target_data, NUM_JOINTS*NUM_JOINTS);
 800136c:	a802      	add	r0, sp, #8
 800136e:	2210      	movs	r2, #16
 8001370:	f003 fc04 	bl	8004b7c <arm_copy_f32>
    }

    // Update the PID parameters
    MultivariablePID_SetParameter(pid, parsed_values, chosen_param);

    return 1;
 8001374:	2001      	movs	r0, #1
 8001376:	e002      	b.n	800137e <ParsePIDParametersFromUART+0x9a>
    if (index != NUM_JOINTS*NUM_JOINTS) {
 8001378:	2c10      	cmp	r4, #16
 800137a:	d0ed      	beq.n	8001358 <ParsePIDParametersFromUART+0x74>
    if (pid == NULL || uart_str == NULL || len == 0) return 0;
 800137c:	2000      	movs	r0, #0
}
 800137e:	b012      	add	sp, #72	@ 0x48
 8001380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pid == NULL || uart_str == NULL || len == 0) return 0;
 8001384:	2000      	movs	r0, #0
}
 8001386:	4770      	bx	lr
            target_data = pid->Ki_data;
 8001388:	f106 0140 	add.w	r1, r6, #64	@ 0x40
            break;
 800138c:	e7ee      	b.n	800136c <ParsePIDParametersFromUART+0x88>
            target_data = pid->Kp_data;
 800138e:	4631      	mov	r1, r6
            break;
 8001390:	e7ec      	b.n	800136c <ParsePIDParametersFromUART+0x88>
    else if (strncmp(uart_str, "KI", 2) == 0) {
 8001392:	2b4b      	cmp	r3, #75	@ 0x4b
 8001394:	d1f2      	bne.n	800137c <ParsePIDParametersFromUART+0x98>
 8001396:	2a49      	cmp	r2, #73	@ 0x49
 8001398:	d102      	bne.n	80013a0 <ParsePIDParametersFromUART+0xbc>
        chosen_param = CMD_SET_KI;
 800139a:	f644 3749 	movw	r7, #19273	@ 0x4b49
 800139e:	e7c2      	b.n	8001326 <ParsePIDParametersFromUART+0x42>
    else if (strncmp(uart_str, "KD", 2) == 0) {
 80013a0:	2b4b      	cmp	r3, #75	@ 0x4b
 80013a2:	d1eb      	bne.n	800137c <ParsePIDParametersFromUART+0x98>
 80013a4:	2a44      	cmp	r2, #68	@ 0x44
 80013a6:	d1e9      	bne.n	800137c <ParsePIDParametersFromUART+0x98>
        chosen_param = CMD_SET_KD;
 80013a8:	f644 3744 	movw	r7, #19268	@ 0x4b44
 80013ac:	e7bb      	b.n	8001326 <ParsePIDParametersFromUART+0x42>
 80013ae:	bf00      	nop
 80013b0:	08009868 	.word	0x08009868

080013b4 <Trajectory_Init>:
    arm_mat_init_f32(&(traj->coeff_mat), NUM_JOINTS_TRAJ, TRAJ_POLY_TERMS, traj->coeff_data[phase]);
}

// User functions
void Trajectory_Init(Trajectory *traj) {
	if (traj == NULL) return;
 80013b4:	2800      	cmp	r0, #0
 80013b6:	f000 80d8 	beq.w	800156a <Trajectory_Init+0x1b6>
void Trajectory_Init(Trajectory *traj) {
 80013ba:	b538      	push	{r3, r4, r5, lr}

	// Initialize all phase coefficient matrices to zero
	for (int phase = 0; phase < MAX_TRAJ_PHASES; phase++) {
		for (int i = 0; i < NUM_JOINTS_TRAJ*TRAJ_POLY_TERMS; i++) {
			traj->coeff_data[phase][i] = 0.0f;
 80013bc:	2500      	movs	r5, #0
 80013be:	4604      	mov	r4, r0
 80013c0:	6245      	str	r5, [r0, #36]	@ 0x24
 80013c2:	6285      	str	r5, [r0, #40]	@ 0x28
 80013c4:	62c5      	str	r5, [r0, #44]	@ 0x2c
 80013c6:	6305      	str	r5, [r0, #48]	@ 0x30
 80013c8:	6345      	str	r5, [r0, #52]	@ 0x34
 80013ca:	6385      	str	r5, [r0, #56]	@ 0x38
 80013cc:	63c5      	str	r5, [r0, #60]	@ 0x3c
 80013ce:	6405      	str	r5, [r0, #64]	@ 0x40
 80013d0:	6445      	str	r5, [r0, #68]	@ 0x44
 80013d2:	6485      	str	r5, [r0, #72]	@ 0x48
 80013d4:	64c5      	str	r5, [r0, #76]	@ 0x4c
 80013d6:	6505      	str	r5, [r0, #80]	@ 0x50
 80013d8:	6545      	str	r5, [r0, #84]	@ 0x54
 80013da:	6585      	str	r5, [r0, #88]	@ 0x58
 80013dc:	65c5      	str	r5, [r0, #92]	@ 0x5c
 80013de:	6605      	str	r5, [r0, #96]	@ 0x60
 80013e0:	6645      	str	r5, [r0, #100]	@ 0x64
 80013e2:	6685      	str	r5, [r0, #104]	@ 0x68
 80013e4:	66c5      	str	r5, [r0, #108]	@ 0x6c
 80013e6:	6705      	str	r5, [r0, #112]	@ 0x70
 80013e8:	6745      	str	r5, [r0, #116]	@ 0x74
		}
	} // Initialize the coefficient matrix with phase 0 data
	arm_mat_init_f32(&(traj->coeff_mat), NUM_JOINTS_TRAJ, TRAJ_POLY_TERMS, traj->coeff_data[0]);
 80013ea:	4603      	mov	r3, r0
			traj->coeff_data[phase][i] = 0.0f;
 80013ec:	6005      	str	r5, [r0, #0]
 80013ee:	6045      	str	r5, [r0, #4]
 80013f0:	6085      	str	r5, [r0, #8]
 80013f2:	60c5      	str	r5, [r0, #12]
 80013f4:	6105      	str	r5, [r0, #16]
 80013f6:	6145      	str	r5, [r0, #20]
 80013f8:	6185      	str	r5, [r0, #24]
 80013fa:	61c5      	str	r5, [r0, #28]
 80013fc:	6205      	str	r5, [r0, #32]
	arm_mat_init_f32(&(traj->coeff_mat), NUM_JOINTS_TRAJ, TRAJ_POLY_TERMS, traj->coeff_data[0]);
 80013fe:	2206      	movs	r2, #6
			traj->coeff_data[phase][i] = 0.0f;
 8001400:	6785      	str	r5, [r0, #120]	@ 0x78
	arm_mat_init_f32(&(traj->coeff_mat), NUM_JOINTS_TRAJ, TRAJ_POLY_TERMS, traj->coeff_data[0]);
 8001402:	2102      	movs	r1, #2
			traj->coeff_data[phase][i] = 0.0f;
 8001404:	67c5      	str	r5, [r0, #124]	@ 0x7c
 8001406:	f8c0 5080 	str.w	r5, [r0, #128]	@ 0x80
 800140a:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
 800140e:	f8c0 5088 	str.w	r5, [r0, #136]	@ 0x88
 8001412:	f8c0 508c 	str.w	r5, [r0, #140]	@ 0x8c
 8001416:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
 800141a:	f8c0 5094 	str.w	r5, [r0, #148]	@ 0x94
 800141e:	f8c0 5098 	str.w	r5, [r0, #152]	@ 0x98
 8001422:	f8c0 509c 	str.w	r5, [r0, #156]	@ 0x9c
 8001426:	f8c0 50a0 	str.w	r5, [r0, #160]	@ 0xa0
 800142a:	f8c0 50a4 	str.w	r5, [r0, #164]	@ 0xa4
 800142e:	f8c0 50a8 	str.w	r5, [r0, #168]	@ 0xa8
 8001432:	f8c0 50ac 	str.w	r5, [r0, #172]	@ 0xac
 8001436:	f8c0 50b0 	str.w	r5, [r0, #176]	@ 0xb0
 800143a:	f8c0 50b4 	str.w	r5, [r0, #180]	@ 0xb4
 800143e:	f8c0 50b8 	str.w	r5, [r0, #184]	@ 0xb8
 8001442:	f8c0 50bc 	str.w	r5, [r0, #188]	@ 0xbc
 8001446:	f8c0 50c0 	str.w	r5, [r0, #192]	@ 0xc0
 800144a:	f8c0 50c4 	str.w	r5, [r0, #196]	@ 0xc4
 800144e:	f8c0 50c8 	str.w	r5, [r0, #200]	@ 0xc8
 8001452:	f8c0 50cc 	str.w	r5, [r0, #204]	@ 0xcc
 8001456:	f8c0 50d0 	str.w	r5, [r0, #208]	@ 0xd0
 800145a:	f8c0 50d4 	str.w	r5, [r0, #212]	@ 0xd4
 800145e:	f8c0 50d8 	str.w	r5, [r0, #216]	@ 0xd8
 8001462:	f8c0 50dc 	str.w	r5, [r0, #220]	@ 0xdc
 8001466:	f8c0 50e0 	str.w	r5, [r0, #224]	@ 0xe0
 800146a:	f8c0 50e4 	str.w	r5, [r0, #228]	@ 0xe4
 800146e:	f8c0 50e8 	str.w	r5, [r0, #232]	@ 0xe8
 8001472:	f8c0 50ec 	str.w	r5, [r0, #236]	@ 0xec
 8001476:	f8c0 50f0 	str.w	r5, [r0, #240]	@ 0xf0
 800147a:	f8c0 50f4 	str.w	r5, [r0, #244]	@ 0xf4
 800147e:	f8c0 50f8 	str.w	r5, [r0, #248]	@ 0xf8
 8001482:	f8c0 50fc 	str.w	r5, [r0, #252]	@ 0xfc
 8001486:	f8c0 5100 	str.w	r5, [r0, #256]	@ 0x100
 800148a:	f8c0 5104 	str.w	r5, [r0, #260]	@ 0x104
 800148e:	f8c0 5108 	str.w	r5, [r0, #264]	@ 0x108
 8001492:	f8c0 510c 	str.w	r5, [r0, #268]	@ 0x10c
 8001496:	f8c0 5110 	str.w	r5, [r0, #272]	@ 0x110
 800149a:	f8c0 5114 	str.w	r5, [r0, #276]	@ 0x114
 800149e:	f8c0 5118 	str.w	r5, [r0, #280]	@ 0x118
 80014a2:	f8c0 511c 	str.w	r5, [r0, #284]	@ 0x11c
	arm_mat_init_f32(&(traj->coeff_mat), NUM_JOINTS_TRAJ, TRAJ_POLY_TERMS, traj->coeff_data[0]);
 80014a6:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 80014aa:	f003 fd15 	bl	8004ed8 <arm_mat_init_f32>

	for (int i = 0; i < TRAJ_POLY_TERMS; i++) {
 80014ae:	f504 7394 	add.w	r3, r4, #296	@ 0x128
		traj->time_vec_pos_data[i] = 0.0f;
 80014b2:	2248      	movs	r2, #72	@ 0x48
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f005 fbcb 	bl	8006c52 <memset>
		traj->time_vec_vel_data[i] = 0.0f;
		traj->time_vec_acc_data[i] = 0.0f;
	}
	arm_mat_init_f32(&(traj->time_vec_pos_mat), TRAJ_POLY_TERMS, 1, traj->time_vec_pos_data);
 80014bc:	2201      	movs	r2, #1
		traj->time_vec_pos_data[i] = 0.0f;
 80014be:	4603      	mov	r3, r0
	arm_mat_init_f32(&(traj->time_vec_pos_mat), TRAJ_POLY_TERMS, 1, traj->time_vec_pos_data);
 80014c0:	2106      	movs	r1, #6
 80014c2:	f504 70b8 	add.w	r0, r4, #368	@ 0x170
 80014c6:	f003 fd07 	bl	8004ed8 <arm_mat_init_f32>
	arm_mat_init_f32(&(traj->time_vec_vel_mat), TRAJ_POLY_TERMS, 1, traj->time_vec_vel_data);
 80014ca:	2201      	movs	r2, #1
 80014cc:	2106      	movs	r1, #6
 80014ce:	f504 73a0 	add.w	r3, r4, #320	@ 0x140
 80014d2:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 80014d6:	f003 fcff 	bl	8004ed8 <arm_mat_init_f32>
	arm_mat_init_f32(&(traj->time_vec_acc_mat), TRAJ_POLY_TERMS, 1, traj->time_vec_acc_data);
 80014da:	2201      	movs	r2, #1
 80014dc:	2106      	movs	r1, #6
 80014de:	f504 73ac 	add.w	r3, r4, #344	@ 0x158
 80014e2:	f504 70c0 	add.w	r0, r4, #384	@ 0x180
 80014e6:	f003 fcf7 	bl	8004ed8 <arm_mat_init_f32>
	for (int i = 0; i < NUM_JOINTS_TRAJ; i++) {
		traj->position_data[i] = 0.0f;
		traj->velocity_data[i] = 0.0f;
		traj->acceleration_data[i] = 0.0f;
	}
	arm_mat_init_f32(&(traj->position_mat), NUM_JOINTS_TRAJ, 1, traj->position_data);
 80014ea:	2201      	movs	r2, #1
 80014ec:	2102      	movs	r1, #2
 80014ee:	f504 73c4 	add.w	r3, r4, #392	@ 0x188
 80014f2:	f504 70d0 	add.w	r0, r4, #416	@ 0x1a0
		traj->position_data[i] = 0.0f;
 80014f6:	f8c4 5188 	str.w	r5, [r4, #392]	@ 0x188
		traj->velocity_data[i] = 0.0f;
 80014fa:	f8c4 5190 	str.w	r5, [r4, #400]	@ 0x190
		traj->acceleration_data[i] = 0.0f;
 80014fe:	f8c4 5198 	str.w	r5, [r4, #408]	@ 0x198
		traj->position_data[i] = 0.0f;
 8001502:	f8c4 518c 	str.w	r5, [r4, #396]	@ 0x18c
		traj->velocity_data[i] = 0.0f;
 8001506:	f8c4 5194 	str.w	r5, [r4, #404]	@ 0x194
		traj->acceleration_data[i] = 0.0f;
 800150a:	f8c4 519c 	str.w	r5, [r4, #412]	@ 0x19c
	arm_mat_init_f32(&(traj->position_mat), NUM_JOINTS_TRAJ, 1, traj->position_data);
 800150e:	f003 fce3 	bl	8004ed8 <arm_mat_init_f32>
	arm_mat_init_f32(&(traj->velocity_mat), NUM_JOINTS_TRAJ, 1, traj->velocity_data);
 8001512:	2201      	movs	r2, #1
 8001514:	2102      	movs	r1, #2
 8001516:	f504 73c8 	add.w	r3, r4, #400	@ 0x190
 800151a:	f504 70d4 	add.w	r0, r4, #424	@ 0x1a8
 800151e:	f003 fcdb 	bl	8004ed8 <arm_mat_init_f32>
	arm_mat_init_f32(&(traj->acceleration_mat), NUM_JOINTS_TRAJ, 1, traj->acceleration_data);
 8001522:	2201      	movs	r2, #1
 8001524:	f504 73cc 	add.w	r3, r4, #408	@ 0x198
 8001528:	2102      	movs	r1, #2
 800152a:	f504 70d8 	add.w	r0, r4, #432	@ 0x1b0
 800152e:	f003 fcd3 	bl	8004ed8 <arm_mat_init_f32>
	for (int i = 0; i < MAX_TRAJ_PHASES; i++) {
		traj->duration[i] = 0.0f;
	}

	// Initialize phase tracking
	traj->currentPhase = 0;
 8001532:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
	// Initialize state
	traj->state = TRAJ_IDLE;

	// Initialize derivative computation flags
	traj->compute_velocity = 0;
	traj->compute_acceleration = 0;
 8001536:	2300      	movs	r3, #0
	traj->currentPhase = 0;
 8001538:	f8c4 21e0 	str.w	r2, [r4, #480]	@ 0x1e0
	traj->compute_acceleration = 0;
 800153c:	f884 31e4 	strb.w	r3, [r4, #484]	@ 0x1e4
	traj->startTime = 0.0f;
 8001540:	f8c4 51b8 	str.w	r5, [r4, #440]	@ 0x1b8
	traj->currentTime = 0.0f;
 8001544:	f8c4 51bc 	str.w	r5, [r4, #444]	@ 0x1bc
	traj->phaseTime = 0.0f;
 8001548:	f8c4 51c0 	str.w	r5, [r4, #448]	@ 0x1c0
	traj->totalDuration = 0.0f;
 800154c:	f8c4 51dc 	str.w	r5, [r4, #476]	@ 0x1dc
		traj->duration[i] = 0.0f;
 8001550:	f8c4 51c4 	str.w	r5, [r4, #452]	@ 0x1c4
 8001554:	f8c4 51c8 	str.w	r5, [r4, #456]	@ 0x1c8
 8001558:	f8c4 51cc 	str.w	r5, [r4, #460]	@ 0x1cc
 800155c:	f8c4 51d0 	str.w	r5, [r4, #464]	@ 0x1d0
 8001560:	f8c4 51d4 	str.w	r5, [r4, #468]	@ 0x1d4
 8001564:	f8c4 51d8 	str.w	r5, [r4, #472]	@ 0x1d8
}
 8001568:	bd38      	pop	{r3, r4, r5, pc}
 800156a:	4770      	bx	lr

0800156c <Trajectory_Start>:

void Trajectory_Start(Trajectory *traj) {
    if (traj == NULL) return;
 800156c:	4603      	mov	r3, r0
 800156e:	b190      	cbz	r0, 8001596 <Trajectory_Start+0x2a>

    traj->state = TRAJ_RUNNING;
    traj->startTime = 0.0f;
 8001570:	2200      	movs	r2, #0
    traj->state = TRAJ_RUNNING;
 8001572:	2001      	movs	r0, #1
    traj->currentPhase = phase;
 8001574:	2100      	movs	r1, #0
    traj->state = TRAJ_RUNNING;
 8001576:	f883 01e2 	strb.w	r0, [r3, #482]	@ 0x1e2
    traj->startTime = 0.0f;
 800157a:	f8c3 21b8 	str.w	r2, [r3, #440]	@ 0x1b8
    traj->currentTime = 0.0f;
 800157e:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
    traj->phaseTime = 0.0f;
 8001582:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
    traj->currentPhase = phase;
 8001586:	f883 11e0 	strb.w	r1, [r3, #480]	@ 0x1e0
    arm_mat_init_f32(&(traj->coeff_mat), NUM_JOINTS_TRAJ, TRAJ_POLY_TERMS, traj->coeff_data[phase]);
 800158a:	2206      	movs	r2, #6
 800158c:	2102      	movs	r1, #2
 800158e:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8001592:	f003 bca1 	b.w	8004ed8 <arm_mat_init_f32>

    // Start with phase 0
    transition_to_phase(traj, 0);
}
 8001596:	4770      	bx	lr

08001598 <Trajectory_Compute>:

void Trajectory_Compute(Trajectory *traj, float32_t dt) {
    if (traj == NULL) return;
 8001598:	2800      	cmp	r0, #0
 800159a:	f000 808a 	beq.w	80016b2 <Trajectory_Compute+0x11a>
void Trajectory_Compute(Trajectory *traj, float32_t dt) {
 800159e:	b538      	push	{r3, r4, r5, lr}

    switch (traj->state) {
 80015a0:	f890 31e2 	ldrb.w	r3, [r0, #482]	@ 0x1e2
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	4604      	mov	r4, r0
 80015a8:	d000      	beq.n	80015ac <Trajectory_Compute+0x14>
            break;

        default:
            break;
    }
}
 80015aa:	bd38      	pop	{r3, r4, r5, pc}
            if (traj->phaseTime >= traj->duration[traj->currentPhase])
 80015ac:	f890 31e0 	ldrb.w	r3, [r0, #480]	@ 0x1e0
            traj->phaseTime += dt;
 80015b0:	ed90 7a70 	vldr	s14, [r0, #448]	@ 0x1c0
            traj->currentTime += dt;
 80015b4:	edd0 7a6f 	vldr	s15, [r0, #444]	@ 0x1bc
            if (traj->phaseTime >= traj->duration[traj->currentPhase])
 80015b8:	eb00 0283 	add.w	r2, r0, r3, lsl #2
            traj->currentTime += dt;
 80015bc:	ee77 7a80 	vadd.f32	s15, s15, s0
            traj->phaseTime += dt;
 80015c0:	ee30 0a07 	vadd.f32	s0, s0, s14
            if (traj->phaseTime >= traj->duration[traj->currentPhase])
 80015c4:	ed92 7a71 	vldr	s14, [r2, #452]	@ 0x1c4
            traj->currentTime += dt;
 80015c8:	edc0 7a6f 	vstr	s15, [r0, #444]	@ 0x1bc
            if (traj->phaseTime >= traj->duration[traj->currentPhase])
 80015cc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80015d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            traj->phaseTime += dt;
 80015d4:	ed80 0a70 	vstr	s0, [r0, #448]	@ 0x1c0
            if (traj->phaseTime >= traj->duration[traj->currentPhase])
 80015d8:	db08      	blt.n	80015ec <Trajectory_Compute+0x54>
                if (traj->currentPhase < traj->numPhases - 1)
 80015da:	f890 21e1 	ldrb.w	r2, [r0, #481]	@ 0x1e1
 80015de:	3a01      	subs	r2, #1
 80015e0:	4293      	cmp	r3, r2
 80015e2:	da67      	bge.n	80016b4 <Trajectory_Compute+0x11c>
                    transition_to_phase(traj, traj->currentPhase + 1);
 80015e4:	3301      	adds	r3, #1
 80015e6:	b2da      	uxtb	r2, r3
    if (traj == NULL || phase >= MAX_TRAJ_PHASES) return;
 80015e8:	2a05      	cmp	r2, #5
 80015ea:	d975      	bls.n	80016d8 <Trajectory_Compute+0x140>
 80015ec:	f504 7590 	add.w	r5, r4, #288	@ 0x120
	traj->time_vec_pos_data[3] = traj->time_vec_pos_data[4] * t; // t^2
 80015f0:	ee60 7a00 	vmul.f32	s15, s0, s0
    if (traj->compute_velocity) {
 80015f4:	f894 21e3 	ldrb.w	r2, [r4, #483]	@ 0x1e3
	traj->time_vec_pos_data[4] = t; 							 // t
 80015f8:	ed84 0a4e 	vstr	s0, [r4, #312]	@ 0x138
	traj->time_vec_pos_data[2] = traj->time_vec_pos_data[3] * t; // t^3
 80015fc:	ee27 7a80 	vmul.f32	s14, s15, s0
	traj->time_vec_pos_data[5] = 1.0f;							 // 1
 8001600:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
	traj->time_vec_pos_data[1] = traj->time_vec_pos_data[2] * t; // t^4
 8001604:	ee67 6a00 	vmul.f32	s13, s14, s0
	traj->time_vec_pos_data[5] = 1.0f;							 // 1
 8001608:	f8c4 313c 	str.w	r3, [r4, #316]	@ 0x13c
	traj->time_vec_pos_data[0] = traj->time_vec_pos_data[1] * t; // t^5
 800160c:	ee26 6a80 	vmul.f32	s12, s13, s0
	traj->time_vec_pos_data[3] = traj->time_vec_pos_data[4] * t; // t^2
 8001610:	edc4 7a4d 	vstr	s15, [r4, #308]	@ 0x134
	traj->time_vec_pos_data[2] = traj->time_vec_pos_data[3] * t; // t^3
 8001614:	ed84 7a4c 	vstr	s14, [r4, #304]	@ 0x130
	traj->time_vec_pos_data[1] = traj->time_vec_pos_data[2] * t; // t^4
 8001618:	edc4 6a4b 	vstr	s13, [r4, #300]	@ 0x12c
	traj->time_vec_pos_data[0] = traj->time_vec_pos_data[1] * t; // t^5
 800161c:	ed84 6a4a 	vstr	s12, [r4, #296]	@ 0x128
    if (traj->compute_velocity) {
 8001620:	b1ba      	cbz	r2, 8001652 <Trajectory_Compute+0xba>
        traj->time_vec_vel_data[0] = 5.0f * traj->time_vec_pos_data[1]; // 5t^4
 8001622:	eeb1 5a04 	vmov.f32	s10, #20	@ 0x40a00000  5.0
        traj->time_vec_vel_data[1] = 4.0f * traj->time_vec_pos_data[2]; // 4t^3
 8001626:	eef1 5a00 	vmov.f32	s11, #16	@ 0x40800000  4.0
        traj->time_vec_vel_data[2] = 3.0f * traj->time_vec_pos_data[3]; // 3t^2
 800162a:	eeb0 6a08 	vmov.f32	s12, #8	@ 0x40400000  3.0
        traj->time_vec_vel_data[0] = 5.0f * traj->time_vec_pos_data[1]; // 5t^4
 800162e:	ee66 6a85 	vmul.f32	s13, s13, s10
        traj->time_vec_vel_data[1] = 4.0f * traj->time_vec_pos_data[2]; // 4t^3
 8001632:	ee67 5a25 	vmul.f32	s11, s14, s11
        traj->time_vec_vel_data[2] = 3.0f * traj->time_vec_pos_data[3]; // 3t^2
 8001636:	ee27 6a86 	vmul.f32	s12, s15, s12
        traj->time_vec_vel_data[3] = 2.0f * traj->time_vec_pos_data[4]; // 2t
 800163a:	ee30 5a00 	vadd.f32	s10, s0, s0
        traj->time_vec_vel_data[0] = 5.0f * traj->time_vec_pos_data[1]; // 5t^4
 800163e:	edc4 6a50 	vstr	s13, [r4, #320]	@ 0x140
        traj->time_vec_vel_data[1] = 4.0f * traj->time_vec_pos_data[2]; // 4t^3
 8001642:	edc4 5a51 	vstr	s11, [r4, #324]	@ 0x144
        traj->time_vec_vel_data[2] = 3.0f * traj->time_vec_pos_data[3]; // 3t^2
 8001646:	ed84 6a52 	vstr	s12, [r4, #328]	@ 0x148
        traj->time_vec_vel_data[3] = 2.0f * traj->time_vec_pos_data[4]; // 2t
 800164a:	ed84 5a53 	vstr	s10, [r4, #332]	@ 0x14c
        traj->time_vec_vel_data[4] = 1.0f;                              // 1
 800164e:	f8c4 3150 	str.w	r3, [r4, #336]	@ 0x150
    if (traj->compute_acceleration) {
 8001652:	f894 31e4 	ldrb.w	r3, [r4, #484]	@ 0x1e4
 8001656:	b1ab      	cbz	r3, 8001684 <Trajectory_Compute+0xec>
        traj->time_vec_acc_data[0] = 20.0f * traj->time_vec_pos_data[2]; // 20t^3
 8001658:	eef3 5a04 	vmov.f32	s11, #52	@ 0x41a00000  20.0
        traj->time_vec_acc_data[1] = 12.0f * traj->time_vec_pos_data[3]; // 12t^2
 800165c:	eeb2 6a08 	vmov.f32	s12, #40	@ 0x41400000  12.0
        traj->time_vec_acc_data[2] = 6.0f * traj->time_vec_pos_data[4];  // 6t
 8001660:	eef1 6a08 	vmov.f32	s13, #24	@ 0x40c00000  6.0
        traj->time_vec_acc_data[0] = 20.0f * traj->time_vec_pos_data[2]; // 20t^3
 8001664:	ee27 7a25 	vmul.f32	s14, s14, s11
        traj->time_vec_acc_data[1] = 12.0f * traj->time_vec_pos_data[3]; // 12t^2
 8001668:	ee67 7a86 	vmul.f32	s15, s15, s12
        traj->time_vec_acc_data[2] = 6.0f * traj->time_vec_pos_data[4];  // 6t
 800166c:	ee20 0a26 	vmul.f32	s0, s0, s13
        traj->time_vec_acc_data[3] = 2.0f;                               // 2
 8001670:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
        traj->time_vec_acc_data[0] = 20.0f * traj->time_vec_pos_data[2]; // 20t^3
 8001674:	ed84 7a56 	vstr	s14, [r4, #344]	@ 0x158
        traj->time_vec_acc_data[1] = 12.0f * traj->time_vec_pos_data[3]; // 12t^2
 8001678:	edc4 7a57 	vstr	s15, [r4, #348]	@ 0x15c
        traj->time_vec_acc_data[2] = 6.0f * traj->time_vec_pos_data[4];  // 6t
 800167c:	ed84 0a58 	vstr	s0, [r4, #352]	@ 0x160
        traj->time_vec_acc_data[3] = 2.0f;                               // 2
 8001680:	f8c4 3164 	str.w	r3, [r4, #356]	@ 0x164
	arm_mat_mult_f32(&(traj->coeff_mat), &(traj->time_vec_pos_mat), &(traj->position_mat));
 8001684:	f504 72d0 	add.w	r2, r4, #416	@ 0x1a0
 8001688:	f504 71b8 	add.w	r1, r4, #368	@ 0x170
 800168c:	4628      	mov	r0, r5
 800168e:	f003 fb13 	bl	8004cb8 <arm_mat_mult_f32>
	if (traj->compute_velocity) {
 8001692:	f894 31e3 	ldrb.w	r3, [r4, #483]	@ 0x1e3
 8001696:	b9bb      	cbnz	r3, 80016c8 <Trajectory_Compute+0x130>
	if (traj->compute_acceleration) {
 8001698:	f894 31e4 	ldrb.w	r3, [r4, #484]	@ 0x1e4
 800169c:	2b00      	cmp	r3, #0
 800169e:	d084      	beq.n	80015aa <Trajectory_Compute+0x12>
		arm_mat_mult_f32(&(traj->coeff_mat), &(traj->time_vec_acc_mat), &(traj->acceleration_mat));
 80016a0:	f504 72d8 	add.w	r2, r4, #432	@ 0x1b0
 80016a4:	f504 71c0 	add.w	r1, r4, #384	@ 0x180
 80016a8:	4628      	mov	r0, r5
}
 80016aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		arm_mat_mult_f32(&(traj->coeff_mat), &(traj->time_vec_acc_mat), &(traj->acceleration_mat));
 80016ae:	f003 bb03 	b.w	8004cb8 <arm_mat_mult_f32>
 80016b2:	4770      	bx	lr
                    traj->state = TRAJ_COMPLETE;
 80016b4:	2202      	movs	r2, #2
                    traj->currentTime = traj->totalDuration; // Cap at total duration
 80016b6:	f8d0 31dc 	ldr.w	r3, [r0, #476]	@ 0x1dc
                    traj->state = TRAJ_COMPLETE;
 80016ba:	f880 21e2 	strb.w	r2, [r0, #482]	@ 0x1e2
                    traj->currentTime = traj->totalDuration; // Cap at total duration
 80016be:	f8c0 31bc 	str.w	r3, [r0, #444]	@ 0x1bc
                    traj->phaseTime = traj->duration[traj->currentPhase]; // Cap at phase duration
 80016c2:	ed80 7a70 	vstr	s14, [r0, #448]	@ 0x1c0
}
 80016c6:	bd38      	pop	{r3, r4, r5, pc}
		arm_mat_mult_f32(&(traj->coeff_mat), &(traj->time_vec_vel_mat), &(traj->velocity_mat));
 80016c8:	f504 72d4 	add.w	r2, r4, #424	@ 0x1a8
 80016cc:	f504 71bc 	add.w	r1, r4, #376	@ 0x178
 80016d0:	4628      	mov	r0, r5
 80016d2:	f003 faf1 	bl	8004cb8 <arm_mat_mult_f32>
 80016d6:	e7df      	b.n	8001698 <Trajectory_Compute+0x100>
    traj->phaseTime = 0.0f;
 80016d8:	2100      	movs	r1, #0
    arm_mat_init_f32(&(traj->coeff_mat), NUM_JOINTS_TRAJ, TRAJ_POLY_TERMS, traj->coeff_data[phase]);
 80016da:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80016de:	f500 7590 	add.w	r5, r0, #288	@ 0x120
    traj->currentPhase = phase;
 80016e2:	f880 21e0 	strb.w	r2, [r0, #480]	@ 0x1e0
    traj->phaseTime = 0.0f;
 80016e6:	f8c0 11c0 	str.w	r1, [r0, #448]	@ 0x1c0
    arm_mat_init_f32(&(traj->coeff_mat), NUM_JOINTS_TRAJ, TRAJ_POLY_TERMS, traj->coeff_data[phase]);
 80016ea:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 80016ee:	2206      	movs	r2, #6
 80016f0:	2102      	movs	r1, #2
 80016f2:	4628      	mov	r0, r5
 80016f4:	f003 fbf0 	bl	8004ed8 <arm_mat_init_f32>
			fill_traj_time_vectors(traj, traj->phaseTime);
 80016f8:	ed94 0a70 	vldr	s0, [r4, #448]	@ 0x1c0
 80016fc:	e778      	b.n	80015f0 <Trajectory_Compute+0x58>
 80016fe:	bf00      	nop

08001700 <Trajectory_ParseCoeffs>:
        traj->totalDuration += durations[i];
    }
}

HAL_StatusTypeDef Trajectory_ParseCoeffs(const char* input_str, Trajectory* traj) {
    if (input_str == NULL || traj == NULL) return HAL_ERROR;
 8001700:	2800      	cmp	r0, #0
 8001702:	f000 8089 	beq.w	8001818 <Trajectory_ParseCoeffs+0x118>
HAL_StatusTypeDef Trajectory_ParseCoeffs(const char* input_str, Trajectory* traj) {
 8001706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800170a:	460e      	mov	r6, r1
 800170c:	b0d0      	sub	sp, #320	@ 0x140
    if (input_str == NULL || traj == NULL) return HAL_ERROR;
 800170e:	b119      	cbz	r1, 8001718 <Trajectory_ParseCoeffs+0x18>

    const char* start = input_str;
    if (start[0] != 'T' || start[1] != 'C') return HAL_ERROR;
 8001710:	7803      	ldrb	r3, [r0, #0]
 8001712:	2b54      	cmp	r3, #84	@ 0x54
 8001714:	4605      	mov	r5, r0
 8001716:	d003      	beq.n	8001720 <Trajectory_ParseCoeffs+0x20>
    if (input_str == NULL || traj == NULL) return HAL_ERROR;
 8001718:	2001      	movs	r0, #1
        Trajectory_SetCoefficients(traj, &tempCoeffs[phase * NUM_JOINTS_TRAJ * TRAJ_POLY_TERMS], phase);
    }

    Trajectory_SetDuration(traj, tempDurations, MAX_TRAJ_PHASES);
    return HAL_OK;
}
 800171a:	b050      	add	sp, #320	@ 0x140
 800171c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (start[0] != 'T' || start[1] != 'C') return HAL_ERROR;
 8001720:	7843      	ldrb	r3, [r0, #1]
 8001722:	2b43      	cmp	r3, #67	@ 0x43
 8001724:	d1f8      	bne.n	8001718 <Trajectory_ParseCoeffs+0x18>
    float32_t tempCoeffs[TOTAL_COEFFS] = {0};
 8001726:	f44f 7290 	mov.w	r2, #288	@ 0x120
 800172a:	2100      	movs	r1, #0
    start += 2;
 800172c:	1c84      	adds	r4, r0, #2
    float32_t tempCoeffs[TOTAL_COEFFS] = {0};
 800172e:	a808      	add	r0, sp, #32
 8001730:	f005 fa8f 	bl	8006c52 <memset>
    while (*start != '\0' && *start != 'T' && value_count < TOTAL_COEFFS) {
 8001734:	78aa      	ldrb	r2, [r5, #2]
    float32_t tempDurations[MAX_TRAJ_PHASES] = {0};
 8001736:	2500      	movs	r5, #0
 8001738:	e9cd 5502 	strd	r5, r5, [sp, #8]
 800173c:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8001740:	e9cd 5506 	strd	r5, r5, [sp, #24]
    while (*start != '\0' && *start != 'T' && value_count < TOTAL_COEFFS) {
 8001744:	2a00      	cmp	r2, #0
 8001746:	d0e7      	beq.n	8001718 <Trajectory_ParseCoeffs+0x18>
 8001748:	2a54      	cmp	r2, #84	@ 0x54
 800174a:	d01f      	beq.n	800178c <Trajectory_ParseCoeffs+0x8c>
 800174c:	2d48      	cmp	r5, #72	@ 0x48
 800174e:	d0e3      	beq.n	8001718 <Trajectory_ParseCoeffs+0x18>
        float32_t val = strtof(start, &end);
 8001750:	a901      	add	r1, sp, #4
 8001752:	4620      	mov	r0, r4
 8001754:	f004 fa8e 	bl	8005c74 <strtof>
        if (end == start) {
 8001758:	9b01      	ldr	r3, [sp, #4]
 800175a:	42a3      	cmp	r3, r4
 800175c:	d010      	beq.n	8001780 <Trajectory_ParseCoeffs+0x80>
        tempCoeffs[value_count++] = val;
 800175e:	aa08      	add	r2, sp, #32
 8001760:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8001764:	ed82 0a00 	vstr	s0, [r2]
 8001768:	3501      	adds	r5, #1
        while (*start == ',' || *start == ' ') start++;
 800176a:	781a      	ldrb	r2, [r3, #0]
 800176c:	2a2c      	cmp	r2, #44	@ 0x2c
 800176e:	461c      	mov	r4, r3
 8001770:	f103 0301 	add.w	r3, r3, #1
 8001774:	d0f9      	beq.n	800176a <Trajectory_ParseCoeffs+0x6a>
 8001776:	2a20      	cmp	r2, #32
 8001778:	d0f7      	beq.n	800176a <Trajectory_ParseCoeffs+0x6a>
    while (*start != '\0' && *start != 'T' && value_count < TOTAL_COEFFS) {
 800177a:	2a00      	cmp	r2, #0
 800177c:	d1e4      	bne.n	8001748 <Trajectory_ParseCoeffs+0x48>
 800177e:	e7cb      	b.n	8001718 <Trajectory_ParseCoeffs+0x18>
 8001780:	7863      	ldrb	r3, [r4, #1]
            start++;  // Skip invalid char
 8001782:	3401      	adds	r4, #1
    while (*start != '\0' && *start != 'T' && value_count < TOTAL_COEFFS) {
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0c7      	beq.n	8001718 <Trajectory_ParseCoeffs+0x18>
 8001788:	2b54      	cmp	r3, #84	@ 0x54
 800178a:	d1e1      	bne.n	8001750 <Trajectory_ParseCoeffs+0x50>
    while (*start != '\0' && dur_count < MAX_TRAJ_PHASES) {
 800178c:	7863      	ldrb	r3, [r4, #1]
    int dur_count = 0;
 800178e:	2700      	movs	r7, #0
    start++; // Skip 'T'
 8001790:	3401      	adds	r4, #1
    while (*start != '\0' && dur_count < MAX_TRAJ_PHASES) {
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0c0      	beq.n	8001718 <Trajectory_ParseCoeffs+0x18>
        float32_t val = strtof(start, &end);
 8001796:	a901      	add	r1, sp, #4
 8001798:	4620      	mov	r0, r4
 800179a:	f004 fa6b 	bl	8005c74 <strtof>
        if (end == start) {
 800179e:	9b01      	ldr	r3, [sp, #4]
 80017a0:	42a3      	cmp	r3, r4
 80017a2:	d030      	beq.n	8001806 <Trajectory_ParseCoeffs+0x106>
        tempDurations[dur_count++] = val;
 80017a4:	aa02      	add	r2, sp, #8
 80017a6:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 80017aa:	ed82 0a00 	vstr	s0, [r2]
 80017ae:	3701      	adds	r7, #1
        while (*start == ',' || *start == ' ') start++;
 80017b0:	781a      	ldrb	r2, [r3, #0]
 80017b2:	2a2c      	cmp	r2, #44	@ 0x2c
 80017b4:	461c      	mov	r4, r3
 80017b6:	f103 0301 	add.w	r3, r3, #1
 80017ba:	d0f9      	beq.n	80017b0 <Trajectory_ParseCoeffs+0xb0>
 80017bc:	2a20      	cmp	r2, #32
 80017be:	d0f7      	beq.n	80017b0 <Trajectory_ParseCoeffs+0xb0>
    while (*start != '\0' && dur_count < MAX_TRAJ_PHASES) {
 80017c0:	b32a      	cbz	r2, 800180e <Trajectory_ParseCoeffs+0x10e>
 80017c2:	2f06      	cmp	r7, #6
 80017c4:	d1e7      	bne.n	8001796 <Trajectory_ParseCoeffs+0x96>
    if (value_count != TOTAL_COEFFS || dur_count != MAX_TRAJ_PHASES) return HAL_ERROR;
 80017c6:	2d48      	cmp	r5, #72	@ 0x48
 80017c8:	d1a6      	bne.n	8001718 <Trajectory_ParseCoeffs+0x18>
 80017ca:	af08      	add	r7, sp, #32
 80017cc:	4635      	mov	r5, r6
    for (int phase = 0; phase < MAX_TRAJ_PHASES; phase++) {
 80017ce:	2400      	movs	r4, #0
        arm_mat_init_f32(&(traj->coeff_mat), NUM_JOINTS_TRAJ, TRAJ_POLY_TERMS, traj->coeff_data[phase]);
 80017d0:	f506 7890 	add.w	r8, r6, #288	@ 0x120
 80017d4:	e006      	b.n	80017e4 <Trajectory_ParseCoeffs+0xe4>
    for (int phase = 0; phase < MAX_TRAJ_PHASES; phase++) {
 80017d6:	3401      	adds	r4, #1
 80017d8:	2c06      	cmp	r4, #6
 80017da:	f107 0730 	add.w	r7, r7, #48	@ 0x30
 80017de:	f105 0530 	add.w	r5, r5, #48	@ 0x30
 80017e2:	d01b      	beq.n	800181c <Trajectory_ParseCoeffs+0x11c>
    arm_copy_f32(new_coeffs, traj->coeff_data[phase], NUM_JOINTS_TRAJ*TRAJ_POLY_TERMS);
 80017e4:	220c      	movs	r2, #12
 80017e6:	4629      	mov	r1, r5
 80017e8:	4638      	mov	r0, r7
 80017ea:	f003 f9c7 	bl	8004b7c <arm_copy_f32>
    if (phase == traj->currentPhase) {
 80017ee:	f896 21e0 	ldrb.w	r2, [r6, #480]	@ 0x1e0
 80017f2:	b2e3      	uxtb	r3, r4
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d1ee      	bne.n	80017d6 <Trajectory_ParseCoeffs+0xd6>
        arm_mat_init_f32(&(traj->coeff_mat), NUM_JOINTS_TRAJ, TRAJ_POLY_TERMS, traj->coeff_data[phase]);
 80017f8:	462b      	mov	r3, r5
 80017fa:	2206      	movs	r2, #6
 80017fc:	2102      	movs	r1, #2
 80017fe:	4640      	mov	r0, r8
 8001800:	f003 fb6a 	bl	8004ed8 <arm_mat_init_f32>
 8001804:	e7e7      	b.n	80017d6 <Trajectory_ParseCoeffs+0xd6>
    while (*start != '\0' && dur_count < MAX_TRAJ_PHASES) {
 8001806:	7863      	ldrb	r3, [r4, #1]
            start++;
 8001808:	3401      	adds	r4, #1
    while (*start != '\0' && dur_count < MAX_TRAJ_PHASES) {
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1c3      	bne.n	8001796 <Trajectory_ParseCoeffs+0x96>
    if (value_count != TOTAL_COEFFS || dur_count != MAX_TRAJ_PHASES) return HAL_ERROR;
 800180e:	2d48      	cmp	r5, #72	@ 0x48
 8001810:	d182      	bne.n	8001718 <Trajectory_ParseCoeffs+0x18>
 8001812:	2f06      	cmp	r7, #6
 8001814:	d180      	bne.n	8001718 <Trajectory_ParseCoeffs+0x18>
 8001816:	e7d8      	b.n	80017ca <Trajectory_ParseCoeffs+0xca>
    if (input_str == NULL || traj == NULL) return HAL_ERROR;
 8001818:	2001      	movs	r0, #1
}
 800181a:	4770      	bx	lr
        traj->duration[i] = durations[i];
 800181c:	eddd 4a02 	vldr	s9, [sp, #8]
 8001820:	ed9d 5a03 	vldr	s10, [sp, #12]
 8001824:	eddd 5a04 	vldr	s11, [sp, #16]
 8001828:	ed9d 6a05 	vldr	s12, [sp, #20]
 800182c:	eddd 6a06 	vldr	s13, [sp, #24]
 8001830:	ed9d 7a07 	vldr	s14, [sp, #28]
    traj->numPhases = num_phases;
 8001834:	f886 41e1 	strb.w	r4, [r6, #481]	@ 0x1e1
        traj->totalDuration += durations[i];
 8001838:	ee74 7a85 	vadd.f32	s15, s9, s10
        traj->duration[i] = durations[i];
 800183c:	edc6 4a71 	vstr	s9, [r6, #452]	@ 0x1c4
        traj->totalDuration += durations[i];
 8001840:	ee77 7aa5 	vadd.f32	s15, s15, s11
        traj->duration[i] = durations[i];
 8001844:	ed86 5a72 	vstr	s10, [r6, #456]	@ 0x1c8
        traj->totalDuration += durations[i];
 8001848:	ee77 7a86 	vadd.f32	s15, s15, s12
        traj->duration[i] = durations[i];
 800184c:	edc6 5a73 	vstr	s11, [r6, #460]	@ 0x1cc
        traj->totalDuration += durations[i];
 8001850:	ee77 7aa6 	vadd.f32	s15, s15, s13
        traj->duration[i] = durations[i];
 8001854:	ed86 6a74 	vstr	s12, [r6, #464]	@ 0x1d0
        traj->totalDuration += durations[i];
 8001858:	ee77 7a87 	vadd.f32	s15, s15, s14
        traj->duration[i] = durations[i];
 800185c:	edc6 6a75 	vstr	s13, [r6, #468]	@ 0x1d4
 8001860:	ed86 7a76 	vstr	s14, [r6, #472]	@ 0x1d8
    for (uint8_t i = 0; i < num_phases; i++) {
 8001864:	edc6 7a77 	vstr	s15, [r6, #476]	@ 0x1dc
    return HAL_OK;
 8001868:	2000      	movs	r0, #0
 800186a:	e756      	b.n	800171a <Trajectory_ParseCoeffs+0x1a>

0800186c <AS5600_Mux_Init>:

/* AS5600 Register Map - Only what we need */
#define AS5600_REG_ANGLE_H     0x0E    // Angle high byte
#define AS5600_REG_ANGLE_L     0x0F    // Angle low byte

HAL_StatusTypeDef AS5600_Mux_Init(AS5600_Mux_Array* sensors, I2C_HandleTypeDef* hi2c, uint8_t num_sensors) {
 800186c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001870:	b084      	sub	sp, #16
    if (hi2c == NULL || num_sensors > MAX_SENSORS) return HAL_ERROR;
 8001872:	2900      	cmp	r1, #0
 8001874:	d059      	beq.n	800192a <AS5600_Mux_Init+0xbe>
 8001876:	2a08      	cmp	r2, #8
 8001878:	4616      	mov	r6, r2
 800187a:	d856      	bhi.n	800192a <AS5600_Mux_Init+0xbe>

    sensors->hi2c = hi2c;
 800187c:	4605      	mov	r5, r0
    sensors->num_sensors = num_sensors;

    for (uint8_t i = 0; i < MAX_SENSORS; i++) {
        sensors->angles[i] = 0;
 800187e:	2300      	movs	r3, #0
    }

    uint8_t disable_cmd = 0x00;
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &disable_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 8001880:	f04f 0864 	mov.w	r8, #100	@ 0x64
    sensors->hi2c = hi2c;
 8001884:	6029      	str	r1, [r5, #0]
    sensors->num_sensors = num_sensors;
 8001886:	712a      	strb	r2, [r5, #4]
        sensors->angles[i] = 0;
 8001888:	f8c5 3006 	str.w	r3, [r5, #6]
 800188c:	f8c5 300a 	str.w	r3, [r5, #10]
 8001890:	f8c5 300e 	str.w	r3, [r5, #14]
 8001894:	f8c5 3012 	str.w	r3, [r5, #18]
    uint8_t disable_cmd = 0x00;
 8001898:	4608      	mov	r0, r1
 800189a:	f88d 300c 	strb.w	r3, [sp, #12]
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &disable_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 800189e:	f8cd 8000 	str.w	r8, [sp]
 80018a2:	2301      	movs	r3, #1
 80018a4:	aa03      	add	r2, sp, #12
 80018a6:	21e0      	movs	r1, #224	@ 0xe0
 80018a8:	f001 fb74 	bl	8002f94 <HAL_I2C_Master_Transmit>
 80018ac:	4681      	mov	r9, r0
 80018ae:	2800      	cmp	r0, #0
 80018b0:	d13b      	bne.n	800192a <AS5600_Mux_Init+0xbe>
        return HAL_ERROR;
    }

    // Basic check if sensors are responsive
    for (uint8_t i = 0; i < num_sensors; i++) {
 80018b2:	2e00      	cmp	r6, #0
 80018b4:	d03b      	beq.n	800192e <AS5600_Mux_Init+0xc2>
 80018b6:	4604      	mov	r4, r0
HAL_StatusTypeDef AS5600_Mux_SelectChannel(AS5600_Mux_Array* sensors, uint8_t channel) {
    if (channel > 7) {
        return HAL_ERROR;
    }

    uint8_t channel_cmd = 1 << channel;
 80018b8:	f04f 0a01 	mov.w	sl, #1
 80018bc:	fa0a f704 	lsl.w	r7, sl, r4
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &channel_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 80018c0:	f8cd 8000 	str.w	r8, [sp]
    uint8_t channel_cmd = 1 << channel;
 80018c4:	b2ff      	uxtb	r7, r7
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &channel_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 80018c6:	6828      	ldr	r0, [r5, #0]
    uint8_t channel_cmd = 1 << channel;
 80018c8:	f88d 700f 	strb.w	r7, [sp, #15]
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &channel_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 80018cc:	2301      	movs	r3, #1
 80018ce:	f10d 020f 	add.w	r2, sp, #15
 80018d2:	21e0      	movs	r1, #224	@ 0xe0
 80018d4:	f001 fb5e 	bl	8002f94 <HAL_I2C_Master_Transmit>
 80018d8:	bb38      	cbnz	r0, 800192a <AS5600_Mux_Init+0xbe>

HAL_StatusTypeDef AS5600_Mux_ReadAngle(AS5600_Mux_Array* sensors, uint8_t sensor_index, uint16_t* angle) {
    uint8_t angle_h, angle_l;
    uint8_t reg_addr;

    if (sensor_index >= sensors->num_sensors) {
 80018da:	7929      	ldrb	r1, [r5, #4]
 80018dc:	b2e2      	uxtb	r2, r4
 80018de:	4291      	cmp	r1, r2
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &channel_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 80018e0:	f04f 0301 	mov.w	r3, #1
    if (sensor_index >= sensors->num_sensors) {
 80018e4:	d921      	bls.n	800192a <AS5600_Mux_Init+0xbe>
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &channel_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 80018e6:	f8cd 8000 	str.w	r8, [sp]
 80018ea:	6828      	ldr	r0, [r5, #0]
    uint8_t channel_cmd = 1 << channel;
 80018ec:	f88d 700f 	strb.w	r7, [sp, #15]
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &channel_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 80018f0:	f10d 020f 	add.w	r2, sp, #15
 80018f4:	21e0      	movs	r1, #224	@ 0xe0
 80018f6:	f001 fb4d 	bl	8002f94 <HAL_I2C_Master_Transmit>
 80018fa:	b9b0      	cbnz	r0, 800192a <AS5600_Mux_Init+0xbe>
    if (AS5600_Mux_SelectChannel(sensors, sensor_index) != HAL_OK) {
        return HAL_ERROR;
    }

    // Read high byte
    reg_addr = AS5600_REG_ANGLE_H;
 80018fc:	230e      	movs	r3, #14

    if (HAL_I2C_Master_Transmit(sensors->hi2c, AS5600_ADDR << 1, &reg_addr, 1, I2C_TIMEOUT) != HAL_OK) {
 80018fe:	f8cd 8000 	str.w	r8, [sp]
    reg_addr = AS5600_REG_ANGLE_H;
 8001902:	f88d 300f 	strb.w	r3, [sp, #15]
    if (HAL_I2C_Master_Transmit(sensors->hi2c, AS5600_ADDR << 1, &reg_addr, 1, I2C_TIMEOUT) != HAL_OK) {
 8001906:	6828      	ldr	r0, [r5, #0]
 8001908:	2301      	movs	r3, #1
 800190a:	f10d 020f 	add.w	r2, sp, #15
 800190e:	216c      	movs	r1, #108	@ 0x6c
 8001910:	f001 fb40 	bl	8002f94 <HAL_I2C_Master_Transmit>
 8001914:	b948      	cbnz	r0, 800192a <AS5600_Mux_Init+0xbe>
        return HAL_ERROR;
    }

    if (HAL_I2C_Master_Receive(sensors->hi2c, AS5600_ADDR << 1, &angle_h, 1, I2C_TIMEOUT) != HAL_OK) {
 8001916:	f8cd 8000 	str.w	r8, [sp]
 800191a:	6828      	ldr	r0, [r5, #0]
 800191c:	2301      	movs	r3, #1
 800191e:	f10d 020d 	add.w	r2, sp, #13
 8001922:	216c      	movs	r1, #108	@ 0x6c
 8001924:	f001 fc80 	bl	8003228 <HAL_I2C_Master_Receive>
 8001928:	b128      	cbz	r0, 8001936 <AS5600_Mux_Init+0xca>
    if (hi2c == NULL || num_sensors > MAX_SENSORS) return HAL_ERROR;
 800192a:	f04f 0901 	mov.w	r9, #1
}
 800192e:	4648      	mov	r0, r9
 8001930:	b004      	add	sp, #16
 8001932:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return HAL_ERROR;
    }

    // Read low byte
    reg_addr = AS5600_REG_ANGLE_L;
 8001936:	230f      	movs	r3, #15
    if (HAL_I2C_Master_Transmit(sensors->hi2c, AS5600_ADDR << 1, &reg_addr, 1, I2C_TIMEOUT) != HAL_OK) {
 8001938:	f8cd 8000 	str.w	r8, [sp]
    reg_addr = AS5600_REG_ANGLE_L;
 800193c:	f88d 300f 	strb.w	r3, [sp, #15]
    if (HAL_I2C_Master_Transmit(sensors->hi2c, AS5600_ADDR << 1, &reg_addr, 1, I2C_TIMEOUT) != HAL_OK) {
 8001940:	6828      	ldr	r0, [r5, #0]
 8001942:	2301      	movs	r3, #1
 8001944:	f10d 020f 	add.w	r2, sp, #15
 8001948:	216c      	movs	r1, #108	@ 0x6c
 800194a:	f001 fb23 	bl	8002f94 <HAL_I2C_Master_Transmit>
 800194e:	2800      	cmp	r0, #0
 8001950:	d1eb      	bne.n	800192a <AS5600_Mux_Init+0xbe>
        return HAL_ERROR;
    }

    if (HAL_I2C_Master_Receive(sensors->hi2c, AS5600_ADDR << 1, &angle_l, 1, I2C_TIMEOUT) != HAL_OK) {
 8001952:	f8cd 8000 	str.w	r8, [sp]
 8001956:	6828      	ldr	r0, [r5, #0]
 8001958:	2301      	movs	r3, #1
 800195a:	f10d 020e 	add.w	r2, sp, #14
 800195e:	216c      	movs	r1, #108	@ 0x6c
 8001960:	f001 fc62 	bl	8003228 <HAL_I2C_Master_Receive>
 8001964:	2800      	cmp	r0, #0
 8001966:	d1e0      	bne.n	800192a <AS5600_Mux_Init+0xbe>
    for (uint8_t i = 0; i < num_sensors; i++) {
 8001968:	3401      	adds	r4, #1
 800196a:	42b4      	cmp	r4, r6
 800196c:	d1a6      	bne.n	80018bc <AS5600_Mux_Init+0x50>
}
 800196e:	4648      	mov	r0, r9
 8001970:	b004      	add	sp, #16
 8001972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001976:	bf00      	nop

08001978 <AS5600_Mux_ReadAllAngles>:

    return HAL_OK;
}

void AS5600_Mux_ReadAllAngles(AS5600_Mux_Array* sensors) {
    for (uint8_t i = 0; i < sensors->num_sensors; i++) {
 8001978:	7901      	ldrb	r1, [r0, #4]
 800197a:	2900      	cmp	r1, #0
 800197c:	d05b      	beq.n	8001a36 <AS5600_Mux_ReadAllAngles+0xbe>
void AS5600_Mux_ReadAllAngles(AS5600_Mux_Array* sensors) {
 800197e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001982:	4606      	mov	r6, r0
 8001984:	b084      	sub	sp, #16
 8001986:	f100 0515 	add.w	r5, r0, #21
    for (uint8_t i = 0; i < sensors->num_sensors; i++) {
 800198a:	2400      	movs	r4, #0
    uint8_t channel_cmd = 1 << channel;
 800198c:	f04f 0801 	mov.w	r8, #1
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &channel_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 8001990:	2764      	movs	r7, #100	@ 0x64
    if (channel > 7) {
 8001992:	2c07      	cmp	r4, #7
 8001994:	d822      	bhi.n	80019dc <AS5600_Mux_ReadAllAngles+0x64>
    uint8_t channel_cmd = 1 << channel;
 8001996:	fa08 f104 	lsl.w	r1, r8, r4
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &channel_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 800199a:	9700      	str	r7, [sp, #0]
    uint8_t channel_cmd = 1 << channel;
 800199c:	f88d 100f 	strb.w	r1, [sp, #15]
    if (HAL_I2C_Master_Transmit(sensors->hi2c, TCA9548A_ADDR << 1, &channel_cmd, 1, I2C_TIMEOUT) != HAL_OK) {
 80019a0:	6830      	ldr	r0, [r6, #0]
 80019a2:	2301      	movs	r3, #1
 80019a4:	f10d 020f 	add.w	r2, sp, #15
 80019a8:	21e0      	movs	r1, #224	@ 0xe0
 80019aa:	f001 faf3 	bl	8002f94 <HAL_I2C_Master_Transmit>
 80019ae:	b9a0      	cbnz	r0, 80019da <AS5600_Mux_ReadAllAngles+0x62>
    reg_addr = AS5600_REG_ANGLE_H;
 80019b0:	210e      	movs	r1, #14
    if (HAL_I2C_Master_Transmit(sensors->hi2c, AS5600_ADDR << 1, &reg_addr, 1, I2C_TIMEOUT) != HAL_OK) {
 80019b2:	9700      	str	r7, [sp, #0]
    reg_addr = AS5600_REG_ANGLE_H;
 80019b4:	f88d 100f 	strb.w	r1, [sp, #15]
    if (HAL_I2C_Master_Transmit(sensors->hi2c, AS5600_ADDR << 1, &reg_addr, 1, I2C_TIMEOUT) != HAL_OK) {
 80019b8:	6830      	ldr	r0, [r6, #0]
 80019ba:	2301      	movs	r3, #1
 80019bc:	f10d 020f 	add.w	r2, sp, #15
 80019c0:	216c      	movs	r1, #108	@ 0x6c
 80019c2:	f001 fae7 	bl	8002f94 <HAL_I2C_Master_Transmit>
 80019c6:	b940      	cbnz	r0, 80019da <AS5600_Mux_ReadAllAngles+0x62>
    if (HAL_I2C_Master_Receive(sensors->hi2c, AS5600_ADDR << 1, &angle_h, 1, I2C_TIMEOUT) != HAL_OK) {
 80019c8:	9700      	str	r7, [sp, #0]
 80019ca:	6830      	ldr	r0, [r6, #0]
 80019cc:	2301      	movs	r3, #1
 80019ce:	f10d 020d 	add.w	r2, sp, #13
 80019d2:	216c      	movs	r1, #108	@ 0x6c
 80019d4:	f001 fc28 	bl	8003228 <HAL_I2C_Master_Receive>
 80019d8:	b150      	cbz	r0, 80019f0 <AS5600_Mux_ReadAllAngles+0x78>
    for (uint8_t i = 0; i < sensors->num_sensors; i++) {
 80019da:	7931      	ldrb	r1, [r6, #4]
        return HAL_ERROR;
 80019dc:	2201      	movs	r2, #1
    for (uint8_t i = 0; i < sensors->num_sensors; i++) {
 80019de:	3401      	adds	r4, #1
 80019e0:	b2e3      	uxtb	r3, r4
 80019e2:	4299      	cmp	r1, r3
        sensors->sensor_status_array[i] = AS5600_Mux_ReadAngle(sensors, i, &sensors->angles[i]);
 80019e4:	f805 2f01 	strb.w	r2, [r5, #1]!
    for (uint8_t i = 0; i < sensors->num_sensors; i++) {
 80019e8:	d8d3      	bhi.n	8001992 <AS5600_Mux_ReadAllAngles+0x1a>
    }
}
 80019ea:	b004      	add	sp, #16
 80019ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    reg_addr = AS5600_REG_ANGLE_L;
 80019f0:	230f      	movs	r3, #15
    if (HAL_I2C_Master_Transmit(sensors->hi2c, AS5600_ADDR << 1, &reg_addr, 1, I2C_TIMEOUT) != HAL_OK) {
 80019f2:	9700      	str	r7, [sp, #0]
    reg_addr = AS5600_REG_ANGLE_L;
 80019f4:	f88d 300f 	strb.w	r3, [sp, #15]
    if (HAL_I2C_Master_Transmit(sensors->hi2c, AS5600_ADDR << 1, &reg_addr, 1, I2C_TIMEOUT) != HAL_OK) {
 80019f8:	6830      	ldr	r0, [r6, #0]
 80019fa:	2301      	movs	r3, #1
 80019fc:	f10d 020f 	add.w	r2, sp, #15
 8001a00:	216c      	movs	r1, #108	@ 0x6c
 8001a02:	f001 fac7 	bl	8002f94 <HAL_I2C_Master_Transmit>
 8001a06:	2800      	cmp	r0, #0
 8001a08:	d1e7      	bne.n	80019da <AS5600_Mux_ReadAllAngles+0x62>
    if (HAL_I2C_Master_Receive(sensors->hi2c, AS5600_ADDR << 1, &angle_l, 1, I2C_TIMEOUT) != HAL_OK) {
 8001a0a:	9700      	str	r7, [sp, #0]
 8001a0c:	f10d 020e 	add.w	r2, sp, #14
 8001a10:	6830      	ldr	r0, [r6, #0]
 8001a12:	2301      	movs	r3, #1
 8001a14:	216c      	movs	r1, #108	@ 0x6c
 8001a16:	f001 fc07 	bl	8003228 <HAL_I2C_Master_Receive>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	d1dc      	bne.n	80019da <AS5600_Mux_ReadAllAngles+0x62>
    *angle = ((uint16_t)angle_h << 8) | angle_l;
 8001a20:	f89d 100d 	ldrb.w	r1, [sp, #13]
 8001a24:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8001a28:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8001a2c:	1db1      	adds	r1, r6, #6
 8001a2e:	f821 3014 	strh.w	r3, [r1, r4, lsl #1]
    for (uint8_t i = 0; i < sensors->num_sensors; i++) {
 8001a32:	7931      	ldrb	r1, [r6, #4]
    return HAL_OK;
 8001a34:	e7d3      	b.n	80019de <AS5600_Mux_ReadAllAngles+0x66>
 8001a36:	4770      	bx	lr

08001a38 <CommandProtocol_SetCommandProcessor>:
#include "CommandProtocol.h"

static ProcessCommandFn CustomProcessCommand = NULL;

void CommandProtocol_SetCommandProcessor(ProcessCommandFn processFn) {
    CustomProcessCommand = processFn;
 8001a38:	4b01      	ldr	r3, [pc, #4]	@ (8001a40 <CommandProtocol_SetCommandProcessor+0x8>)
 8001a3a:	6018      	str	r0, [r3, #0]
}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000214 	.word	0x20000214

08001a44 <CommandProtocol_Init>:

HAL_StatusTypeDef CommandProtocol_Init(CommandProtocol_Handle* handle, UART_HandleTypeDef* huart, uint32_t timeout) {
 8001a44:	4603      	mov	r3, r0
 8001a46:	4608      	mov	r0, r1
    if (handle == NULL || huart == NULL) {
 8001a48:	b15b      	cbz	r3, 8001a62 <CommandProtocol_Init+0x1e>
 8001a4a:	b151      	cbz	r1, 8001a62 <CommandProtocol_Init+0x1e>
        return HAL_ERROR;
    }

    handle->huart = huart;
	handle->timeout = timeout;
    handle->rxIndex = 0;
 8001a4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
	handle->timeout = timeout;
 8001a50:	e9c3 0200 	strd	r0, r2, [r3]
    handle->rxIndex = 0;
 8001a54:	f8a3 13f0 	strh.w	r1, [r3, #1008]	@ 0x3f0
    handle->isInitialized = true;

    return HAL_UART_Receive_IT(handle->huart, &handle->rxBuffer[0], 1);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f103 0108 	add.w	r1, r3, #8
 8001a5e:	f002 be45 	b.w	80046ec <HAL_UART_Receive_IT>
}
 8001a62:	2001      	movs	r0, #1
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop

08001a68 <CommandProtocol_ProcessByte>:

HAL_StatusTypeDef CommandProtocol_ProcessByte(CommandProtocol_Handle* handle, uint8_t byte) {
 8001a68:	b538      	push	{r3, r4, r5, lr}
    if (!handle->isInitialized) {
 8001a6a:	f890 33f1 	ldrb.w	r3, [r0, #1009]	@ 0x3f1
 8001a6e:	b1c3      	cbz	r3, 8001aa2 <CommandProtocol_ProcessByte+0x3a>
        return HAL_ERROR;
    }

    if (handle->rxIndex < sizeof(handle->rxBuffer) - 1)
    {
        if (byte == '\n' || byte == '\r')
 8001a70:	290a      	cmp	r1, #10

            handle->rxIndex = 0;
        }
        else
        {
        	handle->rxBuffer[handle->rxIndex] = byte; // Store the received byte in the buffer
 8001a72:	f890 33f0 	ldrb.w	r3, [r0, #1008]	@ 0x3f0
 8001a76:	4604      	mov	r4, r0
        if (byte == '\n' || byte == '\r')
 8001a78:	d008      	beq.n	8001a8c <CommandProtocol_ProcessByte+0x24>
 8001a7a:	290d      	cmp	r1, #13
 8001a7c:	d006      	beq.n	8001a8c <CommandProtocol_ProcessByte+0x24>
        	handle->rxBuffer[handle->rxIndex] = byte; // Store the received byte in the buffer
 8001a7e:	18c2      	adds	r2, r0, r3
        	handle->rxIndex++; // Move to the next position in the buffer
 8001a80:	3301      	adds	r3, #1
        	handle->rxBuffer[handle->rxIndex] = byte; // Store the received byte in the buffer
 8001a82:	7211      	strb	r1, [r2, #8]
        	handle->rxIndex++; // Move to the next position in the buffer
 8001a84:	f880 33f0 	strb.w	r3, [r0, #1008]	@ 0x3f0
    }
    else // Reset index to 0
    {
        handle->rxIndex = 0;
    }
    return HAL_OK;
 8001a88:	2000      	movs	r0, #0
}
 8001a8a:	bd38      	pop	{r3, r4, r5, pc}
            if (CustomProcessCommand != NULL)
 8001a8c:	4a06      	ldr	r2, [pc, #24]	@ (8001aa8 <CommandProtocol_ProcessByte+0x40>)
            handle->rxBuffer[handle->rxIndex] = '\0';
 8001a8e:	4423      	add	r3, r4
            if (CustomProcessCommand != NULL)
 8001a90:	6812      	ldr	r2, [r2, #0]
            handle->rxBuffer[handle->rxIndex] = '\0';
 8001a92:	2500      	movs	r5, #0
 8001a94:	721d      	strb	r5, [r3, #8]
            if (CustomProcessCommand != NULL)
 8001a96:	b122      	cbz	r2, 8001aa2 <CommandProtocol_ProcessByte+0x3a>
                CustomProcessCommand(handle);
 8001a98:	4620      	mov	r0, r4
 8001a9a:	4790      	blx	r2
            handle->rxIndex = 0;
 8001a9c:	f884 53f0 	strb.w	r5, [r4, #1008]	@ 0x3f0
 8001aa0:	e7f2      	b.n	8001a88 <CommandProtocol_ProcessByte+0x20>
        return HAL_ERROR;
 8001aa2:	2001      	movs	r0, #1
}
 8001aa4:	bd38      	pop	{r3, r4, r5, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000214 	.word	0x20000214

08001aac <CommandProtocol_SendResponse>:

HAL_StatusTypeDef CommandProtocol_SendResponse(CommandProtocol_Handle* handle, const char* response) {
    if (!handle->isInitialized || response == NULL) {
 8001aac:	f890 33f1 	ldrb.w	r3, [r0, #1009]	@ 0x3f1
 8001ab0:	b183      	cbz	r3, 8001ad4 <CommandProtocol_SendResponse+0x28>
HAL_StatusTypeDef CommandProtocol_SendResponse(CommandProtocol_Handle* handle, const char* response) {
 8001ab2:	b570      	push	{r4, r5, r6, lr}
 8001ab4:	460d      	mov	r5, r1
    if (!handle->isInitialized || response == NULL) {
 8001ab6:	b159      	cbz	r1, 8001ad0 <CommandProtocol_SendResponse+0x24>
        return HAL_ERROR;
    }

    return HAL_UART_Transmit(handle->huart, (uint8_t*)response, strlen(response),
 8001ab8:	4604      	mov	r4, r0
 8001aba:	4608      	mov	r0, r1
 8001abc:	f7fe fbe0 	bl	8000280 <strlen>
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	b282      	uxth	r2, r0
 8001ac4:	e9d4 0300 	ldrd	r0, r3, [r4]
                            handle->timeout);
}
 8001ac8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return HAL_UART_Transmit(handle->huart, (uint8_t*)response, strlen(response),
 8001acc:	f002 bd8a 	b.w	80045e4 <HAL_UART_Transmit>
}
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	bd70      	pop	{r4, r5, r6, pc}
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	4770      	bx	lr

08001ad8 <StepMotor_Init>:
								 TIM_HandleTypeDef* tim,
								 uint32_t tim_channel,
								 GPIO_TypeDef* dir_port,
								 uint16_t dir_pin,
								 GPIO_TypeDef* en_port,
								 uint16_t en_pin) {
 8001ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ada:	4604      	mov	r4, r0
 8001adc:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	motor->timer = tim;
 8001ae0:	6001      	str	r1, [r0, #0]
								 uint16_t en_pin) {
 8001ae2:	f8bd 7020 	ldrh.w	r7, [sp, #32]
	motor->channel = tim_channel;

	motor->dir_gpio_port = dir_port;
	motor->dir_gpio_pin = dir_pin;
 8001ae6:	81a6      	strh	r6, [r4, #12]
	motor->en_gpio_port = en_port;
	motor->en_gpio_pin = en_pin;

	motor->last_speed = 0;
 8001ae8:	2500      	movs	r5, #0

	HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_RESET);
 8001aea:	4631      	mov	r1, r6
								 uint16_t en_pin) {
 8001aec:	9e07      	ldr	r6, [sp, #28]
	motor->last_speed = 0;
 8001aee:	82e5      	strh	r5, [r4, #22]
	motor->dir_gpio_port = dir_port;
 8001af0:	e9c4 2301 	strd	r2, r3, [r4, #4]
								 uint16_t en_pin) {
 8001af4:	4618      	mov	r0, r3
	HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_RESET);
 8001af6:	462a      	mov	r2, r5
	motor->en_gpio_port = en_port;
 8001af8:	6126      	str	r6, [r4, #16]
	motor->en_gpio_pin = en_pin;
 8001afa:	82a7      	strh	r7, [r4, #20]
	HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_RESET);
 8001afc:	f001 f8e0 	bl	8002cc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(en_port, en_pin, GPIO_PIN_RESET);
 8001b00:	4639      	mov	r1, r7
 8001b02:	4630      	mov	r0, r6
 8001b04:	462a      	mov	r2, r5
 8001b06:	f001 f8db 	bl	8002cc0 <HAL_GPIO_WritePin>

	return HAL_TIM_OC_Start(motor->timer, motor->channel);
 8001b0a:	e9d4 0100 	ldrd	r0, r1, [r4]
}
 8001b0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return HAL_TIM_OC_Start(motor->timer, motor->channel);
 8001b12:	f002 b9e7 	b.w	8003ee4 <HAL_TIM_OC_Start>
 8001b16:	bf00      	nop

08001b18 <StepMotor_SetSpeedLUT>:

void StepMotor_SetSpeedLUT(StepMotor* motor, int16_t speed) {
 8001b18:	b538      	push	{r3, r4, r5, lr}
	if (speed == motor->last_speed)
 8001b1a:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 8001b1e:	428b      	cmp	r3, r1
 8001b20:	d026      	beq.n	8001b70 <StepMotor_SetSpeedLUT+0x58>
	{
		return;
	}
	else if (speed == -motor->last_speed)
 8001b22:	42d9      	cmn	r1, r3
 8001b24:	4605      	mov	r5, r0
 8001b26:	460c      	mov	r4, r1
 8001b28:	d036      	beq.n	8001b98 <StepMotor_SetSpeedLUT+0x80>
	{
		motor->last_speed = speed;
		HAL_GPIO_TogglePin(motor->dir_gpio_port, motor->dir_gpio_pin);
		return;
	}
	else if (speed == 0)
 8001b2a:	2900      	cmp	r1, #0
 8001b2c:	d021      	beq.n	8001b72 <StepMotor_SetSpeedLUT+0x5a>
		HAL_GPIO_TogglePin(motor->dir_gpio_port, motor->dir_gpio_pin);
 8001b2e:	6880      	ldr	r0, [r0, #8]
 8001b30:	89a9      	ldrh	r1, [r5, #12]
		motor->last_speed = speed;
		return;
	}
	else
	{
		if (speed < 0)
 8001b32:	db2b      	blt.n	8001b8c <StepMotor_SetSpeedLUT+0x74>
			motor->last_speed = speed;
			speed = -speed;
		}
		else
		{
			HAL_GPIO_WritePin(motor->dir_gpio_port, motor->dir_gpio_pin, STEP_MOTOR_CCW);
 8001b34:	2201      	movs	r2, #1
 8001b36:	f001 f8c3 	bl	8002cc0 <HAL_GPIO_WritePin>
 8001b3a:	4623      	mov	r3, r4
		else if (speed < MIN_LUT_SPEED)
		{
			speed = MIN_LUT_SPEED;
		}

		__HAL_TIM_SET_PRESCALER(motor->timer, LUT_PSC[speed - 1]);
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b42:	bfb8      	it	lt
 8001b44:	2301      	movlt	r3, #1
 8001b46:	4293      	cmp	r3, r2
 8001b48:	6829      	ldr	r1, [r5, #0]
		__HAL_TIM_SET_AUTORELOAD(motor->timer, LUT_ARR[speed - 1]);
 8001b4a:	4817      	ldr	r0, [pc, #92]	@ (8001ba8 <StepMotor_SetSpeedLUT+0x90>)
		__HAL_TIM_SET_PRESCALER(motor->timer, LUT_PSC[speed - 1]);
 8001b4c:	bfa8      	it	ge
 8001b4e:	4613      	movge	r3, r2
 8001b50:	3b01      	subs	r3, #1
 8001b52:	680a      	ldr	r2, [r1, #0]
			motor->last_speed = speed;
 8001b54:	82ec      	strh	r4, [r5, #22]
		__HAL_TIM_SET_PRESCALER(motor->timer, LUT_PSC[speed - 1]);
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	4c14      	ldr	r4, [pc, #80]	@ (8001bac <StepMotor_SetSpeedLUT+0x94>)
		__HAL_TIM_SET_AUTORELOAD(motor->timer, LUT_ARR[speed - 1]);
 8001b5a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
		__HAL_TIM_SET_PRESCALER(motor->timer, LUT_PSC[speed - 1]);
 8001b5e:	f834 4013 	ldrh.w	r4, [r4, r3, lsl #1]
 8001b62:	6294      	str	r4, [r2, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(motor->timer, LUT_ARR[speed - 1]);
 8001b64:	62d0      	str	r0, [r2, #44]	@ 0x2c

//		motor->timer->Instance->CNT = 0;
		motor->timer->Instance->EGR |= TIM_EGR_UG;
 8001b66:	6953      	ldr	r3, [r2, #20]
		__HAL_TIM_SET_AUTORELOAD(motor->timer, LUT_ARR[speed - 1]);
 8001b68:	60c8      	str	r0, [r1, #12]
		motor->timer->Instance->EGR |= TIM_EGR_UG;
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6153      	str	r3, [r2, #20]
		return;
	}
}
 8001b70:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_TIM_SET_PRESCALER(motor->timer, 0xFFFF);
 8001b72:	6801      	ldr	r1, [r0, #0]
 8001b74:	680b      	ldr	r3, [r1, #0]
 8001b76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b7a:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(motor->timer, 0xFFFF);
 8001b7c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b7e:	60ca      	str	r2, [r1, #12]
		motor->timer->Instance->EGR |= TIM_EGR_UG;
 8001b80:	695a      	ldr	r2, [r3, #20]
 8001b82:	f042 0201 	orr.w	r2, r2, #1
 8001b86:	615a      	str	r2, [r3, #20]
		motor->last_speed = speed;
 8001b88:	82c4      	strh	r4, [r0, #22]
}
 8001b8a:	bd38      	pop	{r3, r4, r5, pc}
			HAL_GPIO_WritePin(motor->dir_gpio_port, motor->dir_gpio_pin, STEP_MOTOR_CW);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f001 f897 	bl	8002cc0 <HAL_GPIO_WritePin>
			speed = -speed;
 8001b92:	4263      	negs	r3, r4
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	e7d1      	b.n	8001b3c <StepMotor_SetSpeedLUT+0x24>
		HAL_GPIO_TogglePin(motor->dir_gpio_port, motor->dir_gpio_pin);
 8001b98:	8981      	ldrh	r1, [r0, #12]
 8001b9a:	6880      	ldr	r0, [r0, #8]
		motor->last_speed = speed;
 8001b9c:	82ec      	strh	r4, [r5, #22]
}
 8001b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_TogglePin(motor->dir_gpio_port, motor->dir_gpio_pin);
 8001ba2:	f001 b891 	b.w	8002cc8 <HAL_GPIO_TogglePin>
 8001ba6:	bf00      	nop
 8001ba8:	0800997c 	.word	0x0800997c
 8001bac:	0800c08c 	.word	0x0800c08c

08001bb0 <StepMotor_Enable>:
void StepMotor_Enable(StepMotor* motor) {
 8001bb0:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(motor->en_gpio_port, motor->en_gpio_pin, GPIO_PIN_RESET);
 8001bb2:	8a81      	ldrh	r1, [r0, #20]
void StepMotor_Enable(StepMotor* motor) {
 8001bb4:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(motor->en_gpio_port, motor->en_gpio_pin, GPIO_PIN_RESET);
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	6900      	ldr	r0, [r0, #16]
 8001bba:	f001 f881 	bl	8002cc0 <HAL_GPIO_WritePin>
    HAL_TIM_OC_Start(motor->timer, motor->channel);
 8001bbe:	e9d4 0100 	ldrd	r0, r1, [r4]
}
 8001bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_TIM_OC_Start(motor->timer, motor->channel);
 8001bc6:	f002 b98d 	b.w	8003ee4 <HAL_TIM_OC_Start>
 8001bca:	bf00      	nop

08001bcc <StepMotor_Disable>:
void StepMotor_Disable(StepMotor* motor) {
 8001bcc:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(motor->en_gpio_port, motor->en_gpio_pin, GPIO_PIN_SET);
 8001bce:	8a81      	ldrh	r1, [r0, #20]
void StepMotor_Disable(StepMotor* motor) {
 8001bd0:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(motor->en_gpio_port, motor->en_gpio_pin, GPIO_PIN_SET);
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	6900      	ldr	r0, [r0, #16]
 8001bd6:	f001 f873 	bl	8002cc0 <HAL_GPIO_WritePin>
    HAL_TIM_OC_Stop(motor->timer, motor->channel);
 8001bda:	e9d4 0100 	ldrd	r0, r1, [r4]
 8001bde:	f002 f9dd 	bl	8003f9c <HAL_TIM_OC_Stop>
    motor->timer->Instance->CNT = 0;
 8001be2:	6823      	ldr	r3, [r4, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2200      	movs	r2, #0
 8001be8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001bea:	bd10      	pop	{r4, pc}

08001bec <DWT_Init>:
#include "Timing.h"

static uint32_t last_cycle = 0;

void DWT_Init(void) {
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8001bec:	4908      	ldr	r1, [pc, #32]	@ (8001c10 <DWT_Init+0x24>)
    DWT->CYCCNT = 0;                                // Reset cycle counter
 8001bee:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <DWT_Init+0x28>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8001bf0:	f8d1 20fc 	ldr.w	r2, [r1, #252]	@ 0xfc
    DWT->CYCCNT = 0;                                // Reset cycle counter
 8001bf4:	2000      	movs	r0, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8001bf6:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8001bfa:	f8c1 20fc 	str.w	r2, [r1, #252]	@ 0xfc
    DWT->CYCCNT = 0;                                // Reset cycle counter
 8001bfe:	6058      	str	r0, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;           // Start cycle counter
 8001c00:	681a      	ldr	r2, [r3, #0]
    last_cycle = DWT->CYCCNT;
 8001c02:	4905      	ldr	r1, [pc, #20]	@ (8001c18 <DWT_Init+0x2c>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;           // Start cycle counter
 8001c04:	f042 0201 	orr.w	r2, r2, #1
 8001c08:	601a      	str	r2, [r3, #0]
    last_cycle = DWT->CYCCNT;
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	600b      	str	r3, [r1, #0]
}
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00
 8001c14:	e0001000 	.word	0xe0001000
 8001c18:	20000218 	.word	0x20000218

08001c1c <DWT_GetDeltaTime>:

float DWT_GetDeltaTime(void) {
    uint32_t now_cycle = DWT->CYCCNT;
    uint32_t cycle_diff = now_cycle - last_cycle;
 8001c1c:	4a08      	ldr	r2, [pc, #32]	@ (8001c40 <DWT_GetDeltaTime+0x24>)
    uint32_t now_cycle = DWT->CYCCNT;
 8001c1e:	4b09      	ldr	r3, [pc, #36]	@ (8001c44 <DWT_GetDeltaTime+0x28>)
    last_cycle = now_cycle;
    return (float)cycle_diff / (float)SystemCoreClock;  // dt in seconds
 8001c20:	4809      	ldr	r0, [pc, #36]	@ (8001c48 <DWT_GetDeltaTime+0x2c>)
    uint32_t now_cycle = DWT->CYCCNT;
 8001c22:	6859      	ldr	r1, [r3, #4]
    uint32_t cycle_diff = now_cycle - last_cycle;
 8001c24:	6813      	ldr	r3, [r2, #0]
    return (float)cycle_diff / (float)SystemCoreClock;  // dt in seconds
 8001c26:	ed90 0a00 	vldr	s0, [r0]
    last_cycle = now_cycle;
 8001c2a:	6011      	str	r1, [r2, #0]
    uint32_t cycle_diff = now_cycle - last_cycle;
 8001c2c:	1acb      	subs	r3, r1, r3
    return (float)cycle_diff / (float)SystemCoreClock;  // dt in seconds
 8001c2e:	ee07 3a90 	vmov	s15, r3
 8001c32:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8001c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8001c3a:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8001c3e:	4770      	bx	lr
 8001c40:	20000218 	.word	0x20000218
 8001c44:	e0001000 	.word	0xe0001000
 8001c48:	20000020 	.word	0x20000020

08001c4c <MyProcessCommand>:
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void MyProcessCommand(CommandProtocol_Handle* handle) {
 8001c4c:	b570      	push	{r4, r5, r6, lr}
 8001c4e:	8902      	ldrh	r2, [r0, #8]
 8001c50:	ba52      	rev16	r2, r2
	// Combine the first two characters into a 16-bit integer
	uint16_t encodedCommand = (handle->rxBuffer[0] << 8) | handle->rxBuffer[1];
    char response[50];

    switch(encodedCommand) { // First 2 bytes are command
 8001c52:	f644 5153 	movw	r1, #19795	@ 0x4d53
 8001c56:	b213      	sxth	r3, r2
 8001c58:	428b      	cmp	r3, r1
void MyProcessCommand(CommandProtocol_Handle* handle) {
 8001c5a:	b08e      	sub	sp, #56	@ 0x38
 8001c5c:	4604      	mov	r4, r0
    switch(encodedCommand) { // First 2 bytes are command
 8001c5e:	d072      	beq.n	8001d46 <MyProcessCommand+0xfa>
 8001c60:	b292      	uxth	r2, r2
 8001c62:	dc18      	bgt.n	8001c96 <MyProcessCommand+0x4a>
 8001c64:	f244 2154 	movw	r1, #16980	@ 0x4254
 8001c68:	428b      	cmp	r3, r1
 8001c6a:	d057      	beq.n	8001d1c <MyProcessCommand+0xd0>
 8001c6c:	f244 3150 	movw	r1, #17232	@ 0x4350
 8001c70:	428b      	cmp	r3, r1
 8001c72:	d036      	beq.n	8001ce2 <MyProcessCommand+0x96>
 8001c74:	f244 1142 	movw	r1, #16706	@ 0x4142
 8001c78:	428b      	cmp	r3, r1
 8001c7a:	d120      	bne.n	8001cbe <MyProcessCommand+0x72>
        	sprintf(response, "Trajectory started.\n");
			CommandProtocol_SendResponse(handle, response);
        	break;

        case CMD_AS5600_DATA:
            sprintf(response, "AS5600 Angles: %d, %d\n", sensors.angles[0], sensors.angles[1]);
 8001c7c:	4a3e      	ldr	r2, [pc, #248]	@ (8001d78 <MyProcessCommand+0x12c>)
 8001c7e:	493f      	ldr	r1, [pc, #252]	@ (8001d7c <MyProcessCommand+0x130>)
 8001c80:	8913      	ldrh	r3, [r2, #8]
 8001c82:	88d2      	ldrh	r2, [r2, #6]
 8001c84:	a801      	add	r0, sp, #4
 8001c86:	f004 ff7f 	bl	8006b88 <siprintf>
            CommandProtocol_SendResponse(handle, response);
 8001c8a:	a901      	add	r1, sp, #4
 8001c8c:	4620      	mov	r0, r4
 8001c8e:	f7ff ff0d 	bl	8001aac <CommandProtocol_SendResponse>
        default:
            sprintf(response, "Unknown command: %d\n", encodedCommand);
        	CommandProtocol_SendResponse(handle, response);
        	break;
    }
}
 8001c92:	b00e      	add	sp, #56	@ 0x38
 8001c94:	bd70      	pop	{r4, r5, r6, pc}
    switch(encodedCommand) { // First 2 bytes are command
 8001c96:	f245 4143 	movw	r1, #21571	@ 0x5443
 8001c9a:	428b      	cmp	r3, r1
 8001c9c:	d019      	beq.n	8001cd2 <MyProcessCommand+0x86>
 8001c9e:	f245 414c 	movw	r1, #21580	@ 0x544c
 8001ca2:	428b      	cmp	r3, r1
 8001ca4:	d10b      	bne.n	8001cbe <MyProcessCommand+0x72>
            HAL_GPIO_TogglePin(TEST_LED_GPIO_Port, TEST_LED_Pin);
 8001ca6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001caa:	4835      	ldr	r0, [pc, #212]	@ (8001d80 <MyProcessCommand+0x134>)
 8001cac:	f001 f80c 	bl	8002cc8 <HAL_GPIO_TogglePin>
            CommandProtocol_SendResponse(handle, "LED TOGGLED!\n");
 8001cb0:	4934      	ldr	r1, [pc, #208]	@ (8001d84 <MyProcessCommand+0x138>)
				CommandProtocol_SendResponse(handle, "Error parsing trajectory data.\n");
 8001cb2:	4620      	mov	r0, r4
}
 8001cb4:	b00e      	add	sp, #56	@ 0x38
 8001cb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				CommandProtocol_SendResponse(handle, "Error parsing trajectory data.\n");
 8001cba:	f7ff bef7 	b.w	8001aac <CommandProtocol_SendResponse>
            sprintf(response, "Unknown command: %d\n", encodedCommand);
 8001cbe:	4932      	ldr	r1, [pc, #200]	@ (8001d88 <MyProcessCommand+0x13c>)
 8001cc0:	a801      	add	r0, sp, #4
 8001cc2:	f004 ff61 	bl	8006b88 <siprintf>
        	CommandProtocol_SendResponse(handle, response);
 8001cc6:	a901      	add	r1, sp, #4
 8001cc8:	4620      	mov	r0, r4
 8001cca:	f7ff feef 	bl	8001aac <CommandProtocol_SendResponse>
}
 8001cce:	b00e      	add	sp, #56	@ 0x38
 8001cd0:	bd70      	pop	{r4, r5, r6, pc}
        	if (Trajectory_ParseCoeffs((char*)handle->rxBuffer, &robotTraj) == HAL_OK)
 8001cd2:	492e      	ldr	r1, [pc, #184]	@ (8001d8c <MyProcessCommand+0x140>)
 8001cd4:	3008      	adds	r0, #8
 8001cd6:	f7ff fd13 	bl	8001700 <Trajectory_ParseCoeffs>
 8001cda:	2800      	cmp	r0, #0
 8001cdc:	d141      	bne.n	8001d62 <MyProcessCommand+0x116>
				CommandProtocol_SendResponse(handle, "Trajectory coefficients received.\n");
 8001cde:	492c      	ldr	r1, [pc, #176]	@ (8001d90 <MyProcessCommand+0x144>)
 8001ce0:	e7e7      	b.n	8001cb2 <MyProcessCommand+0x66>
			char paramType[3] = {handle->rxBuffer[2], handle->rxBuffer[3], '\0'};
 8001ce2:	f100 050a 	add.w	r5, r0, #10
 8001ce6:	8942      	ldrh	r2, [r0, #10]
 8001ce8:	f8ad 2000 	strh.w	r2, [sp]
 8001cec:	2300      	movs	r3, #0
			if (ParsePIDParametersFromUART(&pidObj, recievedShit, strlen(recievedShit))) {
 8001cee:	4628      	mov	r0, r5
			char paramType[3] = {handle->rxBuffer[2], handle->rxBuffer[3], '\0'};
 8001cf0:	f88d 3002 	strb.w	r3, [sp, #2]
			if (ParsePIDParametersFromUART(&pidObj, recievedShit, strlen(recievedShit))) {
 8001cf4:	f7fe fac4 	bl	8000280 <strlen>
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	b282      	uxth	r2, r0
 8001cfc:	4825      	ldr	r0, [pc, #148]	@ (8001d94 <MyProcessCommand+0x148>)
 8001cfe:	f7ff faf1 	bl	80012e4 <ParsePIDParametersFromUART>
				sprintf(response, "PID %s parameters updated successfully.\n", paramType);
 8001d02:	ad01      	add	r5, sp, #4
			if (ParsePIDParametersFromUART(&pidObj, recievedShit, strlen(recievedShit))) {
 8001d04:	b378      	cbz	r0, 8001d66 <MyProcessCommand+0x11a>
				sprintf(response, "PID %s parameters updated successfully.\n", paramType);
 8001d06:	4924      	ldr	r1, [pc, #144]	@ (8001d98 <MyProcessCommand+0x14c>)
 8001d08:	466a      	mov	r2, sp
 8001d0a:	4628      	mov	r0, r5
 8001d0c:	f004 ff3c 	bl	8006b88 <siprintf>
			CommandProtocol_SendResponse(handle, response);
 8001d10:	4629      	mov	r1, r5
 8001d12:	4620      	mov	r0, r4
 8001d14:	f7ff feca 	bl	8001aac <CommandProtocol_SendResponse>
}
 8001d18:	b00e      	add	sp, #56	@ 0x38
 8001d1a:	bd70      	pop	{r4, r5, r6, pc}
        	sprintf(response, "Trajectory started.\n");
 8001d1c:	4d1f      	ldr	r5, [pc, #124]	@ (8001d9c <MyProcessCommand+0x150>)
        	Trajectory_Start(&robotTraj);
 8001d1e:	481b      	ldr	r0, [pc, #108]	@ (8001d8c <MyProcessCommand+0x140>)
 8001d20:	f7ff fc24 	bl	800156c <Trajectory_Start>
        	sprintf(response, "Trajectory started.\n");
 8001d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d26:	f10d 0c04 	add.w	ip, sp, #4
 8001d2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001d2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d32:	f84c 0b04 	str.w	r0, [ip], #4
			CommandProtocol_SendResponse(handle, response);
 8001d36:	4620      	mov	r0, r4
        	sprintf(response, "Trajectory started.\n");
 8001d38:	f88c 1000 	strb.w	r1, [ip]
			CommandProtocol_SendResponse(handle, response);
 8001d3c:	a901      	add	r1, sp, #4
 8001d3e:	f7ff feb5 	bl	8001aac <CommandProtocol_SendResponse>
}
 8001d42:	b00e      	add	sp, #56	@ 0x38
 8001d44:	bd70      	pop	{r4, r5, r6, pc}
			int index = handle->rxBuffer[2] - '0'; // Convert char to int by subtracting '0'
 8001d46:	7a85      	ldrb	r5, [r0, #10]
			char state = handle->rxBuffer[3];
 8001d48:	7ac6      	ldrb	r6, [r0, #11]
				StepMotor_Enable(motorArray[index]);
 8001d4a:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <MyProcessCommand+0x154>)
			int index = handle->rxBuffer[2] - '0'; // Convert char to int by subtracting '0'
 8001d4c:	3d30      	subs	r5, #48	@ 0x30
			if (state == '1') {
 8001d4e:	2e31      	cmp	r6, #49	@ 0x31
				StepMotor_Enable(motorArray[index]);
 8001d50:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
			if (state == '1') {
 8001d54:	d00d      	beq.n	8001d72 <MyProcessCommand+0x126>
				StepMotor_Disable(motorArray[index]);
 8001d56:	f7ff ff39 	bl	8001bcc <StepMotor_Disable>
			sprintf(response, "Motor %d is at state %c\n", index, state);
 8001d5a:	4912      	ldr	r1, [pc, #72]	@ (8001da4 <MyProcessCommand+0x158>)
 8001d5c:	4633      	mov	r3, r6
 8001d5e:	462a      	mov	r2, r5
 8001d60:	e790      	b.n	8001c84 <MyProcessCommand+0x38>
				CommandProtocol_SendResponse(handle, "Error parsing trajectory data.\n");
 8001d62:	4911      	ldr	r1, [pc, #68]	@ (8001da8 <MyProcessCommand+0x15c>)
 8001d64:	e7a5      	b.n	8001cb2 <MyProcessCommand+0x66>
				sprintf(response, "Error: Failed to parse PID %s parameters!\n", paramType);
 8001d66:	4911      	ldr	r1, [pc, #68]	@ (8001dac <MyProcessCommand+0x160>)
 8001d68:	466a      	mov	r2, sp
 8001d6a:	4628      	mov	r0, r5
 8001d6c:	f004 ff0c 	bl	8006b88 <siprintf>
 8001d70:	e7ce      	b.n	8001d10 <MyProcessCommand+0xc4>
				StepMotor_Enable(motorArray[index]);
 8001d72:	f7ff ff1d 	bl	8001bb0 <StepMotor_Enable>
 8001d76:	e7f0      	b.n	8001d5a <MyProcessCommand+0x10e>
 8001d78:	20000600 	.word	0x20000600
 8001d7c:	0800994c 	.word	0x0800994c
 8001d80:	40020800 	.word	0x40020800
 8001d84:	0800986c 	.word	0x0800986c
 8001d88:	08009964 	.word	0x08009964
 8001d8c:	2000021c 	.word	0x2000021c
 8001d90:	080098f0 	.word	0x080098f0
 8001d94:	20000404 	.word	0x20000404
 8001d98:	08009898 	.word	0x08009898
 8001d9c:	08009934 	.word	0x08009934
 8001da0:	200005b8 	.word	0x200005b8
 8001da4:	0800987c 	.word	0x0800987c
 8001da8:	08009914 	.word	0x08009914
 8001dac:	080098c4 	.word	0x080098c4

08001db0 <SystemClock_Config>:
{
 8001db0:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001db2:	2300      	movs	r3, #0
{
 8001db4:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001db6:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8001dba:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dbe:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001dc2:	e9cd 3305 	strd	r3, r3, [sp, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	4920      	ldr	r1, [pc, #128]	@ (8001e48 <SystemClock_Config+0x98>)
 8001dc8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dca:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dcc:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dce:	4a1f      	ldr	r2, [pc, #124]	@ (8001e4c <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd0:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8001dd4:	6408      	str	r0, [r1, #64]	@ 0x40
 8001dd6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001dd8:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8001ddc:	9101      	str	r1, [sp, #4]
 8001dde:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de0:	9302      	str	r3, [sp, #8]
 8001de2:	6813      	ldr	r3, [r2, #0]
 8001de4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dec:	2001      	movs	r0, #1
 8001dee:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001df2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001df6:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dfa:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dfc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e00:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e02:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e06:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e08:	2104      	movs	r1, #4
 8001e0a:	2002      	movs	r0, #2
 8001e0c:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001e10:	220c      	movs	r2, #12
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001e12:	2360      	movs	r3, #96	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e14:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001e16:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001e18:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e1a:	f001 fc67 	bl	80036ec <HAL_RCC_OscConfig>
 8001e1e:	b108      	cbz	r0, 8001e24 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e20:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e22:	e7fe      	b.n	8001e22 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e24:	210f      	movs	r1, #15
 8001e26:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e28:	e9cd 1403 	strd	r1, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001e2c:	2280      	movs	r2, #128	@ 0x80
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e2e:	a803      	add	r0, sp, #12
 8001e30:	2101      	movs	r1, #1
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e32:	e9cd 2305 	strd	r2, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e36:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e38:	f001 fe6e 	bl	8003b18 <HAL_RCC_ClockConfig>
 8001e3c:	b108      	cbz	r0, 8001e42 <SystemClock_Config+0x92>
 8001e3e:	b672      	cpsid	i
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <SystemClock_Config+0x90>
}
 8001e42:	b014      	add	sp, #80	@ 0x50
 8001e44:	bd10      	pop	{r4, pc}
 8001e46:	bf00      	nop
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40007000 	.word	0x40007000

08001e50 <HAL_UART_RxCpltCallback>:
{
 8001e50:	b538      	push	{r3, r4, r5, lr}
	if (huart == cmdHandle.huart) {
 8001e52:	4c0b      	ldr	r4, [pc, #44]	@ (8001e80 <HAL_UART_RxCpltCallback+0x30>)
 8001e54:	6825      	ldr	r5, [r4, #0]
 8001e56:	4285      	cmp	r5, r0
 8001e58:	d000      	beq.n	8001e5c <HAL_UART_RxCpltCallback+0xc>
}
 8001e5a:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t receivedByte = cmdHandle.rxBuffer[cmdHandle.rxIndex];
 8001e5c:	f894 33f0 	ldrb.w	r3, [r4, #1008]	@ 0x3f0
 8001e60:	4423      	add	r3, r4
		CommandProtocol_ProcessByte(&cmdHandle, receivedByte);
 8001e62:	4620      	mov	r0, r4
 8001e64:	7a19      	ldrb	r1, [r3, #8]
 8001e66:	f7ff fdff 	bl	8001a68 <CommandProtocol_ProcessByte>
		HAL_UART_Receive_IT(huart, &cmdHandle.rxBuffer[cmdHandle.rxIndex], 1);
 8001e6a:	f894 13f0 	ldrb.w	r1, [r4, #1008]	@ 0x3f0
 8001e6e:	3108      	adds	r1, #8
 8001e70:	4628      	mov	r0, r5
 8001e72:	4421      	add	r1, r4
 8001e74:	2201      	movs	r2, #1
}
 8001e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_UART_Receive_IT(huart, &cmdHandle.rxBuffer[cmdHandle.rxIndex], 1);
 8001e7a:	f002 bc37 	b.w	80046ec <HAL_UART_Receive_IT>
 8001e7e:	bf00      	nop
 8001e80:	20000620 	.word	0x20000620

08001e84 <HAL_TIM_PeriodElapsedCallback>:
    if (htim->Instance == TIM11)
 8001e84:	4b04      	ldr	r3, [pc, #16]	@ (8001e98 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001e86:	6802      	ldr	r2, [r0, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d000      	beq.n	8001e8e <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001e8c:	4770      	bx	lr
    	globalControllerFlag = 1;
 8001e8e:	4b03      	ldr	r3, [pc, #12]	@ (8001e9c <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]
}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40014800 	.word	0x40014800
 8001e9c:	20000a15 	.word	0x20000a15

08001ea0 <setup_motors>:
void setup_motors() {
 8001ea0:	b570      	push	{r4, r5, r6, lr}
    statusCheck = StepMotor_Init(&l1_motor, &htim5, TIM_CHANNEL_1, M1_DIR_GPIO_Port, M1_DIR_Pin, M1_EN_GPIO_Port, M1_EN_Pin);
 8001ea2:	4b16      	ldr	r3, [pc, #88]	@ (8001efc <setup_motors+0x5c>)
 8001ea4:	4d16      	ldr	r5, [pc, #88]	@ (8001f00 <setup_motors+0x60>)
 8001ea6:	4e17      	ldr	r6, [pc, #92]	@ (8001f04 <setup_motors+0x64>)
    statusCheck = StepMotor_Init(&l2_motor, &htim9, TIM_CHANNEL_1, M2_DIR_GPIO_Port, M2_DIR_Pin, M2_EN_GPIO_Port, M2_EN_Pin);
 8001ea8:	4c17      	ldr	r4, [pc, #92]	@ (8001f08 <setup_motors+0x68>)
void setup_motors() {
 8001eaa:	b084      	sub	sp, #16
    statusCheck = StepMotor_Init(&l1_motor, &htim5, TIM_CHANNEL_1, M1_DIR_GPIO_Port, M1_DIR_Pin, M1_EN_GPIO_Port, M1_EN_Pin);
 8001eac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001eb0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001eb4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001eb8:	9200      	str	r2, [sp, #0]
 8001eba:	4914      	ldr	r1, [pc, #80]	@ (8001f0c <setup_motors+0x6c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	4628      	mov	r0, r5
 8001ec0:	f7ff fe0a 	bl	8001ad8 <StepMotor_Init>
    statusCheck = StepMotor_Init(&l2_motor, &htim9, TIM_CHANNEL_1, M2_DIR_GPIO_Port, M2_DIR_Pin, M2_EN_GPIO_Port, M2_EN_Pin);
 8001ec4:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <setup_motors+0x70>)
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	2208      	movs	r2, #8
    statusCheck = StepMotor_Init(&l1_motor, &htim5, TIM_CHANNEL_1, M1_DIR_GPIO_Port, M1_DIR_Pin, M1_EN_GPIO_Port, M1_EN_Pin);
 8001eca:	7030      	strb	r0, [r6, #0]
    statusCheck = StepMotor_Init(&l2_motor, &htim9, TIM_CHANNEL_1, M2_DIR_GPIO_Port, M2_DIR_Pin, M2_EN_GPIO_Port, M2_EN_Pin);
 8001ecc:	9202      	str	r2, [sp, #8]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	9200      	str	r2, [sp, #0]
 8001ed2:	4910      	ldr	r1, [pc, #64]	@ (8001f14 <setup_motors+0x74>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	f7ff fdfe 	bl	8001ad8 <StepMotor_Init>
    motorArray[0] = &l1_motor;
 8001edc:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <setup_motors+0x78>)
    statusCheck = StepMotor_Init(&l2_motor, &htim9, TIM_CHANNEL_1, M2_DIR_GPIO_Port, M2_DIR_Pin, M2_EN_GPIO_Port, M2_EN_Pin);
 8001ede:	7030      	strb	r0, [r6, #0]
    StepMotor_SetSpeedLUT(&l1_motor, 0); // Set motor speed to 0 Initially
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4628      	mov	r0, r5
    motorArray[1] = &l2_motor;
 8001ee4:	e9c3 5400 	strd	r5, r4, [r3]
    StepMotor_SetSpeedLUT(&l1_motor, 0); // Set motor speed to 0 Initially
 8001ee8:	f7ff fe16 	bl	8001b18 <StepMotor_SetSpeedLUT>
    StepMotor_SetSpeedLUT(&l2_motor, 0); // Set motor speed to 0 Initially
 8001eec:	2100      	movs	r1, #0
 8001eee:	4620      	mov	r0, r4
}
 8001ef0:	b004      	add	sp, #16
 8001ef2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    StepMotor_SetSpeedLUT(&l2_motor, 0); // Set motor speed to 0 Initially
 8001ef6:	f7ff be0f 	b.w	8001b18 <StepMotor_SetSpeedLUT>
 8001efa:	bf00      	nop
 8001efc:	40020800 	.word	0x40020800
 8001f00:	200005e4 	.word	0x200005e4
 8001f04:	20000a14 	.word	0x20000a14
 8001f08:	200005c8 	.word	0x200005c8
 8001f0c:	20000af0 	.word	0x20000af0
 8001f10:	40020000 	.word	0x40020000
 8001f14:	20000aa8 	.word	0x20000aa8
 8001f18:	200005b8 	.word	0x200005b8
 8001f1c:	00000000 	.word	0x00000000

08001f20 <main>:
{
 8001f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  CommandProtocol_SetCommandProcessor(MyProcessCommand);
 8001f24:	48ae      	ldr	r0, [pc, #696]	@ (80021e0 <main+0x2c0>)
{
 8001f26:	b092      	sub	sp, #72	@ 0x48
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f28:	2400      	movs	r4, #0
  CommandProtocol_SetCommandProcessor(MyProcessCommand);
 8001f2a:	f7ff fd85 	bl	8001a38 <CommandProtocol_SetCommandProcessor>
  HAL_Init();
 8001f2e:	f000 fc11 	bl	8002754 <HAL_Init>
  SystemClock_Config();
 8001f32:	f7ff ff3d 	bl	8001db0 <SystemClock_Config>
  DWT_Init();
 8001f36:	f7ff fe59 	bl	8001bec <DWT_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3a:	e9cd 440a 	strd	r4, r4, [sp, #40]	@ 0x28
 8001f3e:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f42:	4ba8      	ldr	r3, [pc, #672]	@ (80021e4 <main+0x2c4>)
 8001f44:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f46:	940e      	str	r4, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  HAL_GPIO_WritePin(GPIOC, TEST_LED_Pin|M1_DIR_Pin|M1_EN_Pin, GPIO_PIN_RESET);
 8001f4a:	48a7      	ldr	r0, [pc, #668]	@ (80021e8 <main+0x2c8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4c:	f042 0204 	orr.w	r2, r2, #4
 8001f50:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f52:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f54:	f001 0104 	and.w	r1, r1, #4
 8001f58:	9100      	str	r1, [sp, #0]
 8001f5a:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f5c:	9401      	str	r4, [sp, #4]
 8001f5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f60:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8001f64:	6319      	str	r1, [r3, #48]	@ 0x30
 8001f66:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f68:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8001f6c:	9101      	str	r1, [sp, #4]
 8001f6e:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f70:	9402      	str	r4, [sp, #8]
 8001f72:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f74:	f041 0101 	orr.w	r1, r1, #1
 8001f78:	6319      	str	r1, [r3, #48]	@ 0x30
 8001f7a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f7c:	f001 0101 	and.w	r1, r1, #1
 8001f80:	9102      	str	r1, [sp, #8]
 8001f82:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f84:	9403      	str	r4, [sp, #12]
 8001f86:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f88:	f041 0102 	orr.w	r1, r1, #2
 8001f8c:	6319      	str	r1, [r3, #48]	@ 0x30
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f90:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, TEST_LED_Pin|M1_DIR_Pin|M1_EN_Pin, GPIO_PIN_RESET);
 8001f94:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f96:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, TEST_LED_Pin|M1_DIR_Pin|M1_EN_Pin, GPIO_PIN_RESET);
 8001f98:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, TEST_LED_Pin|M1_DIR_Pin|M1_EN_Pin, GPIO_PIN_RESET);
 8001f9e:	f000 fe8f 	bl	8002cc0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, M2_DIR_Pin|M2_EN_Pin, GPIO_PIN_RESET);
 8001fa2:	4622      	mov	r2, r4
 8001fa4:	4891      	ldr	r0, [pc, #580]	@ (80021ec <main+0x2cc>)
 8001fa6:	210a      	movs	r1, #10
 8001fa8:	f000 fe8a 	bl	8002cc0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fac:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = TEST_LED_Pin|M1_DIR_Pin;
 8001fae:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb2:	488d      	ldr	r0, [pc, #564]	@ (80021e8 <main+0x2c8>)
 8001fb4:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fb6:	2502      	movs	r5, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb8:	e9cd 360a 	strd	r3, r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Pin = M1_EN_Pin;
 8001fbc:	f44f 4700 	mov.w	r7, #32768	@ 0x8000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc0:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc4:	f000 fcc4 	bl	8002950 <HAL_GPIO_Init>
  HAL_GPIO_Init(M1_EN_GPIO_Port, &GPIO_InitStruct);
 8001fc8:	4887      	ldr	r0, [pc, #540]	@ (80021e8 <main+0x2c8>)
 8001fca:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fcc:	e9cd 760a 	strd	r7, r6, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd0:	e9cd 540c 	strd	r5, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(M1_EN_GPIO_Port, &GPIO_InitStruct);
 8001fd4:	f000 fcbc 	bl	8002950 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M2_DIR_Pin|M2_EN_Pin;
 8001fd8:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fda:	4884      	ldr	r0, [pc, #528]	@ (80021ec <main+0x2cc>)
  GPIO_InitStruct.Pin = M2_DIR_Pin|M2_EN_Pin;
 8001fdc:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fde:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	e9cd 640b 	strd	r6, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	940d      	str	r4, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe6:	f000 fcb3 	bl	8002950 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001fea:	2333      	movs	r3, #51	@ 0x33
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fec:	4880      	ldr	r0, [pc, #512]	@ (80021f0 <main+0x2d0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001fee:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff0:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	e9cd 540b 	strd	r5, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ff6:	e9cd 450d 	strd	r4, r5, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffa:	f000 fca9 	bl	8002950 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ffe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002002:	487a      	ldr	r0, [pc, #488]	@ (80021ec <main+0x2cc>)
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002004:	930a      	str	r3, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002006:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	e9cd 540b 	strd	r5, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800200c:	e9cd 460d 	strd	r4, r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002010:	f000 fc9e 	bl	8002950 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002014:	4875      	ldr	r0, [pc, #468]	@ (80021ec <main+0x2cc>)
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002016:	970a      	str	r7, [sp, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002018:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	e9cd 540b 	strd	r5, r4, [sp, #44]	@ 0x2c
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800201e:	e9cd 460d 	strd	r4, r6, [sp, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002022:	f000 fc95 	bl	8002950 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002026:	f44f 7280 	mov.w	r2, #256	@ 0x100
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800202a:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202c:	4870      	ldr	r0, [pc, #448]	@ (80021f0 <main+0x2d0>)
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800202e:	930e      	str	r3, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002030:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002032:	e9cd 250a 	strd	r2, r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800203a:	f000 fc89 	bl	8002950 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800203e:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002042:	486b      	ldr	r0, [pc, #428]	@ (80021f0 <main+0x2d0>)
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002044:	950e      	str	r5, [sp, #56]	@ 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002046:	a90a      	add	r1, sp, #40	@ 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	e9cd 350a 	strd	r3, r5, [sp, #40]	@ 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	e9cd 440c 	strd	r4, r4, [sp, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002050:	f000 fc7e 	bl	8002950 <HAL_GPIO_Init>
  huart1.Instance = USART1;
 8002054:	4867      	ldr	r0, [pc, #412]	@ (80021f4 <main+0x2d4>)
  huart1.Init.BaudRate = 115200;
 8002056:	4a68      	ldr	r2, [pc, #416]	@ (80021f8 <main+0x2d8>)
 8002058:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800205c:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002060:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002062:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002066:	e9c0 4304 	strd	r4, r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800206a:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800206e:	f002 fa27 	bl	80044c0 <HAL_UART_Init>
 8002072:	b108      	cbz	r0, 8002078 <main+0x158>
 8002074:	b672      	cpsid	i
  while (1)
 8002076:	e7fe      	b.n	8002076 <main+0x156>
  hi2c1.Instance = I2C1;
 8002078:	4603      	mov	r3, r0
  hi2c1.Init.ClockSpeed = 400000;
 800207a:	4960      	ldr	r1, [pc, #384]	@ (80021fc <main+0x2dc>)
  hi2c1.Instance = I2C1;
 800207c:	4860      	ldr	r0, [pc, #384]	@ (8002200 <main+0x2e0>)
  hi2c1.Init.ClockSpeed = 400000;
 800207e:	4a61      	ldr	r2, [pc, #388]	@ (8002204 <main+0x2e4>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002080:	6203      	str	r3, [r0, #32]
  hi2c1.Init.ClockSpeed = 400000;
 8002082:	e9c0 1200 	strd	r1, r2, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002086:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 800208a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800208e:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002092:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002096:	f000 feb5 	bl	8002e04 <HAL_I2C_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	b108      	cbz	r0, 80020a2 <main+0x182>
 800209e:	b672      	cpsid	i
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <main+0x180>
  htim11.Instance = TIM11;
 80020a2:	4859      	ldr	r0, [pc, #356]	@ (8002208 <main+0x2e8>)
  htim11.Init.Prescaler = 5000-1;
 80020a4:	4959      	ldr	r1, [pc, #356]	@ (800220c <main+0x2ec>)
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a6:	6103      	str	r3, [r0, #16]
  htim11.Init.Prescaler = 5000-1;
 80020a8:	f241 3287 	movw	r2, #4999	@ 0x1387
 80020ac:	e9c0 1200 	strd	r1, r2, [r0]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020b0:	2680      	movs	r6, #128	@ 0x80
  htim11.Init.Period = 100-1;
 80020b2:	2263      	movs	r2, #99	@ 0x63
 80020b4:	e9c0 3202 	strd	r3, r2, [r0, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020b8:	6186      	str	r6, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80020ba:	f001 fdeb 	bl	8003c94 <HAL_TIM_Base_Init>
 80020be:	b9e0      	cbnz	r0, 80020fa <main+0x1da>
  htim5.Instance = TIM5;
 80020c0:	4c53      	ldr	r4, [pc, #332]	@ (8002210 <main+0x2f0>)
 80020c2:	4b54      	ldr	r3, [pc, #336]	@ (8002214 <main+0x2f4>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020c4:	9006      	str	r0, [sp, #24]
  htim5.Init.Prescaler = 65535;
 80020c6:	f64f 77ff 	movw	r7, #65535	@ 0xffff
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020ca:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80020ce:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 80020d2:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020d6:	e9cd 0007 	strd	r0, r0, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020da:	9004      	str	r0, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020dc:	9010      	str	r0, [sp, #64]	@ 0x40
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020de:	9009      	str	r0, [sp, #36]	@ 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e0:	9005      	str	r0, [sp, #20]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e2:	60a0      	str	r0, [r4, #8]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e4:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020e6:	4620      	mov	r0, r4
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020e8:	61a6      	str	r6, [r4, #24]
  htim5.Init.Prescaler = 65535;
 80020ea:	6067      	str	r7, [r4, #4]
  htim5.Init.Period = 65535;
 80020ec:	60e7      	str	r7, [r4, #12]
  htim5.Instance = TIM5;
 80020ee:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80020f0:	f001 fdd0 	bl	8003c94 <HAL_TIM_Base_Init>
 80020f4:	b118      	cbz	r0, 80020fe <main+0x1de>
 80020f6:	b672      	cpsid	i
  while (1)
 80020f8:	e7fe      	b.n	80020f8 <main+0x1d8>
 80020fa:	b672      	cpsid	i
 80020fc:	e7fe      	b.n	80020fc <main+0x1dc>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020fe:	f44f 5880 	mov.w	r8, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002102:	a906      	add	r1, sp, #24
 8002104:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002106:	f8cd 8018 	str.w	r8, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800210a:	f002 f84f 	bl	80041ac <HAL_TIM_ConfigClockSource>
 800210e:	b108      	cbz	r0, 8002114 <main+0x1f4>
 8002110:	b672      	cpsid	i
  while (1)
 8002112:	e7fe      	b.n	8002112 <main+0x1f2>
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8002114:	4620      	mov	r0, r4
 8002116:	f001 fe6b 	bl	8003df0 <HAL_TIM_OC_Init>
 800211a:	b108      	cbz	r0, 8002120 <main+0x200>
 800211c:	b672      	cpsid	i
  while (1)
 800211e:	e7fe      	b.n	800211e <main+0x1fe>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002120:	2200      	movs	r2, #0
 8002122:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002124:	a904      	add	r1, sp, #16
 8002126:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002128:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800212c:	f002 f98c 	bl	8004448 <HAL_TIMEx_MasterConfigSynchronization>
 8002130:	4602      	mov	r2, r0
 8002132:	b108      	cbz	r0, 8002138 <main+0x218>
 8002134:	b672      	cpsid	i
  while (1)
 8002136:	e7fe      	b.n	8002136 <main+0x216>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002138:	ed9f 7b27 	vldr	d7, [pc, #156]	@ 80021d8 <main+0x2b8>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800213c:	900c      	str	r0, [sp, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800213e:	900e      	str	r0, [sp, #56]	@ 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002140:	a90a      	add	r1, sp, #40	@ 0x28
 8002142:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002144:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002148:	f001 ff74 	bl	8004034 <HAL_TIM_OC_ConfigChannel>
 800214c:	4605      	mov	r5, r0
 800214e:	b108      	cbz	r0, 8002154 <main+0x234>
 8002150:	b672      	cpsid	i
  while (1)
 8002152:	e7fe      	b.n	8002152 <main+0x232>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim5, TIM_CHANNEL_1);
 8002154:	6822      	ldr	r2, [r4, #0]
 8002156:	6993      	ldr	r3, [r2, #24]
  HAL_TIM_MspPostInit(&htim5);
 8002158:	4620      	mov	r0, r4
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim5, TIM_CHANNEL_1);
 800215a:	f043 0308 	orr.w	r3, r3, #8
  htim9.Instance = TIM9;
 800215e:	4c2e      	ldr	r4, [pc, #184]	@ (8002218 <main+0x2f8>)
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim5, TIM_CHANNEL_1);
 8002160:	6193      	str	r3, [r2, #24]
  HAL_TIM_MspPostInit(&htim5);
 8002162:	f000 f991 	bl	8002488 <HAL_TIM_MspPostInit>
  htim9.Instance = TIM9;
 8002166:	4b2d      	ldr	r3, [pc, #180]	@ (800221c <main+0x2fc>)
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002168:	9510      	str	r5, [sp, #64]	@ 0x40
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800216a:	4620      	mov	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800216c:	e9cd 5506 	strd	r5, r5, [sp, #24]
 8002170:	e9cd 5508 	strd	r5, r5, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002174:	e9cd 550a 	strd	r5, r5, [sp, #40]	@ 0x28
 8002178:	e9cd 550c 	strd	r5, r5, [sp, #48]	@ 0x30
 800217c:	e9cd 550e 	strd	r5, r5, [sp, #56]	@ 0x38
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002180:	e9c4 5702 	strd	r5, r7, [r4, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002184:	61a6      	str	r6, [r4, #24]
  htim9.Init.Prescaler = 65535;
 8002186:	6067      	str	r7, [r4, #4]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002188:	6125      	str	r5, [r4, #16]
  htim9.Instance = TIM9;
 800218a:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800218c:	f001 fd82 	bl	8003c94 <HAL_TIM_Base_Init>
 8002190:	b108      	cbz	r0, 8002196 <main+0x276>
 8002192:	b672      	cpsid	i
  while (1)
 8002194:	e7fe      	b.n	8002194 <main+0x274>
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002196:	a906      	add	r1, sp, #24
 8002198:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800219a:	f8cd 8018 	str.w	r8, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800219e:	f002 f805 	bl	80041ac <HAL_TIM_ConfigClockSource>
 80021a2:	b108      	cbz	r0, 80021a8 <main+0x288>
 80021a4:	b672      	cpsid	i
  while (1)
 80021a6:	e7fe      	b.n	80021a6 <main+0x286>
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 80021a8:	481b      	ldr	r0, [pc, #108]	@ (8002218 <main+0x2f8>)
 80021aa:	f001 fe21 	bl	8003df0 <HAL_TIM_OC_Init>
 80021ae:	4602      	mov	r2, r0
 80021b0:	b108      	cbz	r0, 80021b6 <main+0x296>
 80021b2:	b672      	cpsid	i
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <main+0x294>
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021b6:	4818      	ldr	r0, [pc, #96]	@ (8002218 <main+0x2f8>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021b8:	920c      	str	r2, [sp, #48]	@ 0x30
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80021ba:	2630      	movs	r6, #48	@ 0x30
 80021bc:	2700      	movs	r7, #0
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021be:	a90a      	add	r1, sp, #40	@ 0x28
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80021c0:	e9cd 670a 	strd	r6, r7, [sp, #40]	@ 0x28
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021c4:	920e      	str	r2, [sp, #56]	@ 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021c6:	f001 ff35 	bl	8004034 <HAL_TIM_OC_ConfigChannel>
 80021ca:	4605      	mov	r5, r0
 80021cc:	b340      	cbz	r0, 8002220 <main+0x300>
 80021ce:	b672      	cpsid	i
  while (1)
 80021d0:	e7fe      	b.n	80021d0 <main+0x2b0>
 80021d2:	bf00      	nop
 80021d4:	f3af 8000 	nop.w
 80021d8:	00000030 	.word	0x00000030
 80021dc:	00000000 	.word	0x00000000
 80021e0:	08001c4d 	.word	0x08001c4d
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40020800 	.word	0x40020800
 80021ec:	40020000 	.word	0x40020000
 80021f0:	40020400 	.word	0x40020400
 80021f4:	20000a18 	.word	0x20000a18
 80021f8:	40011000 	.word	0x40011000
 80021fc:	40005400 	.word	0x40005400
 8002200:	20000b38 	.word	0x20000b38
 8002204:	00061a80 	.word	0x00061a80
 8002208:	20000a60 	.word	0x20000a60
 800220c:	40014800 	.word	0x40014800
 8002210:	20000af0 	.word	0x20000af0
 8002214:	40000c00 	.word	0x40000c00
 8002218:	20000aa8 	.word	0x20000aa8
 800221c:	40014000 	.word	0x40014000
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim9, TIM_CHANNEL_1);
 8002220:	6822      	ldr	r2, [r4, #0]
  HAL_TIM_MspPostInit(&htim9);
 8002222:	4838      	ldr	r0, [pc, #224]	@ (8002304 <main+0x3e4>)
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim9, TIM_CHANNEL_1);
 8002224:	6993      	ldr	r3, [r2, #24]
  statusCheck = AS5600_Mux_Init(&sensors, &hi2c1, 2);
 8002226:	4c38      	ldr	r4, [pc, #224]	@ (8002308 <main+0x3e8>)
 8002228:	f8df 80ec 	ldr.w	r8, [pc, #236]	@ 8002318 <main+0x3f8>
		  Trajectory_Compute(&robotTraj, (float32_t)controller_dt);
 800222c:	4f37      	ldr	r7, [pc, #220]	@ (800230c <main+0x3ec>)
		  MultivariablePID_SetSetpoint(&pidObj, q_set);
 800222e:	4e38      	ldr	r6, [pc, #224]	@ (8002310 <main+0x3f0>)
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim9, TIM_CHANNEL_1);
 8002230:	f043 0308 	orr.w	r3, r3, #8
 8002234:	6193      	str	r3, [r2, #24]
  HAL_TIM_MspPostInit(&htim9);
 8002236:	f000 f927 	bl	8002488 <HAL_TIM_MspPostInit>
  statusCheck = AS5600_Mux_Init(&sensors, &hi2c1, 2);
 800223a:	4936      	ldr	r1, [pc, #216]	@ (8002314 <main+0x3f4>)
 800223c:	4836      	ldr	r0, [pc, #216]	@ (8002318 <main+0x3f8>)
 800223e:	2202      	movs	r2, #2
 8002240:	f7ff fb14 	bl	800186c <AS5600_Mux_Init>
  statusCheck = CommandProtocol_Init(&cmdHandle, &huart1, 100);
 8002244:	4935      	ldr	r1, [pc, #212]	@ (800231c <main+0x3fc>)
  statusCheck = AS5600_Mux_Init(&sensors, &hi2c1, 2);
 8002246:	4603      	mov	r3, r0
  statusCheck = CommandProtocol_Init(&cmdHandle, &huart1, 100);
 8002248:	2264      	movs	r2, #100	@ 0x64
 800224a:	4835      	ldr	r0, [pc, #212]	@ (8002320 <main+0x400>)
  statusCheck = AS5600_Mux_Init(&sensors, &hi2c1, 2);
 800224c:	7023      	strb	r3, [r4, #0]
  statusCheck = CommandProtocol_Init(&cmdHandle, &huart1, 100);
 800224e:	f7ff fbf9 	bl	8001a44 <CommandProtocol_Init>
 8002252:	7020      	strb	r0, [r4, #0]
  setup_motors();
 8002254:	f7ff fe24 	bl	8001ea0 <setup_motors>
  MultivariablePID_Init(&pidObj);
 8002258:	4832      	ldr	r0, [pc, #200]	@ (8002324 <main+0x404>)
 800225a:	4c32      	ldr	r4, [pc, #200]	@ (8002324 <main+0x404>)
 800225c:	f7fe fee8 	bl	8001030 <MultivariablePID_Init>
  Trajectory_Init(&robotTraj);
 8002260:	482a      	ldr	r0, [pc, #168]	@ (800230c <main+0x3ec>)
 8002262:	f7ff f8a7 	bl	80013b4 <Trajectory_Init>
  HAL_TIM_Base_Start_IT(&htim11); // Start controller timer
 8002266:	4830      	ldr	r0, [pc, #192]	@ (8002328 <main+0x408>)
  volatile uint32_t lastTime = 0; uint32_t interval = 4;
 8002268:	950a      	str	r5, [sp, #40]	@ 0x28
  HAL_TIM_Base_Start_IT(&htim11); // Start controller timer
 800226a:	f001 fd8d 	bl	8003d88 <HAL_TIM_Base_Start_IT>
 800226e:	4d2f      	ldr	r5, [pc, #188]	@ (800232c <main+0x40c>)
 8002270:	e005      	b.n	800227e <main+0x35e>
	  if (HAL_GetTick() - lastTime > interval)
 8002272:	f000 fa95 	bl	80027a0 <HAL_GetTick>
 8002276:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002278:	1ac3      	subs	r3, r0, r3
 800227a:	2b04      	cmp	r3, #4
 800227c:	d828      	bhi.n	80022d0 <main+0x3b0>
	  if(globalControllerFlag)
 800227e:	782b      	ldrb	r3, [r5, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f6      	beq.n	8002272 <main+0x352>
		  globalControllerFlag = 0;
 8002284:	2300      	movs	r3, #0
 8002286:	702b      	strb	r3, [r5, #0]
		  float controller_dt = DWT_GetDeltaTime();
 8002288:	f7ff fcc8 	bl	8001c1c <DWT_GetDeltaTime>
		  Trajectory_Compute(&robotTraj, (float32_t)controller_dt);
 800228c:	4638      	mov	r0, r7
		  pidObj.dt = (float32_t)controller_dt;
 800228e:	ed84 0a6c 	vstr	s0, [r4, #432]	@ 0x1b0
		  Trajectory_Compute(&robotTraj, (float32_t)controller_dt);
 8002292:	f7ff f981 	bl	8001598 <Trajectory_Compute>
		  MultivariablePID_SetSetpoint(&pidObj, q_set);
 8002296:	4631      	mov	r1, r6
 8002298:	4620      	mov	r0, r4
 800229a:	f7fe ff5d 	bl	8001158 <MultivariablePID_SetSetpoint>
		  MultivariablePID_Compute(&pidObj, q_meas);
 800229e:	4620      	mov	r0, r4
 80022a0:	4923      	ldr	r1, [pc, #140]	@ (8002330 <main+0x410>)
 80022a2:	f7fe ffaf 	bl	8001204 <MultivariablePID_Compute>
		  StepMotor_SetSpeedLUT(&l1_motor, pidObj.output_data[0]);
 80022a6:	edd4 7a3e 	vldr	s15, [r4, #248]	@ 0xf8
 80022aa:	4822      	ldr	r0, [pc, #136]	@ (8002334 <main+0x414>)
 80022ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022b0:	ee17 3a90 	vmov	r3, s15
 80022b4:	b219      	sxth	r1, r3
 80022b6:	f7ff fc2f 	bl	8001b18 <StepMotor_SetSpeedLUT>
		  StepMotor_SetSpeedLUT(&l2_motor, pidObj.output_data[1]);
 80022ba:	edd4 7a3f 	vldr	s15, [r4, #252]	@ 0xfc
 80022be:	481e      	ldr	r0, [pc, #120]	@ (8002338 <main+0x418>)
 80022c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c4:	ee17 3a90 	vmov	r3, s15
 80022c8:	b219      	sxth	r1, r3
 80022ca:	f7ff fc25 	bl	8001b18 <StepMotor_SetSpeedLUT>
 80022ce:	e7d0      	b.n	8002272 <main+0x352>
		  AS5600_Mux_ReadAllAngles(&sensors);
 80022d0:	4811      	ldr	r0, [pc, #68]	@ (8002318 <main+0x3f8>)
 80022d2:	f7ff fb51 	bl	8001978 <AS5600_Mux_ReadAllAngles>
		  for (uint8_t i = 0; i < sensors.num_sensors; i++) {
 80022d6:	4919      	ldr	r1, [pc, #100]	@ (800233c <main+0x41c>)
 80022d8:	4a15      	ldr	r2, [pc, #84]	@ (8002330 <main+0x410>)
 80022da:	f898 0004 	ldrb.w	r0, [r8, #4]
 80022de:	2300      	movs	r3, #0
 80022e0:	fa5f fc83 	uxtb.w	ip, r3
 80022e4:	4560      	cmp	r0, ip
 80022e6:	d909      	bls.n	80022fc <main+0x3dc>
			  q_meas[i] = sensors.angles[i];
 80022e8:	f831 cf02 	ldrh.w	ip, [r1, #2]!
 80022ec:	ee07 ca90 	vmov	s15, ip
 80022f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022f4:	3301      	adds	r3, #1
 80022f6:	ece2 7a01 	vstmia	r2!, {s15}
		  for (uint8_t i = 0; i < sensors.num_sensors; i++) {
 80022fa:	e7f1      	b.n	80022e0 <main+0x3c0>
		  lastTime = HAL_GetTick();
 80022fc:	f000 fa50 	bl	80027a0 <HAL_GetTick>
 8002300:	900a      	str	r0, [sp, #40]	@ 0x28
 8002302:	e7bc      	b.n	800227e <main+0x35e>
 8002304:	20000aa8 	.word	0x20000aa8
 8002308:	20000a14 	.word	0x20000a14
 800230c:	2000021c 	.word	0x2000021c
 8002310:	20000010 	.word	0x20000010
 8002314:	20000b38 	.word	0x20000b38
 8002318:	20000600 	.word	0x20000600
 800231c:	20000a18 	.word	0x20000a18
 8002320:	20000620 	.word	0x20000620
 8002324:	20000404 	.word	0x20000404
 8002328:	20000a60 	.word	0x20000a60
 800232c:	20000a15 	.word	0x20000a15
 8002330:	20000000 	.word	0x20000000
 8002334:	200005e4 	.word	0x200005e4
 8002338:	200005c8 	.word	0x200005c8
 800233c:	20000604 	.word	0x20000604

08002340 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002340:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002342:	4b0c      	ldr	r3, [pc, #48]	@ (8002374 <HAL_MspInit+0x34>)
 8002344:	2100      	movs	r1, #0
 8002346:	9100      	str	r1, [sp, #0]
 8002348:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800234a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800234e:	645a      	str	r2, [r3, #68]	@ 0x44
 8002350:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002352:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8002356:	9200      	str	r2, [sp, #0]
 8002358:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800235a:	9101      	str	r1, [sp, #4]
 800235c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800235e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002362:	641a      	str	r2, [r3, #64]	@ 0x40
 8002364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800236a:	9301      	str	r3, [sp, #4]
 800236c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800236e:	b002      	add	sp, #8
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40023800 	.word	0x40023800

08002378 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002378:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 800237a:	4b19      	ldr	r3, [pc, #100]	@ (80023e0 <HAL_I2C_MspInit+0x68>)
 800237c:	6802      	ldr	r2, [r0, #0]
{
 800237e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 8002382:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002384:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002388:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800238c:	9406      	str	r4, [sp, #24]
  if(hi2c->Instance==I2C1)
 800238e:	d001      	beq.n	8002394 <HAL_I2C_MspInit+0x1c>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002390:	b009      	add	sp, #36	@ 0x24
 8002392:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002394:	4d13      	ldr	r5, [pc, #76]	@ (80023e4 <HAL_I2C_MspInit+0x6c>)
 8002396:	9400      	str	r4, [sp, #0]
 8002398:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239a:	4813      	ldr	r0, [pc, #76]	@ (80023e8 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239c:	f043 0302 	orr.w	r3, r3, #2
 80023a0:	632b      	str	r3, [r5, #48]	@ 0x30
 80023a2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023aa:	22c0      	movs	r2, #192	@ 0xc0
 80023ac:	2312      	movs	r3, #18
 80023ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80023b2:	2201      	movs	r2, #1
 80023b4:	2303      	movs	r3, #3
 80023b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ba:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023bc:	2304      	movs	r3, #4
 80023be:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c0:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c2:	f000 fac5 	bl	8002950 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023c6:	9401      	str	r4, [sp, #4]
 80023c8:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80023ca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023ce:	642b      	str	r3, [r5, #64]	@ 0x40
 80023d0:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80023d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023d6:	9301      	str	r3, [sp, #4]
 80023d8:	9b01      	ldr	r3, [sp, #4]
}
 80023da:	b009      	add	sp, #36	@ 0x24
 80023dc:	bd30      	pop	{r4, r5, pc}
 80023de:	bf00      	nop
 80023e0:	40005400 	.word	0x40005400
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40020400 	.word	0x40020400

080023ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023ec:	b500      	push	{lr}
  if(htim_base->Instance==TIM5)
 80023ee:	4a21      	ldr	r2, [pc, #132]	@ (8002474 <HAL_TIM_Base_MspInit+0x88>)
 80023f0:	6803      	ldr	r3, [r0, #0]
 80023f2:	4293      	cmp	r3, r2
{
 80023f4:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM5)
 80023f6:	d017      	beq.n	8002428 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM9)
 80023f8:	4a1f      	ldr	r2, [pc, #124]	@ (8002478 <HAL_TIM_Base_MspInit+0x8c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d005      	beq.n	800240a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
  else if(htim_base->Instance==TIM11)
 80023fe:	4a1f      	ldr	r2, [pc, #124]	@ (800247c <HAL_TIM_Base_MspInit+0x90>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d020      	beq.n	8002446 <HAL_TIM_Base_MspInit+0x5a>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002404:	b005      	add	sp, #20
 8002406:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM9_CLK_ENABLE();
 800240a:	4b1d      	ldr	r3, [pc, #116]	@ (8002480 <HAL_TIM_Base_MspInit+0x94>)
 800240c:	2200      	movs	r2, #0
 800240e:	9202      	str	r2, [sp, #8]
 8002410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002412:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002416:	645a      	str	r2, [r3, #68]	@ 0x44
 8002418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800241a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800241e:	9302      	str	r3, [sp, #8]
 8002420:	9b02      	ldr	r3, [sp, #8]
}
 8002422:	b005      	add	sp, #20
 8002424:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002428:	4b15      	ldr	r3, [pc, #84]	@ (8002480 <HAL_TIM_Base_MspInit+0x94>)
 800242a:	2200      	movs	r2, #0
 800242c:	9201      	str	r2, [sp, #4]
 800242e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002430:	f042 0208 	orr.w	r2, r2, #8
 8002434:	641a      	str	r2, [r3, #64]	@ 0x40
 8002436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	9301      	str	r3, [sp, #4]
 800243e:	9b01      	ldr	r3, [sp, #4]
}
 8002440:	b005      	add	sp, #20
 8002442:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002446:	2200      	movs	r2, #0
 8002448:	4b0d      	ldr	r3, [pc, #52]	@ (8002480 <HAL_TIM_Base_MspInit+0x94>)
 800244a:	9203      	str	r2, [sp, #12]
 800244c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800244e:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
 8002452:	6459      	str	r1, [r3, #68]	@ 0x44
 8002454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002456:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800245a:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800245c:	4611      	mov	r1, r2
 800245e:	201a      	movs	r0, #26
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002460:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002462:	f000 f9b5 	bl	80027d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002466:	201a      	movs	r0, #26
}
 8002468:	b005      	add	sp, #20
 800246a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800246e:	f000 b9eb 	b.w	8002848 <HAL_NVIC_EnableIRQ>
 8002472:	bf00      	nop
 8002474:	40000c00 	.word	0x40000c00
 8002478:	40014000 	.word	0x40014000
 800247c:	40014800 	.word	0x40014800
 8002480:	40023800 	.word	0x40023800
 8002484:	00000000 	.word	0x00000000

08002488 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002488:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM5)
 800248a:	6802      	ldr	r2, [r0, #0]
 800248c:	4922      	ldr	r1, [pc, #136]	@ (8002518 <HAL_TIM_MspPostInit+0x90>)
{
 800248e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002490:	2300      	movs	r3, #0
  if(htim->Instance==TIM5)
 8002492:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002498:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800249c:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM5)
 800249e:	d004      	beq.n	80024aa <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(htim->Instance==TIM9)
 80024a0:	491e      	ldr	r1, [pc, #120]	@ (800251c <HAL_TIM_MspPostInit+0x94>)
 80024a2:	428a      	cmp	r2, r1
 80024a4:	d018      	beq.n	80024d8 <HAL_TIM_MspPostInit+0x50>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80024a6:	b009      	add	sp, #36	@ 0x24
 80024a8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002520 <HAL_TIM_MspPostInit+0x98>)
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b0:	481c      	ldr	r0, [pc, #112]	@ (8002524 <HAL_TIM_MspPostInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b2:	f043 0301 	orr.w	r3, r3, #1
 80024b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80024b8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024ba:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8002510 <HAL_TIM_MspPostInit+0x88>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80024c6:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80024c8:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024cc:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80024ce:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d0:	f000 fa3e 	bl	8002950 <HAL_GPIO_Init>
}
 80024d4:	b009      	add	sp, #36	@ 0x24
 80024d6:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d8:	4a11      	ldr	r2, [pc, #68]	@ (8002520 <HAL_TIM_MspPostInit+0x98>)
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	6b11      	ldr	r1, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024de:	4811      	ldr	r0, [pc, #68]	@ (8002524 <HAL_TIM_MspPostInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e0:	f041 0101 	orr.w	r1, r1, #1
 80024e4:	6311      	str	r1, [r2, #48]	@ 0x30
 80024e6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80024e8:	f002 0201 	and.w	r2, r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ec:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024f0:	2404      	movs	r4, #4
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80024f2:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f6:	e9cd 4302 	strd	r4, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024fa:	e9cd 3304 	strd	r3, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fe:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002500:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002502:	f000 fa25 	bl	8002950 <HAL_GPIO_Init>
}
 8002506:	b009      	add	sp, #36	@ 0x24
 8002508:	bd30      	pop	{r4, r5, pc}
 800250a:	bf00      	nop
 800250c:	f3af 8000 	nop.w
 8002510:	00000001 	.word	0x00000001
 8002514:	00000002 	.word	0x00000002
 8002518:	40000c00 	.word	0x40000c00
 800251c:	40014000 	.word	0x40014000
 8002520:	40023800 	.word	0x40023800
 8002524:	40020000 	.word	0x40020000

08002528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002528:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 800252a:	4b1f      	ldr	r3, [pc, #124]	@ (80025a8 <HAL_UART_MspInit+0x80>)
 800252c:	6802      	ldr	r2, [r0, #0]
{
 800252e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002530:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8002532:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002538:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800253c:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART1)
 800253e:	d001      	beq.n	8002544 <HAL_UART_MspInit+0x1c>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002540:	b009      	add	sp, #36	@ 0x24
 8002542:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002544:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8002548:	9400      	str	r4, [sp, #0]
 800254a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800254c:	4817      	ldr	r0, [pc, #92]	@ (80025ac <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800254e:	f042 0210 	orr.w	r2, r2, #16
 8002552:	645a      	str	r2, [r3, #68]	@ 0x44
 8002554:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002556:	f002 0210 	and.w	r2, r2, #16
 800255a:	9200      	str	r2, [sp, #0]
 800255c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255e:	9401      	str	r4, [sp, #4]
 8002560:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002562:	f042 0201 	orr.w	r2, r2, #1
 8002566:	631a      	str	r2, [r3, #48]	@ 0x30
 8002568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800256a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 80025a0 <HAL_UART_MspInit+0x78>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002574:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002576:	2307      	movs	r3, #7
 8002578:	2203      	movs	r2, #3
 800257a:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800257e:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002582:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002584:	f000 f9e4 	bl	8002950 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002588:	4622      	mov	r2, r4
 800258a:	4621      	mov	r1, r4
 800258c:	2025      	movs	r0, #37	@ 0x25
 800258e:	f000 f91f 	bl	80027d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002592:	2025      	movs	r0, #37	@ 0x25
 8002594:	f000 f958 	bl	8002848 <HAL_NVIC_EnableIRQ>
}
 8002598:	b009      	add	sp, #36	@ 0x24
 800259a:	bd30      	pop	{r4, r5, pc}
 800259c:	f3af 8000 	nop.w
 80025a0:	00000600 	.word	0x00000600
 80025a4:	00000002 	.word	0x00000002
 80025a8:	40011000 	.word	0x40011000
 80025ac:	40020000 	.word	0x40020000

080025b0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025b0:	e7fe      	b.n	80025b0 <NMI_Handler>
 80025b2:	bf00      	nop

080025b4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025b4:	e7fe      	b.n	80025b4 <HardFault_Handler>
 80025b6:	bf00      	nop

080025b8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025b8:	e7fe      	b.n	80025b8 <MemManage_Handler>
 80025ba:	bf00      	nop

080025bc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025bc:	e7fe      	b.n	80025bc <BusFault_Handler>
 80025be:	bf00      	nop

080025c0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025c0:	e7fe      	b.n	80025c0 <UsageFault_Handler>
 80025c2:	bf00      	nop

080025c4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop

080025c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop

080025cc <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop

080025d0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025d0:	f000 b8da 	b.w	8002788 <HAL_IncTick>

080025d4 <TIM1_TRG_COM_TIM11_IRQHandler>:
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80025d4:	4801      	ldr	r0, [pc, #4]	@ (80025dc <TIM1_TRG_COM_TIM11_IRQHandler+0x8>)
 80025d6:	f001 be9b 	b.w	8004310 <HAL_TIM_IRQHandler>
 80025da:	bf00      	nop
 80025dc:	20000a60 	.word	0x20000a60

080025e0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025e0:	4801      	ldr	r0, [pc, #4]	@ (80025e8 <USART1_IRQHandler+0x8>)
 80025e2:	f002 b919 	b.w	8004818 <HAL_UART_IRQHandler>
 80025e6:	bf00      	nop
 80025e8:	20000a18 	.word	0x20000a18

080025ec <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80025ec:	2001      	movs	r0, #1
 80025ee:	4770      	bx	lr

080025f0 <_kill>:

int _kill(int pid, int sig)
{
 80025f0:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025f2:	f004 fbbd 	bl	8006d70 <__errno>
 80025f6:	2316      	movs	r3, #22
 80025f8:	6003      	str	r3, [r0, #0]
  return -1;
}
 80025fa:	f04f 30ff 	mov.w	r0, #4294967295
 80025fe:	bd08      	pop	{r3, pc}

08002600 <_exit>:

void _exit (int status)
{
 8002600:	b508      	push	{r3, lr}
  errno = EINVAL;
 8002602:	f004 fbb5 	bl	8006d70 <__errno>
 8002606:	2316      	movs	r3, #22
 8002608:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800260a:	e7fe      	b.n	800260a <_exit+0xa>

0800260c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800260c:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260e:	1e16      	subs	r6, r2, #0
 8002610:	dd07      	ble.n	8002622 <_read+0x16>
 8002612:	460c      	mov	r4, r1
 8002614:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8002616:	f3af 8000 	nop.w
 800261a:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800261e:	42a5      	cmp	r5, r4
 8002620:	d1f9      	bne.n	8002616 <_read+0xa>
  }

  return len;
}
 8002622:	4630      	mov	r0, r6
 8002624:	bd70      	pop	{r4, r5, r6, pc}
 8002626:	bf00      	nop

08002628 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002628:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262a:	1e16      	subs	r6, r2, #0
 800262c:	dd07      	ble.n	800263e <_write+0x16>
 800262e:	460c      	mov	r4, r1
 8002630:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8002632:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002636:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800263a:	42a5      	cmp	r5, r4
 800263c:	d1f9      	bne.n	8002632 <_write+0xa>
  }
  return len;
}
 800263e:	4630      	mov	r0, r6
 8002640:	bd70      	pop	{r4, r5, r6, pc}
 8002642:	bf00      	nop

08002644 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop

0800264c <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800264c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002650:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002652:	2000      	movs	r0, #0
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop

08002658 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002658:	2001      	movs	r0, #1
 800265a:	4770      	bx	lr

0800265c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800265c:	2000      	movs	r0, #0
 800265e:	4770      	bx	lr

08002660 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002660:	490c      	ldr	r1, [pc, #48]	@ (8002694 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002662:	4a0d      	ldr	r2, [pc, #52]	@ (8002698 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8002664:	680b      	ldr	r3, [r1, #0]
{
 8002666:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002668:	4c0c      	ldr	r4, [pc, #48]	@ (800269c <_sbrk+0x3c>)
 800266a:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800266c:	b12b      	cbz	r3, 800267a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800266e:	4418      	add	r0, r3
 8002670:	4290      	cmp	r0, r2
 8002672:	d807      	bhi.n	8002684 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002674:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8002676:	4618      	mov	r0, r3
 8002678:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800267a:	4b09      	ldr	r3, [pc, #36]	@ (80026a0 <_sbrk+0x40>)
 800267c:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800267e:	4418      	add	r0, r3
 8002680:	4290      	cmp	r0, r2
 8002682:	d9f7      	bls.n	8002674 <_sbrk+0x14>
    errno = ENOMEM;
 8002684:	f004 fb74 	bl	8006d70 <__errno>
 8002688:	230c      	movs	r3, #12
 800268a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800268c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002690:	4618      	mov	r0, r3
 8002692:	bd10      	pop	{r4, pc}
 8002694:	20000b8c 	.word	0x20000b8c
 8002698:	20020000 	.word	0x20020000
 800269c:	00000400 	.word	0x00000400
 80026a0:	20000ce0 	.word	0x20000ce0

080026a4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026a4:	4a03      	ldr	r2, [pc, #12]	@ (80026b4 <SystemInit+0x10>)
 80026a6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80026aa:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026ae:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026b2:	4770      	bx	lr
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80026b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026bc:	f7ff fff2 	bl	80026a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026c0:	480c      	ldr	r0, [pc, #48]	@ (80026f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026c2:	490d      	ldr	r1, [pc, #52]	@ (80026f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026c4:	4a0d      	ldr	r2, [pc, #52]	@ (80026fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c8:	e002      	b.n	80026d0 <LoopCopyDataInit>

080026ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ce:	3304      	adds	r3, #4

080026d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d4:	d3f9      	bcc.n	80026ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002700 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002704 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026dc:	e001      	b.n	80026e2 <LoopFillZerobss>

080026de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e0:	3204      	adds	r2, #4

080026e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e4:	d3fb      	bcc.n	80026de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026e6:	f004 fb49 	bl	8006d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026ea:	f7ff fc19 	bl	8001f20 <main>
  bx  lr    
 80026ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80026f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80026fc:	0800ebf4 	.word	0x0800ebf4
  ldr r2, =_sbss
 8002700:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002704:	20000ce0 	.word	0x20000ce0

08002708 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002708:	e7fe      	b.n	8002708 <ADC_IRQHandler>
	...

0800270c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800270c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800270e:	4a0e      	ldr	r2, [pc, #56]	@ (8002748 <HAL_InitTick+0x3c>)
 8002710:	4b0e      	ldr	r3, [pc, #56]	@ (800274c <HAL_InitTick+0x40>)
 8002712:	7812      	ldrb	r2, [r2, #0]
{
 8002714:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800271c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002720:	fbb0 f0f3 	udiv	r0, r0, r3
 8002724:	f000 f89e 	bl	8002864 <HAL_SYSTICK_Config>
 8002728:	b908      	cbnz	r0, 800272e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800272a:	2d0f      	cmp	r5, #15
 800272c:	d901      	bls.n	8002732 <HAL_InitTick+0x26>
    return HAL_ERROR;
 800272e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002730:	bd38      	pop	{r3, r4, r5, pc}
 8002732:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002734:	4602      	mov	r2, r0
 8002736:	4629      	mov	r1, r5
 8002738:	f04f 30ff 	mov.w	r0, #4294967295
 800273c:	f000 f848 	bl	80027d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002740:	4b03      	ldr	r3, [pc, #12]	@ (8002750 <HAL_InitTick+0x44>)
 8002742:	4620      	mov	r0, r4
 8002744:	601d      	str	r5, [r3, #0]
}
 8002746:	bd38      	pop	{r3, r4, r5, pc}
 8002748:	20000024 	.word	0x20000024
 800274c:	20000020 	.word	0x20000020
 8002750:	20000028 	.word	0x20000028

08002754 <HAL_Init>:
{
 8002754:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002756:	4b0b      	ldr	r3, [pc, #44]	@ (8002784 <HAL_Init+0x30>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800275e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002766:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800276e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002770:	2003      	movs	r0, #3
 8002772:	f000 f81b 	bl	80027ac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002776:	200f      	movs	r0, #15
 8002778:	f7ff ffc8 	bl	800270c <HAL_InitTick>
  HAL_MspInit();
 800277c:	f7ff fde0 	bl	8002340 <HAL_MspInit>
}
 8002780:	2000      	movs	r0, #0
 8002782:	bd08      	pop	{r3, pc}
 8002784:	40023c00 	.word	0x40023c00

08002788 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002788:	4a03      	ldr	r2, [pc, #12]	@ (8002798 <HAL_IncTick+0x10>)
 800278a:	4b04      	ldr	r3, [pc, #16]	@ (800279c <HAL_IncTick+0x14>)
 800278c:	6811      	ldr	r1, [r2, #0]
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	440b      	add	r3, r1
 8002792:	6013      	str	r3, [r2, #0]
}
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	20000b90 	.word	0x20000b90
 800279c:	20000024 	.word	0x20000024

080027a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80027a0:	4b01      	ldr	r3, [pc, #4]	@ (80027a8 <HAL_GetTick+0x8>)
 80027a2:	6818      	ldr	r0, [r3, #0]
}
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	20000b90 	.word	0x20000b90

080027ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027ac:	4907      	ldr	r1, [pc, #28]	@ (80027cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80027ae:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b2:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027b6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ba:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027bc:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027be:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80027c6:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002840 <HAL_NVIC_SetPriority+0x70>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027d8:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027da:	f1c3 0e07 	rsb	lr, r3, #7
 80027de:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027e2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e6:	bf28      	it	cs
 80027e8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027ec:	f1bc 0f06 	cmp.w	ip, #6
 80027f0:	d91c      	bls.n	800282c <HAL_NVIC_SetPriority+0x5c>
 80027f2:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f6:	f04f 33ff 	mov.w	r3, #4294967295
 80027fa:	fa03 f30c 	lsl.w	r3, r3, ip
 80027fe:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002802:	f04f 33ff 	mov.w	r3, #4294967295
 8002806:	fa03 f30e 	lsl.w	r3, r3, lr
 800280a:	ea21 0303 	bic.w	r3, r1, r3
 800280e:	fa03 f30c 	lsl.w	r3, r3, ip
 8002812:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002814:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8002816:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002818:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800281a:	db0a      	blt.n	8002832 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002820:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002824:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002828:	f85d fb04 	ldr.w	pc, [sp], #4
 800282c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282e:	4694      	mov	ip, r2
 8002830:	e7e7      	b.n	8002802 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002832:	4a04      	ldr	r2, [pc, #16]	@ (8002844 <HAL_NVIC_SetPriority+0x74>)
 8002834:	f000 000f 	and.w	r0, r0, #15
 8002838:	4402      	add	r2, r0
 800283a:	7613      	strb	r3, [r2, #24]
 800283c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002840:	e000ed00 	.word	0xe000ed00
 8002844:	e000ecfc 	.word	0xe000ecfc

08002848 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002848:	2800      	cmp	r0, #0
 800284a:	db07      	blt.n	800285c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800284c:	4a04      	ldr	r2, [pc, #16]	@ (8002860 <HAL_NVIC_EnableIRQ+0x18>)
 800284e:	0941      	lsrs	r1, r0, #5
 8002850:	2301      	movs	r3, #1
 8002852:	f000 001f 	and.w	r0, r0, #31
 8002856:	4083      	lsls	r3, r0
 8002858:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000e100 	.word	0xe000e100

08002864 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002864:	3801      	subs	r0, #1
 8002866:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800286a:	d301      	bcc.n	8002870 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 800286c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800286e:	4770      	bx	lr
{
 8002870:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002872:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002876:	4c07      	ldr	r4, [pc, #28]	@ (8002894 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002878:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287a:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 800287e:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002882:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002884:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002886:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002888:	619a      	str	r2, [r3, #24]
}
 800288a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800288e:	6119      	str	r1, [r3, #16]
 8002890:	4770      	bx	lr
 8002892:	bf00      	nop
 8002894:	e000ed00 	.word	0xe000ed00

08002898 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002898:	b570      	push	{r4, r5, r6, lr}
 800289a:	4604      	mov	r4, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800289c:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  
  uint32_t tickstart = HAL_GetTick();
 800289e:	f7ff ff7f 	bl	80027a0 <HAL_GetTick>
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028a2:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d006      	beq.n	80028b8 <HAL_DMA_Abort+0x20>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028aa:	2380      	movs	r3, #128	@ 0x80
 80028ac:	6563      	str	r3, [r4, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028ae:	2300      	movs	r3, #0
 80028b0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    
    return HAL_ERROR;
 80028b4:	2001      	movs	r0, #1
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }
  return HAL_OK;
}
 80028b6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028b8:	6823      	ldr	r3, [r4, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	f022 0216 	bic.w	r2, r2, #22
 80028c0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028c2:	695a      	ldr	r2, [r3, #20]
 80028c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028c8:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028ca:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80028cc:	4605      	mov	r5, r0
 80028ce:	b342      	cbz	r2, 8002922 <HAL_DMA_Abort+0x8a>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	f022 0208 	bic.w	r2, r2, #8
 80028d6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028e0:	e005      	b.n	80028ee <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028e2:	f7ff ff5d 	bl	80027a0 <HAL_GetTick>
 80028e6:	1b43      	subs	r3, r0, r5
 80028e8:	2b05      	cmp	r3, #5
 80028ea:	d810      	bhi.n	800290e <HAL_DMA_Abort+0x76>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f013 0301 	ands.w	r3, r3, #1
 80028f4:	d1f5      	bne.n	80028e2 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f6:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80028f8:	223f      	movs	r2, #63	@ 0x3f
 80028fa:	408a      	lsls	r2, r1
  return HAL_OK;
 80028fc:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 80028fe:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 8002900:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002902:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8002904:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8002908:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 800290c:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800290e:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002910:	2220      	movs	r2, #32
 8002912:	6562      	str	r2, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002914:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002916:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 800291a:	2300      	movs	r3, #0
 800291c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8002920:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002922:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002924:	2a00      	cmp	r2, #0
 8002926:	d1d3      	bne.n	80028d0 <HAL_DMA_Abort+0x38>
 8002928:	e7d6      	b.n	80028d8 <HAL_DMA_Abort+0x40>
 800292a:	bf00      	nop

0800292c <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800292c:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8002930:	2b02      	cmp	r3, #2
 8002932:	d003      	beq.n	800293c <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002934:	2380      	movs	r3, #128	@ 0x80
 8002936:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8002938:	2001      	movs	r0, #1
 800293a:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800293c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800293e:	2305      	movs	r3, #5
 8002940:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8002944:	6813      	ldr	r3, [r2, #0]
 8002946:	f023 0301 	bic.w	r3, r3, #1
  }

  return HAL_OK;
 800294a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800294c:	6013      	str	r3, [r2, #0]
}
 800294e:	4770      	bx	lr

08002950 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002954:	4bc0      	ldr	r3, [pc, #768]	@ (8002c58 <HAL_GPIO_Init+0x308>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002956:	680a      	ldr	r2, [r1, #0]
 8002958:	4298      	cmp	r0, r3
{
 800295a:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 800295c:	f04f 0300 	mov.w	r3, #0
    ioposition = 0x01U << position;
 8002960:	f04f 0b01 	mov.w	fp, #1
 8002964:	f000 80c4 	beq.w	8002af0 <HAL_GPIO_Init+0x1a0>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002968:	f8df a2fc 	ldr.w	sl, [pc, #764]	@ 8002c68 <HAL_GPIO_Init+0x318>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800296c:	4689      	mov	r9, r1
 800296e:	e002      	b.n	8002976 <HAL_GPIO_Init+0x26>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002970:	3301      	adds	r3, #1
 8002972:	2b10      	cmp	r3, #16
 8002974:	d07b      	beq.n	8002a6e <HAL_GPIO_Init+0x11e>
    ioposition = 0x01U << position;
 8002976:	fa0b f103 	lsl.w	r1, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800297a:	ea01 0802 	and.w	r8, r1, r2
    if(iocurrent == ioposition)
 800297e:	4391      	bics	r1, r2
 8002980:	d1f6      	bne.n	8002970 <HAL_GPIO_Init+0x20>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002982:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8002986:	f004 0c03 	and.w	ip, r4, #3
 800298a:	0059      	lsls	r1, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800298c:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800298e:	f10c 36ff 	add.w	r6, ip, #4294967295
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002992:	408d      	lsls	r5, r1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002994:	2e01      	cmp	r6, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002996:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800299a:	d96b      	bls.n	8002a74 <HAL_GPIO_Init+0x124>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800299c:	f1bc 0f03 	cmp.w	ip, #3
 80029a0:	f040 8174 	bne.w	8002c8c <HAL_GPIO_Init+0x33c>
      temp = GPIOx->MODER;
 80029a4:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029a6:	fa0c f101 	lsl.w	r1, ip, r1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029aa:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029ac:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029ae:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80029b2:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029b4:	d0dc      	beq.n	8002970 <HAL_GPIO_Init+0x20>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b6:	2100      	movs	r1, #0
 80029b8:	9103      	str	r1, [sp, #12]
 80029ba:	f8da 1044 	ldr.w	r1, [sl, #68]	@ 0x44
 80029be:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80029c2:	f8ca 1044 	str.w	r1, [sl, #68]	@ 0x44
 80029c6:	f8da 1044 	ldr.w	r1, [sl, #68]	@ 0x44
 80029ca:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80029ce:	9103      	str	r1, [sp, #12]
 80029d0:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80029d2:	f023 0103 	bic.w	r1, r3, #3
 80029d6:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029da:	f003 0603 	and.w	r6, r3, #3
 80029de:	270f      	movs	r7, #15
 80029e0:	f501 319c 	add.w	r1, r1, #79872	@ 0x13800
 80029e4:	00b6      	lsls	r6, r6, #2
 80029e6:	fa07 fc06 	lsl.w	ip, r7, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ea:	4f9c      	ldr	r7, [pc, #624]	@ (8002c5c <HAL_GPIO_Init+0x30c>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80029ec:	688d      	ldr	r5, [r1, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029ee:	42b8      	cmp	r0, r7
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029f0:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80029f4:	d076      	beq.n	8002ae4 <HAL_GPIO_Init+0x194>
 80029f6:	4f9a      	ldr	r7, [pc, #616]	@ (8002c60 <HAL_GPIO_Init+0x310>)
 80029f8:	42b8      	cmp	r0, r7
 80029fa:	f000 813b 	beq.w	8002c74 <HAL_GPIO_Init+0x324>
 80029fe:	f8df c26c 	ldr.w	ip, [pc, #620]	@ 8002c6c <HAL_GPIO_Init+0x31c>
 8002a02:	4560      	cmp	r0, ip
 8002a04:	f000 813c 	beq.w	8002c80 <HAL_GPIO_Init+0x330>
 8002a08:	f8df c264 	ldr.w	ip, [pc, #612]	@ 8002c70 <HAL_GPIO_Init+0x320>
 8002a0c:	4560      	cmp	r0, ip
 8002a0e:	bf0c      	ite	eq
 8002a10:	f04f 0c04 	moveq.w	ip, #4
 8002a14:	f04f 0c07 	movne.w	ip, #7
 8002a18:	fa0c f606 	lsl.w	r6, ip, r6
 8002a1c:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a1e:	608d      	str	r5, [r1, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a20:	4990      	ldr	r1, [pc, #576]	@ (8002c64 <HAL_GPIO_Init+0x314>)
 8002a22:	6889      	ldr	r1, [r1, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a24:	02e6      	lsls	r6, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8002a26:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8002a2a:	4e8e      	ldr	r6, [pc, #568]	@ (8002c64 <HAL_GPIO_Init+0x314>)
        temp &= ~((uint32_t)iocurrent);
 8002a2c:	bf54      	ite	pl
 8002a2e:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8002a30:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->RTSR = temp;
 8002a34:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8002a36:	68f1      	ldr	r1, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8002a38:	4e8a      	ldr	r6, [pc, #552]	@ (8002c64 <HAL_GPIO_Init+0x314>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a3a:	02a7      	lsls	r7, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8002a3c:	bf54      	ite	pl
 8002a3e:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8002a40:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->FTSR = temp;
 8002a44:	60f1      	str	r1, [r6, #12]

        temp = EXTI->EMR;
 8002a46:	6871      	ldr	r1, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a48:	03a6      	lsls	r6, r4, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8002a4a:	4e86      	ldr	r6, [pc, #536]	@ (8002c64 <HAL_GPIO_Init+0x314>)
        temp &= ~((uint32_t)iocurrent);
 8002a4c:	bf54      	ite	pl
 8002a4e:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8002a50:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->EMR = temp;
 8002a54:	6071      	str	r1, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a56:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a58:	03e4      	lsls	r4, r4, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a5a:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8002a5e:	4c81      	ldr	r4, [pc, #516]	@ (8002c64 <HAL_GPIO_Init+0x314>)
        temp &= ~((uint32_t)iocurrent);
 8002a60:	bf54      	ite	pl
 8002a62:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8002a64:	ea48 0101 	orrmi.w	r1, r8, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a68:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 8002a6a:	6021      	str	r1, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6c:	d183      	bne.n	8002976 <HAL_GPIO_Init+0x26>
      }
    }
  }
}
 8002a6e:	b005      	add	sp, #20
 8002a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8002a74:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a76:	ea06 0e05 	and.w	lr, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a7a:	f8d9 600c 	ldr.w	r6, [r9, #12]
 8002a7e:	408e      	lsls	r6, r1
 8002a80:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 8002a84:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8002a86:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a88:	ea26 0e08 	bic.w	lr, r6, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a8c:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8002a90:	409e      	lsls	r6, r3
 8002a92:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OTYPER = temp;
 8002a96:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 8002a98:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a9a:	ea06 0e05 	and.w	lr, r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a9e:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8002aa2:	408e      	lsls	r6, r1
 8002aa4:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa8:	f1bc 0f02 	cmp.w	ip, #2
        GPIOx->PUPDR = temp;
 8002aac:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aae:	f47f af79 	bne.w	80029a4 <HAL_GPIO_Init+0x54>
        temp = GPIOx->AFR[position >> 3U];
 8002ab2:	08de      	lsrs	r6, r3, #3
 8002ab4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8002ab8:	9601      	str	r6, [sp, #4]
 8002aba:	6a37      	ldr	r7, [r6, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002abc:	f8d9 6010 	ldr.w	r6, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8002ac0:	9700      	str	r7, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ac2:	f003 0e07 	and.w	lr, r3, #7
 8002ac6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002aca:	270f      	movs	r7, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002acc:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ad0:	fa07 fe0e 	lsl.w	lr, r7, lr
 8002ad4:	9f00      	ldr	r7, [sp, #0]
 8002ad6:	ea27 0e0e 	bic.w	lr, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002ada:	9f01      	ldr	r7, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002adc:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002ae0:	623e      	str	r6, [r7, #32]
 8002ae2:	e75f      	b.n	80029a4 <HAL_GPIO_Init+0x54>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ae4:	f04f 0c01 	mov.w	ip, #1
 8002ae8:	fa0c f606 	lsl.w	r6, ip, r6
 8002aec:	4335      	orrs	r5, r6
 8002aee:	e796      	b.n	8002a1e <HAL_GPIO_Init+0xce>
        temp = EXTI->RTSR;
 8002af0:	f8df 8170 	ldr.w	r8, [pc, #368]	@ 8002c64 <HAL_GPIO_Init+0x314>
 8002af4:	e002      	b.n	8002afc <HAL_GPIO_Init+0x1ac>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002af6:	3301      	adds	r3, #1
 8002af8:	2b10      	cmp	r3, #16
 8002afa:	d0b8      	beq.n	8002a6e <HAL_GPIO_Init+0x11e>
    ioposition = 0x01U << position;
 8002afc:	fa0b f403 	lsl.w	r4, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b00:	ea02 0604 	and.w	r6, r2, r4
    if(iocurrent == ioposition)
 8002b04:	4394      	bics	r4, r2
 8002b06:	d1f6      	bne.n	8002af6 <HAL_GPIO_Init+0x1a6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b08:	684d      	ldr	r5, [r1, #4]
 8002b0a:	f005 0403 	and.w	r4, r5, #3
 8002b0e:	9400      	str	r4, [sp, #0]
 8002b10:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b12:	2403      	movs	r4, #3
 8002b14:	fa04 fc07 	lsl.w	ip, r4, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b18:	9c00      	ldr	r4, [sp, #0]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b1a:	ea6f 0a0c 	mvn.w	sl, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b1e:	f104 3cff 	add.w	ip, r4, #4294967295
 8002b22:	f1bc 0f01 	cmp.w	ip, #1
 8002b26:	d94c      	bls.n	8002bc2 <HAL_GPIO_Init+0x272>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b28:	2c03      	cmp	r4, #3
 8002b2a:	f040 80b9 	bne.w	8002ca0 <HAL_GPIO_Init+0x350>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b2e:	9c00      	ldr	r4, [sp, #0]
 8002b30:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 8002b32:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b34:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b38:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b3a:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8002b3e:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b40:	d0d9      	beq.n	8002af6 <HAL_GPIO_Init+0x1a6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b42:	4f49      	ldr	r7, [pc, #292]	@ (8002c68 <HAL_GPIO_Init+0x318>)
 8002b44:	2400      	movs	r4, #0
 8002b46:	9403      	str	r4, [sp, #12]
 8002b48:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8002b4a:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8002b4e:	647c      	str	r4, [r7, #68]	@ 0x44
 8002b50:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8002b52:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8002b56:	9403      	str	r4, [sp, #12]
 8002b58:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002b5a:	f023 0403 	bic.w	r4, r3, #3
 8002b5e:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8002b62:	f504 349c 	add.w	r4, r4, #79872	@ 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b66:	f003 0703 	and.w	r7, r3, #3
 8002b6a:	f04f 0c0f 	mov.w	ip, #15
 8002b6e:	00bf      	lsls	r7, r7, #2
 8002b70:	fa0c f707 	lsl.w	r7, ip, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8002b74:	f8d4 c008 	ldr.w	ip, [r4, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b78:	ea2c 0707 	bic.w	r7, ip, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b7c:	60a7      	str	r7, [r4, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b7e:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp = EXTI->RTSR;
 8002b82:	f8d8 4008 	ldr.w	r4, [r8, #8]
        temp &= ~((uint32_t)iocurrent);
 8002b86:	ea6f 0706 	mvn.w	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b8a:	d162      	bne.n	8002c52 <HAL_GPIO_Init+0x302>
        temp &= ~((uint32_t)iocurrent);
 8002b8c:	403c      	ands	r4, r7
        EXTI->RTSR = temp;
 8002b8e:	f8c8 4008 	str.w	r4, [r8, #8]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b92:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp = EXTI->FTSR;
 8002b96:	f8d8 400c 	ldr.w	r4, [r8, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b9a:	d158      	bne.n	8002c4e <HAL_GPIO_Init+0x2fe>
        temp &= ~((uint32_t)iocurrent);
 8002b9c:	403c      	ands	r4, r7
        EXTI->FTSR = temp;
 8002b9e:	f8c8 400c 	str.w	r4, [r8, #12]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ba2:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp = EXTI->EMR;
 8002ba6:	f8d8 4004 	ldr.w	r4, [r8, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002baa:	d14e      	bne.n	8002c4a <HAL_GPIO_Init+0x2fa>
        temp &= ~((uint32_t)iocurrent);
 8002bac:	403c      	ands	r4, r7
        EXTI->EMR = temp;
 8002bae:	f8c8 4004 	str.w	r4, [r8, #4]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bb2:	03ed      	lsls	r5, r5, #15
        temp = EXTI->IMR;
 8002bb4:	f8d8 4000 	ldr.w	r4, [r8]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bb8:	d445      	bmi.n	8002c46 <HAL_GPIO_Init+0x2f6>
        temp &= ~((uint32_t)iocurrent);
 8002bba:	403c      	ands	r4, r7
        EXTI->IMR = temp;
 8002bbc:	f8c8 4000 	str.w	r4, [r8]
 8002bc0:	e799      	b.n	8002af6 <HAL_GPIO_Init+0x1a6>
        temp = GPIOx->OSPEEDR; 
 8002bc2:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bc6:	68cc      	ldr	r4, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bc8:	ea0a 0e0e 	and.w	lr, sl, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bcc:	fa04 fc07 	lsl.w	ip, r4, r7
 8002bd0:	ea4c 0c0e 	orr.w	ip, ip, lr
        GPIOx->OSPEEDR = temp;
 8002bd4:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 8002bd8:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bdc:	f3c5 1c00 	ubfx	ip, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002be0:	ea2e 0e06 	bic.w	lr, lr, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be4:	fa0c fc03 	lsl.w	ip, ip, r3
 8002be8:	ea4c 0c0e 	orr.w	ip, ip, lr
        GPIOx->OTYPER = temp;
 8002bec:	f8c0 c004 	str.w	ip, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bf0:	688c      	ldr	r4, [r1, #8]
        temp = GPIOx->PUPDR;
 8002bf2:	f8d0 e00c 	ldr.w	lr, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bf6:	fa04 fc07 	lsl.w	ip, r4, r7
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bfa:	9c00      	ldr	r4, [sp, #0]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bfc:	ea0a 0e0e 	and.w	lr, sl, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c00:	ea4c 0c0e 	orr.w	ip, ip, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c04:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8002c06:	f8c0 c00c 	str.w	ip, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c0a:	d190      	bne.n	8002b2e <HAL_GPIO_Init+0x1de>
        temp = GPIOx->AFR[position >> 3U];
 8002c0c:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8002c10:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c14:	690c      	ldr	r4, [r1, #16]
 8002c16:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c1a:	f003 0e07 	and.w	lr, r3, #7
 8002c1e:	f50c 3c00 	add.w	ip, ip, #131072	@ 0x20000
 8002c22:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c26:	fa04 f40e 	lsl.w	r4, r4, lr
        temp = GPIOx->AFR[position >> 3U];
 8002c2a:	f8dc 9020 	ldr.w	r9, [ip, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c2e:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c30:	240f      	movs	r4, #15
 8002c32:	fa04 fe0e 	lsl.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c36:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c38:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c3c:	ea44 0e09 	orr.w	lr, r4, r9
        GPIOx->AFR[position >> 3U] = temp;
 8002c40:	f8cc e020 	str.w	lr, [ip, #32]
 8002c44:	e773      	b.n	8002b2e <HAL_GPIO_Init+0x1de>
          temp |= iocurrent;
 8002c46:	4334      	orrs	r4, r6
 8002c48:	e7b8      	b.n	8002bbc <HAL_GPIO_Init+0x26c>
          temp |= iocurrent;
 8002c4a:	4334      	orrs	r4, r6
 8002c4c:	e7af      	b.n	8002bae <HAL_GPIO_Init+0x25e>
          temp |= iocurrent;
 8002c4e:	4334      	orrs	r4, r6
 8002c50:	e7a5      	b.n	8002b9e <HAL_GPIO_Init+0x24e>
          temp |= iocurrent;
 8002c52:	4334      	orrs	r4, r6
 8002c54:	e79b      	b.n	8002b8e <HAL_GPIO_Init+0x23e>
 8002c56:	bf00      	nop
 8002c58:	40020000 	.word	0x40020000
 8002c5c:	40020400 	.word	0x40020400
 8002c60:	40020800 	.word	0x40020800
 8002c64:	40013c00 	.word	0x40013c00
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40020c00 	.word	0x40020c00
 8002c70:	40021000 	.word	0x40021000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c74:	f04f 0c02 	mov.w	ip, #2
 8002c78:	fa0c f606 	lsl.w	r6, ip, r6
 8002c7c:	4335      	orrs	r5, r6
 8002c7e:	e6ce      	b.n	8002a1e <HAL_GPIO_Init+0xce>
 8002c80:	f04f 0c03 	mov.w	ip, #3
 8002c84:	fa0c f606 	lsl.w	r6, ip, r6
 8002c88:	4335      	orrs	r5, r6
 8002c8a:	e6c8      	b.n	8002a1e <HAL_GPIO_Init+0xce>
        temp = GPIOx->PUPDR;
 8002c8c:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c8e:	ea06 0e05 	and.w	lr, r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c92:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8002c96:	408e      	lsls	r6, r1
 8002c98:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->PUPDR = temp;
 8002c9c:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c9e:	e681      	b.n	80029a4 <HAL_GPIO_Init+0x54>
        temp = GPIOx->PUPDR;
 8002ca0:	f8df e018 	ldr.w	lr, [pc, #24]	@ 8002cbc <HAL_GPIO_Init+0x36c>
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ca4:	688c      	ldr	r4, [r1, #8]
        temp = GPIOx->PUPDR;
 8002ca6:	f8de 900c 	ldr.w	r9, [lr, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002caa:	fa04 fc07 	lsl.w	ip, r4, r7
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cae:	ea0a 0909 	and.w	r9, sl, r9
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cb2:	ea4c 0c09 	orr.w	ip, ip, r9
        GPIOx->PUPDR = temp;
 8002cb6:	f8ce c00c 	str.w	ip, [lr, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cba:	e738      	b.n	8002b2e <HAL_GPIO_Init+0x1de>
 8002cbc:	40020000 	.word	0x40020000

08002cc0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cc0:	b902      	cbnz	r2, 8002cc4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cc2:	0409      	lsls	r1, r1, #16
 8002cc4:	6181      	str	r1, [r0, #24]
  }
}
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cc8:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cca:	ea01 0203 	and.w	r2, r1, r3
 8002cce:	ea21 0103 	bic.w	r1, r1, r3
 8002cd2:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002cd6:	6181      	str	r1, [r0, #24]
}
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop

08002cdc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>:
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002cdc:	b530      	push	{r4, r5, lr}
 8002cde:	4604      	mov	r4, r0
 8002ce0:	1c48      	adds	r0, r1, #1
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	d121      	bne.n	8002d2a <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x4e>
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ce6:	6823      	ldr	r3, [r4, #0]
 8002ce8:	e002      	b.n	8002cf0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x14>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002cea:	695a      	ldr	r2, [r3, #20]
 8002cec:	0555      	lsls	r5, r2, #21
 8002cee:	d405      	bmi.n	8002cfc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x20>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cf0:	695a      	ldr	r2, [r3, #20]
 8002cf2:	0792      	lsls	r2, r2, #30
 8002cf4:	d5f9      	bpl.n	8002cea <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0xe>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002cf6:	2000      	movs	r0, #0
}
 8002cf8:	b003      	add	sp, #12
 8002cfa:	bd30      	pop	{r4, r5, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d02:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d04:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d06:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d0a:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d0c:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0e:	6321      	str	r1, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d10:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d14:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d1a:	f043 0304 	orr.w	r3, r3, #4
 8002d1e:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002d20:	2300      	movs	r3, #0
 8002d22:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8002d26:	2001      	movs	r0, #1
 8002d28:	e7e6      	b.n	8002cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x1c>
 8002d2a:	6820      	ldr	r0, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d2c:	6945      	ldr	r5, [r0, #20]
 8002d2e:	07ad      	lsls	r5, r5, #30
 8002d30:	4603      	mov	r3, r0
 8002d32:	d4e0      	bmi.n	8002cf6 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x1a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d34:	6940      	ldr	r0, [r0, #20]
 8002d36:	0540      	lsls	r0, r0, #21
 8002d38:	d4e0      	bmi.n	8002cfc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x20>
 8002d3a:	e9cd 1200 	strd	r1, r2, [sp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3e:	f7ff fd2f 	bl	80027a0 <HAL_GetTick>
 8002d42:	9a01      	ldr	r2, [sp, #4]
 8002d44:	9900      	ldr	r1, [sp, #0]
 8002d46:	1a83      	subs	r3, r0, r2
 8002d48:	4299      	cmp	r1, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d4a:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d4c:	d301      	bcc.n	8002d52 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x76>
 8002d4e:	2900      	cmp	r1, #0
 8002d50:	d1ec      	bne.n	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x50>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002d52:	6943      	ldr	r3, [r0, #20]
 8002d54:	079b      	lsls	r3, r3, #30
 8002d56:	d4e9      	bmi.n	8002d2c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x50>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d58:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d5a:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d5c:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d5e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d62:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d66:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	6423      	str	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8002d6c:	e7d8      	b.n	8002d20 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0+0x44>
 8002d6e:	bf00      	nop

08002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>:
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002d70:	b530      	push	{r4, r5, lr}
 8002d72:	4604      	mov	r4, r0
 8002d74:	1c48      	adds	r0, r1, #1
 8002d76:	b083      	sub	sp, #12
 8002d78:	d121      	bne.n	8002dbe <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x4e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	e002      	b.n	8002d84 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x14>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	0555      	lsls	r5, r2, #21
 8002d82:	d405      	bmi.n	8002d90 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x20>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d84:	695a      	ldr	r2, [r3, #20]
 8002d86:	0712      	lsls	r2, r2, #28
 8002d88:	d5f9      	bpl.n	8002d7e <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0xe>
  return HAL_OK;
 8002d8a:	2000      	movs	r0, #0
}
 8002d8c:	b003      	add	sp, #12
 8002d8e:	bd30      	pop	{r4, r5, pc}
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d96:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d98:	2100      	movs	r1, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d9a:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d9e:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002da0:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002da2:	6321      	str	r1, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002da4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da8:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002dac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002dae:	f043 0304 	orr.w	r3, r3, #4
 8002db2:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002db4:	2300      	movs	r3, #0
 8002db6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8002dba:	2001      	movs	r0, #1
 8002dbc:	e7e6      	b.n	8002d8c <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x1c>
 8002dbe:	6820      	ldr	r0, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dc0:	6945      	ldr	r5, [r0, #20]
 8002dc2:	072d      	lsls	r5, r5, #28
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	d4e0      	bmi.n	8002d8a <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x1a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dc8:	6940      	ldr	r0, [r0, #20]
 8002dca:	0540      	lsls	r0, r0, #21
 8002dcc:	d4e0      	bmi.n	8002d90 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x20>
 8002dce:	e9cd 1200 	strd	r1, r2, [sp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd2:	f7ff fce5 	bl	80027a0 <HAL_GetTick>
 8002dd6:	9a01      	ldr	r2, [sp, #4]
 8002dd8:	9900      	ldr	r1, [sp, #0]
 8002dda:	1a83      	subs	r3, r0, r2
 8002ddc:	4299      	cmp	r1, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002dde:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de0:	d301      	bcc.n	8002de6 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x76>
 8002de2:	2900      	cmp	r1, #0
 8002de4:	d1ec      	bne.n	8002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x50>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002de6:	6943      	ldr	r3, [r0, #20]
 8002de8:	071b      	lsls	r3, r3, #28
 8002dea:	d4e9      	bmi.n	8002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x50>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dec:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8002dee:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002df0:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002df2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dfa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	6423      	str	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8002e00:	e7d8      	b.n	8002db4 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1+0x44>
 8002e02:	bf00      	nop

08002e04 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8002e04:	2800      	cmp	r0, #0
 8002e06:	f000 80b8 	beq.w	8002f7a <HAL_I2C_Init+0x176>
{
 8002e0a:	b570      	push	{r4, r5, r6, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e0c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002e10:	4604      	mov	r4, r0
 8002e12:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 8098 	beq.w	8002f4c <HAL_I2C_Init+0x148>
  __HAL_I2C_DISABLE(hi2c);
 8002e1c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e1e:	2224      	movs	r2, #36	@ 0x24
 8002e20:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	f022 0201 	bic.w	r2, r2, #1
 8002e2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002e3a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e3c:	f000 ff0a 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e40:	4b4f      	ldr	r3, [pc, #316]	@ (8002f80 <HAL_I2C_Init+0x17c>)
 8002e42:	6865      	ldr	r5, [r4, #4]
 8002e44:	429d      	cmp	r5, r3
 8002e46:	d84f      	bhi.n	8002ee8 <HAL_I2C_Init+0xe4>
 8002e48:	4b4e      	ldr	r3, [pc, #312]	@ (8002f84 <HAL_I2C_Init+0x180>)
 8002e4a:	4298      	cmp	r0, r3
 8002e4c:	d97c      	bls.n	8002f48 <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8002e4e:	4b4e      	ldr	r3, [pc, #312]	@ (8002f88 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e50:	006a      	lsls	r2, r5, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8002e52:	fba3 3500 	umull	r3, r5, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e56:	1e43      	subs	r3, r0, #1
 8002e58:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e5c:	6822      	ldr	r2, [r4, #0]
 8002e5e:	6851      	ldr	r1, [r2, #4]
 8002e60:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8002e64:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8002e68:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e6a:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8002e6c:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e70:	f10c 0c01 	add.w	ip, ip, #1
 8002e74:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8002e78:	ea41 010c 	orr.w	r1, r1, ip
 8002e7c:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e7e:	69d1      	ldr	r1, [r2, #28]
 8002e80:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8002e84:	3301      	adds	r3, #1
 8002e86:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8002e8a:	4203      	tst	r3, r0
 8002e8c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002e90:	d161      	bne.n	8002f56 <HAL_I2C_Init+0x152>
 8002e92:	2304      	movs	r3, #4
 8002e94:	430b      	orrs	r3, r1
 8002e96:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e98:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002e9c:	6811      	ldr	r1, [r2, #0]
 8002e9e:	4303      	orrs	r3, r0
 8002ea0:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ea8:	6891      	ldr	r1, [r2, #8]
 8002eaa:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002eae:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8002eb2:	4303      	orrs	r3, r0
 8002eb4:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002eb8:	430b      	orrs	r3, r1
 8002eba:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ebc:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002ec0:	68d1      	ldr	r1, [r2, #12]
 8002ec2:	4303      	orrs	r3, r0
 8002ec4:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8002ecc:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ece:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8002ed0:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8002ed4:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 8002ed6:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ed8:	6423      	str	r3, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002eda:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ede:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  return HAL_OK;
 8002ee4:	4618      	mov	r0, r3
}
 8002ee6:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ee8:	4b28      	ldr	r3, [pc, #160]	@ (8002f8c <HAL_I2C_Init+0x188>)
 8002eea:	4298      	cmp	r0, r3
 8002eec:	d92c      	bls.n	8002f48 <HAL_I2C_Init+0x144>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eee:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002ef0:	4b25      	ldr	r3, [pc, #148]	@ (8002f88 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ef2:	4e27      	ldr	r6, [pc, #156]	@ (8002f90 <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8002ef4:	fba3 3c00 	umull	r3, ip, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ef8:	1e43      	subs	r3, r0, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002efa:	6850      	ldr	r0, [r2, #4]
 8002efc:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 8002f00:	ea40 409c 	orr.w	r0, r0, ip, lsr #18
 8002f04:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002f06:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f0a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002f0e:	fb00 f101 	mul.w	r1, r0, r1
 8002f12:	fba6 6101 	umull	r6, r1, r6, r1
 8002f16:	6a10      	ldr	r0, [r2, #32]
 8002f18:	0989      	lsrs	r1, r1, #6
 8002f1a:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 8002f1e:	3101      	adds	r1, #1
 8002f20:	4301      	orrs	r1, r0
 8002f22:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f24:	69d1      	ldr	r1, [r2, #28]
 8002f26:	68a0      	ldr	r0, [r4, #8]
 8002f28:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8002f2c:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002f30:	b9a0      	cbnz	r0, 8002f5c <HAL_I2C_Init+0x158>
 8002f32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002f36:	fbb3 f3f5 	udiv	r3, r3, r5
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f40:	b1cb      	cbz	r3, 8002f76 <HAL_I2C_Init+0x172>
 8002f42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f46:	e7a5      	b.n	8002e94 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002f48:	2001      	movs	r0, #1
}
 8002f4a:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002f4c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8002f50:	f7ff fa12 	bl	8002378 <HAL_I2C_MspInit>
 8002f54:	e762      	b.n	8002e1c <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5a:	e79b      	b.n	8002e94 <HAL_I2C_Init+0x90>
 8002f5c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002f60:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002f64:	fbb3 f3f5 	udiv	r3, r3, r5
 8002f68:	3301      	adds	r3, #1
 8002f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6e:	b113      	cbz	r3, 8002f76 <HAL_I2C_Init+0x172>
 8002f70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f74:	e78e      	b.n	8002e94 <HAL_I2C_Init+0x90>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e78c      	b.n	8002e94 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002f7a:	2001      	movs	r0, #1
}
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	000186a0 	.word	0x000186a0
 8002f84:	001e847f 	.word	0x001e847f
 8002f88:	431bde83 	.word	0x431bde83
 8002f8c:	003d08ff 	.word	0x003d08ff
 8002f90:	10624dd3 	.word	0x10624dd3

08002f94 <HAL_I2C_Master_Transmit>:
{
 8002f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f98:	4604      	mov	r4, r0
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	4699      	mov	r9, r3
 8002f9e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8002fa0:	4688      	mov	r8, r1
 8002fa2:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8002fa4:	f7ff fbfc 	bl	80027a0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa8:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	d004      	beq.n	8002fba <HAL_I2C_Master_Transmit+0x26>
      return HAL_BUSY;
 8002fb0:	2502      	movs	r5, #2
}
 8002fb2:	4628      	mov	r0, r5
 8002fb4:	b002      	add	sp, #8
 8002fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fba:	6825      	ldr	r5, [r4, #0]
 8002fbc:	4606      	mov	r6, r0
 8002fbe:	69ab      	ldr	r3, [r5, #24]
 8002fc0:	079b      	lsls	r3, r3, #30
 8002fc2:	d517      	bpl.n	8002ff4 <HAL_I2C_Master_Transmit+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc4:	f7ff fbec 	bl	80027a0 <HAL_GetTick>
 8002fc8:	1b80      	subs	r0, r0, r6
 8002fca:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fcc:	6825      	ldr	r5, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fce:	d9f6      	bls.n	8002fbe <HAL_I2C_Master_Transmit+0x2a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fd0:	69ab      	ldr	r3, [r5, #24]
 8002fd2:	43db      	mvns	r3, r3
 8002fd4:	f013 0302 	ands.w	r3, r3, #2
 8002fd8:	d1f1      	bne.n	8002fbe <HAL_I2C_Master_Transmit+0x2a>
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fda:	2220      	movs	r2, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fdc:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fde:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fe2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fe6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8002fe8:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fec:	f042 0220 	orr.w	r2, r2, #32
 8002ff0:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8002ff2:	e7dd      	b.n	8002fb0 <HAL_I2C_Master_Transmit+0x1c>
    __HAL_LOCK(hi2c);
 8002ff4:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d0d9      	beq.n	8002fb0 <HAL_I2C_Master_Transmit+0x1c>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003002:	682b      	ldr	r3, [r5, #0]
 8003004:	07d8      	lsls	r0, r3, #31
 8003006:	d565      	bpl.n	80030d4 <HAL_I2C_Master_Transmit+0x140>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003008:	682b      	ldr	r3, [r5, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800300a:	4a86      	ldr	r2, [pc, #536]	@ (8003224 <HAL_I2C_Master_Transmit+0x290>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800300c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003010:	602b      	str	r3, [r5, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003012:	2321      	movs	r3, #33	@ 0x21
 8003014:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003018:	2310      	movs	r3, #16
 800301a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800301e:	2300      	movs	r3, #0
 8003020:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 8003022:	f8a4 902a 	strh.w	r9, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003026:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003028:	62e2      	str	r2, [r4, #44]	@ 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800302a:	8523      	strh	r3, [r4, #40]	@ 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800302c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    hi2c->pBuffPtr    = pData;
 800302e:	f8c4 a024 	str.w	sl, [r4, #36]	@ 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003032:	2b08      	cmp	r3, #8
 8003034:	d006      	beq.n	8003044 <HAL_I2C_Master_Transmit+0xb0>
 8003036:	2b01      	cmp	r3, #1
 8003038:	d004      	beq.n	8003044 <HAL_I2C_Master_Transmit+0xb0>
 800303a:	4293      	cmp	r3, r2
 800303c:	d002      	beq.n	8003044 <HAL_I2C_Master_Transmit+0xb0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800303e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003040:	2b12      	cmp	r3, #18
 8003042:	d103      	bne.n	800304c <HAL_I2C_Master_Transmit+0xb8>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003044:	682b      	ldr	r3, [r5, #0]
 8003046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800304a:	602b      	str	r3, [r5, #0]
 800304c:	1c79      	adds	r1, r7, #1
 800304e:	f040 80c1 	bne.w	80031d4 <HAL_I2C_Master_Transmit+0x240>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003052:	696b      	ldr	r3, [r5, #20]
 8003054:	07da      	lsls	r2, r3, #31
 8003056:	d5fc      	bpl.n	8003052 <HAL_I2C_Master_Transmit+0xbe>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003058:	6923      	ldr	r3, [r4, #16]
 800305a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800305e:	d13e      	bne.n	80030de <HAL_I2C_Master_Transmit+0x14a>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003060:	f008 03fe 	and.w	r3, r8, #254	@ 0xfe
 8003064:	612b      	str	r3, [r5, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003066:	4632      	mov	r2, r6
 8003068:	4639      	mov	r1, r7
 800306a:	4620      	mov	r0, r4
 800306c:	f7ff fe36 	bl	8002cdc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8003070:	4605      	mov	r5, r0
 8003072:	2800      	cmp	r0, #0
 8003074:	d129      	bne.n	80030ca <HAL_I2C_Master_Transmit+0x136>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003076:	6823      	ldr	r3, [r4, #0]
 8003078:	9001      	str	r0, [sp, #4]
 800307a:	695a      	ldr	r2, [r3, #20]
 800307c:	9201      	str	r2, [sp, #4]
 800307e:	699a      	ldr	r2, [r3, #24]
    while (hi2c->XferSize > 0U)
 8003080:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003082:	9201      	str	r2, [sp, #4]
 8003084:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8003086:	2800      	cmp	r0, #0
 8003088:	d069      	beq.n	800315e <HAL_I2C_Master_Transmit+0x1ca>
 800308a:	1c7a      	adds	r2, r7, #1
 800308c:	d179      	bne.n	8003182 <HAL_I2C_Master_Transmit+0x1ee>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800308e:	695a      	ldr	r2, [r3, #20]
 8003090:	0611      	lsls	r1, r2, #24
 8003092:	d438      	bmi.n	8003106 <HAL_I2C_Master_Transmit+0x172>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	0552      	lsls	r2, r2, #21
 8003098:	d5f9      	bpl.n	800308e <HAL_I2C_Master_Transmit+0xfa>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 800309a:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800309c:	f46f 6080 	mvn.w	r0, #1024	@ 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80030a0:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030a2:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80030a4:	6322      	str	r2, [r4, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030a6:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030aa:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030ae:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80030b0:	f042 0204 	orr.w	r2, r2, #4
 80030b4:	6422      	str	r2, [r4, #64]	@ 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030b6:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80030b8:	2100      	movs	r1, #0
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ba:	2a04      	cmp	r2, #4
          __HAL_UNLOCK(hi2c);
 80030bc:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030c0:	d103      	bne.n	80030ca <HAL_I2C_Master_Transmit+0x136>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030c8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
 80030ca:	2501      	movs	r5, #1
}
 80030cc:	4628      	mov	r0, r5
 80030ce:	b002      	add	sp, #8
 80030d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_I2C_ENABLE(hi2c);
 80030d4:	682b      	ldr	r3, [r5, #0]
 80030d6:	f043 0301 	orr.w	r3, r3, #1
 80030da:	602b      	str	r3, [r5, #0]
 80030dc:	e794      	b.n	8003008 <HAL_I2C_Master_Transmit+0x74>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030de:	ea4f 13e8 	mov.w	r3, r8, asr #7
 80030e2:	f003 0306 	and.w	r3, r3, #6
 80030e6:	f043 03f0 	orr.w	r3, r3, #240	@ 0xf0
 80030ea:	612b      	str	r3, [r5, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030ec:	4632      	mov	r2, r6
 80030ee:	4639      	mov	r1, r7
 80030f0:	4620      	mov	r0, r4
 80030f2:	f7ff fe3d 	bl	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
 80030f6:	2800      	cmp	r0, #0
 80030f8:	d1e7      	bne.n	80030ca <HAL_I2C_Master_Transmit+0x136>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030fa:	6822      	ldr	r2, [r4, #0]
 80030fc:	fa5f f388 	uxtb.w	r3, r8
 8003100:	6113      	str	r3, [r2, #16]
 8003102:	e7b0      	b.n	8003066 <HAL_I2C_Master_Transmit+0xd2>
 8003104:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003106:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
 800310a:	4661      	mov	r1, ip
 800310c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003110:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 8003112:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8003114:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003116:	3a01      	subs	r2, #1
 8003118:	b292      	uxth	r2, r2
 800311a:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800311c:	6959      	ldr	r1, [r3, #20]
      hi2c->XferSize--;
 800311e:	1e42      	subs	r2, r0, #1
 8003120:	b292      	uxth	r2, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003122:	0749      	lsls	r1, r1, #29
      hi2c->XferSize--;
 8003124:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003126:	d50c      	bpl.n	8003142 <HAL_I2C_Master_Transmit+0x1ae>
 8003128:	b15a      	cbz	r2, 8003142 <HAL_I2C_Master_Transmit+0x1ae>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800312a:	f89c 2001 	ldrb.w	r2, [ip, #1]
 800312e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003130:	f10c 0202 	add.w	r2, ip, #2
 8003134:	6262      	str	r2, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8003136:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003138:	3a01      	subs	r2, #1
        hi2c->XferSize--;
 800313a:	3802      	subs	r0, #2
        hi2c->XferCount--;
 800313c:	b292      	uxth	r2, r2
        hi2c->XferSize--;
 800313e:	8520      	strh	r0, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8003140:	8562      	strh	r2, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8003142:	1c78      	adds	r0, r7, #1
 8003144:	d12b      	bne.n	800319e <HAL_I2C_Master_Transmit+0x20a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003146:	695a      	ldr	r2, [r3, #20]
 8003148:	0751      	lsls	r1, r2, #29
 800314a:	d405      	bmi.n	8003158 <HAL_I2C_Master_Transmit+0x1c4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800314c:	695a      	ldr	r2, [r3, #20]
 800314e:	0552      	lsls	r2, r2, #21
 8003150:	d4a3      	bmi.n	800309a <HAL_I2C_Master_Transmit+0x106>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	0751      	lsls	r1, r2, #29
 8003156:	d5f9      	bpl.n	800314c <HAL_I2C_Master_Transmit+0x1b8>
    while (hi2c->XferSize > 0U)
 8003158:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 800315a:	2800      	cmp	r0, #0
 800315c:	d197      	bne.n	800308e <HAL_I2C_Master_Transmit+0xfa>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800315e:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003160:	2100      	movs	r1, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 8003166:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003168:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800316a:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 800316e:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003172:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
    return HAL_OK;
 8003176:	e71c      	b.n	8002fb2 <HAL_I2C_Master_Transmit+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003178:	b91f      	cbnz	r7, 8003182 <HAL_I2C_Master_Transmit+0x1ee>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800317a:	695a      	ldr	r2, [r3, #20]
 800317c:	f012 0280 	ands.w	r2, r2, #128	@ 0x80
 8003180:	d01e      	beq.n	80031c0 <HAL_I2C_Master_Transmit+0x22c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003182:	695a      	ldr	r2, [r3, #20]
 8003184:	0610      	lsls	r0, r2, #24
 8003186:	d4bd      	bmi.n	8003104 <HAL_I2C_Master_Transmit+0x170>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	0552      	lsls	r2, r2, #21
 800318c:	d485      	bmi.n	800309a <HAL_I2C_Master_Transmit+0x106>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318e:	f7ff fb07 	bl	80027a0 <HAL_GetTick>
 8003192:	1b83      	subs	r3, r0, r6
 8003194:	429f      	cmp	r7, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003196:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003198:	d3ef      	bcc.n	800317a <HAL_I2C_Master_Transmit+0x1e6>
 800319a:	e7ed      	b.n	8003178 <HAL_I2C_Master_Transmit+0x1e4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319c:	b167      	cbz	r7, 80031b8 <HAL_I2C_Master_Transmit+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	0751      	lsls	r1, r2, #29
 80031a2:	d43b      	bmi.n	800321c <HAL_I2C_Master_Transmit+0x288>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	0550      	lsls	r0, r2, #21
 80031a8:	f53f af77 	bmi.w	800309a <HAL_I2C_Master_Transmit+0x106>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ac:	f7ff faf8 	bl	80027a0 <HAL_GetTick>
 80031b0:	1b83      	subs	r3, r0, r6
 80031b2:	429f      	cmp	r7, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031b4:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b6:	d2f1      	bcs.n	800319c <HAL_I2C_Master_Transmit+0x208>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80031b8:	695a      	ldr	r2, [r3, #20]
 80031ba:	f012 0204 	ands.w	r2, r2, #4
 80031be:	d1ee      	bne.n	800319e <HAL_I2C_Master_Transmit+0x20a>
          hi2c->State               = HAL_I2C_STATE_READY;
 80031c0:	2120      	movs	r1, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031c2:	6322      	str	r2, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031c4:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c8:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031cc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80031ce:	430a      	orrs	r2, r1
 80031d0:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_ERROR;
 80031d2:	e770      	b.n	80030b6 <HAL_I2C_Master_Transmit+0x122>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031d4:	696b      	ldr	r3, [r5, #20]
 80031d6:	07d9      	lsls	r1, r3, #31
 80031d8:	f53f af3e 	bmi.w	8003058 <HAL_I2C_Master_Transmit+0xc4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031dc:	f7ff fae0 	bl	80027a0 <HAL_GetTick>
 80031e0:	1b83      	subs	r3, r0, r6
 80031e2:	429f      	cmp	r7, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031e4:	6825      	ldr	r5, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e6:	d301      	bcc.n	80031ec <HAL_I2C_Master_Transmit+0x258>
 80031e8:	2f00      	cmp	r7, #0
 80031ea:	d1f3      	bne.n	80031d4 <HAL_I2C_Master_Transmit+0x240>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031ec:	696b      	ldr	r3, [r5, #20]
 80031ee:	07db      	lsls	r3, r3, #31
 80031f0:	d4f0      	bmi.n	80031d4 <HAL_I2C_Master_Transmit+0x240>
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031f2:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 80031f4:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031f6:	6322      	str	r2, [r4, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031f8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031fc:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003200:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8003202:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003206:	f043 0320 	orr.w	r3, r3, #32
 800320a:	6423      	str	r3, [r4, #64]	@ 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800320c:	682b      	ldr	r3, [r5, #0]
 800320e:	05d8      	lsls	r0, r3, #23
 8003210:	f57f af5b 	bpl.w	80030ca <HAL_I2C_Master_Transmit+0x136>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003214:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003218:	6423      	str	r3, [r4, #64]	@ 0x40
 800321a:	e756      	b.n	80030ca <HAL_I2C_Master_Transmit+0x136>
    while (hi2c->XferSize > 0U)
 800321c:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 800321e:	2800      	cmp	r0, #0
 8003220:	d1af      	bne.n	8003182 <HAL_I2C_Master_Transmit+0x1ee>
 8003222:	e79c      	b.n	800315e <HAL_I2C_Master_Transmit+0x1ca>
 8003224:	ffff0000 	.word	0xffff0000

08003228 <HAL_I2C_Master_Receive>:
{
 8003228:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800322c:	4604      	mov	r4, r0
 800322e:	b087      	sub	sp, #28
 8003230:	4698      	mov	r8, r3
 8003232:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8003234:	460f      	mov	r7, r1
 8003236:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8003238:	f7ff fab2 	bl	80027a0 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800323c:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8003240:	2b20      	cmp	r3, #32
 8003242:	d004      	beq.n	800324e <HAL_I2C_Master_Receive+0x26>
      return HAL_BUSY;
 8003244:	2702      	movs	r7, #2
}
 8003246:	4638      	mov	r0, r7
 8003248:	b007      	add	sp, #28
 800324a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800324e:	4605      	mov	r5, r0
 8003250:	6820      	ldr	r0, [r4, #0]
 8003252:	6983      	ldr	r3, [r0, #24]
 8003254:	079b      	lsls	r3, r3, #30
 8003256:	d517      	bpl.n	8003288 <HAL_I2C_Master_Receive+0x60>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003258:	f7ff faa2 	bl	80027a0 <HAL_GetTick>
 800325c:	1b40      	subs	r0, r0, r5
 800325e:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003260:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003262:	d9f6      	bls.n	8003252 <HAL_I2C_Master_Receive+0x2a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003264:	6983      	ldr	r3, [r0, #24]
 8003266:	43db      	mvns	r3, r3
 8003268:	f013 0302 	ands.w	r3, r3, #2
 800326c:	d1f1      	bne.n	8003252 <HAL_I2C_Master_Receive+0x2a>
          hi2c->State             = HAL_I2C_STATE_READY;
 800326e:	2220      	movs	r2, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003270:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003272:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003276:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800327a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800327c:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003280:	f042 0220 	orr.w	r2, r2, #32
 8003284:	6422      	str	r2, [r4, #64]	@ 0x40
          return HAL_ERROR;
 8003286:	e7dd      	b.n	8003244 <HAL_I2C_Master_Receive+0x1c>
    __HAL_LOCK(hi2c);
 8003288:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 800328c:	2b01      	cmp	r3, #1
 800328e:	d0d9      	beq.n	8003244 <HAL_I2C_Master_Receive+0x1c>
 8003290:	2301      	movs	r3, #1
 8003292:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003296:	6803      	ldr	r3, [r0, #0]
 8003298:	07d9      	lsls	r1, r3, #31
 800329a:	d553      	bpl.n	8003344 <HAL_I2C_Master_Receive+0x11c>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800329c:	6803      	ldr	r3, [r0, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800329e:	4a9c      	ldr	r2, [pc, #624]	@ (8003510 <HAL_I2C_Master_Receive+0x2e8>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032a4:	6003      	str	r3, [r0, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80032a6:	2322      	movs	r3, #34	@ 0x22
 80032a8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032ac:	2310      	movs	r3, #16
 80032ae:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032b2:	2300      	movs	r3, #0
 80032b4:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->XferCount   = Size;
 80032b6:	f8a4 802a 	strh.w	r8, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032ba:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032bc:	62e2      	str	r2, [r4, #44]	@ 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032be:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 80032c0:	8523      	strh	r3, [r4, #40]	@ 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c2:	6803      	ldr	r3, [r0, #0]
    hi2c->pBuffPtr    = pData;
 80032c4:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032cc:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ce:	6003      	str	r3, [r0, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032d0:	d007      	beq.n	80032e2 <HAL_I2C_Master_Receive+0xba>
 80032d2:	2a01      	cmp	r2, #1
 80032d4:	d005      	beq.n	80032e2 <HAL_I2C_Master_Receive+0xba>
 80032d6:	f512 3f80 	cmn.w	r2, #65536	@ 0x10000
 80032da:	d002      	beq.n	80032e2 <HAL_I2C_Master_Receive+0xba>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80032dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80032de:	2b11      	cmp	r3, #17
 80032e0:	d103      	bne.n	80032ea <HAL_I2C_Master_Receive+0xc2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032e2:	6803      	ldr	r3, [r0, #0]
 80032e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032e8:	6003      	str	r3, [r0, #0]
 80032ea:	1c72      	adds	r2, r6, #1
 80032ec:	f040 8120 	bne.w	8003530 <HAL_I2C_Master_Receive+0x308>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032f0:	6943      	ldr	r3, [r0, #20]
 80032f2:	07db      	lsls	r3, r3, #31
 80032f4:	d5fc      	bpl.n	80032f0 <HAL_I2C_Master_Receive+0xc8>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032f6:	6923      	ldr	r3, [r4, #16]
 80032f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032fc:	d127      	bne.n	800334e <HAL_I2C_Master_Receive+0x126>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032fe:	f047 0301 	orr.w	r3, r7, #1
 8003302:	b2db      	uxtb	r3, r3
 8003304:	6103      	str	r3, [r0, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003306:	462a      	mov	r2, r5
 8003308:	4631      	mov	r1, r6
 800330a:	4620      	mov	r0, r4
 800330c:	f7ff fce6 	bl	8002cdc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8003310:	4607      	mov	r7, r0
 8003312:	2800      	cmp	r0, #0
 8003314:	d133      	bne.n	800337e <HAL_I2C_Master_Receive+0x156>
    if (hi2c->XferSize == 0U)
 8003316:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003318:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 800331a:	2a00      	cmp	r2, #0
 800331c:	d134      	bne.n	8003388 <HAL_I2C_Master_Receive+0x160>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331e:	9001      	str	r0, [sp, #4]
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	9201      	str	r2, [sp, #4]
 8003324:	699a      	ldr	r2, [r3, #24]
 8003326:	9201      	str	r2, [sp, #4]
 8003328:	9a01      	ldr	r2, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003330:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003332:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003334:	2220      	movs	r2, #32
 8003336:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    __HAL_UNLOCK(hi2c);
 800333a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800333e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    return HAL_OK;
 8003342:	e780      	b.n	8003246 <HAL_I2C_Master_Receive+0x1e>
      __HAL_I2C_ENABLE(hi2c);
 8003344:	6803      	ldr	r3, [r0, #0]
 8003346:	f043 0301 	orr.w	r3, r3, #1
 800334a:	6003      	str	r3, [r0, #0]
 800334c:	e7a6      	b.n	800329c <HAL_I2C_Master_Receive+0x74>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800334e:	ea4f 18e7 	mov.w	r8, r7, asr #7
 8003352:	f008 0806 	and.w	r8, r8, #6
 8003356:	f048 03f0 	orr.w	r3, r8, #240	@ 0xf0
 800335a:	6103      	str	r3, [r0, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800335c:	462a      	mov	r2, r5
 800335e:	4631      	mov	r1, r6
 8003360:	4620      	mov	r0, r4
 8003362:	f7ff fd05 	bl	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.1>
 8003366:	b950      	cbnz	r0, 800337e <HAL_I2C_Master_Receive+0x156>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	b2ff      	uxtb	r7, r7
 800336c:	611f      	str	r7, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800336e:	462a      	mov	r2, r5
 8003370:	4631      	mov	r1, r6
 8003372:	4620      	mov	r0, r4
 8003374:	f7ff fcb2 	bl	8002cdc <I2C_WaitOnMasterAddressFlagUntilTimeout.constprop.0>
 8003378:	2800      	cmp	r0, #0
 800337a:	f000 80b3 	beq.w	80034e4 <HAL_I2C_Master_Receive+0x2bc>
      return HAL_ERROR;
 800337e:	2701      	movs	r7, #1
}
 8003380:	4638      	mov	r0, r7
 8003382:	b007      	add	sp, #28
 8003384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    else if (hi2c->XferSize == 1U)
 8003388:	2a01      	cmp	r2, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800338a:	6819      	ldr	r1, [r3, #0]
    else if (hi2c->XferSize == 1U)
 800338c:	f000 817c 	beq.w	8003688 <HAL_I2C_Master_Receive+0x460>
    else if (hi2c->XferSize == 2U)
 8003390:	2a02      	cmp	r2, #2
 8003392:	f000 80bf 	beq.w	8003514 <HAL_I2C_Master_Receive+0x2ec>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003396:	f441 6180 	orr.w	r1, r1, #1024	@ 0x400
 800339a:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800339c:	9004      	str	r0, [sp, #16]
 800339e:	6959      	ldr	r1, [r3, #20]
 80033a0:	9104      	str	r1, [sp, #16]
 80033a2:	6999      	ldr	r1, [r3, #24]
 80033a4:	9104      	str	r1, [sp, #16]
 80033a6:	9904      	ldr	r1, [sp, #16]
      if (hi2c->XferSize <= 3U)
 80033a8:	2a03      	cmp	r2, #3
 80033aa:	d847      	bhi.n	800343c <HAL_I2C_Master_Receive+0x214>
        if (hi2c->XferSize == 1U)
 80033ac:	2a01      	cmp	r2, #1
 80033ae:	f000 8142 	beq.w	8003636 <HAL_I2C_Master_Receive+0x40e>
        else if (hi2c->XferSize == 2U)
 80033b2:	2a02      	cmp	r2, #2
 80033b4:	f000 8116 	beq.w	80035e4 <HAL_I2C_Master_Receive+0x3bc>
 80033b8:	1c71      	adds	r1, r6, #1
 80033ba:	d167      	bne.n	800348c <HAL_I2C_Master_Receive+0x264>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	0752      	lsls	r2, r2, #29
 80033c0:	d5fc      	bpl.n	80033bc <HAL_I2C_Master_Receive+0x194>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c2:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033c4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ca:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80033d0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 80033d2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80033d4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 80033da:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 80033dc:	3101      	adds	r1, #1
          hi2c->XferCount--;
 80033de:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80033e0:	1c73      	adds	r3, r6, #1
          hi2c->XferSize--;
 80033e2:	8522      	strh	r2, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 80033e4:	6261      	str	r1, [r4, #36]	@ 0x24
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033e6:	6822      	ldr	r2, [r4, #0]
 80033e8:	d16c      	bne.n	80034c4 <HAL_I2C_Master_Receive+0x29c>
 80033ea:	6953      	ldr	r3, [r2, #20]
 80033ec:	0758      	lsls	r0, r3, #29
 80033ee:	d5fc      	bpl.n	80033ea <HAL_I2C_Master_Receive+0x1c2>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f0:	6813      	ldr	r3, [r2, #0]
 80033f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033f6:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f8:	6913      	ldr	r3, [r2, #16]
 80033fa:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80033fc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 80033fe:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 8003400:	6a60      	ldr	r0, [r4, #36]	@ 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003402:	6821      	ldr	r1, [r4, #0]
          hi2c->XferCount--;
 8003404:	3b01      	subs	r3, #1
 8003406:	b29b      	uxth	r3, r3
 8003408:	8563      	strh	r3, [r4, #42]	@ 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340a:	6909      	ldr	r1, [r1, #16]
          hi2c->XferSize--;
 800340c:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 800340e:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 8003412:	8523      	strh	r3, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 8003414:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003418:	7041      	strb	r1, [r0, #1]
          hi2c->XferSize--;
 800341a:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800341c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 800341e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 8003420:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8003422:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8003424:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8003426:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8003428:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 800342a:	6261      	str	r1, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 800342c:	8522      	strh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 800342e:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003430:	2a00      	cmp	r2, #0
 8003432:	f43f af7e 	beq.w	8003332 <HAL_I2C_Master_Receive+0x10a>
      if (hi2c->XferSize <= 3U)
 8003436:	2a03      	cmp	r2, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003438:	6823      	ldr	r3, [r4, #0]
      if (hi2c->XferSize <= 3U)
 800343a:	d9b7      	bls.n	80033ac <HAL_I2C_Master_Receive+0x184>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800343c:	695a      	ldr	r2, [r3, #20]
 800343e:	0652      	lsls	r2, r2, #25
 8003440:	f100 80a7 	bmi.w	8003592 <HAL_I2C_Master_Receive+0x36a>
 8003444:	2e00      	cmp	r6, #0
 8003446:	f000 80a0 	beq.w	800358a <HAL_I2C_Master_Receive+0x362>
 800344a:	e00c      	b.n	8003466 <HAL_I2C_Master_Receive+0x23e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344c:	f7ff f9a8 	bl	80027a0 <HAL_GetTick>
 8003450:	1b40      	subs	r0, r0, r5
 8003452:	4286      	cmp	r6, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003454:	6823      	ldr	r3, [r4, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003456:	d202      	bcs.n	800345e <HAL_I2C_Master_Receive+0x236>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	0651      	lsls	r1, r2, #25
 800345c:	d524      	bpl.n	80034a8 <HAL_I2C_Master_Receive+0x280>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800345e:	695a      	ldr	r2, [r3, #20]
 8003460:	0652      	lsls	r2, r2, #25
 8003462:	f100 8096 	bmi.w	8003592 <HAL_I2C_Master_Receive+0x36a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003466:	695a      	ldr	r2, [r3, #20]
 8003468:	06d0      	lsls	r0, r2, #27
 800346a:	d5ef      	bpl.n	800344c <HAL_I2C_Master_Receive+0x224>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800346c:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800346e:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8003472:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003474:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003476:	6322      	str	r2, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003478:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800347c:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003480:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003482:	6423      	str	r3, [r4, #64]	@ 0x40
      __HAL_UNLOCK(hi2c);
 8003484:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      return HAL_ERROR;
 8003488:	2701      	movs	r7, #1
 800348a:	e779      	b.n	8003380 <HAL_I2C_Master_Receive+0x158>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800348c:	695a      	ldr	r2, [r3, #20]
 800348e:	0752      	lsls	r2, r2, #29
 8003490:	d497      	bmi.n	80033c2 <HAL_I2C_Master_Receive+0x19a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003492:	f7ff f985 	bl	80027a0 <HAL_GetTick>
 8003496:	1b43      	subs	r3, r0, r5
 8003498:	429e      	cmp	r6, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800349a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800349c:	d301      	bcc.n	80034a2 <HAL_I2C_Master_Receive+0x27a>
 800349e:	2e00      	cmp	r6, #0
 80034a0:	d1f4      	bne.n	800348c <HAL_I2C_Master_Receive+0x264>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034a2:	695a      	ldr	r2, [r3, #20]
 80034a4:	0751      	lsls	r1, r2, #29
 80034a6:	d4f1      	bmi.n	800348c <HAL_I2C_Master_Receive+0x264>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034a8:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80034aa:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034ac:	6322      	str	r2, [r4, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b2:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80034b8:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034bc:	f043 0320 	orr.w	r3, r3, #32
 80034c0:	6423      	str	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 80034c2:	e75c      	b.n	800337e <HAL_I2C_Master_Receive+0x156>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034c4:	6953      	ldr	r3, [r2, #20]
 80034c6:	075b      	lsls	r3, r3, #29
 80034c8:	f100 80ec 	bmi.w	80036a4 <HAL_I2C_Master_Receive+0x47c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034cc:	f7ff f968 	bl	80027a0 <HAL_GetTick>
 80034d0:	1b43      	subs	r3, r0, r5
 80034d2:	429e      	cmp	r6, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034d4:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d6:	d301      	bcc.n	80034dc <HAL_I2C_Master_Receive+0x2b4>
 80034d8:	2e00      	cmp	r6, #0
 80034da:	d1f3      	bne.n	80034c4 <HAL_I2C_Master_Receive+0x29c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034dc:	6953      	ldr	r3, [r2, #20]
 80034de:	0759      	lsls	r1, r3, #29
 80034e0:	d4f0      	bmi.n	80034c4 <HAL_I2C_Master_Receive+0x29c>
 80034e2:	e7e1      	b.n	80034a8 <HAL_I2C_Master_Receive+0x280>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e4:	6822      	ldr	r2, [r4, #0]
 80034e6:	9005      	str	r0, [sp, #20]
 80034e8:	6953      	ldr	r3, [r2, #20]
 80034ea:	9305      	str	r3, [sp, #20]
 80034ec:	6993      	ldr	r3, [r2, #24]
 80034ee:	9305      	str	r3, [sp, #20]
 80034f0:	9b05      	ldr	r3, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034f2:	6813      	ldr	r3, [r2, #0]
 80034f4:	1c71      	adds	r1, r6, #1
 80034f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034fa:	6013      	str	r3, [r2, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034fc:	f040 80d4 	bne.w	80036a8 <HAL_I2C_Master_Receive+0x480>
 8003500:	6953      	ldr	r3, [r2, #20]
 8003502:	07db      	lsls	r3, r3, #31
 8003504:	d5fc      	bpl.n	8003500 <HAL_I2C_Master_Receive+0x2d8>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003506:	f048 03f1 	orr.w	r3, r8, #241	@ 0xf1
 800350a:	6113      	str	r3, [r2, #16]
 800350c:	e6fb      	b.n	8003306 <HAL_I2C_Master_Receive+0xde>
 800350e:	bf00      	nop
 8003510:	ffff0000 	.word	0xffff0000
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003514:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 8003518:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800351a:	6819      	ldr	r1, [r3, #0]
 800351c:	f441 6100 	orr.w	r1, r1, #2048	@ 0x800
 8003520:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003522:	9003      	str	r0, [sp, #12]
 8003524:	6959      	ldr	r1, [r3, #20]
 8003526:	9103      	str	r1, [sp, #12]
 8003528:	6999      	ldr	r1, [r3, #24]
 800352a:	9103      	str	r1, [sp, #12]
 800352c:	9903      	ldr	r1, [sp, #12]
 800352e:	e73b      	b.n	80033a8 <HAL_I2C_Master_Receive+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003530:	6943      	ldr	r3, [r0, #20]
 8003532:	07db      	lsls	r3, r3, #31
 8003534:	f53f aedf 	bmi.w	80032f6 <HAL_I2C_Master_Receive+0xce>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003538:	f7ff f932 	bl	80027a0 <HAL_GetTick>
 800353c:	1b43      	subs	r3, r0, r5
 800353e:	429e      	cmp	r6, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003540:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003542:	d301      	bcc.n	8003548 <HAL_I2C_Master_Receive+0x320>
 8003544:	2e00      	cmp	r6, #0
 8003546:	d1f3      	bne.n	8003530 <HAL_I2C_Master_Receive+0x308>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003548:	6943      	ldr	r3, [r0, #20]
 800354a:	07d9      	lsls	r1, r3, #31
 800354c:	d4f0      	bmi.n	8003530 <HAL_I2C_Master_Receive+0x308>
          hi2c->PreviousState     = I2C_STATE_NONE;
 800354e:	2200      	movs	r2, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8003550:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003552:	6322      	str	r2, [r4, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003554:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003558:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800355c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800355e:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003562:	f043 0320 	orr.w	r3, r3, #32
 8003566:	6423      	str	r3, [r4, #64]	@ 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003568:	6803      	ldr	r3, [r0, #0]
 800356a:	05da      	lsls	r2, r3, #23
 800356c:	f57f af07 	bpl.w	800337e <HAL_I2C_Master_Receive+0x156>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003570:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003574:	6423      	str	r3, [r4, #64]	@ 0x40
 8003576:	e702      	b.n	800337e <HAL_I2C_Master_Receive+0x156>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003578:	f7ff f912 	bl	80027a0 <HAL_GetTick>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800357c:	6823      	ldr	r3, [r4, #0]
 800357e:	695a      	ldr	r2, [r3, #20]
 8003580:	0651      	lsls	r1, r2, #25
 8003582:	d591      	bpl.n	80034a8 <HAL_I2C_Master_Receive+0x280>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003584:	695a      	ldr	r2, [r3, #20]
 8003586:	0652      	lsls	r2, r2, #25
 8003588:	d403      	bmi.n	8003592 <HAL_I2C_Master_Receive+0x36a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800358a:	695a      	ldr	r2, [r3, #20]
 800358c:	06d0      	lsls	r0, r2, #27
 800358e:	d5f3      	bpl.n	8003578 <HAL_I2C_Master_Receive+0x350>
 8003590:	e76c      	b.n	800346c <HAL_I2C_Master_Receive+0x244>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003592:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 8003598:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800359a:	6821      	ldr	r1, [r4, #0]
        hi2c->XferSize--;
 800359c:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
        hi2c->pBuffPtr++;
 800359e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	8563      	strh	r3, [r4, #42]	@ 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035a6:	694b      	ldr	r3, [r1, #20]
        hi2c->XferSize--;
 80035a8:	3a01      	subs	r2, #1
 80035aa:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 80035ac:	f100 0c01 	add.w	ip, r0, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035b0:	075b      	lsls	r3, r3, #29
        hi2c->XferSize--;
 80035b2:	8522      	strh	r2, [r4, #40]	@ 0x28
        hi2c->pBuffPtr++;
 80035b4:	f8c4 c024 	str.w	ip, [r4, #36]	@ 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035b8:	f57f af3a 	bpl.w	8003430 <HAL_I2C_Master_Receive+0x208>
          if (hi2c->XferSize == 3U)
 80035bc:	2a03      	cmp	r2, #3
 80035be:	d103      	bne.n	80035c8 <HAL_I2C_Master_Receive+0x3a0>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c0:	680b      	ldr	r3, [r1, #0]
 80035c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80035c6:	600b      	str	r3, [r1, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c8:	690b      	ldr	r3, [r1, #16]
 80035ca:	7043      	strb	r3, [r0, #1]
          hi2c->pBuffPtr++;
 80035cc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
          hi2c->XferSize--;
 80035ce:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
          hi2c->pBuffPtr++;
 80035d0:	3301      	adds	r3, #1
 80035d2:	6263      	str	r3, [r4, #36]	@ 0x24
          hi2c->XferCount--;
 80035d4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 80035d6:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80035d8:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 80035da:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 80035dc:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 80035de:	8522      	strh	r2, [r4, #40]	@ 0x28
          hi2c->XferCount--;
 80035e0:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80035e2:	e725      	b.n	8003430 <HAL_I2C_Master_Receive+0x208>
 80035e4:	1c70      	adds	r0, r6, #1
 80035e6:	d117      	bne.n	8003618 <HAL_I2C_Master_Receive+0x3f0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e8:	695a      	ldr	r2, [r3, #20]
 80035ea:	0751      	lsls	r1, r2, #29
 80035ec:	d5fc      	bpl.n	80035e8 <HAL_I2C_Master_Receive+0x3c0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035f4:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80035fa:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 80035fc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
          hi2c->pBuffPtr++;
 80035fe:	6a62      	ldr	r2, [r4, #36]	@ 0x24
          hi2c->XferCount--;
 8003600:	3b01      	subs	r3, #1
 8003602:	b29b      	uxth	r3, r3
 8003604:	8563      	strh	r3, [r4, #42]	@ 0x2a
          hi2c->XferSize--;
 8003606:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8003608:	3b01      	subs	r3, #1
 800360a:	8523      	strh	r3, [r4, #40]	@ 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800360c:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 800360e:	1c51      	adds	r1, r2, #1
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003610:	691b      	ldr	r3, [r3, #16]
          hi2c->pBuffPtr++;
 8003612:	6261      	str	r1, [r4, #36]	@ 0x24
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003614:	7053      	strb	r3, [r2, #1]
          hi2c->pBuffPtr++;
 8003616:	e7d9      	b.n	80035cc <HAL_I2C_Master_Receive+0x3a4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	0750      	lsls	r0, r2, #29
 800361c:	d4e7      	bmi.n	80035ee <HAL_I2C_Master_Receive+0x3c6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361e:	f7ff f8bf 	bl	80027a0 <HAL_GetTick>
 8003622:	1b43      	subs	r3, r0, r5
 8003624:	429e      	cmp	r6, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003626:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003628:	d301      	bcc.n	800362e <HAL_I2C_Master_Receive+0x406>
 800362a:	2e00      	cmp	r6, #0
 800362c:	d1f4      	bne.n	8003618 <HAL_I2C_Master_Receive+0x3f0>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800362e:	695a      	ldr	r2, [r3, #20]
 8003630:	0752      	lsls	r2, r2, #29
 8003632:	d4f1      	bmi.n	8003618 <HAL_I2C_Master_Receive+0x3f0>
 8003634:	e738      	b.n	80034a8 <HAL_I2C_Master_Receive+0x280>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003636:	695a      	ldr	r2, [r3, #20]
 8003638:	0650      	lsls	r0, r2, #25
 800363a:	d421      	bmi.n	8003680 <HAL_I2C_Master_Receive+0x458>
 800363c:	b1e6      	cbz	r6, 8003678 <HAL_I2C_Master_Receive+0x450>
 800363e:	e00c      	b.n	800365a <HAL_I2C_Master_Receive+0x432>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003640:	f7ff f8ae 	bl	80027a0 <HAL_GetTick>
 8003644:	1b40      	subs	r0, r0, r5
 8003646:	42b0      	cmp	r0, r6
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003648:	6823      	ldr	r3, [r4, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800364a:	d903      	bls.n	8003654 <HAL_I2C_Master_Receive+0x42c>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800364c:	695a      	ldr	r2, [r3, #20]
 800364e:	0652      	lsls	r2, r2, #25
 8003650:	f57f af2a 	bpl.w	80034a8 <HAL_I2C_Master_Receive+0x280>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	0650      	lsls	r0, r2, #25
 8003658:	d412      	bmi.n	8003680 <HAL_I2C_Master_Receive+0x458>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	06d1      	lsls	r1, r2, #27
 800365e:	f53f af05 	bmi.w	800346c <HAL_I2C_Master_Receive+0x244>
 8003662:	e7ed      	b.n	8003640 <HAL_I2C_Master_Receive+0x418>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003664:	f7ff f89c 	bl	80027a0 <HAL_GetTick>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	695a      	ldr	r2, [r3, #20]
 800366c:	0652      	lsls	r2, r2, #25
 800366e:	f57f af1b 	bpl.w	80034a8 <HAL_I2C_Master_Receive+0x280>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003672:	695a      	ldr	r2, [r3, #20]
 8003674:	0650      	lsls	r0, r2, #25
 8003676:	d403      	bmi.n	8003680 <HAL_I2C_Master_Receive+0x458>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003678:	695a      	ldr	r2, [r3, #20]
 800367a:	06d1      	lsls	r1, r2, #27
 800367c:	d5f2      	bpl.n	8003664 <HAL_I2C_Master_Receive+0x43c>
 800367e:	e6f5      	b.n	800346c <HAL_I2C_Master_Receive+0x244>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003680:	691a      	ldr	r2, [r3, #16]
 8003682:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003684:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003686:	e7a1      	b.n	80035cc <HAL_I2C_Master_Receive+0x3a4>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003688:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 800368c:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800368e:	9002      	str	r0, [sp, #8]
 8003690:	6959      	ldr	r1, [r3, #20]
 8003692:	9102      	str	r1, [sp, #8]
 8003694:	6999      	ldr	r1, [r3, #24]
 8003696:	9102      	str	r1, [sp, #8]
 8003698:	9902      	ldr	r1, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369a:	6819      	ldr	r1, [r3, #0]
 800369c:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 80036a0:	6019      	str	r1, [r3, #0]
 80036a2:	e681      	b.n	80033a8 <HAL_I2C_Master_Receive+0x180>
 80036a4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80036a6:	e6a3      	b.n	80033f0 <HAL_I2C_Master_Receive+0x1c8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036a8:	6953      	ldr	r3, [r2, #20]
 80036aa:	07d9      	lsls	r1, r3, #31
 80036ac:	f53f af2b 	bmi.w	8003506 <HAL_I2C_Master_Receive+0x2de>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b0:	f7ff f876 	bl	80027a0 <HAL_GetTick>
 80036b4:	1b43      	subs	r3, r0, r5
 80036b6:	429e      	cmp	r6, r3
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036b8:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ba:	d301      	bcc.n	80036c0 <HAL_I2C_Master_Receive+0x498>
 80036bc:	2e00      	cmp	r6, #0
 80036be:	d1f3      	bne.n	80036a8 <HAL_I2C_Master_Receive+0x480>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036c0:	6953      	ldr	r3, [r2, #20]
 80036c2:	07df      	lsls	r7, r3, #31
 80036c4:	d4f0      	bmi.n	80036a8 <HAL_I2C_Master_Receive+0x480>
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036c6:	2100      	movs	r1, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 80036c8:	2320      	movs	r3, #32
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036ca:	6321      	str	r1, [r4, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036cc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036d0:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80036d6:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036da:	f043 0320 	orr.w	r3, r3, #32
 80036de:	6423      	str	r3, [r4, #64]	@ 0x40
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036e0:	6813      	ldr	r3, [r2, #0]
 80036e2:	05d8      	lsls	r0, r3, #23
 80036e4:	f53f af44 	bmi.w	8003570 <HAL_I2C_Master_Receive+0x348>
 80036e8:	e649      	b.n	800337e <HAL_I2C_Master_Receive+0x156>
 80036ea:	bf00      	nop

080036ec <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036ec:	2800      	cmp	r0, #0
 80036ee:	f000 81d8 	beq.w	8003aa2 <HAL_RCC_OscConfig+0x3b6>
{
 80036f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036f6:	6803      	ldr	r3, [r0, #0]
 80036f8:	07dd      	lsls	r5, r3, #31
{
 80036fa:	b082      	sub	sp, #8
 80036fc:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036fe:	d52f      	bpl.n	8003760 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003700:	499d      	ldr	r1, [pc, #628]	@ (8003978 <HAL_RCC_OscConfig+0x28c>)
 8003702:	688a      	ldr	r2, [r1, #8]
 8003704:	f002 020c 	and.w	r2, r2, #12
 8003708:	2a04      	cmp	r2, #4
 800370a:	f000 80ec 	beq.w	80038e6 <HAL_RCC_OscConfig+0x1fa>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800370e:	688a      	ldr	r2, [r1, #8]
 8003710:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003714:	2a08      	cmp	r2, #8
 8003716:	f000 80e2 	beq.w	80038de <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800371a:	6863      	ldr	r3, [r4, #4]
 800371c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003720:	f000 80eb 	beq.w	80038fa <HAL_RCC_OscConfig+0x20e>
 8003724:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003728:	f000 8173 	beq.w	8003a12 <HAL_RCC_OscConfig+0x326>
 800372c:	4d92      	ldr	r5, [pc, #584]	@ (8003978 <HAL_RCC_OscConfig+0x28c>)
 800372e:	682a      	ldr	r2, [r5, #0]
 8003730:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003734:	602a      	str	r2, [r5, #0]
 8003736:	682a      	ldr	r2, [r5, #0]
 8003738:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800373c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800373e:	2b00      	cmp	r3, #0
 8003740:	f040 80e0 	bne.w	8003904 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7ff f82c 	bl	80027a0 <HAL_GetTick>
 8003748:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800374a:	e005      	b.n	8003758 <HAL_RCC_OscConfig+0x6c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800374c:	f7ff f828 	bl	80027a0 <HAL_GetTick>
 8003750:	1b80      	subs	r0, r0, r6
 8003752:	2864      	cmp	r0, #100	@ 0x64
 8003754:	f200 8100 	bhi.w	8003958 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003758:	682b      	ldr	r3, [r5, #0]
 800375a:	039f      	lsls	r7, r3, #14
 800375c:	d4f6      	bmi.n	800374c <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	079d      	lsls	r5, r3, #30
 8003762:	d528      	bpl.n	80037b6 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003764:	4a84      	ldr	r2, [pc, #528]	@ (8003978 <HAL_RCC_OscConfig+0x28c>)
 8003766:	6891      	ldr	r1, [r2, #8]
 8003768:	f011 0f0c 	tst.w	r1, #12
 800376c:	f000 809b 	beq.w	80038a6 <HAL_RCC_OscConfig+0x1ba>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003770:	6891      	ldr	r1, [r2, #8]
 8003772:	f001 010c 	and.w	r1, r1, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003776:	2908      	cmp	r1, #8
 8003778:	f000 8091 	beq.w	800389e <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800377c:	68e3      	ldr	r3, [r4, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 810c 	beq.w	800399c <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003784:	4b7d      	ldr	r3, [pc, #500]	@ (800397c <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003786:	4e7c      	ldr	r6, [pc, #496]	@ (8003978 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8003788:	2201      	movs	r2, #1
 800378a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800378c:	f7ff f808 	bl	80027a0 <HAL_GetTick>
 8003790:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003792:	e005      	b.n	80037a0 <HAL_RCC_OscConfig+0xb4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003794:	f7ff f804 	bl	80027a0 <HAL_GetTick>
 8003798:	1b40      	subs	r0, r0, r5
 800379a:	2802      	cmp	r0, #2
 800379c:	f200 80dc 	bhi.w	8003958 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037a0:	6833      	ldr	r3, [r6, #0]
 80037a2:	079f      	lsls	r7, r3, #30
 80037a4:	d5f6      	bpl.n	8003794 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037a6:	6833      	ldr	r3, [r6, #0]
 80037a8:	6922      	ldr	r2, [r4, #16]
 80037aa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80037ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80037b2:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	071a      	lsls	r2, r3, #28
 80037b8:	d45c      	bmi.n	8003874 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ba:	075d      	lsls	r5, r3, #29
 80037bc:	d53a      	bpl.n	8003834 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037be:	4a6e      	ldr	r2, [pc, #440]	@ (8003978 <HAL_RCC_OscConfig+0x28c>)
 80037c0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80037c2:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 80037c6:	f040 8088 	bne.w	80038da <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ca:	9301      	str	r3, [sp, #4]
 80037cc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80037ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80037d4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80037d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037da:	9301      	str	r3, [sp, #4]
 80037dc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80037de:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e0:	4e67      	ldr	r6, [pc, #412]	@ (8003980 <HAL_RCC_OscConfig+0x294>)
 80037e2:	6833      	ldr	r3, [r6, #0]
 80037e4:	05d8      	lsls	r0, r3, #23
 80037e6:	f140 80a7 	bpl.w	8003938 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ea:	68a3      	ldr	r3, [r4, #8]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	f000 80b7 	beq.w	8003960 <HAL_RCC_OscConfig+0x274>
 80037f2:	2b05      	cmp	r3, #5
 80037f4:	f000 811d 	beq.w	8003a32 <HAL_RCC_OscConfig+0x346>
 80037f8:	4e5f      	ldr	r6, [pc, #380]	@ (8003978 <HAL_RCC_OscConfig+0x28c>)
 80037fa:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 80037fc:	f022 0201 	bic.w	r2, r2, #1
 8003800:	6732      	str	r2, [r6, #112]	@ 0x70
 8003802:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8003804:	f022 0204 	bic.w	r2, r2, #4
 8003808:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800380a:	2b00      	cmp	r3, #0
 800380c:	f040 80ad 	bne.w	800396a <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003810:	f7fe ffc6 	bl	80027a0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003814:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003818:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381a:	e005      	b.n	8003828 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381c:	f7fe ffc0 	bl	80027a0 <HAL_GetTick>
 8003820:	1bc0      	subs	r0, r0, r7
 8003822:	4540      	cmp	r0, r8
 8003824:	f200 8098 	bhi.w	8003958 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003828:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800382a:	079b      	lsls	r3, r3, #30
 800382c:	d4f6      	bmi.n	800381c <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800382e:	2d00      	cmp	r5, #0
 8003830:	f040 80f9 	bne.w	8003a26 <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003834:	69a3      	ldr	r3, [r4, #24]
 8003836:	b1cb      	cbz	r3, 800386c <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003838:	4d4f      	ldr	r5, [pc, #316]	@ (8003978 <HAL_RCC_OscConfig+0x28c>)
 800383a:	68aa      	ldr	r2, [r5, #8]
 800383c:	f002 020c 	and.w	r2, r2, #12
 8003840:	2a08      	cmp	r2, #8
 8003842:	f000 80bc 	beq.w	80039be <HAL_RCC_OscConfig+0x2d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003846:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003848:	4b4c      	ldr	r3, [pc, #304]	@ (800397c <HAL_RCC_OscConfig+0x290>)
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003850:	f000 80f9 	beq.w	8003a46 <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003854:	f7fe ffa4 	bl	80027a0 <HAL_GetTick>
 8003858:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385a:	e004      	b.n	8003866 <HAL_RCC_OscConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385c:	f7fe ffa0 	bl	80027a0 <HAL_GetTick>
 8003860:	1b00      	subs	r0, r0, r4
 8003862:	2802      	cmp	r0, #2
 8003864:	d878      	bhi.n	8003958 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003866:	682b      	ldr	r3, [r5, #0]
 8003868:	019b      	lsls	r3, r3, #6
 800386a:	d4f7      	bmi.n	800385c <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800386c:	2000      	movs	r0, #0
}
 800386e:	b002      	add	sp, #8
 8003870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003874:	6963      	ldr	r3, [r4, #20]
 8003876:	b1fb      	cbz	r3, 80038b8 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 8003878:	4b40      	ldr	r3, [pc, #256]	@ (800397c <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387a:	4e3f      	ldr	r6, [pc, #252]	@ (8003978 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 800387c:	2201      	movs	r2, #1
 800387e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8003882:	f7fe ff8d 	bl	80027a0 <HAL_GetTick>
 8003886:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003888:	e004      	b.n	8003894 <HAL_RCC_OscConfig+0x1a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800388a:	f7fe ff89 	bl	80027a0 <HAL_GetTick>
 800388e:	1b40      	subs	r0, r0, r5
 8003890:	2802      	cmp	r0, #2
 8003892:	d861      	bhi.n	8003958 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003894:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8003896:	079b      	lsls	r3, r3, #30
 8003898:	d5f7      	bpl.n	800388a <HAL_RCC_OscConfig+0x19e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800389a:	6823      	ldr	r3, [r4, #0]
 800389c:	e78d      	b.n	80037ba <HAL_RCC_OscConfig+0xce>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800389e:	6852      	ldr	r2, [r2, #4]
 80038a0:	0251      	lsls	r1, r2, #9
 80038a2:	f53f af6b 	bmi.w	800377c <HAL_RCC_OscConfig+0x90>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a6:	4a34      	ldr	r2, [pc, #208]	@ (8003978 <HAL_RCC_OscConfig+0x28c>)
 80038a8:	6812      	ldr	r2, [r2, #0]
 80038aa:	0792      	lsls	r2, r2, #30
 80038ac:	d538      	bpl.n	8003920 <HAL_RCC_OscConfig+0x234>
 80038ae:	68e2      	ldr	r2, [r4, #12]
 80038b0:	2a01      	cmp	r2, #1
 80038b2:	d035      	beq.n	8003920 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 80038b4:	2001      	movs	r0, #1
 80038b6:	e7da      	b.n	800386e <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 80038b8:	4a30      	ldr	r2, [pc, #192]	@ (800397c <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ba:	4e2f      	ldr	r6, [pc, #188]	@ (8003978 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 80038bc:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80038c0:	f7fe ff6e 	bl	80027a0 <HAL_GetTick>
 80038c4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c6:	e004      	b.n	80038d2 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038c8:	f7fe ff6a 	bl	80027a0 <HAL_GetTick>
 80038cc:	1b40      	subs	r0, r0, r5
 80038ce:	2802      	cmp	r0, #2
 80038d0:	d842      	bhi.n	8003958 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d2:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80038d4:	079f      	lsls	r7, r3, #30
 80038d6:	d4f7      	bmi.n	80038c8 <HAL_RCC_OscConfig+0x1dc>
 80038d8:	e7df      	b.n	800389a <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 80038da:	2500      	movs	r5, #0
 80038dc:	e780      	b.n	80037e0 <HAL_RCC_OscConfig+0xf4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038de:	684a      	ldr	r2, [r1, #4]
 80038e0:	0251      	lsls	r1, r2, #9
 80038e2:	f57f af1a 	bpl.w	800371a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038e6:	4a24      	ldr	r2, [pc, #144]	@ (8003978 <HAL_RCC_OscConfig+0x28c>)
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	0392      	lsls	r2, r2, #14
 80038ec:	f57f af38 	bpl.w	8003760 <HAL_RCC_OscConfig+0x74>
 80038f0:	6862      	ldr	r2, [r4, #4]
 80038f2:	2a00      	cmp	r2, #0
 80038f4:	f47f af34 	bne.w	8003760 <HAL_RCC_OscConfig+0x74>
 80038f8:	e7dc      	b.n	80038b4 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003978 <HAL_RCC_OscConfig+0x28c>)
 80038fc:	6813      	ldr	r3, [r2, #0]
 80038fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003902:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003904:	f7fe ff4c 	bl	80027a0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003908:	4e1b      	ldr	r6, [pc, #108]	@ (8003978 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 800390a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390c:	e004      	b.n	8003918 <HAL_RCC_OscConfig+0x22c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800390e:	f7fe ff47 	bl	80027a0 <HAL_GetTick>
 8003912:	1b40      	subs	r0, r0, r5
 8003914:	2864      	cmp	r0, #100	@ 0x64
 8003916:	d81f      	bhi.n	8003958 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003918:	6833      	ldr	r3, [r6, #0]
 800391a:	039b      	lsls	r3, r3, #14
 800391c:	d5f7      	bpl.n	800390e <HAL_RCC_OscConfig+0x222>
 800391e:	e71e      	b.n	800375e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003920:	4915      	ldr	r1, [pc, #84]	@ (8003978 <HAL_RCC_OscConfig+0x28c>)
 8003922:	6920      	ldr	r0, [r4, #16]
 8003924:	680a      	ldr	r2, [r1, #0]
 8003926:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 800392a:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800392e:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003930:	071a      	lsls	r2, r3, #28
 8003932:	f57f af42 	bpl.w	80037ba <HAL_RCC_OscConfig+0xce>
 8003936:	e79d      	b.n	8003874 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003938:	6833      	ldr	r3, [r6, #0]
 800393a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800393e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003940:	f7fe ff2e 	bl	80027a0 <HAL_GetTick>
 8003944:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003946:	6833      	ldr	r3, [r6, #0]
 8003948:	05d9      	lsls	r1, r3, #23
 800394a:	f53f af4e 	bmi.w	80037ea <HAL_RCC_OscConfig+0xfe>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394e:	f7fe ff27 	bl	80027a0 <HAL_GetTick>
 8003952:	1bc0      	subs	r0, r0, r7
 8003954:	2802      	cmp	r0, #2
 8003956:	d9f6      	bls.n	8003946 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8003958:	2003      	movs	r0, #3
}
 800395a:	b002      	add	sp, #8
 800395c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003960:	4a05      	ldr	r2, [pc, #20]	@ (8003978 <HAL_RCC_OscConfig+0x28c>)
 8003962:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8003964:	f043 0301 	orr.w	r3, r3, #1
 8003968:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800396a:	f7fe ff19 	bl	80027a0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396e:	4f02      	ldr	r7, [pc, #8]	@ (8003978 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8003970:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003972:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003976:	e00a      	b.n	800398e <HAL_RCC_OscConfig+0x2a2>
 8003978:	40023800 	.word	0x40023800
 800397c:	42470000 	.word	0x42470000
 8003980:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003984:	f7fe ff0c 	bl	80027a0 <HAL_GetTick>
 8003988:	1b80      	subs	r0, r0, r6
 800398a:	4540      	cmp	r0, r8
 800398c:	d8e4      	bhi.n	8003958 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003990:	079a      	lsls	r2, r3, #30
 8003992:	d5f7      	bpl.n	8003984 <HAL_RCC_OscConfig+0x298>
    if (pwrclkchanged == SET)
 8003994:	2d00      	cmp	r5, #0
 8003996:	f43f af4d 	beq.w	8003834 <HAL_RCC_OscConfig+0x148>
 800399a:	e044      	b.n	8003a26 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 800399c:	4a42      	ldr	r2, [pc, #264]	@ (8003aa8 <HAL_RCC_OscConfig+0x3bc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399e:	4e43      	ldr	r6, [pc, #268]	@ (8003aac <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 80039a0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80039a2:	f7fe fefd 	bl	80027a0 <HAL_GetTick>
 80039a6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039a8:	e004      	b.n	80039b4 <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039aa:	f7fe fef9 	bl	80027a0 <HAL_GetTick>
 80039ae:	1b40      	subs	r0, r0, r5
 80039b0:	2802      	cmp	r0, #2
 80039b2:	d8d1      	bhi.n	8003958 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b4:	6833      	ldr	r3, [r6, #0]
 80039b6:	0799      	lsls	r1, r3, #30
 80039b8:	d4f7      	bmi.n	80039aa <HAL_RCC_OscConfig+0x2be>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ba:	6823      	ldr	r3, [r4, #0]
 80039bc:	e6fb      	b.n	80037b6 <HAL_RCC_OscConfig+0xca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039be:	2b01      	cmp	r3, #1
 80039c0:	f43f af78 	beq.w	80038b4 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 80039c4:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c6:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c8:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039cc:	4291      	cmp	r1, r2
 80039ce:	f47f af71 	bne.w	80038b4 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d2:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039d4:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039d8:	4291      	cmp	r1, r2
 80039da:	f47f af6b 	bne.w	80038b4 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039de:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80039e0:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 80039e4:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039e6:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80039ea:	f47f af63 	bne.w	80038b4 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039ee:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80039f0:	0852      	lsrs	r2, r2, #1
 80039f2:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80039f6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039f8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80039fc:	f47f af5a 	bne.w	80038b4 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a00:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003a02:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a06:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8003a0a:	bf14      	ite	ne
 8003a0c:	2001      	movne	r0, #1
 8003a0e:	2000      	moveq	r0, #0
 8003a10:	e72d      	b.n	800386e <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a12:	4b26      	ldr	r3, [pc, #152]	@ (8003aac <HAL_RCC_OscConfig+0x3c0>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003a22:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a24:	e76e      	b.n	8003904 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a26:	4a21      	ldr	r2, [pc, #132]	@ (8003aac <HAL_RCC_OscConfig+0x3c0>)
 8003a28:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003a2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a30:	e700      	b.n	8003834 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a32:	4b1e      	ldr	r3, [pc, #120]	@ (8003aac <HAL_RCC_OscConfig+0x3c0>)
 8003a34:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a36:	f042 0204 	orr.w	r2, r2, #4
 8003a3a:	671a      	str	r2, [r3, #112]	@ 0x70
 8003a3c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a44:	e791      	b.n	800396a <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8003a46:	f7fe feab 	bl	80027a0 <HAL_GetTick>
 8003a4a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4c:	e005      	b.n	8003a5a <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a4e:	f7fe fea7 	bl	80027a0 <HAL_GetTick>
 8003a52:	1b80      	subs	r0, r0, r6
 8003a54:	2802      	cmp	r0, #2
 8003a56:	f63f af7f 	bhi.w	8003958 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5a:	682b      	ldr	r3, [r5, #0]
 8003a5c:	0199      	lsls	r1, r3, #6
 8003a5e:	d4f6      	bmi.n	8003a4e <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a60:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8003a64:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003a66:	430b      	orrs	r3, r1
 8003a68:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003a6c:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 8003a70:	0852      	lsrs	r2, r2, #1
        __HAL_RCC_PLL_ENABLE();
 8003a72:	490d      	ldr	r1, [pc, #52]	@ (8003aa8 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a74:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003a78:	3a01      	subs	r2, #1
 8003a7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8003a7e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a80:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003a82:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003a84:	f7fe fe8c 	bl	80027a0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a88:	4d08      	ldr	r5, [pc, #32]	@ (8003aac <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 8003a8a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8c:	e005      	b.n	8003a9a <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8e:	f7fe fe87 	bl	80027a0 <HAL_GetTick>
 8003a92:	1b00      	subs	r0, r0, r4
 8003a94:	2802      	cmp	r0, #2
 8003a96:	f63f af5f 	bhi.w	8003958 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9a:	682b      	ldr	r3, [r5, #0]
 8003a9c:	019a      	lsls	r2, r3, #6
 8003a9e:	d5f6      	bpl.n	8003a8e <HAL_RCC_OscConfig+0x3a2>
 8003aa0:	e6e4      	b.n	800386c <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 8003aa2:	2001      	movs	r0, #1
}
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	42470000 	.word	0x42470000
 8003aac:	40023800 	.word	0x40023800

08003ab0 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ab0:	4916      	ldr	r1, [pc, #88]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8003ab2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ab4:	688b      	ldr	r3, [r1, #8]
 8003ab6:	f003 030c 	and.w	r3, r3, #12
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d01b      	beq.n	8003af6 <HAL_RCC_GetSysClockFreq+0x46>
 8003abe:	2b08      	cmp	r3, #8
 8003ac0:	d001      	beq.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ac2:	4813      	ldr	r0, [pc, #76]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003ac4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ac6:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ac8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aca:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003acc:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ad0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ad4:	d111      	bne.n	8003afa <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ad6:	480e      	ldr	r0, [pc, #56]	@ (8003b10 <HAL_RCC_GetSysClockFreq+0x60>)
 8003ad8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003adc:	fba1 0100 	umull	r0, r1, r1, r0
 8003ae0:	f7fd f8da 	bl	8000c98 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ae4:	4b09      	ldr	r3, [pc, #36]	@ (8003b0c <HAL_RCC_GetSysClockFreq+0x5c>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003aec:	3301      	adds	r3, #1
 8003aee:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8003af0:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003af4:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003af6:	4807      	ldr	r0, [pc, #28]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8003af8:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003afa:	4806      	ldr	r0, [pc, #24]	@ (8003b14 <HAL_RCC_GetSysClockFreq+0x64>)
 8003afc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003b00:	2300      	movs	r3, #0
 8003b02:	fba1 0100 	umull	r0, r1, r1, r0
 8003b06:	f7fd f8c7 	bl	8000c98 <__aeabi_uldivmod>
 8003b0a:	e7eb      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	00f42400 	.word	0x00f42400
 8003b14:	017d7840 	.word	0x017d7840

08003b18 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003b18:	2800      	cmp	r0, #0
 8003b1a:	f000 8087 	beq.w	8003c2c <HAL_RCC_ClockConfig+0x114>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b1e:	4a48      	ldr	r2, [pc, #288]	@ (8003c40 <HAL_RCC_ClockConfig+0x128>)
 8003b20:	6813      	ldr	r3, [r2, #0]
 8003b22:	f003 0307 	and.w	r3, r3, #7
 8003b26:	428b      	cmp	r3, r1
{
 8003b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b2c:	460d      	mov	r5, r1
 8003b2e:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b30:	d209      	bcs.n	8003b46 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b32:	b2cb      	uxtb	r3, r1
 8003b34:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b36:	6813      	ldr	r3, [r2, #0]
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	428b      	cmp	r3, r1
 8003b3e:	d002      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8003b40:	2001      	movs	r0, #1
}
 8003b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	0798      	lsls	r0, r3, #30
 8003b4a:	d514      	bpl.n	8003b76 <HAL_RCC_ClockConfig+0x5e>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b4c:	0759      	lsls	r1, r3, #29
 8003b4e:	d504      	bpl.n	8003b5a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b50:	493c      	ldr	r1, [pc, #240]	@ (8003c44 <HAL_RCC_ClockConfig+0x12c>)
 8003b52:	688a      	ldr	r2, [r1, #8]
 8003b54:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8003b58:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b5a:	071a      	lsls	r2, r3, #28
 8003b5c:	d504      	bpl.n	8003b68 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b5e:	4939      	ldr	r1, [pc, #228]	@ (8003c44 <HAL_RCC_ClockConfig+0x12c>)
 8003b60:	688a      	ldr	r2, [r1, #8]
 8003b62:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8003b66:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b68:	4936      	ldr	r1, [pc, #216]	@ (8003c44 <HAL_RCC_ClockConfig+0x12c>)
 8003b6a:	68a0      	ldr	r0, [r4, #8]
 8003b6c:	688a      	ldr	r2, [r1, #8]
 8003b6e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003b72:	4302      	orrs	r2, r0
 8003b74:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b76:	07df      	lsls	r7, r3, #31
 8003b78:	d521      	bpl.n	8003bbe <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b7a:	6862      	ldr	r2, [r4, #4]
 8003b7c:	2a01      	cmp	r2, #1
 8003b7e:	d057      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x118>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b80:	1e93      	subs	r3, r2, #2
 8003b82:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b84:	4b2f      	ldr	r3, [pc, #188]	@ (8003c44 <HAL_RCC_ClockConfig+0x12c>)
 8003b86:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b88:	d94d      	bls.n	8003c26 <HAL_RCC_ClockConfig+0x10e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8a:	0799      	lsls	r1, r3, #30
 8003b8c:	d5d8      	bpl.n	8003b40 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b8e:	4e2d      	ldr	r6, [pc, #180]	@ (8003c44 <HAL_RCC_ClockConfig+0x12c>)
 8003b90:	68b3      	ldr	r3, [r6, #8]
 8003b92:	f023 0303 	bic.w	r3, r3, #3
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003b9a:	f7fe fe01 	bl	80027a0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b9e:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8003ba2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba4:	e004      	b.n	8003bb0 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba6:	f7fe fdfb 	bl	80027a0 <HAL_GetTick>
 8003baa:	1bc0      	subs	r0, r0, r7
 8003bac:	4540      	cmp	r0, r8
 8003bae:	d844      	bhi.n	8003c3a <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb0:	68b3      	ldr	r3, [r6, #8]
 8003bb2:	6862      	ldr	r2, [r4, #4]
 8003bb4:	f003 030c 	and.w	r3, r3, #12
 8003bb8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003bbc:	d1f3      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bbe:	4a20      	ldr	r2, [pc, #128]	@ (8003c40 <HAL_RCC_ClockConfig+0x128>)
 8003bc0:	6813      	ldr	r3, [r2, #0]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	42ab      	cmp	r3, r5
 8003bc8:	d906      	bls.n	8003bd8 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bca:	b2eb      	uxtb	r3, r5
 8003bcc:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bce:	6813      	ldr	r3, [r2, #0]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	42ab      	cmp	r3, r5
 8003bd6:	d1b3      	bne.n	8003b40 <HAL_RCC_ClockConfig+0x28>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd8:	6823      	ldr	r3, [r4, #0]
 8003bda:	075a      	lsls	r2, r3, #29
 8003bdc:	d506      	bpl.n	8003bec <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bde:	4919      	ldr	r1, [pc, #100]	@ (8003c44 <HAL_RCC_ClockConfig+0x12c>)
 8003be0:	68e0      	ldr	r0, [r4, #12]
 8003be2:	688a      	ldr	r2, [r1, #8]
 8003be4:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8003be8:	4302      	orrs	r2, r0
 8003bea:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bec:	071b      	lsls	r3, r3, #28
 8003bee:	d507      	bpl.n	8003c00 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bf0:	4a14      	ldr	r2, [pc, #80]	@ (8003c44 <HAL_RCC_ClockConfig+0x12c>)
 8003bf2:	6921      	ldr	r1, [r4, #16]
 8003bf4:	6893      	ldr	r3, [r2, #8]
 8003bf6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8003bfa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003bfe:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c00:	f7ff ff56 	bl	8003ab0 <HAL_RCC_GetSysClockFreq>
 8003c04:	4a0f      	ldr	r2, [pc, #60]	@ (8003c44 <HAL_RCC_ClockConfig+0x12c>)
 8003c06:	4c10      	ldr	r4, [pc, #64]	@ (8003c48 <HAL_RCC_ClockConfig+0x130>)
 8003c08:	6892      	ldr	r2, [r2, #8]
 8003c0a:	4910      	ldr	r1, [pc, #64]	@ (8003c4c <HAL_RCC_ClockConfig+0x134>)
 8003c0c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003c10:	4603      	mov	r3, r0
 8003c12:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick(uwTickPrio);
 8003c14:	480e      	ldr	r0, [pc, #56]	@ (8003c50 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c16:	40d3      	lsrs	r3, r2
  HAL_InitTick(uwTickPrio);
 8003c18:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c1a:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8003c1c:	f7fe fd76 	bl	800270c <HAL_InitTick>
  return HAL_OK;
 8003c20:	2000      	movs	r0, #0
}
 8003c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c26:	0198      	lsls	r0, r3, #6
 8003c28:	d4b1      	bmi.n	8003b8e <HAL_RCC_ClockConfig+0x76>
 8003c2a:	e789      	b.n	8003b40 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8003c2c:	2001      	movs	r0, #1
}
 8003c2e:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c30:	4b04      	ldr	r3, [pc, #16]	@ (8003c44 <HAL_RCC_ClockConfig+0x12c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	039e      	lsls	r6, r3, #14
 8003c36:	d4aa      	bmi.n	8003b8e <HAL_RCC_ClockConfig+0x76>
 8003c38:	e782      	b.n	8003b40 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8003c3a:	2003      	movs	r0, #3
 8003c3c:	e781      	b.n	8003b42 <HAL_RCC_ClockConfig+0x2a>
 8003c3e:	bf00      	nop
 8003c40:	40023c00 	.word	0x40023c00
 8003c44:	40023800 	.word	0x40023800
 8003c48:	0800e7a4 	.word	0x0800e7a4
 8003c4c:	20000020 	.word	0x20000020
 8003c50:	20000028 	.word	0x20000028

08003c54 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c54:	4b04      	ldr	r3, [pc, #16]	@ (8003c68 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8003c56:	4905      	ldr	r1, [pc, #20]	@ (8003c6c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	4a05      	ldr	r2, [pc, #20]	@ (8003c70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003c5c:	6808      	ldr	r0, [r1, #0]
 8003c5e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003c62:	5cd3      	ldrb	r3, [r2, r3]
}
 8003c64:	40d8      	lsrs	r0, r3
 8003c66:	4770      	bx	lr
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	20000020 	.word	0x20000020
 8003c70:	0800e79c 	.word	0x0800e79c

08003c74 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c74:	4b04      	ldr	r3, [pc, #16]	@ (8003c88 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8003c76:	4905      	ldr	r1, [pc, #20]	@ (8003c8c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	4a05      	ldr	r2, [pc, #20]	@ (8003c90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003c7c:	6808      	ldr	r0, [r1, #0]
 8003c7e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003c82:	5cd3      	ldrb	r3, [r2, r3]
}
 8003c84:	40d8      	lsrs	r0, r3
 8003c86:	4770      	bx	lr
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	20000020 	.word	0x20000020
 8003c90:	0800e79c 	.word	0x0800e79c

08003c94 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c94:	2800      	cmp	r0, #0
 8003c96:	d071      	beq.n	8003d7c <HAL_TIM_Base_Init+0xe8>
{
 8003c98:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c9a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003c9e:	4604      	mov	r4, r0
 8003ca0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d053      	beq.n	8003d50 <HAL_TIM_Base_Init+0xbc>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ca8:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003caa:	4e35      	ldr	r6, [pc, #212]	@ (8003d80 <HAL_TIM_Base_Init+0xec>)

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cac:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cae:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cb0:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cb8:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8003cba:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cbc:	d04d      	beq.n	8003d5a <HAL_TIM_Base_Init+0xc6>
 8003cbe:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003cc2:	d017      	beq.n	8003cf4 <HAL_TIM_Base_Init+0x60>
 8003cc4:	f5a6 467c 	sub.w	r6, r6, #64512	@ 0xfc00
 8003cc8:	42b2      	cmp	r2, r6
 8003cca:	d013      	beq.n	8003cf4 <HAL_TIM_Base_Init+0x60>
 8003ccc:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003cd0:	42b2      	cmp	r2, r6
 8003cd2:	d00f      	beq.n	8003cf4 <HAL_TIM_Base_Init+0x60>
 8003cd4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003cd8:	42b2      	cmp	r2, r6
 8003cda:	d00b      	beq.n	8003cf4 <HAL_TIM_Base_Init+0x60>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cdc:	4e29      	ldr	r6, [pc, #164]	@ (8003d84 <HAL_TIM_Base_Init+0xf0>)
 8003cde:	42b2      	cmp	r2, r6
 8003ce0:	d00c      	beq.n	8003cfc <HAL_TIM_Base_Init+0x68>
 8003ce2:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003ce6:	42b2      	cmp	r2, r6
 8003ce8:	d008      	beq.n	8003cfc <HAL_TIM_Base_Init+0x68>
 8003cea:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003cee:	42b2      	cmp	r2, r6
 8003cf0:	d108      	bne.n	8003d04 <HAL_TIM_Base_Init+0x70>
 8003cf2:	e003      	b.n	8003cfc <HAL_TIM_Base_Init+0x68>
    tmpcr1 |= Structure->CounterMode;
 8003cf4:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003cfa:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cfc:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d02:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d08:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003d0a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d0c:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d0e:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d10:	2301      	movs	r3, #1
 8003d12:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d14:	6913      	ldr	r3, [r2, #16]
 8003d16:	07db      	lsls	r3, r3, #31
 8003d18:	d503      	bpl.n	8003d22 <HAL_TIM_Base_Init+0x8e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d1a:	6913      	ldr	r3, [r2, #16]
 8003d1c:	f023 0301 	bic.w	r3, r3, #1
 8003d20:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d22:	2301      	movs	r3, #1
 8003d24:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d28:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003d2c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003d30:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003d34:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d40:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003d44:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003d48:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003d4c:	2000      	movs	r0, #0
}
 8003d4e:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003d50:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003d54:	f7fe fb4a 	bl	80023ec <HAL_TIM_Base_MspInit>
 8003d58:	e7a6      	b.n	8003ca8 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8003d5a:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003d60:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d62:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d68:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d6e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003d70:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d72:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003d74:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003d76:	6963      	ldr	r3, [r4, #20]
 8003d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d7a:	e7c9      	b.n	8003d10 <HAL_TIM_Base_Init+0x7c>
    return HAL_ERROR;
 8003d7c:	2001      	movs	r0, #1
}
 8003d7e:	4770      	bx	lr
 8003d80:	40010000 	.word	0x40010000
 8003d84:	40014000 	.word	0x40014000

08003d88 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003d88:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d127      	bne.n	8003de0 <HAL_TIM_Base_Start_IT+0x58>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d90:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d92:	4914      	ldr	r1, [pc, #80]	@ (8003de4 <HAL_TIM_Base_Start_IT+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003d94:	2202      	movs	r2, #2
 8003d96:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d9a:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d9c:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d9e:	f042 0201 	orr.w	r2, r2, #1
 8003da2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003da4:	d011      	beq.n	8003dca <HAL_TIM_Base_Start_IT+0x42>
 8003da6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003daa:	d00e      	beq.n	8003dca <HAL_TIM_Base_Start_IT+0x42>
 8003dac:	4a0e      	ldr	r2, [pc, #56]	@ (8003de8 <HAL_TIM_Base_Start_IT+0x60>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d00b      	beq.n	8003dca <HAL_TIM_Base_Start_IT+0x42>
 8003db2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d007      	beq.n	8003dca <HAL_TIM_Base_Start_IT+0x42>
 8003dba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d003      	beq.n	8003dca <HAL_TIM_Base_Start_IT+0x42>
 8003dc2:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d104      	bne.n	8003dd4 <HAL_TIM_Base_Start_IT+0x4c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd0:	2a06      	cmp	r2, #6
 8003dd2:	d003      	beq.n	8003ddc <HAL_TIM_Base_Start_IT+0x54>
      __HAL_TIM_ENABLE(htim);
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003ddc:	2000      	movs	r0, #0
 8003dde:	4770      	bx	lr
    return HAL_ERROR;
 8003de0:	2001      	movs	r0, #1
}
 8003de2:	4770      	bx	lr
 8003de4:	40010000 	.word	0x40010000
 8003de8:	40000400 	.word	0x40000400

08003dec <HAL_TIM_OC_MspInit>:
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop

08003df0 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 8003df0:	2800      	cmp	r0, #0
 8003df2:	d071      	beq.n	8003ed8 <HAL_TIM_OC_Init+0xe8>
{
 8003df4:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8003df6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d053      	beq.n	8003eac <HAL_TIM_OC_Init+0xbc>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003e04:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e06:	4e35      	ldr	r6, [pc, #212]	@ (8003edc <HAL_TIM_OC_Init+0xec>)
  TIMx->PSC = Structure->Prescaler;
 8003e08:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e0a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e0c:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8003e0e:	2302      	movs	r3, #2
 8003e10:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e14:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8003e16:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e18:	d04d      	beq.n	8003eb6 <HAL_TIM_OC_Init+0xc6>
 8003e1a:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8003e1e:	d017      	beq.n	8003e50 <HAL_TIM_OC_Init+0x60>
 8003e20:	f5a6 467c 	sub.w	r6, r6, #64512	@ 0xfc00
 8003e24:	42b2      	cmp	r2, r6
 8003e26:	d013      	beq.n	8003e50 <HAL_TIM_OC_Init+0x60>
 8003e28:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003e2c:	42b2      	cmp	r2, r6
 8003e2e:	d00f      	beq.n	8003e50 <HAL_TIM_OC_Init+0x60>
 8003e30:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003e34:	42b2      	cmp	r2, r6
 8003e36:	d00b      	beq.n	8003e50 <HAL_TIM_OC_Init+0x60>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e38:	4e29      	ldr	r6, [pc, #164]	@ (8003ee0 <HAL_TIM_OC_Init+0xf0>)
 8003e3a:	42b2      	cmp	r2, r6
 8003e3c:	d00c      	beq.n	8003e58 <HAL_TIM_OC_Init+0x68>
 8003e3e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003e42:	42b2      	cmp	r2, r6
 8003e44:	d008      	beq.n	8003e58 <HAL_TIM_OC_Init+0x68>
 8003e46:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003e4a:	42b2      	cmp	r2, r6
 8003e4c:	d108      	bne.n	8003e60 <HAL_TIM_OC_Init+0x70>
 8003e4e:	e003      	b.n	8003e58 <HAL_TIM_OC_Init+0x68>
    tmpcr1 |= Structure->CounterMode;
 8003e50:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003e56:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e58:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e5e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e64:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003e66:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e68:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003e6a:	6291      	str	r1, [r2, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	6153      	str	r3, [r2, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e70:	6913      	ldr	r3, [r2, #16]
 8003e72:	07db      	lsls	r3, r3, #31
 8003e74:	d503      	bpl.n	8003e7e <HAL_TIM_OC_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e76:	6913      	ldr	r3, [r2, #16]
 8003e78:	f023 0301 	bic.w	r3, r3, #1
 8003e7c:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e84:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8003e88:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8003e8c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8003e90:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e9c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8003ea0:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003ea4:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8003ea8:	2000      	movs	r0, #0
}
 8003eaa:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8003eac:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 8003eb0:	f7ff ff9c 	bl	8003dec <HAL_TIM_OC_MspInit>
 8003eb4:	e7a6      	b.n	8003e04 <HAL_TIM_OC_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8003eb6:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8003ebc:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ebe:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ec0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ec4:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ec6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003eca:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003ecc:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ece:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003ed0:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003ed2:	6963      	ldr	r3, [r4, #20]
 8003ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ed6:	e7c9      	b.n	8003e6c <HAL_TIM_OC_Init+0x7c>
    return HAL_ERROR;
 8003ed8:	2001      	movs	r0, #1
}
 8003eda:	4770      	bx	lr
 8003edc:	40010000 	.word	0x40010000
 8003ee0:	40014000 	.word	0x40014000

08003ee4 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ee4:	bb91      	cbnz	r1, 8003f4c <HAL_TIM_OC_Start+0x68>
 8003ee6:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d136      	bne.n	8003f5c <HAL_TIM_OC_Start+0x78>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eee:	2302      	movs	r3, #2
 8003ef0:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ef4:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ef6:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003efa:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003efc:	2201      	movs	r2, #1
 8003efe:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 8003f00:	ea20 0002 	bic.w	r0, r0, r2
 8003f04:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f06:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f08:	4922      	ldr	r1, [pc, #136]	@ (8003f94 <HAL_TIM_OC_Start+0xb0>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f0a:	4302      	orrs	r2, r0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f0c:	428b      	cmp	r3, r1
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f0e:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f10:	d02a      	beq.n	8003f68 <HAL_TIM_OC_Start+0x84>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f16:	d00e      	beq.n	8003f36 <HAL_TIM_OC_Start+0x52>
 8003f18:	4a1f      	ldr	r2, [pc, #124]	@ (8003f98 <HAL_TIM_OC_Start+0xb4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00b      	beq.n	8003f36 <HAL_TIM_OC_Start+0x52>
 8003f1e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d007      	beq.n	8003f36 <HAL_TIM_OC_Start+0x52>
 8003f26:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d003      	beq.n	8003f36 <HAL_TIM_OC_Start+0x52>
 8003f2e:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d104      	bne.n	8003f40 <HAL_TIM_OC_Start+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3c:	2a06      	cmp	r2, #6
 8003f3e:	d003      	beq.n	8003f48 <HAL_TIM_OC_Start+0x64>
      __HAL_TIM_ENABLE(htim);
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	f042 0201 	orr.w	r2, r2, #1
 8003f46:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003f48:	2000      	movs	r0, #0
 8003f4a:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f4c:	2904      	cmp	r1, #4
 8003f4e:	d010      	beq.n	8003f72 <HAL_TIM_OC_Start+0x8e>
 8003f50:	2908      	cmp	r1, #8
 8003f52:	d016      	beq.n	8003f82 <HAL_TIM_OC_Start+0x9e>
 8003f54:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d001      	beq.n	8003f60 <HAL_TIM_OC_Start+0x7c>
    return HAL_ERROR;
 8003f5c:	2001      	movs	r0, #1
}
 8003f5e:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f60:	2302      	movs	r3, #2
 8003f62:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 8003f66:	e7c5      	b.n	8003ef4 <HAL_TIM_OC_Start+0x10>
    __HAL_TIM_MOE_ENABLE(htim);
 8003f68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f6e:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f70:	e7e1      	b.n	8003f36 <HAL_TIM_OC_Start+0x52>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f72:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d1f0      	bne.n	8003f5c <HAL_TIM_OC_Start+0x78>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 8003f80:	e7b8      	b.n	8003ef4 <HAL_TIM_OC_Start+0x10>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f82:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d1e8      	bne.n	8003f5c <HAL_TIM_OC_Start+0x78>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8003f90:	e7b0      	b.n	8003ef4 <HAL_TIM_OC_Start+0x10>
 8003f92:	bf00      	nop
 8003f94:	40010000 	.word	0x40010000
 8003f98:	40000400 	.word	0x40000400

08003f9c <HAL_TIM_OC_Stop>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003f9c:	6803      	ldr	r3, [r0, #0]
{
 8003f9e:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 8003fa0:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fa2:	f001 041f 	and.w	r4, r1, #31
 8003fa6:	f04f 0c01 	mov.w	ip, #1
 8003faa:	fa0c fc04 	lsl.w	ip, ip, r4
  TIMx->CCER &= ~tmp;
 8003fae:	ea22 020c 	bic.w	r2, r2, ip
 8003fb2:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fb4:	4a1e      	ldr	r2, [pc, #120]	@ (8004030 <HAL_TIM_OC_Stop+0x94>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fb6:	6a1c      	ldr	r4, [r3, #32]
 8003fb8:	621c      	str	r4, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d022      	beq.n	8004004 <HAL_TIM_OC_Stop+0x68>
  __HAL_TIM_DISABLE(htim);
 8003fbe:	6a1c      	ldr	r4, [r3, #32]
 8003fc0:	f241 1211 	movw	r2, #4369	@ 0x1111
 8003fc4:	4214      	tst	r4, r2
 8003fc6:	d104      	bne.n	8003fd2 <HAL_TIM_OC_Stop+0x36>
 8003fc8:	6a1c      	ldr	r4, [r3, #32]
 8003fca:	f240 4244 	movw	r2, #1092	@ 0x444
 8003fce:	4214      	tst	r4, r2
 8003fd0:	d013      	beq.n	8003ffa <HAL_TIM_OC_Stop+0x5e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	b929      	cbnz	r1, 8003fe2 <HAL_TIM_OC_Stop+0x46>
 8003fd6:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
}
 8003fda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fde:	2000      	movs	r0, #0
 8003fe0:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003fe2:	2904      	cmp	r1, #4
 8003fe4:	d01d      	beq.n	8004022 <HAL_TIM_OC_Stop+0x86>
 8003fe6:	2908      	cmp	r1, #8
 8003fe8:	bf0c      	ite	eq
 8003fea:	f880 3040 	strbeq.w	r3, [r0, #64]	@ 0x40
 8003fee:	f880 3041 	strbne.w	r3, [r0, #65]	@ 0x41
}
 8003ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ff6:	2000      	movs	r0, #0
 8003ff8:	4770      	bx	lr
  __HAL_TIM_DISABLE(htim);
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	f022 0201 	bic.w	r2, r2, #1
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	e7e6      	b.n	8003fd2 <HAL_TIM_OC_Stop+0x36>
    __HAL_TIM_MOE_DISABLE(htim);
 8004004:	6a1c      	ldr	r4, [r3, #32]
 8004006:	f241 1211 	movw	r2, #4369	@ 0x1111
 800400a:	4214      	tst	r4, r2
 800400c:	d1d7      	bne.n	8003fbe <HAL_TIM_OC_Stop+0x22>
 800400e:	6a1c      	ldr	r4, [r3, #32]
 8004010:	f240 4244 	movw	r2, #1092	@ 0x444
 8004014:	4214      	tst	r4, r2
 8004016:	d1d2      	bne.n	8003fbe <HAL_TIM_OC_Stop+0x22>
 8004018:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800401a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800401e:	645a      	str	r2, [r3, #68]	@ 0x44
 8004020:	e7cd      	b.n	8003fbe <HAL_TIM_OC_Stop+0x22>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004022:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
}
 8004026:	f85d 4b04 	ldr.w	r4, [sp], #4
 800402a:	2000      	movs	r0, #0
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40010000 	.word	0x40010000

08004034 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 8004034:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004038:	2b01      	cmp	r3, #1
 800403a:	f000 8081 	beq.w	8004140 <HAL_TIM_OC_ConfigChannel+0x10c>
{
 800403e:	b470      	push	{r4, r5, r6}
 8004040:	4684      	mov	ip, r0
  switch (Channel)
 8004042:	2a0c      	cmp	r2, #12
 8004044:	d808      	bhi.n	8004058 <HAL_TIM_OC_ConfigChannel+0x24>
 8004046:	e8df f002 	tbb	[pc, r2]
 800404a:	072d      	.short	0x072d
 800404c:	07460707 	.word	0x07460707
 8004050:	07610707 	.word	0x07610707
 8004054:	0707      	.short	0x0707
 8004056:	0d          	.byte	0x0d
 8004057:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8004058:	2300      	movs	r3, #0
 800405a:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  switch (Channel)
 800405e:	2001      	movs	r0, #1
}
 8004060:	bc70      	pop	{r4, r5, r6}
 8004062:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004064:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004066:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8004068:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800406a:	6a18      	ldr	r0, [r3, #32]
 800406c:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8004070:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004072:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004074:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004076:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800407a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800407e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004080:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004084:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004088:	4d47      	ldr	r5, [pc, #284]	@ (80041a8 <HAL_TIM_OC_ConfigChannel+0x174>)
 800408a:	42ab      	cmp	r3, r5
 800408c:	d076      	beq.n	800417c <HAL_TIM_OC_ConfigChannel+0x148>
  TIMx->CCR4 = OC_Config->Pulse;
 800408e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004090:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004092:	61d8      	str	r0, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004094:	6419      	str	r1, [r3, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8004096:	621a      	str	r2, [r3, #32]
  __HAL_UNLOCK(htim);
 8004098:	2300      	movs	r3, #0
 800409a:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800409e:	2000      	movs	r0, #0
}
 80040a0:	bc70      	pop	{r4, r5, r6}
 80040a2:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040a4:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80040a6:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 80040a8:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040aa:	6a18      	ldr	r0, [r3, #32]
 80040ac:	f020 0001 	bic.w	r0, r0, #1
 80040b0:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80040b2:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80040b4:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040b6:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80040ba:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 80040bc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80040be:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 80040c2:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040c4:	4d38      	ldr	r5, [pc, #224]	@ (80041a8 <HAL_TIM_OC_ConfigChannel+0x174>)
 80040c6:	42ab      	cmp	r3, r5
 80040c8:	d03c      	beq.n	8004144 <HAL_TIM_OC_ConfigChannel+0x110>
  TIMx->CCR1 = OC_Config->Pulse;
 80040ca:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80040cc:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80040ce:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80040d0:	6359      	str	r1, [r3, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 80040d2:	621a      	str	r2, [r3, #32]
}
 80040d4:	e7e0      	b.n	8004098 <HAL_TIM_OC_ConfigChannel+0x64>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040d6:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040d8:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 80040da:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040dc:	6a18      	ldr	r0, [r3, #32]
 80040de:	f020 0010 	bic.w	r0, r0, #16
 80040e2:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80040e4:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80040e6:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80040e8:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040ec:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040f0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80040f2:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040f6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040fa:	4d2b      	ldr	r5, [pc, #172]	@ (80041a8 <HAL_TIM_OC_ConfigChannel+0x174>)
 80040fc:	42ab      	cmp	r3, r5
 80040fe:	d02e      	beq.n	800415e <HAL_TIM_OC_ConfigChannel+0x12a>
  TIMx->CCR2 = OC_Config->Pulse;
 8004100:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004102:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004104:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004106:	6399      	str	r1, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004108:	621a      	str	r2, [r3, #32]
}
 800410a:	e7c5      	b.n	8004098 <HAL_TIM_OC_ConfigChannel+0x64>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800410c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800410e:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8004110:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004112:	6a18      	ldr	r0, [r3, #32]
 8004114:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8004118:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800411a:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800411c:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800411e:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004122:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004124:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004126:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800412a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800412e:	4d1e      	ldr	r5, [pc, #120]	@ (80041a8 <HAL_TIM_OC_ConfigChannel+0x174>)
 8004130:	42ab      	cmp	r3, r5
 8004132:	d029      	beq.n	8004188 <HAL_TIM_OC_ConfigChannel+0x154>
  TIMx->CCR3 = OC_Config->Pulse;
 8004134:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004136:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004138:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800413a:	63d9      	str	r1, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 800413c:	621a      	str	r2, [r3, #32]
}
 800413e:	e7ab      	b.n	8004098 <HAL_TIM_OC_ConfigChannel+0x64>
  __HAL_LOCK(htim);
 8004140:	2002      	movs	r0, #2
}
 8004142:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8004144:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004146:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 800414a:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800414c:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004150:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004154:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004156:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800415a:	432c      	orrs	r4, r5
 800415c:	e7b5      	b.n	80040ca <HAL_TIM_OC_ConfigChannel+0x96>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800415e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004160:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004164:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004168:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800416c:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004170:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8004172:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004176:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 800417a:	e7c1      	b.n	8004100 <HAL_TIM_OC_ConfigChannel+0xcc>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800417c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800417e:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004182:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8004186:	e782      	b.n	800408e <HAL_TIM_OC_ConfigChannel+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004188:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800418a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800418e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004192:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004196:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800419a:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 800419c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041a0:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 80041a4:	e7c6      	b.n	8004134 <HAL_TIM_OC_ConfigChannel+0x100>
 80041a6:	bf00      	nop
 80041a8:	40010000 	.word	0x40010000

080041ac <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80041ac:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80041b0:	2a01      	cmp	r2, #1
 80041b2:	d06e      	beq.n	8004292 <HAL_TIM_ConfigClockSource+0xe6>
 80041b4:	4603      	mov	r3, r0
  tmpsmcr = htim->Instance->SMCR;
 80041b6:	6802      	ldr	r2, [r0, #0]
{
 80041b8:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80041ba:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80041bc:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 80041be:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80041c2:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80041c6:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041c8:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
 80041cc:	f024 0477 	bic.w	r4, r4, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 80041d0:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80041d2:	680c      	ldr	r4, [r1, #0]
 80041d4:	2c60      	cmp	r4, #96	@ 0x60
 80041d6:	d076      	beq.n	80042c6 <HAL_TIM_ConfigClockSource+0x11a>
 80041d8:	d811      	bhi.n	80041fe <HAL_TIM_ConfigClockSource+0x52>
 80041da:	2c40      	cmp	r4, #64	@ 0x40
 80041dc:	d05b      	beq.n	8004296 <HAL_TIM_ConfigClockSource+0xea>
 80041de:	d82e      	bhi.n	800423e <HAL_TIM_ConfigClockSource+0x92>
 80041e0:	2c20      	cmp	r4, #32
 80041e2:	d004      	beq.n	80041ee <HAL_TIM_ConfigClockSource+0x42>
 80041e4:	f200 8088 	bhi.w	80042f8 <HAL_TIM_ConfigClockSource+0x14c>
 80041e8:	f034 0110 	bics.w	r1, r4, #16
 80041ec:	d11f      	bne.n	800422e <HAL_TIM_ConfigClockSource+0x82>
  tmpsmcr = TIMx->SMCR;
 80041ee:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80041f0:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041f4:	4321      	orrs	r1, r4
 80041f6:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 80041fa:	6091      	str	r1, [r2, #8]
}
 80041fc:	e016      	b.n	800422c <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 80041fe:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8004202:	d013      	beq.n	800422c <HAL_TIM_ConfigClockSource+0x80>
 8004204:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8004208:	d033      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0xc6>
 800420a:	2c70      	cmp	r4, #112	@ 0x70
 800420c:	d10f      	bne.n	800422e <HAL_TIM_ConfigClockSource+0x82>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800420e:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004212:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004214:	4328      	orrs	r0, r5
 8004216:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004218:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800421c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8004220:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8004222:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004224:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004226:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800422a:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800422c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800422e:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8004230:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8004232:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800423a:	bc30      	pop	{r4, r5}
 800423c:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800423e:	2c50      	cmp	r4, #80	@ 0x50
 8004240:	d1f5      	bne.n	800422e <HAL_TIM_ConfigClockSource+0x82>
                               sClockSourceConfig->ClockPolarity,
 8004242:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004244:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8004246:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004248:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800424c:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800424e:	6a11      	ldr	r1, [r2, #32]
 8004250:	f021 0101 	bic.w	r1, r1, #1
 8004254:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004256:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004258:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800425c:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004260:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8004262:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8004264:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004266:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800426a:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 800426e:	6091      	str	r1, [r2, #8]
}
 8004270:	e7dc      	b.n	800422c <HAL_TIM_ConfigClockSource+0x80>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004272:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8004276:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004278:	4328      	orrs	r0, r5
 800427a:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800427c:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004280:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8004284:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 8004286:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004288:	6891      	ldr	r1, [r2, #8]
 800428a:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 800428e:	6091      	str	r1, [r2, #8]
      break;
 8004290:	e7cc      	b.n	800422c <HAL_TIM_ConfigClockSource+0x80>
  __HAL_LOCK(htim);
 8004292:	2002      	movs	r0, #2
}
 8004294:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8004296:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004298:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 800429a:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800429c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80042a0:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042a2:	6a11      	ldr	r1, [r2, #32]
 80042a4:	f021 0101 	bic.w	r1, r1, #1
 80042a8:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042aa:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042ac:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042b0:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80042b4:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80042b6:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80042b8:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ba:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042be:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80042c2:	6091      	str	r1, [r2, #8]
}
 80042c4:	e7b2      	b.n	800422c <HAL_TIM_ConfigClockSource+0x80>
                               sClockSourceConfig->ClockPolarity,
 80042c6:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80042c8:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 80042ca:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042cc:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80042d0:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042d4:	6a10      	ldr	r0, [r2, #32]
 80042d6:	f020 0010 	bic.w	r0, r0, #16
 80042da:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042dc:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042de:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042e2:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80042e6:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 80042e8:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80042ea:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ec:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042f0:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 80042f4:	6091      	str	r1, [r2, #8]
}
 80042f6:	e799      	b.n	800422c <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 80042f8:	2c30      	cmp	r4, #48	@ 0x30
 80042fa:	f43f af78 	beq.w	80041ee <HAL_TIM_ConfigClockSource+0x42>
 80042fe:	e796      	b.n	800422e <HAL_TIM_ConfigClockSource+0x82>

08004300 <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop

08004304 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop

08004308 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop

0800430c <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop

08004310 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 8004310:	6803      	ldr	r3, [r0, #0]
{
 8004312:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8004314:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004316:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004318:	07a9      	lsls	r1, r5, #30
{
 800431a:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800431c:	d501      	bpl.n	8004322 <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800431e:	07b2      	lsls	r2, r6, #30
 8004320:	d451      	bmi.n	80043c6 <HAL_TIM_IRQHandler+0xb6>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004322:	0769      	lsls	r1, r5, #29
 8004324:	d501      	bpl.n	800432a <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004326:	0772      	lsls	r2, r6, #29
 8004328:	d43a      	bmi.n	80043a0 <HAL_TIM_IRQHandler+0x90>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800432a:	072b      	lsls	r3, r5, #28
 800432c:	d501      	bpl.n	8004332 <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800432e:	0730      	lsls	r0, r6, #28
 8004330:	d424      	bmi.n	800437c <HAL_TIM_IRQHandler+0x6c>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004332:	06ea      	lsls	r2, r5, #27
 8004334:	d501      	bpl.n	800433a <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004336:	06f3      	lsls	r3, r6, #27
 8004338:	d410      	bmi.n	800435c <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800433a:	07e8      	lsls	r0, r5, #31
 800433c:	d501      	bpl.n	8004342 <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800433e:	07f1      	lsls	r1, r6, #31
 8004340:	d457      	bmi.n	80043f2 <HAL_TIM_IRQHandler+0xe2>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004342:	062a      	lsls	r2, r5, #24
 8004344:	d501      	bpl.n	800434a <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004346:	0633      	lsls	r3, r6, #24
 8004348:	d45b      	bmi.n	8004402 <HAL_TIM_IRQHandler+0xf2>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800434a:	0668      	lsls	r0, r5, #25
 800434c:	d501      	bpl.n	8004352 <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800434e:	0671      	lsls	r1, r6, #25
 8004350:	d45f      	bmi.n	8004412 <HAL_TIM_IRQHandler+0x102>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004352:	06aa      	lsls	r2, r5, #26
 8004354:	d501      	bpl.n	800435a <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004356:	06b3      	lsls	r3, r6, #26
 8004358:	d442      	bmi.n	80043e0 <HAL_TIM_IRQHandler+0xd0>
}
 800435a:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	f06f 0210 	mvn.w	r2, #16
 8004362:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004364:	2208      	movs	r2, #8
 8004366:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800436e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004370:	d063      	beq.n	800443a <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004372:	f7ff ffc7 	bl	8004304 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004376:	2300      	movs	r3, #0
 8004378:	7723      	strb	r3, [r4, #28]
 800437a:	e7de      	b.n	800433a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800437c:	6823      	ldr	r3, [r4, #0]
 800437e:	f06f 0208 	mvn.w	r2, #8
 8004382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004384:	2204      	movs	r2, #4
 8004386:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 800438c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800438e:	d151      	bne.n	8004434 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004390:	f7ff ffb6 	bl	8004300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004394:	4620      	mov	r0, r4
 8004396:	f7ff ffb7 	bl	8004308 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439a:	2300      	movs	r3, #0
 800439c:	7723      	strb	r3, [r4, #28]
 800439e:	e7c8      	b.n	8004332 <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	f06f 0204 	mvn.w	r2, #4
 80043a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043a8:	2202      	movs	r2, #2
 80043aa:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80043b2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043b4:	d13b      	bne.n	800442e <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043b6:	f7ff ffa3 	bl	8004300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043ba:	4620      	mov	r0, r4
 80043bc:	f7ff ffa4 	bl	8004308 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c0:	2300      	movs	r3, #0
 80043c2:	7723      	strb	r3, [r4, #28]
 80043c4:	e7b1      	b.n	800432a <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043c6:	f06f 0202 	mvn.w	r2, #2
 80043ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043cc:	2201      	movs	r2, #1
 80043ce:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	079b      	lsls	r3, r3, #30
 80043d4:	d025      	beq.n	8004422 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80043d6:	f7ff ff95 	bl	8004304 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043da:	2300      	movs	r3, #0
 80043dc:	7723      	strb	r3, [r4, #28]
 80043de:	e7a0      	b.n	8004322 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 80043e6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043e8:	611a      	str	r2, [r3, #16]
}
 80043ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 80043ee:	f000 b863 	b.w	80044b8 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043f2:	6823      	ldr	r3, [r4, #0]
 80043f4:	f06f 0201 	mvn.w	r2, #1
 80043f8:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80043fa:	4620      	mov	r0, r4
 80043fc:	f7fd fd42 	bl	8001e84 <HAL_TIM_PeriodElapsedCallback>
 8004400:	e79f      	b.n	8004342 <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004408:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800440a:	4620      	mov	r0, r4
 800440c:	f000 f856 	bl	80044bc <HAL_TIMEx_BreakCallback>
 8004410:	e79b      	b.n	800434a <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004412:	6823      	ldr	r3, [r4, #0]
 8004414:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004418:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800441a:	4620      	mov	r0, r4
 800441c:	f7ff ff76 	bl	800430c <HAL_TIM_TriggerCallback>
 8004420:	e797      	b.n	8004352 <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004422:	f7ff ff6d 	bl	8004300 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004426:	4620      	mov	r0, r4
 8004428:	f7ff ff6e 	bl	8004308 <HAL_TIM_PWM_PulseFinishedCallback>
 800442c:	e7d5      	b.n	80043da <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 800442e:	f7ff ff69 	bl	8004304 <HAL_TIM_IC_CaptureCallback>
 8004432:	e7c5      	b.n	80043c0 <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_IC_CaptureCallback(htim);
 8004434:	f7ff ff66 	bl	8004304 <HAL_TIM_IC_CaptureCallback>
 8004438:	e7af      	b.n	800439a <HAL_TIM_IRQHandler+0x8a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800443a:	f7ff ff61 	bl	8004300 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443e:	4620      	mov	r0, r4
 8004440:	f7ff ff62 	bl	8004308 <HAL_TIM_PWM_PulseFinishedCallback>
 8004444:	e797      	b.n	8004376 <HAL_TIM_IRQHandler+0x66>
 8004446:	bf00      	nop

08004448 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004448:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800444c:	2a01      	cmp	r2, #1
 800444e:	d02f      	beq.n	80044b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004450:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004452:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004454:	2002      	movs	r0, #2
{
 8004456:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 800445c:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800445e:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8004460:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004462:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004466:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004468:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800446a:	4812      	ldr	r0, [pc, #72]	@ (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 800446c:	4282      	cmp	r2, r0
 800446e:	d012      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8004470:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004474:	d00f      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8004476:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 800447a:	4282      	cmp	r2, r0
 800447c:	d00b      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800447e:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8004482:	4282      	cmp	r2, r0
 8004484:	d007      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 8004486:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 800448a:	4282      	cmp	r2, r0
 800448c:	d003      	beq.n	8004496 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 800448e:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 8004492:	4282      	cmp	r2, r0
 8004494:	d104      	bne.n	80044a0 <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004496:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004498:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800449c:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800449e:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80044a0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80044a8:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 80044ac:	bc30      	pop	{r4, r5}
 80044ae:	4770      	bx	lr
  __HAL_LOCK(htim);
 80044b0:	2002      	movs	r0, #2
}
 80044b2:	4770      	bx	lr
 80044b4:	40010000 	.word	0x40010000

080044b8 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop

080044bc <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop

080044c0 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044c0:	2800      	cmp	r0, #0
 80044c2:	f000 8087 	beq.w	80045d4 <HAL_UART_Init+0x114>
{
 80044c6:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044c8:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80044cc:	4604      	mov	r4, r0
 80044ce:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d079      	beq.n	80045ca <HAL_UART_Init+0x10a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044d6:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044d8:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 80044da:	2224      	movs	r2, #36	@ 0x24
 80044dc:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 80044e0:	68da      	ldr	r2, [r3, #12]
 80044e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044e6:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044e8:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044ea:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ec:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 80044f0:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044f2:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044f4:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044f6:	4302      	orrs	r2, r0
 80044f8:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80044fa:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044fc:	4302      	orrs	r2, r0
 80044fe:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8004500:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8004504:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004508:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800450a:	430a      	orrs	r2, r1
 800450c:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800450e:	695a      	ldr	r2, [r3, #20]
 8004510:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004512:	4931      	ldr	r1, [pc, #196]	@ (80045d8 <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004514:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004518:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800451a:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800451c:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800451e:	d036      	beq.n	800458e <HAL_UART_Init+0xce>
 8004520:	4a2e      	ldr	r2, [pc, #184]	@ (80045dc <HAL_UART_Init+0x11c>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d033      	beq.n	800458e <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004526:	f7ff fb95 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800452a:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800452c:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800452e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004532:	e9d4 5300 	ldrd	r5, r3, [r4]
 8004536:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800453a:	d02b      	beq.n	8004594 <HAL_UART_Init+0xd4>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800453c:	009a      	lsls	r2, r3, #2
 800453e:	0f9b      	lsrs	r3, r3, #30
 8004540:	f7fc fbaa 	bl	8000c98 <__aeabi_uldivmod>
 8004544:	4a26      	ldr	r2, [pc, #152]	@ (80045e0 <HAL_UART_Init+0x120>)
 8004546:	fba2 1300 	umull	r1, r3, r2, r0
 800454a:	095b      	lsrs	r3, r3, #5
 800454c:	2164      	movs	r1, #100	@ 0x64
 800454e:	fb01 0013 	mls	r0, r1, r3, r0
 8004552:	0100      	lsls	r0, r0, #4
 8004554:	3032      	adds	r0, #50	@ 0x32
 8004556:	fba2 2000 	umull	r2, r0, r2, r0
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8004560:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004562:	692a      	ldr	r2, [r5, #16]
 8004564:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004568:	612a      	str	r2, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800456a:	696a      	ldr	r2, [r5, #20]
 800456c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004570:	616a      	str	r2, [r5, #20]
  __HAL_UART_ENABLE(huart);
 8004572:	68ea      	ldr	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004574:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8004576:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8004578:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800457c:	60ea      	str	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800457e:	6463      	str	r3, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004580:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004584:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  return HAL_OK;
 8004588:	4618      	mov	r0, r3
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800458a:	6363      	str	r3, [r4, #52]	@ 0x34
}
 800458c:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 800458e:	f7ff fb71 	bl	8003c74 <HAL_RCC_GetPCLK2Freq>
 8004592:	e7ca      	b.n	800452a <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004594:	18da      	adds	r2, r3, r3
 8004596:	f04f 0300 	mov.w	r3, #0
 800459a:	415b      	adcs	r3, r3
 800459c:	f7fc fb7c 	bl	8000c98 <__aeabi_uldivmod>
 80045a0:	4a0f      	ldr	r2, [pc, #60]	@ (80045e0 <HAL_UART_Init+0x120>)
 80045a2:	fba2 3100 	umull	r3, r1, r2, r0
 80045a6:	0949      	lsrs	r1, r1, #5
 80045a8:	2364      	movs	r3, #100	@ 0x64
 80045aa:	fb03 0311 	mls	r3, r3, r1, r0
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	3332      	adds	r3, #50	@ 0x32
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	f3c3 1242 	ubfx	r2, r3, #5, #3
 80045ba:	091b      	lsrs	r3, r3, #4
 80045bc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80045c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045c4:	4413      	add	r3, r2
 80045c6:	60ab      	str	r3, [r5, #8]
 80045c8:	e7cb      	b.n	8004562 <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 80045ca:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 80045ce:	f7fd ffab 	bl	8002528 <HAL_UART_MspInit>
 80045d2:	e780      	b.n	80044d6 <HAL_UART_Init+0x16>
    return HAL_ERROR;
 80045d4:	2001      	movs	r0, #1
}
 80045d6:	4770      	bx	lr
 80045d8:	40011000 	.word	0x40011000
 80045dc:	40011400 	.word	0x40011400
 80045e0:	51eb851f 	.word	0x51eb851f

080045e4 <HAL_UART_Transmit>:
{
 80045e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045e8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80045ea:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 80045ee:	2820      	cmp	r0, #32
 80045f0:	d155      	bne.n	800469e <HAL_UART_Transmit+0xba>
    if ((pData == NULL) || (Size == 0U))
 80045f2:	460d      	mov	r5, r1
 80045f4:	b109      	cbz	r1, 80045fa <HAL_UART_Transmit+0x16>
 80045f6:	4616      	mov	r6, r2
 80045f8:	b912      	cbnz	r2, 8004600 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 80045fa:	2001      	movs	r0, #1
}
 80045fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004600:	461f      	mov	r7, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004602:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004606:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004608:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800460c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8004610:	f7fe f8c6 	bl	80027a0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004614:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 8004616:	84a6      	strh	r6, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004618:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 800461c:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 800461e:	84e6      	strh	r6, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004620:	d040      	beq.n	80046a4 <HAL_UART_Transmit+0xc0>
    while (huart->TxXferCount > 0U)
 8004622:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004624:	6822      	ldr	r2, [r4, #0]
    while (huart->TxXferCount > 0U)
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d047      	beq.n	80046bc <HAL_UART_Transmit+0xd8>
 800462c:	1c7b      	adds	r3, r7, #1
 800462e:	d124      	bne.n	800467a <HAL_UART_Transmit+0x96>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004630:	6813      	ldr	r3, [r2, #0]
 8004632:	061f      	lsls	r7, r3, #24
 8004634:	d5fc      	bpl.n	8004630 <HAL_UART_Transmit+0x4c>
      if (pdata8bits == NULL)
 8004636:	2d00      	cmp	r5, #0
 8004638:	d02c      	beq.n	8004694 <HAL_UART_Transmit+0xb0>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800463a:	f815 3b01 	ldrb.w	r3, [r5], #1
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800463e:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8004640:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8004642:	3b01      	subs	r3, #1
 8004644:	b29b      	uxth	r3, r3
 8004646:	84e3      	strh	r3, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004648:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800464a:	b29b      	uxth	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1ef      	bne.n	8004630 <HAL_UART_Transmit+0x4c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004650:	6813      	ldr	r3, [r2, #0]
 8004652:	0659      	lsls	r1, r3, #25
 8004654:	d5fc      	bpl.n	8004650 <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8004656:	2320      	movs	r3, #32
 8004658:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 800465c:	2000      	movs	r0, #0
}
 800465e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 8004662:	2d00      	cmp	r5, #0
 8004664:	d03d      	beq.n	80046e2 <HAL_UART_Transmit+0xfe>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004666:	f815 3b01 	ldrb.w	r3, [r5], #1
 800466a:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800466c:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800466e:	3b01      	subs	r3, #1
 8004670:	b29b      	uxth	r3, r3
 8004672:	84e3      	strh	r3, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004674:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8004676:	b29b      	uxth	r3, r3
 8004678:	b313      	cbz	r3, 80046c0 <HAL_UART_Transmit+0xdc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800467a:	6813      	ldr	r3, [r2, #0]
 800467c:	061e      	lsls	r6, r3, #24
 800467e:	d4f0      	bmi.n	8004662 <HAL_UART_Transmit+0x7e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004680:	f7fe f88e 	bl	80027a0 <HAL_GetTick>
 8004684:	eba0 0309 	sub.w	r3, r0, r9
 8004688:	429f      	cmp	r7, r3
 800468a:	d311      	bcc.n	80046b0 <HAL_UART_Transmit+0xcc>
 800468c:	b187      	cbz	r7, 80046b0 <HAL_UART_Transmit+0xcc>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800468e:	6822      	ldr	r2, [r4, #0]
 8004690:	68d3      	ldr	r3, [r2, #12]
 8004692:	e7f2      	b.n	800467a <HAL_UART_Transmit+0x96>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004694:	f838 3b02 	ldrh.w	r3, [r8], #2
 8004698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469c:	e7cf      	b.n	800463e <HAL_UART_Transmit+0x5a>
    return HAL_BUSY;
 800469e:	2002      	movs	r0, #2
}
 80046a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046a4:	6923      	ldr	r3, [r4, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1bb      	bne.n	8004622 <HAL_UART_Transmit+0x3e>
      pdata16bits = (const uint16_t *) pData;
 80046aa:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80046ac:	461d      	mov	r5, r3
 80046ae:	e7b8      	b.n	8004622 <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 80046b0:	2320      	movs	r3, #32
 80046b2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 80046b6:	2003      	movs	r0, #3
}
 80046b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046bc:	1c78      	adds	r0, r7, #1
 80046be:	d0c7      	beq.n	8004650 <HAL_UART_Transmit+0x6c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c0:	6813      	ldr	r3, [r2, #0]
 80046c2:	065b      	lsls	r3, r3, #25
 80046c4:	d4c7      	bmi.n	8004656 <HAL_UART_Transmit+0x72>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046c6:	f7fe f86b 	bl	80027a0 <HAL_GetTick>
 80046ca:	eba0 0309 	sub.w	r3, r0, r9
 80046ce:	429f      	cmp	r7, r3
 80046d0:	d3ee      	bcc.n	80046b0 <HAL_UART_Transmit+0xcc>
 80046d2:	2f00      	cmp	r7, #0
 80046d4:	d0ec      	beq.n	80046b0 <HAL_UART_Transmit+0xcc>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046d6:	6822      	ldr	r2, [r4, #0]
 80046d8:	68d3      	ldr	r3, [r2, #12]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046da:	6813      	ldr	r3, [r2, #0]
 80046dc:	065b      	lsls	r3, r3, #25
 80046de:	d5f2      	bpl.n	80046c6 <HAL_UART_Transmit+0xe2>
 80046e0:	e7b9      	b.n	8004656 <HAL_UART_Transmit+0x72>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046e2:	f838 3b02 	ldrh.w	r3, [r8], #2
 80046e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ea:	e7be      	b.n	800466a <HAL_UART_Transmit+0x86>

080046ec <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 80046ec:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	d120      	bne.n	8004736 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 80046f4:	b101      	cbz	r1, 80046f8 <HAL_UART_Receive_IT+0xc>
 80046f6:	b90a      	cbnz	r2, 80046fc <HAL_UART_Receive_IT+0x10>
      return HAL_ERROR;
 80046f8:	2001      	movs	r0, #1
}
 80046fa:	4770      	bx	lr
{
 80046fc:	b410      	push	{r4}
  if (huart->Init.Parity != UART_PARITY_NONE)
 80046fe:	6904      	ldr	r4, [r0, #16]
  huart->pRxBuffPtr = pData;
 8004700:	6281      	str	r1, [r0, #40]	@ 0x28
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004702:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004704:	2122      	movs	r1, #34	@ 0x22
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004706:	6303      	str	r3, [r0, #48]	@ 0x30
  huart->RxXferSize = Size;
 8004708:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800470a:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470c:	6443      	str	r3, [r0, #68]	@ 0x44
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800470e:	6803      	ldr	r3, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004710:	f880 1042 	strb.w	r1, [r0, #66]	@ 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004714:	b11c      	cbz	r4, 800471e <HAL_UART_Receive_IT+0x32>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800471c:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800471e:	695a      	ldr	r2, [r3, #20]
}
 8004720:	f85d 4b04 	ldr.w	r4, [sp], #4
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004724:	f042 0201 	orr.w	r2, r2, #1
 8004728:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	f042 0220 	orr.w	r2, r2, #32
    return (UART_Start_Receive_IT(huart, pData, Size));
 8004730:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004732:	60da      	str	r2, [r3, #12]
}
 8004734:	4770      	bx	lr
    return HAL_BUSY;
 8004736:	2002      	movs	r0, #2
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop

0800473c <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop

08004740 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop

08004744 <UART_DMAAbortOnError>:
{
 8004744:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004746:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8004748:	2300      	movs	r3, #0
 800474a:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800474c:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 800474e:	f7ff fff7 	bl	8004740 <HAL_UART_ErrorCallback>
}
 8004752:	bd08      	pop	{r3, pc}

08004754 <HAL_UARTEx_RxEventCallback>:
}
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop

08004758 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004758:	6883      	ldr	r3, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800475a:	6801      	ldr	r1, [r0, #0]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800475c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800475e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004762:	d042      	beq.n	80047ea <UART_Receive_IT.part.0.isra.0+0x92>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004764:	2b00      	cmp	r3, #0
 8004766:	d039      	beq.n	80047dc <UART_Receive_IT.part.0.isra.0+0x84>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004768:	684b      	ldr	r3, [r1, #4]
 800476a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800476e:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004770:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8004772:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 8004774:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
      huart->pRxBuffPtr += 2U;
 8004776:	6282      	str	r2, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8004778:	3b01      	subs	r3, #1
 800477a:	b29b      	uxth	r3, r3
 800477c:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800477e:	2b00      	cmp	r3, #0
 8004780:	d132      	bne.n	80047e8 <UART_Receive_IT.part.0.isra.0+0x90>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004782:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004784:	6802      	ldr	r2, [r0, #0]
 8004786:	68d1      	ldr	r1, [r2, #12]
 8004788:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800478c:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800478e:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004790:	68d1      	ldr	r1, [r2, #12]
 8004792:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8004796:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004798:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800479a:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800479e:	f021 0101 	bic.w	r1, r1, #1
 80047a2:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80047a4:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047a8:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047aa:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 80047ac:	2901      	cmp	r1, #1
 80047ae:	d125      	bne.n	80047fc <UART_Receive_IT.part.0.isra.0+0xa4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047b0:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b2:	f102 030c 	add.w	r3, r2, #12
 80047b6:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ba:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047be:	f102 0c0c 	add.w	ip, r2, #12
 80047c2:	e84c 3100 	strex	r1, r3, [ip]
 80047c6:	2900      	cmp	r1, #0
 80047c8:	d1f3      	bne.n	80047b2 <UART_Receive_IT.part.0.isra.0+0x5a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047ca:	6813      	ldr	r3, [r2, #0]
 80047cc:	06db      	lsls	r3, r3, #27
 80047ce:	d41a      	bmi.n	8004806 <UART_Receive_IT.part.0.isra.0+0xae>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047d0:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80047d2:	f7ff ffbf 	bl	8004754 <HAL_UARTEx_RxEventCallback>
}
 80047d6:	b003      	add	sp, #12
 80047d8:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047dc:	6903      	ldr	r3, [r0, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1c2      	bne.n	8004768 <UART_Receive_IT.part.0.isra.0+0x10>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047e2:	684b      	ldr	r3, [r1, #4]
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	e7c2      	b.n	800476e <UART_Receive_IT.part.0.isra.0+0x16>
 80047e8:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ea:	6903      	ldr	r3, [r0, #16]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d1f8      	bne.n	80047e2 <UART_Receive_IT.part.0.isra.0+0x8a>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047f0:	684b      	ldr	r3, [r1, #4]
 80047f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f6:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 80047fa:	e7bb      	b.n	8004774 <UART_Receive_IT.part.0.isra.0+0x1c>
        HAL_UART_RxCpltCallback(huart);
 80047fc:	f7fd fb28 	bl	8001e50 <HAL_UART_RxCpltCallback>
}
 8004800:	b003      	add	sp, #12
 8004802:	f85d fb04 	ldr.w	pc, [sp], #4
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004806:	2300      	movs	r3, #0
 8004808:	9301      	str	r3, [sp, #4]
 800480a:	6813      	ldr	r3, [r2, #0]
 800480c:	9301      	str	r3, [sp, #4]
 800480e:	6853      	ldr	r3, [r2, #4]
 8004810:	9301      	str	r3, [sp, #4]
 8004812:	9b01      	ldr	r3, [sp, #4]
 8004814:	e7dc      	b.n	80047d0 <UART_Receive_IT.part.0.isra.0+0x78>
 8004816:	bf00      	nop

08004818 <HAL_UART_IRQHandler>:
{
 8004818:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800481a:	6803      	ldr	r3, [r0, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800481e:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004820:	6959      	ldr	r1, [r3, #20]
  if (errorflags == RESET)
 8004822:	f012 0f0f 	tst.w	r2, #15
{
 8004826:	b083      	sub	sp, #12
 8004828:	4604      	mov	r4, r0
  if (errorflags == RESET)
 800482a:	d170      	bne.n	800490e <HAL_UART_IRQHandler+0xf6>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800482c:	0691      	lsls	r1, r2, #26
 800482e:	d502      	bpl.n	8004836 <HAL_UART_IRQHandler+0x1e>
 8004830:	06a9      	lsls	r1, r5, #26
 8004832:	f100 80a3 	bmi.w	800497c <HAL_UART_IRQHandler+0x164>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004836:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004838:	2901      	cmp	r1, #1
 800483a:	d00b      	beq.n	8004854 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800483c:	0610      	lsls	r0, r2, #24
 800483e:	d502      	bpl.n	8004846 <HAL_UART_IRQHandler+0x2e>
 8004840:	0629      	lsls	r1, r5, #24
 8004842:	f100 80a5 	bmi.w	8004990 <HAL_UART_IRQHandler+0x178>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004846:	0652      	lsls	r2, r2, #25
 8004848:	d502      	bpl.n	8004850 <HAL_UART_IRQHandler+0x38>
 800484a:	0668      	lsls	r0, r5, #25
 800484c:	f100 80bf 	bmi.w	80049ce <HAL_UART_IRQHandler+0x1b6>
}
 8004850:	b003      	add	sp, #12
 8004852:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004854:	06d0      	lsls	r0, r2, #27
 8004856:	d5f1      	bpl.n	800483c <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004858:	06e9      	lsls	r1, r5, #27
 800485a:	d5ef      	bpl.n	800483c <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800485c:	2200      	movs	r2, #0
 800485e:	9201      	str	r2, [sp, #4]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	9201      	str	r2, [sp, #4]
 8004864:	685a      	ldr	r2, [r3, #4]
 8004866:	9201      	str	r2, [sp, #4]
 8004868:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800486a:	695a      	ldr	r2, [r3, #20]
 800486c:	0655      	lsls	r5, r2, #25
 800486e:	f140 813c 	bpl.w	8004aea <HAL_UART_IRQHandler+0x2d2>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004872:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004874:	6802      	ldr	r2, [r0, #0]
 8004876:	6852      	ldr	r2, [r2, #4]
 8004878:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 800487a:	2a00      	cmp	r2, #0
 800487c:	d0e8      	beq.n	8004850 <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800487e:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8004880:	4291      	cmp	r1, r2
 8004882:	d9e5      	bls.n	8004850 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8004884:	85e2      	strh	r2, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004886:	69c2      	ldr	r2, [r0, #28]
 8004888:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800488c:	d036      	beq.n	80048fc <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488e:	f103 020c 	add.w	r2, r3, #12
 8004892:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004896:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489a:	f103 050c 	add.w	r5, r3, #12
 800489e:	e845 2100 	strex	r1, r2, [r5]
 80048a2:	2900      	cmp	r1, #0
 80048a4:	d1f3      	bne.n	800488e <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	f103 0214 	add.w	r2, r3, #20
 80048aa:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ae:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b2:	f103 0514 	add.w	r5, r3, #20
 80048b6:	e845 2100 	strex	r1, r2, [r5]
 80048ba:	2900      	cmp	r1, #0
 80048bc:	d1f3      	bne.n	80048a6 <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048be:	f103 0214 	add.w	r2, r3, #20
 80048c2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	f103 0514 	add.w	r5, r3, #20
 80048ce:	e845 2100 	strex	r1, r2, [r5]
 80048d2:	2900      	cmp	r1, #0
 80048d4:	d1f3      	bne.n	80048be <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 80048d6:	2220      	movs	r2, #32
 80048d8:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048dc:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048de:	f103 020c 	add.w	r2, r3, #12
 80048e2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048e6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ea:	f103 050c 	add.w	r5, r3, #12
 80048ee:	e845 2100 	strex	r1, r2, [r5]
 80048f2:	2900      	cmp	r1, #0
 80048f4:	d1f3      	bne.n	80048de <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048f6:	f7fd ffcf 	bl	8002898 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048fa:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048fc:	2302      	movs	r3, #2
 80048fe:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004900:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004902:	1ac9      	subs	r1, r1, r3
 8004904:	4620      	mov	r0, r4
 8004906:	b289      	uxth	r1, r1
 8004908:	f7ff ff24 	bl	8004754 <HAL_UARTEx_RxEventCallback>
 800490c:	e7a0      	b.n	8004850 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800490e:	f011 0101 	ands.w	r1, r1, #1
 8004912:	f040 80cf 	bne.w	8004ab4 <HAL_UART_IRQHandler+0x29c>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004916:	f415 7f90 	tst.w	r5, #288	@ 0x120
 800491a:	d08c      	beq.n	8004836 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800491c:	07d0      	lsls	r0, r2, #31
 800491e:	d50b      	bpl.n	8004938 <HAL_UART_IRQHandler+0x120>
 8004920:	05e8      	lsls	r0, r5, #23
 8004922:	f140 80de 	bpl.w	8004ae2 <HAL_UART_IRQHandler+0x2ca>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004926:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8004928:	f040 0001 	orr.w	r0, r0, #1
 800492c:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800492e:	0750      	lsls	r0, r2, #29
 8004930:	d55c      	bpl.n	80049ec <HAL_UART_IRQHandler+0x1d4>
 8004932:	2900      	cmp	r1, #0
 8004934:	f040 80c2 	bne.w	8004abc <HAL_UART_IRQHandler+0x2a4>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004938:	0790      	lsls	r0, r2, #30
 800493a:	d566      	bpl.n	8004a0a <HAL_UART_IRQHandler+0x1f2>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800493c:	0710      	lsls	r0, r2, #28
 800493e:	f100 80cd 	bmi.w	8004adc <HAL_UART_IRQHandler+0x2c4>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004942:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004944:	2900      	cmp	r1, #0
 8004946:	d083      	beq.n	8004850 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004948:	0691      	lsls	r1, r2, #26
 800494a:	d509      	bpl.n	8004960 <HAL_UART_IRQHandler+0x148>
 800494c:	06aa      	lsls	r2, r5, #26
 800494e:	d507      	bpl.n	8004960 <HAL_UART_IRQHandler+0x148>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004950:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8004954:	2a22      	cmp	r2, #34	@ 0x22
 8004956:	d103      	bne.n	8004960 <HAL_UART_IRQHandler+0x148>
 8004958:	4620      	mov	r0, r4
 800495a:	f7ff fefd 	bl	8004758 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004962:	6c61      	ldr	r1, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004964:	f002 0240 	and.w	r2, r2, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004968:	f001 0108 	and.w	r1, r1, #8
 800496c:	ea52 0501 	orrs.w	r5, r2, r1
 8004970:	d155      	bne.n	8004a1e <HAL_UART_IRQHandler+0x206>
        HAL_UART_ErrorCallback(huart);
 8004972:	4620      	mov	r0, r4
 8004974:	f7ff fee4 	bl	8004740 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004978:	6465      	str	r5, [r4, #68]	@ 0x44
 800497a:	e769      	b.n	8004850 <HAL_UART_IRQHandler+0x38>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800497c:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8004980:	2b22      	cmp	r3, #34	@ 0x22
 8004982:	f47f af65 	bne.w	8004850 <HAL_UART_IRQHandler+0x38>
}
 8004986:	b003      	add	sp, #12
 8004988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800498c:	f7ff bee4 	b.w	8004758 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004990:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8004994:	2a21      	cmp	r2, #33	@ 0x21
 8004996:	f47f af5b 	bne.w	8004850 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800499a:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800499c:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800499e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 80049a2:	f000 80dd 	beq.w	8004b60 <HAL_UART_IRQHandler+0x348>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049a6:	1c51      	adds	r1, r2, #1
 80049a8:	6221      	str	r1, [r4, #32]
 80049aa:	7812      	ldrb	r2, [r2, #0]
 80049ac:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80049ae:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 80049b0:	3a01      	subs	r2, #1
 80049b2:	b292      	uxth	r2, r2
 80049b4:	84e2      	strh	r2, [r4, #38]	@ 0x26
 80049b6:	2a00      	cmp	r2, #0
 80049b8:	f47f af4a 	bne.w	8004850 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049bc:	68da      	ldr	r2, [r3, #12]
 80049be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049c2:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049c4:	68da      	ldr	r2, [r3, #12]
 80049c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80049ca:	60da      	str	r2, [r3, #12]
 80049cc:	e740      	b.n	8004850 <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049ce:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80049d0:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049d6:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80049d8:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80049da:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 80049de:	f7ff fead 	bl	800473c <HAL_UART_TxCpltCallback>
    return;
 80049e2:	e735      	b.n	8004850 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049e4:	05e8      	lsls	r0, r5, #23
 80049e6:	d49e      	bmi.n	8004926 <HAL_UART_IRQHandler+0x10e>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049e8:	0750      	lsls	r0, r2, #29
 80049ea:	d467      	bmi.n	8004abc <HAL_UART_IRQHandler+0x2a4>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049ec:	0790      	lsls	r0, r2, #30
 80049ee:	d50c      	bpl.n	8004a0a <HAL_UART_IRQHandler+0x1f2>
 80049f0:	2900      	cmp	r1, #0
 80049f2:	d0a3      	beq.n	800493c <HAL_UART_IRQHandler+0x124>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049f4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80049f6:	f041 0104 	orr.w	r1, r1, #4
 80049fa:	6461      	str	r1, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049fc:	0711      	lsls	r1, r2, #28
 80049fe:	d5a0      	bpl.n	8004942 <HAL_UART_IRQHandler+0x12a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a00:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004a02:	f041 0108 	orr.w	r1, r1, #8
 8004a06:	6461      	str	r1, [r4, #68]	@ 0x44
 8004a08:	e79b      	b.n	8004942 <HAL_UART_IRQHandler+0x12a>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004a0a:	0710      	lsls	r0, r2, #28
 8004a0c:	d599      	bpl.n	8004942 <HAL_UART_IRQHandler+0x12a>
 8004a0e:	f005 0020 	and.w	r0, r5, #32
 8004a12:	4308      	orrs	r0, r1
 8004a14:	d1f4      	bne.n	8004a00 <HAL_UART_IRQHandler+0x1e8>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a16:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004a18:	2a00      	cmp	r2, #0
 8004a1a:	d1a1      	bne.n	8004960 <HAL_UART_IRQHandler+0x148>
 8004a1c:	e718      	b.n	8004850 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1e:	f103 020c 	add.w	r2, r3, #12
 8004a22:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a26:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2a:	f103 000c 	add.w	r0, r3, #12
 8004a2e:	e840 2100 	strex	r1, r2, [r0]
 8004a32:	2900      	cmp	r1, #0
 8004a34:	d1f3      	bne.n	8004a1e <HAL_UART_IRQHandler+0x206>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	f103 0214 	add.w	r2, r3, #20
 8004a3a:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a3e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	f103 0014 	add.w	r0, r3, #20
 8004a46:	e840 2100 	strex	r1, r2, [r0]
 8004a4a:	2900      	cmp	r1, #0
 8004a4c:	d1f3      	bne.n	8004a36 <HAL_UART_IRQHandler+0x21e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a4e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004a50:	2a01      	cmp	r2, #1
 8004a52:	d022      	beq.n	8004a9a <HAL_UART_IRQHandler+0x282>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a54:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004a56:	2120      	movs	r1, #32
 8004a58:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a5c:	6322      	str	r2, [r4, #48]	@ 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5e:	695a      	ldr	r2, [r3, #20]
 8004a60:	0655      	lsls	r5, r2, #25
 8004a62:	d534      	bpl.n	8004ace <HAL_UART_IRQHandler+0x2b6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	f103 0214 	add.w	r2, r3, #20
 8004a68:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	f103 0014 	add.w	r0, r3, #20
 8004a74:	e840 2100 	strex	r1, r2, [r0]
 8004a78:	2900      	cmp	r1, #0
 8004a7a:	d1f3      	bne.n	8004a64 <HAL_UART_IRQHandler+0x24c>
          if (huart->hdmarx != NULL)
 8004a7c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004a7e:	b330      	cbz	r0, 8004ace <HAL_UART_IRQHandler+0x2b6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a80:	4b3d      	ldr	r3, [pc, #244]	@ (8004b78 <HAL_UART_IRQHandler+0x360>)
 8004a82:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a84:	f7fd ff52 	bl	800292c <HAL_DMA_Abort_IT>
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	f43f aee1 	beq.w	8004850 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a8e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004a90:	6d03      	ldr	r3, [r0, #80]	@ 0x50
}
 8004a92:	b003      	add	sp, #12
 8004a94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a98:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9a:	f103 020c 	add.w	r2, r3, #12
 8004a9e:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aa2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa6:	f103 000c 	add.w	r0, r3, #12
 8004aaa:	e840 2100 	strex	r1, r2, [r0]
 8004aae:	2900      	cmp	r1, #0
 8004ab0:	d1f3      	bne.n	8004a9a <HAL_UART_IRQHandler+0x282>
 8004ab2:	e7cf      	b.n	8004a54 <HAL_UART_IRQHandler+0x23c>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ab4:	07d0      	lsls	r0, r2, #31
 8004ab6:	d495      	bmi.n	80049e4 <HAL_UART_IRQHandler+0x1cc>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ab8:	0750      	lsls	r0, r2, #29
 8004aba:	d50c      	bpl.n	8004ad6 <HAL_UART_IRQHandler+0x2be>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004abc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004abe:	f041 0102 	orr.w	r1, r1, #2
 8004ac2:	6461      	str	r1, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ac4:	0791      	lsls	r1, r2, #30
 8004ac6:	d495      	bmi.n	80049f4 <HAL_UART_IRQHandler+0x1dc>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ac8:	0711      	lsls	r1, r2, #28
 8004aca:	d499      	bmi.n	8004a00 <HAL_UART_IRQHandler+0x1e8>
 8004acc:	e739      	b.n	8004942 <HAL_UART_IRQHandler+0x12a>
            HAL_UART_ErrorCallback(huart);
 8004ace:	4620      	mov	r0, r4
 8004ad0:	f7ff fe36 	bl	8004740 <HAL_UART_ErrorCallback>
 8004ad4:	e6bc      	b.n	8004850 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ad6:	0791      	lsls	r1, r2, #30
 8004ad8:	d48c      	bmi.n	80049f4 <HAL_UART_IRQHandler+0x1dc>
 8004ada:	e7f5      	b.n	8004ac8 <HAL_UART_IRQHandler+0x2b0>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004adc:	06a9      	lsls	r1, r5, #26
 8004ade:	d48f      	bmi.n	8004a00 <HAL_UART_IRQHandler+0x1e8>
 8004ae0:	e799      	b.n	8004a16 <HAL_UART_IRQHandler+0x1fe>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ae2:	0750      	lsls	r0, r2, #29
 8004ae4:	f53f af28 	bmi.w	8004938 <HAL_UART_IRQHandler+0x120>
 8004ae8:	e780      	b.n	80049ec <HAL_UART_IRQHandler+0x1d4>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004aea:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 8004aec:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004aee:	8da0      	ldrh	r0, [r4, #44]	@ 0x2c
      if ((huart->RxXferCount > 0U)
 8004af0:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004af2:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8004af4:	2a00      	cmp	r2, #0
 8004af6:	f43f aeab 	beq.w	8004850 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004afa:	1a41      	subs	r1, r0, r1
 8004afc:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8004afe:	2900      	cmp	r1, #0
 8004b00:	f43f aea6 	beq.w	8004850 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	f103 020c 	add.w	r2, r3, #12
 8004b08:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b0c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	f103 050c 	add.w	r5, r3, #12
 8004b14:	e845 2000 	strex	r0, r2, [r5]
 8004b18:	2800      	cmp	r0, #0
 8004b1a:	d1f3      	bne.n	8004b04 <HAL_UART_IRQHandler+0x2ec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	f103 0214 	add.w	r2, r3, #20
 8004b20:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b24:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b28:	f103 0514 	add.w	r5, r3, #20
 8004b2c:	e845 2000 	strex	r0, r2, [r5]
 8004b30:	2800      	cmp	r0, #0
 8004b32:	d1f3      	bne.n	8004b1c <HAL_UART_IRQHandler+0x304>
        huart->RxState = HAL_UART_STATE_READY;
 8004b34:	2220      	movs	r2, #32
 8004b36:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b3a:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3c:	f103 020c 	add.w	r2, r3, #12
 8004b40:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b44:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b48:	f103 050c 	add.w	r5, r3, #12
 8004b4c:	e845 2000 	strex	r0, r2, [r5]
 8004b50:	2800      	cmp	r0, #0
 8004b52:	d1f3      	bne.n	8004b3c <HAL_UART_IRQHandler+0x324>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b54:	2302      	movs	r3, #2
 8004b56:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f7ff fdfb 	bl	8004754 <HAL_UARTEx_RxEventCallback>
 8004b5e:	e677      	b.n	8004850 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b60:	6921      	ldr	r1, [r4, #16]
 8004b62:	2900      	cmp	r1, #0
 8004b64:	f47f af1f 	bne.w	80049a6 <HAL_UART_IRQHandler+0x18e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b68:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004b6c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004b70:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b72:	6222      	str	r2, [r4, #32]
 8004b74:	e71b      	b.n	80049ae <HAL_UART_IRQHandler+0x196>
 8004b76:	bf00      	nop
 8004b78:	08004745 	.word	0x08004745

08004b7c <arm_copy_f32>:
 8004b7c:	b4f0      	push	{r4, r5, r6, r7}
 8004b7e:	0897      	lsrs	r7, r2, #2
 8004b80:	d01e      	beq.n	8004bc0 <arm_copy_f32+0x44>
 8004b82:	f100 0410 	add.w	r4, r0, #16
 8004b86:	f101 0310 	add.w	r3, r1, #16
 8004b8a:	463d      	mov	r5, r7
 8004b8c:	f854 6c10 	ldr.w	r6, [r4, #-16]
 8004b90:	f843 6c10 	str.w	r6, [r3, #-16]
 8004b94:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 8004b98:	f843 6c0c 	str.w	r6, [r3, #-12]
 8004b9c:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8004ba0:	f843 6c08 	str.w	r6, [r3, #-8]
 8004ba4:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8004ba8:	f843 6c04 	str.w	r6, [r3, #-4]
 8004bac:	3d01      	subs	r5, #1
 8004bae:	f104 0410 	add.w	r4, r4, #16
 8004bb2:	f103 0310 	add.w	r3, r3, #16
 8004bb6:	d1e9      	bne.n	8004b8c <arm_copy_f32+0x10>
 8004bb8:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 8004bbc:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8004bc0:	f012 0203 	ands.w	r2, r2, #3
 8004bc4:	d009      	beq.n	8004bda <arm_copy_f32+0x5e>
 8004bc6:	6803      	ldr	r3, [r0, #0]
 8004bc8:	600b      	str	r3, [r1, #0]
 8004bca:	3a01      	subs	r2, #1
 8004bcc:	d005      	beq.n	8004bda <arm_copy_f32+0x5e>
 8004bce:	6843      	ldr	r3, [r0, #4]
 8004bd0:	604b      	str	r3, [r1, #4]
 8004bd2:	2a01      	cmp	r2, #1
 8004bd4:	bf1c      	itt	ne
 8004bd6:	6883      	ldrne	r3, [r0, #8]
 8004bd8:	608b      	strne	r3, [r1, #8]
 8004bda:	bcf0      	pop	{r4, r5, r6, r7}
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop

08004be0 <arm_mat_sub_f32>:
 8004be0:	b4f0      	push	{r4, r5, r6, r7}
 8004be2:	e9d1 4600 	ldrd	r4, r6, [r1]
 8004be6:	6803      	ldr	r3, [r0, #0]
 8004be8:	6847      	ldr	r7, [r0, #4]
 8004bea:	6855      	ldr	r5, [r2, #4]
 8004bec:	42a3      	cmp	r3, r4
 8004bee:	d160      	bne.n	8004cb2 <arm_mat_sub_f32+0xd2>
 8004bf0:	6812      	ldr	r2, [r2, #0]
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d15d      	bne.n	8004cb2 <arm_mat_sub_f32+0xd2>
 8004bf6:	8803      	ldrh	r3, [r0, #0]
 8004bf8:	8844      	ldrh	r4, [r0, #2]
 8004bfa:	fb04 f403 	mul.w	r4, r4, r3
 8004bfe:	ea5f 0c94 	movs.w	ip, r4, lsr #2
 8004c02:	d034      	beq.n	8004c6e <arm_mat_sub_f32+0x8e>
 8004c04:	f107 0110 	add.w	r1, r7, #16
 8004c08:	f106 0210 	add.w	r2, r6, #16
 8004c0c:	f105 0310 	add.w	r3, r5, #16
 8004c10:	4660      	mov	r0, ip
 8004c12:	ed12 7a04 	vldr	s14, [r2, #-16]
 8004c16:	ed51 7a04 	vldr	s15, [r1, #-16]
 8004c1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c1e:	3801      	subs	r0, #1
 8004c20:	ed43 7a04 	vstr	s15, [r3, #-16]
 8004c24:	ed12 7a03 	vldr	s14, [r2, #-12]
 8004c28:	ed51 7a03 	vldr	s15, [r1, #-12]
 8004c2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c30:	f101 0110 	add.w	r1, r1, #16
 8004c34:	ed43 7a03 	vstr	s15, [r3, #-12]
 8004c38:	ed12 7a02 	vldr	s14, [r2, #-8]
 8004c3c:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 8004c40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c44:	f102 0210 	add.w	r2, r2, #16
 8004c48:	ed43 7a02 	vstr	s15, [r3, #-8]
 8004c4c:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 8004c50:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8004c54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c58:	f103 0310 	add.w	r3, r3, #16
 8004c5c:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8004c60:	d1d7      	bne.n	8004c12 <arm_mat_sub_f32+0x32>
 8004c62:	eb07 170c 	add.w	r7, r7, ip, lsl #4
 8004c66:	eb06 160c 	add.w	r6, r6, ip, lsl #4
 8004c6a:	eb05 150c 	add.w	r5, r5, ip, lsl #4
 8004c6e:	f014 0403 	ands.w	r4, r4, #3
 8004c72:	d01b      	beq.n	8004cac <arm_mat_sub_f32+0xcc>
 8004c74:	edd7 7a00 	vldr	s15, [r7]
 8004c78:	ed96 7a00 	vldr	s14, [r6]
 8004c7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c80:	3c01      	subs	r4, #1
 8004c82:	edc5 7a00 	vstr	s15, [r5]
 8004c86:	d011      	beq.n	8004cac <arm_mat_sub_f32+0xcc>
 8004c88:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c8c:	ed96 7a01 	vldr	s14, [r6, #4]
 8004c90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c94:	2c01      	cmp	r4, #1
 8004c96:	edc5 7a01 	vstr	s15, [r5, #4]
 8004c9a:	d007      	beq.n	8004cac <arm_mat_sub_f32+0xcc>
 8004c9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ca0:	ed96 7a02 	vldr	s14, [r6, #8]
 8004ca4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ca8:	edc5 7a02 	vstr	s15, [r5, #8]
 8004cac:	2000      	movs	r0, #0
 8004cae:	bcf0      	pop	{r4, r5, r6, r7}
 8004cb0:	4770      	bx	lr
 8004cb2:	f06f 0002 	mvn.w	r0, #2
 8004cb6:	e7fa      	b.n	8004cae <arm_mat_sub_f32+0xce>

08004cb8 <arm_mat_mult_f32>:
 8004cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cbc:	460c      	mov	r4, r1
 8004cbe:	b08b      	sub	sp, #44	@ 0x2c
 8004cc0:	8825      	ldrh	r5, [r4, #0]
 8004cc2:	9107      	str	r1, [sp, #28]
 8004cc4:	8841      	ldrh	r1, [r0, #2]
 8004cc6:	8806      	ldrh	r6, [r0, #0]
 8004cc8:	6843      	ldr	r3, [r0, #4]
 8004cca:	6857      	ldr	r7, [r2, #4]
 8004ccc:	6860      	ldr	r0, [r4, #4]
 8004cce:	9602      	str	r6, [sp, #8]
 8004cd0:	428d      	cmp	r5, r1
 8004cd2:	8864      	ldrh	r4, [r4, #2]
 8004cd4:	f040 80f9 	bne.w	8004eca <arm_mat_mult_f32+0x212>
 8004cd8:	8811      	ldrh	r1, [r2, #0]
 8004cda:	42b1      	cmp	r1, r6
 8004cdc:	f040 80f5 	bne.w	8004eca <arm_mat_mult_f32+0x212>
 8004ce0:	8851      	ldrh	r1, [r2, #2]
 8004ce2:	42a1      	cmp	r1, r4
 8004ce4:	f040 80f1 	bne.w	8004eca <arm_mat_mult_f32+0x212>
 8004ce8:	00aa      	lsls	r2, r5, #2
 8004cea:	2901      	cmp	r1, #1
 8004cec:	ea4f 0c95 	mov.w	ip, r5, lsr #2
 8004cf0:	ea4f 0481 	mov.w	r4, r1, lsl #2
 8004cf4:	f005 0e03 	and.w	lr, r5, #3
 8004cf8:	9206      	str	r2, [sp, #24]
 8004cfa:	d170      	bne.n	8004dde <arm_mat_mult_f32+0x126>
 8004cfc:	1d01      	adds	r1, r0, #4
 8004cfe:	9105      	str	r1, [sp, #20]
 8004d00:	ea4f 110c 	mov.w	r1, ip, lsl #4
 8004d04:	4602      	mov	r2, r0
 8004d06:	f107 0904 	add.w	r9, r7, #4
 8004d0a:	9101      	str	r1, [sp, #4]
 8004d0c:	eb03 1b0c 	add.w	fp, r3, ip, lsl #4
 8004d10:	f103 0a10 	add.w	sl, r3, #16
 8004d14:	f1aa 0310 	sub.w	r3, sl, #16
 8004d18:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8004d1c:	9303      	str	r3, [sp, #12]
 8004d1e:	f1a9 0704 	sub.w	r7, r9, #4
 8004d22:	eddf 7a6c 	vldr	s15, [pc, #432]	@ 8004ed4 <arm_mat_mult_f32+0x21c>
 8004d26:	f1bc 0f00 	cmp.w	ip, #0
 8004d2a:	d052      	beq.n	8004dd2 <arm_mat_mult_f32+0x11a>
 8004d2c:	f102 0008 	add.w	r0, r2, #8
 8004d30:	4653      	mov	r3, sl
 8004d32:	4665      	mov	r5, ip
 8004d34:	4611      	mov	r1, r2
 8004d36:	ed13 6a04 	vldr	s12, [r3, #-16]
 8004d3a:	ed91 7a00 	vldr	s14, [r1]
 8004d3e:	ed53 4a03 	vldr	s9, [r3, #-12]
 8004d42:	edd0 6a00 	vldr	s13, [r0]
 8004d46:	ed13 5a02 	vldr	s10, [r3, #-8]
 8004d4a:	ed53 5a01 	vldr	s11, [r3, #-4]
 8004d4e:	190e      	adds	r6, r1, r4
 8004d50:	ee27 7a06 	vmul.f32	s14, s14, s12
 8004d54:	ed96 6a00 	vldr	s12, [r6]
 8004d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d5c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8004d60:	1906      	adds	r6, r0, r4
 8004d62:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004d66:	ee26 7a85 	vmul.f32	s14, s13, s10
 8004d6a:	edd6 7a00 	vldr	s15, [r6]
 8004d6e:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004d72:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004d76:	3d01      	subs	r5, #1
 8004d78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004d7c:	f101 0110 	add.w	r1, r1, #16
 8004d80:	f100 0010 	add.w	r0, r0, #16
 8004d84:	f103 0310 	add.w	r3, r3, #16
 8004d88:	d1d5      	bne.n	8004d36 <arm_mat_mult_f32+0x7e>
 8004d8a:	9b01      	ldr	r3, [sp, #4]
 8004d8c:	4659      	mov	r1, fp
 8004d8e:	441a      	add	r2, r3
 8004d90:	f1be 0f00 	cmp.w	lr, #0
 8004d94:	d00b      	beq.n	8004dae <arm_mat_mult_f32+0xf6>
 8004d96:	4673      	mov	r3, lr
 8004d98:	ed92 7a00 	vldr	s14, [r2]
 8004d9c:	ecf1 6a01 	vldmia	r1!, {s13}
 8004da0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004da4:	3b01      	subs	r3, #1
 8004da6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004daa:	4422      	add	r2, r4
 8004dac:	d1f4      	bne.n	8004d98 <arm_mat_mult_f32+0xe0>
 8004dae:	ece7 7a01 	vstmia	r7!, {s15}
 8004db2:	454f      	cmp	r7, r9
 8004db4:	4642      	mov	r2, r8
 8004db6:	f108 0804 	add.w	r8, r8, #4
 8004dba:	d1b2      	bne.n	8004d22 <arm_mat_mult_f32+0x6a>
 8004dbc:	9b06      	ldr	r3, [sp, #24]
 8004dbe:	449b      	add	fp, r3
 8004dc0:	449a      	add	sl, r3
 8004dc2:	9b02      	ldr	r3, [sp, #8]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	44a1      	add	r9, r4
 8004dc8:	9302      	str	r3, [sp, #8]
 8004dca:	d004      	beq.n	8004dd6 <arm_mat_mult_f32+0x11e>
 8004dcc:	9b07      	ldr	r3, [sp, #28]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	e7a0      	b.n	8004d14 <arm_mat_mult_f32+0x5c>
 8004dd2:	9903      	ldr	r1, [sp, #12]
 8004dd4:	e7dc      	b.n	8004d90 <arm_mat_mult_f32+0xd8>
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	b00b      	add	sp, #44	@ 0x2c
 8004dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dde:	ebc1 7281 	rsb	r2, r1, r1, lsl #30
 8004de2:	0092      	lsls	r2, r2, #2
 8004de4:	010e      	lsls	r6, r1, #4
 8004de6:	9209      	str	r2, [sp, #36]	@ 0x24
 8004de8:	00ca      	lsls	r2, r1, #3
 8004dea:	9204      	str	r2, [sp, #16]
 8004dec:	fb06 f20c 	mul.w	r2, r6, ip
 8004df0:	1d05      	adds	r5, r0, #4
 8004df2:	9203      	str	r2, [sp, #12]
 8004df4:	eb03 120c 	add.w	r2, r3, ip, lsl #4
 8004df8:	eb07 0b04 	add.w	fp, r7, r4
 8004dfc:	9505      	str	r5, [sp, #20]
 8004dfe:	9201      	str	r2, [sp, #4]
 8004e00:	f103 0a10 	add.w	sl, r3, #16
 8004e04:	f1aa 0310 	sub.w	r3, sl, #16
 8004e08:	9308      	str	r3, [sp, #32]
 8004e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e0c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004e10:	eb0b 0803 	add.w	r8, fp, r3
 8004e14:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8004ed4 <arm_mat_mult_f32+0x21c>
 8004e18:	f1bc 0f00 	cmp.w	ip, #0
 8004e1c:	d053      	beq.n	8004ec6 <arm_mat_mult_f32+0x20e>
 8004e1e:	9b04      	ldr	r3, [sp, #16]
 8004e20:	4665      	mov	r5, ip
 8004e22:	18c1      	adds	r1, r0, r3
 8004e24:	4602      	mov	r2, r0
 8004e26:	4653      	mov	r3, sl
 8004e28:	ed92 6a00 	vldr	s12, [r2]
 8004e2c:	ed13 7a04 	vldr	s14, [r3, #-16]
 8004e30:	ed53 4a03 	vldr	s9, [r3, #-12]
 8004e34:	ed53 6a02 	vldr	s13, [r3, #-8]
 8004e38:	ed91 5a00 	vldr	s10, [r1]
 8004e3c:	ed53 5a01 	vldr	s11, [r3, #-4]
 8004e40:	1917      	adds	r7, r2, r4
 8004e42:	ee27 7a06 	vmul.f32	s14, s14, s12
 8004e46:	ed97 6a00 	vldr	s12, [r7]
 8004e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e4e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8004e52:	190f      	adds	r7, r1, r4
 8004e54:	ee36 6a27 	vadd.f32	s12, s12, s15
 8004e58:	ee26 7a85 	vmul.f32	s14, s13, s10
 8004e5c:	edd7 7a00 	vldr	s15, [r7]
 8004e60:	ee37 7a06 	vadd.f32	s14, s14, s12
 8004e64:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004e68:	3d01      	subs	r5, #1
 8004e6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e6e:	4432      	add	r2, r6
 8004e70:	4431      	add	r1, r6
 8004e72:	f103 0310 	add.w	r3, r3, #16
 8004e76:	d1d7      	bne.n	8004e28 <arm_mat_mult_f32+0x170>
 8004e78:	9b03      	ldr	r3, [sp, #12]
 8004e7a:	9a01      	ldr	r2, [sp, #4]
 8004e7c:	4418      	add	r0, r3
 8004e7e:	f1be 0f00 	cmp.w	lr, #0
 8004e82:	d00b      	beq.n	8004e9c <arm_mat_mult_f32+0x1e4>
 8004e84:	4673      	mov	r3, lr
 8004e86:	edd0 6a00 	vldr	s13, [r0]
 8004e8a:	ecb2 7a01 	vldmia	r2!, {s14}
 8004e8e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004e92:	3b01      	subs	r3, #1
 8004e94:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e98:	4420      	add	r0, r4
 8004e9a:	d1f4      	bne.n	8004e86 <arm_mat_mult_f32+0x1ce>
 8004e9c:	ece8 7a01 	vstmia	r8!, {s15}
 8004ea0:	45d8      	cmp	r8, fp
 8004ea2:	4648      	mov	r0, r9
 8004ea4:	f109 0904 	add.w	r9, r9, #4
 8004ea8:	d1b4      	bne.n	8004e14 <arm_mat_mult_f32+0x15c>
 8004eaa:	9a01      	ldr	r2, [sp, #4]
 8004eac:	9b06      	ldr	r3, [sp, #24]
 8004eae:	4611      	mov	r1, r2
 8004eb0:	4419      	add	r1, r3
 8004eb2:	449a      	add	sl, r3
 8004eb4:	9b02      	ldr	r3, [sp, #8]
 8004eb6:	9101      	str	r1, [sp, #4]
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	44a3      	add	fp, r4
 8004ebc:	9302      	str	r3, [sp, #8]
 8004ebe:	d08a      	beq.n	8004dd6 <arm_mat_mult_f32+0x11e>
 8004ec0:	9b07      	ldr	r3, [sp, #28]
 8004ec2:	6858      	ldr	r0, [r3, #4]
 8004ec4:	e79e      	b.n	8004e04 <arm_mat_mult_f32+0x14c>
 8004ec6:	9a08      	ldr	r2, [sp, #32]
 8004ec8:	e7d9      	b.n	8004e7e <arm_mat_mult_f32+0x1c6>
 8004eca:	f06f 0002 	mvn.w	r0, #2
 8004ece:	b00b      	add	sp, #44	@ 0x2c
 8004ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed4:	00000000 	.word	0x00000000

08004ed8 <arm_mat_init_f32>:
 8004ed8:	8001      	strh	r1, [r0, #0]
 8004eda:	8042      	strh	r2, [r0, #2]
 8004edc:	6043      	str	r3, [r0, #4]
 8004ede:	4770      	bx	lr

08004ee0 <arm_mat_add_f32>:
 8004ee0:	b4f0      	push	{r4, r5, r6, r7}
 8004ee2:	e9d1 4600 	ldrd	r4, r6, [r1]
 8004ee6:	6803      	ldr	r3, [r0, #0]
 8004ee8:	6847      	ldr	r7, [r0, #4]
 8004eea:	6855      	ldr	r5, [r2, #4]
 8004eec:	42a3      	cmp	r3, r4
 8004eee:	d160      	bne.n	8004fb2 <arm_mat_add_f32+0xd2>
 8004ef0:	6812      	ldr	r2, [r2, #0]
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d15d      	bne.n	8004fb2 <arm_mat_add_f32+0xd2>
 8004ef6:	8803      	ldrh	r3, [r0, #0]
 8004ef8:	8844      	ldrh	r4, [r0, #2]
 8004efa:	fb04 f403 	mul.w	r4, r4, r3
 8004efe:	ea5f 0c94 	movs.w	ip, r4, lsr #2
 8004f02:	d034      	beq.n	8004f6e <arm_mat_add_f32+0x8e>
 8004f04:	f107 0110 	add.w	r1, r7, #16
 8004f08:	f106 0210 	add.w	r2, r6, #16
 8004f0c:	f105 0310 	add.w	r3, r5, #16
 8004f10:	4660      	mov	r0, ip
 8004f12:	ed12 7a04 	vldr	s14, [r2, #-16]
 8004f16:	ed51 7a04 	vldr	s15, [r1, #-16]
 8004f1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f1e:	3801      	subs	r0, #1
 8004f20:	ed43 7a04 	vstr	s15, [r3, #-16]
 8004f24:	ed12 7a03 	vldr	s14, [r2, #-12]
 8004f28:	ed51 7a03 	vldr	s15, [r1, #-12]
 8004f2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f30:	f101 0110 	add.w	r1, r1, #16
 8004f34:	ed43 7a03 	vstr	s15, [r3, #-12]
 8004f38:	ed12 7a02 	vldr	s14, [r2, #-8]
 8004f3c:	ed51 7a06 	vldr	s15, [r1, #-24]	@ 0xffffffe8
 8004f40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f44:	f102 0210 	add.w	r2, r2, #16
 8004f48:	ed43 7a02 	vstr	s15, [r3, #-8]
 8004f4c:	ed51 7a05 	vldr	s15, [r1, #-20]	@ 0xffffffec
 8004f50:	ed12 7a05 	vldr	s14, [r2, #-20]	@ 0xffffffec
 8004f54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f58:	f103 0310 	add.w	r3, r3, #16
 8004f5c:	ed43 7a05 	vstr	s15, [r3, #-20]	@ 0xffffffec
 8004f60:	d1d7      	bne.n	8004f12 <arm_mat_add_f32+0x32>
 8004f62:	eb07 170c 	add.w	r7, r7, ip, lsl #4
 8004f66:	eb06 160c 	add.w	r6, r6, ip, lsl #4
 8004f6a:	eb05 150c 	add.w	r5, r5, ip, lsl #4
 8004f6e:	f014 0403 	ands.w	r4, r4, #3
 8004f72:	d01b      	beq.n	8004fac <arm_mat_add_f32+0xcc>
 8004f74:	edd6 7a00 	vldr	s15, [r6]
 8004f78:	ed97 7a00 	vldr	s14, [r7]
 8004f7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f80:	3c01      	subs	r4, #1
 8004f82:	edc5 7a00 	vstr	s15, [r5]
 8004f86:	d011      	beq.n	8004fac <arm_mat_add_f32+0xcc>
 8004f88:	edd7 7a01 	vldr	s15, [r7, #4]
 8004f8c:	ed96 7a01 	vldr	s14, [r6, #4]
 8004f90:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f94:	2c01      	cmp	r4, #1
 8004f96:	edc5 7a01 	vstr	s15, [r5, #4]
 8004f9a:	d007      	beq.n	8004fac <arm_mat_add_f32+0xcc>
 8004f9c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004fa0:	ed96 7a02 	vldr	s14, [r6, #8]
 8004fa4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fa8:	edc5 7a02 	vstr	s15, [r5, #8]
 8004fac:	2000      	movs	r0, #0
 8004fae:	bcf0      	pop	{r4, r5, r6, r7}
 8004fb0:	4770      	bx	lr
 8004fb2:	f06f 0002 	mvn.w	r0, #2
 8004fb6:	e7fa      	b.n	8004fae <arm_mat_add_f32+0xce>

08004fb8 <arm_scale_f32>:
 8004fb8:	b470      	push	{r4, r5, r6}
 8004fba:	0896      	lsrs	r6, r2, #2
 8004fbc:	d026      	beq.n	800500c <arm_scale_f32+0x54>
 8004fbe:	f100 0410 	add.w	r4, r0, #16
 8004fc2:	f101 0310 	add.w	r3, r1, #16
 8004fc6:	4635      	mov	r5, r6
 8004fc8:	ed14 6a03 	vldr	s12, [r4, #-12]
 8004fcc:	ed54 6a02 	vldr	s13, [r4, #-8]
 8004fd0:	ed14 7a01 	vldr	s14, [r4, #-4]
 8004fd4:	ed54 7a04 	vldr	s15, [r4, #-16]
 8004fd8:	ee20 6a06 	vmul.f32	s12, s0, s12
 8004fdc:	ee60 6a26 	vmul.f32	s13, s0, s13
 8004fe0:	ee20 7a07 	vmul.f32	s14, s0, s14
 8004fe4:	ee67 7a80 	vmul.f32	s15, s15, s0
 8004fe8:	3d01      	subs	r5, #1
 8004fea:	ed03 6a03 	vstr	s12, [r3, #-12]
 8004fee:	ed43 6a02 	vstr	s13, [r3, #-8]
 8004ff2:	ed03 7a01 	vstr	s14, [r3, #-4]
 8004ff6:	ed43 7a04 	vstr	s15, [r3, #-16]
 8004ffa:	f104 0410 	add.w	r4, r4, #16
 8004ffe:	f103 0310 	add.w	r3, r3, #16
 8005002:	d1e1      	bne.n	8004fc8 <arm_scale_f32+0x10>
 8005004:	eb00 1006 	add.w	r0, r0, r6, lsl #4
 8005008:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800500c:	f012 0203 	ands.w	r2, r2, #3
 8005010:	d015      	beq.n	800503e <arm_scale_f32+0x86>
 8005012:	edd0 7a00 	vldr	s15, [r0]
 8005016:	ee67 7a80 	vmul.f32	s15, s15, s0
 800501a:	3a01      	subs	r2, #1
 800501c:	edc1 7a00 	vstr	s15, [r1]
 8005020:	d00d      	beq.n	800503e <arm_scale_f32+0x86>
 8005022:	edd0 7a01 	vldr	s15, [r0, #4]
 8005026:	ee67 7a80 	vmul.f32	s15, s15, s0
 800502a:	2a01      	cmp	r2, #1
 800502c:	edc1 7a01 	vstr	s15, [r1, #4]
 8005030:	d005      	beq.n	800503e <arm_scale_f32+0x86>
 8005032:	edd0 7a02 	vldr	s15, [r0, #8]
 8005036:	ee27 0a80 	vmul.f32	s0, s15, s0
 800503a:	ed81 0a02 	vstr	s0, [r1, #8]
 800503e:	bc70      	pop	{r4, r5, r6}
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop

08005044 <atof>:
 8005044:	2100      	movs	r1, #0
 8005046:	f000 be09 	b.w	8005c5c <strtod>

0800504a <sulp>:
 800504a:	b570      	push	{r4, r5, r6, lr}
 800504c:	4604      	mov	r4, r0
 800504e:	460d      	mov	r5, r1
 8005050:	ec45 4b10 	vmov	d0, r4, r5
 8005054:	4616      	mov	r6, r2
 8005056:	f003 fce7 	bl	8008a28 <__ulp>
 800505a:	ec51 0b10 	vmov	r0, r1, d0
 800505e:	b17e      	cbz	r6, 8005080 <sulp+0x36>
 8005060:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005064:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005068:	2b00      	cmp	r3, #0
 800506a:	dd09      	ble.n	8005080 <sulp+0x36>
 800506c:	051b      	lsls	r3, r3, #20
 800506e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005072:	2400      	movs	r4, #0
 8005074:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005078:	4622      	mov	r2, r4
 800507a:	462b      	mov	r3, r5
 800507c:	f7fb fac4 	bl	8000608 <__aeabi_dmul>
 8005080:	ec41 0b10 	vmov	d0, r0, r1
 8005084:	bd70      	pop	{r4, r5, r6, pc}
	...

08005088 <_strtod_l>:
 8005088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800508c:	b09f      	sub	sp, #124	@ 0x7c
 800508e:	460c      	mov	r4, r1
 8005090:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005092:	2200      	movs	r2, #0
 8005094:	921a      	str	r2, [sp, #104]	@ 0x68
 8005096:	9005      	str	r0, [sp, #20]
 8005098:	f04f 0a00 	mov.w	sl, #0
 800509c:	f04f 0b00 	mov.w	fp, #0
 80050a0:	460a      	mov	r2, r1
 80050a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80050a4:	7811      	ldrb	r1, [r2, #0]
 80050a6:	292b      	cmp	r1, #43	@ 0x2b
 80050a8:	d04a      	beq.n	8005140 <_strtod_l+0xb8>
 80050aa:	d838      	bhi.n	800511e <_strtod_l+0x96>
 80050ac:	290d      	cmp	r1, #13
 80050ae:	d832      	bhi.n	8005116 <_strtod_l+0x8e>
 80050b0:	2908      	cmp	r1, #8
 80050b2:	d832      	bhi.n	800511a <_strtod_l+0x92>
 80050b4:	2900      	cmp	r1, #0
 80050b6:	d03b      	beq.n	8005130 <_strtod_l+0xa8>
 80050b8:	2200      	movs	r2, #0
 80050ba:	920e      	str	r2, [sp, #56]	@ 0x38
 80050bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80050be:	782a      	ldrb	r2, [r5, #0]
 80050c0:	2a30      	cmp	r2, #48	@ 0x30
 80050c2:	f040 80b2 	bne.w	800522a <_strtod_l+0x1a2>
 80050c6:	786a      	ldrb	r2, [r5, #1]
 80050c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80050cc:	2a58      	cmp	r2, #88	@ 0x58
 80050ce:	d16e      	bne.n	80051ae <_strtod_l+0x126>
 80050d0:	9302      	str	r3, [sp, #8]
 80050d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80050d4:	9301      	str	r3, [sp, #4]
 80050d6:	ab1a      	add	r3, sp, #104	@ 0x68
 80050d8:	9300      	str	r3, [sp, #0]
 80050da:	4a8f      	ldr	r2, [pc, #572]	@ (8005318 <_strtod_l+0x290>)
 80050dc:	9805      	ldr	r0, [sp, #20]
 80050de:	ab1b      	add	r3, sp, #108	@ 0x6c
 80050e0:	a919      	add	r1, sp, #100	@ 0x64
 80050e2:	f002 fd9b 	bl	8007c1c <__gethex>
 80050e6:	f010 060f 	ands.w	r6, r0, #15
 80050ea:	4604      	mov	r4, r0
 80050ec:	d005      	beq.n	80050fa <_strtod_l+0x72>
 80050ee:	2e06      	cmp	r6, #6
 80050f0:	d128      	bne.n	8005144 <_strtod_l+0xbc>
 80050f2:	3501      	adds	r5, #1
 80050f4:	2300      	movs	r3, #0
 80050f6:	9519      	str	r5, [sp, #100]	@ 0x64
 80050f8:	930e      	str	r3, [sp, #56]	@ 0x38
 80050fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f040 858e 	bne.w	8005c1e <_strtod_l+0xb96>
 8005102:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005104:	b1cb      	cbz	r3, 800513a <_strtod_l+0xb2>
 8005106:	4652      	mov	r2, sl
 8005108:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800510c:	ec43 2b10 	vmov	d0, r2, r3
 8005110:	b01f      	add	sp, #124	@ 0x7c
 8005112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005116:	2920      	cmp	r1, #32
 8005118:	d1ce      	bne.n	80050b8 <_strtod_l+0x30>
 800511a:	3201      	adds	r2, #1
 800511c:	e7c1      	b.n	80050a2 <_strtod_l+0x1a>
 800511e:	292d      	cmp	r1, #45	@ 0x2d
 8005120:	d1ca      	bne.n	80050b8 <_strtod_l+0x30>
 8005122:	2101      	movs	r1, #1
 8005124:	910e      	str	r1, [sp, #56]	@ 0x38
 8005126:	1c51      	adds	r1, r2, #1
 8005128:	9119      	str	r1, [sp, #100]	@ 0x64
 800512a:	7852      	ldrb	r2, [r2, #1]
 800512c:	2a00      	cmp	r2, #0
 800512e:	d1c5      	bne.n	80050bc <_strtod_l+0x34>
 8005130:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005132:	9419      	str	r4, [sp, #100]	@ 0x64
 8005134:	2b00      	cmp	r3, #0
 8005136:	f040 8570 	bne.w	8005c1a <_strtod_l+0xb92>
 800513a:	4652      	mov	r2, sl
 800513c:	465b      	mov	r3, fp
 800513e:	e7e5      	b.n	800510c <_strtod_l+0x84>
 8005140:	2100      	movs	r1, #0
 8005142:	e7ef      	b.n	8005124 <_strtod_l+0x9c>
 8005144:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005146:	b13a      	cbz	r2, 8005158 <_strtod_l+0xd0>
 8005148:	2135      	movs	r1, #53	@ 0x35
 800514a:	a81c      	add	r0, sp, #112	@ 0x70
 800514c:	f003 fd66 	bl	8008c1c <__copybits>
 8005150:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005152:	9805      	ldr	r0, [sp, #20]
 8005154:	f003 f93c 	bl	80083d0 <_Bfree>
 8005158:	3e01      	subs	r6, #1
 800515a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800515c:	2e04      	cmp	r6, #4
 800515e:	d806      	bhi.n	800516e <_strtod_l+0xe6>
 8005160:	e8df f006 	tbb	[pc, r6]
 8005164:	201d0314 	.word	0x201d0314
 8005168:	14          	.byte	0x14
 8005169:	00          	.byte	0x00
 800516a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800516e:	05e1      	lsls	r1, r4, #23
 8005170:	bf48      	it	mi
 8005172:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005176:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800517a:	0d1b      	lsrs	r3, r3, #20
 800517c:	051b      	lsls	r3, r3, #20
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1bb      	bne.n	80050fa <_strtod_l+0x72>
 8005182:	f001 fdf5 	bl	8006d70 <__errno>
 8005186:	2322      	movs	r3, #34	@ 0x22
 8005188:	6003      	str	r3, [r0, #0]
 800518a:	e7b6      	b.n	80050fa <_strtod_l+0x72>
 800518c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005190:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005194:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005198:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800519c:	e7e7      	b.n	800516e <_strtod_l+0xe6>
 800519e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8005320 <_strtod_l+0x298>
 80051a2:	e7e4      	b.n	800516e <_strtod_l+0xe6>
 80051a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80051a8:	f04f 3aff 	mov.w	sl, #4294967295
 80051ac:	e7df      	b.n	800516e <_strtod_l+0xe6>
 80051ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80051b0:	1c5a      	adds	r2, r3, #1
 80051b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80051b4:	785b      	ldrb	r3, [r3, #1]
 80051b6:	2b30      	cmp	r3, #48	@ 0x30
 80051b8:	d0f9      	beq.n	80051ae <_strtod_l+0x126>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d09d      	beq.n	80050fa <_strtod_l+0x72>
 80051be:	2301      	movs	r3, #1
 80051c0:	2700      	movs	r7, #0
 80051c2:	9308      	str	r3, [sp, #32]
 80051c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80051c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80051c8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80051ca:	46b9      	mov	r9, r7
 80051cc:	220a      	movs	r2, #10
 80051ce:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80051d0:	7805      	ldrb	r5, [r0, #0]
 80051d2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80051d6:	b2d9      	uxtb	r1, r3
 80051d8:	2909      	cmp	r1, #9
 80051da:	d928      	bls.n	800522e <_strtod_l+0x1a6>
 80051dc:	494f      	ldr	r1, [pc, #316]	@ (800531c <_strtod_l+0x294>)
 80051de:	2201      	movs	r2, #1
 80051e0:	f001 fd3f 	bl	8006c62 <strncmp>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	d032      	beq.n	800524e <_strtod_l+0x1c6>
 80051e8:	2000      	movs	r0, #0
 80051ea:	462a      	mov	r2, r5
 80051ec:	900a      	str	r0, [sp, #40]	@ 0x28
 80051ee:	464d      	mov	r5, r9
 80051f0:	4603      	mov	r3, r0
 80051f2:	2a65      	cmp	r2, #101	@ 0x65
 80051f4:	d001      	beq.n	80051fa <_strtod_l+0x172>
 80051f6:	2a45      	cmp	r2, #69	@ 0x45
 80051f8:	d114      	bne.n	8005224 <_strtod_l+0x19c>
 80051fa:	b91d      	cbnz	r5, 8005204 <_strtod_l+0x17c>
 80051fc:	9a08      	ldr	r2, [sp, #32]
 80051fe:	4302      	orrs	r2, r0
 8005200:	d096      	beq.n	8005130 <_strtod_l+0xa8>
 8005202:	2500      	movs	r5, #0
 8005204:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005206:	1c62      	adds	r2, r4, #1
 8005208:	9219      	str	r2, [sp, #100]	@ 0x64
 800520a:	7862      	ldrb	r2, [r4, #1]
 800520c:	2a2b      	cmp	r2, #43	@ 0x2b
 800520e:	d07a      	beq.n	8005306 <_strtod_l+0x27e>
 8005210:	2a2d      	cmp	r2, #45	@ 0x2d
 8005212:	d07e      	beq.n	8005312 <_strtod_l+0x28a>
 8005214:	f04f 0c00 	mov.w	ip, #0
 8005218:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800521c:	2909      	cmp	r1, #9
 800521e:	f240 8085 	bls.w	800532c <_strtod_l+0x2a4>
 8005222:	9419      	str	r4, [sp, #100]	@ 0x64
 8005224:	f04f 0800 	mov.w	r8, #0
 8005228:	e0a5      	b.n	8005376 <_strtod_l+0x2ee>
 800522a:	2300      	movs	r3, #0
 800522c:	e7c8      	b.n	80051c0 <_strtod_l+0x138>
 800522e:	f1b9 0f08 	cmp.w	r9, #8
 8005232:	bfd8      	it	le
 8005234:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8005236:	f100 0001 	add.w	r0, r0, #1
 800523a:	bfda      	itte	le
 800523c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005240:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8005242:	fb02 3707 	mlagt	r7, r2, r7, r3
 8005246:	f109 0901 	add.w	r9, r9, #1
 800524a:	9019      	str	r0, [sp, #100]	@ 0x64
 800524c:	e7bf      	b.n	80051ce <_strtod_l+0x146>
 800524e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005250:	1c5a      	adds	r2, r3, #1
 8005252:	9219      	str	r2, [sp, #100]	@ 0x64
 8005254:	785a      	ldrb	r2, [r3, #1]
 8005256:	f1b9 0f00 	cmp.w	r9, #0
 800525a:	d03b      	beq.n	80052d4 <_strtod_l+0x24c>
 800525c:	900a      	str	r0, [sp, #40]	@ 0x28
 800525e:	464d      	mov	r5, r9
 8005260:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005264:	2b09      	cmp	r3, #9
 8005266:	d912      	bls.n	800528e <_strtod_l+0x206>
 8005268:	2301      	movs	r3, #1
 800526a:	e7c2      	b.n	80051f2 <_strtod_l+0x16a>
 800526c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800526e:	1c5a      	adds	r2, r3, #1
 8005270:	9219      	str	r2, [sp, #100]	@ 0x64
 8005272:	785a      	ldrb	r2, [r3, #1]
 8005274:	3001      	adds	r0, #1
 8005276:	2a30      	cmp	r2, #48	@ 0x30
 8005278:	d0f8      	beq.n	800526c <_strtod_l+0x1e4>
 800527a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800527e:	2b08      	cmp	r3, #8
 8005280:	f200 84d2 	bhi.w	8005c28 <_strtod_l+0xba0>
 8005284:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005286:	900a      	str	r0, [sp, #40]	@ 0x28
 8005288:	2000      	movs	r0, #0
 800528a:	930c      	str	r3, [sp, #48]	@ 0x30
 800528c:	4605      	mov	r5, r0
 800528e:	3a30      	subs	r2, #48	@ 0x30
 8005290:	f100 0301 	add.w	r3, r0, #1
 8005294:	d018      	beq.n	80052c8 <_strtod_l+0x240>
 8005296:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005298:	4419      	add	r1, r3
 800529a:	910a      	str	r1, [sp, #40]	@ 0x28
 800529c:	462e      	mov	r6, r5
 800529e:	f04f 0e0a 	mov.w	lr, #10
 80052a2:	1c71      	adds	r1, r6, #1
 80052a4:	eba1 0c05 	sub.w	ip, r1, r5
 80052a8:	4563      	cmp	r3, ip
 80052aa:	dc15      	bgt.n	80052d8 <_strtod_l+0x250>
 80052ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80052b0:	182b      	adds	r3, r5, r0
 80052b2:	2b08      	cmp	r3, #8
 80052b4:	f105 0501 	add.w	r5, r5, #1
 80052b8:	4405      	add	r5, r0
 80052ba:	dc1a      	bgt.n	80052f2 <_strtod_l+0x26a>
 80052bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80052be:	230a      	movs	r3, #10
 80052c0:	fb03 2301 	mla	r3, r3, r1, r2
 80052c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052c6:	2300      	movs	r3, #0
 80052c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80052ca:	1c51      	adds	r1, r2, #1
 80052cc:	9119      	str	r1, [sp, #100]	@ 0x64
 80052ce:	7852      	ldrb	r2, [r2, #1]
 80052d0:	4618      	mov	r0, r3
 80052d2:	e7c5      	b.n	8005260 <_strtod_l+0x1d8>
 80052d4:	4648      	mov	r0, r9
 80052d6:	e7ce      	b.n	8005276 <_strtod_l+0x1ee>
 80052d8:	2e08      	cmp	r6, #8
 80052da:	dc05      	bgt.n	80052e8 <_strtod_l+0x260>
 80052dc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80052de:	fb0e f606 	mul.w	r6, lr, r6
 80052e2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80052e4:	460e      	mov	r6, r1
 80052e6:	e7dc      	b.n	80052a2 <_strtod_l+0x21a>
 80052e8:	2910      	cmp	r1, #16
 80052ea:	bfd8      	it	le
 80052ec:	fb0e f707 	mulle.w	r7, lr, r7
 80052f0:	e7f8      	b.n	80052e4 <_strtod_l+0x25c>
 80052f2:	2b0f      	cmp	r3, #15
 80052f4:	bfdc      	itt	le
 80052f6:	230a      	movle	r3, #10
 80052f8:	fb03 2707 	mlale	r7, r3, r7, r2
 80052fc:	e7e3      	b.n	80052c6 <_strtod_l+0x23e>
 80052fe:	2300      	movs	r3, #0
 8005300:	930a      	str	r3, [sp, #40]	@ 0x28
 8005302:	2301      	movs	r3, #1
 8005304:	e77a      	b.n	80051fc <_strtod_l+0x174>
 8005306:	f04f 0c00 	mov.w	ip, #0
 800530a:	1ca2      	adds	r2, r4, #2
 800530c:	9219      	str	r2, [sp, #100]	@ 0x64
 800530e:	78a2      	ldrb	r2, [r4, #2]
 8005310:	e782      	b.n	8005218 <_strtod_l+0x190>
 8005312:	f04f 0c01 	mov.w	ip, #1
 8005316:	e7f8      	b.n	800530a <_strtod_l+0x282>
 8005318:	0800e9a0 	.word	0x0800e9a0
 800531c:	0800e7b4 	.word	0x0800e7b4
 8005320:	7ff00000 	.word	0x7ff00000
 8005324:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005326:	1c51      	adds	r1, r2, #1
 8005328:	9119      	str	r1, [sp, #100]	@ 0x64
 800532a:	7852      	ldrb	r2, [r2, #1]
 800532c:	2a30      	cmp	r2, #48	@ 0x30
 800532e:	d0f9      	beq.n	8005324 <_strtod_l+0x29c>
 8005330:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005334:	2908      	cmp	r1, #8
 8005336:	f63f af75 	bhi.w	8005224 <_strtod_l+0x19c>
 800533a:	3a30      	subs	r2, #48	@ 0x30
 800533c:	9209      	str	r2, [sp, #36]	@ 0x24
 800533e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005340:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005342:	f04f 080a 	mov.w	r8, #10
 8005346:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005348:	1c56      	adds	r6, r2, #1
 800534a:	9619      	str	r6, [sp, #100]	@ 0x64
 800534c:	7852      	ldrb	r2, [r2, #1]
 800534e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005352:	f1be 0f09 	cmp.w	lr, #9
 8005356:	d939      	bls.n	80053cc <_strtod_l+0x344>
 8005358:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800535a:	1a76      	subs	r6, r6, r1
 800535c:	2e08      	cmp	r6, #8
 800535e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005362:	dc03      	bgt.n	800536c <_strtod_l+0x2e4>
 8005364:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005366:	4588      	cmp	r8, r1
 8005368:	bfa8      	it	ge
 800536a:	4688      	movge	r8, r1
 800536c:	f1bc 0f00 	cmp.w	ip, #0
 8005370:	d001      	beq.n	8005376 <_strtod_l+0x2ee>
 8005372:	f1c8 0800 	rsb	r8, r8, #0
 8005376:	2d00      	cmp	r5, #0
 8005378:	d14e      	bne.n	8005418 <_strtod_l+0x390>
 800537a:	9908      	ldr	r1, [sp, #32]
 800537c:	4308      	orrs	r0, r1
 800537e:	f47f aebc 	bne.w	80050fa <_strtod_l+0x72>
 8005382:	2b00      	cmp	r3, #0
 8005384:	f47f aed4 	bne.w	8005130 <_strtod_l+0xa8>
 8005388:	2a69      	cmp	r2, #105	@ 0x69
 800538a:	d028      	beq.n	80053de <_strtod_l+0x356>
 800538c:	dc25      	bgt.n	80053da <_strtod_l+0x352>
 800538e:	2a49      	cmp	r2, #73	@ 0x49
 8005390:	d025      	beq.n	80053de <_strtod_l+0x356>
 8005392:	2a4e      	cmp	r2, #78	@ 0x4e
 8005394:	f47f aecc 	bne.w	8005130 <_strtod_l+0xa8>
 8005398:	499a      	ldr	r1, [pc, #616]	@ (8005604 <_strtod_l+0x57c>)
 800539a:	a819      	add	r0, sp, #100	@ 0x64
 800539c:	f002 fe60 	bl	8008060 <__match>
 80053a0:	2800      	cmp	r0, #0
 80053a2:	f43f aec5 	beq.w	8005130 <_strtod_l+0xa8>
 80053a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b28      	cmp	r3, #40	@ 0x28
 80053ac:	d12e      	bne.n	800540c <_strtod_l+0x384>
 80053ae:	4996      	ldr	r1, [pc, #600]	@ (8005608 <_strtod_l+0x580>)
 80053b0:	aa1c      	add	r2, sp, #112	@ 0x70
 80053b2:	a819      	add	r0, sp, #100	@ 0x64
 80053b4:	f002 fe68 	bl	8008088 <__hexnan>
 80053b8:	2805      	cmp	r0, #5
 80053ba:	d127      	bne.n	800540c <_strtod_l+0x384>
 80053bc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80053be:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80053c2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80053c6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80053ca:	e696      	b.n	80050fa <_strtod_l+0x72>
 80053cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80053ce:	fb08 2101 	mla	r1, r8, r1, r2
 80053d2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80053d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80053d8:	e7b5      	b.n	8005346 <_strtod_l+0x2be>
 80053da:	2a6e      	cmp	r2, #110	@ 0x6e
 80053dc:	e7da      	b.n	8005394 <_strtod_l+0x30c>
 80053de:	498b      	ldr	r1, [pc, #556]	@ (800560c <_strtod_l+0x584>)
 80053e0:	a819      	add	r0, sp, #100	@ 0x64
 80053e2:	f002 fe3d 	bl	8008060 <__match>
 80053e6:	2800      	cmp	r0, #0
 80053e8:	f43f aea2 	beq.w	8005130 <_strtod_l+0xa8>
 80053ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80053ee:	4988      	ldr	r1, [pc, #544]	@ (8005610 <_strtod_l+0x588>)
 80053f0:	3b01      	subs	r3, #1
 80053f2:	a819      	add	r0, sp, #100	@ 0x64
 80053f4:	9319      	str	r3, [sp, #100]	@ 0x64
 80053f6:	f002 fe33 	bl	8008060 <__match>
 80053fa:	b910      	cbnz	r0, 8005402 <_strtod_l+0x37a>
 80053fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80053fe:	3301      	adds	r3, #1
 8005400:	9319      	str	r3, [sp, #100]	@ 0x64
 8005402:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8005620 <_strtod_l+0x598>
 8005406:	f04f 0a00 	mov.w	sl, #0
 800540a:	e676      	b.n	80050fa <_strtod_l+0x72>
 800540c:	4881      	ldr	r0, [pc, #516]	@ (8005614 <_strtod_l+0x58c>)
 800540e:	f001 fceb 	bl	8006de8 <nan>
 8005412:	ec5b ab10 	vmov	sl, fp, d0
 8005416:	e670      	b.n	80050fa <_strtod_l+0x72>
 8005418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800541a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800541c:	eba8 0303 	sub.w	r3, r8, r3
 8005420:	f1b9 0f00 	cmp.w	r9, #0
 8005424:	bf08      	it	eq
 8005426:	46a9      	moveq	r9, r5
 8005428:	2d10      	cmp	r5, #16
 800542a:	9309      	str	r3, [sp, #36]	@ 0x24
 800542c:	462c      	mov	r4, r5
 800542e:	bfa8      	it	ge
 8005430:	2410      	movge	r4, #16
 8005432:	f7fb f86f 	bl	8000514 <__aeabi_ui2d>
 8005436:	2d09      	cmp	r5, #9
 8005438:	4682      	mov	sl, r0
 800543a:	468b      	mov	fp, r1
 800543c:	dc13      	bgt.n	8005466 <_strtod_l+0x3de>
 800543e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005440:	2b00      	cmp	r3, #0
 8005442:	f43f ae5a 	beq.w	80050fa <_strtod_l+0x72>
 8005446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005448:	dd78      	ble.n	800553c <_strtod_l+0x4b4>
 800544a:	2b16      	cmp	r3, #22
 800544c:	dc5f      	bgt.n	800550e <_strtod_l+0x486>
 800544e:	4972      	ldr	r1, [pc, #456]	@ (8005618 <_strtod_l+0x590>)
 8005450:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005454:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005458:	4652      	mov	r2, sl
 800545a:	465b      	mov	r3, fp
 800545c:	f7fb f8d4 	bl	8000608 <__aeabi_dmul>
 8005460:	4682      	mov	sl, r0
 8005462:	468b      	mov	fp, r1
 8005464:	e649      	b.n	80050fa <_strtod_l+0x72>
 8005466:	4b6c      	ldr	r3, [pc, #432]	@ (8005618 <_strtod_l+0x590>)
 8005468:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800546c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005470:	f7fb f8ca 	bl	8000608 <__aeabi_dmul>
 8005474:	4682      	mov	sl, r0
 8005476:	4638      	mov	r0, r7
 8005478:	468b      	mov	fp, r1
 800547a:	f7fb f84b 	bl	8000514 <__aeabi_ui2d>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	4650      	mov	r0, sl
 8005484:	4659      	mov	r1, fp
 8005486:	f7fa ff09 	bl	800029c <__adddf3>
 800548a:	2d0f      	cmp	r5, #15
 800548c:	4682      	mov	sl, r0
 800548e:	468b      	mov	fp, r1
 8005490:	ddd5      	ble.n	800543e <_strtod_l+0x3b6>
 8005492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005494:	1b2c      	subs	r4, r5, r4
 8005496:	441c      	add	r4, r3
 8005498:	2c00      	cmp	r4, #0
 800549a:	f340 8093 	ble.w	80055c4 <_strtod_l+0x53c>
 800549e:	f014 030f 	ands.w	r3, r4, #15
 80054a2:	d00a      	beq.n	80054ba <_strtod_l+0x432>
 80054a4:	495c      	ldr	r1, [pc, #368]	@ (8005618 <_strtod_l+0x590>)
 80054a6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80054aa:	4652      	mov	r2, sl
 80054ac:	465b      	mov	r3, fp
 80054ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054b2:	f7fb f8a9 	bl	8000608 <__aeabi_dmul>
 80054b6:	4682      	mov	sl, r0
 80054b8:	468b      	mov	fp, r1
 80054ba:	f034 040f 	bics.w	r4, r4, #15
 80054be:	d073      	beq.n	80055a8 <_strtod_l+0x520>
 80054c0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80054c4:	dd49      	ble.n	800555a <_strtod_l+0x4d2>
 80054c6:	2400      	movs	r4, #0
 80054c8:	46a0      	mov	r8, r4
 80054ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 80054cc:	46a1      	mov	r9, r4
 80054ce:	9a05      	ldr	r2, [sp, #20]
 80054d0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8005620 <_strtod_l+0x598>
 80054d4:	2322      	movs	r3, #34	@ 0x22
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	f04f 0a00 	mov.w	sl, #0
 80054dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f43f ae0b 	beq.w	80050fa <_strtod_l+0x72>
 80054e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80054e6:	9805      	ldr	r0, [sp, #20]
 80054e8:	f002 ff72 	bl	80083d0 <_Bfree>
 80054ec:	9805      	ldr	r0, [sp, #20]
 80054ee:	4649      	mov	r1, r9
 80054f0:	f002 ff6e 	bl	80083d0 <_Bfree>
 80054f4:	9805      	ldr	r0, [sp, #20]
 80054f6:	4641      	mov	r1, r8
 80054f8:	f002 ff6a 	bl	80083d0 <_Bfree>
 80054fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80054fe:	9805      	ldr	r0, [sp, #20]
 8005500:	f002 ff66 	bl	80083d0 <_Bfree>
 8005504:	9805      	ldr	r0, [sp, #20]
 8005506:	4621      	mov	r1, r4
 8005508:	f002 ff62 	bl	80083d0 <_Bfree>
 800550c:	e5f5      	b.n	80050fa <_strtod_l+0x72>
 800550e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005510:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005514:	4293      	cmp	r3, r2
 8005516:	dbbc      	blt.n	8005492 <_strtod_l+0x40a>
 8005518:	4c3f      	ldr	r4, [pc, #252]	@ (8005618 <_strtod_l+0x590>)
 800551a:	f1c5 050f 	rsb	r5, r5, #15
 800551e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005522:	4652      	mov	r2, sl
 8005524:	465b      	mov	r3, fp
 8005526:	e9d1 0100 	ldrd	r0, r1, [r1]
 800552a:	f7fb f86d 	bl	8000608 <__aeabi_dmul>
 800552e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005530:	1b5d      	subs	r5, r3, r5
 8005532:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005536:	e9d4 2300 	ldrd	r2, r3, [r4]
 800553a:	e78f      	b.n	800545c <_strtod_l+0x3d4>
 800553c:	3316      	adds	r3, #22
 800553e:	dba8      	blt.n	8005492 <_strtod_l+0x40a>
 8005540:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005542:	eba3 0808 	sub.w	r8, r3, r8
 8005546:	4b34      	ldr	r3, [pc, #208]	@ (8005618 <_strtod_l+0x590>)
 8005548:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800554c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005550:	4650      	mov	r0, sl
 8005552:	4659      	mov	r1, fp
 8005554:	f7fb f982 	bl	800085c <__aeabi_ddiv>
 8005558:	e782      	b.n	8005460 <_strtod_l+0x3d8>
 800555a:	2300      	movs	r3, #0
 800555c:	4f2f      	ldr	r7, [pc, #188]	@ (800561c <_strtod_l+0x594>)
 800555e:	1124      	asrs	r4, r4, #4
 8005560:	4650      	mov	r0, sl
 8005562:	4659      	mov	r1, fp
 8005564:	461e      	mov	r6, r3
 8005566:	2c01      	cmp	r4, #1
 8005568:	dc21      	bgt.n	80055ae <_strtod_l+0x526>
 800556a:	b10b      	cbz	r3, 8005570 <_strtod_l+0x4e8>
 800556c:	4682      	mov	sl, r0
 800556e:	468b      	mov	fp, r1
 8005570:	492a      	ldr	r1, [pc, #168]	@ (800561c <_strtod_l+0x594>)
 8005572:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005576:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800557a:	4652      	mov	r2, sl
 800557c:	465b      	mov	r3, fp
 800557e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005582:	f7fb f841 	bl	8000608 <__aeabi_dmul>
 8005586:	4b26      	ldr	r3, [pc, #152]	@ (8005620 <_strtod_l+0x598>)
 8005588:	460a      	mov	r2, r1
 800558a:	400b      	ands	r3, r1
 800558c:	4925      	ldr	r1, [pc, #148]	@ (8005624 <_strtod_l+0x59c>)
 800558e:	428b      	cmp	r3, r1
 8005590:	4682      	mov	sl, r0
 8005592:	d898      	bhi.n	80054c6 <_strtod_l+0x43e>
 8005594:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005598:	428b      	cmp	r3, r1
 800559a:	bf86      	itte	hi
 800559c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8005628 <_strtod_l+0x5a0>
 80055a0:	f04f 3aff 	movhi.w	sl, #4294967295
 80055a4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80055a8:	2300      	movs	r3, #0
 80055aa:	9308      	str	r3, [sp, #32]
 80055ac:	e076      	b.n	800569c <_strtod_l+0x614>
 80055ae:	07e2      	lsls	r2, r4, #31
 80055b0:	d504      	bpl.n	80055bc <_strtod_l+0x534>
 80055b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055b6:	f7fb f827 	bl	8000608 <__aeabi_dmul>
 80055ba:	2301      	movs	r3, #1
 80055bc:	3601      	adds	r6, #1
 80055be:	1064      	asrs	r4, r4, #1
 80055c0:	3708      	adds	r7, #8
 80055c2:	e7d0      	b.n	8005566 <_strtod_l+0x4de>
 80055c4:	d0f0      	beq.n	80055a8 <_strtod_l+0x520>
 80055c6:	4264      	negs	r4, r4
 80055c8:	f014 020f 	ands.w	r2, r4, #15
 80055cc:	d00a      	beq.n	80055e4 <_strtod_l+0x55c>
 80055ce:	4b12      	ldr	r3, [pc, #72]	@ (8005618 <_strtod_l+0x590>)
 80055d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055d4:	4650      	mov	r0, sl
 80055d6:	4659      	mov	r1, fp
 80055d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055dc:	f7fb f93e 	bl	800085c <__aeabi_ddiv>
 80055e0:	4682      	mov	sl, r0
 80055e2:	468b      	mov	fp, r1
 80055e4:	1124      	asrs	r4, r4, #4
 80055e6:	d0df      	beq.n	80055a8 <_strtod_l+0x520>
 80055e8:	2c1f      	cmp	r4, #31
 80055ea:	dd1f      	ble.n	800562c <_strtod_l+0x5a4>
 80055ec:	2400      	movs	r4, #0
 80055ee:	46a0      	mov	r8, r4
 80055f0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80055f2:	46a1      	mov	r9, r4
 80055f4:	9a05      	ldr	r2, [sp, #20]
 80055f6:	2322      	movs	r3, #34	@ 0x22
 80055f8:	f04f 0a00 	mov.w	sl, #0
 80055fc:	f04f 0b00 	mov.w	fp, #0
 8005600:	6013      	str	r3, [r2, #0]
 8005602:	e76b      	b.n	80054dc <_strtod_l+0x454>
 8005604:	0800e7c3 	.word	0x0800e7c3
 8005608:	0800e98c 	.word	0x0800e98c
 800560c:	0800e7bb 	.word	0x0800e7bb
 8005610:	0800e7fa 	.word	0x0800e7fa
 8005614:	0800e989 	.word	0x0800e989
 8005618:	0800ea18 	.word	0x0800ea18
 800561c:	0800e9f0 	.word	0x0800e9f0
 8005620:	7ff00000 	.word	0x7ff00000
 8005624:	7ca00000 	.word	0x7ca00000
 8005628:	7fefffff 	.word	0x7fefffff
 800562c:	f014 0310 	ands.w	r3, r4, #16
 8005630:	bf18      	it	ne
 8005632:	236a      	movne	r3, #106	@ 0x6a
 8005634:	4ea9      	ldr	r6, [pc, #676]	@ (80058dc <_strtod_l+0x854>)
 8005636:	9308      	str	r3, [sp, #32]
 8005638:	4650      	mov	r0, sl
 800563a:	4659      	mov	r1, fp
 800563c:	2300      	movs	r3, #0
 800563e:	07e7      	lsls	r7, r4, #31
 8005640:	d504      	bpl.n	800564c <_strtod_l+0x5c4>
 8005642:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005646:	f7fa ffdf 	bl	8000608 <__aeabi_dmul>
 800564a:	2301      	movs	r3, #1
 800564c:	1064      	asrs	r4, r4, #1
 800564e:	f106 0608 	add.w	r6, r6, #8
 8005652:	d1f4      	bne.n	800563e <_strtod_l+0x5b6>
 8005654:	b10b      	cbz	r3, 800565a <_strtod_l+0x5d2>
 8005656:	4682      	mov	sl, r0
 8005658:	468b      	mov	fp, r1
 800565a:	9b08      	ldr	r3, [sp, #32]
 800565c:	b1b3      	cbz	r3, 800568c <_strtod_l+0x604>
 800565e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005662:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005666:	2b00      	cmp	r3, #0
 8005668:	4659      	mov	r1, fp
 800566a:	dd0f      	ble.n	800568c <_strtod_l+0x604>
 800566c:	2b1f      	cmp	r3, #31
 800566e:	dd56      	ble.n	800571e <_strtod_l+0x696>
 8005670:	2b34      	cmp	r3, #52	@ 0x34
 8005672:	bfde      	ittt	le
 8005674:	f04f 33ff 	movle.w	r3, #4294967295
 8005678:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800567c:	4093      	lslle	r3, r2
 800567e:	f04f 0a00 	mov.w	sl, #0
 8005682:	bfcc      	ite	gt
 8005684:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005688:	ea03 0b01 	andle.w	fp, r3, r1
 800568c:	2200      	movs	r2, #0
 800568e:	2300      	movs	r3, #0
 8005690:	4650      	mov	r0, sl
 8005692:	4659      	mov	r1, fp
 8005694:	f7fb fa20 	bl	8000ad8 <__aeabi_dcmpeq>
 8005698:	2800      	cmp	r0, #0
 800569a:	d1a7      	bne.n	80055ec <_strtod_l+0x564>
 800569c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80056a2:	9805      	ldr	r0, [sp, #20]
 80056a4:	462b      	mov	r3, r5
 80056a6:	464a      	mov	r2, r9
 80056a8:	f002 fefa 	bl	80084a0 <__s2b>
 80056ac:	900b      	str	r0, [sp, #44]	@ 0x2c
 80056ae:	2800      	cmp	r0, #0
 80056b0:	f43f af09 	beq.w	80054c6 <_strtod_l+0x43e>
 80056b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056b8:	2a00      	cmp	r2, #0
 80056ba:	eba3 0308 	sub.w	r3, r3, r8
 80056be:	bfa8      	it	ge
 80056c0:	2300      	movge	r3, #0
 80056c2:	9312      	str	r3, [sp, #72]	@ 0x48
 80056c4:	2400      	movs	r4, #0
 80056c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80056ca:	9316      	str	r3, [sp, #88]	@ 0x58
 80056cc:	46a0      	mov	r8, r4
 80056ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056d0:	9805      	ldr	r0, [sp, #20]
 80056d2:	6859      	ldr	r1, [r3, #4]
 80056d4:	f002 fe3c 	bl	8008350 <_Balloc>
 80056d8:	4681      	mov	r9, r0
 80056da:	2800      	cmp	r0, #0
 80056dc:	f43f aef7 	beq.w	80054ce <_strtod_l+0x446>
 80056e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	3202      	adds	r2, #2
 80056e6:	f103 010c 	add.w	r1, r3, #12
 80056ea:	0092      	lsls	r2, r2, #2
 80056ec:	300c      	adds	r0, #12
 80056ee:	f001 fb6c 	bl	8006dca <memcpy>
 80056f2:	ec4b ab10 	vmov	d0, sl, fp
 80056f6:	9805      	ldr	r0, [sp, #20]
 80056f8:	aa1c      	add	r2, sp, #112	@ 0x70
 80056fa:	a91b      	add	r1, sp, #108	@ 0x6c
 80056fc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005700:	f003 fa02 	bl	8008b08 <__d2b>
 8005704:	901a      	str	r0, [sp, #104]	@ 0x68
 8005706:	2800      	cmp	r0, #0
 8005708:	f43f aee1 	beq.w	80054ce <_strtod_l+0x446>
 800570c:	9805      	ldr	r0, [sp, #20]
 800570e:	2101      	movs	r1, #1
 8005710:	f002 ff5c 	bl	80085cc <__i2b>
 8005714:	4680      	mov	r8, r0
 8005716:	b948      	cbnz	r0, 800572c <_strtod_l+0x6a4>
 8005718:	f04f 0800 	mov.w	r8, #0
 800571c:	e6d7      	b.n	80054ce <_strtod_l+0x446>
 800571e:	f04f 32ff 	mov.w	r2, #4294967295
 8005722:	fa02 f303 	lsl.w	r3, r2, r3
 8005726:	ea03 0a0a 	and.w	sl, r3, sl
 800572a:	e7af      	b.n	800568c <_strtod_l+0x604>
 800572c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800572e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005730:	2d00      	cmp	r5, #0
 8005732:	bfab      	itete	ge
 8005734:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005736:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005738:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800573a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800573c:	bfac      	ite	ge
 800573e:	18ef      	addge	r7, r5, r3
 8005740:	1b5e      	sublt	r6, r3, r5
 8005742:	9b08      	ldr	r3, [sp, #32]
 8005744:	1aed      	subs	r5, r5, r3
 8005746:	4415      	add	r5, r2
 8005748:	4b65      	ldr	r3, [pc, #404]	@ (80058e0 <_strtod_l+0x858>)
 800574a:	3d01      	subs	r5, #1
 800574c:	429d      	cmp	r5, r3
 800574e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005752:	da50      	bge.n	80057f6 <_strtod_l+0x76e>
 8005754:	1b5b      	subs	r3, r3, r5
 8005756:	2b1f      	cmp	r3, #31
 8005758:	eba2 0203 	sub.w	r2, r2, r3
 800575c:	f04f 0101 	mov.w	r1, #1
 8005760:	dc3d      	bgt.n	80057de <_strtod_l+0x756>
 8005762:	fa01 f303 	lsl.w	r3, r1, r3
 8005766:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005768:	2300      	movs	r3, #0
 800576a:	9310      	str	r3, [sp, #64]	@ 0x40
 800576c:	18bd      	adds	r5, r7, r2
 800576e:	9b08      	ldr	r3, [sp, #32]
 8005770:	42af      	cmp	r7, r5
 8005772:	4416      	add	r6, r2
 8005774:	441e      	add	r6, r3
 8005776:	463b      	mov	r3, r7
 8005778:	bfa8      	it	ge
 800577a:	462b      	movge	r3, r5
 800577c:	42b3      	cmp	r3, r6
 800577e:	bfa8      	it	ge
 8005780:	4633      	movge	r3, r6
 8005782:	2b00      	cmp	r3, #0
 8005784:	bfc2      	ittt	gt
 8005786:	1aed      	subgt	r5, r5, r3
 8005788:	1af6      	subgt	r6, r6, r3
 800578a:	1aff      	subgt	r7, r7, r3
 800578c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800578e:	2b00      	cmp	r3, #0
 8005790:	dd16      	ble.n	80057c0 <_strtod_l+0x738>
 8005792:	4641      	mov	r1, r8
 8005794:	9805      	ldr	r0, [sp, #20]
 8005796:	461a      	mov	r2, r3
 8005798:	f002 ffd0 	bl	800873c <__pow5mult>
 800579c:	4680      	mov	r8, r0
 800579e:	2800      	cmp	r0, #0
 80057a0:	d0ba      	beq.n	8005718 <_strtod_l+0x690>
 80057a2:	4601      	mov	r1, r0
 80057a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80057a6:	9805      	ldr	r0, [sp, #20]
 80057a8:	f002 ff26 	bl	80085f8 <__multiply>
 80057ac:	900a      	str	r0, [sp, #40]	@ 0x28
 80057ae:	2800      	cmp	r0, #0
 80057b0:	f43f ae8d 	beq.w	80054ce <_strtod_l+0x446>
 80057b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80057b6:	9805      	ldr	r0, [sp, #20]
 80057b8:	f002 fe0a 	bl	80083d0 <_Bfree>
 80057bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057be:	931a      	str	r3, [sp, #104]	@ 0x68
 80057c0:	2d00      	cmp	r5, #0
 80057c2:	dc1d      	bgt.n	8005800 <_strtod_l+0x778>
 80057c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	dd23      	ble.n	8005812 <_strtod_l+0x78a>
 80057ca:	4649      	mov	r1, r9
 80057cc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80057ce:	9805      	ldr	r0, [sp, #20]
 80057d0:	f002 ffb4 	bl	800873c <__pow5mult>
 80057d4:	4681      	mov	r9, r0
 80057d6:	b9e0      	cbnz	r0, 8005812 <_strtod_l+0x78a>
 80057d8:	f04f 0900 	mov.w	r9, #0
 80057dc:	e677      	b.n	80054ce <_strtod_l+0x446>
 80057de:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80057e2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80057e6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80057ea:	35e2      	adds	r5, #226	@ 0xe2
 80057ec:	fa01 f305 	lsl.w	r3, r1, r5
 80057f0:	9310      	str	r3, [sp, #64]	@ 0x40
 80057f2:	9113      	str	r1, [sp, #76]	@ 0x4c
 80057f4:	e7ba      	b.n	800576c <_strtod_l+0x6e4>
 80057f6:	2300      	movs	r3, #0
 80057f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80057fa:	2301      	movs	r3, #1
 80057fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80057fe:	e7b5      	b.n	800576c <_strtod_l+0x6e4>
 8005800:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005802:	9805      	ldr	r0, [sp, #20]
 8005804:	462a      	mov	r2, r5
 8005806:	f002 fff3 	bl	80087f0 <__lshift>
 800580a:	901a      	str	r0, [sp, #104]	@ 0x68
 800580c:	2800      	cmp	r0, #0
 800580e:	d1d9      	bne.n	80057c4 <_strtod_l+0x73c>
 8005810:	e65d      	b.n	80054ce <_strtod_l+0x446>
 8005812:	2e00      	cmp	r6, #0
 8005814:	dd07      	ble.n	8005826 <_strtod_l+0x79e>
 8005816:	4649      	mov	r1, r9
 8005818:	9805      	ldr	r0, [sp, #20]
 800581a:	4632      	mov	r2, r6
 800581c:	f002 ffe8 	bl	80087f0 <__lshift>
 8005820:	4681      	mov	r9, r0
 8005822:	2800      	cmp	r0, #0
 8005824:	d0d8      	beq.n	80057d8 <_strtod_l+0x750>
 8005826:	2f00      	cmp	r7, #0
 8005828:	dd08      	ble.n	800583c <_strtod_l+0x7b4>
 800582a:	4641      	mov	r1, r8
 800582c:	9805      	ldr	r0, [sp, #20]
 800582e:	463a      	mov	r2, r7
 8005830:	f002 ffde 	bl	80087f0 <__lshift>
 8005834:	4680      	mov	r8, r0
 8005836:	2800      	cmp	r0, #0
 8005838:	f43f ae49 	beq.w	80054ce <_strtod_l+0x446>
 800583c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800583e:	9805      	ldr	r0, [sp, #20]
 8005840:	464a      	mov	r2, r9
 8005842:	f003 f85d 	bl	8008900 <__mdiff>
 8005846:	4604      	mov	r4, r0
 8005848:	2800      	cmp	r0, #0
 800584a:	f43f ae40 	beq.w	80054ce <_strtod_l+0x446>
 800584e:	68c3      	ldr	r3, [r0, #12]
 8005850:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005852:	2300      	movs	r3, #0
 8005854:	60c3      	str	r3, [r0, #12]
 8005856:	4641      	mov	r1, r8
 8005858:	f003 f836 	bl	80088c8 <__mcmp>
 800585c:	2800      	cmp	r0, #0
 800585e:	da45      	bge.n	80058ec <_strtod_l+0x864>
 8005860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005862:	ea53 030a 	orrs.w	r3, r3, sl
 8005866:	d16b      	bne.n	8005940 <_strtod_l+0x8b8>
 8005868:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800586c:	2b00      	cmp	r3, #0
 800586e:	d167      	bne.n	8005940 <_strtod_l+0x8b8>
 8005870:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005874:	0d1b      	lsrs	r3, r3, #20
 8005876:	051b      	lsls	r3, r3, #20
 8005878:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800587c:	d960      	bls.n	8005940 <_strtod_l+0x8b8>
 800587e:	6963      	ldr	r3, [r4, #20]
 8005880:	b913      	cbnz	r3, 8005888 <_strtod_l+0x800>
 8005882:	6923      	ldr	r3, [r4, #16]
 8005884:	2b01      	cmp	r3, #1
 8005886:	dd5b      	ble.n	8005940 <_strtod_l+0x8b8>
 8005888:	4621      	mov	r1, r4
 800588a:	2201      	movs	r2, #1
 800588c:	9805      	ldr	r0, [sp, #20]
 800588e:	f002 ffaf 	bl	80087f0 <__lshift>
 8005892:	4641      	mov	r1, r8
 8005894:	4604      	mov	r4, r0
 8005896:	f003 f817 	bl	80088c8 <__mcmp>
 800589a:	2800      	cmp	r0, #0
 800589c:	dd50      	ble.n	8005940 <_strtod_l+0x8b8>
 800589e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80058a2:	9a08      	ldr	r2, [sp, #32]
 80058a4:	0d1b      	lsrs	r3, r3, #20
 80058a6:	051b      	lsls	r3, r3, #20
 80058a8:	2a00      	cmp	r2, #0
 80058aa:	d06a      	beq.n	8005982 <_strtod_l+0x8fa>
 80058ac:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80058b0:	d867      	bhi.n	8005982 <_strtod_l+0x8fa>
 80058b2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80058b6:	f67f ae9d 	bls.w	80055f4 <_strtod_l+0x56c>
 80058ba:	4b0a      	ldr	r3, [pc, #40]	@ (80058e4 <_strtod_l+0x85c>)
 80058bc:	4650      	mov	r0, sl
 80058be:	4659      	mov	r1, fp
 80058c0:	2200      	movs	r2, #0
 80058c2:	f7fa fea1 	bl	8000608 <__aeabi_dmul>
 80058c6:	4b08      	ldr	r3, [pc, #32]	@ (80058e8 <_strtod_l+0x860>)
 80058c8:	400b      	ands	r3, r1
 80058ca:	4682      	mov	sl, r0
 80058cc:	468b      	mov	fp, r1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f47f ae08 	bne.w	80054e4 <_strtod_l+0x45c>
 80058d4:	9a05      	ldr	r2, [sp, #20]
 80058d6:	2322      	movs	r3, #34	@ 0x22
 80058d8:	6013      	str	r3, [r2, #0]
 80058da:	e603      	b.n	80054e4 <_strtod_l+0x45c>
 80058dc:	0800e9b8 	.word	0x0800e9b8
 80058e0:	fffffc02 	.word	0xfffffc02
 80058e4:	39500000 	.word	0x39500000
 80058e8:	7ff00000 	.word	0x7ff00000
 80058ec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80058f0:	d165      	bne.n	80059be <_strtod_l+0x936>
 80058f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80058f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80058f8:	b35a      	cbz	r2, 8005952 <_strtod_l+0x8ca>
 80058fa:	4a9f      	ldr	r2, [pc, #636]	@ (8005b78 <_strtod_l+0xaf0>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d12b      	bne.n	8005958 <_strtod_l+0x8d0>
 8005900:	9b08      	ldr	r3, [sp, #32]
 8005902:	4651      	mov	r1, sl
 8005904:	b303      	cbz	r3, 8005948 <_strtod_l+0x8c0>
 8005906:	4b9d      	ldr	r3, [pc, #628]	@ (8005b7c <_strtod_l+0xaf4>)
 8005908:	465a      	mov	r2, fp
 800590a:	4013      	ands	r3, r2
 800590c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005910:	f04f 32ff 	mov.w	r2, #4294967295
 8005914:	d81b      	bhi.n	800594e <_strtod_l+0x8c6>
 8005916:	0d1b      	lsrs	r3, r3, #20
 8005918:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800591c:	fa02 f303 	lsl.w	r3, r2, r3
 8005920:	4299      	cmp	r1, r3
 8005922:	d119      	bne.n	8005958 <_strtod_l+0x8d0>
 8005924:	4b96      	ldr	r3, [pc, #600]	@ (8005b80 <_strtod_l+0xaf8>)
 8005926:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005928:	429a      	cmp	r2, r3
 800592a:	d102      	bne.n	8005932 <_strtod_l+0x8aa>
 800592c:	3101      	adds	r1, #1
 800592e:	f43f adce 	beq.w	80054ce <_strtod_l+0x446>
 8005932:	4b92      	ldr	r3, [pc, #584]	@ (8005b7c <_strtod_l+0xaf4>)
 8005934:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005936:	401a      	ands	r2, r3
 8005938:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800593c:	f04f 0a00 	mov.w	sl, #0
 8005940:	9b08      	ldr	r3, [sp, #32]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1b9      	bne.n	80058ba <_strtod_l+0x832>
 8005946:	e5cd      	b.n	80054e4 <_strtod_l+0x45c>
 8005948:	f04f 33ff 	mov.w	r3, #4294967295
 800594c:	e7e8      	b.n	8005920 <_strtod_l+0x898>
 800594e:	4613      	mov	r3, r2
 8005950:	e7e6      	b.n	8005920 <_strtod_l+0x898>
 8005952:	ea53 030a 	orrs.w	r3, r3, sl
 8005956:	d0a2      	beq.n	800589e <_strtod_l+0x816>
 8005958:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800595a:	b1db      	cbz	r3, 8005994 <_strtod_l+0x90c>
 800595c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800595e:	4213      	tst	r3, r2
 8005960:	d0ee      	beq.n	8005940 <_strtod_l+0x8b8>
 8005962:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005964:	9a08      	ldr	r2, [sp, #32]
 8005966:	4650      	mov	r0, sl
 8005968:	4659      	mov	r1, fp
 800596a:	b1bb      	cbz	r3, 800599c <_strtod_l+0x914>
 800596c:	f7ff fb6d 	bl	800504a <sulp>
 8005970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005974:	ec53 2b10 	vmov	r2, r3, d0
 8005978:	f7fa fc90 	bl	800029c <__adddf3>
 800597c:	4682      	mov	sl, r0
 800597e:	468b      	mov	fp, r1
 8005980:	e7de      	b.n	8005940 <_strtod_l+0x8b8>
 8005982:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005986:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800598a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800598e:	f04f 3aff 	mov.w	sl, #4294967295
 8005992:	e7d5      	b.n	8005940 <_strtod_l+0x8b8>
 8005994:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005996:	ea13 0f0a 	tst.w	r3, sl
 800599a:	e7e1      	b.n	8005960 <_strtod_l+0x8d8>
 800599c:	f7ff fb55 	bl	800504a <sulp>
 80059a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059a4:	ec53 2b10 	vmov	r2, r3, d0
 80059a8:	f7fa fc76 	bl	8000298 <__aeabi_dsub>
 80059ac:	2200      	movs	r2, #0
 80059ae:	2300      	movs	r3, #0
 80059b0:	4682      	mov	sl, r0
 80059b2:	468b      	mov	fp, r1
 80059b4:	f7fb f890 	bl	8000ad8 <__aeabi_dcmpeq>
 80059b8:	2800      	cmp	r0, #0
 80059ba:	d0c1      	beq.n	8005940 <_strtod_l+0x8b8>
 80059bc:	e61a      	b.n	80055f4 <_strtod_l+0x56c>
 80059be:	4641      	mov	r1, r8
 80059c0:	4620      	mov	r0, r4
 80059c2:	f003 f8f9 	bl	8008bb8 <__ratio>
 80059c6:	ec57 6b10 	vmov	r6, r7, d0
 80059ca:	2200      	movs	r2, #0
 80059cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80059d0:	4630      	mov	r0, r6
 80059d2:	4639      	mov	r1, r7
 80059d4:	f7fb f894 	bl	8000b00 <__aeabi_dcmple>
 80059d8:	2800      	cmp	r0, #0
 80059da:	d06f      	beq.n	8005abc <_strtod_l+0xa34>
 80059dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d17a      	bne.n	8005ad8 <_strtod_l+0xa50>
 80059e2:	f1ba 0f00 	cmp.w	sl, #0
 80059e6:	d158      	bne.n	8005a9a <_strtod_l+0xa12>
 80059e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d15a      	bne.n	8005aa8 <_strtod_l+0xa20>
 80059f2:	4b64      	ldr	r3, [pc, #400]	@ (8005b84 <_strtod_l+0xafc>)
 80059f4:	2200      	movs	r2, #0
 80059f6:	4630      	mov	r0, r6
 80059f8:	4639      	mov	r1, r7
 80059fa:	f7fb f877 	bl	8000aec <__aeabi_dcmplt>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d159      	bne.n	8005ab6 <_strtod_l+0xa2e>
 8005a02:	4630      	mov	r0, r6
 8005a04:	4639      	mov	r1, r7
 8005a06:	4b60      	ldr	r3, [pc, #384]	@ (8005b88 <_strtod_l+0xb00>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f7fa fdfd 	bl	8000608 <__aeabi_dmul>
 8005a0e:	4606      	mov	r6, r0
 8005a10:	460f      	mov	r7, r1
 8005a12:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005a16:	9606      	str	r6, [sp, #24]
 8005a18:	9307      	str	r3, [sp, #28]
 8005a1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a1e:	4d57      	ldr	r5, [pc, #348]	@ (8005b7c <_strtod_l+0xaf4>)
 8005a20:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005a24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a26:	401d      	ands	r5, r3
 8005a28:	4b58      	ldr	r3, [pc, #352]	@ (8005b8c <_strtod_l+0xb04>)
 8005a2a:	429d      	cmp	r5, r3
 8005a2c:	f040 80b2 	bne.w	8005b94 <_strtod_l+0xb0c>
 8005a30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a32:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005a36:	ec4b ab10 	vmov	d0, sl, fp
 8005a3a:	f002 fff5 	bl	8008a28 <__ulp>
 8005a3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a42:	ec51 0b10 	vmov	r0, r1, d0
 8005a46:	f7fa fddf 	bl	8000608 <__aeabi_dmul>
 8005a4a:	4652      	mov	r2, sl
 8005a4c:	465b      	mov	r3, fp
 8005a4e:	f7fa fc25 	bl	800029c <__adddf3>
 8005a52:	460b      	mov	r3, r1
 8005a54:	4949      	ldr	r1, [pc, #292]	@ (8005b7c <_strtod_l+0xaf4>)
 8005a56:	4a4e      	ldr	r2, [pc, #312]	@ (8005b90 <_strtod_l+0xb08>)
 8005a58:	4019      	ands	r1, r3
 8005a5a:	4291      	cmp	r1, r2
 8005a5c:	4682      	mov	sl, r0
 8005a5e:	d942      	bls.n	8005ae6 <_strtod_l+0xa5e>
 8005a60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005a62:	4b47      	ldr	r3, [pc, #284]	@ (8005b80 <_strtod_l+0xaf8>)
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d103      	bne.n	8005a70 <_strtod_l+0x9e8>
 8005a68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	f43f ad2f 	beq.w	80054ce <_strtod_l+0x446>
 8005a70:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8005b80 <_strtod_l+0xaf8>
 8005a74:	f04f 3aff 	mov.w	sl, #4294967295
 8005a78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005a7a:	9805      	ldr	r0, [sp, #20]
 8005a7c:	f002 fca8 	bl	80083d0 <_Bfree>
 8005a80:	9805      	ldr	r0, [sp, #20]
 8005a82:	4649      	mov	r1, r9
 8005a84:	f002 fca4 	bl	80083d0 <_Bfree>
 8005a88:	9805      	ldr	r0, [sp, #20]
 8005a8a:	4641      	mov	r1, r8
 8005a8c:	f002 fca0 	bl	80083d0 <_Bfree>
 8005a90:	9805      	ldr	r0, [sp, #20]
 8005a92:	4621      	mov	r1, r4
 8005a94:	f002 fc9c 	bl	80083d0 <_Bfree>
 8005a98:	e619      	b.n	80056ce <_strtod_l+0x646>
 8005a9a:	f1ba 0f01 	cmp.w	sl, #1
 8005a9e:	d103      	bne.n	8005aa8 <_strtod_l+0xa20>
 8005aa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f43f ada6 	beq.w	80055f4 <_strtod_l+0x56c>
 8005aa8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005b58 <_strtod_l+0xad0>
 8005aac:	4f35      	ldr	r7, [pc, #212]	@ (8005b84 <_strtod_l+0xafc>)
 8005aae:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005ab2:	2600      	movs	r6, #0
 8005ab4:	e7b1      	b.n	8005a1a <_strtod_l+0x992>
 8005ab6:	4f34      	ldr	r7, [pc, #208]	@ (8005b88 <_strtod_l+0xb00>)
 8005ab8:	2600      	movs	r6, #0
 8005aba:	e7aa      	b.n	8005a12 <_strtod_l+0x98a>
 8005abc:	4b32      	ldr	r3, [pc, #200]	@ (8005b88 <_strtod_l+0xb00>)
 8005abe:	4630      	mov	r0, r6
 8005ac0:	4639      	mov	r1, r7
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f7fa fda0 	bl	8000608 <__aeabi_dmul>
 8005ac8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005aca:	4606      	mov	r6, r0
 8005acc:	460f      	mov	r7, r1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d09f      	beq.n	8005a12 <_strtod_l+0x98a>
 8005ad2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005ad6:	e7a0      	b.n	8005a1a <_strtod_l+0x992>
 8005ad8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005b60 <_strtod_l+0xad8>
 8005adc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005ae0:	ec57 6b17 	vmov	r6, r7, d7
 8005ae4:	e799      	b.n	8005a1a <_strtod_l+0x992>
 8005ae6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005aea:	9b08      	ldr	r3, [sp, #32]
 8005aec:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1c1      	bne.n	8005a78 <_strtod_l+0x9f0>
 8005af4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005af8:	0d1b      	lsrs	r3, r3, #20
 8005afa:	051b      	lsls	r3, r3, #20
 8005afc:	429d      	cmp	r5, r3
 8005afe:	d1bb      	bne.n	8005a78 <_strtod_l+0x9f0>
 8005b00:	4630      	mov	r0, r6
 8005b02:	4639      	mov	r1, r7
 8005b04:	f7fb f8e0 	bl	8000cc8 <__aeabi_d2lz>
 8005b08:	f7fa fd50 	bl	80005ac <__aeabi_l2d>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4630      	mov	r0, r6
 8005b12:	4639      	mov	r1, r7
 8005b14:	f7fa fbc0 	bl	8000298 <__aeabi_dsub>
 8005b18:	460b      	mov	r3, r1
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005b20:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005b24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b26:	ea46 060a 	orr.w	r6, r6, sl
 8005b2a:	431e      	orrs	r6, r3
 8005b2c:	d06f      	beq.n	8005c0e <_strtod_l+0xb86>
 8005b2e:	a30e      	add	r3, pc, #56	@ (adr r3, 8005b68 <_strtod_l+0xae0>)
 8005b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b34:	f7fa ffda 	bl	8000aec <__aeabi_dcmplt>
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	f47f acd3 	bne.w	80054e4 <_strtod_l+0x45c>
 8005b3e:	a30c      	add	r3, pc, #48	@ (adr r3, 8005b70 <_strtod_l+0xae8>)
 8005b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b48:	f7fa ffee 	bl	8000b28 <__aeabi_dcmpgt>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	d093      	beq.n	8005a78 <_strtod_l+0x9f0>
 8005b50:	e4c8      	b.n	80054e4 <_strtod_l+0x45c>
 8005b52:	bf00      	nop
 8005b54:	f3af 8000 	nop.w
 8005b58:	00000000 	.word	0x00000000
 8005b5c:	bff00000 	.word	0xbff00000
 8005b60:	00000000 	.word	0x00000000
 8005b64:	3ff00000 	.word	0x3ff00000
 8005b68:	94a03595 	.word	0x94a03595
 8005b6c:	3fdfffff 	.word	0x3fdfffff
 8005b70:	35afe535 	.word	0x35afe535
 8005b74:	3fe00000 	.word	0x3fe00000
 8005b78:	000fffff 	.word	0x000fffff
 8005b7c:	7ff00000 	.word	0x7ff00000
 8005b80:	7fefffff 	.word	0x7fefffff
 8005b84:	3ff00000 	.word	0x3ff00000
 8005b88:	3fe00000 	.word	0x3fe00000
 8005b8c:	7fe00000 	.word	0x7fe00000
 8005b90:	7c9fffff 	.word	0x7c9fffff
 8005b94:	9b08      	ldr	r3, [sp, #32]
 8005b96:	b323      	cbz	r3, 8005be2 <_strtod_l+0xb5a>
 8005b98:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005b9c:	d821      	bhi.n	8005be2 <_strtod_l+0xb5a>
 8005b9e:	a328      	add	r3, pc, #160	@ (adr r3, 8005c40 <_strtod_l+0xbb8>)
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	4630      	mov	r0, r6
 8005ba6:	4639      	mov	r1, r7
 8005ba8:	f7fa ffaa 	bl	8000b00 <__aeabi_dcmple>
 8005bac:	b1a0      	cbz	r0, 8005bd8 <_strtod_l+0xb50>
 8005bae:	4639      	mov	r1, r7
 8005bb0:	4630      	mov	r0, r6
 8005bb2:	f7fb f801 	bl	8000bb8 <__aeabi_d2uiz>
 8005bb6:	2801      	cmp	r0, #1
 8005bb8:	bf38      	it	cc
 8005bba:	2001      	movcc	r0, #1
 8005bbc:	f7fa fcaa 	bl	8000514 <__aeabi_ui2d>
 8005bc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005bc2:	4606      	mov	r6, r0
 8005bc4:	460f      	mov	r7, r1
 8005bc6:	b9fb      	cbnz	r3, 8005c08 <_strtod_l+0xb80>
 8005bc8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005bcc:	9014      	str	r0, [sp, #80]	@ 0x50
 8005bce:	9315      	str	r3, [sp, #84]	@ 0x54
 8005bd0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005bd4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005bd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005bda:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005bde:	1b5b      	subs	r3, r3, r5
 8005be0:	9311      	str	r3, [sp, #68]	@ 0x44
 8005be2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005be6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005bea:	f002 ff1d 	bl	8008a28 <__ulp>
 8005bee:	4650      	mov	r0, sl
 8005bf0:	ec53 2b10 	vmov	r2, r3, d0
 8005bf4:	4659      	mov	r1, fp
 8005bf6:	f7fa fd07 	bl	8000608 <__aeabi_dmul>
 8005bfa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005bfe:	f7fa fb4d 	bl	800029c <__adddf3>
 8005c02:	4682      	mov	sl, r0
 8005c04:	468b      	mov	fp, r1
 8005c06:	e770      	b.n	8005aea <_strtod_l+0xa62>
 8005c08:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005c0c:	e7e0      	b.n	8005bd0 <_strtod_l+0xb48>
 8005c0e:	a30e      	add	r3, pc, #56	@ (adr r3, 8005c48 <_strtod_l+0xbc0>)
 8005c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c14:	f7fa ff6a 	bl	8000aec <__aeabi_dcmplt>
 8005c18:	e798      	b.n	8005b4c <_strtod_l+0xac4>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	930e      	str	r3, [sp, #56]	@ 0x38
 8005c1e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005c20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c22:	6013      	str	r3, [r2, #0]
 8005c24:	f7ff ba6d 	b.w	8005102 <_strtod_l+0x7a>
 8005c28:	2a65      	cmp	r2, #101	@ 0x65
 8005c2a:	f43f ab68 	beq.w	80052fe <_strtod_l+0x276>
 8005c2e:	2a45      	cmp	r2, #69	@ 0x45
 8005c30:	f43f ab65 	beq.w	80052fe <_strtod_l+0x276>
 8005c34:	2301      	movs	r3, #1
 8005c36:	f7ff bba0 	b.w	800537a <_strtod_l+0x2f2>
 8005c3a:	bf00      	nop
 8005c3c:	f3af 8000 	nop.w
 8005c40:	ffc00000 	.word	0xffc00000
 8005c44:	41dfffff 	.word	0x41dfffff
 8005c48:	94a03595 	.word	0x94a03595
 8005c4c:	3fcfffff 	.word	0x3fcfffff

08005c50 <_strtod_r>:
 8005c50:	4b01      	ldr	r3, [pc, #4]	@ (8005c58 <_strtod_r+0x8>)
 8005c52:	f7ff ba19 	b.w	8005088 <_strtod_l>
 8005c56:	bf00      	nop
 8005c58:	20000038 	.word	0x20000038

08005c5c <strtod>:
 8005c5c:	460a      	mov	r2, r1
 8005c5e:	4601      	mov	r1, r0
 8005c60:	4802      	ldr	r0, [pc, #8]	@ (8005c6c <strtod+0x10>)
 8005c62:	4b03      	ldr	r3, [pc, #12]	@ (8005c70 <strtod+0x14>)
 8005c64:	6800      	ldr	r0, [r0, #0]
 8005c66:	f7ff ba0f 	b.w	8005088 <_strtod_l>
 8005c6a:	bf00      	nop
 8005c6c:	200001a4 	.word	0x200001a4
 8005c70:	20000038 	.word	0x20000038

08005c74 <strtof>:
 8005c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c78:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8005d38 <strtof+0xc4>
 8005c7c:	4b29      	ldr	r3, [pc, #164]	@ (8005d24 <strtof+0xb0>)
 8005c7e:	460a      	mov	r2, r1
 8005c80:	ed2d 8b02 	vpush	{d8}
 8005c84:	4601      	mov	r1, r0
 8005c86:	f8d8 0000 	ldr.w	r0, [r8]
 8005c8a:	f7ff f9fd 	bl	8005088 <_strtod_l>
 8005c8e:	ec55 4b10 	vmov	r4, r5, d0
 8005c92:	4622      	mov	r2, r4
 8005c94:	462b      	mov	r3, r5
 8005c96:	4620      	mov	r0, r4
 8005c98:	4629      	mov	r1, r5
 8005c9a:	f7fa ff4f 	bl	8000b3c <__aeabi_dcmpun>
 8005c9e:	b190      	cbz	r0, 8005cc6 <strtof+0x52>
 8005ca0:	2d00      	cmp	r5, #0
 8005ca2:	4821      	ldr	r0, [pc, #132]	@ (8005d28 <strtof+0xb4>)
 8005ca4:	da09      	bge.n	8005cba <strtof+0x46>
 8005ca6:	f001 f8a7 	bl	8006df8 <nanf>
 8005caa:	eeb1 8a40 	vneg.f32	s16, s0
 8005cae:	eeb0 0a48 	vmov.f32	s0, s16
 8005cb2:	ecbd 8b02 	vpop	{d8}
 8005cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cba:	ecbd 8b02 	vpop	{d8}
 8005cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cc2:	f001 b899 	b.w	8006df8 <nanf>
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	4629      	mov	r1, r5
 8005cca:	f7fa ff95 	bl	8000bf8 <__aeabi_d2f>
 8005cce:	ee08 0a10 	vmov	s16, r0
 8005cd2:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8005d2c <strtof+0xb8>
 8005cd6:	eeb0 7ac8 	vabs.f32	s14, s16
 8005cda:	eeb4 7a67 	vcmp.f32	s14, s15
 8005cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce2:	dd11      	ble.n	8005d08 <strtof+0x94>
 8005ce4:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8005ce8:	4b11      	ldr	r3, [pc, #68]	@ (8005d30 <strtof+0xbc>)
 8005cea:	f04f 32ff 	mov.w	r2, #4294967295
 8005cee:	4620      	mov	r0, r4
 8005cf0:	4639      	mov	r1, r7
 8005cf2:	f7fa ff23 	bl	8000b3c <__aeabi_dcmpun>
 8005cf6:	b980      	cbnz	r0, 8005d1a <strtof+0xa6>
 8005cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8005d30 <strtof+0xbc>)
 8005cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfe:	4620      	mov	r0, r4
 8005d00:	4639      	mov	r1, r7
 8005d02:	f7fa fefd 	bl	8000b00 <__aeabi_dcmple>
 8005d06:	b940      	cbnz	r0, 8005d1a <strtof+0xa6>
 8005d08:	ee18 3a10 	vmov	r3, s16
 8005d0c:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8005d10:	d1cd      	bne.n	8005cae <strtof+0x3a>
 8005d12:	4b08      	ldr	r3, [pc, #32]	@ (8005d34 <strtof+0xc0>)
 8005d14:	402b      	ands	r3, r5
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d0c9      	beq.n	8005cae <strtof+0x3a>
 8005d1a:	f8d8 3000 	ldr.w	r3, [r8]
 8005d1e:	2222      	movs	r2, #34	@ 0x22
 8005d20:	601a      	str	r2, [r3, #0]
 8005d22:	e7c4      	b.n	8005cae <strtof+0x3a>
 8005d24:	20000038 	.word	0x20000038
 8005d28:	0800e989 	.word	0x0800e989
 8005d2c:	7f7fffff 	.word	0x7f7fffff
 8005d30:	7fefffff 	.word	0x7fefffff
 8005d34:	7ff00000 	.word	0x7ff00000
 8005d38:	200001a4 	.word	0x200001a4

08005d3c <__cvt>:
 8005d3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d40:	ec57 6b10 	vmov	r6, r7, d0
 8005d44:	2f00      	cmp	r7, #0
 8005d46:	460c      	mov	r4, r1
 8005d48:	4619      	mov	r1, r3
 8005d4a:	463b      	mov	r3, r7
 8005d4c:	bfbb      	ittet	lt
 8005d4e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005d52:	461f      	movlt	r7, r3
 8005d54:	2300      	movge	r3, #0
 8005d56:	232d      	movlt	r3, #45	@ 0x2d
 8005d58:	700b      	strb	r3, [r1, #0]
 8005d5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d5c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005d60:	4691      	mov	r9, r2
 8005d62:	f023 0820 	bic.w	r8, r3, #32
 8005d66:	bfbc      	itt	lt
 8005d68:	4632      	movlt	r2, r6
 8005d6a:	4616      	movlt	r6, r2
 8005d6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d70:	d005      	beq.n	8005d7e <__cvt+0x42>
 8005d72:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005d76:	d100      	bne.n	8005d7a <__cvt+0x3e>
 8005d78:	3401      	adds	r4, #1
 8005d7a:	2102      	movs	r1, #2
 8005d7c:	e000      	b.n	8005d80 <__cvt+0x44>
 8005d7e:	2103      	movs	r1, #3
 8005d80:	ab03      	add	r3, sp, #12
 8005d82:	9301      	str	r3, [sp, #4]
 8005d84:	ab02      	add	r3, sp, #8
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	ec47 6b10 	vmov	d0, r6, r7
 8005d8c:	4653      	mov	r3, sl
 8005d8e:	4622      	mov	r2, r4
 8005d90:	f001 f8c2 	bl	8006f18 <_dtoa_r>
 8005d94:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005d98:	4605      	mov	r5, r0
 8005d9a:	d119      	bne.n	8005dd0 <__cvt+0x94>
 8005d9c:	f019 0f01 	tst.w	r9, #1
 8005da0:	d00e      	beq.n	8005dc0 <__cvt+0x84>
 8005da2:	eb00 0904 	add.w	r9, r0, r4
 8005da6:	2200      	movs	r2, #0
 8005da8:	2300      	movs	r3, #0
 8005daa:	4630      	mov	r0, r6
 8005dac:	4639      	mov	r1, r7
 8005dae:	f7fa fe93 	bl	8000ad8 <__aeabi_dcmpeq>
 8005db2:	b108      	cbz	r0, 8005db8 <__cvt+0x7c>
 8005db4:	f8cd 900c 	str.w	r9, [sp, #12]
 8005db8:	2230      	movs	r2, #48	@ 0x30
 8005dba:	9b03      	ldr	r3, [sp, #12]
 8005dbc:	454b      	cmp	r3, r9
 8005dbe:	d31e      	bcc.n	8005dfe <__cvt+0xc2>
 8005dc0:	9b03      	ldr	r3, [sp, #12]
 8005dc2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005dc4:	1b5b      	subs	r3, r3, r5
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	6013      	str	r3, [r2, #0]
 8005dca:	b004      	add	sp, #16
 8005dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005dd4:	eb00 0904 	add.w	r9, r0, r4
 8005dd8:	d1e5      	bne.n	8005da6 <__cvt+0x6a>
 8005dda:	7803      	ldrb	r3, [r0, #0]
 8005ddc:	2b30      	cmp	r3, #48	@ 0x30
 8005dde:	d10a      	bne.n	8005df6 <__cvt+0xba>
 8005de0:	2200      	movs	r2, #0
 8005de2:	2300      	movs	r3, #0
 8005de4:	4630      	mov	r0, r6
 8005de6:	4639      	mov	r1, r7
 8005de8:	f7fa fe76 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dec:	b918      	cbnz	r0, 8005df6 <__cvt+0xba>
 8005dee:	f1c4 0401 	rsb	r4, r4, #1
 8005df2:	f8ca 4000 	str.w	r4, [sl]
 8005df6:	f8da 3000 	ldr.w	r3, [sl]
 8005dfa:	4499      	add	r9, r3
 8005dfc:	e7d3      	b.n	8005da6 <__cvt+0x6a>
 8005dfe:	1c59      	adds	r1, r3, #1
 8005e00:	9103      	str	r1, [sp, #12]
 8005e02:	701a      	strb	r2, [r3, #0]
 8005e04:	e7d9      	b.n	8005dba <__cvt+0x7e>

08005e06 <__exponent>:
 8005e06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e08:	2900      	cmp	r1, #0
 8005e0a:	bfba      	itte	lt
 8005e0c:	4249      	neglt	r1, r1
 8005e0e:	232d      	movlt	r3, #45	@ 0x2d
 8005e10:	232b      	movge	r3, #43	@ 0x2b
 8005e12:	2909      	cmp	r1, #9
 8005e14:	7002      	strb	r2, [r0, #0]
 8005e16:	7043      	strb	r3, [r0, #1]
 8005e18:	dd29      	ble.n	8005e6e <__exponent+0x68>
 8005e1a:	f10d 0307 	add.w	r3, sp, #7
 8005e1e:	461d      	mov	r5, r3
 8005e20:	270a      	movs	r7, #10
 8005e22:	461a      	mov	r2, r3
 8005e24:	fbb1 f6f7 	udiv	r6, r1, r7
 8005e28:	fb07 1416 	mls	r4, r7, r6, r1
 8005e2c:	3430      	adds	r4, #48	@ 0x30
 8005e2e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005e32:	460c      	mov	r4, r1
 8005e34:	2c63      	cmp	r4, #99	@ 0x63
 8005e36:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e3a:	4631      	mov	r1, r6
 8005e3c:	dcf1      	bgt.n	8005e22 <__exponent+0x1c>
 8005e3e:	3130      	adds	r1, #48	@ 0x30
 8005e40:	1e94      	subs	r4, r2, #2
 8005e42:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005e46:	1c41      	adds	r1, r0, #1
 8005e48:	4623      	mov	r3, r4
 8005e4a:	42ab      	cmp	r3, r5
 8005e4c:	d30a      	bcc.n	8005e64 <__exponent+0x5e>
 8005e4e:	f10d 0309 	add.w	r3, sp, #9
 8005e52:	1a9b      	subs	r3, r3, r2
 8005e54:	42ac      	cmp	r4, r5
 8005e56:	bf88      	it	hi
 8005e58:	2300      	movhi	r3, #0
 8005e5a:	3302      	adds	r3, #2
 8005e5c:	4403      	add	r3, r0
 8005e5e:	1a18      	subs	r0, r3, r0
 8005e60:	b003      	add	sp, #12
 8005e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e64:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005e68:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005e6c:	e7ed      	b.n	8005e4a <__exponent+0x44>
 8005e6e:	2330      	movs	r3, #48	@ 0x30
 8005e70:	3130      	adds	r1, #48	@ 0x30
 8005e72:	7083      	strb	r3, [r0, #2]
 8005e74:	70c1      	strb	r1, [r0, #3]
 8005e76:	1d03      	adds	r3, r0, #4
 8005e78:	e7f1      	b.n	8005e5e <__exponent+0x58>
	...

08005e7c <_printf_float>:
 8005e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e80:	b08d      	sub	sp, #52	@ 0x34
 8005e82:	460c      	mov	r4, r1
 8005e84:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005e88:	4616      	mov	r6, r2
 8005e8a:	461f      	mov	r7, r3
 8005e8c:	4605      	mov	r5, r0
 8005e8e:	f000 ff25 	bl	8006cdc <_localeconv_r>
 8005e92:	6803      	ldr	r3, [r0, #0]
 8005e94:	9304      	str	r3, [sp, #16]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fa f9f2 	bl	8000280 <strlen>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ea0:	f8d8 3000 	ldr.w	r3, [r8]
 8005ea4:	9005      	str	r0, [sp, #20]
 8005ea6:	3307      	adds	r3, #7
 8005ea8:	f023 0307 	bic.w	r3, r3, #7
 8005eac:	f103 0208 	add.w	r2, r3, #8
 8005eb0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005eb4:	f8d4 b000 	ldr.w	fp, [r4]
 8005eb8:	f8c8 2000 	str.w	r2, [r8]
 8005ebc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ec0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005ec4:	9307      	str	r3, [sp, #28]
 8005ec6:	f8cd 8018 	str.w	r8, [sp, #24]
 8005eca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005ece:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ed2:	4b9c      	ldr	r3, [pc, #624]	@ (8006144 <_printf_float+0x2c8>)
 8005ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed8:	f7fa fe30 	bl	8000b3c <__aeabi_dcmpun>
 8005edc:	bb70      	cbnz	r0, 8005f3c <_printf_float+0xc0>
 8005ede:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ee2:	4b98      	ldr	r3, [pc, #608]	@ (8006144 <_printf_float+0x2c8>)
 8005ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee8:	f7fa fe0a 	bl	8000b00 <__aeabi_dcmple>
 8005eec:	bb30      	cbnz	r0, 8005f3c <_printf_float+0xc0>
 8005eee:	2200      	movs	r2, #0
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	4640      	mov	r0, r8
 8005ef4:	4649      	mov	r1, r9
 8005ef6:	f7fa fdf9 	bl	8000aec <__aeabi_dcmplt>
 8005efa:	b110      	cbz	r0, 8005f02 <_printf_float+0x86>
 8005efc:	232d      	movs	r3, #45	@ 0x2d
 8005efe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f02:	4a91      	ldr	r2, [pc, #580]	@ (8006148 <_printf_float+0x2cc>)
 8005f04:	4b91      	ldr	r3, [pc, #580]	@ (800614c <_printf_float+0x2d0>)
 8005f06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005f0a:	bf8c      	ite	hi
 8005f0c:	4690      	movhi	r8, r2
 8005f0e:	4698      	movls	r8, r3
 8005f10:	2303      	movs	r3, #3
 8005f12:	6123      	str	r3, [r4, #16]
 8005f14:	f02b 0304 	bic.w	r3, fp, #4
 8005f18:	6023      	str	r3, [r4, #0]
 8005f1a:	f04f 0900 	mov.w	r9, #0
 8005f1e:	9700      	str	r7, [sp, #0]
 8005f20:	4633      	mov	r3, r6
 8005f22:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005f24:	4621      	mov	r1, r4
 8005f26:	4628      	mov	r0, r5
 8005f28:	f000 f9d2 	bl	80062d0 <_printf_common>
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	f040 808d 	bne.w	800604c <_printf_float+0x1d0>
 8005f32:	f04f 30ff 	mov.w	r0, #4294967295
 8005f36:	b00d      	add	sp, #52	@ 0x34
 8005f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f3c:	4642      	mov	r2, r8
 8005f3e:	464b      	mov	r3, r9
 8005f40:	4640      	mov	r0, r8
 8005f42:	4649      	mov	r1, r9
 8005f44:	f7fa fdfa 	bl	8000b3c <__aeabi_dcmpun>
 8005f48:	b140      	cbz	r0, 8005f5c <_printf_float+0xe0>
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	bfbc      	itt	lt
 8005f50:	232d      	movlt	r3, #45	@ 0x2d
 8005f52:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005f56:	4a7e      	ldr	r2, [pc, #504]	@ (8006150 <_printf_float+0x2d4>)
 8005f58:	4b7e      	ldr	r3, [pc, #504]	@ (8006154 <_printf_float+0x2d8>)
 8005f5a:	e7d4      	b.n	8005f06 <_printf_float+0x8a>
 8005f5c:	6863      	ldr	r3, [r4, #4]
 8005f5e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005f62:	9206      	str	r2, [sp, #24]
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	d13b      	bne.n	8005fe0 <_printf_float+0x164>
 8005f68:	2306      	movs	r3, #6
 8005f6a:	6063      	str	r3, [r4, #4]
 8005f6c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005f70:	2300      	movs	r3, #0
 8005f72:	6022      	str	r2, [r4, #0]
 8005f74:	9303      	str	r3, [sp, #12]
 8005f76:	ab0a      	add	r3, sp, #40	@ 0x28
 8005f78:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005f7c:	ab09      	add	r3, sp, #36	@ 0x24
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	6861      	ldr	r1, [r4, #4]
 8005f82:	ec49 8b10 	vmov	d0, r8, r9
 8005f86:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	f7ff fed6 	bl	8005d3c <__cvt>
 8005f90:	9b06      	ldr	r3, [sp, #24]
 8005f92:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005f94:	2b47      	cmp	r3, #71	@ 0x47
 8005f96:	4680      	mov	r8, r0
 8005f98:	d129      	bne.n	8005fee <_printf_float+0x172>
 8005f9a:	1cc8      	adds	r0, r1, #3
 8005f9c:	db02      	blt.n	8005fa4 <_printf_float+0x128>
 8005f9e:	6863      	ldr	r3, [r4, #4]
 8005fa0:	4299      	cmp	r1, r3
 8005fa2:	dd41      	ble.n	8006028 <_printf_float+0x1ac>
 8005fa4:	f1aa 0a02 	sub.w	sl, sl, #2
 8005fa8:	fa5f fa8a 	uxtb.w	sl, sl
 8005fac:	3901      	subs	r1, #1
 8005fae:	4652      	mov	r2, sl
 8005fb0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005fb4:	9109      	str	r1, [sp, #36]	@ 0x24
 8005fb6:	f7ff ff26 	bl	8005e06 <__exponent>
 8005fba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fbc:	1813      	adds	r3, r2, r0
 8005fbe:	2a01      	cmp	r2, #1
 8005fc0:	4681      	mov	r9, r0
 8005fc2:	6123      	str	r3, [r4, #16]
 8005fc4:	dc02      	bgt.n	8005fcc <_printf_float+0x150>
 8005fc6:	6822      	ldr	r2, [r4, #0]
 8005fc8:	07d2      	lsls	r2, r2, #31
 8005fca:	d501      	bpl.n	8005fd0 <_printf_float+0x154>
 8005fcc:	3301      	adds	r3, #1
 8005fce:	6123      	str	r3, [r4, #16]
 8005fd0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d0a2      	beq.n	8005f1e <_printf_float+0xa2>
 8005fd8:	232d      	movs	r3, #45	@ 0x2d
 8005fda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fde:	e79e      	b.n	8005f1e <_printf_float+0xa2>
 8005fe0:	9a06      	ldr	r2, [sp, #24]
 8005fe2:	2a47      	cmp	r2, #71	@ 0x47
 8005fe4:	d1c2      	bne.n	8005f6c <_printf_float+0xf0>
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d1c0      	bne.n	8005f6c <_printf_float+0xf0>
 8005fea:	2301      	movs	r3, #1
 8005fec:	e7bd      	b.n	8005f6a <_printf_float+0xee>
 8005fee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005ff2:	d9db      	bls.n	8005fac <_printf_float+0x130>
 8005ff4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005ff8:	d118      	bne.n	800602c <_printf_float+0x1b0>
 8005ffa:	2900      	cmp	r1, #0
 8005ffc:	6863      	ldr	r3, [r4, #4]
 8005ffe:	dd0b      	ble.n	8006018 <_printf_float+0x19c>
 8006000:	6121      	str	r1, [r4, #16]
 8006002:	b913      	cbnz	r3, 800600a <_printf_float+0x18e>
 8006004:	6822      	ldr	r2, [r4, #0]
 8006006:	07d0      	lsls	r0, r2, #31
 8006008:	d502      	bpl.n	8006010 <_printf_float+0x194>
 800600a:	3301      	adds	r3, #1
 800600c:	440b      	add	r3, r1
 800600e:	6123      	str	r3, [r4, #16]
 8006010:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006012:	f04f 0900 	mov.w	r9, #0
 8006016:	e7db      	b.n	8005fd0 <_printf_float+0x154>
 8006018:	b913      	cbnz	r3, 8006020 <_printf_float+0x1a4>
 800601a:	6822      	ldr	r2, [r4, #0]
 800601c:	07d2      	lsls	r2, r2, #31
 800601e:	d501      	bpl.n	8006024 <_printf_float+0x1a8>
 8006020:	3302      	adds	r3, #2
 8006022:	e7f4      	b.n	800600e <_printf_float+0x192>
 8006024:	2301      	movs	r3, #1
 8006026:	e7f2      	b.n	800600e <_printf_float+0x192>
 8006028:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800602c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800602e:	4299      	cmp	r1, r3
 8006030:	db05      	blt.n	800603e <_printf_float+0x1c2>
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	6121      	str	r1, [r4, #16]
 8006036:	07d8      	lsls	r0, r3, #31
 8006038:	d5ea      	bpl.n	8006010 <_printf_float+0x194>
 800603a:	1c4b      	adds	r3, r1, #1
 800603c:	e7e7      	b.n	800600e <_printf_float+0x192>
 800603e:	2900      	cmp	r1, #0
 8006040:	bfd4      	ite	le
 8006042:	f1c1 0202 	rsble	r2, r1, #2
 8006046:	2201      	movgt	r2, #1
 8006048:	4413      	add	r3, r2
 800604a:	e7e0      	b.n	800600e <_printf_float+0x192>
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	055a      	lsls	r2, r3, #21
 8006050:	d407      	bmi.n	8006062 <_printf_float+0x1e6>
 8006052:	6923      	ldr	r3, [r4, #16]
 8006054:	4642      	mov	r2, r8
 8006056:	4631      	mov	r1, r6
 8006058:	4628      	mov	r0, r5
 800605a:	47b8      	blx	r7
 800605c:	3001      	adds	r0, #1
 800605e:	d12b      	bne.n	80060b8 <_printf_float+0x23c>
 8006060:	e767      	b.n	8005f32 <_printf_float+0xb6>
 8006062:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006066:	f240 80dd 	bls.w	8006224 <_printf_float+0x3a8>
 800606a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800606e:	2200      	movs	r2, #0
 8006070:	2300      	movs	r3, #0
 8006072:	f7fa fd31 	bl	8000ad8 <__aeabi_dcmpeq>
 8006076:	2800      	cmp	r0, #0
 8006078:	d033      	beq.n	80060e2 <_printf_float+0x266>
 800607a:	4a37      	ldr	r2, [pc, #220]	@ (8006158 <_printf_float+0x2dc>)
 800607c:	2301      	movs	r3, #1
 800607e:	4631      	mov	r1, r6
 8006080:	4628      	mov	r0, r5
 8006082:	47b8      	blx	r7
 8006084:	3001      	adds	r0, #1
 8006086:	f43f af54 	beq.w	8005f32 <_printf_float+0xb6>
 800608a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800608e:	4543      	cmp	r3, r8
 8006090:	db02      	blt.n	8006098 <_printf_float+0x21c>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	07d8      	lsls	r0, r3, #31
 8006096:	d50f      	bpl.n	80060b8 <_printf_float+0x23c>
 8006098:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800609c:	4631      	mov	r1, r6
 800609e:	4628      	mov	r0, r5
 80060a0:	47b8      	blx	r7
 80060a2:	3001      	adds	r0, #1
 80060a4:	f43f af45 	beq.w	8005f32 <_printf_float+0xb6>
 80060a8:	f04f 0900 	mov.w	r9, #0
 80060ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80060b0:	f104 0a1a 	add.w	sl, r4, #26
 80060b4:	45c8      	cmp	r8, r9
 80060b6:	dc09      	bgt.n	80060cc <_printf_float+0x250>
 80060b8:	6823      	ldr	r3, [r4, #0]
 80060ba:	079b      	lsls	r3, r3, #30
 80060bc:	f100 8103 	bmi.w	80062c6 <_printf_float+0x44a>
 80060c0:	68e0      	ldr	r0, [r4, #12]
 80060c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060c4:	4298      	cmp	r0, r3
 80060c6:	bfb8      	it	lt
 80060c8:	4618      	movlt	r0, r3
 80060ca:	e734      	b.n	8005f36 <_printf_float+0xba>
 80060cc:	2301      	movs	r3, #1
 80060ce:	4652      	mov	r2, sl
 80060d0:	4631      	mov	r1, r6
 80060d2:	4628      	mov	r0, r5
 80060d4:	47b8      	blx	r7
 80060d6:	3001      	adds	r0, #1
 80060d8:	f43f af2b 	beq.w	8005f32 <_printf_float+0xb6>
 80060dc:	f109 0901 	add.w	r9, r9, #1
 80060e0:	e7e8      	b.n	80060b4 <_printf_float+0x238>
 80060e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	dc39      	bgt.n	800615c <_printf_float+0x2e0>
 80060e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006158 <_printf_float+0x2dc>)
 80060ea:	2301      	movs	r3, #1
 80060ec:	4631      	mov	r1, r6
 80060ee:	4628      	mov	r0, r5
 80060f0:	47b8      	blx	r7
 80060f2:	3001      	adds	r0, #1
 80060f4:	f43f af1d 	beq.w	8005f32 <_printf_float+0xb6>
 80060f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80060fc:	ea59 0303 	orrs.w	r3, r9, r3
 8006100:	d102      	bne.n	8006108 <_printf_float+0x28c>
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	07d9      	lsls	r1, r3, #31
 8006106:	d5d7      	bpl.n	80060b8 <_printf_float+0x23c>
 8006108:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800610c:	4631      	mov	r1, r6
 800610e:	4628      	mov	r0, r5
 8006110:	47b8      	blx	r7
 8006112:	3001      	adds	r0, #1
 8006114:	f43f af0d 	beq.w	8005f32 <_printf_float+0xb6>
 8006118:	f04f 0a00 	mov.w	sl, #0
 800611c:	f104 0b1a 	add.w	fp, r4, #26
 8006120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006122:	425b      	negs	r3, r3
 8006124:	4553      	cmp	r3, sl
 8006126:	dc01      	bgt.n	800612c <_printf_float+0x2b0>
 8006128:	464b      	mov	r3, r9
 800612a:	e793      	b.n	8006054 <_printf_float+0x1d8>
 800612c:	2301      	movs	r3, #1
 800612e:	465a      	mov	r2, fp
 8006130:	4631      	mov	r1, r6
 8006132:	4628      	mov	r0, r5
 8006134:	47b8      	blx	r7
 8006136:	3001      	adds	r0, #1
 8006138:	f43f aefb 	beq.w	8005f32 <_printf_float+0xb6>
 800613c:	f10a 0a01 	add.w	sl, sl, #1
 8006140:	e7ee      	b.n	8006120 <_printf_float+0x2a4>
 8006142:	bf00      	nop
 8006144:	7fefffff 	.word	0x7fefffff
 8006148:	0800e7ba 	.word	0x0800e7ba
 800614c:	0800e7b6 	.word	0x0800e7b6
 8006150:	0800e7c2 	.word	0x0800e7c2
 8006154:	0800e7be 	.word	0x0800e7be
 8006158:	0800e7c6 	.word	0x0800e7c6
 800615c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800615e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006162:	4553      	cmp	r3, sl
 8006164:	bfa8      	it	ge
 8006166:	4653      	movge	r3, sl
 8006168:	2b00      	cmp	r3, #0
 800616a:	4699      	mov	r9, r3
 800616c:	dc36      	bgt.n	80061dc <_printf_float+0x360>
 800616e:	f04f 0b00 	mov.w	fp, #0
 8006172:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006176:	f104 021a 	add.w	r2, r4, #26
 800617a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800617c:	9306      	str	r3, [sp, #24]
 800617e:	eba3 0309 	sub.w	r3, r3, r9
 8006182:	455b      	cmp	r3, fp
 8006184:	dc31      	bgt.n	80061ea <_printf_float+0x36e>
 8006186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006188:	459a      	cmp	sl, r3
 800618a:	dc3a      	bgt.n	8006202 <_printf_float+0x386>
 800618c:	6823      	ldr	r3, [r4, #0]
 800618e:	07da      	lsls	r2, r3, #31
 8006190:	d437      	bmi.n	8006202 <_printf_float+0x386>
 8006192:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006194:	ebaa 0903 	sub.w	r9, sl, r3
 8006198:	9b06      	ldr	r3, [sp, #24]
 800619a:	ebaa 0303 	sub.w	r3, sl, r3
 800619e:	4599      	cmp	r9, r3
 80061a0:	bfa8      	it	ge
 80061a2:	4699      	movge	r9, r3
 80061a4:	f1b9 0f00 	cmp.w	r9, #0
 80061a8:	dc33      	bgt.n	8006212 <_printf_float+0x396>
 80061aa:	f04f 0800 	mov.w	r8, #0
 80061ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061b2:	f104 0b1a 	add.w	fp, r4, #26
 80061b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061b8:	ebaa 0303 	sub.w	r3, sl, r3
 80061bc:	eba3 0309 	sub.w	r3, r3, r9
 80061c0:	4543      	cmp	r3, r8
 80061c2:	f77f af79 	ble.w	80060b8 <_printf_float+0x23c>
 80061c6:	2301      	movs	r3, #1
 80061c8:	465a      	mov	r2, fp
 80061ca:	4631      	mov	r1, r6
 80061cc:	4628      	mov	r0, r5
 80061ce:	47b8      	blx	r7
 80061d0:	3001      	adds	r0, #1
 80061d2:	f43f aeae 	beq.w	8005f32 <_printf_float+0xb6>
 80061d6:	f108 0801 	add.w	r8, r8, #1
 80061da:	e7ec      	b.n	80061b6 <_printf_float+0x33a>
 80061dc:	4642      	mov	r2, r8
 80061de:	4631      	mov	r1, r6
 80061e0:	4628      	mov	r0, r5
 80061e2:	47b8      	blx	r7
 80061e4:	3001      	adds	r0, #1
 80061e6:	d1c2      	bne.n	800616e <_printf_float+0x2f2>
 80061e8:	e6a3      	b.n	8005f32 <_printf_float+0xb6>
 80061ea:	2301      	movs	r3, #1
 80061ec:	4631      	mov	r1, r6
 80061ee:	4628      	mov	r0, r5
 80061f0:	9206      	str	r2, [sp, #24]
 80061f2:	47b8      	blx	r7
 80061f4:	3001      	adds	r0, #1
 80061f6:	f43f ae9c 	beq.w	8005f32 <_printf_float+0xb6>
 80061fa:	9a06      	ldr	r2, [sp, #24]
 80061fc:	f10b 0b01 	add.w	fp, fp, #1
 8006200:	e7bb      	b.n	800617a <_printf_float+0x2fe>
 8006202:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006206:	4631      	mov	r1, r6
 8006208:	4628      	mov	r0, r5
 800620a:	47b8      	blx	r7
 800620c:	3001      	adds	r0, #1
 800620e:	d1c0      	bne.n	8006192 <_printf_float+0x316>
 8006210:	e68f      	b.n	8005f32 <_printf_float+0xb6>
 8006212:	9a06      	ldr	r2, [sp, #24]
 8006214:	464b      	mov	r3, r9
 8006216:	4442      	add	r2, r8
 8006218:	4631      	mov	r1, r6
 800621a:	4628      	mov	r0, r5
 800621c:	47b8      	blx	r7
 800621e:	3001      	adds	r0, #1
 8006220:	d1c3      	bne.n	80061aa <_printf_float+0x32e>
 8006222:	e686      	b.n	8005f32 <_printf_float+0xb6>
 8006224:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006228:	f1ba 0f01 	cmp.w	sl, #1
 800622c:	dc01      	bgt.n	8006232 <_printf_float+0x3b6>
 800622e:	07db      	lsls	r3, r3, #31
 8006230:	d536      	bpl.n	80062a0 <_printf_float+0x424>
 8006232:	2301      	movs	r3, #1
 8006234:	4642      	mov	r2, r8
 8006236:	4631      	mov	r1, r6
 8006238:	4628      	mov	r0, r5
 800623a:	47b8      	blx	r7
 800623c:	3001      	adds	r0, #1
 800623e:	f43f ae78 	beq.w	8005f32 <_printf_float+0xb6>
 8006242:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006246:	4631      	mov	r1, r6
 8006248:	4628      	mov	r0, r5
 800624a:	47b8      	blx	r7
 800624c:	3001      	adds	r0, #1
 800624e:	f43f ae70 	beq.w	8005f32 <_printf_float+0xb6>
 8006252:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006256:	2200      	movs	r2, #0
 8006258:	2300      	movs	r3, #0
 800625a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800625e:	f7fa fc3b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006262:	b9c0      	cbnz	r0, 8006296 <_printf_float+0x41a>
 8006264:	4653      	mov	r3, sl
 8006266:	f108 0201 	add.w	r2, r8, #1
 800626a:	4631      	mov	r1, r6
 800626c:	4628      	mov	r0, r5
 800626e:	47b8      	blx	r7
 8006270:	3001      	adds	r0, #1
 8006272:	d10c      	bne.n	800628e <_printf_float+0x412>
 8006274:	e65d      	b.n	8005f32 <_printf_float+0xb6>
 8006276:	2301      	movs	r3, #1
 8006278:	465a      	mov	r2, fp
 800627a:	4631      	mov	r1, r6
 800627c:	4628      	mov	r0, r5
 800627e:	47b8      	blx	r7
 8006280:	3001      	adds	r0, #1
 8006282:	f43f ae56 	beq.w	8005f32 <_printf_float+0xb6>
 8006286:	f108 0801 	add.w	r8, r8, #1
 800628a:	45d0      	cmp	r8, sl
 800628c:	dbf3      	blt.n	8006276 <_printf_float+0x3fa>
 800628e:	464b      	mov	r3, r9
 8006290:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006294:	e6df      	b.n	8006056 <_printf_float+0x1da>
 8006296:	f04f 0800 	mov.w	r8, #0
 800629a:	f104 0b1a 	add.w	fp, r4, #26
 800629e:	e7f4      	b.n	800628a <_printf_float+0x40e>
 80062a0:	2301      	movs	r3, #1
 80062a2:	4642      	mov	r2, r8
 80062a4:	e7e1      	b.n	800626a <_printf_float+0x3ee>
 80062a6:	2301      	movs	r3, #1
 80062a8:	464a      	mov	r2, r9
 80062aa:	4631      	mov	r1, r6
 80062ac:	4628      	mov	r0, r5
 80062ae:	47b8      	blx	r7
 80062b0:	3001      	adds	r0, #1
 80062b2:	f43f ae3e 	beq.w	8005f32 <_printf_float+0xb6>
 80062b6:	f108 0801 	add.w	r8, r8, #1
 80062ba:	68e3      	ldr	r3, [r4, #12]
 80062bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80062be:	1a5b      	subs	r3, r3, r1
 80062c0:	4543      	cmp	r3, r8
 80062c2:	dcf0      	bgt.n	80062a6 <_printf_float+0x42a>
 80062c4:	e6fc      	b.n	80060c0 <_printf_float+0x244>
 80062c6:	f04f 0800 	mov.w	r8, #0
 80062ca:	f104 0919 	add.w	r9, r4, #25
 80062ce:	e7f4      	b.n	80062ba <_printf_float+0x43e>

080062d0 <_printf_common>:
 80062d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062d4:	4616      	mov	r6, r2
 80062d6:	4698      	mov	r8, r3
 80062d8:	688a      	ldr	r2, [r1, #8]
 80062da:	690b      	ldr	r3, [r1, #16]
 80062dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80062e0:	4293      	cmp	r3, r2
 80062e2:	bfb8      	it	lt
 80062e4:	4613      	movlt	r3, r2
 80062e6:	6033      	str	r3, [r6, #0]
 80062e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80062ec:	4607      	mov	r7, r0
 80062ee:	460c      	mov	r4, r1
 80062f0:	b10a      	cbz	r2, 80062f6 <_printf_common+0x26>
 80062f2:	3301      	adds	r3, #1
 80062f4:	6033      	str	r3, [r6, #0]
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	0699      	lsls	r1, r3, #26
 80062fa:	bf42      	ittt	mi
 80062fc:	6833      	ldrmi	r3, [r6, #0]
 80062fe:	3302      	addmi	r3, #2
 8006300:	6033      	strmi	r3, [r6, #0]
 8006302:	6825      	ldr	r5, [r4, #0]
 8006304:	f015 0506 	ands.w	r5, r5, #6
 8006308:	d106      	bne.n	8006318 <_printf_common+0x48>
 800630a:	f104 0a19 	add.w	sl, r4, #25
 800630e:	68e3      	ldr	r3, [r4, #12]
 8006310:	6832      	ldr	r2, [r6, #0]
 8006312:	1a9b      	subs	r3, r3, r2
 8006314:	42ab      	cmp	r3, r5
 8006316:	dc26      	bgt.n	8006366 <_printf_common+0x96>
 8006318:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800631c:	6822      	ldr	r2, [r4, #0]
 800631e:	3b00      	subs	r3, #0
 8006320:	bf18      	it	ne
 8006322:	2301      	movne	r3, #1
 8006324:	0692      	lsls	r2, r2, #26
 8006326:	d42b      	bmi.n	8006380 <_printf_common+0xb0>
 8006328:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800632c:	4641      	mov	r1, r8
 800632e:	4638      	mov	r0, r7
 8006330:	47c8      	blx	r9
 8006332:	3001      	adds	r0, #1
 8006334:	d01e      	beq.n	8006374 <_printf_common+0xa4>
 8006336:	6823      	ldr	r3, [r4, #0]
 8006338:	6922      	ldr	r2, [r4, #16]
 800633a:	f003 0306 	and.w	r3, r3, #6
 800633e:	2b04      	cmp	r3, #4
 8006340:	bf02      	ittt	eq
 8006342:	68e5      	ldreq	r5, [r4, #12]
 8006344:	6833      	ldreq	r3, [r6, #0]
 8006346:	1aed      	subeq	r5, r5, r3
 8006348:	68a3      	ldr	r3, [r4, #8]
 800634a:	bf0c      	ite	eq
 800634c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006350:	2500      	movne	r5, #0
 8006352:	4293      	cmp	r3, r2
 8006354:	bfc4      	itt	gt
 8006356:	1a9b      	subgt	r3, r3, r2
 8006358:	18ed      	addgt	r5, r5, r3
 800635a:	2600      	movs	r6, #0
 800635c:	341a      	adds	r4, #26
 800635e:	42b5      	cmp	r5, r6
 8006360:	d11a      	bne.n	8006398 <_printf_common+0xc8>
 8006362:	2000      	movs	r0, #0
 8006364:	e008      	b.n	8006378 <_printf_common+0xa8>
 8006366:	2301      	movs	r3, #1
 8006368:	4652      	mov	r2, sl
 800636a:	4641      	mov	r1, r8
 800636c:	4638      	mov	r0, r7
 800636e:	47c8      	blx	r9
 8006370:	3001      	adds	r0, #1
 8006372:	d103      	bne.n	800637c <_printf_common+0xac>
 8006374:	f04f 30ff 	mov.w	r0, #4294967295
 8006378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637c:	3501      	adds	r5, #1
 800637e:	e7c6      	b.n	800630e <_printf_common+0x3e>
 8006380:	18e1      	adds	r1, r4, r3
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	2030      	movs	r0, #48	@ 0x30
 8006386:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800638a:	4422      	add	r2, r4
 800638c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006390:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006394:	3302      	adds	r3, #2
 8006396:	e7c7      	b.n	8006328 <_printf_common+0x58>
 8006398:	2301      	movs	r3, #1
 800639a:	4622      	mov	r2, r4
 800639c:	4641      	mov	r1, r8
 800639e:	4638      	mov	r0, r7
 80063a0:	47c8      	blx	r9
 80063a2:	3001      	adds	r0, #1
 80063a4:	d0e6      	beq.n	8006374 <_printf_common+0xa4>
 80063a6:	3601      	adds	r6, #1
 80063a8:	e7d9      	b.n	800635e <_printf_common+0x8e>
	...

080063ac <_printf_i>:
 80063ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063b0:	7e0f      	ldrb	r7, [r1, #24]
 80063b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063b4:	2f78      	cmp	r7, #120	@ 0x78
 80063b6:	4691      	mov	r9, r2
 80063b8:	4680      	mov	r8, r0
 80063ba:	460c      	mov	r4, r1
 80063bc:	469a      	mov	sl, r3
 80063be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063c2:	d807      	bhi.n	80063d4 <_printf_i+0x28>
 80063c4:	2f62      	cmp	r7, #98	@ 0x62
 80063c6:	d80a      	bhi.n	80063de <_printf_i+0x32>
 80063c8:	2f00      	cmp	r7, #0
 80063ca:	f000 80d1 	beq.w	8006570 <_printf_i+0x1c4>
 80063ce:	2f58      	cmp	r7, #88	@ 0x58
 80063d0:	f000 80b8 	beq.w	8006544 <_printf_i+0x198>
 80063d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80063d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80063dc:	e03a      	b.n	8006454 <_printf_i+0xa8>
 80063de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80063e2:	2b15      	cmp	r3, #21
 80063e4:	d8f6      	bhi.n	80063d4 <_printf_i+0x28>
 80063e6:	a101      	add	r1, pc, #4	@ (adr r1, 80063ec <_printf_i+0x40>)
 80063e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063ec:	08006445 	.word	0x08006445
 80063f0:	08006459 	.word	0x08006459
 80063f4:	080063d5 	.word	0x080063d5
 80063f8:	080063d5 	.word	0x080063d5
 80063fc:	080063d5 	.word	0x080063d5
 8006400:	080063d5 	.word	0x080063d5
 8006404:	08006459 	.word	0x08006459
 8006408:	080063d5 	.word	0x080063d5
 800640c:	080063d5 	.word	0x080063d5
 8006410:	080063d5 	.word	0x080063d5
 8006414:	080063d5 	.word	0x080063d5
 8006418:	08006557 	.word	0x08006557
 800641c:	08006483 	.word	0x08006483
 8006420:	08006511 	.word	0x08006511
 8006424:	080063d5 	.word	0x080063d5
 8006428:	080063d5 	.word	0x080063d5
 800642c:	08006579 	.word	0x08006579
 8006430:	080063d5 	.word	0x080063d5
 8006434:	08006483 	.word	0x08006483
 8006438:	080063d5 	.word	0x080063d5
 800643c:	080063d5 	.word	0x080063d5
 8006440:	08006519 	.word	0x08006519
 8006444:	6833      	ldr	r3, [r6, #0]
 8006446:	1d1a      	adds	r2, r3, #4
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6032      	str	r2, [r6, #0]
 800644c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006450:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006454:	2301      	movs	r3, #1
 8006456:	e09c      	b.n	8006592 <_printf_i+0x1e6>
 8006458:	6833      	ldr	r3, [r6, #0]
 800645a:	6820      	ldr	r0, [r4, #0]
 800645c:	1d19      	adds	r1, r3, #4
 800645e:	6031      	str	r1, [r6, #0]
 8006460:	0606      	lsls	r6, r0, #24
 8006462:	d501      	bpl.n	8006468 <_printf_i+0xbc>
 8006464:	681d      	ldr	r5, [r3, #0]
 8006466:	e003      	b.n	8006470 <_printf_i+0xc4>
 8006468:	0645      	lsls	r5, r0, #25
 800646a:	d5fb      	bpl.n	8006464 <_printf_i+0xb8>
 800646c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006470:	2d00      	cmp	r5, #0
 8006472:	da03      	bge.n	800647c <_printf_i+0xd0>
 8006474:	232d      	movs	r3, #45	@ 0x2d
 8006476:	426d      	negs	r5, r5
 8006478:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800647c:	4858      	ldr	r0, [pc, #352]	@ (80065e0 <_printf_i+0x234>)
 800647e:	230a      	movs	r3, #10
 8006480:	e011      	b.n	80064a6 <_printf_i+0xfa>
 8006482:	6821      	ldr	r1, [r4, #0]
 8006484:	6833      	ldr	r3, [r6, #0]
 8006486:	0608      	lsls	r0, r1, #24
 8006488:	f853 5b04 	ldr.w	r5, [r3], #4
 800648c:	d402      	bmi.n	8006494 <_printf_i+0xe8>
 800648e:	0649      	lsls	r1, r1, #25
 8006490:	bf48      	it	mi
 8006492:	b2ad      	uxthmi	r5, r5
 8006494:	2f6f      	cmp	r7, #111	@ 0x6f
 8006496:	4852      	ldr	r0, [pc, #328]	@ (80065e0 <_printf_i+0x234>)
 8006498:	6033      	str	r3, [r6, #0]
 800649a:	bf14      	ite	ne
 800649c:	230a      	movne	r3, #10
 800649e:	2308      	moveq	r3, #8
 80064a0:	2100      	movs	r1, #0
 80064a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064a6:	6866      	ldr	r6, [r4, #4]
 80064a8:	60a6      	str	r6, [r4, #8]
 80064aa:	2e00      	cmp	r6, #0
 80064ac:	db05      	blt.n	80064ba <_printf_i+0x10e>
 80064ae:	6821      	ldr	r1, [r4, #0]
 80064b0:	432e      	orrs	r6, r5
 80064b2:	f021 0104 	bic.w	r1, r1, #4
 80064b6:	6021      	str	r1, [r4, #0]
 80064b8:	d04b      	beq.n	8006552 <_printf_i+0x1a6>
 80064ba:	4616      	mov	r6, r2
 80064bc:	fbb5 f1f3 	udiv	r1, r5, r3
 80064c0:	fb03 5711 	mls	r7, r3, r1, r5
 80064c4:	5dc7      	ldrb	r7, [r0, r7]
 80064c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064ca:	462f      	mov	r7, r5
 80064cc:	42bb      	cmp	r3, r7
 80064ce:	460d      	mov	r5, r1
 80064d0:	d9f4      	bls.n	80064bc <_printf_i+0x110>
 80064d2:	2b08      	cmp	r3, #8
 80064d4:	d10b      	bne.n	80064ee <_printf_i+0x142>
 80064d6:	6823      	ldr	r3, [r4, #0]
 80064d8:	07df      	lsls	r7, r3, #31
 80064da:	d508      	bpl.n	80064ee <_printf_i+0x142>
 80064dc:	6923      	ldr	r3, [r4, #16]
 80064de:	6861      	ldr	r1, [r4, #4]
 80064e0:	4299      	cmp	r1, r3
 80064e2:	bfde      	ittt	le
 80064e4:	2330      	movle	r3, #48	@ 0x30
 80064e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064ea:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064ee:	1b92      	subs	r2, r2, r6
 80064f0:	6122      	str	r2, [r4, #16]
 80064f2:	f8cd a000 	str.w	sl, [sp]
 80064f6:	464b      	mov	r3, r9
 80064f8:	aa03      	add	r2, sp, #12
 80064fa:	4621      	mov	r1, r4
 80064fc:	4640      	mov	r0, r8
 80064fe:	f7ff fee7 	bl	80062d0 <_printf_common>
 8006502:	3001      	adds	r0, #1
 8006504:	d14a      	bne.n	800659c <_printf_i+0x1f0>
 8006506:	f04f 30ff 	mov.w	r0, #4294967295
 800650a:	b004      	add	sp, #16
 800650c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006510:	6823      	ldr	r3, [r4, #0]
 8006512:	f043 0320 	orr.w	r3, r3, #32
 8006516:	6023      	str	r3, [r4, #0]
 8006518:	4832      	ldr	r0, [pc, #200]	@ (80065e4 <_printf_i+0x238>)
 800651a:	2778      	movs	r7, #120	@ 0x78
 800651c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006520:	6823      	ldr	r3, [r4, #0]
 8006522:	6831      	ldr	r1, [r6, #0]
 8006524:	061f      	lsls	r7, r3, #24
 8006526:	f851 5b04 	ldr.w	r5, [r1], #4
 800652a:	d402      	bmi.n	8006532 <_printf_i+0x186>
 800652c:	065f      	lsls	r7, r3, #25
 800652e:	bf48      	it	mi
 8006530:	b2ad      	uxthmi	r5, r5
 8006532:	6031      	str	r1, [r6, #0]
 8006534:	07d9      	lsls	r1, r3, #31
 8006536:	bf44      	itt	mi
 8006538:	f043 0320 	orrmi.w	r3, r3, #32
 800653c:	6023      	strmi	r3, [r4, #0]
 800653e:	b11d      	cbz	r5, 8006548 <_printf_i+0x19c>
 8006540:	2310      	movs	r3, #16
 8006542:	e7ad      	b.n	80064a0 <_printf_i+0xf4>
 8006544:	4826      	ldr	r0, [pc, #152]	@ (80065e0 <_printf_i+0x234>)
 8006546:	e7e9      	b.n	800651c <_printf_i+0x170>
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	f023 0320 	bic.w	r3, r3, #32
 800654e:	6023      	str	r3, [r4, #0]
 8006550:	e7f6      	b.n	8006540 <_printf_i+0x194>
 8006552:	4616      	mov	r6, r2
 8006554:	e7bd      	b.n	80064d2 <_printf_i+0x126>
 8006556:	6833      	ldr	r3, [r6, #0]
 8006558:	6825      	ldr	r5, [r4, #0]
 800655a:	6961      	ldr	r1, [r4, #20]
 800655c:	1d18      	adds	r0, r3, #4
 800655e:	6030      	str	r0, [r6, #0]
 8006560:	062e      	lsls	r6, r5, #24
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	d501      	bpl.n	800656a <_printf_i+0x1be>
 8006566:	6019      	str	r1, [r3, #0]
 8006568:	e002      	b.n	8006570 <_printf_i+0x1c4>
 800656a:	0668      	lsls	r0, r5, #25
 800656c:	d5fb      	bpl.n	8006566 <_printf_i+0x1ba>
 800656e:	8019      	strh	r1, [r3, #0]
 8006570:	2300      	movs	r3, #0
 8006572:	6123      	str	r3, [r4, #16]
 8006574:	4616      	mov	r6, r2
 8006576:	e7bc      	b.n	80064f2 <_printf_i+0x146>
 8006578:	6833      	ldr	r3, [r6, #0]
 800657a:	1d1a      	adds	r2, r3, #4
 800657c:	6032      	str	r2, [r6, #0]
 800657e:	681e      	ldr	r6, [r3, #0]
 8006580:	6862      	ldr	r2, [r4, #4]
 8006582:	2100      	movs	r1, #0
 8006584:	4630      	mov	r0, r6
 8006586:	f7f9 fe2b 	bl	80001e0 <memchr>
 800658a:	b108      	cbz	r0, 8006590 <_printf_i+0x1e4>
 800658c:	1b80      	subs	r0, r0, r6
 800658e:	6060      	str	r0, [r4, #4]
 8006590:	6863      	ldr	r3, [r4, #4]
 8006592:	6123      	str	r3, [r4, #16]
 8006594:	2300      	movs	r3, #0
 8006596:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800659a:	e7aa      	b.n	80064f2 <_printf_i+0x146>
 800659c:	6923      	ldr	r3, [r4, #16]
 800659e:	4632      	mov	r2, r6
 80065a0:	4649      	mov	r1, r9
 80065a2:	4640      	mov	r0, r8
 80065a4:	47d0      	blx	sl
 80065a6:	3001      	adds	r0, #1
 80065a8:	d0ad      	beq.n	8006506 <_printf_i+0x15a>
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	079b      	lsls	r3, r3, #30
 80065ae:	d413      	bmi.n	80065d8 <_printf_i+0x22c>
 80065b0:	68e0      	ldr	r0, [r4, #12]
 80065b2:	9b03      	ldr	r3, [sp, #12]
 80065b4:	4298      	cmp	r0, r3
 80065b6:	bfb8      	it	lt
 80065b8:	4618      	movlt	r0, r3
 80065ba:	e7a6      	b.n	800650a <_printf_i+0x15e>
 80065bc:	2301      	movs	r3, #1
 80065be:	4632      	mov	r2, r6
 80065c0:	4649      	mov	r1, r9
 80065c2:	4640      	mov	r0, r8
 80065c4:	47d0      	blx	sl
 80065c6:	3001      	adds	r0, #1
 80065c8:	d09d      	beq.n	8006506 <_printf_i+0x15a>
 80065ca:	3501      	adds	r5, #1
 80065cc:	68e3      	ldr	r3, [r4, #12]
 80065ce:	9903      	ldr	r1, [sp, #12]
 80065d0:	1a5b      	subs	r3, r3, r1
 80065d2:	42ab      	cmp	r3, r5
 80065d4:	dcf2      	bgt.n	80065bc <_printf_i+0x210>
 80065d6:	e7eb      	b.n	80065b0 <_printf_i+0x204>
 80065d8:	2500      	movs	r5, #0
 80065da:	f104 0619 	add.w	r6, r4, #25
 80065de:	e7f5      	b.n	80065cc <_printf_i+0x220>
 80065e0:	0800e7c8 	.word	0x0800e7c8
 80065e4:	0800e7d9 	.word	0x0800e7d9

080065e8 <_scanf_float>:
 80065e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065ec:	b087      	sub	sp, #28
 80065ee:	4691      	mov	r9, r2
 80065f0:	9303      	str	r3, [sp, #12]
 80065f2:	688b      	ldr	r3, [r1, #8]
 80065f4:	1e5a      	subs	r2, r3, #1
 80065f6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80065fa:	bf81      	itttt	hi
 80065fc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006600:	eb03 0b05 	addhi.w	fp, r3, r5
 8006604:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006608:	608b      	strhi	r3, [r1, #8]
 800660a:	680b      	ldr	r3, [r1, #0]
 800660c:	460a      	mov	r2, r1
 800660e:	f04f 0500 	mov.w	r5, #0
 8006612:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006616:	f842 3b1c 	str.w	r3, [r2], #28
 800661a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800661e:	4680      	mov	r8, r0
 8006620:	460c      	mov	r4, r1
 8006622:	bf98      	it	ls
 8006624:	f04f 0b00 	movls.w	fp, #0
 8006628:	9201      	str	r2, [sp, #4]
 800662a:	4616      	mov	r6, r2
 800662c:	46aa      	mov	sl, r5
 800662e:	462f      	mov	r7, r5
 8006630:	9502      	str	r5, [sp, #8]
 8006632:	68a2      	ldr	r2, [r4, #8]
 8006634:	b15a      	cbz	r2, 800664e <_scanf_float+0x66>
 8006636:	f8d9 3000 	ldr.w	r3, [r9]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b4e      	cmp	r3, #78	@ 0x4e
 800663e:	d863      	bhi.n	8006708 <_scanf_float+0x120>
 8006640:	2b40      	cmp	r3, #64	@ 0x40
 8006642:	d83b      	bhi.n	80066bc <_scanf_float+0xd4>
 8006644:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006648:	b2c8      	uxtb	r0, r1
 800664a:	280e      	cmp	r0, #14
 800664c:	d939      	bls.n	80066c2 <_scanf_float+0xda>
 800664e:	b11f      	cbz	r7, 8006658 <_scanf_float+0x70>
 8006650:	6823      	ldr	r3, [r4, #0]
 8006652:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006656:	6023      	str	r3, [r4, #0]
 8006658:	f10a 3aff 	add.w	sl, sl, #4294967295
 800665c:	f1ba 0f01 	cmp.w	sl, #1
 8006660:	f200 8114 	bhi.w	800688c <_scanf_float+0x2a4>
 8006664:	9b01      	ldr	r3, [sp, #4]
 8006666:	429e      	cmp	r6, r3
 8006668:	f200 8105 	bhi.w	8006876 <_scanf_float+0x28e>
 800666c:	2001      	movs	r0, #1
 800666e:	b007      	add	sp, #28
 8006670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006674:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006678:	2a0d      	cmp	r2, #13
 800667a:	d8e8      	bhi.n	800664e <_scanf_float+0x66>
 800667c:	a101      	add	r1, pc, #4	@ (adr r1, 8006684 <_scanf_float+0x9c>)
 800667e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006682:	bf00      	nop
 8006684:	080067cd 	.word	0x080067cd
 8006688:	0800664f 	.word	0x0800664f
 800668c:	0800664f 	.word	0x0800664f
 8006690:	0800664f 	.word	0x0800664f
 8006694:	08006829 	.word	0x08006829
 8006698:	08006803 	.word	0x08006803
 800669c:	0800664f 	.word	0x0800664f
 80066a0:	0800664f 	.word	0x0800664f
 80066a4:	080067db 	.word	0x080067db
 80066a8:	0800664f 	.word	0x0800664f
 80066ac:	0800664f 	.word	0x0800664f
 80066b0:	0800664f 	.word	0x0800664f
 80066b4:	0800664f 	.word	0x0800664f
 80066b8:	08006797 	.word	0x08006797
 80066bc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80066c0:	e7da      	b.n	8006678 <_scanf_float+0x90>
 80066c2:	290e      	cmp	r1, #14
 80066c4:	d8c3      	bhi.n	800664e <_scanf_float+0x66>
 80066c6:	a001      	add	r0, pc, #4	@ (adr r0, 80066cc <_scanf_float+0xe4>)
 80066c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80066cc:	08006787 	.word	0x08006787
 80066d0:	0800664f 	.word	0x0800664f
 80066d4:	08006787 	.word	0x08006787
 80066d8:	08006817 	.word	0x08006817
 80066dc:	0800664f 	.word	0x0800664f
 80066e0:	08006729 	.word	0x08006729
 80066e4:	0800676d 	.word	0x0800676d
 80066e8:	0800676d 	.word	0x0800676d
 80066ec:	0800676d 	.word	0x0800676d
 80066f0:	0800676d 	.word	0x0800676d
 80066f4:	0800676d 	.word	0x0800676d
 80066f8:	0800676d 	.word	0x0800676d
 80066fc:	0800676d 	.word	0x0800676d
 8006700:	0800676d 	.word	0x0800676d
 8006704:	0800676d 	.word	0x0800676d
 8006708:	2b6e      	cmp	r3, #110	@ 0x6e
 800670a:	d809      	bhi.n	8006720 <_scanf_float+0x138>
 800670c:	2b60      	cmp	r3, #96	@ 0x60
 800670e:	d8b1      	bhi.n	8006674 <_scanf_float+0x8c>
 8006710:	2b54      	cmp	r3, #84	@ 0x54
 8006712:	d07b      	beq.n	800680c <_scanf_float+0x224>
 8006714:	2b59      	cmp	r3, #89	@ 0x59
 8006716:	d19a      	bne.n	800664e <_scanf_float+0x66>
 8006718:	2d07      	cmp	r5, #7
 800671a:	d198      	bne.n	800664e <_scanf_float+0x66>
 800671c:	2508      	movs	r5, #8
 800671e:	e02f      	b.n	8006780 <_scanf_float+0x198>
 8006720:	2b74      	cmp	r3, #116	@ 0x74
 8006722:	d073      	beq.n	800680c <_scanf_float+0x224>
 8006724:	2b79      	cmp	r3, #121	@ 0x79
 8006726:	e7f6      	b.n	8006716 <_scanf_float+0x12e>
 8006728:	6821      	ldr	r1, [r4, #0]
 800672a:	05c8      	lsls	r0, r1, #23
 800672c:	d51e      	bpl.n	800676c <_scanf_float+0x184>
 800672e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006732:	6021      	str	r1, [r4, #0]
 8006734:	3701      	adds	r7, #1
 8006736:	f1bb 0f00 	cmp.w	fp, #0
 800673a:	d003      	beq.n	8006744 <_scanf_float+0x15c>
 800673c:	3201      	adds	r2, #1
 800673e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006742:	60a2      	str	r2, [r4, #8]
 8006744:	68a3      	ldr	r3, [r4, #8]
 8006746:	3b01      	subs	r3, #1
 8006748:	60a3      	str	r3, [r4, #8]
 800674a:	6923      	ldr	r3, [r4, #16]
 800674c:	3301      	adds	r3, #1
 800674e:	6123      	str	r3, [r4, #16]
 8006750:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006754:	3b01      	subs	r3, #1
 8006756:	2b00      	cmp	r3, #0
 8006758:	f8c9 3004 	str.w	r3, [r9, #4]
 800675c:	f340 8082 	ble.w	8006864 <_scanf_float+0x27c>
 8006760:	f8d9 3000 	ldr.w	r3, [r9]
 8006764:	3301      	adds	r3, #1
 8006766:	f8c9 3000 	str.w	r3, [r9]
 800676a:	e762      	b.n	8006632 <_scanf_float+0x4a>
 800676c:	eb1a 0105 	adds.w	r1, sl, r5
 8006770:	f47f af6d 	bne.w	800664e <_scanf_float+0x66>
 8006774:	6822      	ldr	r2, [r4, #0]
 8006776:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800677a:	6022      	str	r2, [r4, #0]
 800677c:	460d      	mov	r5, r1
 800677e:	468a      	mov	sl, r1
 8006780:	f806 3b01 	strb.w	r3, [r6], #1
 8006784:	e7de      	b.n	8006744 <_scanf_float+0x15c>
 8006786:	6822      	ldr	r2, [r4, #0]
 8006788:	0610      	lsls	r0, r2, #24
 800678a:	f57f af60 	bpl.w	800664e <_scanf_float+0x66>
 800678e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006792:	6022      	str	r2, [r4, #0]
 8006794:	e7f4      	b.n	8006780 <_scanf_float+0x198>
 8006796:	f1ba 0f00 	cmp.w	sl, #0
 800679a:	d10c      	bne.n	80067b6 <_scanf_float+0x1ce>
 800679c:	b977      	cbnz	r7, 80067bc <_scanf_float+0x1d4>
 800679e:	6822      	ldr	r2, [r4, #0]
 80067a0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80067a4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80067a8:	d108      	bne.n	80067bc <_scanf_float+0x1d4>
 80067aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80067ae:	6022      	str	r2, [r4, #0]
 80067b0:	f04f 0a01 	mov.w	sl, #1
 80067b4:	e7e4      	b.n	8006780 <_scanf_float+0x198>
 80067b6:	f1ba 0f02 	cmp.w	sl, #2
 80067ba:	d050      	beq.n	800685e <_scanf_float+0x276>
 80067bc:	2d01      	cmp	r5, #1
 80067be:	d002      	beq.n	80067c6 <_scanf_float+0x1de>
 80067c0:	2d04      	cmp	r5, #4
 80067c2:	f47f af44 	bne.w	800664e <_scanf_float+0x66>
 80067c6:	3501      	adds	r5, #1
 80067c8:	b2ed      	uxtb	r5, r5
 80067ca:	e7d9      	b.n	8006780 <_scanf_float+0x198>
 80067cc:	f1ba 0f01 	cmp.w	sl, #1
 80067d0:	f47f af3d 	bne.w	800664e <_scanf_float+0x66>
 80067d4:	f04f 0a02 	mov.w	sl, #2
 80067d8:	e7d2      	b.n	8006780 <_scanf_float+0x198>
 80067da:	b975      	cbnz	r5, 80067fa <_scanf_float+0x212>
 80067dc:	2f00      	cmp	r7, #0
 80067de:	f47f af37 	bne.w	8006650 <_scanf_float+0x68>
 80067e2:	6822      	ldr	r2, [r4, #0]
 80067e4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80067e8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80067ec:	f040 8103 	bne.w	80069f6 <_scanf_float+0x40e>
 80067f0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80067f4:	6022      	str	r2, [r4, #0]
 80067f6:	2501      	movs	r5, #1
 80067f8:	e7c2      	b.n	8006780 <_scanf_float+0x198>
 80067fa:	2d03      	cmp	r5, #3
 80067fc:	d0e3      	beq.n	80067c6 <_scanf_float+0x1de>
 80067fe:	2d05      	cmp	r5, #5
 8006800:	e7df      	b.n	80067c2 <_scanf_float+0x1da>
 8006802:	2d02      	cmp	r5, #2
 8006804:	f47f af23 	bne.w	800664e <_scanf_float+0x66>
 8006808:	2503      	movs	r5, #3
 800680a:	e7b9      	b.n	8006780 <_scanf_float+0x198>
 800680c:	2d06      	cmp	r5, #6
 800680e:	f47f af1e 	bne.w	800664e <_scanf_float+0x66>
 8006812:	2507      	movs	r5, #7
 8006814:	e7b4      	b.n	8006780 <_scanf_float+0x198>
 8006816:	6822      	ldr	r2, [r4, #0]
 8006818:	0591      	lsls	r1, r2, #22
 800681a:	f57f af18 	bpl.w	800664e <_scanf_float+0x66>
 800681e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006822:	6022      	str	r2, [r4, #0]
 8006824:	9702      	str	r7, [sp, #8]
 8006826:	e7ab      	b.n	8006780 <_scanf_float+0x198>
 8006828:	6822      	ldr	r2, [r4, #0]
 800682a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800682e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006832:	d005      	beq.n	8006840 <_scanf_float+0x258>
 8006834:	0550      	lsls	r0, r2, #21
 8006836:	f57f af0a 	bpl.w	800664e <_scanf_float+0x66>
 800683a:	2f00      	cmp	r7, #0
 800683c:	f000 80db 	beq.w	80069f6 <_scanf_float+0x40e>
 8006840:	0591      	lsls	r1, r2, #22
 8006842:	bf58      	it	pl
 8006844:	9902      	ldrpl	r1, [sp, #8]
 8006846:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800684a:	bf58      	it	pl
 800684c:	1a79      	subpl	r1, r7, r1
 800684e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006852:	bf58      	it	pl
 8006854:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006858:	6022      	str	r2, [r4, #0]
 800685a:	2700      	movs	r7, #0
 800685c:	e790      	b.n	8006780 <_scanf_float+0x198>
 800685e:	f04f 0a03 	mov.w	sl, #3
 8006862:	e78d      	b.n	8006780 <_scanf_float+0x198>
 8006864:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006868:	4649      	mov	r1, r9
 800686a:	4640      	mov	r0, r8
 800686c:	4798      	blx	r3
 800686e:	2800      	cmp	r0, #0
 8006870:	f43f aedf 	beq.w	8006632 <_scanf_float+0x4a>
 8006874:	e6eb      	b.n	800664e <_scanf_float+0x66>
 8006876:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800687a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800687e:	464a      	mov	r2, r9
 8006880:	4640      	mov	r0, r8
 8006882:	4798      	blx	r3
 8006884:	6923      	ldr	r3, [r4, #16]
 8006886:	3b01      	subs	r3, #1
 8006888:	6123      	str	r3, [r4, #16]
 800688a:	e6eb      	b.n	8006664 <_scanf_float+0x7c>
 800688c:	1e6b      	subs	r3, r5, #1
 800688e:	2b06      	cmp	r3, #6
 8006890:	d824      	bhi.n	80068dc <_scanf_float+0x2f4>
 8006892:	2d02      	cmp	r5, #2
 8006894:	d836      	bhi.n	8006904 <_scanf_float+0x31c>
 8006896:	9b01      	ldr	r3, [sp, #4]
 8006898:	429e      	cmp	r6, r3
 800689a:	f67f aee7 	bls.w	800666c <_scanf_float+0x84>
 800689e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068a6:	464a      	mov	r2, r9
 80068a8:	4640      	mov	r0, r8
 80068aa:	4798      	blx	r3
 80068ac:	6923      	ldr	r3, [r4, #16]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	6123      	str	r3, [r4, #16]
 80068b2:	e7f0      	b.n	8006896 <_scanf_float+0x2ae>
 80068b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068b8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80068bc:	464a      	mov	r2, r9
 80068be:	4640      	mov	r0, r8
 80068c0:	4798      	blx	r3
 80068c2:	6923      	ldr	r3, [r4, #16]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	6123      	str	r3, [r4, #16]
 80068c8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068cc:	fa5f fa8a 	uxtb.w	sl, sl
 80068d0:	f1ba 0f02 	cmp.w	sl, #2
 80068d4:	d1ee      	bne.n	80068b4 <_scanf_float+0x2cc>
 80068d6:	3d03      	subs	r5, #3
 80068d8:	b2ed      	uxtb	r5, r5
 80068da:	1b76      	subs	r6, r6, r5
 80068dc:	6823      	ldr	r3, [r4, #0]
 80068de:	05da      	lsls	r2, r3, #23
 80068e0:	d530      	bpl.n	8006944 <_scanf_float+0x35c>
 80068e2:	055b      	lsls	r3, r3, #21
 80068e4:	d511      	bpl.n	800690a <_scanf_float+0x322>
 80068e6:	9b01      	ldr	r3, [sp, #4]
 80068e8:	429e      	cmp	r6, r3
 80068ea:	f67f aebf 	bls.w	800666c <_scanf_float+0x84>
 80068ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068f6:	464a      	mov	r2, r9
 80068f8:	4640      	mov	r0, r8
 80068fa:	4798      	blx	r3
 80068fc:	6923      	ldr	r3, [r4, #16]
 80068fe:	3b01      	subs	r3, #1
 8006900:	6123      	str	r3, [r4, #16]
 8006902:	e7f0      	b.n	80068e6 <_scanf_float+0x2fe>
 8006904:	46aa      	mov	sl, r5
 8006906:	46b3      	mov	fp, r6
 8006908:	e7de      	b.n	80068c8 <_scanf_float+0x2e0>
 800690a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800690e:	6923      	ldr	r3, [r4, #16]
 8006910:	2965      	cmp	r1, #101	@ 0x65
 8006912:	f103 33ff 	add.w	r3, r3, #4294967295
 8006916:	f106 35ff 	add.w	r5, r6, #4294967295
 800691a:	6123      	str	r3, [r4, #16]
 800691c:	d00c      	beq.n	8006938 <_scanf_float+0x350>
 800691e:	2945      	cmp	r1, #69	@ 0x45
 8006920:	d00a      	beq.n	8006938 <_scanf_float+0x350>
 8006922:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006926:	464a      	mov	r2, r9
 8006928:	4640      	mov	r0, r8
 800692a:	4798      	blx	r3
 800692c:	6923      	ldr	r3, [r4, #16]
 800692e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006932:	3b01      	subs	r3, #1
 8006934:	1eb5      	subs	r5, r6, #2
 8006936:	6123      	str	r3, [r4, #16]
 8006938:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800693c:	464a      	mov	r2, r9
 800693e:	4640      	mov	r0, r8
 8006940:	4798      	blx	r3
 8006942:	462e      	mov	r6, r5
 8006944:	6822      	ldr	r2, [r4, #0]
 8006946:	f012 0210 	ands.w	r2, r2, #16
 800694a:	d001      	beq.n	8006950 <_scanf_float+0x368>
 800694c:	2000      	movs	r0, #0
 800694e:	e68e      	b.n	800666e <_scanf_float+0x86>
 8006950:	7032      	strb	r2, [r6, #0]
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006958:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800695c:	d125      	bne.n	80069aa <_scanf_float+0x3c2>
 800695e:	9b02      	ldr	r3, [sp, #8]
 8006960:	429f      	cmp	r7, r3
 8006962:	d00a      	beq.n	800697a <_scanf_float+0x392>
 8006964:	1bda      	subs	r2, r3, r7
 8006966:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800696a:	429e      	cmp	r6, r3
 800696c:	bf28      	it	cs
 800696e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006972:	4922      	ldr	r1, [pc, #136]	@ (80069fc <_scanf_float+0x414>)
 8006974:	4630      	mov	r0, r6
 8006976:	f000 f907 	bl	8006b88 <siprintf>
 800697a:	9901      	ldr	r1, [sp, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	4640      	mov	r0, r8
 8006980:	f7ff f966 	bl	8005c50 <_strtod_r>
 8006984:	9b03      	ldr	r3, [sp, #12]
 8006986:	6821      	ldr	r1, [r4, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f011 0f02 	tst.w	r1, #2
 800698e:	ec57 6b10 	vmov	r6, r7, d0
 8006992:	f103 0204 	add.w	r2, r3, #4
 8006996:	d015      	beq.n	80069c4 <_scanf_float+0x3dc>
 8006998:	9903      	ldr	r1, [sp, #12]
 800699a:	600a      	str	r2, [r1, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	e9c3 6700 	strd	r6, r7, [r3]
 80069a2:	68e3      	ldr	r3, [r4, #12]
 80069a4:	3301      	adds	r3, #1
 80069a6:	60e3      	str	r3, [r4, #12]
 80069a8:	e7d0      	b.n	800694c <_scanf_float+0x364>
 80069aa:	9b04      	ldr	r3, [sp, #16]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d0e4      	beq.n	800697a <_scanf_float+0x392>
 80069b0:	9905      	ldr	r1, [sp, #20]
 80069b2:	230a      	movs	r3, #10
 80069b4:	3101      	adds	r1, #1
 80069b6:	4640      	mov	r0, r8
 80069b8:	f002 f9ee 	bl	8008d98 <_strtol_r>
 80069bc:	9b04      	ldr	r3, [sp, #16]
 80069be:	9e05      	ldr	r6, [sp, #20]
 80069c0:	1ac2      	subs	r2, r0, r3
 80069c2:	e7d0      	b.n	8006966 <_scanf_float+0x37e>
 80069c4:	f011 0f04 	tst.w	r1, #4
 80069c8:	9903      	ldr	r1, [sp, #12]
 80069ca:	600a      	str	r2, [r1, #0]
 80069cc:	d1e6      	bne.n	800699c <_scanf_float+0x3b4>
 80069ce:	681d      	ldr	r5, [r3, #0]
 80069d0:	4632      	mov	r2, r6
 80069d2:	463b      	mov	r3, r7
 80069d4:	4630      	mov	r0, r6
 80069d6:	4639      	mov	r1, r7
 80069d8:	f7fa f8b0 	bl	8000b3c <__aeabi_dcmpun>
 80069dc:	b128      	cbz	r0, 80069ea <_scanf_float+0x402>
 80069de:	4808      	ldr	r0, [pc, #32]	@ (8006a00 <_scanf_float+0x418>)
 80069e0:	f000 fa0a 	bl	8006df8 <nanf>
 80069e4:	ed85 0a00 	vstr	s0, [r5]
 80069e8:	e7db      	b.n	80069a2 <_scanf_float+0x3ba>
 80069ea:	4630      	mov	r0, r6
 80069ec:	4639      	mov	r1, r7
 80069ee:	f7fa f903 	bl	8000bf8 <__aeabi_d2f>
 80069f2:	6028      	str	r0, [r5, #0]
 80069f4:	e7d5      	b.n	80069a2 <_scanf_float+0x3ba>
 80069f6:	2700      	movs	r7, #0
 80069f8:	e62e      	b.n	8006658 <_scanf_float+0x70>
 80069fa:	bf00      	nop
 80069fc:	0800e7ea 	.word	0x0800e7ea
 8006a00:	0800e989 	.word	0x0800e989

08006a04 <std>:
 8006a04:	2300      	movs	r3, #0
 8006a06:	b510      	push	{r4, lr}
 8006a08:	4604      	mov	r4, r0
 8006a0a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a12:	6083      	str	r3, [r0, #8]
 8006a14:	8181      	strh	r1, [r0, #12]
 8006a16:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a18:	81c2      	strh	r2, [r0, #14]
 8006a1a:	6183      	str	r3, [r0, #24]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	2208      	movs	r2, #8
 8006a20:	305c      	adds	r0, #92	@ 0x5c
 8006a22:	f000 f916 	bl	8006c52 <memset>
 8006a26:	4b0d      	ldr	r3, [pc, #52]	@ (8006a5c <std+0x58>)
 8006a28:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a60 <std+0x5c>)
 8006a2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a64 <std+0x60>)
 8006a30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a32:	4b0d      	ldr	r3, [pc, #52]	@ (8006a68 <std+0x64>)
 8006a34:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a36:	4b0d      	ldr	r3, [pc, #52]	@ (8006a6c <std+0x68>)
 8006a38:	6224      	str	r4, [r4, #32]
 8006a3a:	429c      	cmp	r4, r3
 8006a3c:	d006      	beq.n	8006a4c <std+0x48>
 8006a3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a42:	4294      	cmp	r4, r2
 8006a44:	d002      	beq.n	8006a4c <std+0x48>
 8006a46:	33d0      	adds	r3, #208	@ 0xd0
 8006a48:	429c      	cmp	r4, r3
 8006a4a:	d105      	bne.n	8006a58 <std+0x54>
 8006a4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a54:	f000 b9b6 	b.w	8006dc4 <__retarget_lock_init_recursive>
 8006a58:	bd10      	pop	{r4, pc}
 8006a5a:	bf00      	nop
 8006a5c:	08006bcd 	.word	0x08006bcd
 8006a60:	08006bef 	.word	0x08006bef
 8006a64:	08006c27 	.word	0x08006c27
 8006a68:	08006c4b 	.word	0x08006c4b
 8006a6c:	20000b94 	.word	0x20000b94

08006a70 <stdio_exit_handler>:
 8006a70:	4a02      	ldr	r2, [pc, #8]	@ (8006a7c <stdio_exit_handler+0xc>)
 8006a72:	4903      	ldr	r1, [pc, #12]	@ (8006a80 <stdio_exit_handler+0x10>)
 8006a74:	4803      	ldr	r0, [pc, #12]	@ (8006a84 <stdio_exit_handler+0x14>)
 8006a76:	f000 b869 	b.w	8006b4c <_fwalk_sglue>
 8006a7a:	bf00      	nop
 8006a7c:	2000002c 	.word	0x2000002c
 8006a80:	0800916d 	.word	0x0800916d
 8006a84:	200001a8 	.word	0x200001a8

08006a88 <cleanup_stdio>:
 8006a88:	6841      	ldr	r1, [r0, #4]
 8006a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8006abc <cleanup_stdio+0x34>)
 8006a8c:	4299      	cmp	r1, r3
 8006a8e:	b510      	push	{r4, lr}
 8006a90:	4604      	mov	r4, r0
 8006a92:	d001      	beq.n	8006a98 <cleanup_stdio+0x10>
 8006a94:	f002 fb6a 	bl	800916c <_fflush_r>
 8006a98:	68a1      	ldr	r1, [r4, #8]
 8006a9a:	4b09      	ldr	r3, [pc, #36]	@ (8006ac0 <cleanup_stdio+0x38>)
 8006a9c:	4299      	cmp	r1, r3
 8006a9e:	d002      	beq.n	8006aa6 <cleanup_stdio+0x1e>
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f002 fb63 	bl	800916c <_fflush_r>
 8006aa6:	68e1      	ldr	r1, [r4, #12]
 8006aa8:	4b06      	ldr	r3, [pc, #24]	@ (8006ac4 <cleanup_stdio+0x3c>)
 8006aaa:	4299      	cmp	r1, r3
 8006aac:	d004      	beq.n	8006ab8 <cleanup_stdio+0x30>
 8006aae:	4620      	mov	r0, r4
 8006ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ab4:	f002 bb5a 	b.w	800916c <_fflush_r>
 8006ab8:	bd10      	pop	{r4, pc}
 8006aba:	bf00      	nop
 8006abc:	20000b94 	.word	0x20000b94
 8006ac0:	20000bfc 	.word	0x20000bfc
 8006ac4:	20000c64 	.word	0x20000c64

08006ac8 <global_stdio_init.part.0>:
 8006ac8:	b510      	push	{r4, lr}
 8006aca:	4b0b      	ldr	r3, [pc, #44]	@ (8006af8 <global_stdio_init.part.0+0x30>)
 8006acc:	4c0b      	ldr	r4, [pc, #44]	@ (8006afc <global_stdio_init.part.0+0x34>)
 8006ace:	4a0c      	ldr	r2, [pc, #48]	@ (8006b00 <global_stdio_init.part.0+0x38>)
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	2104      	movs	r1, #4
 8006ad8:	f7ff ff94 	bl	8006a04 <std>
 8006adc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	2109      	movs	r1, #9
 8006ae4:	f7ff ff8e 	bl	8006a04 <std>
 8006ae8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006aec:	2202      	movs	r2, #2
 8006aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006af2:	2112      	movs	r1, #18
 8006af4:	f7ff bf86 	b.w	8006a04 <std>
 8006af8:	20000ccc 	.word	0x20000ccc
 8006afc:	20000b94 	.word	0x20000b94
 8006b00:	08006a71 	.word	0x08006a71

08006b04 <__sfp_lock_acquire>:
 8006b04:	4801      	ldr	r0, [pc, #4]	@ (8006b0c <__sfp_lock_acquire+0x8>)
 8006b06:	f000 b95e 	b.w	8006dc6 <__retarget_lock_acquire_recursive>
 8006b0a:	bf00      	nop
 8006b0c:	20000cd5 	.word	0x20000cd5

08006b10 <__sfp_lock_release>:
 8006b10:	4801      	ldr	r0, [pc, #4]	@ (8006b18 <__sfp_lock_release+0x8>)
 8006b12:	f000 b959 	b.w	8006dc8 <__retarget_lock_release_recursive>
 8006b16:	bf00      	nop
 8006b18:	20000cd5 	.word	0x20000cd5

08006b1c <__sinit>:
 8006b1c:	b510      	push	{r4, lr}
 8006b1e:	4604      	mov	r4, r0
 8006b20:	f7ff fff0 	bl	8006b04 <__sfp_lock_acquire>
 8006b24:	6a23      	ldr	r3, [r4, #32]
 8006b26:	b11b      	cbz	r3, 8006b30 <__sinit+0x14>
 8006b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b2c:	f7ff bff0 	b.w	8006b10 <__sfp_lock_release>
 8006b30:	4b04      	ldr	r3, [pc, #16]	@ (8006b44 <__sinit+0x28>)
 8006b32:	6223      	str	r3, [r4, #32]
 8006b34:	4b04      	ldr	r3, [pc, #16]	@ (8006b48 <__sinit+0x2c>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1f5      	bne.n	8006b28 <__sinit+0xc>
 8006b3c:	f7ff ffc4 	bl	8006ac8 <global_stdio_init.part.0>
 8006b40:	e7f2      	b.n	8006b28 <__sinit+0xc>
 8006b42:	bf00      	nop
 8006b44:	08006a89 	.word	0x08006a89
 8006b48:	20000ccc 	.word	0x20000ccc

08006b4c <_fwalk_sglue>:
 8006b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b50:	4607      	mov	r7, r0
 8006b52:	4688      	mov	r8, r1
 8006b54:	4614      	mov	r4, r2
 8006b56:	2600      	movs	r6, #0
 8006b58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b5c:	f1b9 0901 	subs.w	r9, r9, #1
 8006b60:	d505      	bpl.n	8006b6e <_fwalk_sglue+0x22>
 8006b62:	6824      	ldr	r4, [r4, #0]
 8006b64:	2c00      	cmp	r4, #0
 8006b66:	d1f7      	bne.n	8006b58 <_fwalk_sglue+0xc>
 8006b68:	4630      	mov	r0, r6
 8006b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b6e:	89ab      	ldrh	r3, [r5, #12]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d907      	bls.n	8006b84 <_fwalk_sglue+0x38>
 8006b74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b78:	3301      	adds	r3, #1
 8006b7a:	d003      	beq.n	8006b84 <_fwalk_sglue+0x38>
 8006b7c:	4629      	mov	r1, r5
 8006b7e:	4638      	mov	r0, r7
 8006b80:	47c0      	blx	r8
 8006b82:	4306      	orrs	r6, r0
 8006b84:	3568      	adds	r5, #104	@ 0x68
 8006b86:	e7e9      	b.n	8006b5c <_fwalk_sglue+0x10>

08006b88 <siprintf>:
 8006b88:	b40e      	push	{r1, r2, r3}
 8006b8a:	b510      	push	{r4, lr}
 8006b8c:	b09d      	sub	sp, #116	@ 0x74
 8006b8e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006b90:	9002      	str	r0, [sp, #8]
 8006b92:	9006      	str	r0, [sp, #24]
 8006b94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b98:	480a      	ldr	r0, [pc, #40]	@ (8006bc4 <siprintf+0x3c>)
 8006b9a:	9107      	str	r1, [sp, #28]
 8006b9c:	9104      	str	r1, [sp, #16]
 8006b9e:	490a      	ldr	r1, [pc, #40]	@ (8006bc8 <siprintf+0x40>)
 8006ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ba4:	9105      	str	r1, [sp, #20]
 8006ba6:	2400      	movs	r4, #0
 8006ba8:	a902      	add	r1, sp, #8
 8006baa:	6800      	ldr	r0, [r0, #0]
 8006bac:	9301      	str	r3, [sp, #4]
 8006bae:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006bb0:	f002 f95c 	bl	8008e6c <_svfiprintf_r>
 8006bb4:	9b02      	ldr	r3, [sp, #8]
 8006bb6:	701c      	strb	r4, [r3, #0]
 8006bb8:	b01d      	add	sp, #116	@ 0x74
 8006bba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bbe:	b003      	add	sp, #12
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	200001a4 	.word	0x200001a4
 8006bc8:	ffff0208 	.word	0xffff0208

08006bcc <__sread>:
 8006bcc:	b510      	push	{r4, lr}
 8006bce:	460c      	mov	r4, r1
 8006bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bd4:	f000 f8a8 	bl	8006d28 <_read_r>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	bfab      	itete	ge
 8006bdc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006bde:	89a3      	ldrhlt	r3, [r4, #12]
 8006be0:	181b      	addge	r3, r3, r0
 8006be2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006be6:	bfac      	ite	ge
 8006be8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006bea:	81a3      	strhlt	r3, [r4, #12]
 8006bec:	bd10      	pop	{r4, pc}

08006bee <__swrite>:
 8006bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf2:	461f      	mov	r7, r3
 8006bf4:	898b      	ldrh	r3, [r1, #12]
 8006bf6:	05db      	lsls	r3, r3, #23
 8006bf8:	4605      	mov	r5, r0
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	4616      	mov	r6, r2
 8006bfe:	d505      	bpl.n	8006c0c <__swrite+0x1e>
 8006c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c04:	2302      	movs	r3, #2
 8006c06:	2200      	movs	r2, #0
 8006c08:	f000 f87c 	bl	8006d04 <_lseek_r>
 8006c0c:	89a3      	ldrh	r3, [r4, #12]
 8006c0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c16:	81a3      	strh	r3, [r4, #12]
 8006c18:	4632      	mov	r2, r6
 8006c1a:	463b      	mov	r3, r7
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c22:	f000 b893 	b.w	8006d4c <_write_r>

08006c26 <__sseek>:
 8006c26:	b510      	push	{r4, lr}
 8006c28:	460c      	mov	r4, r1
 8006c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c2e:	f000 f869 	bl	8006d04 <_lseek_r>
 8006c32:	1c43      	adds	r3, r0, #1
 8006c34:	89a3      	ldrh	r3, [r4, #12]
 8006c36:	bf15      	itete	ne
 8006c38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c42:	81a3      	strheq	r3, [r4, #12]
 8006c44:	bf18      	it	ne
 8006c46:	81a3      	strhne	r3, [r4, #12]
 8006c48:	bd10      	pop	{r4, pc}

08006c4a <__sclose>:
 8006c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c4e:	f000 b849 	b.w	8006ce4 <_close_r>

08006c52 <memset>:
 8006c52:	4402      	add	r2, r0
 8006c54:	4603      	mov	r3, r0
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d100      	bne.n	8006c5c <memset+0xa>
 8006c5a:	4770      	bx	lr
 8006c5c:	f803 1b01 	strb.w	r1, [r3], #1
 8006c60:	e7f9      	b.n	8006c56 <memset+0x4>

08006c62 <strncmp>:
 8006c62:	b510      	push	{r4, lr}
 8006c64:	b16a      	cbz	r2, 8006c82 <strncmp+0x20>
 8006c66:	3901      	subs	r1, #1
 8006c68:	1884      	adds	r4, r0, r2
 8006c6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c6e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d103      	bne.n	8006c7e <strncmp+0x1c>
 8006c76:	42a0      	cmp	r0, r4
 8006c78:	d001      	beq.n	8006c7e <strncmp+0x1c>
 8006c7a:	2a00      	cmp	r2, #0
 8006c7c:	d1f5      	bne.n	8006c6a <strncmp+0x8>
 8006c7e:	1ad0      	subs	r0, r2, r3
 8006c80:	bd10      	pop	{r4, pc}
 8006c82:	4610      	mov	r0, r2
 8006c84:	e7fc      	b.n	8006c80 <strncmp+0x1e>

08006c86 <__strtok_r>:
 8006c86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c88:	4604      	mov	r4, r0
 8006c8a:	b908      	cbnz	r0, 8006c90 <__strtok_r+0xa>
 8006c8c:	6814      	ldr	r4, [r2, #0]
 8006c8e:	b144      	cbz	r4, 8006ca2 <__strtok_r+0x1c>
 8006c90:	4620      	mov	r0, r4
 8006c92:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006c96:	460f      	mov	r7, r1
 8006c98:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006c9c:	b91e      	cbnz	r6, 8006ca6 <__strtok_r+0x20>
 8006c9e:	b965      	cbnz	r5, 8006cba <__strtok_r+0x34>
 8006ca0:	6015      	str	r5, [r2, #0]
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	e005      	b.n	8006cb2 <__strtok_r+0x2c>
 8006ca6:	42b5      	cmp	r5, r6
 8006ca8:	d1f6      	bne.n	8006c98 <__strtok_r+0x12>
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1f0      	bne.n	8006c90 <__strtok_r+0xa>
 8006cae:	6014      	str	r4, [r2, #0]
 8006cb0:	7003      	strb	r3, [r0, #0]
 8006cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cb4:	461c      	mov	r4, r3
 8006cb6:	e00c      	b.n	8006cd2 <__strtok_r+0x4c>
 8006cb8:	b91d      	cbnz	r5, 8006cc2 <__strtok_r+0x3c>
 8006cba:	4627      	mov	r7, r4
 8006cbc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006cc0:	460e      	mov	r6, r1
 8006cc2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006cc6:	42ab      	cmp	r3, r5
 8006cc8:	d1f6      	bne.n	8006cb8 <__strtok_r+0x32>
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d0f2      	beq.n	8006cb4 <__strtok_r+0x2e>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	703b      	strb	r3, [r7, #0]
 8006cd2:	6014      	str	r4, [r2, #0]
 8006cd4:	e7ed      	b.n	8006cb2 <__strtok_r+0x2c>

08006cd6 <strtok_r>:
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	f7ff bfd5 	b.w	8006c86 <__strtok_r>

08006cdc <_localeconv_r>:
 8006cdc:	4800      	ldr	r0, [pc, #0]	@ (8006ce0 <_localeconv_r+0x4>)
 8006cde:	4770      	bx	lr
 8006ce0:	20000128 	.word	0x20000128

08006ce4 <_close_r>:
 8006ce4:	b538      	push	{r3, r4, r5, lr}
 8006ce6:	4d06      	ldr	r5, [pc, #24]	@ (8006d00 <_close_r+0x1c>)
 8006ce8:	2300      	movs	r3, #0
 8006cea:	4604      	mov	r4, r0
 8006cec:	4608      	mov	r0, r1
 8006cee:	602b      	str	r3, [r5, #0]
 8006cf0:	f7fb fca8 	bl	8002644 <_close>
 8006cf4:	1c43      	adds	r3, r0, #1
 8006cf6:	d102      	bne.n	8006cfe <_close_r+0x1a>
 8006cf8:	682b      	ldr	r3, [r5, #0]
 8006cfa:	b103      	cbz	r3, 8006cfe <_close_r+0x1a>
 8006cfc:	6023      	str	r3, [r4, #0]
 8006cfe:	bd38      	pop	{r3, r4, r5, pc}
 8006d00:	20000cd0 	.word	0x20000cd0

08006d04 <_lseek_r>:
 8006d04:	b538      	push	{r3, r4, r5, lr}
 8006d06:	4d07      	ldr	r5, [pc, #28]	@ (8006d24 <_lseek_r+0x20>)
 8006d08:	4604      	mov	r4, r0
 8006d0a:	4608      	mov	r0, r1
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	2200      	movs	r2, #0
 8006d10:	602a      	str	r2, [r5, #0]
 8006d12:	461a      	mov	r2, r3
 8006d14:	f7fb fca2 	bl	800265c <_lseek>
 8006d18:	1c43      	adds	r3, r0, #1
 8006d1a:	d102      	bne.n	8006d22 <_lseek_r+0x1e>
 8006d1c:	682b      	ldr	r3, [r5, #0]
 8006d1e:	b103      	cbz	r3, 8006d22 <_lseek_r+0x1e>
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	bd38      	pop	{r3, r4, r5, pc}
 8006d24:	20000cd0 	.word	0x20000cd0

08006d28 <_read_r>:
 8006d28:	b538      	push	{r3, r4, r5, lr}
 8006d2a:	4d07      	ldr	r5, [pc, #28]	@ (8006d48 <_read_r+0x20>)
 8006d2c:	4604      	mov	r4, r0
 8006d2e:	4608      	mov	r0, r1
 8006d30:	4611      	mov	r1, r2
 8006d32:	2200      	movs	r2, #0
 8006d34:	602a      	str	r2, [r5, #0]
 8006d36:	461a      	mov	r2, r3
 8006d38:	f7fb fc68 	bl	800260c <_read>
 8006d3c:	1c43      	adds	r3, r0, #1
 8006d3e:	d102      	bne.n	8006d46 <_read_r+0x1e>
 8006d40:	682b      	ldr	r3, [r5, #0]
 8006d42:	b103      	cbz	r3, 8006d46 <_read_r+0x1e>
 8006d44:	6023      	str	r3, [r4, #0]
 8006d46:	bd38      	pop	{r3, r4, r5, pc}
 8006d48:	20000cd0 	.word	0x20000cd0

08006d4c <_write_r>:
 8006d4c:	b538      	push	{r3, r4, r5, lr}
 8006d4e:	4d07      	ldr	r5, [pc, #28]	@ (8006d6c <_write_r+0x20>)
 8006d50:	4604      	mov	r4, r0
 8006d52:	4608      	mov	r0, r1
 8006d54:	4611      	mov	r1, r2
 8006d56:	2200      	movs	r2, #0
 8006d58:	602a      	str	r2, [r5, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	f7fb fc64 	bl	8002628 <_write>
 8006d60:	1c43      	adds	r3, r0, #1
 8006d62:	d102      	bne.n	8006d6a <_write_r+0x1e>
 8006d64:	682b      	ldr	r3, [r5, #0]
 8006d66:	b103      	cbz	r3, 8006d6a <_write_r+0x1e>
 8006d68:	6023      	str	r3, [r4, #0]
 8006d6a:	bd38      	pop	{r3, r4, r5, pc}
 8006d6c:	20000cd0 	.word	0x20000cd0

08006d70 <__errno>:
 8006d70:	4b01      	ldr	r3, [pc, #4]	@ (8006d78 <__errno+0x8>)
 8006d72:	6818      	ldr	r0, [r3, #0]
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	200001a4 	.word	0x200001a4

08006d7c <__libc_init_array>:
 8006d7c:	b570      	push	{r4, r5, r6, lr}
 8006d7e:	4d0d      	ldr	r5, [pc, #52]	@ (8006db4 <__libc_init_array+0x38>)
 8006d80:	4c0d      	ldr	r4, [pc, #52]	@ (8006db8 <__libc_init_array+0x3c>)
 8006d82:	1b64      	subs	r4, r4, r5
 8006d84:	10a4      	asrs	r4, r4, #2
 8006d86:	2600      	movs	r6, #0
 8006d88:	42a6      	cmp	r6, r4
 8006d8a:	d109      	bne.n	8006da0 <__libc_init_array+0x24>
 8006d8c:	4d0b      	ldr	r5, [pc, #44]	@ (8006dbc <__libc_init_array+0x40>)
 8006d8e:	4c0c      	ldr	r4, [pc, #48]	@ (8006dc0 <__libc_init_array+0x44>)
 8006d90:	f002 fd5c 	bl	800984c <_init>
 8006d94:	1b64      	subs	r4, r4, r5
 8006d96:	10a4      	asrs	r4, r4, #2
 8006d98:	2600      	movs	r6, #0
 8006d9a:	42a6      	cmp	r6, r4
 8006d9c:	d105      	bne.n	8006daa <__libc_init_array+0x2e>
 8006d9e:	bd70      	pop	{r4, r5, r6, pc}
 8006da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006da4:	4798      	blx	r3
 8006da6:	3601      	adds	r6, #1
 8006da8:	e7ee      	b.n	8006d88 <__libc_init_array+0xc>
 8006daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dae:	4798      	blx	r3
 8006db0:	3601      	adds	r6, #1
 8006db2:	e7f2      	b.n	8006d9a <__libc_init_array+0x1e>
 8006db4:	0800ebec 	.word	0x0800ebec
 8006db8:	0800ebec 	.word	0x0800ebec
 8006dbc:	0800ebec 	.word	0x0800ebec
 8006dc0:	0800ebf0 	.word	0x0800ebf0

08006dc4 <__retarget_lock_init_recursive>:
 8006dc4:	4770      	bx	lr

08006dc6 <__retarget_lock_acquire_recursive>:
 8006dc6:	4770      	bx	lr

08006dc8 <__retarget_lock_release_recursive>:
 8006dc8:	4770      	bx	lr

08006dca <memcpy>:
 8006dca:	440a      	add	r2, r1
 8006dcc:	4291      	cmp	r1, r2
 8006dce:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dd2:	d100      	bne.n	8006dd6 <memcpy+0xc>
 8006dd4:	4770      	bx	lr
 8006dd6:	b510      	push	{r4, lr}
 8006dd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ddc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006de0:	4291      	cmp	r1, r2
 8006de2:	d1f9      	bne.n	8006dd8 <memcpy+0xe>
 8006de4:	bd10      	pop	{r4, pc}
	...

08006de8 <nan>:
 8006de8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006df0 <nan+0x8>
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	00000000 	.word	0x00000000
 8006df4:	7ff80000 	.word	0x7ff80000

08006df8 <nanf>:
 8006df8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006e00 <nanf+0x8>
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	7fc00000 	.word	0x7fc00000

08006e04 <quorem>:
 8006e04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e08:	6903      	ldr	r3, [r0, #16]
 8006e0a:	690c      	ldr	r4, [r1, #16]
 8006e0c:	42a3      	cmp	r3, r4
 8006e0e:	4607      	mov	r7, r0
 8006e10:	db7e      	blt.n	8006f10 <quorem+0x10c>
 8006e12:	3c01      	subs	r4, #1
 8006e14:	f101 0814 	add.w	r8, r1, #20
 8006e18:	00a3      	lsls	r3, r4, #2
 8006e1a:	f100 0514 	add.w	r5, r0, #20
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e24:	9301      	str	r3, [sp, #4]
 8006e26:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	429a      	cmp	r2, r3
 8006e32:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e36:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e3a:	d32e      	bcc.n	8006e9a <quorem+0x96>
 8006e3c:	f04f 0a00 	mov.w	sl, #0
 8006e40:	46c4      	mov	ip, r8
 8006e42:	46ae      	mov	lr, r5
 8006e44:	46d3      	mov	fp, sl
 8006e46:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006e4a:	b298      	uxth	r0, r3
 8006e4c:	fb06 a000 	mla	r0, r6, r0, sl
 8006e50:	0c02      	lsrs	r2, r0, #16
 8006e52:	0c1b      	lsrs	r3, r3, #16
 8006e54:	fb06 2303 	mla	r3, r6, r3, r2
 8006e58:	f8de 2000 	ldr.w	r2, [lr]
 8006e5c:	b280      	uxth	r0, r0
 8006e5e:	b292      	uxth	r2, r2
 8006e60:	1a12      	subs	r2, r2, r0
 8006e62:	445a      	add	r2, fp
 8006e64:	f8de 0000 	ldr.w	r0, [lr]
 8006e68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006e72:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006e76:	b292      	uxth	r2, r2
 8006e78:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006e7c:	45e1      	cmp	r9, ip
 8006e7e:	f84e 2b04 	str.w	r2, [lr], #4
 8006e82:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006e86:	d2de      	bcs.n	8006e46 <quorem+0x42>
 8006e88:	9b00      	ldr	r3, [sp, #0]
 8006e8a:	58eb      	ldr	r3, [r5, r3]
 8006e8c:	b92b      	cbnz	r3, 8006e9a <quorem+0x96>
 8006e8e:	9b01      	ldr	r3, [sp, #4]
 8006e90:	3b04      	subs	r3, #4
 8006e92:	429d      	cmp	r5, r3
 8006e94:	461a      	mov	r2, r3
 8006e96:	d32f      	bcc.n	8006ef8 <quorem+0xf4>
 8006e98:	613c      	str	r4, [r7, #16]
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	f001 fd14 	bl	80088c8 <__mcmp>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	db25      	blt.n	8006ef0 <quorem+0xec>
 8006ea4:	4629      	mov	r1, r5
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	f858 2b04 	ldr.w	r2, [r8], #4
 8006eac:	f8d1 c000 	ldr.w	ip, [r1]
 8006eb0:	fa1f fe82 	uxth.w	lr, r2
 8006eb4:	fa1f f38c 	uxth.w	r3, ip
 8006eb8:	eba3 030e 	sub.w	r3, r3, lr
 8006ebc:	4403      	add	r3, r0
 8006ebe:	0c12      	lsrs	r2, r2, #16
 8006ec0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006ec4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ece:	45c1      	cmp	r9, r8
 8006ed0:	f841 3b04 	str.w	r3, [r1], #4
 8006ed4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006ed8:	d2e6      	bcs.n	8006ea8 <quorem+0xa4>
 8006eda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ede:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ee2:	b922      	cbnz	r2, 8006eee <quorem+0xea>
 8006ee4:	3b04      	subs	r3, #4
 8006ee6:	429d      	cmp	r5, r3
 8006ee8:	461a      	mov	r2, r3
 8006eea:	d30b      	bcc.n	8006f04 <quorem+0x100>
 8006eec:	613c      	str	r4, [r7, #16]
 8006eee:	3601      	adds	r6, #1
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	b003      	add	sp, #12
 8006ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef8:	6812      	ldr	r2, [r2, #0]
 8006efa:	3b04      	subs	r3, #4
 8006efc:	2a00      	cmp	r2, #0
 8006efe:	d1cb      	bne.n	8006e98 <quorem+0x94>
 8006f00:	3c01      	subs	r4, #1
 8006f02:	e7c6      	b.n	8006e92 <quorem+0x8e>
 8006f04:	6812      	ldr	r2, [r2, #0]
 8006f06:	3b04      	subs	r3, #4
 8006f08:	2a00      	cmp	r2, #0
 8006f0a:	d1ef      	bne.n	8006eec <quorem+0xe8>
 8006f0c:	3c01      	subs	r4, #1
 8006f0e:	e7ea      	b.n	8006ee6 <quorem+0xe2>
 8006f10:	2000      	movs	r0, #0
 8006f12:	e7ee      	b.n	8006ef2 <quorem+0xee>
 8006f14:	0000      	movs	r0, r0
	...

08006f18 <_dtoa_r>:
 8006f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f1c:	69c7      	ldr	r7, [r0, #28]
 8006f1e:	b097      	sub	sp, #92	@ 0x5c
 8006f20:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006f24:	ec55 4b10 	vmov	r4, r5, d0
 8006f28:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006f2a:	9107      	str	r1, [sp, #28]
 8006f2c:	4681      	mov	r9, r0
 8006f2e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006f30:	9311      	str	r3, [sp, #68]	@ 0x44
 8006f32:	b97f      	cbnz	r7, 8006f54 <_dtoa_r+0x3c>
 8006f34:	2010      	movs	r0, #16
 8006f36:	f001 f943 	bl	80081c0 <malloc>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006f40:	b920      	cbnz	r0, 8006f4c <_dtoa_r+0x34>
 8006f42:	4ba9      	ldr	r3, [pc, #676]	@ (80071e8 <_dtoa_r+0x2d0>)
 8006f44:	21ef      	movs	r1, #239	@ 0xef
 8006f46:	48a9      	ldr	r0, [pc, #676]	@ (80071ec <_dtoa_r+0x2d4>)
 8006f48:	f002 f962 	bl	8009210 <__assert_func>
 8006f4c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006f50:	6007      	str	r7, [r0, #0]
 8006f52:	60c7      	str	r7, [r0, #12]
 8006f54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006f58:	6819      	ldr	r1, [r3, #0]
 8006f5a:	b159      	cbz	r1, 8006f74 <_dtoa_r+0x5c>
 8006f5c:	685a      	ldr	r2, [r3, #4]
 8006f5e:	604a      	str	r2, [r1, #4]
 8006f60:	2301      	movs	r3, #1
 8006f62:	4093      	lsls	r3, r2
 8006f64:	608b      	str	r3, [r1, #8]
 8006f66:	4648      	mov	r0, r9
 8006f68:	f001 fa32 	bl	80083d0 <_Bfree>
 8006f6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006f70:	2200      	movs	r2, #0
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	1e2b      	subs	r3, r5, #0
 8006f76:	bfb9      	ittee	lt
 8006f78:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006f7c:	9305      	strlt	r3, [sp, #20]
 8006f7e:	2300      	movge	r3, #0
 8006f80:	6033      	strge	r3, [r6, #0]
 8006f82:	9f05      	ldr	r7, [sp, #20]
 8006f84:	4b9a      	ldr	r3, [pc, #616]	@ (80071f0 <_dtoa_r+0x2d8>)
 8006f86:	bfbc      	itt	lt
 8006f88:	2201      	movlt	r2, #1
 8006f8a:	6032      	strlt	r2, [r6, #0]
 8006f8c:	43bb      	bics	r3, r7
 8006f8e:	d112      	bne.n	8006fb6 <_dtoa_r+0x9e>
 8006f90:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006f92:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006f96:	6013      	str	r3, [r2, #0]
 8006f98:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f9c:	4323      	orrs	r3, r4
 8006f9e:	f000 855a 	beq.w	8007a56 <_dtoa_r+0xb3e>
 8006fa2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006fa4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007204 <_dtoa_r+0x2ec>
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f000 855c 	beq.w	8007a66 <_dtoa_r+0xb4e>
 8006fae:	f10a 0303 	add.w	r3, sl, #3
 8006fb2:	f000 bd56 	b.w	8007a62 <_dtoa_r+0xb4a>
 8006fb6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	ec51 0b17 	vmov	r0, r1, d7
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006fc6:	f7f9 fd87 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fca:	4680      	mov	r8, r0
 8006fcc:	b158      	cbz	r0, 8006fe6 <_dtoa_r+0xce>
 8006fce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	6013      	str	r3, [r2, #0]
 8006fd4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006fd6:	b113      	cbz	r3, 8006fde <_dtoa_r+0xc6>
 8006fd8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006fda:	4b86      	ldr	r3, [pc, #536]	@ (80071f4 <_dtoa_r+0x2dc>)
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007208 <_dtoa_r+0x2f0>
 8006fe2:	f000 bd40 	b.w	8007a66 <_dtoa_r+0xb4e>
 8006fe6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006fea:	aa14      	add	r2, sp, #80	@ 0x50
 8006fec:	a915      	add	r1, sp, #84	@ 0x54
 8006fee:	4648      	mov	r0, r9
 8006ff0:	f001 fd8a 	bl	8008b08 <__d2b>
 8006ff4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006ff8:	9002      	str	r0, [sp, #8]
 8006ffa:	2e00      	cmp	r6, #0
 8006ffc:	d078      	beq.n	80070f0 <_dtoa_r+0x1d8>
 8006ffe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007000:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007008:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800700c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007010:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007014:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007018:	4619      	mov	r1, r3
 800701a:	2200      	movs	r2, #0
 800701c:	4b76      	ldr	r3, [pc, #472]	@ (80071f8 <_dtoa_r+0x2e0>)
 800701e:	f7f9 f93b 	bl	8000298 <__aeabi_dsub>
 8007022:	a36b      	add	r3, pc, #428	@ (adr r3, 80071d0 <_dtoa_r+0x2b8>)
 8007024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007028:	f7f9 faee 	bl	8000608 <__aeabi_dmul>
 800702c:	a36a      	add	r3, pc, #424	@ (adr r3, 80071d8 <_dtoa_r+0x2c0>)
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	f7f9 f933 	bl	800029c <__adddf3>
 8007036:	4604      	mov	r4, r0
 8007038:	4630      	mov	r0, r6
 800703a:	460d      	mov	r5, r1
 800703c:	f7f9 fa7a 	bl	8000534 <__aeabi_i2d>
 8007040:	a367      	add	r3, pc, #412	@ (adr r3, 80071e0 <_dtoa_r+0x2c8>)
 8007042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007046:	f7f9 fadf 	bl	8000608 <__aeabi_dmul>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	4620      	mov	r0, r4
 8007050:	4629      	mov	r1, r5
 8007052:	f7f9 f923 	bl	800029c <__adddf3>
 8007056:	4604      	mov	r4, r0
 8007058:	460d      	mov	r5, r1
 800705a:	f7f9 fd85 	bl	8000b68 <__aeabi_d2iz>
 800705e:	2200      	movs	r2, #0
 8007060:	4607      	mov	r7, r0
 8007062:	2300      	movs	r3, #0
 8007064:	4620      	mov	r0, r4
 8007066:	4629      	mov	r1, r5
 8007068:	f7f9 fd40 	bl	8000aec <__aeabi_dcmplt>
 800706c:	b140      	cbz	r0, 8007080 <_dtoa_r+0x168>
 800706e:	4638      	mov	r0, r7
 8007070:	f7f9 fa60 	bl	8000534 <__aeabi_i2d>
 8007074:	4622      	mov	r2, r4
 8007076:	462b      	mov	r3, r5
 8007078:	f7f9 fd2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800707c:	b900      	cbnz	r0, 8007080 <_dtoa_r+0x168>
 800707e:	3f01      	subs	r7, #1
 8007080:	2f16      	cmp	r7, #22
 8007082:	d852      	bhi.n	800712a <_dtoa_r+0x212>
 8007084:	4b5d      	ldr	r3, [pc, #372]	@ (80071fc <_dtoa_r+0x2e4>)
 8007086:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800708a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007092:	f7f9 fd2b 	bl	8000aec <__aeabi_dcmplt>
 8007096:	2800      	cmp	r0, #0
 8007098:	d049      	beq.n	800712e <_dtoa_r+0x216>
 800709a:	3f01      	subs	r7, #1
 800709c:	2300      	movs	r3, #0
 800709e:	9310      	str	r3, [sp, #64]	@ 0x40
 80070a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80070a2:	1b9b      	subs	r3, r3, r6
 80070a4:	1e5a      	subs	r2, r3, #1
 80070a6:	bf45      	ittet	mi
 80070a8:	f1c3 0301 	rsbmi	r3, r3, #1
 80070ac:	9300      	strmi	r3, [sp, #0]
 80070ae:	2300      	movpl	r3, #0
 80070b0:	2300      	movmi	r3, #0
 80070b2:	9206      	str	r2, [sp, #24]
 80070b4:	bf54      	ite	pl
 80070b6:	9300      	strpl	r3, [sp, #0]
 80070b8:	9306      	strmi	r3, [sp, #24]
 80070ba:	2f00      	cmp	r7, #0
 80070bc:	db39      	blt.n	8007132 <_dtoa_r+0x21a>
 80070be:	9b06      	ldr	r3, [sp, #24]
 80070c0:	970d      	str	r7, [sp, #52]	@ 0x34
 80070c2:	443b      	add	r3, r7
 80070c4:	9306      	str	r3, [sp, #24]
 80070c6:	2300      	movs	r3, #0
 80070c8:	9308      	str	r3, [sp, #32]
 80070ca:	9b07      	ldr	r3, [sp, #28]
 80070cc:	2b09      	cmp	r3, #9
 80070ce:	d863      	bhi.n	8007198 <_dtoa_r+0x280>
 80070d0:	2b05      	cmp	r3, #5
 80070d2:	bfc4      	itt	gt
 80070d4:	3b04      	subgt	r3, #4
 80070d6:	9307      	strgt	r3, [sp, #28]
 80070d8:	9b07      	ldr	r3, [sp, #28]
 80070da:	f1a3 0302 	sub.w	r3, r3, #2
 80070de:	bfcc      	ite	gt
 80070e0:	2400      	movgt	r4, #0
 80070e2:	2401      	movle	r4, #1
 80070e4:	2b03      	cmp	r3, #3
 80070e6:	d863      	bhi.n	80071b0 <_dtoa_r+0x298>
 80070e8:	e8df f003 	tbb	[pc, r3]
 80070ec:	2b375452 	.word	0x2b375452
 80070f0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80070f4:	441e      	add	r6, r3
 80070f6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80070fa:	2b20      	cmp	r3, #32
 80070fc:	bfc1      	itttt	gt
 80070fe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007102:	409f      	lslgt	r7, r3
 8007104:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007108:	fa24 f303 	lsrgt.w	r3, r4, r3
 800710c:	bfd6      	itet	le
 800710e:	f1c3 0320 	rsble	r3, r3, #32
 8007112:	ea47 0003 	orrgt.w	r0, r7, r3
 8007116:	fa04 f003 	lslle.w	r0, r4, r3
 800711a:	f7f9 f9fb 	bl	8000514 <__aeabi_ui2d>
 800711e:	2201      	movs	r2, #1
 8007120:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007124:	3e01      	subs	r6, #1
 8007126:	9212      	str	r2, [sp, #72]	@ 0x48
 8007128:	e776      	b.n	8007018 <_dtoa_r+0x100>
 800712a:	2301      	movs	r3, #1
 800712c:	e7b7      	b.n	800709e <_dtoa_r+0x186>
 800712e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007130:	e7b6      	b.n	80070a0 <_dtoa_r+0x188>
 8007132:	9b00      	ldr	r3, [sp, #0]
 8007134:	1bdb      	subs	r3, r3, r7
 8007136:	9300      	str	r3, [sp, #0]
 8007138:	427b      	negs	r3, r7
 800713a:	9308      	str	r3, [sp, #32]
 800713c:	2300      	movs	r3, #0
 800713e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007140:	e7c3      	b.n	80070ca <_dtoa_r+0x1b2>
 8007142:	2301      	movs	r3, #1
 8007144:	9309      	str	r3, [sp, #36]	@ 0x24
 8007146:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007148:	eb07 0b03 	add.w	fp, r7, r3
 800714c:	f10b 0301 	add.w	r3, fp, #1
 8007150:	2b01      	cmp	r3, #1
 8007152:	9303      	str	r3, [sp, #12]
 8007154:	bfb8      	it	lt
 8007156:	2301      	movlt	r3, #1
 8007158:	e006      	b.n	8007168 <_dtoa_r+0x250>
 800715a:	2301      	movs	r3, #1
 800715c:	9309      	str	r3, [sp, #36]	@ 0x24
 800715e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007160:	2b00      	cmp	r3, #0
 8007162:	dd28      	ble.n	80071b6 <_dtoa_r+0x29e>
 8007164:	469b      	mov	fp, r3
 8007166:	9303      	str	r3, [sp, #12]
 8007168:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800716c:	2100      	movs	r1, #0
 800716e:	2204      	movs	r2, #4
 8007170:	f102 0514 	add.w	r5, r2, #20
 8007174:	429d      	cmp	r5, r3
 8007176:	d926      	bls.n	80071c6 <_dtoa_r+0x2ae>
 8007178:	6041      	str	r1, [r0, #4]
 800717a:	4648      	mov	r0, r9
 800717c:	f001 f8e8 	bl	8008350 <_Balloc>
 8007180:	4682      	mov	sl, r0
 8007182:	2800      	cmp	r0, #0
 8007184:	d142      	bne.n	800720c <_dtoa_r+0x2f4>
 8007186:	4b1e      	ldr	r3, [pc, #120]	@ (8007200 <_dtoa_r+0x2e8>)
 8007188:	4602      	mov	r2, r0
 800718a:	f240 11af 	movw	r1, #431	@ 0x1af
 800718e:	e6da      	b.n	8006f46 <_dtoa_r+0x2e>
 8007190:	2300      	movs	r3, #0
 8007192:	e7e3      	b.n	800715c <_dtoa_r+0x244>
 8007194:	2300      	movs	r3, #0
 8007196:	e7d5      	b.n	8007144 <_dtoa_r+0x22c>
 8007198:	2401      	movs	r4, #1
 800719a:	2300      	movs	r3, #0
 800719c:	9307      	str	r3, [sp, #28]
 800719e:	9409      	str	r4, [sp, #36]	@ 0x24
 80071a0:	f04f 3bff 	mov.w	fp, #4294967295
 80071a4:	2200      	movs	r2, #0
 80071a6:	f8cd b00c 	str.w	fp, [sp, #12]
 80071aa:	2312      	movs	r3, #18
 80071ac:	920c      	str	r2, [sp, #48]	@ 0x30
 80071ae:	e7db      	b.n	8007168 <_dtoa_r+0x250>
 80071b0:	2301      	movs	r3, #1
 80071b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80071b4:	e7f4      	b.n	80071a0 <_dtoa_r+0x288>
 80071b6:	f04f 0b01 	mov.w	fp, #1
 80071ba:	f8cd b00c 	str.w	fp, [sp, #12]
 80071be:	465b      	mov	r3, fp
 80071c0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80071c4:	e7d0      	b.n	8007168 <_dtoa_r+0x250>
 80071c6:	3101      	adds	r1, #1
 80071c8:	0052      	lsls	r2, r2, #1
 80071ca:	e7d1      	b.n	8007170 <_dtoa_r+0x258>
 80071cc:	f3af 8000 	nop.w
 80071d0:	636f4361 	.word	0x636f4361
 80071d4:	3fd287a7 	.word	0x3fd287a7
 80071d8:	8b60c8b3 	.word	0x8b60c8b3
 80071dc:	3fc68a28 	.word	0x3fc68a28
 80071e0:	509f79fb 	.word	0x509f79fb
 80071e4:	3fd34413 	.word	0x3fd34413
 80071e8:	0800e804 	.word	0x0800e804
 80071ec:	0800e81b 	.word	0x0800e81b
 80071f0:	7ff00000 	.word	0x7ff00000
 80071f4:	0800e7c7 	.word	0x0800e7c7
 80071f8:	3ff80000 	.word	0x3ff80000
 80071fc:	0800ea18 	.word	0x0800ea18
 8007200:	0800e873 	.word	0x0800e873
 8007204:	0800e800 	.word	0x0800e800
 8007208:	0800e7c6 	.word	0x0800e7c6
 800720c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007210:	6018      	str	r0, [r3, #0]
 8007212:	9b03      	ldr	r3, [sp, #12]
 8007214:	2b0e      	cmp	r3, #14
 8007216:	f200 80a1 	bhi.w	800735c <_dtoa_r+0x444>
 800721a:	2c00      	cmp	r4, #0
 800721c:	f000 809e 	beq.w	800735c <_dtoa_r+0x444>
 8007220:	2f00      	cmp	r7, #0
 8007222:	dd33      	ble.n	800728c <_dtoa_r+0x374>
 8007224:	4b9c      	ldr	r3, [pc, #624]	@ (8007498 <_dtoa_r+0x580>)
 8007226:	f007 020f 	and.w	r2, r7, #15
 800722a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800722e:	ed93 7b00 	vldr	d7, [r3]
 8007232:	05f8      	lsls	r0, r7, #23
 8007234:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007238:	ea4f 1427 	mov.w	r4, r7, asr #4
 800723c:	d516      	bpl.n	800726c <_dtoa_r+0x354>
 800723e:	4b97      	ldr	r3, [pc, #604]	@ (800749c <_dtoa_r+0x584>)
 8007240:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007244:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007248:	f7f9 fb08 	bl	800085c <__aeabi_ddiv>
 800724c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007250:	f004 040f 	and.w	r4, r4, #15
 8007254:	2603      	movs	r6, #3
 8007256:	4d91      	ldr	r5, [pc, #580]	@ (800749c <_dtoa_r+0x584>)
 8007258:	b954      	cbnz	r4, 8007270 <_dtoa_r+0x358>
 800725a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800725e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007262:	f7f9 fafb 	bl	800085c <__aeabi_ddiv>
 8007266:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800726a:	e028      	b.n	80072be <_dtoa_r+0x3a6>
 800726c:	2602      	movs	r6, #2
 800726e:	e7f2      	b.n	8007256 <_dtoa_r+0x33e>
 8007270:	07e1      	lsls	r1, r4, #31
 8007272:	d508      	bpl.n	8007286 <_dtoa_r+0x36e>
 8007274:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007278:	e9d5 2300 	ldrd	r2, r3, [r5]
 800727c:	f7f9 f9c4 	bl	8000608 <__aeabi_dmul>
 8007280:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007284:	3601      	adds	r6, #1
 8007286:	1064      	asrs	r4, r4, #1
 8007288:	3508      	adds	r5, #8
 800728a:	e7e5      	b.n	8007258 <_dtoa_r+0x340>
 800728c:	f000 80af 	beq.w	80073ee <_dtoa_r+0x4d6>
 8007290:	427c      	negs	r4, r7
 8007292:	4b81      	ldr	r3, [pc, #516]	@ (8007498 <_dtoa_r+0x580>)
 8007294:	4d81      	ldr	r5, [pc, #516]	@ (800749c <_dtoa_r+0x584>)
 8007296:	f004 020f 	and.w	r2, r4, #15
 800729a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800729e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80072a6:	f7f9 f9af 	bl	8000608 <__aeabi_dmul>
 80072aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072ae:	1124      	asrs	r4, r4, #4
 80072b0:	2300      	movs	r3, #0
 80072b2:	2602      	movs	r6, #2
 80072b4:	2c00      	cmp	r4, #0
 80072b6:	f040 808f 	bne.w	80073d8 <_dtoa_r+0x4c0>
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1d3      	bne.n	8007266 <_dtoa_r+0x34e>
 80072be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80072c0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 8094 	beq.w	80073f2 <_dtoa_r+0x4da>
 80072ca:	4b75      	ldr	r3, [pc, #468]	@ (80074a0 <_dtoa_r+0x588>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	4620      	mov	r0, r4
 80072d0:	4629      	mov	r1, r5
 80072d2:	f7f9 fc0b 	bl	8000aec <__aeabi_dcmplt>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	f000 808b 	beq.w	80073f2 <_dtoa_r+0x4da>
 80072dc:	9b03      	ldr	r3, [sp, #12]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 8087 	beq.w	80073f2 <_dtoa_r+0x4da>
 80072e4:	f1bb 0f00 	cmp.w	fp, #0
 80072e8:	dd34      	ble.n	8007354 <_dtoa_r+0x43c>
 80072ea:	4620      	mov	r0, r4
 80072ec:	4b6d      	ldr	r3, [pc, #436]	@ (80074a4 <_dtoa_r+0x58c>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	4629      	mov	r1, r5
 80072f2:	f7f9 f989 	bl	8000608 <__aeabi_dmul>
 80072f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072fa:	f107 38ff 	add.w	r8, r7, #4294967295
 80072fe:	3601      	adds	r6, #1
 8007300:	465c      	mov	r4, fp
 8007302:	4630      	mov	r0, r6
 8007304:	f7f9 f916 	bl	8000534 <__aeabi_i2d>
 8007308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800730c:	f7f9 f97c 	bl	8000608 <__aeabi_dmul>
 8007310:	4b65      	ldr	r3, [pc, #404]	@ (80074a8 <_dtoa_r+0x590>)
 8007312:	2200      	movs	r2, #0
 8007314:	f7f8 ffc2 	bl	800029c <__adddf3>
 8007318:	4605      	mov	r5, r0
 800731a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800731e:	2c00      	cmp	r4, #0
 8007320:	d16a      	bne.n	80073f8 <_dtoa_r+0x4e0>
 8007322:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007326:	4b61      	ldr	r3, [pc, #388]	@ (80074ac <_dtoa_r+0x594>)
 8007328:	2200      	movs	r2, #0
 800732a:	f7f8 ffb5 	bl	8000298 <__aeabi_dsub>
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007336:	462a      	mov	r2, r5
 8007338:	4633      	mov	r3, r6
 800733a:	f7f9 fbf5 	bl	8000b28 <__aeabi_dcmpgt>
 800733e:	2800      	cmp	r0, #0
 8007340:	f040 8298 	bne.w	8007874 <_dtoa_r+0x95c>
 8007344:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007348:	462a      	mov	r2, r5
 800734a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800734e:	f7f9 fbcd 	bl	8000aec <__aeabi_dcmplt>
 8007352:	bb38      	cbnz	r0, 80073a4 <_dtoa_r+0x48c>
 8007354:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007358:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800735c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800735e:	2b00      	cmp	r3, #0
 8007360:	f2c0 8157 	blt.w	8007612 <_dtoa_r+0x6fa>
 8007364:	2f0e      	cmp	r7, #14
 8007366:	f300 8154 	bgt.w	8007612 <_dtoa_r+0x6fa>
 800736a:	4b4b      	ldr	r3, [pc, #300]	@ (8007498 <_dtoa_r+0x580>)
 800736c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007370:	ed93 7b00 	vldr	d7, [r3]
 8007374:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007376:	2b00      	cmp	r3, #0
 8007378:	ed8d 7b00 	vstr	d7, [sp]
 800737c:	f280 80e5 	bge.w	800754a <_dtoa_r+0x632>
 8007380:	9b03      	ldr	r3, [sp, #12]
 8007382:	2b00      	cmp	r3, #0
 8007384:	f300 80e1 	bgt.w	800754a <_dtoa_r+0x632>
 8007388:	d10c      	bne.n	80073a4 <_dtoa_r+0x48c>
 800738a:	4b48      	ldr	r3, [pc, #288]	@ (80074ac <_dtoa_r+0x594>)
 800738c:	2200      	movs	r2, #0
 800738e:	ec51 0b17 	vmov	r0, r1, d7
 8007392:	f7f9 f939 	bl	8000608 <__aeabi_dmul>
 8007396:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800739a:	f7f9 fbbb 	bl	8000b14 <__aeabi_dcmpge>
 800739e:	2800      	cmp	r0, #0
 80073a0:	f000 8266 	beq.w	8007870 <_dtoa_r+0x958>
 80073a4:	2400      	movs	r4, #0
 80073a6:	4625      	mov	r5, r4
 80073a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80073aa:	4656      	mov	r6, sl
 80073ac:	ea6f 0803 	mvn.w	r8, r3
 80073b0:	2700      	movs	r7, #0
 80073b2:	4621      	mov	r1, r4
 80073b4:	4648      	mov	r0, r9
 80073b6:	f001 f80b 	bl	80083d0 <_Bfree>
 80073ba:	2d00      	cmp	r5, #0
 80073bc:	f000 80bd 	beq.w	800753a <_dtoa_r+0x622>
 80073c0:	b12f      	cbz	r7, 80073ce <_dtoa_r+0x4b6>
 80073c2:	42af      	cmp	r7, r5
 80073c4:	d003      	beq.n	80073ce <_dtoa_r+0x4b6>
 80073c6:	4639      	mov	r1, r7
 80073c8:	4648      	mov	r0, r9
 80073ca:	f001 f801 	bl	80083d0 <_Bfree>
 80073ce:	4629      	mov	r1, r5
 80073d0:	4648      	mov	r0, r9
 80073d2:	f000 fffd 	bl	80083d0 <_Bfree>
 80073d6:	e0b0      	b.n	800753a <_dtoa_r+0x622>
 80073d8:	07e2      	lsls	r2, r4, #31
 80073da:	d505      	bpl.n	80073e8 <_dtoa_r+0x4d0>
 80073dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073e0:	f7f9 f912 	bl	8000608 <__aeabi_dmul>
 80073e4:	3601      	adds	r6, #1
 80073e6:	2301      	movs	r3, #1
 80073e8:	1064      	asrs	r4, r4, #1
 80073ea:	3508      	adds	r5, #8
 80073ec:	e762      	b.n	80072b4 <_dtoa_r+0x39c>
 80073ee:	2602      	movs	r6, #2
 80073f0:	e765      	b.n	80072be <_dtoa_r+0x3a6>
 80073f2:	9c03      	ldr	r4, [sp, #12]
 80073f4:	46b8      	mov	r8, r7
 80073f6:	e784      	b.n	8007302 <_dtoa_r+0x3ea>
 80073f8:	4b27      	ldr	r3, [pc, #156]	@ (8007498 <_dtoa_r+0x580>)
 80073fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80073fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007400:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007404:	4454      	add	r4, sl
 8007406:	2900      	cmp	r1, #0
 8007408:	d054      	beq.n	80074b4 <_dtoa_r+0x59c>
 800740a:	4929      	ldr	r1, [pc, #164]	@ (80074b0 <_dtoa_r+0x598>)
 800740c:	2000      	movs	r0, #0
 800740e:	f7f9 fa25 	bl	800085c <__aeabi_ddiv>
 8007412:	4633      	mov	r3, r6
 8007414:	462a      	mov	r2, r5
 8007416:	f7f8 ff3f 	bl	8000298 <__aeabi_dsub>
 800741a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800741e:	4656      	mov	r6, sl
 8007420:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007424:	f7f9 fba0 	bl	8000b68 <__aeabi_d2iz>
 8007428:	4605      	mov	r5, r0
 800742a:	f7f9 f883 	bl	8000534 <__aeabi_i2d>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007436:	f7f8 ff2f 	bl	8000298 <__aeabi_dsub>
 800743a:	3530      	adds	r5, #48	@ 0x30
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007444:	f806 5b01 	strb.w	r5, [r6], #1
 8007448:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800744c:	f7f9 fb4e 	bl	8000aec <__aeabi_dcmplt>
 8007450:	2800      	cmp	r0, #0
 8007452:	d172      	bne.n	800753a <_dtoa_r+0x622>
 8007454:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007458:	4911      	ldr	r1, [pc, #68]	@ (80074a0 <_dtoa_r+0x588>)
 800745a:	2000      	movs	r0, #0
 800745c:	f7f8 ff1c 	bl	8000298 <__aeabi_dsub>
 8007460:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007464:	f7f9 fb42 	bl	8000aec <__aeabi_dcmplt>
 8007468:	2800      	cmp	r0, #0
 800746a:	f040 80b4 	bne.w	80075d6 <_dtoa_r+0x6be>
 800746e:	42a6      	cmp	r6, r4
 8007470:	f43f af70 	beq.w	8007354 <_dtoa_r+0x43c>
 8007474:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007478:	4b0a      	ldr	r3, [pc, #40]	@ (80074a4 <_dtoa_r+0x58c>)
 800747a:	2200      	movs	r2, #0
 800747c:	f7f9 f8c4 	bl	8000608 <__aeabi_dmul>
 8007480:	4b08      	ldr	r3, [pc, #32]	@ (80074a4 <_dtoa_r+0x58c>)
 8007482:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007486:	2200      	movs	r2, #0
 8007488:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800748c:	f7f9 f8bc 	bl	8000608 <__aeabi_dmul>
 8007490:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007494:	e7c4      	b.n	8007420 <_dtoa_r+0x508>
 8007496:	bf00      	nop
 8007498:	0800ea18 	.word	0x0800ea18
 800749c:	0800e9f0 	.word	0x0800e9f0
 80074a0:	3ff00000 	.word	0x3ff00000
 80074a4:	40240000 	.word	0x40240000
 80074a8:	401c0000 	.word	0x401c0000
 80074ac:	40140000 	.word	0x40140000
 80074b0:	3fe00000 	.word	0x3fe00000
 80074b4:	4631      	mov	r1, r6
 80074b6:	4628      	mov	r0, r5
 80074b8:	f7f9 f8a6 	bl	8000608 <__aeabi_dmul>
 80074bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80074c0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80074c2:	4656      	mov	r6, sl
 80074c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074c8:	f7f9 fb4e 	bl	8000b68 <__aeabi_d2iz>
 80074cc:	4605      	mov	r5, r0
 80074ce:	f7f9 f831 	bl	8000534 <__aeabi_i2d>
 80074d2:	4602      	mov	r2, r0
 80074d4:	460b      	mov	r3, r1
 80074d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074da:	f7f8 fedd 	bl	8000298 <__aeabi_dsub>
 80074de:	3530      	adds	r5, #48	@ 0x30
 80074e0:	f806 5b01 	strb.w	r5, [r6], #1
 80074e4:	4602      	mov	r2, r0
 80074e6:	460b      	mov	r3, r1
 80074e8:	42a6      	cmp	r6, r4
 80074ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80074ee:	f04f 0200 	mov.w	r2, #0
 80074f2:	d124      	bne.n	800753e <_dtoa_r+0x626>
 80074f4:	4baf      	ldr	r3, [pc, #700]	@ (80077b4 <_dtoa_r+0x89c>)
 80074f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80074fa:	f7f8 fecf 	bl	800029c <__adddf3>
 80074fe:	4602      	mov	r2, r0
 8007500:	460b      	mov	r3, r1
 8007502:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007506:	f7f9 fb0f 	bl	8000b28 <__aeabi_dcmpgt>
 800750a:	2800      	cmp	r0, #0
 800750c:	d163      	bne.n	80075d6 <_dtoa_r+0x6be>
 800750e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007512:	49a8      	ldr	r1, [pc, #672]	@ (80077b4 <_dtoa_r+0x89c>)
 8007514:	2000      	movs	r0, #0
 8007516:	f7f8 febf 	bl	8000298 <__aeabi_dsub>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007522:	f7f9 fae3 	bl	8000aec <__aeabi_dcmplt>
 8007526:	2800      	cmp	r0, #0
 8007528:	f43f af14 	beq.w	8007354 <_dtoa_r+0x43c>
 800752c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800752e:	1e73      	subs	r3, r6, #1
 8007530:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007532:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007536:	2b30      	cmp	r3, #48	@ 0x30
 8007538:	d0f8      	beq.n	800752c <_dtoa_r+0x614>
 800753a:	4647      	mov	r7, r8
 800753c:	e03b      	b.n	80075b6 <_dtoa_r+0x69e>
 800753e:	4b9e      	ldr	r3, [pc, #632]	@ (80077b8 <_dtoa_r+0x8a0>)
 8007540:	f7f9 f862 	bl	8000608 <__aeabi_dmul>
 8007544:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007548:	e7bc      	b.n	80074c4 <_dtoa_r+0x5ac>
 800754a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800754e:	4656      	mov	r6, sl
 8007550:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007554:	4620      	mov	r0, r4
 8007556:	4629      	mov	r1, r5
 8007558:	f7f9 f980 	bl	800085c <__aeabi_ddiv>
 800755c:	f7f9 fb04 	bl	8000b68 <__aeabi_d2iz>
 8007560:	4680      	mov	r8, r0
 8007562:	f7f8 ffe7 	bl	8000534 <__aeabi_i2d>
 8007566:	e9dd 2300 	ldrd	r2, r3, [sp]
 800756a:	f7f9 f84d 	bl	8000608 <__aeabi_dmul>
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	4620      	mov	r0, r4
 8007574:	4629      	mov	r1, r5
 8007576:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800757a:	f7f8 fe8d 	bl	8000298 <__aeabi_dsub>
 800757e:	f806 4b01 	strb.w	r4, [r6], #1
 8007582:	9d03      	ldr	r5, [sp, #12]
 8007584:	eba6 040a 	sub.w	r4, r6, sl
 8007588:	42a5      	cmp	r5, r4
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	d133      	bne.n	80075f8 <_dtoa_r+0x6e0>
 8007590:	f7f8 fe84 	bl	800029c <__adddf3>
 8007594:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007598:	4604      	mov	r4, r0
 800759a:	460d      	mov	r5, r1
 800759c:	f7f9 fac4 	bl	8000b28 <__aeabi_dcmpgt>
 80075a0:	b9c0      	cbnz	r0, 80075d4 <_dtoa_r+0x6bc>
 80075a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075a6:	4620      	mov	r0, r4
 80075a8:	4629      	mov	r1, r5
 80075aa:	f7f9 fa95 	bl	8000ad8 <__aeabi_dcmpeq>
 80075ae:	b110      	cbz	r0, 80075b6 <_dtoa_r+0x69e>
 80075b0:	f018 0f01 	tst.w	r8, #1
 80075b4:	d10e      	bne.n	80075d4 <_dtoa_r+0x6bc>
 80075b6:	9902      	ldr	r1, [sp, #8]
 80075b8:	4648      	mov	r0, r9
 80075ba:	f000 ff09 	bl	80083d0 <_Bfree>
 80075be:	2300      	movs	r3, #0
 80075c0:	7033      	strb	r3, [r6, #0]
 80075c2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80075c4:	3701      	adds	r7, #1
 80075c6:	601f      	str	r7, [r3, #0]
 80075c8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 824b 	beq.w	8007a66 <_dtoa_r+0xb4e>
 80075d0:	601e      	str	r6, [r3, #0]
 80075d2:	e248      	b.n	8007a66 <_dtoa_r+0xb4e>
 80075d4:	46b8      	mov	r8, r7
 80075d6:	4633      	mov	r3, r6
 80075d8:	461e      	mov	r6, r3
 80075da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80075de:	2a39      	cmp	r2, #57	@ 0x39
 80075e0:	d106      	bne.n	80075f0 <_dtoa_r+0x6d8>
 80075e2:	459a      	cmp	sl, r3
 80075e4:	d1f8      	bne.n	80075d8 <_dtoa_r+0x6c0>
 80075e6:	2230      	movs	r2, #48	@ 0x30
 80075e8:	f108 0801 	add.w	r8, r8, #1
 80075ec:	f88a 2000 	strb.w	r2, [sl]
 80075f0:	781a      	ldrb	r2, [r3, #0]
 80075f2:	3201      	adds	r2, #1
 80075f4:	701a      	strb	r2, [r3, #0]
 80075f6:	e7a0      	b.n	800753a <_dtoa_r+0x622>
 80075f8:	4b6f      	ldr	r3, [pc, #444]	@ (80077b8 <_dtoa_r+0x8a0>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	f7f9 f804 	bl	8000608 <__aeabi_dmul>
 8007600:	2200      	movs	r2, #0
 8007602:	2300      	movs	r3, #0
 8007604:	4604      	mov	r4, r0
 8007606:	460d      	mov	r5, r1
 8007608:	f7f9 fa66 	bl	8000ad8 <__aeabi_dcmpeq>
 800760c:	2800      	cmp	r0, #0
 800760e:	d09f      	beq.n	8007550 <_dtoa_r+0x638>
 8007610:	e7d1      	b.n	80075b6 <_dtoa_r+0x69e>
 8007612:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007614:	2a00      	cmp	r2, #0
 8007616:	f000 80ea 	beq.w	80077ee <_dtoa_r+0x8d6>
 800761a:	9a07      	ldr	r2, [sp, #28]
 800761c:	2a01      	cmp	r2, #1
 800761e:	f300 80cd 	bgt.w	80077bc <_dtoa_r+0x8a4>
 8007622:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007624:	2a00      	cmp	r2, #0
 8007626:	f000 80c1 	beq.w	80077ac <_dtoa_r+0x894>
 800762a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800762e:	9c08      	ldr	r4, [sp, #32]
 8007630:	9e00      	ldr	r6, [sp, #0]
 8007632:	9a00      	ldr	r2, [sp, #0]
 8007634:	441a      	add	r2, r3
 8007636:	9200      	str	r2, [sp, #0]
 8007638:	9a06      	ldr	r2, [sp, #24]
 800763a:	2101      	movs	r1, #1
 800763c:	441a      	add	r2, r3
 800763e:	4648      	mov	r0, r9
 8007640:	9206      	str	r2, [sp, #24]
 8007642:	f000 ffc3 	bl	80085cc <__i2b>
 8007646:	4605      	mov	r5, r0
 8007648:	b166      	cbz	r6, 8007664 <_dtoa_r+0x74c>
 800764a:	9b06      	ldr	r3, [sp, #24]
 800764c:	2b00      	cmp	r3, #0
 800764e:	dd09      	ble.n	8007664 <_dtoa_r+0x74c>
 8007650:	42b3      	cmp	r3, r6
 8007652:	9a00      	ldr	r2, [sp, #0]
 8007654:	bfa8      	it	ge
 8007656:	4633      	movge	r3, r6
 8007658:	1ad2      	subs	r2, r2, r3
 800765a:	9200      	str	r2, [sp, #0]
 800765c:	9a06      	ldr	r2, [sp, #24]
 800765e:	1af6      	subs	r6, r6, r3
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	9306      	str	r3, [sp, #24]
 8007664:	9b08      	ldr	r3, [sp, #32]
 8007666:	b30b      	cbz	r3, 80076ac <_dtoa_r+0x794>
 8007668:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 80c6 	beq.w	80077fc <_dtoa_r+0x8e4>
 8007670:	2c00      	cmp	r4, #0
 8007672:	f000 80c0 	beq.w	80077f6 <_dtoa_r+0x8de>
 8007676:	4629      	mov	r1, r5
 8007678:	4622      	mov	r2, r4
 800767a:	4648      	mov	r0, r9
 800767c:	f001 f85e 	bl	800873c <__pow5mult>
 8007680:	9a02      	ldr	r2, [sp, #8]
 8007682:	4601      	mov	r1, r0
 8007684:	4605      	mov	r5, r0
 8007686:	4648      	mov	r0, r9
 8007688:	f000 ffb6 	bl	80085f8 <__multiply>
 800768c:	9902      	ldr	r1, [sp, #8]
 800768e:	4680      	mov	r8, r0
 8007690:	4648      	mov	r0, r9
 8007692:	f000 fe9d 	bl	80083d0 <_Bfree>
 8007696:	9b08      	ldr	r3, [sp, #32]
 8007698:	1b1b      	subs	r3, r3, r4
 800769a:	9308      	str	r3, [sp, #32]
 800769c:	f000 80b1 	beq.w	8007802 <_dtoa_r+0x8ea>
 80076a0:	9a08      	ldr	r2, [sp, #32]
 80076a2:	4641      	mov	r1, r8
 80076a4:	4648      	mov	r0, r9
 80076a6:	f001 f849 	bl	800873c <__pow5mult>
 80076aa:	9002      	str	r0, [sp, #8]
 80076ac:	2101      	movs	r1, #1
 80076ae:	4648      	mov	r0, r9
 80076b0:	f000 ff8c 	bl	80085cc <__i2b>
 80076b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076b6:	4604      	mov	r4, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 81d8 	beq.w	8007a6e <_dtoa_r+0xb56>
 80076be:	461a      	mov	r2, r3
 80076c0:	4601      	mov	r1, r0
 80076c2:	4648      	mov	r0, r9
 80076c4:	f001 f83a 	bl	800873c <__pow5mult>
 80076c8:	9b07      	ldr	r3, [sp, #28]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	4604      	mov	r4, r0
 80076ce:	f300 809f 	bgt.w	8007810 <_dtoa_r+0x8f8>
 80076d2:	9b04      	ldr	r3, [sp, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f040 8097 	bne.w	8007808 <_dtoa_r+0x8f0>
 80076da:	9b05      	ldr	r3, [sp, #20]
 80076dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f040 8093 	bne.w	800780c <_dtoa_r+0x8f4>
 80076e6:	9b05      	ldr	r3, [sp, #20]
 80076e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80076ec:	0d1b      	lsrs	r3, r3, #20
 80076ee:	051b      	lsls	r3, r3, #20
 80076f0:	b133      	cbz	r3, 8007700 <_dtoa_r+0x7e8>
 80076f2:	9b00      	ldr	r3, [sp, #0]
 80076f4:	3301      	adds	r3, #1
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	9b06      	ldr	r3, [sp, #24]
 80076fa:	3301      	adds	r3, #1
 80076fc:	9306      	str	r3, [sp, #24]
 80076fe:	2301      	movs	r3, #1
 8007700:	9308      	str	r3, [sp, #32]
 8007702:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007704:	2b00      	cmp	r3, #0
 8007706:	f000 81b8 	beq.w	8007a7a <_dtoa_r+0xb62>
 800770a:	6923      	ldr	r3, [r4, #16]
 800770c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007710:	6918      	ldr	r0, [r3, #16]
 8007712:	f000 ff0f 	bl	8008534 <__hi0bits>
 8007716:	f1c0 0020 	rsb	r0, r0, #32
 800771a:	9b06      	ldr	r3, [sp, #24]
 800771c:	4418      	add	r0, r3
 800771e:	f010 001f 	ands.w	r0, r0, #31
 8007722:	f000 8082 	beq.w	800782a <_dtoa_r+0x912>
 8007726:	f1c0 0320 	rsb	r3, r0, #32
 800772a:	2b04      	cmp	r3, #4
 800772c:	dd73      	ble.n	8007816 <_dtoa_r+0x8fe>
 800772e:	9b00      	ldr	r3, [sp, #0]
 8007730:	f1c0 001c 	rsb	r0, r0, #28
 8007734:	4403      	add	r3, r0
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	9b06      	ldr	r3, [sp, #24]
 800773a:	4403      	add	r3, r0
 800773c:	4406      	add	r6, r0
 800773e:	9306      	str	r3, [sp, #24]
 8007740:	9b00      	ldr	r3, [sp, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	dd05      	ble.n	8007752 <_dtoa_r+0x83a>
 8007746:	9902      	ldr	r1, [sp, #8]
 8007748:	461a      	mov	r2, r3
 800774a:	4648      	mov	r0, r9
 800774c:	f001 f850 	bl	80087f0 <__lshift>
 8007750:	9002      	str	r0, [sp, #8]
 8007752:	9b06      	ldr	r3, [sp, #24]
 8007754:	2b00      	cmp	r3, #0
 8007756:	dd05      	ble.n	8007764 <_dtoa_r+0x84c>
 8007758:	4621      	mov	r1, r4
 800775a:	461a      	mov	r2, r3
 800775c:	4648      	mov	r0, r9
 800775e:	f001 f847 	bl	80087f0 <__lshift>
 8007762:	4604      	mov	r4, r0
 8007764:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007766:	2b00      	cmp	r3, #0
 8007768:	d061      	beq.n	800782e <_dtoa_r+0x916>
 800776a:	9802      	ldr	r0, [sp, #8]
 800776c:	4621      	mov	r1, r4
 800776e:	f001 f8ab 	bl	80088c8 <__mcmp>
 8007772:	2800      	cmp	r0, #0
 8007774:	da5b      	bge.n	800782e <_dtoa_r+0x916>
 8007776:	2300      	movs	r3, #0
 8007778:	9902      	ldr	r1, [sp, #8]
 800777a:	220a      	movs	r2, #10
 800777c:	4648      	mov	r0, r9
 800777e:	f000 fe49 	bl	8008414 <__multadd>
 8007782:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007784:	9002      	str	r0, [sp, #8]
 8007786:	f107 38ff 	add.w	r8, r7, #4294967295
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 8177 	beq.w	8007a7e <_dtoa_r+0xb66>
 8007790:	4629      	mov	r1, r5
 8007792:	2300      	movs	r3, #0
 8007794:	220a      	movs	r2, #10
 8007796:	4648      	mov	r0, r9
 8007798:	f000 fe3c 	bl	8008414 <__multadd>
 800779c:	f1bb 0f00 	cmp.w	fp, #0
 80077a0:	4605      	mov	r5, r0
 80077a2:	dc6f      	bgt.n	8007884 <_dtoa_r+0x96c>
 80077a4:	9b07      	ldr	r3, [sp, #28]
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	dc49      	bgt.n	800783e <_dtoa_r+0x926>
 80077aa:	e06b      	b.n	8007884 <_dtoa_r+0x96c>
 80077ac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80077ae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80077b2:	e73c      	b.n	800762e <_dtoa_r+0x716>
 80077b4:	3fe00000 	.word	0x3fe00000
 80077b8:	40240000 	.word	0x40240000
 80077bc:	9b03      	ldr	r3, [sp, #12]
 80077be:	1e5c      	subs	r4, r3, #1
 80077c0:	9b08      	ldr	r3, [sp, #32]
 80077c2:	42a3      	cmp	r3, r4
 80077c4:	db09      	blt.n	80077da <_dtoa_r+0x8c2>
 80077c6:	1b1c      	subs	r4, r3, r4
 80077c8:	9b03      	ldr	r3, [sp, #12]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f6bf af30 	bge.w	8007630 <_dtoa_r+0x718>
 80077d0:	9b00      	ldr	r3, [sp, #0]
 80077d2:	9a03      	ldr	r2, [sp, #12]
 80077d4:	1a9e      	subs	r6, r3, r2
 80077d6:	2300      	movs	r3, #0
 80077d8:	e72b      	b.n	8007632 <_dtoa_r+0x71a>
 80077da:	9b08      	ldr	r3, [sp, #32]
 80077dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80077de:	9408      	str	r4, [sp, #32]
 80077e0:	1ae3      	subs	r3, r4, r3
 80077e2:	441a      	add	r2, r3
 80077e4:	9e00      	ldr	r6, [sp, #0]
 80077e6:	9b03      	ldr	r3, [sp, #12]
 80077e8:	920d      	str	r2, [sp, #52]	@ 0x34
 80077ea:	2400      	movs	r4, #0
 80077ec:	e721      	b.n	8007632 <_dtoa_r+0x71a>
 80077ee:	9c08      	ldr	r4, [sp, #32]
 80077f0:	9e00      	ldr	r6, [sp, #0]
 80077f2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80077f4:	e728      	b.n	8007648 <_dtoa_r+0x730>
 80077f6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80077fa:	e751      	b.n	80076a0 <_dtoa_r+0x788>
 80077fc:	9a08      	ldr	r2, [sp, #32]
 80077fe:	9902      	ldr	r1, [sp, #8]
 8007800:	e750      	b.n	80076a4 <_dtoa_r+0x78c>
 8007802:	f8cd 8008 	str.w	r8, [sp, #8]
 8007806:	e751      	b.n	80076ac <_dtoa_r+0x794>
 8007808:	2300      	movs	r3, #0
 800780a:	e779      	b.n	8007700 <_dtoa_r+0x7e8>
 800780c:	9b04      	ldr	r3, [sp, #16]
 800780e:	e777      	b.n	8007700 <_dtoa_r+0x7e8>
 8007810:	2300      	movs	r3, #0
 8007812:	9308      	str	r3, [sp, #32]
 8007814:	e779      	b.n	800770a <_dtoa_r+0x7f2>
 8007816:	d093      	beq.n	8007740 <_dtoa_r+0x828>
 8007818:	9a00      	ldr	r2, [sp, #0]
 800781a:	331c      	adds	r3, #28
 800781c:	441a      	add	r2, r3
 800781e:	9200      	str	r2, [sp, #0]
 8007820:	9a06      	ldr	r2, [sp, #24]
 8007822:	441a      	add	r2, r3
 8007824:	441e      	add	r6, r3
 8007826:	9206      	str	r2, [sp, #24]
 8007828:	e78a      	b.n	8007740 <_dtoa_r+0x828>
 800782a:	4603      	mov	r3, r0
 800782c:	e7f4      	b.n	8007818 <_dtoa_r+0x900>
 800782e:	9b03      	ldr	r3, [sp, #12]
 8007830:	2b00      	cmp	r3, #0
 8007832:	46b8      	mov	r8, r7
 8007834:	dc20      	bgt.n	8007878 <_dtoa_r+0x960>
 8007836:	469b      	mov	fp, r3
 8007838:	9b07      	ldr	r3, [sp, #28]
 800783a:	2b02      	cmp	r3, #2
 800783c:	dd1e      	ble.n	800787c <_dtoa_r+0x964>
 800783e:	f1bb 0f00 	cmp.w	fp, #0
 8007842:	f47f adb1 	bne.w	80073a8 <_dtoa_r+0x490>
 8007846:	4621      	mov	r1, r4
 8007848:	465b      	mov	r3, fp
 800784a:	2205      	movs	r2, #5
 800784c:	4648      	mov	r0, r9
 800784e:	f000 fde1 	bl	8008414 <__multadd>
 8007852:	4601      	mov	r1, r0
 8007854:	4604      	mov	r4, r0
 8007856:	9802      	ldr	r0, [sp, #8]
 8007858:	f001 f836 	bl	80088c8 <__mcmp>
 800785c:	2800      	cmp	r0, #0
 800785e:	f77f ada3 	ble.w	80073a8 <_dtoa_r+0x490>
 8007862:	4656      	mov	r6, sl
 8007864:	2331      	movs	r3, #49	@ 0x31
 8007866:	f806 3b01 	strb.w	r3, [r6], #1
 800786a:	f108 0801 	add.w	r8, r8, #1
 800786e:	e59f      	b.n	80073b0 <_dtoa_r+0x498>
 8007870:	9c03      	ldr	r4, [sp, #12]
 8007872:	46b8      	mov	r8, r7
 8007874:	4625      	mov	r5, r4
 8007876:	e7f4      	b.n	8007862 <_dtoa_r+0x94a>
 8007878:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800787c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800787e:	2b00      	cmp	r3, #0
 8007880:	f000 8101 	beq.w	8007a86 <_dtoa_r+0xb6e>
 8007884:	2e00      	cmp	r6, #0
 8007886:	dd05      	ble.n	8007894 <_dtoa_r+0x97c>
 8007888:	4629      	mov	r1, r5
 800788a:	4632      	mov	r2, r6
 800788c:	4648      	mov	r0, r9
 800788e:	f000 ffaf 	bl	80087f0 <__lshift>
 8007892:	4605      	mov	r5, r0
 8007894:	9b08      	ldr	r3, [sp, #32]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d05c      	beq.n	8007954 <_dtoa_r+0xa3c>
 800789a:	6869      	ldr	r1, [r5, #4]
 800789c:	4648      	mov	r0, r9
 800789e:	f000 fd57 	bl	8008350 <_Balloc>
 80078a2:	4606      	mov	r6, r0
 80078a4:	b928      	cbnz	r0, 80078b2 <_dtoa_r+0x99a>
 80078a6:	4b82      	ldr	r3, [pc, #520]	@ (8007ab0 <_dtoa_r+0xb98>)
 80078a8:	4602      	mov	r2, r0
 80078aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80078ae:	f7ff bb4a 	b.w	8006f46 <_dtoa_r+0x2e>
 80078b2:	692a      	ldr	r2, [r5, #16]
 80078b4:	3202      	adds	r2, #2
 80078b6:	0092      	lsls	r2, r2, #2
 80078b8:	f105 010c 	add.w	r1, r5, #12
 80078bc:	300c      	adds	r0, #12
 80078be:	f7ff fa84 	bl	8006dca <memcpy>
 80078c2:	2201      	movs	r2, #1
 80078c4:	4631      	mov	r1, r6
 80078c6:	4648      	mov	r0, r9
 80078c8:	f000 ff92 	bl	80087f0 <__lshift>
 80078cc:	f10a 0301 	add.w	r3, sl, #1
 80078d0:	9300      	str	r3, [sp, #0]
 80078d2:	eb0a 030b 	add.w	r3, sl, fp
 80078d6:	9308      	str	r3, [sp, #32]
 80078d8:	9b04      	ldr	r3, [sp, #16]
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	462f      	mov	r7, r5
 80078e0:	9306      	str	r3, [sp, #24]
 80078e2:	4605      	mov	r5, r0
 80078e4:	9b00      	ldr	r3, [sp, #0]
 80078e6:	9802      	ldr	r0, [sp, #8]
 80078e8:	4621      	mov	r1, r4
 80078ea:	f103 3bff 	add.w	fp, r3, #4294967295
 80078ee:	f7ff fa89 	bl	8006e04 <quorem>
 80078f2:	4603      	mov	r3, r0
 80078f4:	3330      	adds	r3, #48	@ 0x30
 80078f6:	9003      	str	r0, [sp, #12]
 80078f8:	4639      	mov	r1, r7
 80078fa:	9802      	ldr	r0, [sp, #8]
 80078fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80078fe:	f000 ffe3 	bl	80088c8 <__mcmp>
 8007902:	462a      	mov	r2, r5
 8007904:	9004      	str	r0, [sp, #16]
 8007906:	4621      	mov	r1, r4
 8007908:	4648      	mov	r0, r9
 800790a:	f000 fff9 	bl	8008900 <__mdiff>
 800790e:	68c2      	ldr	r2, [r0, #12]
 8007910:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007912:	4606      	mov	r6, r0
 8007914:	bb02      	cbnz	r2, 8007958 <_dtoa_r+0xa40>
 8007916:	4601      	mov	r1, r0
 8007918:	9802      	ldr	r0, [sp, #8]
 800791a:	f000 ffd5 	bl	80088c8 <__mcmp>
 800791e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007920:	4602      	mov	r2, r0
 8007922:	4631      	mov	r1, r6
 8007924:	4648      	mov	r0, r9
 8007926:	920c      	str	r2, [sp, #48]	@ 0x30
 8007928:	9309      	str	r3, [sp, #36]	@ 0x24
 800792a:	f000 fd51 	bl	80083d0 <_Bfree>
 800792e:	9b07      	ldr	r3, [sp, #28]
 8007930:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007932:	9e00      	ldr	r6, [sp, #0]
 8007934:	ea42 0103 	orr.w	r1, r2, r3
 8007938:	9b06      	ldr	r3, [sp, #24]
 800793a:	4319      	orrs	r1, r3
 800793c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800793e:	d10d      	bne.n	800795c <_dtoa_r+0xa44>
 8007940:	2b39      	cmp	r3, #57	@ 0x39
 8007942:	d027      	beq.n	8007994 <_dtoa_r+0xa7c>
 8007944:	9a04      	ldr	r2, [sp, #16]
 8007946:	2a00      	cmp	r2, #0
 8007948:	dd01      	ble.n	800794e <_dtoa_r+0xa36>
 800794a:	9b03      	ldr	r3, [sp, #12]
 800794c:	3331      	adds	r3, #49	@ 0x31
 800794e:	f88b 3000 	strb.w	r3, [fp]
 8007952:	e52e      	b.n	80073b2 <_dtoa_r+0x49a>
 8007954:	4628      	mov	r0, r5
 8007956:	e7b9      	b.n	80078cc <_dtoa_r+0x9b4>
 8007958:	2201      	movs	r2, #1
 800795a:	e7e2      	b.n	8007922 <_dtoa_r+0xa0a>
 800795c:	9904      	ldr	r1, [sp, #16]
 800795e:	2900      	cmp	r1, #0
 8007960:	db04      	blt.n	800796c <_dtoa_r+0xa54>
 8007962:	9807      	ldr	r0, [sp, #28]
 8007964:	4301      	orrs	r1, r0
 8007966:	9806      	ldr	r0, [sp, #24]
 8007968:	4301      	orrs	r1, r0
 800796a:	d120      	bne.n	80079ae <_dtoa_r+0xa96>
 800796c:	2a00      	cmp	r2, #0
 800796e:	ddee      	ble.n	800794e <_dtoa_r+0xa36>
 8007970:	9902      	ldr	r1, [sp, #8]
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	2201      	movs	r2, #1
 8007976:	4648      	mov	r0, r9
 8007978:	f000 ff3a 	bl	80087f0 <__lshift>
 800797c:	4621      	mov	r1, r4
 800797e:	9002      	str	r0, [sp, #8]
 8007980:	f000 ffa2 	bl	80088c8 <__mcmp>
 8007984:	2800      	cmp	r0, #0
 8007986:	9b00      	ldr	r3, [sp, #0]
 8007988:	dc02      	bgt.n	8007990 <_dtoa_r+0xa78>
 800798a:	d1e0      	bne.n	800794e <_dtoa_r+0xa36>
 800798c:	07da      	lsls	r2, r3, #31
 800798e:	d5de      	bpl.n	800794e <_dtoa_r+0xa36>
 8007990:	2b39      	cmp	r3, #57	@ 0x39
 8007992:	d1da      	bne.n	800794a <_dtoa_r+0xa32>
 8007994:	2339      	movs	r3, #57	@ 0x39
 8007996:	f88b 3000 	strb.w	r3, [fp]
 800799a:	4633      	mov	r3, r6
 800799c:	461e      	mov	r6, r3
 800799e:	3b01      	subs	r3, #1
 80079a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80079a4:	2a39      	cmp	r2, #57	@ 0x39
 80079a6:	d04e      	beq.n	8007a46 <_dtoa_r+0xb2e>
 80079a8:	3201      	adds	r2, #1
 80079aa:	701a      	strb	r2, [r3, #0]
 80079ac:	e501      	b.n	80073b2 <_dtoa_r+0x49a>
 80079ae:	2a00      	cmp	r2, #0
 80079b0:	dd03      	ble.n	80079ba <_dtoa_r+0xaa2>
 80079b2:	2b39      	cmp	r3, #57	@ 0x39
 80079b4:	d0ee      	beq.n	8007994 <_dtoa_r+0xa7c>
 80079b6:	3301      	adds	r3, #1
 80079b8:	e7c9      	b.n	800794e <_dtoa_r+0xa36>
 80079ba:	9a00      	ldr	r2, [sp, #0]
 80079bc:	9908      	ldr	r1, [sp, #32]
 80079be:	f802 3c01 	strb.w	r3, [r2, #-1]
 80079c2:	428a      	cmp	r2, r1
 80079c4:	d028      	beq.n	8007a18 <_dtoa_r+0xb00>
 80079c6:	9902      	ldr	r1, [sp, #8]
 80079c8:	2300      	movs	r3, #0
 80079ca:	220a      	movs	r2, #10
 80079cc:	4648      	mov	r0, r9
 80079ce:	f000 fd21 	bl	8008414 <__multadd>
 80079d2:	42af      	cmp	r7, r5
 80079d4:	9002      	str	r0, [sp, #8]
 80079d6:	f04f 0300 	mov.w	r3, #0
 80079da:	f04f 020a 	mov.w	r2, #10
 80079de:	4639      	mov	r1, r7
 80079e0:	4648      	mov	r0, r9
 80079e2:	d107      	bne.n	80079f4 <_dtoa_r+0xadc>
 80079e4:	f000 fd16 	bl	8008414 <__multadd>
 80079e8:	4607      	mov	r7, r0
 80079ea:	4605      	mov	r5, r0
 80079ec:	9b00      	ldr	r3, [sp, #0]
 80079ee:	3301      	adds	r3, #1
 80079f0:	9300      	str	r3, [sp, #0]
 80079f2:	e777      	b.n	80078e4 <_dtoa_r+0x9cc>
 80079f4:	f000 fd0e 	bl	8008414 <__multadd>
 80079f8:	4629      	mov	r1, r5
 80079fa:	4607      	mov	r7, r0
 80079fc:	2300      	movs	r3, #0
 80079fe:	220a      	movs	r2, #10
 8007a00:	4648      	mov	r0, r9
 8007a02:	f000 fd07 	bl	8008414 <__multadd>
 8007a06:	4605      	mov	r5, r0
 8007a08:	e7f0      	b.n	80079ec <_dtoa_r+0xad4>
 8007a0a:	f1bb 0f00 	cmp.w	fp, #0
 8007a0e:	bfcc      	ite	gt
 8007a10:	465e      	movgt	r6, fp
 8007a12:	2601      	movle	r6, #1
 8007a14:	4456      	add	r6, sl
 8007a16:	2700      	movs	r7, #0
 8007a18:	9902      	ldr	r1, [sp, #8]
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	4648      	mov	r0, r9
 8007a20:	f000 fee6 	bl	80087f0 <__lshift>
 8007a24:	4621      	mov	r1, r4
 8007a26:	9002      	str	r0, [sp, #8]
 8007a28:	f000 ff4e 	bl	80088c8 <__mcmp>
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	dcb4      	bgt.n	800799a <_dtoa_r+0xa82>
 8007a30:	d102      	bne.n	8007a38 <_dtoa_r+0xb20>
 8007a32:	9b00      	ldr	r3, [sp, #0]
 8007a34:	07db      	lsls	r3, r3, #31
 8007a36:	d4b0      	bmi.n	800799a <_dtoa_r+0xa82>
 8007a38:	4633      	mov	r3, r6
 8007a3a:	461e      	mov	r6, r3
 8007a3c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a40:	2a30      	cmp	r2, #48	@ 0x30
 8007a42:	d0fa      	beq.n	8007a3a <_dtoa_r+0xb22>
 8007a44:	e4b5      	b.n	80073b2 <_dtoa_r+0x49a>
 8007a46:	459a      	cmp	sl, r3
 8007a48:	d1a8      	bne.n	800799c <_dtoa_r+0xa84>
 8007a4a:	2331      	movs	r3, #49	@ 0x31
 8007a4c:	f108 0801 	add.w	r8, r8, #1
 8007a50:	f88a 3000 	strb.w	r3, [sl]
 8007a54:	e4ad      	b.n	80073b2 <_dtoa_r+0x49a>
 8007a56:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a58:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007ab4 <_dtoa_r+0xb9c>
 8007a5c:	b11b      	cbz	r3, 8007a66 <_dtoa_r+0xb4e>
 8007a5e:	f10a 0308 	add.w	r3, sl, #8
 8007a62:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007a64:	6013      	str	r3, [r2, #0]
 8007a66:	4650      	mov	r0, sl
 8007a68:	b017      	add	sp, #92	@ 0x5c
 8007a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6e:	9b07      	ldr	r3, [sp, #28]
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	f77f ae2e 	ble.w	80076d2 <_dtoa_r+0x7ba>
 8007a76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a78:	9308      	str	r3, [sp, #32]
 8007a7a:	2001      	movs	r0, #1
 8007a7c:	e64d      	b.n	800771a <_dtoa_r+0x802>
 8007a7e:	f1bb 0f00 	cmp.w	fp, #0
 8007a82:	f77f aed9 	ble.w	8007838 <_dtoa_r+0x920>
 8007a86:	4656      	mov	r6, sl
 8007a88:	9802      	ldr	r0, [sp, #8]
 8007a8a:	4621      	mov	r1, r4
 8007a8c:	f7ff f9ba 	bl	8006e04 <quorem>
 8007a90:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007a94:	f806 3b01 	strb.w	r3, [r6], #1
 8007a98:	eba6 020a 	sub.w	r2, r6, sl
 8007a9c:	4593      	cmp	fp, r2
 8007a9e:	ddb4      	ble.n	8007a0a <_dtoa_r+0xaf2>
 8007aa0:	9902      	ldr	r1, [sp, #8]
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	220a      	movs	r2, #10
 8007aa6:	4648      	mov	r0, r9
 8007aa8:	f000 fcb4 	bl	8008414 <__multadd>
 8007aac:	9002      	str	r0, [sp, #8]
 8007aae:	e7eb      	b.n	8007a88 <_dtoa_r+0xb70>
 8007ab0:	0800e873 	.word	0x0800e873
 8007ab4:	0800e7f7 	.word	0x0800e7f7

08007ab8 <_free_r>:
 8007ab8:	b538      	push	{r3, r4, r5, lr}
 8007aba:	4605      	mov	r5, r0
 8007abc:	2900      	cmp	r1, #0
 8007abe:	d041      	beq.n	8007b44 <_free_r+0x8c>
 8007ac0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ac4:	1f0c      	subs	r4, r1, #4
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	bfb8      	it	lt
 8007aca:	18e4      	addlt	r4, r4, r3
 8007acc:	f000 fc34 	bl	8008338 <__malloc_lock>
 8007ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8007b48 <_free_r+0x90>)
 8007ad2:	6813      	ldr	r3, [r2, #0]
 8007ad4:	b933      	cbnz	r3, 8007ae4 <_free_r+0x2c>
 8007ad6:	6063      	str	r3, [r4, #4]
 8007ad8:	6014      	str	r4, [r2, #0]
 8007ada:	4628      	mov	r0, r5
 8007adc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ae0:	f000 bc30 	b.w	8008344 <__malloc_unlock>
 8007ae4:	42a3      	cmp	r3, r4
 8007ae6:	d908      	bls.n	8007afa <_free_r+0x42>
 8007ae8:	6820      	ldr	r0, [r4, #0]
 8007aea:	1821      	adds	r1, r4, r0
 8007aec:	428b      	cmp	r3, r1
 8007aee:	bf01      	itttt	eq
 8007af0:	6819      	ldreq	r1, [r3, #0]
 8007af2:	685b      	ldreq	r3, [r3, #4]
 8007af4:	1809      	addeq	r1, r1, r0
 8007af6:	6021      	streq	r1, [r4, #0]
 8007af8:	e7ed      	b.n	8007ad6 <_free_r+0x1e>
 8007afa:	461a      	mov	r2, r3
 8007afc:	685b      	ldr	r3, [r3, #4]
 8007afe:	b10b      	cbz	r3, 8007b04 <_free_r+0x4c>
 8007b00:	42a3      	cmp	r3, r4
 8007b02:	d9fa      	bls.n	8007afa <_free_r+0x42>
 8007b04:	6811      	ldr	r1, [r2, #0]
 8007b06:	1850      	adds	r0, r2, r1
 8007b08:	42a0      	cmp	r0, r4
 8007b0a:	d10b      	bne.n	8007b24 <_free_r+0x6c>
 8007b0c:	6820      	ldr	r0, [r4, #0]
 8007b0e:	4401      	add	r1, r0
 8007b10:	1850      	adds	r0, r2, r1
 8007b12:	4283      	cmp	r3, r0
 8007b14:	6011      	str	r1, [r2, #0]
 8007b16:	d1e0      	bne.n	8007ada <_free_r+0x22>
 8007b18:	6818      	ldr	r0, [r3, #0]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	6053      	str	r3, [r2, #4]
 8007b1e:	4408      	add	r0, r1
 8007b20:	6010      	str	r0, [r2, #0]
 8007b22:	e7da      	b.n	8007ada <_free_r+0x22>
 8007b24:	d902      	bls.n	8007b2c <_free_r+0x74>
 8007b26:	230c      	movs	r3, #12
 8007b28:	602b      	str	r3, [r5, #0]
 8007b2a:	e7d6      	b.n	8007ada <_free_r+0x22>
 8007b2c:	6820      	ldr	r0, [r4, #0]
 8007b2e:	1821      	adds	r1, r4, r0
 8007b30:	428b      	cmp	r3, r1
 8007b32:	bf04      	itt	eq
 8007b34:	6819      	ldreq	r1, [r3, #0]
 8007b36:	685b      	ldreq	r3, [r3, #4]
 8007b38:	6063      	str	r3, [r4, #4]
 8007b3a:	bf04      	itt	eq
 8007b3c:	1809      	addeq	r1, r1, r0
 8007b3e:	6021      	streq	r1, [r4, #0]
 8007b40:	6054      	str	r4, [r2, #4]
 8007b42:	e7ca      	b.n	8007ada <_free_r+0x22>
 8007b44:	bd38      	pop	{r3, r4, r5, pc}
 8007b46:	bf00      	nop
 8007b48:	20000cdc 	.word	0x20000cdc

08007b4c <rshift>:
 8007b4c:	6903      	ldr	r3, [r0, #16]
 8007b4e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007b52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b56:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007b5a:	f100 0414 	add.w	r4, r0, #20
 8007b5e:	dd45      	ble.n	8007bec <rshift+0xa0>
 8007b60:	f011 011f 	ands.w	r1, r1, #31
 8007b64:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007b68:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007b6c:	d10c      	bne.n	8007b88 <rshift+0x3c>
 8007b6e:	f100 0710 	add.w	r7, r0, #16
 8007b72:	4629      	mov	r1, r5
 8007b74:	42b1      	cmp	r1, r6
 8007b76:	d334      	bcc.n	8007be2 <rshift+0x96>
 8007b78:	1a9b      	subs	r3, r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	1eea      	subs	r2, r5, #3
 8007b7e:	4296      	cmp	r6, r2
 8007b80:	bf38      	it	cc
 8007b82:	2300      	movcc	r3, #0
 8007b84:	4423      	add	r3, r4
 8007b86:	e015      	b.n	8007bb4 <rshift+0x68>
 8007b88:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007b8c:	f1c1 0820 	rsb	r8, r1, #32
 8007b90:	40cf      	lsrs	r7, r1
 8007b92:	f105 0e04 	add.w	lr, r5, #4
 8007b96:	46a1      	mov	r9, r4
 8007b98:	4576      	cmp	r6, lr
 8007b9a:	46f4      	mov	ip, lr
 8007b9c:	d815      	bhi.n	8007bca <rshift+0x7e>
 8007b9e:	1a9a      	subs	r2, r3, r2
 8007ba0:	0092      	lsls	r2, r2, #2
 8007ba2:	3a04      	subs	r2, #4
 8007ba4:	3501      	adds	r5, #1
 8007ba6:	42ae      	cmp	r6, r5
 8007ba8:	bf38      	it	cc
 8007baa:	2200      	movcc	r2, #0
 8007bac:	18a3      	adds	r3, r4, r2
 8007bae:	50a7      	str	r7, [r4, r2]
 8007bb0:	b107      	cbz	r7, 8007bb4 <rshift+0x68>
 8007bb2:	3304      	adds	r3, #4
 8007bb4:	1b1a      	subs	r2, r3, r4
 8007bb6:	42a3      	cmp	r3, r4
 8007bb8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007bbc:	bf08      	it	eq
 8007bbe:	2300      	moveq	r3, #0
 8007bc0:	6102      	str	r2, [r0, #16]
 8007bc2:	bf08      	it	eq
 8007bc4:	6143      	streq	r3, [r0, #20]
 8007bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bca:	f8dc c000 	ldr.w	ip, [ip]
 8007bce:	fa0c fc08 	lsl.w	ip, ip, r8
 8007bd2:	ea4c 0707 	orr.w	r7, ip, r7
 8007bd6:	f849 7b04 	str.w	r7, [r9], #4
 8007bda:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007bde:	40cf      	lsrs	r7, r1
 8007be0:	e7da      	b.n	8007b98 <rshift+0x4c>
 8007be2:	f851 cb04 	ldr.w	ip, [r1], #4
 8007be6:	f847 cf04 	str.w	ip, [r7, #4]!
 8007bea:	e7c3      	b.n	8007b74 <rshift+0x28>
 8007bec:	4623      	mov	r3, r4
 8007bee:	e7e1      	b.n	8007bb4 <rshift+0x68>

08007bf0 <__hexdig_fun>:
 8007bf0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007bf4:	2b09      	cmp	r3, #9
 8007bf6:	d802      	bhi.n	8007bfe <__hexdig_fun+0xe>
 8007bf8:	3820      	subs	r0, #32
 8007bfa:	b2c0      	uxtb	r0, r0
 8007bfc:	4770      	bx	lr
 8007bfe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007c02:	2b05      	cmp	r3, #5
 8007c04:	d801      	bhi.n	8007c0a <__hexdig_fun+0x1a>
 8007c06:	3847      	subs	r0, #71	@ 0x47
 8007c08:	e7f7      	b.n	8007bfa <__hexdig_fun+0xa>
 8007c0a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007c0e:	2b05      	cmp	r3, #5
 8007c10:	d801      	bhi.n	8007c16 <__hexdig_fun+0x26>
 8007c12:	3827      	subs	r0, #39	@ 0x27
 8007c14:	e7f1      	b.n	8007bfa <__hexdig_fun+0xa>
 8007c16:	2000      	movs	r0, #0
 8007c18:	4770      	bx	lr
	...

08007c1c <__gethex>:
 8007c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c20:	b085      	sub	sp, #20
 8007c22:	468a      	mov	sl, r1
 8007c24:	9302      	str	r3, [sp, #8]
 8007c26:	680b      	ldr	r3, [r1, #0]
 8007c28:	9001      	str	r0, [sp, #4]
 8007c2a:	4690      	mov	r8, r2
 8007c2c:	1c9c      	adds	r4, r3, #2
 8007c2e:	46a1      	mov	r9, r4
 8007c30:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007c34:	2830      	cmp	r0, #48	@ 0x30
 8007c36:	d0fa      	beq.n	8007c2e <__gethex+0x12>
 8007c38:	eba9 0303 	sub.w	r3, r9, r3
 8007c3c:	f1a3 0b02 	sub.w	fp, r3, #2
 8007c40:	f7ff ffd6 	bl	8007bf0 <__hexdig_fun>
 8007c44:	4605      	mov	r5, r0
 8007c46:	2800      	cmp	r0, #0
 8007c48:	d168      	bne.n	8007d1c <__gethex+0x100>
 8007c4a:	49a0      	ldr	r1, [pc, #640]	@ (8007ecc <__gethex+0x2b0>)
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	4648      	mov	r0, r9
 8007c50:	f7ff f807 	bl	8006c62 <strncmp>
 8007c54:	4607      	mov	r7, r0
 8007c56:	2800      	cmp	r0, #0
 8007c58:	d167      	bne.n	8007d2a <__gethex+0x10e>
 8007c5a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007c5e:	4626      	mov	r6, r4
 8007c60:	f7ff ffc6 	bl	8007bf0 <__hexdig_fun>
 8007c64:	2800      	cmp	r0, #0
 8007c66:	d062      	beq.n	8007d2e <__gethex+0x112>
 8007c68:	4623      	mov	r3, r4
 8007c6a:	7818      	ldrb	r0, [r3, #0]
 8007c6c:	2830      	cmp	r0, #48	@ 0x30
 8007c6e:	4699      	mov	r9, r3
 8007c70:	f103 0301 	add.w	r3, r3, #1
 8007c74:	d0f9      	beq.n	8007c6a <__gethex+0x4e>
 8007c76:	f7ff ffbb 	bl	8007bf0 <__hexdig_fun>
 8007c7a:	fab0 f580 	clz	r5, r0
 8007c7e:	096d      	lsrs	r5, r5, #5
 8007c80:	f04f 0b01 	mov.w	fp, #1
 8007c84:	464a      	mov	r2, r9
 8007c86:	4616      	mov	r6, r2
 8007c88:	3201      	adds	r2, #1
 8007c8a:	7830      	ldrb	r0, [r6, #0]
 8007c8c:	f7ff ffb0 	bl	8007bf0 <__hexdig_fun>
 8007c90:	2800      	cmp	r0, #0
 8007c92:	d1f8      	bne.n	8007c86 <__gethex+0x6a>
 8007c94:	498d      	ldr	r1, [pc, #564]	@ (8007ecc <__gethex+0x2b0>)
 8007c96:	2201      	movs	r2, #1
 8007c98:	4630      	mov	r0, r6
 8007c9a:	f7fe ffe2 	bl	8006c62 <strncmp>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d13f      	bne.n	8007d22 <__gethex+0x106>
 8007ca2:	b944      	cbnz	r4, 8007cb6 <__gethex+0x9a>
 8007ca4:	1c74      	adds	r4, r6, #1
 8007ca6:	4622      	mov	r2, r4
 8007ca8:	4616      	mov	r6, r2
 8007caa:	3201      	adds	r2, #1
 8007cac:	7830      	ldrb	r0, [r6, #0]
 8007cae:	f7ff ff9f 	bl	8007bf0 <__hexdig_fun>
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d1f8      	bne.n	8007ca8 <__gethex+0x8c>
 8007cb6:	1ba4      	subs	r4, r4, r6
 8007cb8:	00a7      	lsls	r7, r4, #2
 8007cba:	7833      	ldrb	r3, [r6, #0]
 8007cbc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007cc0:	2b50      	cmp	r3, #80	@ 0x50
 8007cc2:	d13e      	bne.n	8007d42 <__gethex+0x126>
 8007cc4:	7873      	ldrb	r3, [r6, #1]
 8007cc6:	2b2b      	cmp	r3, #43	@ 0x2b
 8007cc8:	d033      	beq.n	8007d32 <__gethex+0x116>
 8007cca:	2b2d      	cmp	r3, #45	@ 0x2d
 8007ccc:	d034      	beq.n	8007d38 <__gethex+0x11c>
 8007cce:	1c71      	adds	r1, r6, #1
 8007cd0:	2400      	movs	r4, #0
 8007cd2:	7808      	ldrb	r0, [r1, #0]
 8007cd4:	f7ff ff8c 	bl	8007bf0 <__hexdig_fun>
 8007cd8:	1e43      	subs	r3, r0, #1
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	2b18      	cmp	r3, #24
 8007cde:	d830      	bhi.n	8007d42 <__gethex+0x126>
 8007ce0:	f1a0 0210 	sub.w	r2, r0, #16
 8007ce4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007ce8:	f7ff ff82 	bl	8007bf0 <__hexdig_fun>
 8007cec:	f100 3cff 	add.w	ip, r0, #4294967295
 8007cf0:	fa5f fc8c 	uxtb.w	ip, ip
 8007cf4:	f1bc 0f18 	cmp.w	ip, #24
 8007cf8:	f04f 030a 	mov.w	r3, #10
 8007cfc:	d91e      	bls.n	8007d3c <__gethex+0x120>
 8007cfe:	b104      	cbz	r4, 8007d02 <__gethex+0xe6>
 8007d00:	4252      	negs	r2, r2
 8007d02:	4417      	add	r7, r2
 8007d04:	f8ca 1000 	str.w	r1, [sl]
 8007d08:	b1ed      	cbz	r5, 8007d46 <__gethex+0x12a>
 8007d0a:	f1bb 0f00 	cmp.w	fp, #0
 8007d0e:	bf0c      	ite	eq
 8007d10:	2506      	moveq	r5, #6
 8007d12:	2500      	movne	r5, #0
 8007d14:	4628      	mov	r0, r5
 8007d16:	b005      	add	sp, #20
 8007d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1c:	2500      	movs	r5, #0
 8007d1e:	462c      	mov	r4, r5
 8007d20:	e7b0      	b.n	8007c84 <__gethex+0x68>
 8007d22:	2c00      	cmp	r4, #0
 8007d24:	d1c7      	bne.n	8007cb6 <__gethex+0x9a>
 8007d26:	4627      	mov	r7, r4
 8007d28:	e7c7      	b.n	8007cba <__gethex+0x9e>
 8007d2a:	464e      	mov	r6, r9
 8007d2c:	462f      	mov	r7, r5
 8007d2e:	2501      	movs	r5, #1
 8007d30:	e7c3      	b.n	8007cba <__gethex+0x9e>
 8007d32:	2400      	movs	r4, #0
 8007d34:	1cb1      	adds	r1, r6, #2
 8007d36:	e7cc      	b.n	8007cd2 <__gethex+0xb6>
 8007d38:	2401      	movs	r4, #1
 8007d3a:	e7fb      	b.n	8007d34 <__gethex+0x118>
 8007d3c:	fb03 0002 	mla	r0, r3, r2, r0
 8007d40:	e7ce      	b.n	8007ce0 <__gethex+0xc4>
 8007d42:	4631      	mov	r1, r6
 8007d44:	e7de      	b.n	8007d04 <__gethex+0xe8>
 8007d46:	eba6 0309 	sub.w	r3, r6, r9
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	4629      	mov	r1, r5
 8007d4e:	2b07      	cmp	r3, #7
 8007d50:	dc0a      	bgt.n	8007d68 <__gethex+0x14c>
 8007d52:	9801      	ldr	r0, [sp, #4]
 8007d54:	f000 fafc 	bl	8008350 <_Balloc>
 8007d58:	4604      	mov	r4, r0
 8007d5a:	b940      	cbnz	r0, 8007d6e <__gethex+0x152>
 8007d5c:	4b5c      	ldr	r3, [pc, #368]	@ (8007ed0 <__gethex+0x2b4>)
 8007d5e:	4602      	mov	r2, r0
 8007d60:	21e4      	movs	r1, #228	@ 0xe4
 8007d62:	485c      	ldr	r0, [pc, #368]	@ (8007ed4 <__gethex+0x2b8>)
 8007d64:	f001 fa54 	bl	8009210 <__assert_func>
 8007d68:	3101      	adds	r1, #1
 8007d6a:	105b      	asrs	r3, r3, #1
 8007d6c:	e7ef      	b.n	8007d4e <__gethex+0x132>
 8007d6e:	f100 0a14 	add.w	sl, r0, #20
 8007d72:	2300      	movs	r3, #0
 8007d74:	4655      	mov	r5, sl
 8007d76:	469b      	mov	fp, r3
 8007d78:	45b1      	cmp	r9, r6
 8007d7a:	d337      	bcc.n	8007dec <__gethex+0x1d0>
 8007d7c:	f845 bb04 	str.w	fp, [r5], #4
 8007d80:	eba5 050a 	sub.w	r5, r5, sl
 8007d84:	10ad      	asrs	r5, r5, #2
 8007d86:	6125      	str	r5, [r4, #16]
 8007d88:	4658      	mov	r0, fp
 8007d8a:	f000 fbd3 	bl	8008534 <__hi0bits>
 8007d8e:	016d      	lsls	r5, r5, #5
 8007d90:	f8d8 6000 	ldr.w	r6, [r8]
 8007d94:	1a2d      	subs	r5, r5, r0
 8007d96:	42b5      	cmp	r5, r6
 8007d98:	dd54      	ble.n	8007e44 <__gethex+0x228>
 8007d9a:	1bad      	subs	r5, r5, r6
 8007d9c:	4629      	mov	r1, r5
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f000 ff5f 	bl	8008c62 <__any_on>
 8007da4:	4681      	mov	r9, r0
 8007da6:	b178      	cbz	r0, 8007dc8 <__gethex+0x1ac>
 8007da8:	1e6b      	subs	r3, r5, #1
 8007daa:	1159      	asrs	r1, r3, #5
 8007dac:	f003 021f 	and.w	r2, r3, #31
 8007db0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007db4:	f04f 0901 	mov.w	r9, #1
 8007db8:	fa09 f202 	lsl.w	r2, r9, r2
 8007dbc:	420a      	tst	r2, r1
 8007dbe:	d003      	beq.n	8007dc8 <__gethex+0x1ac>
 8007dc0:	454b      	cmp	r3, r9
 8007dc2:	dc36      	bgt.n	8007e32 <__gethex+0x216>
 8007dc4:	f04f 0902 	mov.w	r9, #2
 8007dc8:	4629      	mov	r1, r5
 8007dca:	4620      	mov	r0, r4
 8007dcc:	f7ff febe 	bl	8007b4c <rshift>
 8007dd0:	442f      	add	r7, r5
 8007dd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007dd6:	42bb      	cmp	r3, r7
 8007dd8:	da42      	bge.n	8007e60 <__gethex+0x244>
 8007dda:	9801      	ldr	r0, [sp, #4]
 8007ddc:	4621      	mov	r1, r4
 8007dde:	f000 faf7 	bl	80083d0 <_Bfree>
 8007de2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007de4:	2300      	movs	r3, #0
 8007de6:	6013      	str	r3, [r2, #0]
 8007de8:	25a3      	movs	r5, #163	@ 0xa3
 8007dea:	e793      	b.n	8007d14 <__gethex+0xf8>
 8007dec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007df0:	2a2e      	cmp	r2, #46	@ 0x2e
 8007df2:	d012      	beq.n	8007e1a <__gethex+0x1fe>
 8007df4:	2b20      	cmp	r3, #32
 8007df6:	d104      	bne.n	8007e02 <__gethex+0x1e6>
 8007df8:	f845 bb04 	str.w	fp, [r5], #4
 8007dfc:	f04f 0b00 	mov.w	fp, #0
 8007e00:	465b      	mov	r3, fp
 8007e02:	7830      	ldrb	r0, [r6, #0]
 8007e04:	9303      	str	r3, [sp, #12]
 8007e06:	f7ff fef3 	bl	8007bf0 <__hexdig_fun>
 8007e0a:	9b03      	ldr	r3, [sp, #12]
 8007e0c:	f000 000f 	and.w	r0, r0, #15
 8007e10:	4098      	lsls	r0, r3
 8007e12:	ea4b 0b00 	orr.w	fp, fp, r0
 8007e16:	3304      	adds	r3, #4
 8007e18:	e7ae      	b.n	8007d78 <__gethex+0x15c>
 8007e1a:	45b1      	cmp	r9, r6
 8007e1c:	d8ea      	bhi.n	8007df4 <__gethex+0x1d8>
 8007e1e:	492b      	ldr	r1, [pc, #172]	@ (8007ecc <__gethex+0x2b0>)
 8007e20:	9303      	str	r3, [sp, #12]
 8007e22:	2201      	movs	r2, #1
 8007e24:	4630      	mov	r0, r6
 8007e26:	f7fe ff1c 	bl	8006c62 <strncmp>
 8007e2a:	9b03      	ldr	r3, [sp, #12]
 8007e2c:	2800      	cmp	r0, #0
 8007e2e:	d1e1      	bne.n	8007df4 <__gethex+0x1d8>
 8007e30:	e7a2      	b.n	8007d78 <__gethex+0x15c>
 8007e32:	1ea9      	subs	r1, r5, #2
 8007e34:	4620      	mov	r0, r4
 8007e36:	f000 ff14 	bl	8008c62 <__any_on>
 8007e3a:	2800      	cmp	r0, #0
 8007e3c:	d0c2      	beq.n	8007dc4 <__gethex+0x1a8>
 8007e3e:	f04f 0903 	mov.w	r9, #3
 8007e42:	e7c1      	b.n	8007dc8 <__gethex+0x1ac>
 8007e44:	da09      	bge.n	8007e5a <__gethex+0x23e>
 8007e46:	1b75      	subs	r5, r6, r5
 8007e48:	4621      	mov	r1, r4
 8007e4a:	9801      	ldr	r0, [sp, #4]
 8007e4c:	462a      	mov	r2, r5
 8007e4e:	f000 fccf 	bl	80087f0 <__lshift>
 8007e52:	1b7f      	subs	r7, r7, r5
 8007e54:	4604      	mov	r4, r0
 8007e56:	f100 0a14 	add.w	sl, r0, #20
 8007e5a:	f04f 0900 	mov.w	r9, #0
 8007e5e:	e7b8      	b.n	8007dd2 <__gethex+0x1b6>
 8007e60:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007e64:	42bd      	cmp	r5, r7
 8007e66:	dd6f      	ble.n	8007f48 <__gethex+0x32c>
 8007e68:	1bed      	subs	r5, r5, r7
 8007e6a:	42ae      	cmp	r6, r5
 8007e6c:	dc34      	bgt.n	8007ed8 <__gethex+0x2bc>
 8007e6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d022      	beq.n	8007ebc <__gethex+0x2a0>
 8007e76:	2b03      	cmp	r3, #3
 8007e78:	d024      	beq.n	8007ec4 <__gethex+0x2a8>
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d115      	bne.n	8007eaa <__gethex+0x28e>
 8007e7e:	42ae      	cmp	r6, r5
 8007e80:	d113      	bne.n	8007eaa <__gethex+0x28e>
 8007e82:	2e01      	cmp	r6, #1
 8007e84:	d10b      	bne.n	8007e9e <__gethex+0x282>
 8007e86:	9a02      	ldr	r2, [sp, #8]
 8007e88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007e8c:	6013      	str	r3, [r2, #0]
 8007e8e:	2301      	movs	r3, #1
 8007e90:	6123      	str	r3, [r4, #16]
 8007e92:	f8ca 3000 	str.w	r3, [sl]
 8007e96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e98:	2562      	movs	r5, #98	@ 0x62
 8007e9a:	601c      	str	r4, [r3, #0]
 8007e9c:	e73a      	b.n	8007d14 <__gethex+0xf8>
 8007e9e:	1e71      	subs	r1, r6, #1
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f000 fede 	bl	8008c62 <__any_on>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d1ed      	bne.n	8007e86 <__gethex+0x26a>
 8007eaa:	9801      	ldr	r0, [sp, #4]
 8007eac:	4621      	mov	r1, r4
 8007eae:	f000 fa8f 	bl	80083d0 <_Bfree>
 8007eb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	6013      	str	r3, [r2, #0]
 8007eb8:	2550      	movs	r5, #80	@ 0x50
 8007eba:	e72b      	b.n	8007d14 <__gethex+0xf8>
 8007ebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d1f3      	bne.n	8007eaa <__gethex+0x28e>
 8007ec2:	e7e0      	b.n	8007e86 <__gethex+0x26a>
 8007ec4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1dd      	bne.n	8007e86 <__gethex+0x26a>
 8007eca:	e7ee      	b.n	8007eaa <__gethex+0x28e>
 8007ecc:	0800e7b4 	.word	0x0800e7b4
 8007ed0:	0800e873 	.word	0x0800e873
 8007ed4:	0800e884 	.word	0x0800e884
 8007ed8:	1e6f      	subs	r7, r5, #1
 8007eda:	f1b9 0f00 	cmp.w	r9, #0
 8007ede:	d130      	bne.n	8007f42 <__gethex+0x326>
 8007ee0:	b127      	cbz	r7, 8007eec <__gethex+0x2d0>
 8007ee2:	4639      	mov	r1, r7
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f000 febc 	bl	8008c62 <__any_on>
 8007eea:	4681      	mov	r9, r0
 8007eec:	117a      	asrs	r2, r7, #5
 8007eee:	2301      	movs	r3, #1
 8007ef0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007ef4:	f007 071f 	and.w	r7, r7, #31
 8007ef8:	40bb      	lsls	r3, r7
 8007efa:	4213      	tst	r3, r2
 8007efc:	4629      	mov	r1, r5
 8007efe:	4620      	mov	r0, r4
 8007f00:	bf18      	it	ne
 8007f02:	f049 0902 	orrne.w	r9, r9, #2
 8007f06:	f7ff fe21 	bl	8007b4c <rshift>
 8007f0a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007f0e:	1b76      	subs	r6, r6, r5
 8007f10:	2502      	movs	r5, #2
 8007f12:	f1b9 0f00 	cmp.w	r9, #0
 8007f16:	d047      	beq.n	8007fa8 <__gethex+0x38c>
 8007f18:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d015      	beq.n	8007f4c <__gethex+0x330>
 8007f20:	2b03      	cmp	r3, #3
 8007f22:	d017      	beq.n	8007f54 <__gethex+0x338>
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d109      	bne.n	8007f3c <__gethex+0x320>
 8007f28:	f019 0f02 	tst.w	r9, #2
 8007f2c:	d006      	beq.n	8007f3c <__gethex+0x320>
 8007f2e:	f8da 3000 	ldr.w	r3, [sl]
 8007f32:	ea49 0903 	orr.w	r9, r9, r3
 8007f36:	f019 0f01 	tst.w	r9, #1
 8007f3a:	d10e      	bne.n	8007f5a <__gethex+0x33e>
 8007f3c:	f045 0510 	orr.w	r5, r5, #16
 8007f40:	e032      	b.n	8007fa8 <__gethex+0x38c>
 8007f42:	f04f 0901 	mov.w	r9, #1
 8007f46:	e7d1      	b.n	8007eec <__gethex+0x2d0>
 8007f48:	2501      	movs	r5, #1
 8007f4a:	e7e2      	b.n	8007f12 <__gethex+0x2f6>
 8007f4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f4e:	f1c3 0301 	rsb	r3, r3, #1
 8007f52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d0f0      	beq.n	8007f3c <__gethex+0x320>
 8007f5a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007f5e:	f104 0314 	add.w	r3, r4, #20
 8007f62:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007f66:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007f6a:	f04f 0c00 	mov.w	ip, #0
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f74:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007f78:	d01b      	beq.n	8007fb2 <__gethex+0x396>
 8007f7a:	3201      	adds	r2, #1
 8007f7c:	6002      	str	r2, [r0, #0]
 8007f7e:	2d02      	cmp	r5, #2
 8007f80:	f104 0314 	add.w	r3, r4, #20
 8007f84:	d13c      	bne.n	8008000 <__gethex+0x3e4>
 8007f86:	f8d8 2000 	ldr.w	r2, [r8]
 8007f8a:	3a01      	subs	r2, #1
 8007f8c:	42b2      	cmp	r2, r6
 8007f8e:	d109      	bne.n	8007fa4 <__gethex+0x388>
 8007f90:	1171      	asrs	r1, r6, #5
 8007f92:	2201      	movs	r2, #1
 8007f94:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007f98:	f006 061f 	and.w	r6, r6, #31
 8007f9c:	fa02 f606 	lsl.w	r6, r2, r6
 8007fa0:	421e      	tst	r6, r3
 8007fa2:	d13a      	bne.n	800801a <__gethex+0x3fe>
 8007fa4:	f045 0520 	orr.w	r5, r5, #32
 8007fa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007faa:	601c      	str	r4, [r3, #0]
 8007fac:	9b02      	ldr	r3, [sp, #8]
 8007fae:	601f      	str	r7, [r3, #0]
 8007fb0:	e6b0      	b.n	8007d14 <__gethex+0xf8>
 8007fb2:	4299      	cmp	r1, r3
 8007fb4:	f843 cc04 	str.w	ip, [r3, #-4]
 8007fb8:	d8d9      	bhi.n	8007f6e <__gethex+0x352>
 8007fba:	68a3      	ldr	r3, [r4, #8]
 8007fbc:	459b      	cmp	fp, r3
 8007fbe:	db17      	blt.n	8007ff0 <__gethex+0x3d4>
 8007fc0:	6861      	ldr	r1, [r4, #4]
 8007fc2:	9801      	ldr	r0, [sp, #4]
 8007fc4:	3101      	adds	r1, #1
 8007fc6:	f000 f9c3 	bl	8008350 <_Balloc>
 8007fca:	4681      	mov	r9, r0
 8007fcc:	b918      	cbnz	r0, 8007fd6 <__gethex+0x3ba>
 8007fce:	4b1a      	ldr	r3, [pc, #104]	@ (8008038 <__gethex+0x41c>)
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	2184      	movs	r1, #132	@ 0x84
 8007fd4:	e6c5      	b.n	8007d62 <__gethex+0x146>
 8007fd6:	6922      	ldr	r2, [r4, #16]
 8007fd8:	3202      	adds	r2, #2
 8007fda:	f104 010c 	add.w	r1, r4, #12
 8007fde:	0092      	lsls	r2, r2, #2
 8007fe0:	300c      	adds	r0, #12
 8007fe2:	f7fe fef2 	bl	8006dca <memcpy>
 8007fe6:	4621      	mov	r1, r4
 8007fe8:	9801      	ldr	r0, [sp, #4]
 8007fea:	f000 f9f1 	bl	80083d0 <_Bfree>
 8007fee:	464c      	mov	r4, r9
 8007ff0:	6923      	ldr	r3, [r4, #16]
 8007ff2:	1c5a      	adds	r2, r3, #1
 8007ff4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ff8:	6122      	str	r2, [r4, #16]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	615a      	str	r2, [r3, #20]
 8007ffe:	e7be      	b.n	8007f7e <__gethex+0x362>
 8008000:	6922      	ldr	r2, [r4, #16]
 8008002:	455a      	cmp	r2, fp
 8008004:	dd0b      	ble.n	800801e <__gethex+0x402>
 8008006:	2101      	movs	r1, #1
 8008008:	4620      	mov	r0, r4
 800800a:	f7ff fd9f 	bl	8007b4c <rshift>
 800800e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008012:	3701      	adds	r7, #1
 8008014:	42bb      	cmp	r3, r7
 8008016:	f6ff aee0 	blt.w	8007dda <__gethex+0x1be>
 800801a:	2501      	movs	r5, #1
 800801c:	e7c2      	b.n	8007fa4 <__gethex+0x388>
 800801e:	f016 061f 	ands.w	r6, r6, #31
 8008022:	d0fa      	beq.n	800801a <__gethex+0x3fe>
 8008024:	4453      	add	r3, sl
 8008026:	f1c6 0620 	rsb	r6, r6, #32
 800802a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800802e:	f000 fa81 	bl	8008534 <__hi0bits>
 8008032:	42b0      	cmp	r0, r6
 8008034:	dbe7      	blt.n	8008006 <__gethex+0x3ea>
 8008036:	e7f0      	b.n	800801a <__gethex+0x3fe>
 8008038:	0800e873 	.word	0x0800e873

0800803c <L_shift>:
 800803c:	f1c2 0208 	rsb	r2, r2, #8
 8008040:	0092      	lsls	r2, r2, #2
 8008042:	b570      	push	{r4, r5, r6, lr}
 8008044:	f1c2 0620 	rsb	r6, r2, #32
 8008048:	6843      	ldr	r3, [r0, #4]
 800804a:	6804      	ldr	r4, [r0, #0]
 800804c:	fa03 f506 	lsl.w	r5, r3, r6
 8008050:	432c      	orrs	r4, r5
 8008052:	40d3      	lsrs	r3, r2
 8008054:	6004      	str	r4, [r0, #0]
 8008056:	f840 3f04 	str.w	r3, [r0, #4]!
 800805a:	4288      	cmp	r0, r1
 800805c:	d3f4      	bcc.n	8008048 <L_shift+0xc>
 800805e:	bd70      	pop	{r4, r5, r6, pc}

08008060 <__match>:
 8008060:	b530      	push	{r4, r5, lr}
 8008062:	6803      	ldr	r3, [r0, #0]
 8008064:	3301      	adds	r3, #1
 8008066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800806a:	b914      	cbnz	r4, 8008072 <__match+0x12>
 800806c:	6003      	str	r3, [r0, #0]
 800806e:	2001      	movs	r0, #1
 8008070:	bd30      	pop	{r4, r5, pc}
 8008072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008076:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800807a:	2d19      	cmp	r5, #25
 800807c:	bf98      	it	ls
 800807e:	3220      	addls	r2, #32
 8008080:	42a2      	cmp	r2, r4
 8008082:	d0f0      	beq.n	8008066 <__match+0x6>
 8008084:	2000      	movs	r0, #0
 8008086:	e7f3      	b.n	8008070 <__match+0x10>

08008088 <__hexnan>:
 8008088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808c:	680b      	ldr	r3, [r1, #0]
 800808e:	6801      	ldr	r1, [r0, #0]
 8008090:	115e      	asrs	r6, r3, #5
 8008092:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008096:	f013 031f 	ands.w	r3, r3, #31
 800809a:	b087      	sub	sp, #28
 800809c:	bf18      	it	ne
 800809e:	3604      	addne	r6, #4
 80080a0:	2500      	movs	r5, #0
 80080a2:	1f37      	subs	r7, r6, #4
 80080a4:	4682      	mov	sl, r0
 80080a6:	4690      	mov	r8, r2
 80080a8:	9301      	str	r3, [sp, #4]
 80080aa:	f846 5c04 	str.w	r5, [r6, #-4]
 80080ae:	46b9      	mov	r9, r7
 80080b0:	463c      	mov	r4, r7
 80080b2:	9502      	str	r5, [sp, #8]
 80080b4:	46ab      	mov	fp, r5
 80080b6:	784a      	ldrb	r2, [r1, #1]
 80080b8:	1c4b      	adds	r3, r1, #1
 80080ba:	9303      	str	r3, [sp, #12]
 80080bc:	b342      	cbz	r2, 8008110 <__hexnan+0x88>
 80080be:	4610      	mov	r0, r2
 80080c0:	9105      	str	r1, [sp, #20]
 80080c2:	9204      	str	r2, [sp, #16]
 80080c4:	f7ff fd94 	bl	8007bf0 <__hexdig_fun>
 80080c8:	2800      	cmp	r0, #0
 80080ca:	d151      	bne.n	8008170 <__hexnan+0xe8>
 80080cc:	9a04      	ldr	r2, [sp, #16]
 80080ce:	9905      	ldr	r1, [sp, #20]
 80080d0:	2a20      	cmp	r2, #32
 80080d2:	d818      	bhi.n	8008106 <__hexnan+0x7e>
 80080d4:	9b02      	ldr	r3, [sp, #8]
 80080d6:	459b      	cmp	fp, r3
 80080d8:	dd13      	ble.n	8008102 <__hexnan+0x7a>
 80080da:	454c      	cmp	r4, r9
 80080dc:	d206      	bcs.n	80080ec <__hexnan+0x64>
 80080de:	2d07      	cmp	r5, #7
 80080e0:	dc04      	bgt.n	80080ec <__hexnan+0x64>
 80080e2:	462a      	mov	r2, r5
 80080e4:	4649      	mov	r1, r9
 80080e6:	4620      	mov	r0, r4
 80080e8:	f7ff ffa8 	bl	800803c <L_shift>
 80080ec:	4544      	cmp	r4, r8
 80080ee:	d952      	bls.n	8008196 <__hexnan+0x10e>
 80080f0:	2300      	movs	r3, #0
 80080f2:	f1a4 0904 	sub.w	r9, r4, #4
 80080f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80080fa:	f8cd b008 	str.w	fp, [sp, #8]
 80080fe:	464c      	mov	r4, r9
 8008100:	461d      	mov	r5, r3
 8008102:	9903      	ldr	r1, [sp, #12]
 8008104:	e7d7      	b.n	80080b6 <__hexnan+0x2e>
 8008106:	2a29      	cmp	r2, #41	@ 0x29
 8008108:	d157      	bne.n	80081ba <__hexnan+0x132>
 800810a:	3102      	adds	r1, #2
 800810c:	f8ca 1000 	str.w	r1, [sl]
 8008110:	f1bb 0f00 	cmp.w	fp, #0
 8008114:	d051      	beq.n	80081ba <__hexnan+0x132>
 8008116:	454c      	cmp	r4, r9
 8008118:	d206      	bcs.n	8008128 <__hexnan+0xa0>
 800811a:	2d07      	cmp	r5, #7
 800811c:	dc04      	bgt.n	8008128 <__hexnan+0xa0>
 800811e:	462a      	mov	r2, r5
 8008120:	4649      	mov	r1, r9
 8008122:	4620      	mov	r0, r4
 8008124:	f7ff ff8a 	bl	800803c <L_shift>
 8008128:	4544      	cmp	r4, r8
 800812a:	d936      	bls.n	800819a <__hexnan+0x112>
 800812c:	f1a8 0204 	sub.w	r2, r8, #4
 8008130:	4623      	mov	r3, r4
 8008132:	f853 1b04 	ldr.w	r1, [r3], #4
 8008136:	f842 1f04 	str.w	r1, [r2, #4]!
 800813a:	429f      	cmp	r7, r3
 800813c:	d2f9      	bcs.n	8008132 <__hexnan+0xaa>
 800813e:	1b3b      	subs	r3, r7, r4
 8008140:	f023 0303 	bic.w	r3, r3, #3
 8008144:	3304      	adds	r3, #4
 8008146:	3401      	adds	r4, #1
 8008148:	3e03      	subs	r6, #3
 800814a:	42b4      	cmp	r4, r6
 800814c:	bf88      	it	hi
 800814e:	2304      	movhi	r3, #4
 8008150:	4443      	add	r3, r8
 8008152:	2200      	movs	r2, #0
 8008154:	f843 2b04 	str.w	r2, [r3], #4
 8008158:	429f      	cmp	r7, r3
 800815a:	d2fb      	bcs.n	8008154 <__hexnan+0xcc>
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	b91b      	cbnz	r3, 8008168 <__hexnan+0xe0>
 8008160:	4547      	cmp	r7, r8
 8008162:	d128      	bne.n	80081b6 <__hexnan+0x12e>
 8008164:	2301      	movs	r3, #1
 8008166:	603b      	str	r3, [r7, #0]
 8008168:	2005      	movs	r0, #5
 800816a:	b007      	add	sp, #28
 800816c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008170:	3501      	adds	r5, #1
 8008172:	2d08      	cmp	r5, #8
 8008174:	f10b 0b01 	add.w	fp, fp, #1
 8008178:	dd06      	ble.n	8008188 <__hexnan+0x100>
 800817a:	4544      	cmp	r4, r8
 800817c:	d9c1      	bls.n	8008102 <__hexnan+0x7a>
 800817e:	2300      	movs	r3, #0
 8008180:	f844 3c04 	str.w	r3, [r4, #-4]
 8008184:	2501      	movs	r5, #1
 8008186:	3c04      	subs	r4, #4
 8008188:	6822      	ldr	r2, [r4, #0]
 800818a:	f000 000f 	and.w	r0, r0, #15
 800818e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008192:	6020      	str	r0, [r4, #0]
 8008194:	e7b5      	b.n	8008102 <__hexnan+0x7a>
 8008196:	2508      	movs	r5, #8
 8008198:	e7b3      	b.n	8008102 <__hexnan+0x7a>
 800819a:	9b01      	ldr	r3, [sp, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d0dd      	beq.n	800815c <__hexnan+0xd4>
 80081a0:	f1c3 0320 	rsb	r3, r3, #32
 80081a4:	f04f 32ff 	mov.w	r2, #4294967295
 80081a8:	40da      	lsrs	r2, r3
 80081aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80081ae:	4013      	ands	r3, r2
 80081b0:	f846 3c04 	str.w	r3, [r6, #-4]
 80081b4:	e7d2      	b.n	800815c <__hexnan+0xd4>
 80081b6:	3f04      	subs	r7, #4
 80081b8:	e7d0      	b.n	800815c <__hexnan+0xd4>
 80081ba:	2004      	movs	r0, #4
 80081bc:	e7d5      	b.n	800816a <__hexnan+0xe2>
	...

080081c0 <malloc>:
 80081c0:	4b02      	ldr	r3, [pc, #8]	@ (80081cc <malloc+0xc>)
 80081c2:	4601      	mov	r1, r0
 80081c4:	6818      	ldr	r0, [r3, #0]
 80081c6:	f000 b825 	b.w	8008214 <_malloc_r>
 80081ca:	bf00      	nop
 80081cc:	200001a4 	.word	0x200001a4

080081d0 <sbrk_aligned>:
 80081d0:	b570      	push	{r4, r5, r6, lr}
 80081d2:	4e0f      	ldr	r6, [pc, #60]	@ (8008210 <sbrk_aligned+0x40>)
 80081d4:	460c      	mov	r4, r1
 80081d6:	6831      	ldr	r1, [r6, #0]
 80081d8:	4605      	mov	r5, r0
 80081da:	b911      	cbnz	r1, 80081e2 <sbrk_aligned+0x12>
 80081dc:	f001 f808 	bl	80091f0 <_sbrk_r>
 80081e0:	6030      	str	r0, [r6, #0]
 80081e2:	4621      	mov	r1, r4
 80081e4:	4628      	mov	r0, r5
 80081e6:	f001 f803 	bl	80091f0 <_sbrk_r>
 80081ea:	1c43      	adds	r3, r0, #1
 80081ec:	d103      	bne.n	80081f6 <sbrk_aligned+0x26>
 80081ee:	f04f 34ff 	mov.w	r4, #4294967295
 80081f2:	4620      	mov	r0, r4
 80081f4:	bd70      	pop	{r4, r5, r6, pc}
 80081f6:	1cc4      	adds	r4, r0, #3
 80081f8:	f024 0403 	bic.w	r4, r4, #3
 80081fc:	42a0      	cmp	r0, r4
 80081fe:	d0f8      	beq.n	80081f2 <sbrk_aligned+0x22>
 8008200:	1a21      	subs	r1, r4, r0
 8008202:	4628      	mov	r0, r5
 8008204:	f000 fff4 	bl	80091f0 <_sbrk_r>
 8008208:	3001      	adds	r0, #1
 800820a:	d1f2      	bne.n	80081f2 <sbrk_aligned+0x22>
 800820c:	e7ef      	b.n	80081ee <sbrk_aligned+0x1e>
 800820e:	bf00      	nop
 8008210:	20000cd8 	.word	0x20000cd8

08008214 <_malloc_r>:
 8008214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008218:	1ccd      	adds	r5, r1, #3
 800821a:	f025 0503 	bic.w	r5, r5, #3
 800821e:	3508      	adds	r5, #8
 8008220:	2d0c      	cmp	r5, #12
 8008222:	bf38      	it	cc
 8008224:	250c      	movcc	r5, #12
 8008226:	2d00      	cmp	r5, #0
 8008228:	4606      	mov	r6, r0
 800822a:	db01      	blt.n	8008230 <_malloc_r+0x1c>
 800822c:	42a9      	cmp	r1, r5
 800822e:	d904      	bls.n	800823a <_malloc_r+0x26>
 8008230:	230c      	movs	r3, #12
 8008232:	6033      	str	r3, [r6, #0]
 8008234:	2000      	movs	r0, #0
 8008236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800823a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008310 <_malloc_r+0xfc>
 800823e:	f000 f87b 	bl	8008338 <__malloc_lock>
 8008242:	f8d8 3000 	ldr.w	r3, [r8]
 8008246:	461c      	mov	r4, r3
 8008248:	bb44      	cbnz	r4, 800829c <_malloc_r+0x88>
 800824a:	4629      	mov	r1, r5
 800824c:	4630      	mov	r0, r6
 800824e:	f7ff ffbf 	bl	80081d0 <sbrk_aligned>
 8008252:	1c43      	adds	r3, r0, #1
 8008254:	4604      	mov	r4, r0
 8008256:	d158      	bne.n	800830a <_malloc_r+0xf6>
 8008258:	f8d8 4000 	ldr.w	r4, [r8]
 800825c:	4627      	mov	r7, r4
 800825e:	2f00      	cmp	r7, #0
 8008260:	d143      	bne.n	80082ea <_malloc_r+0xd6>
 8008262:	2c00      	cmp	r4, #0
 8008264:	d04b      	beq.n	80082fe <_malloc_r+0xea>
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	4639      	mov	r1, r7
 800826a:	4630      	mov	r0, r6
 800826c:	eb04 0903 	add.w	r9, r4, r3
 8008270:	f000 ffbe 	bl	80091f0 <_sbrk_r>
 8008274:	4581      	cmp	r9, r0
 8008276:	d142      	bne.n	80082fe <_malloc_r+0xea>
 8008278:	6821      	ldr	r1, [r4, #0]
 800827a:	1a6d      	subs	r5, r5, r1
 800827c:	4629      	mov	r1, r5
 800827e:	4630      	mov	r0, r6
 8008280:	f7ff ffa6 	bl	80081d0 <sbrk_aligned>
 8008284:	3001      	adds	r0, #1
 8008286:	d03a      	beq.n	80082fe <_malloc_r+0xea>
 8008288:	6823      	ldr	r3, [r4, #0]
 800828a:	442b      	add	r3, r5
 800828c:	6023      	str	r3, [r4, #0]
 800828e:	f8d8 3000 	ldr.w	r3, [r8]
 8008292:	685a      	ldr	r2, [r3, #4]
 8008294:	bb62      	cbnz	r2, 80082f0 <_malloc_r+0xdc>
 8008296:	f8c8 7000 	str.w	r7, [r8]
 800829a:	e00f      	b.n	80082bc <_malloc_r+0xa8>
 800829c:	6822      	ldr	r2, [r4, #0]
 800829e:	1b52      	subs	r2, r2, r5
 80082a0:	d420      	bmi.n	80082e4 <_malloc_r+0xd0>
 80082a2:	2a0b      	cmp	r2, #11
 80082a4:	d917      	bls.n	80082d6 <_malloc_r+0xc2>
 80082a6:	1961      	adds	r1, r4, r5
 80082a8:	42a3      	cmp	r3, r4
 80082aa:	6025      	str	r5, [r4, #0]
 80082ac:	bf18      	it	ne
 80082ae:	6059      	strne	r1, [r3, #4]
 80082b0:	6863      	ldr	r3, [r4, #4]
 80082b2:	bf08      	it	eq
 80082b4:	f8c8 1000 	streq.w	r1, [r8]
 80082b8:	5162      	str	r2, [r4, r5]
 80082ba:	604b      	str	r3, [r1, #4]
 80082bc:	4630      	mov	r0, r6
 80082be:	f000 f841 	bl	8008344 <__malloc_unlock>
 80082c2:	f104 000b 	add.w	r0, r4, #11
 80082c6:	1d23      	adds	r3, r4, #4
 80082c8:	f020 0007 	bic.w	r0, r0, #7
 80082cc:	1ac2      	subs	r2, r0, r3
 80082ce:	bf1c      	itt	ne
 80082d0:	1a1b      	subne	r3, r3, r0
 80082d2:	50a3      	strne	r3, [r4, r2]
 80082d4:	e7af      	b.n	8008236 <_malloc_r+0x22>
 80082d6:	6862      	ldr	r2, [r4, #4]
 80082d8:	42a3      	cmp	r3, r4
 80082da:	bf0c      	ite	eq
 80082dc:	f8c8 2000 	streq.w	r2, [r8]
 80082e0:	605a      	strne	r2, [r3, #4]
 80082e2:	e7eb      	b.n	80082bc <_malloc_r+0xa8>
 80082e4:	4623      	mov	r3, r4
 80082e6:	6864      	ldr	r4, [r4, #4]
 80082e8:	e7ae      	b.n	8008248 <_malloc_r+0x34>
 80082ea:	463c      	mov	r4, r7
 80082ec:	687f      	ldr	r7, [r7, #4]
 80082ee:	e7b6      	b.n	800825e <_malloc_r+0x4a>
 80082f0:	461a      	mov	r2, r3
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	42a3      	cmp	r3, r4
 80082f6:	d1fb      	bne.n	80082f0 <_malloc_r+0xdc>
 80082f8:	2300      	movs	r3, #0
 80082fa:	6053      	str	r3, [r2, #4]
 80082fc:	e7de      	b.n	80082bc <_malloc_r+0xa8>
 80082fe:	230c      	movs	r3, #12
 8008300:	6033      	str	r3, [r6, #0]
 8008302:	4630      	mov	r0, r6
 8008304:	f000 f81e 	bl	8008344 <__malloc_unlock>
 8008308:	e794      	b.n	8008234 <_malloc_r+0x20>
 800830a:	6005      	str	r5, [r0, #0]
 800830c:	e7d6      	b.n	80082bc <_malloc_r+0xa8>
 800830e:	bf00      	nop
 8008310:	20000cdc 	.word	0x20000cdc

08008314 <__ascii_mbtowc>:
 8008314:	b082      	sub	sp, #8
 8008316:	b901      	cbnz	r1, 800831a <__ascii_mbtowc+0x6>
 8008318:	a901      	add	r1, sp, #4
 800831a:	b142      	cbz	r2, 800832e <__ascii_mbtowc+0x1a>
 800831c:	b14b      	cbz	r3, 8008332 <__ascii_mbtowc+0x1e>
 800831e:	7813      	ldrb	r3, [r2, #0]
 8008320:	600b      	str	r3, [r1, #0]
 8008322:	7812      	ldrb	r2, [r2, #0]
 8008324:	1e10      	subs	r0, r2, #0
 8008326:	bf18      	it	ne
 8008328:	2001      	movne	r0, #1
 800832a:	b002      	add	sp, #8
 800832c:	4770      	bx	lr
 800832e:	4610      	mov	r0, r2
 8008330:	e7fb      	b.n	800832a <__ascii_mbtowc+0x16>
 8008332:	f06f 0001 	mvn.w	r0, #1
 8008336:	e7f8      	b.n	800832a <__ascii_mbtowc+0x16>

08008338 <__malloc_lock>:
 8008338:	4801      	ldr	r0, [pc, #4]	@ (8008340 <__malloc_lock+0x8>)
 800833a:	f7fe bd44 	b.w	8006dc6 <__retarget_lock_acquire_recursive>
 800833e:	bf00      	nop
 8008340:	20000cd4 	.word	0x20000cd4

08008344 <__malloc_unlock>:
 8008344:	4801      	ldr	r0, [pc, #4]	@ (800834c <__malloc_unlock+0x8>)
 8008346:	f7fe bd3f 	b.w	8006dc8 <__retarget_lock_release_recursive>
 800834a:	bf00      	nop
 800834c:	20000cd4 	.word	0x20000cd4

08008350 <_Balloc>:
 8008350:	b570      	push	{r4, r5, r6, lr}
 8008352:	69c6      	ldr	r6, [r0, #28]
 8008354:	4604      	mov	r4, r0
 8008356:	460d      	mov	r5, r1
 8008358:	b976      	cbnz	r6, 8008378 <_Balloc+0x28>
 800835a:	2010      	movs	r0, #16
 800835c:	f7ff ff30 	bl	80081c0 <malloc>
 8008360:	4602      	mov	r2, r0
 8008362:	61e0      	str	r0, [r4, #28]
 8008364:	b920      	cbnz	r0, 8008370 <_Balloc+0x20>
 8008366:	4b18      	ldr	r3, [pc, #96]	@ (80083c8 <_Balloc+0x78>)
 8008368:	4818      	ldr	r0, [pc, #96]	@ (80083cc <_Balloc+0x7c>)
 800836a:	216b      	movs	r1, #107	@ 0x6b
 800836c:	f000 ff50 	bl	8009210 <__assert_func>
 8008370:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008374:	6006      	str	r6, [r0, #0]
 8008376:	60c6      	str	r6, [r0, #12]
 8008378:	69e6      	ldr	r6, [r4, #28]
 800837a:	68f3      	ldr	r3, [r6, #12]
 800837c:	b183      	cbz	r3, 80083a0 <_Balloc+0x50>
 800837e:	69e3      	ldr	r3, [r4, #28]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008386:	b9b8      	cbnz	r0, 80083b8 <_Balloc+0x68>
 8008388:	2101      	movs	r1, #1
 800838a:	fa01 f605 	lsl.w	r6, r1, r5
 800838e:	1d72      	adds	r2, r6, #5
 8008390:	0092      	lsls	r2, r2, #2
 8008392:	4620      	mov	r0, r4
 8008394:	f000 ff5a 	bl	800924c <_calloc_r>
 8008398:	b160      	cbz	r0, 80083b4 <_Balloc+0x64>
 800839a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800839e:	e00e      	b.n	80083be <_Balloc+0x6e>
 80083a0:	2221      	movs	r2, #33	@ 0x21
 80083a2:	2104      	movs	r1, #4
 80083a4:	4620      	mov	r0, r4
 80083a6:	f000 ff51 	bl	800924c <_calloc_r>
 80083aa:	69e3      	ldr	r3, [r4, #28]
 80083ac:	60f0      	str	r0, [r6, #12]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d1e4      	bne.n	800837e <_Balloc+0x2e>
 80083b4:	2000      	movs	r0, #0
 80083b6:	bd70      	pop	{r4, r5, r6, pc}
 80083b8:	6802      	ldr	r2, [r0, #0]
 80083ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80083be:	2300      	movs	r3, #0
 80083c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083c4:	e7f7      	b.n	80083b6 <_Balloc+0x66>
 80083c6:	bf00      	nop
 80083c8:	0800e804 	.word	0x0800e804
 80083cc:	0800e8e4 	.word	0x0800e8e4

080083d0 <_Bfree>:
 80083d0:	b570      	push	{r4, r5, r6, lr}
 80083d2:	69c6      	ldr	r6, [r0, #28]
 80083d4:	4605      	mov	r5, r0
 80083d6:	460c      	mov	r4, r1
 80083d8:	b976      	cbnz	r6, 80083f8 <_Bfree+0x28>
 80083da:	2010      	movs	r0, #16
 80083dc:	f7ff fef0 	bl	80081c0 <malloc>
 80083e0:	4602      	mov	r2, r0
 80083e2:	61e8      	str	r0, [r5, #28]
 80083e4:	b920      	cbnz	r0, 80083f0 <_Bfree+0x20>
 80083e6:	4b09      	ldr	r3, [pc, #36]	@ (800840c <_Bfree+0x3c>)
 80083e8:	4809      	ldr	r0, [pc, #36]	@ (8008410 <_Bfree+0x40>)
 80083ea:	218f      	movs	r1, #143	@ 0x8f
 80083ec:	f000 ff10 	bl	8009210 <__assert_func>
 80083f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083f4:	6006      	str	r6, [r0, #0]
 80083f6:	60c6      	str	r6, [r0, #12]
 80083f8:	b13c      	cbz	r4, 800840a <_Bfree+0x3a>
 80083fa:	69eb      	ldr	r3, [r5, #28]
 80083fc:	6862      	ldr	r2, [r4, #4]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008404:	6021      	str	r1, [r4, #0]
 8008406:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800840a:	bd70      	pop	{r4, r5, r6, pc}
 800840c:	0800e804 	.word	0x0800e804
 8008410:	0800e8e4 	.word	0x0800e8e4

08008414 <__multadd>:
 8008414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008418:	690d      	ldr	r5, [r1, #16]
 800841a:	4607      	mov	r7, r0
 800841c:	460c      	mov	r4, r1
 800841e:	461e      	mov	r6, r3
 8008420:	f101 0c14 	add.w	ip, r1, #20
 8008424:	2000      	movs	r0, #0
 8008426:	f8dc 3000 	ldr.w	r3, [ip]
 800842a:	b299      	uxth	r1, r3
 800842c:	fb02 6101 	mla	r1, r2, r1, r6
 8008430:	0c1e      	lsrs	r6, r3, #16
 8008432:	0c0b      	lsrs	r3, r1, #16
 8008434:	fb02 3306 	mla	r3, r2, r6, r3
 8008438:	b289      	uxth	r1, r1
 800843a:	3001      	adds	r0, #1
 800843c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008440:	4285      	cmp	r5, r0
 8008442:	f84c 1b04 	str.w	r1, [ip], #4
 8008446:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800844a:	dcec      	bgt.n	8008426 <__multadd+0x12>
 800844c:	b30e      	cbz	r6, 8008492 <__multadd+0x7e>
 800844e:	68a3      	ldr	r3, [r4, #8]
 8008450:	42ab      	cmp	r3, r5
 8008452:	dc19      	bgt.n	8008488 <__multadd+0x74>
 8008454:	6861      	ldr	r1, [r4, #4]
 8008456:	4638      	mov	r0, r7
 8008458:	3101      	adds	r1, #1
 800845a:	f7ff ff79 	bl	8008350 <_Balloc>
 800845e:	4680      	mov	r8, r0
 8008460:	b928      	cbnz	r0, 800846e <__multadd+0x5a>
 8008462:	4602      	mov	r2, r0
 8008464:	4b0c      	ldr	r3, [pc, #48]	@ (8008498 <__multadd+0x84>)
 8008466:	480d      	ldr	r0, [pc, #52]	@ (800849c <__multadd+0x88>)
 8008468:	21ba      	movs	r1, #186	@ 0xba
 800846a:	f000 fed1 	bl	8009210 <__assert_func>
 800846e:	6922      	ldr	r2, [r4, #16]
 8008470:	3202      	adds	r2, #2
 8008472:	f104 010c 	add.w	r1, r4, #12
 8008476:	0092      	lsls	r2, r2, #2
 8008478:	300c      	adds	r0, #12
 800847a:	f7fe fca6 	bl	8006dca <memcpy>
 800847e:	4621      	mov	r1, r4
 8008480:	4638      	mov	r0, r7
 8008482:	f7ff ffa5 	bl	80083d0 <_Bfree>
 8008486:	4644      	mov	r4, r8
 8008488:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800848c:	3501      	adds	r5, #1
 800848e:	615e      	str	r6, [r3, #20]
 8008490:	6125      	str	r5, [r4, #16]
 8008492:	4620      	mov	r0, r4
 8008494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008498:	0800e873 	.word	0x0800e873
 800849c:	0800e8e4 	.word	0x0800e8e4

080084a0 <__s2b>:
 80084a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084a4:	460c      	mov	r4, r1
 80084a6:	4615      	mov	r5, r2
 80084a8:	461f      	mov	r7, r3
 80084aa:	2209      	movs	r2, #9
 80084ac:	3308      	adds	r3, #8
 80084ae:	4606      	mov	r6, r0
 80084b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80084b4:	2100      	movs	r1, #0
 80084b6:	2201      	movs	r2, #1
 80084b8:	429a      	cmp	r2, r3
 80084ba:	db09      	blt.n	80084d0 <__s2b+0x30>
 80084bc:	4630      	mov	r0, r6
 80084be:	f7ff ff47 	bl	8008350 <_Balloc>
 80084c2:	b940      	cbnz	r0, 80084d6 <__s2b+0x36>
 80084c4:	4602      	mov	r2, r0
 80084c6:	4b19      	ldr	r3, [pc, #100]	@ (800852c <__s2b+0x8c>)
 80084c8:	4819      	ldr	r0, [pc, #100]	@ (8008530 <__s2b+0x90>)
 80084ca:	21d3      	movs	r1, #211	@ 0xd3
 80084cc:	f000 fea0 	bl	8009210 <__assert_func>
 80084d0:	0052      	lsls	r2, r2, #1
 80084d2:	3101      	adds	r1, #1
 80084d4:	e7f0      	b.n	80084b8 <__s2b+0x18>
 80084d6:	9b08      	ldr	r3, [sp, #32]
 80084d8:	6143      	str	r3, [r0, #20]
 80084da:	2d09      	cmp	r5, #9
 80084dc:	f04f 0301 	mov.w	r3, #1
 80084e0:	6103      	str	r3, [r0, #16]
 80084e2:	dd16      	ble.n	8008512 <__s2b+0x72>
 80084e4:	f104 0909 	add.w	r9, r4, #9
 80084e8:	46c8      	mov	r8, r9
 80084ea:	442c      	add	r4, r5
 80084ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80084f0:	4601      	mov	r1, r0
 80084f2:	3b30      	subs	r3, #48	@ 0x30
 80084f4:	220a      	movs	r2, #10
 80084f6:	4630      	mov	r0, r6
 80084f8:	f7ff ff8c 	bl	8008414 <__multadd>
 80084fc:	45a0      	cmp	r8, r4
 80084fe:	d1f5      	bne.n	80084ec <__s2b+0x4c>
 8008500:	f1a5 0408 	sub.w	r4, r5, #8
 8008504:	444c      	add	r4, r9
 8008506:	1b2d      	subs	r5, r5, r4
 8008508:	1963      	adds	r3, r4, r5
 800850a:	42bb      	cmp	r3, r7
 800850c:	db04      	blt.n	8008518 <__s2b+0x78>
 800850e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008512:	340a      	adds	r4, #10
 8008514:	2509      	movs	r5, #9
 8008516:	e7f6      	b.n	8008506 <__s2b+0x66>
 8008518:	f814 3b01 	ldrb.w	r3, [r4], #1
 800851c:	4601      	mov	r1, r0
 800851e:	3b30      	subs	r3, #48	@ 0x30
 8008520:	220a      	movs	r2, #10
 8008522:	4630      	mov	r0, r6
 8008524:	f7ff ff76 	bl	8008414 <__multadd>
 8008528:	e7ee      	b.n	8008508 <__s2b+0x68>
 800852a:	bf00      	nop
 800852c:	0800e873 	.word	0x0800e873
 8008530:	0800e8e4 	.word	0x0800e8e4

08008534 <__hi0bits>:
 8008534:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008538:	4603      	mov	r3, r0
 800853a:	bf36      	itet	cc
 800853c:	0403      	lslcc	r3, r0, #16
 800853e:	2000      	movcs	r0, #0
 8008540:	2010      	movcc	r0, #16
 8008542:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008546:	bf3c      	itt	cc
 8008548:	021b      	lslcc	r3, r3, #8
 800854a:	3008      	addcc	r0, #8
 800854c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008550:	bf3c      	itt	cc
 8008552:	011b      	lslcc	r3, r3, #4
 8008554:	3004      	addcc	r0, #4
 8008556:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800855a:	bf3c      	itt	cc
 800855c:	009b      	lslcc	r3, r3, #2
 800855e:	3002      	addcc	r0, #2
 8008560:	2b00      	cmp	r3, #0
 8008562:	db05      	blt.n	8008570 <__hi0bits+0x3c>
 8008564:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008568:	f100 0001 	add.w	r0, r0, #1
 800856c:	bf08      	it	eq
 800856e:	2020      	moveq	r0, #32
 8008570:	4770      	bx	lr

08008572 <__lo0bits>:
 8008572:	6803      	ldr	r3, [r0, #0]
 8008574:	4602      	mov	r2, r0
 8008576:	f013 0007 	ands.w	r0, r3, #7
 800857a:	d00b      	beq.n	8008594 <__lo0bits+0x22>
 800857c:	07d9      	lsls	r1, r3, #31
 800857e:	d421      	bmi.n	80085c4 <__lo0bits+0x52>
 8008580:	0798      	lsls	r0, r3, #30
 8008582:	bf49      	itett	mi
 8008584:	085b      	lsrmi	r3, r3, #1
 8008586:	089b      	lsrpl	r3, r3, #2
 8008588:	2001      	movmi	r0, #1
 800858a:	6013      	strmi	r3, [r2, #0]
 800858c:	bf5c      	itt	pl
 800858e:	6013      	strpl	r3, [r2, #0]
 8008590:	2002      	movpl	r0, #2
 8008592:	4770      	bx	lr
 8008594:	b299      	uxth	r1, r3
 8008596:	b909      	cbnz	r1, 800859c <__lo0bits+0x2a>
 8008598:	0c1b      	lsrs	r3, r3, #16
 800859a:	2010      	movs	r0, #16
 800859c:	b2d9      	uxtb	r1, r3
 800859e:	b909      	cbnz	r1, 80085a4 <__lo0bits+0x32>
 80085a0:	3008      	adds	r0, #8
 80085a2:	0a1b      	lsrs	r3, r3, #8
 80085a4:	0719      	lsls	r1, r3, #28
 80085a6:	bf04      	itt	eq
 80085a8:	091b      	lsreq	r3, r3, #4
 80085aa:	3004      	addeq	r0, #4
 80085ac:	0799      	lsls	r1, r3, #30
 80085ae:	bf04      	itt	eq
 80085b0:	089b      	lsreq	r3, r3, #2
 80085b2:	3002      	addeq	r0, #2
 80085b4:	07d9      	lsls	r1, r3, #31
 80085b6:	d403      	bmi.n	80085c0 <__lo0bits+0x4e>
 80085b8:	085b      	lsrs	r3, r3, #1
 80085ba:	f100 0001 	add.w	r0, r0, #1
 80085be:	d003      	beq.n	80085c8 <__lo0bits+0x56>
 80085c0:	6013      	str	r3, [r2, #0]
 80085c2:	4770      	bx	lr
 80085c4:	2000      	movs	r0, #0
 80085c6:	4770      	bx	lr
 80085c8:	2020      	movs	r0, #32
 80085ca:	4770      	bx	lr

080085cc <__i2b>:
 80085cc:	b510      	push	{r4, lr}
 80085ce:	460c      	mov	r4, r1
 80085d0:	2101      	movs	r1, #1
 80085d2:	f7ff febd 	bl	8008350 <_Balloc>
 80085d6:	4602      	mov	r2, r0
 80085d8:	b928      	cbnz	r0, 80085e6 <__i2b+0x1a>
 80085da:	4b05      	ldr	r3, [pc, #20]	@ (80085f0 <__i2b+0x24>)
 80085dc:	4805      	ldr	r0, [pc, #20]	@ (80085f4 <__i2b+0x28>)
 80085de:	f240 1145 	movw	r1, #325	@ 0x145
 80085e2:	f000 fe15 	bl	8009210 <__assert_func>
 80085e6:	2301      	movs	r3, #1
 80085e8:	6144      	str	r4, [r0, #20]
 80085ea:	6103      	str	r3, [r0, #16]
 80085ec:	bd10      	pop	{r4, pc}
 80085ee:	bf00      	nop
 80085f0:	0800e873 	.word	0x0800e873
 80085f4:	0800e8e4 	.word	0x0800e8e4

080085f8 <__multiply>:
 80085f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085fc:	4617      	mov	r7, r2
 80085fe:	690a      	ldr	r2, [r1, #16]
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	429a      	cmp	r2, r3
 8008604:	bfa8      	it	ge
 8008606:	463b      	movge	r3, r7
 8008608:	4689      	mov	r9, r1
 800860a:	bfa4      	itt	ge
 800860c:	460f      	movge	r7, r1
 800860e:	4699      	movge	r9, r3
 8008610:	693d      	ldr	r5, [r7, #16]
 8008612:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	6879      	ldr	r1, [r7, #4]
 800861a:	eb05 060a 	add.w	r6, r5, sl
 800861e:	42b3      	cmp	r3, r6
 8008620:	b085      	sub	sp, #20
 8008622:	bfb8      	it	lt
 8008624:	3101      	addlt	r1, #1
 8008626:	f7ff fe93 	bl	8008350 <_Balloc>
 800862a:	b930      	cbnz	r0, 800863a <__multiply+0x42>
 800862c:	4602      	mov	r2, r0
 800862e:	4b41      	ldr	r3, [pc, #260]	@ (8008734 <__multiply+0x13c>)
 8008630:	4841      	ldr	r0, [pc, #260]	@ (8008738 <__multiply+0x140>)
 8008632:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008636:	f000 fdeb 	bl	8009210 <__assert_func>
 800863a:	f100 0414 	add.w	r4, r0, #20
 800863e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008642:	4623      	mov	r3, r4
 8008644:	2200      	movs	r2, #0
 8008646:	4573      	cmp	r3, lr
 8008648:	d320      	bcc.n	800868c <__multiply+0x94>
 800864a:	f107 0814 	add.w	r8, r7, #20
 800864e:	f109 0114 	add.w	r1, r9, #20
 8008652:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008656:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800865a:	9302      	str	r3, [sp, #8]
 800865c:	1beb      	subs	r3, r5, r7
 800865e:	3b15      	subs	r3, #21
 8008660:	f023 0303 	bic.w	r3, r3, #3
 8008664:	3304      	adds	r3, #4
 8008666:	3715      	adds	r7, #21
 8008668:	42bd      	cmp	r5, r7
 800866a:	bf38      	it	cc
 800866c:	2304      	movcc	r3, #4
 800866e:	9301      	str	r3, [sp, #4]
 8008670:	9b02      	ldr	r3, [sp, #8]
 8008672:	9103      	str	r1, [sp, #12]
 8008674:	428b      	cmp	r3, r1
 8008676:	d80c      	bhi.n	8008692 <__multiply+0x9a>
 8008678:	2e00      	cmp	r6, #0
 800867a:	dd03      	ble.n	8008684 <__multiply+0x8c>
 800867c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008680:	2b00      	cmp	r3, #0
 8008682:	d055      	beq.n	8008730 <__multiply+0x138>
 8008684:	6106      	str	r6, [r0, #16]
 8008686:	b005      	add	sp, #20
 8008688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868c:	f843 2b04 	str.w	r2, [r3], #4
 8008690:	e7d9      	b.n	8008646 <__multiply+0x4e>
 8008692:	f8b1 a000 	ldrh.w	sl, [r1]
 8008696:	f1ba 0f00 	cmp.w	sl, #0
 800869a:	d01f      	beq.n	80086dc <__multiply+0xe4>
 800869c:	46c4      	mov	ip, r8
 800869e:	46a1      	mov	r9, r4
 80086a0:	2700      	movs	r7, #0
 80086a2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80086a6:	f8d9 3000 	ldr.w	r3, [r9]
 80086aa:	fa1f fb82 	uxth.w	fp, r2
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	fb0a 330b 	mla	r3, sl, fp, r3
 80086b4:	443b      	add	r3, r7
 80086b6:	f8d9 7000 	ldr.w	r7, [r9]
 80086ba:	0c12      	lsrs	r2, r2, #16
 80086bc:	0c3f      	lsrs	r7, r7, #16
 80086be:	fb0a 7202 	mla	r2, sl, r2, r7
 80086c2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80086c6:	b29b      	uxth	r3, r3
 80086c8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086cc:	4565      	cmp	r5, ip
 80086ce:	f849 3b04 	str.w	r3, [r9], #4
 80086d2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80086d6:	d8e4      	bhi.n	80086a2 <__multiply+0xaa>
 80086d8:	9b01      	ldr	r3, [sp, #4]
 80086da:	50e7      	str	r7, [r4, r3]
 80086dc:	9b03      	ldr	r3, [sp, #12]
 80086de:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80086e2:	3104      	adds	r1, #4
 80086e4:	f1b9 0f00 	cmp.w	r9, #0
 80086e8:	d020      	beq.n	800872c <__multiply+0x134>
 80086ea:	6823      	ldr	r3, [r4, #0]
 80086ec:	4647      	mov	r7, r8
 80086ee:	46a4      	mov	ip, r4
 80086f0:	f04f 0a00 	mov.w	sl, #0
 80086f4:	f8b7 b000 	ldrh.w	fp, [r7]
 80086f8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80086fc:	fb09 220b 	mla	r2, r9, fp, r2
 8008700:	4452      	add	r2, sl
 8008702:	b29b      	uxth	r3, r3
 8008704:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008708:	f84c 3b04 	str.w	r3, [ip], #4
 800870c:	f857 3b04 	ldr.w	r3, [r7], #4
 8008710:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008714:	f8bc 3000 	ldrh.w	r3, [ip]
 8008718:	fb09 330a 	mla	r3, r9, sl, r3
 800871c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008720:	42bd      	cmp	r5, r7
 8008722:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008726:	d8e5      	bhi.n	80086f4 <__multiply+0xfc>
 8008728:	9a01      	ldr	r2, [sp, #4]
 800872a:	50a3      	str	r3, [r4, r2]
 800872c:	3404      	adds	r4, #4
 800872e:	e79f      	b.n	8008670 <__multiply+0x78>
 8008730:	3e01      	subs	r6, #1
 8008732:	e7a1      	b.n	8008678 <__multiply+0x80>
 8008734:	0800e873 	.word	0x0800e873
 8008738:	0800e8e4 	.word	0x0800e8e4

0800873c <__pow5mult>:
 800873c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008740:	4615      	mov	r5, r2
 8008742:	f012 0203 	ands.w	r2, r2, #3
 8008746:	4607      	mov	r7, r0
 8008748:	460e      	mov	r6, r1
 800874a:	d007      	beq.n	800875c <__pow5mult+0x20>
 800874c:	4c25      	ldr	r4, [pc, #148]	@ (80087e4 <__pow5mult+0xa8>)
 800874e:	3a01      	subs	r2, #1
 8008750:	2300      	movs	r3, #0
 8008752:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008756:	f7ff fe5d 	bl	8008414 <__multadd>
 800875a:	4606      	mov	r6, r0
 800875c:	10ad      	asrs	r5, r5, #2
 800875e:	d03d      	beq.n	80087dc <__pow5mult+0xa0>
 8008760:	69fc      	ldr	r4, [r7, #28]
 8008762:	b97c      	cbnz	r4, 8008784 <__pow5mult+0x48>
 8008764:	2010      	movs	r0, #16
 8008766:	f7ff fd2b 	bl	80081c0 <malloc>
 800876a:	4602      	mov	r2, r0
 800876c:	61f8      	str	r0, [r7, #28]
 800876e:	b928      	cbnz	r0, 800877c <__pow5mult+0x40>
 8008770:	4b1d      	ldr	r3, [pc, #116]	@ (80087e8 <__pow5mult+0xac>)
 8008772:	481e      	ldr	r0, [pc, #120]	@ (80087ec <__pow5mult+0xb0>)
 8008774:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008778:	f000 fd4a 	bl	8009210 <__assert_func>
 800877c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008780:	6004      	str	r4, [r0, #0]
 8008782:	60c4      	str	r4, [r0, #12]
 8008784:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008788:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800878c:	b94c      	cbnz	r4, 80087a2 <__pow5mult+0x66>
 800878e:	f240 2171 	movw	r1, #625	@ 0x271
 8008792:	4638      	mov	r0, r7
 8008794:	f7ff ff1a 	bl	80085cc <__i2b>
 8008798:	2300      	movs	r3, #0
 800879a:	f8c8 0008 	str.w	r0, [r8, #8]
 800879e:	4604      	mov	r4, r0
 80087a0:	6003      	str	r3, [r0, #0]
 80087a2:	f04f 0900 	mov.w	r9, #0
 80087a6:	07eb      	lsls	r3, r5, #31
 80087a8:	d50a      	bpl.n	80087c0 <__pow5mult+0x84>
 80087aa:	4631      	mov	r1, r6
 80087ac:	4622      	mov	r2, r4
 80087ae:	4638      	mov	r0, r7
 80087b0:	f7ff ff22 	bl	80085f8 <__multiply>
 80087b4:	4631      	mov	r1, r6
 80087b6:	4680      	mov	r8, r0
 80087b8:	4638      	mov	r0, r7
 80087ba:	f7ff fe09 	bl	80083d0 <_Bfree>
 80087be:	4646      	mov	r6, r8
 80087c0:	106d      	asrs	r5, r5, #1
 80087c2:	d00b      	beq.n	80087dc <__pow5mult+0xa0>
 80087c4:	6820      	ldr	r0, [r4, #0]
 80087c6:	b938      	cbnz	r0, 80087d8 <__pow5mult+0x9c>
 80087c8:	4622      	mov	r2, r4
 80087ca:	4621      	mov	r1, r4
 80087cc:	4638      	mov	r0, r7
 80087ce:	f7ff ff13 	bl	80085f8 <__multiply>
 80087d2:	6020      	str	r0, [r4, #0]
 80087d4:	f8c0 9000 	str.w	r9, [r0]
 80087d8:	4604      	mov	r4, r0
 80087da:	e7e4      	b.n	80087a6 <__pow5mult+0x6a>
 80087dc:	4630      	mov	r0, r6
 80087de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087e2:	bf00      	nop
 80087e4:	0800e9e0 	.word	0x0800e9e0
 80087e8:	0800e804 	.word	0x0800e804
 80087ec:	0800e8e4 	.word	0x0800e8e4

080087f0 <__lshift>:
 80087f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f4:	460c      	mov	r4, r1
 80087f6:	6849      	ldr	r1, [r1, #4]
 80087f8:	6923      	ldr	r3, [r4, #16]
 80087fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087fe:	68a3      	ldr	r3, [r4, #8]
 8008800:	4607      	mov	r7, r0
 8008802:	4691      	mov	r9, r2
 8008804:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008808:	f108 0601 	add.w	r6, r8, #1
 800880c:	42b3      	cmp	r3, r6
 800880e:	db0b      	blt.n	8008828 <__lshift+0x38>
 8008810:	4638      	mov	r0, r7
 8008812:	f7ff fd9d 	bl	8008350 <_Balloc>
 8008816:	4605      	mov	r5, r0
 8008818:	b948      	cbnz	r0, 800882e <__lshift+0x3e>
 800881a:	4602      	mov	r2, r0
 800881c:	4b28      	ldr	r3, [pc, #160]	@ (80088c0 <__lshift+0xd0>)
 800881e:	4829      	ldr	r0, [pc, #164]	@ (80088c4 <__lshift+0xd4>)
 8008820:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008824:	f000 fcf4 	bl	8009210 <__assert_func>
 8008828:	3101      	adds	r1, #1
 800882a:	005b      	lsls	r3, r3, #1
 800882c:	e7ee      	b.n	800880c <__lshift+0x1c>
 800882e:	2300      	movs	r3, #0
 8008830:	f100 0114 	add.w	r1, r0, #20
 8008834:	f100 0210 	add.w	r2, r0, #16
 8008838:	4618      	mov	r0, r3
 800883a:	4553      	cmp	r3, sl
 800883c:	db33      	blt.n	80088a6 <__lshift+0xb6>
 800883e:	6920      	ldr	r0, [r4, #16]
 8008840:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008844:	f104 0314 	add.w	r3, r4, #20
 8008848:	f019 091f 	ands.w	r9, r9, #31
 800884c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008850:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008854:	d02b      	beq.n	80088ae <__lshift+0xbe>
 8008856:	f1c9 0e20 	rsb	lr, r9, #32
 800885a:	468a      	mov	sl, r1
 800885c:	2200      	movs	r2, #0
 800885e:	6818      	ldr	r0, [r3, #0]
 8008860:	fa00 f009 	lsl.w	r0, r0, r9
 8008864:	4310      	orrs	r0, r2
 8008866:	f84a 0b04 	str.w	r0, [sl], #4
 800886a:	f853 2b04 	ldr.w	r2, [r3], #4
 800886e:	459c      	cmp	ip, r3
 8008870:	fa22 f20e 	lsr.w	r2, r2, lr
 8008874:	d8f3      	bhi.n	800885e <__lshift+0x6e>
 8008876:	ebac 0304 	sub.w	r3, ip, r4
 800887a:	3b15      	subs	r3, #21
 800887c:	f023 0303 	bic.w	r3, r3, #3
 8008880:	3304      	adds	r3, #4
 8008882:	f104 0015 	add.w	r0, r4, #21
 8008886:	4560      	cmp	r0, ip
 8008888:	bf88      	it	hi
 800888a:	2304      	movhi	r3, #4
 800888c:	50ca      	str	r2, [r1, r3]
 800888e:	b10a      	cbz	r2, 8008894 <__lshift+0xa4>
 8008890:	f108 0602 	add.w	r6, r8, #2
 8008894:	3e01      	subs	r6, #1
 8008896:	4638      	mov	r0, r7
 8008898:	612e      	str	r6, [r5, #16]
 800889a:	4621      	mov	r1, r4
 800889c:	f7ff fd98 	bl	80083d0 <_Bfree>
 80088a0:	4628      	mov	r0, r5
 80088a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80088aa:	3301      	adds	r3, #1
 80088ac:	e7c5      	b.n	800883a <__lshift+0x4a>
 80088ae:	3904      	subs	r1, #4
 80088b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80088b4:	f841 2f04 	str.w	r2, [r1, #4]!
 80088b8:	459c      	cmp	ip, r3
 80088ba:	d8f9      	bhi.n	80088b0 <__lshift+0xc0>
 80088bc:	e7ea      	b.n	8008894 <__lshift+0xa4>
 80088be:	bf00      	nop
 80088c0:	0800e873 	.word	0x0800e873
 80088c4:	0800e8e4 	.word	0x0800e8e4

080088c8 <__mcmp>:
 80088c8:	690a      	ldr	r2, [r1, #16]
 80088ca:	4603      	mov	r3, r0
 80088cc:	6900      	ldr	r0, [r0, #16]
 80088ce:	1a80      	subs	r0, r0, r2
 80088d0:	b530      	push	{r4, r5, lr}
 80088d2:	d10e      	bne.n	80088f2 <__mcmp+0x2a>
 80088d4:	3314      	adds	r3, #20
 80088d6:	3114      	adds	r1, #20
 80088d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80088dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80088e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80088e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80088e8:	4295      	cmp	r5, r2
 80088ea:	d003      	beq.n	80088f4 <__mcmp+0x2c>
 80088ec:	d205      	bcs.n	80088fa <__mcmp+0x32>
 80088ee:	f04f 30ff 	mov.w	r0, #4294967295
 80088f2:	bd30      	pop	{r4, r5, pc}
 80088f4:	42a3      	cmp	r3, r4
 80088f6:	d3f3      	bcc.n	80088e0 <__mcmp+0x18>
 80088f8:	e7fb      	b.n	80088f2 <__mcmp+0x2a>
 80088fa:	2001      	movs	r0, #1
 80088fc:	e7f9      	b.n	80088f2 <__mcmp+0x2a>
	...

08008900 <__mdiff>:
 8008900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008904:	4689      	mov	r9, r1
 8008906:	4606      	mov	r6, r0
 8008908:	4611      	mov	r1, r2
 800890a:	4648      	mov	r0, r9
 800890c:	4614      	mov	r4, r2
 800890e:	f7ff ffdb 	bl	80088c8 <__mcmp>
 8008912:	1e05      	subs	r5, r0, #0
 8008914:	d112      	bne.n	800893c <__mdiff+0x3c>
 8008916:	4629      	mov	r1, r5
 8008918:	4630      	mov	r0, r6
 800891a:	f7ff fd19 	bl	8008350 <_Balloc>
 800891e:	4602      	mov	r2, r0
 8008920:	b928      	cbnz	r0, 800892e <__mdiff+0x2e>
 8008922:	4b3f      	ldr	r3, [pc, #252]	@ (8008a20 <__mdiff+0x120>)
 8008924:	f240 2137 	movw	r1, #567	@ 0x237
 8008928:	483e      	ldr	r0, [pc, #248]	@ (8008a24 <__mdiff+0x124>)
 800892a:	f000 fc71 	bl	8009210 <__assert_func>
 800892e:	2301      	movs	r3, #1
 8008930:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008934:	4610      	mov	r0, r2
 8008936:	b003      	add	sp, #12
 8008938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800893c:	bfbc      	itt	lt
 800893e:	464b      	movlt	r3, r9
 8008940:	46a1      	movlt	r9, r4
 8008942:	4630      	mov	r0, r6
 8008944:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008948:	bfba      	itte	lt
 800894a:	461c      	movlt	r4, r3
 800894c:	2501      	movlt	r5, #1
 800894e:	2500      	movge	r5, #0
 8008950:	f7ff fcfe 	bl	8008350 <_Balloc>
 8008954:	4602      	mov	r2, r0
 8008956:	b918      	cbnz	r0, 8008960 <__mdiff+0x60>
 8008958:	4b31      	ldr	r3, [pc, #196]	@ (8008a20 <__mdiff+0x120>)
 800895a:	f240 2145 	movw	r1, #581	@ 0x245
 800895e:	e7e3      	b.n	8008928 <__mdiff+0x28>
 8008960:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008964:	6926      	ldr	r6, [r4, #16]
 8008966:	60c5      	str	r5, [r0, #12]
 8008968:	f109 0310 	add.w	r3, r9, #16
 800896c:	f109 0514 	add.w	r5, r9, #20
 8008970:	f104 0e14 	add.w	lr, r4, #20
 8008974:	f100 0b14 	add.w	fp, r0, #20
 8008978:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800897c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008980:	9301      	str	r3, [sp, #4]
 8008982:	46d9      	mov	r9, fp
 8008984:	f04f 0c00 	mov.w	ip, #0
 8008988:	9b01      	ldr	r3, [sp, #4]
 800898a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800898e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008992:	9301      	str	r3, [sp, #4]
 8008994:	fa1f f38a 	uxth.w	r3, sl
 8008998:	4619      	mov	r1, r3
 800899a:	b283      	uxth	r3, r0
 800899c:	1acb      	subs	r3, r1, r3
 800899e:	0c00      	lsrs	r0, r0, #16
 80089a0:	4463      	add	r3, ip
 80089a2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80089a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80089b0:	4576      	cmp	r6, lr
 80089b2:	f849 3b04 	str.w	r3, [r9], #4
 80089b6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80089ba:	d8e5      	bhi.n	8008988 <__mdiff+0x88>
 80089bc:	1b33      	subs	r3, r6, r4
 80089be:	3b15      	subs	r3, #21
 80089c0:	f023 0303 	bic.w	r3, r3, #3
 80089c4:	3415      	adds	r4, #21
 80089c6:	3304      	adds	r3, #4
 80089c8:	42a6      	cmp	r6, r4
 80089ca:	bf38      	it	cc
 80089cc:	2304      	movcc	r3, #4
 80089ce:	441d      	add	r5, r3
 80089d0:	445b      	add	r3, fp
 80089d2:	461e      	mov	r6, r3
 80089d4:	462c      	mov	r4, r5
 80089d6:	4544      	cmp	r4, r8
 80089d8:	d30e      	bcc.n	80089f8 <__mdiff+0xf8>
 80089da:	f108 0103 	add.w	r1, r8, #3
 80089de:	1b49      	subs	r1, r1, r5
 80089e0:	f021 0103 	bic.w	r1, r1, #3
 80089e4:	3d03      	subs	r5, #3
 80089e6:	45a8      	cmp	r8, r5
 80089e8:	bf38      	it	cc
 80089ea:	2100      	movcc	r1, #0
 80089ec:	440b      	add	r3, r1
 80089ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80089f2:	b191      	cbz	r1, 8008a1a <__mdiff+0x11a>
 80089f4:	6117      	str	r7, [r2, #16]
 80089f6:	e79d      	b.n	8008934 <__mdiff+0x34>
 80089f8:	f854 1b04 	ldr.w	r1, [r4], #4
 80089fc:	46e6      	mov	lr, ip
 80089fe:	0c08      	lsrs	r0, r1, #16
 8008a00:	fa1c fc81 	uxtah	ip, ip, r1
 8008a04:	4471      	add	r1, lr
 8008a06:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008a0a:	b289      	uxth	r1, r1
 8008a0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a10:	f846 1b04 	str.w	r1, [r6], #4
 8008a14:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a18:	e7dd      	b.n	80089d6 <__mdiff+0xd6>
 8008a1a:	3f01      	subs	r7, #1
 8008a1c:	e7e7      	b.n	80089ee <__mdiff+0xee>
 8008a1e:	bf00      	nop
 8008a20:	0800e873 	.word	0x0800e873
 8008a24:	0800e8e4 	.word	0x0800e8e4

08008a28 <__ulp>:
 8008a28:	b082      	sub	sp, #8
 8008a2a:	ed8d 0b00 	vstr	d0, [sp]
 8008a2e:	9a01      	ldr	r2, [sp, #4]
 8008a30:	4b0f      	ldr	r3, [pc, #60]	@ (8008a70 <__ulp+0x48>)
 8008a32:	4013      	ands	r3, r2
 8008a34:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	dc08      	bgt.n	8008a4e <__ulp+0x26>
 8008a3c:	425b      	negs	r3, r3
 8008a3e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008a42:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008a46:	da04      	bge.n	8008a52 <__ulp+0x2a>
 8008a48:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008a4c:	4113      	asrs	r3, r2
 8008a4e:	2200      	movs	r2, #0
 8008a50:	e008      	b.n	8008a64 <__ulp+0x3c>
 8008a52:	f1a2 0314 	sub.w	r3, r2, #20
 8008a56:	2b1e      	cmp	r3, #30
 8008a58:	bfda      	itte	le
 8008a5a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008a5e:	40da      	lsrle	r2, r3
 8008a60:	2201      	movgt	r2, #1
 8008a62:	2300      	movs	r3, #0
 8008a64:	4619      	mov	r1, r3
 8008a66:	4610      	mov	r0, r2
 8008a68:	ec41 0b10 	vmov	d0, r0, r1
 8008a6c:	b002      	add	sp, #8
 8008a6e:	4770      	bx	lr
 8008a70:	7ff00000 	.word	0x7ff00000

08008a74 <__b2d>:
 8008a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a78:	6906      	ldr	r6, [r0, #16]
 8008a7a:	f100 0814 	add.w	r8, r0, #20
 8008a7e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008a82:	1f37      	subs	r7, r6, #4
 8008a84:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008a88:	4610      	mov	r0, r2
 8008a8a:	f7ff fd53 	bl	8008534 <__hi0bits>
 8008a8e:	f1c0 0320 	rsb	r3, r0, #32
 8008a92:	280a      	cmp	r0, #10
 8008a94:	600b      	str	r3, [r1, #0]
 8008a96:	491b      	ldr	r1, [pc, #108]	@ (8008b04 <__b2d+0x90>)
 8008a98:	dc15      	bgt.n	8008ac6 <__b2d+0x52>
 8008a9a:	f1c0 0c0b 	rsb	ip, r0, #11
 8008a9e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008aa2:	45b8      	cmp	r8, r7
 8008aa4:	ea43 0501 	orr.w	r5, r3, r1
 8008aa8:	bf34      	ite	cc
 8008aaa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008aae:	2300      	movcs	r3, #0
 8008ab0:	3015      	adds	r0, #21
 8008ab2:	fa02 f000 	lsl.w	r0, r2, r0
 8008ab6:	fa23 f30c 	lsr.w	r3, r3, ip
 8008aba:	4303      	orrs	r3, r0
 8008abc:	461c      	mov	r4, r3
 8008abe:	ec45 4b10 	vmov	d0, r4, r5
 8008ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ac6:	45b8      	cmp	r8, r7
 8008ac8:	bf3a      	itte	cc
 8008aca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008ace:	f1a6 0708 	subcc.w	r7, r6, #8
 8008ad2:	2300      	movcs	r3, #0
 8008ad4:	380b      	subs	r0, #11
 8008ad6:	d012      	beq.n	8008afe <__b2d+0x8a>
 8008ad8:	f1c0 0120 	rsb	r1, r0, #32
 8008adc:	fa23 f401 	lsr.w	r4, r3, r1
 8008ae0:	4082      	lsls	r2, r0
 8008ae2:	4322      	orrs	r2, r4
 8008ae4:	4547      	cmp	r7, r8
 8008ae6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008aea:	bf8c      	ite	hi
 8008aec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008af0:	2200      	movls	r2, #0
 8008af2:	4083      	lsls	r3, r0
 8008af4:	40ca      	lsrs	r2, r1
 8008af6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008afa:	4313      	orrs	r3, r2
 8008afc:	e7de      	b.n	8008abc <__b2d+0x48>
 8008afe:	ea42 0501 	orr.w	r5, r2, r1
 8008b02:	e7db      	b.n	8008abc <__b2d+0x48>
 8008b04:	3ff00000 	.word	0x3ff00000

08008b08 <__d2b>:
 8008b08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b0c:	460f      	mov	r7, r1
 8008b0e:	2101      	movs	r1, #1
 8008b10:	ec59 8b10 	vmov	r8, r9, d0
 8008b14:	4616      	mov	r6, r2
 8008b16:	f7ff fc1b 	bl	8008350 <_Balloc>
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	b930      	cbnz	r0, 8008b2c <__d2b+0x24>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	4b23      	ldr	r3, [pc, #140]	@ (8008bb0 <__d2b+0xa8>)
 8008b22:	4824      	ldr	r0, [pc, #144]	@ (8008bb4 <__d2b+0xac>)
 8008b24:	f240 310f 	movw	r1, #783	@ 0x30f
 8008b28:	f000 fb72 	bl	8009210 <__assert_func>
 8008b2c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b34:	b10d      	cbz	r5, 8008b3a <__d2b+0x32>
 8008b36:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b3a:	9301      	str	r3, [sp, #4]
 8008b3c:	f1b8 0300 	subs.w	r3, r8, #0
 8008b40:	d023      	beq.n	8008b8a <__d2b+0x82>
 8008b42:	4668      	mov	r0, sp
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	f7ff fd14 	bl	8008572 <__lo0bits>
 8008b4a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b4e:	b1d0      	cbz	r0, 8008b86 <__d2b+0x7e>
 8008b50:	f1c0 0320 	rsb	r3, r0, #32
 8008b54:	fa02 f303 	lsl.w	r3, r2, r3
 8008b58:	430b      	orrs	r3, r1
 8008b5a:	40c2      	lsrs	r2, r0
 8008b5c:	6163      	str	r3, [r4, #20]
 8008b5e:	9201      	str	r2, [sp, #4]
 8008b60:	9b01      	ldr	r3, [sp, #4]
 8008b62:	61a3      	str	r3, [r4, #24]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	bf0c      	ite	eq
 8008b68:	2201      	moveq	r2, #1
 8008b6a:	2202      	movne	r2, #2
 8008b6c:	6122      	str	r2, [r4, #16]
 8008b6e:	b1a5      	cbz	r5, 8008b9a <__d2b+0x92>
 8008b70:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008b74:	4405      	add	r5, r0
 8008b76:	603d      	str	r5, [r7, #0]
 8008b78:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008b7c:	6030      	str	r0, [r6, #0]
 8008b7e:	4620      	mov	r0, r4
 8008b80:	b003      	add	sp, #12
 8008b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b86:	6161      	str	r1, [r4, #20]
 8008b88:	e7ea      	b.n	8008b60 <__d2b+0x58>
 8008b8a:	a801      	add	r0, sp, #4
 8008b8c:	f7ff fcf1 	bl	8008572 <__lo0bits>
 8008b90:	9b01      	ldr	r3, [sp, #4]
 8008b92:	6163      	str	r3, [r4, #20]
 8008b94:	3020      	adds	r0, #32
 8008b96:	2201      	movs	r2, #1
 8008b98:	e7e8      	b.n	8008b6c <__d2b+0x64>
 8008b9a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b9e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008ba2:	6038      	str	r0, [r7, #0]
 8008ba4:	6918      	ldr	r0, [r3, #16]
 8008ba6:	f7ff fcc5 	bl	8008534 <__hi0bits>
 8008baa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008bae:	e7e5      	b.n	8008b7c <__d2b+0x74>
 8008bb0:	0800e873 	.word	0x0800e873
 8008bb4:	0800e8e4 	.word	0x0800e8e4

08008bb8 <__ratio>:
 8008bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bbc:	b085      	sub	sp, #20
 8008bbe:	e9cd 1000 	strd	r1, r0, [sp]
 8008bc2:	a902      	add	r1, sp, #8
 8008bc4:	f7ff ff56 	bl	8008a74 <__b2d>
 8008bc8:	9800      	ldr	r0, [sp, #0]
 8008bca:	a903      	add	r1, sp, #12
 8008bcc:	ec55 4b10 	vmov	r4, r5, d0
 8008bd0:	f7ff ff50 	bl	8008a74 <__b2d>
 8008bd4:	9b01      	ldr	r3, [sp, #4]
 8008bd6:	6919      	ldr	r1, [r3, #16]
 8008bd8:	9b00      	ldr	r3, [sp, #0]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	1ac9      	subs	r1, r1, r3
 8008bde:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008be2:	1a9b      	subs	r3, r3, r2
 8008be4:	ec5b ab10 	vmov	sl, fp, d0
 8008be8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	bfce      	itee	gt
 8008bf0:	462a      	movgt	r2, r5
 8008bf2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008bf6:	465a      	movle	r2, fp
 8008bf8:	462f      	mov	r7, r5
 8008bfa:	46d9      	mov	r9, fp
 8008bfc:	bfcc      	ite	gt
 8008bfe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008c02:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008c06:	464b      	mov	r3, r9
 8008c08:	4652      	mov	r2, sl
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	4639      	mov	r1, r7
 8008c0e:	f7f7 fe25 	bl	800085c <__aeabi_ddiv>
 8008c12:	ec41 0b10 	vmov	d0, r0, r1
 8008c16:	b005      	add	sp, #20
 8008c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c1c <__copybits>:
 8008c1c:	3901      	subs	r1, #1
 8008c1e:	b570      	push	{r4, r5, r6, lr}
 8008c20:	1149      	asrs	r1, r1, #5
 8008c22:	6914      	ldr	r4, [r2, #16]
 8008c24:	3101      	adds	r1, #1
 8008c26:	f102 0314 	add.w	r3, r2, #20
 8008c2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c2e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c32:	1f05      	subs	r5, r0, #4
 8008c34:	42a3      	cmp	r3, r4
 8008c36:	d30c      	bcc.n	8008c52 <__copybits+0x36>
 8008c38:	1aa3      	subs	r3, r4, r2
 8008c3a:	3b11      	subs	r3, #17
 8008c3c:	f023 0303 	bic.w	r3, r3, #3
 8008c40:	3211      	adds	r2, #17
 8008c42:	42a2      	cmp	r2, r4
 8008c44:	bf88      	it	hi
 8008c46:	2300      	movhi	r3, #0
 8008c48:	4418      	add	r0, r3
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	4288      	cmp	r0, r1
 8008c4e:	d305      	bcc.n	8008c5c <__copybits+0x40>
 8008c50:	bd70      	pop	{r4, r5, r6, pc}
 8008c52:	f853 6b04 	ldr.w	r6, [r3], #4
 8008c56:	f845 6f04 	str.w	r6, [r5, #4]!
 8008c5a:	e7eb      	b.n	8008c34 <__copybits+0x18>
 8008c5c:	f840 3b04 	str.w	r3, [r0], #4
 8008c60:	e7f4      	b.n	8008c4c <__copybits+0x30>

08008c62 <__any_on>:
 8008c62:	f100 0214 	add.w	r2, r0, #20
 8008c66:	6900      	ldr	r0, [r0, #16]
 8008c68:	114b      	asrs	r3, r1, #5
 8008c6a:	4298      	cmp	r0, r3
 8008c6c:	b510      	push	{r4, lr}
 8008c6e:	db11      	blt.n	8008c94 <__any_on+0x32>
 8008c70:	dd0a      	ble.n	8008c88 <__any_on+0x26>
 8008c72:	f011 011f 	ands.w	r1, r1, #31
 8008c76:	d007      	beq.n	8008c88 <__any_on+0x26>
 8008c78:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008c7c:	fa24 f001 	lsr.w	r0, r4, r1
 8008c80:	fa00 f101 	lsl.w	r1, r0, r1
 8008c84:	428c      	cmp	r4, r1
 8008c86:	d10b      	bne.n	8008ca0 <__any_on+0x3e>
 8008c88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d803      	bhi.n	8008c98 <__any_on+0x36>
 8008c90:	2000      	movs	r0, #0
 8008c92:	bd10      	pop	{r4, pc}
 8008c94:	4603      	mov	r3, r0
 8008c96:	e7f7      	b.n	8008c88 <__any_on+0x26>
 8008c98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c9c:	2900      	cmp	r1, #0
 8008c9e:	d0f5      	beq.n	8008c8c <__any_on+0x2a>
 8008ca0:	2001      	movs	r0, #1
 8008ca2:	e7f6      	b.n	8008c92 <__any_on+0x30>

08008ca4 <_strtol_l.isra.0>:
 8008ca4:	2b24      	cmp	r3, #36	@ 0x24
 8008ca6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008caa:	4686      	mov	lr, r0
 8008cac:	4690      	mov	r8, r2
 8008cae:	d801      	bhi.n	8008cb4 <_strtol_l.isra.0+0x10>
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d106      	bne.n	8008cc2 <_strtol_l.isra.0+0x1e>
 8008cb4:	f7fe f85c 	bl	8006d70 <__errno>
 8008cb8:	2316      	movs	r3, #22
 8008cba:	6003      	str	r3, [r0, #0]
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cc2:	4834      	ldr	r0, [pc, #208]	@ (8008d94 <_strtol_l.isra.0+0xf0>)
 8008cc4:	460d      	mov	r5, r1
 8008cc6:	462a      	mov	r2, r5
 8008cc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ccc:	5d06      	ldrb	r6, [r0, r4]
 8008cce:	f016 0608 	ands.w	r6, r6, #8
 8008cd2:	d1f8      	bne.n	8008cc6 <_strtol_l.isra.0+0x22>
 8008cd4:	2c2d      	cmp	r4, #45	@ 0x2d
 8008cd6:	d110      	bne.n	8008cfa <_strtol_l.isra.0+0x56>
 8008cd8:	782c      	ldrb	r4, [r5, #0]
 8008cda:	2601      	movs	r6, #1
 8008cdc:	1c95      	adds	r5, r2, #2
 8008cde:	f033 0210 	bics.w	r2, r3, #16
 8008ce2:	d115      	bne.n	8008d10 <_strtol_l.isra.0+0x6c>
 8008ce4:	2c30      	cmp	r4, #48	@ 0x30
 8008ce6:	d10d      	bne.n	8008d04 <_strtol_l.isra.0+0x60>
 8008ce8:	782a      	ldrb	r2, [r5, #0]
 8008cea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008cee:	2a58      	cmp	r2, #88	@ 0x58
 8008cf0:	d108      	bne.n	8008d04 <_strtol_l.isra.0+0x60>
 8008cf2:	786c      	ldrb	r4, [r5, #1]
 8008cf4:	3502      	adds	r5, #2
 8008cf6:	2310      	movs	r3, #16
 8008cf8:	e00a      	b.n	8008d10 <_strtol_l.isra.0+0x6c>
 8008cfa:	2c2b      	cmp	r4, #43	@ 0x2b
 8008cfc:	bf04      	itt	eq
 8008cfe:	782c      	ldrbeq	r4, [r5, #0]
 8008d00:	1c95      	addeq	r5, r2, #2
 8008d02:	e7ec      	b.n	8008cde <_strtol_l.isra.0+0x3a>
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1f6      	bne.n	8008cf6 <_strtol_l.isra.0+0x52>
 8008d08:	2c30      	cmp	r4, #48	@ 0x30
 8008d0a:	bf14      	ite	ne
 8008d0c:	230a      	movne	r3, #10
 8008d0e:	2308      	moveq	r3, #8
 8008d10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008d14:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008d18:	2200      	movs	r2, #0
 8008d1a:	fbbc f9f3 	udiv	r9, ip, r3
 8008d1e:	4610      	mov	r0, r2
 8008d20:	fb03 ca19 	mls	sl, r3, r9, ip
 8008d24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008d28:	2f09      	cmp	r7, #9
 8008d2a:	d80f      	bhi.n	8008d4c <_strtol_l.isra.0+0xa8>
 8008d2c:	463c      	mov	r4, r7
 8008d2e:	42a3      	cmp	r3, r4
 8008d30:	dd1b      	ble.n	8008d6a <_strtol_l.isra.0+0xc6>
 8008d32:	1c57      	adds	r7, r2, #1
 8008d34:	d007      	beq.n	8008d46 <_strtol_l.isra.0+0xa2>
 8008d36:	4581      	cmp	r9, r0
 8008d38:	d314      	bcc.n	8008d64 <_strtol_l.isra.0+0xc0>
 8008d3a:	d101      	bne.n	8008d40 <_strtol_l.isra.0+0x9c>
 8008d3c:	45a2      	cmp	sl, r4
 8008d3e:	db11      	blt.n	8008d64 <_strtol_l.isra.0+0xc0>
 8008d40:	fb00 4003 	mla	r0, r0, r3, r4
 8008d44:	2201      	movs	r2, #1
 8008d46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d4a:	e7eb      	b.n	8008d24 <_strtol_l.isra.0+0x80>
 8008d4c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008d50:	2f19      	cmp	r7, #25
 8008d52:	d801      	bhi.n	8008d58 <_strtol_l.isra.0+0xb4>
 8008d54:	3c37      	subs	r4, #55	@ 0x37
 8008d56:	e7ea      	b.n	8008d2e <_strtol_l.isra.0+0x8a>
 8008d58:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008d5c:	2f19      	cmp	r7, #25
 8008d5e:	d804      	bhi.n	8008d6a <_strtol_l.isra.0+0xc6>
 8008d60:	3c57      	subs	r4, #87	@ 0x57
 8008d62:	e7e4      	b.n	8008d2e <_strtol_l.isra.0+0x8a>
 8008d64:	f04f 32ff 	mov.w	r2, #4294967295
 8008d68:	e7ed      	b.n	8008d46 <_strtol_l.isra.0+0xa2>
 8008d6a:	1c53      	adds	r3, r2, #1
 8008d6c:	d108      	bne.n	8008d80 <_strtol_l.isra.0+0xdc>
 8008d6e:	2322      	movs	r3, #34	@ 0x22
 8008d70:	f8ce 3000 	str.w	r3, [lr]
 8008d74:	4660      	mov	r0, ip
 8008d76:	f1b8 0f00 	cmp.w	r8, #0
 8008d7a:	d0a0      	beq.n	8008cbe <_strtol_l.isra.0+0x1a>
 8008d7c:	1e69      	subs	r1, r5, #1
 8008d7e:	e006      	b.n	8008d8e <_strtol_l.isra.0+0xea>
 8008d80:	b106      	cbz	r6, 8008d84 <_strtol_l.isra.0+0xe0>
 8008d82:	4240      	negs	r0, r0
 8008d84:	f1b8 0f00 	cmp.w	r8, #0
 8008d88:	d099      	beq.n	8008cbe <_strtol_l.isra.0+0x1a>
 8008d8a:	2a00      	cmp	r2, #0
 8008d8c:	d1f6      	bne.n	8008d7c <_strtol_l.isra.0+0xd8>
 8008d8e:	f8c8 1000 	str.w	r1, [r8]
 8008d92:	e794      	b.n	8008cbe <_strtol_l.isra.0+0x1a>
 8008d94:	0800eae1 	.word	0x0800eae1

08008d98 <_strtol_r>:
 8008d98:	f7ff bf84 	b.w	8008ca4 <_strtol_l.isra.0>

08008d9c <__ascii_wctomb>:
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	4608      	mov	r0, r1
 8008da0:	b141      	cbz	r1, 8008db4 <__ascii_wctomb+0x18>
 8008da2:	2aff      	cmp	r2, #255	@ 0xff
 8008da4:	d904      	bls.n	8008db0 <__ascii_wctomb+0x14>
 8008da6:	228a      	movs	r2, #138	@ 0x8a
 8008da8:	601a      	str	r2, [r3, #0]
 8008daa:	f04f 30ff 	mov.w	r0, #4294967295
 8008dae:	4770      	bx	lr
 8008db0:	700a      	strb	r2, [r1, #0]
 8008db2:	2001      	movs	r0, #1
 8008db4:	4770      	bx	lr

08008db6 <__ssputs_r>:
 8008db6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dba:	688e      	ldr	r6, [r1, #8]
 8008dbc:	461f      	mov	r7, r3
 8008dbe:	42be      	cmp	r6, r7
 8008dc0:	680b      	ldr	r3, [r1, #0]
 8008dc2:	4682      	mov	sl, r0
 8008dc4:	460c      	mov	r4, r1
 8008dc6:	4690      	mov	r8, r2
 8008dc8:	d82d      	bhi.n	8008e26 <__ssputs_r+0x70>
 8008dca:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008dce:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008dd2:	d026      	beq.n	8008e22 <__ssputs_r+0x6c>
 8008dd4:	6965      	ldr	r5, [r4, #20]
 8008dd6:	6909      	ldr	r1, [r1, #16]
 8008dd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ddc:	eba3 0901 	sub.w	r9, r3, r1
 8008de0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008de4:	1c7b      	adds	r3, r7, #1
 8008de6:	444b      	add	r3, r9
 8008de8:	106d      	asrs	r5, r5, #1
 8008dea:	429d      	cmp	r5, r3
 8008dec:	bf38      	it	cc
 8008dee:	461d      	movcc	r5, r3
 8008df0:	0553      	lsls	r3, r2, #21
 8008df2:	d527      	bpl.n	8008e44 <__ssputs_r+0x8e>
 8008df4:	4629      	mov	r1, r5
 8008df6:	f7ff fa0d 	bl	8008214 <_malloc_r>
 8008dfa:	4606      	mov	r6, r0
 8008dfc:	b360      	cbz	r0, 8008e58 <__ssputs_r+0xa2>
 8008dfe:	6921      	ldr	r1, [r4, #16]
 8008e00:	464a      	mov	r2, r9
 8008e02:	f7fd ffe2 	bl	8006dca <memcpy>
 8008e06:	89a3      	ldrh	r3, [r4, #12]
 8008e08:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e10:	81a3      	strh	r3, [r4, #12]
 8008e12:	6126      	str	r6, [r4, #16]
 8008e14:	6165      	str	r5, [r4, #20]
 8008e16:	444e      	add	r6, r9
 8008e18:	eba5 0509 	sub.w	r5, r5, r9
 8008e1c:	6026      	str	r6, [r4, #0]
 8008e1e:	60a5      	str	r5, [r4, #8]
 8008e20:	463e      	mov	r6, r7
 8008e22:	42be      	cmp	r6, r7
 8008e24:	d900      	bls.n	8008e28 <__ssputs_r+0x72>
 8008e26:	463e      	mov	r6, r7
 8008e28:	6820      	ldr	r0, [r4, #0]
 8008e2a:	4632      	mov	r2, r6
 8008e2c:	4641      	mov	r1, r8
 8008e2e:	f000 f9c5 	bl	80091bc <memmove>
 8008e32:	68a3      	ldr	r3, [r4, #8]
 8008e34:	1b9b      	subs	r3, r3, r6
 8008e36:	60a3      	str	r3, [r4, #8]
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	4433      	add	r3, r6
 8008e3c:	6023      	str	r3, [r4, #0]
 8008e3e:	2000      	movs	r0, #0
 8008e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e44:	462a      	mov	r2, r5
 8008e46:	f000 fa15 	bl	8009274 <_realloc_r>
 8008e4a:	4606      	mov	r6, r0
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d1e0      	bne.n	8008e12 <__ssputs_r+0x5c>
 8008e50:	6921      	ldr	r1, [r4, #16]
 8008e52:	4650      	mov	r0, sl
 8008e54:	f7fe fe30 	bl	8007ab8 <_free_r>
 8008e58:	230c      	movs	r3, #12
 8008e5a:	f8ca 3000 	str.w	r3, [sl]
 8008e5e:	89a3      	ldrh	r3, [r4, #12]
 8008e60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e64:	81a3      	strh	r3, [r4, #12]
 8008e66:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6a:	e7e9      	b.n	8008e40 <__ssputs_r+0x8a>

08008e6c <_svfiprintf_r>:
 8008e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e70:	4698      	mov	r8, r3
 8008e72:	898b      	ldrh	r3, [r1, #12]
 8008e74:	061b      	lsls	r3, r3, #24
 8008e76:	b09d      	sub	sp, #116	@ 0x74
 8008e78:	4607      	mov	r7, r0
 8008e7a:	460d      	mov	r5, r1
 8008e7c:	4614      	mov	r4, r2
 8008e7e:	d510      	bpl.n	8008ea2 <_svfiprintf_r+0x36>
 8008e80:	690b      	ldr	r3, [r1, #16]
 8008e82:	b973      	cbnz	r3, 8008ea2 <_svfiprintf_r+0x36>
 8008e84:	2140      	movs	r1, #64	@ 0x40
 8008e86:	f7ff f9c5 	bl	8008214 <_malloc_r>
 8008e8a:	6028      	str	r0, [r5, #0]
 8008e8c:	6128      	str	r0, [r5, #16]
 8008e8e:	b930      	cbnz	r0, 8008e9e <_svfiprintf_r+0x32>
 8008e90:	230c      	movs	r3, #12
 8008e92:	603b      	str	r3, [r7, #0]
 8008e94:	f04f 30ff 	mov.w	r0, #4294967295
 8008e98:	b01d      	add	sp, #116	@ 0x74
 8008e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e9e:	2340      	movs	r3, #64	@ 0x40
 8008ea0:	616b      	str	r3, [r5, #20]
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ea6:	2320      	movs	r3, #32
 8008ea8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008eac:	f8cd 800c 	str.w	r8, [sp, #12]
 8008eb0:	2330      	movs	r3, #48	@ 0x30
 8008eb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009050 <_svfiprintf_r+0x1e4>
 8008eb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008eba:	f04f 0901 	mov.w	r9, #1
 8008ebe:	4623      	mov	r3, r4
 8008ec0:	469a      	mov	sl, r3
 8008ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ec6:	b10a      	cbz	r2, 8008ecc <_svfiprintf_r+0x60>
 8008ec8:	2a25      	cmp	r2, #37	@ 0x25
 8008eca:	d1f9      	bne.n	8008ec0 <_svfiprintf_r+0x54>
 8008ecc:	ebba 0b04 	subs.w	fp, sl, r4
 8008ed0:	d00b      	beq.n	8008eea <_svfiprintf_r+0x7e>
 8008ed2:	465b      	mov	r3, fp
 8008ed4:	4622      	mov	r2, r4
 8008ed6:	4629      	mov	r1, r5
 8008ed8:	4638      	mov	r0, r7
 8008eda:	f7ff ff6c 	bl	8008db6 <__ssputs_r>
 8008ede:	3001      	adds	r0, #1
 8008ee0:	f000 80a7 	beq.w	8009032 <_svfiprintf_r+0x1c6>
 8008ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ee6:	445a      	add	r2, fp
 8008ee8:	9209      	str	r2, [sp, #36]	@ 0x24
 8008eea:	f89a 3000 	ldrb.w	r3, [sl]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f000 809f 	beq.w	8009032 <_svfiprintf_r+0x1c6>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8008efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008efe:	f10a 0a01 	add.w	sl, sl, #1
 8008f02:	9304      	str	r3, [sp, #16]
 8008f04:	9307      	str	r3, [sp, #28]
 8008f06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f0c:	4654      	mov	r4, sl
 8008f0e:	2205      	movs	r2, #5
 8008f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f14:	484e      	ldr	r0, [pc, #312]	@ (8009050 <_svfiprintf_r+0x1e4>)
 8008f16:	f7f7 f963 	bl	80001e0 <memchr>
 8008f1a:	9a04      	ldr	r2, [sp, #16]
 8008f1c:	b9d8      	cbnz	r0, 8008f56 <_svfiprintf_r+0xea>
 8008f1e:	06d0      	lsls	r0, r2, #27
 8008f20:	bf44      	itt	mi
 8008f22:	2320      	movmi	r3, #32
 8008f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f28:	0711      	lsls	r1, r2, #28
 8008f2a:	bf44      	itt	mi
 8008f2c:	232b      	movmi	r3, #43	@ 0x2b
 8008f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f32:	f89a 3000 	ldrb.w	r3, [sl]
 8008f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f38:	d015      	beq.n	8008f66 <_svfiprintf_r+0xfa>
 8008f3a:	9a07      	ldr	r2, [sp, #28]
 8008f3c:	4654      	mov	r4, sl
 8008f3e:	2000      	movs	r0, #0
 8008f40:	f04f 0c0a 	mov.w	ip, #10
 8008f44:	4621      	mov	r1, r4
 8008f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f4a:	3b30      	subs	r3, #48	@ 0x30
 8008f4c:	2b09      	cmp	r3, #9
 8008f4e:	d94b      	bls.n	8008fe8 <_svfiprintf_r+0x17c>
 8008f50:	b1b0      	cbz	r0, 8008f80 <_svfiprintf_r+0x114>
 8008f52:	9207      	str	r2, [sp, #28]
 8008f54:	e014      	b.n	8008f80 <_svfiprintf_r+0x114>
 8008f56:	eba0 0308 	sub.w	r3, r0, r8
 8008f5a:	fa09 f303 	lsl.w	r3, r9, r3
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	9304      	str	r3, [sp, #16]
 8008f62:	46a2      	mov	sl, r4
 8008f64:	e7d2      	b.n	8008f0c <_svfiprintf_r+0xa0>
 8008f66:	9b03      	ldr	r3, [sp, #12]
 8008f68:	1d19      	adds	r1, r3, #4
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	9103      	str	r1, [sp, #12]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	bfbb      	ittet	lt
 8008f72:	425b      	neglt	r3, r3
 8008f74:	f042 0202 	orrlt.w	r2, r2, #2
 8008f78:	9307      	strge	r3, [sp, #28]
 8008f7a:	9307      	strlt	r3, [sp, #28]
 8008f7c:	bfb8      	it	lt
 8008f7e:	9204      	strlt	r2, [sp, #16]
 8008f80:	7823      	ldrb	r3, [r4, #0]
 8008f82:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f84:	d10a      	bne.n	8008f9c <_svfiprintf_r+0x130>
 8008f86:	7863      	ldrb	r3, [r4, #1]
 8008f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f8a:	d132      	bne.n	8008ff2 <_svfiprintf_r+0x186>
 8008f8c:	9b03      	ldr	r3, [sp, #12]
 8008f8e:	1d1a      	adds	r2, r3, #4
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	9203      	str	r2, [sp, #12]
 8008f94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f98:	3402      	adds	r4, #2
 8008f9a:	9305      	str	r3, [sp, #20]
 8008f9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009060 <_svfiprintf_r+0x1f4>
 8008fa0:	7821      	ldrb	r1, [r4, #0]
 8008fa2:	2203      	movs	r2, #3
 8008fa4:	4650      	mov	r0, sl
 8008fa6:	f7f7 f91b 	bl	80001e0 <memchr>
 8008faa:	b138      	cbz	r0, 8008fbc <_svfiprintf_r+0x150>
 8008fac:	9b04      	ldr	r3, [sp, #16]
 8008fae:	eba0 000a 	sub.w	r0, r0, sl
 8008fb2:	2240      	movs	r2, #64	@ 0x40
 8008fb4:	4082      	lsls	r2, r0
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	3401      	adds	r4, #1
 8008fba:	9304      	str	r3, [sp, #16]
 8008fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc0:	4824      	ldr	r0, [pc, #144]	@ (8009054 <_svfiprintf_r+0x1e8>)
 8008fc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fc6:	2206      	movs	r2, #6
 8008fc8:	f7f7 f90a 	bl	80001e0 <memchr>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	d036      	beq.n	800903e <_svfiprintf_r+0x1d2>
 8008fd0:	4b21      	ldr	r3, [pc, #132]	@ (8009058 <_svfiprintf_r+0x1ec>)
 8008fd2:	bb1b      	cbnz	r3, 800901c <_svfiprintf_r+0x1b0>
 8008fd4:	9b03      	ldr	r3, [sp, #12]
 8008fd6:	3307      	adds	r3, #7
 8008fd8:	f023 0307 	bic.w	r3, r3, #7
 8008fdc:	3308      	adds	r3, #8
 8008fde:	9303      	str	r3, [sp, #12]
 8008fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe2:	4433      	add	r3, r6
 8008fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fe6:	e76a      	b.n	8008ebe <_svfiprintf_r+0x52>
 8008fe8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fec:	460c      	mov	r4, r1
 8008fee:	2001      	movs	r0, #1
 8008ff0:	e7a8      	b.n	8008f44 <_svfiprintf_r+0xd8>
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	3401      	adds	r4, #1
 8008ff6:	9305      	str	r3, [sp, #20]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	f04f 0c0a 	mov.w	ip, #10
 8008ffe:	4620      	mov	r0, r4
 8009000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009004:	3a30      	subs	r2, #48	@ 0x30
 8009006:	2a09      	cmp	r2, #9
 8009008:	d903      	bls.n	8009012 <_svfiprintf_r+0x1a6>
 800900a:	2b00      	cmp	r3, #0
 800900c:	d0c6      	beq.n	8008f9c <_svfiprintf_r+0x130>
 800900e:	9105      	str	r1, [sp, #20]
 8009010:	e7c4      	b.n	8008f9c <_svfiprintf_r+0x130>
 8009012:	fb0c 2101 	mla	r1, ip, r1, r2
 8009016:	4604      	mov	r4, r0
 8009018:	2301      	movs	r3, #1
 800901a:	e7f0      	b.n	8008ffe <_svfiprintf_r+0x192>
 800901c:	ab03      	add	r3, sp, #12
 800901e:	9300      	str	r3, [sp, #0]
 8009020:	462a      	mov	r2, r5
 8009022:	4b0e      	ldr	r3, [pc, #56]	@ (800905c <_svfiprintf_r+0x1f0>)
 8009024:	a904      	add	r1, sp, #16
 8009026:	4638      	mov	r0, r7
 8009028:	f7fc ff28 	bl	8005e7c <_printf_float>
 800902c:	1c42      	adds	r2, r0, #1
 800902e:	4606      	mov	r6, r0
 8009030:	d1d6      	bne.n	8008fe0 <_svfiprintf_r+0x174>
 8009032:	89ab      	ldrh	r3, [r5, #12]
 8009034:	065b      	lsls	r3, r3, #25
 8009036:	f53f af2d 	bmi.w	8008e94 <_svfiprintf_r+0x28>
 800903a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800903c:	e72c      	b.n	8008e98 <_svfiprintf_r+0x2c>
 800903e:	ab03      	add	r3, sp, #12
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	462a      	mov	r2, r5
 8009044:	4b05      	ldr	r3, [pc, #20]	@ (800905c <_svfiprintf_r+0x1f0>)
 8009046:	a904      	add	r1, sp, #16
 8009048:	4638      	mov	r0, r7
 800904a:	f7fd f9af 	bl	80063ac <_printf_i>
 800904e:	e7ed      	b.n	800902c <_svfiprintf_r+0x1c0>
 8009050:	0800e93d 	.word	0x0800e93d
 8009054:	0800e947 	.word	0x0800e947
 8009058:	08005e7d 	.word	0x08005e7d
 800905c:	08008db7 	.word	0x08008db7
 8009060:	0800e943 	.word	0x0800e943

08009064 <__sflush_r>:
 8009064:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800906c:	0716      	lsls	r6, r2, #28
 800906e:	4605      	mov	r5, r0
 8009070:	460c      	mov	r4, r1
 8009072:	d454      	bmi.n	800911e <__sflush_r+0xba>
 8009074:	684b      	ldr	r3, [r1, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	dc02      	bgt.n	8009080 <__sflush_r+0x1c>
 800907a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800907c:	2b00      	cmp	r3, #0
 800907e:	dd48      	ble.n	8009112 <__sflush_r+0xae>
 8009080:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009082:	2e00      	cmp	r6, #0
 8009084:	d045      	beq.n	8009112 <__sflush_r+0xae>
 8009086:	2300      	movs	r3, #0
 8009088:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800908c:	682f      	ldr	r7, [r5, #0]
 800908e:	6a21      	ldr	r1, [r4, #32]
 8009090:	602b      	str	r3, [r5, #0]
 8009092:	d030      	beq.n	80090f6 <__sflush_r+0x92>
 8009094:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009096:	89a3      	ldrh	r3, [r4, #12]
 8009098:	0759      	lsls	r1, r3, #29
 800909a:	d505      	bpl.n	80090a8 <__sflush_r+0x44>
 800909c:	6863      	ldr	r3, [r4, #4]
 800909e:	1ad2      	subs	r2, r2, r3
 80090a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090a2:	b10b      	cbz	r3, 80090a8 <__sflush_r+0x44>
 80090a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090a6:	1ad2      	subs	r2, r2, r3
 80090a8:	2300      	movs	r3, #0
 80090aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090ac:	6a21      	ldr	r1, [r4, #32]
 80090ae:	4628      	mov	r0, r5
 80090b0:	47b0      	blx	r6
 80090b2:	1c43      	adds	r3, r0, #1
 80090b4:	89a3      	ldrh	r3, [r4, #12]
 80090b6:	d106      	bne.n	80090c6 <__sflush_r+0x62>
 80090b8:	6829      	ldr	r1, [r5, #0]
 80090ba:	291d      	cmp	r1, #29
 80090bc:	d82b      	bhi.n	8009116 <__sflush_r+0xb2>
 80090be:	4a2a      	ldr	r2, [pc, #168]	@ (8009168 <__sflush_r+0x104>)
 80090c0:	40ca      	lsrs	r2, r1
 80090c2:	07d6      	lsls	r6, r2, #31
 80090c4:	d527      	bpl.n	8009116 <__sflush_r+0xb2>
 80090c6:	2200      	movs	r2, #0
 80090c8:	6062      	str	r2, [r4, #4]
 80090ca:	04d9      	lsls	r1, r3, #19
 80090cc:	6922      	ldr	r2, [r4, #16]
 80090ce:	6022      	str	r2, [r4, #0]
 80090d0:	d504      	bpl.n	80090dc <__sflush_r+0x78>
 80090d2:	1c42      	adds	r2, r0, #1
 80090d4:	d101      	bne.n	80090da <__sflush_r+0x76>
 80090d6:	682b      	ldr	r3, [r5, #0]
 80090d8:	b903      	cbnz	r3, 80090dc <__sflush_r+0x78>
 80090da:	6560      	str	r0, [r4, #84]	@ 0x54
 80090dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090de:	602f      	str	r7, [r5, #0]
 80090e0:	b1b9      	cbz	r1, 8009112 <__sflush_r+0xae>
 80090e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090e6:	4299      	cmp	r1, r3
 80090e8:	d002      	beq.n	80090f0 <__sflush_r+0x8c>
 80090ea:	4628      	mov	r0, r5
 80090ec:	f7fe fce4 	bl	8007ab8 <_free_r>
 80090f0:	2300      	movs	r3, #0
 80090f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80090f4:	e00d      	b.n	8009112 <__sflush_r+0xae>
 80090f6:	2301      	movs	r3, #1
 80090f8:	4628      	mov	r0, r5
 80090fa:	47b0      	blx	r6
 80090fc:	4602      	mov	r2, r0
 80090fe:	1c50      	adds	r0, r2, #1
 8009100:	d1c9      	bne.n	8009096 <__sflush_r+0x32>
 8009102:	682b      	ldr	r3, [r5, #0]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d0c6      	beq.n	8009096 <__sflush_r+0x32>
 8009108:	2b1d      	cmp	r3, #29
 800910a:	d001      	beq.n	8009110 <__sflush_r+0xac>
 800910c:	2b16      	cmp	r3, #22
 800910e:	d11e      	bne.n	800914e <__sflush_r+0xea>
 8009110:	602f      	str	r7, [r5, #0]
 8009112:	2000      	movs	r0, #0
 8009114:	e022      	b.n	800915c <__sflush_r+0xf8>
 8009116:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800911a:	b21b      	sxth	r3, r3
 800911c:	e01b      	b.n	8009156 <__sflush_r+0xf2>
 800911e:	690f      	ldr	r7, [r1, #16]
 8009120:	2f00      	cmp	r7, #0
 8009122:	d0f6      	beq.n	8009112 <__sflush_r+0xae>
 8009124:	0793      	lsls	r3, r2, #30
 8009126:	680e      	ldr	r6, [r1, #0]
 8009128:	bf08      	it	eq
 800912a:	694b      	ldreq	r3, [r1, #20]
 800912c:	600f      	str	r7, [r1, #0]
 800912e:	bf18      	it	ne
 8009130:	2300      	movne	r3, #0
 8009132:	eba6 0807 	sub.w	r8, r6, r7
 8009136:	608b      	str	r3, [r1, #8]
 8009138:	f1b8 0f00 	cmp.w	r8, #0
 800913c:	dde9      	ble.n	8009112 <__sflush_r+0xae>
 800913e:	6a21      	ldr	r1, [r4, #32]
 8009140:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009142:	4643      	mov	r3, r8
 8009144:	463a      	mov	r2, r7
 8009146:	4628      	mov	r0, r5
 8009148:	47b0      	blx	r6
 800914a:	2800      	cmp	r0, #0
 800914c:	dc08      	bgt.n	8009160 <__sflush_r+0xfc>
 800914e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009156:	81a3      	strh	r3, [r4, #12]
 8009158:	f04f 30ff 	mov.w	r0, #4294967295
 800915c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009160:	4407      	add	r7, r0
 8009162:	eba8 0800 	sub.w	r8, r8, r0
 8009166:	e7e7      	b.n	8009138 <__sflush_r+0xd4>
 8009168:	20400001 	.word	0x20400001

0800916c <_fflush_r>:
 800916c:	b538      	push	{r3, r4, r5, lr}
 800916e:	690b      	ldr	r3, [r1, #16]
 8009170:	4605      	mov	r5, r0
 8009172:	460c      	mov	r4, r1
 8009174:	b913      	cbnz	r3, 800917c <_fflush_r+0x10>
 8009176:	2500      	movs	r5, #0
 8009178:	4628      	mov	r0, r5
 800917a:	bd38      	pop	{r3, r4, r5, pc}
 800917c:	b118      	cbz	r0, 8009186 <_fflush_r+0x1a>
 800917e:	6a03      	ldr	r3, [r0, #32]
 8009180:	b90b      	cbnz	r3, 8009186 <_fflush_r+0x1a>
 8009182:	f7fd fccb 	bl	8006b1c <__sinit>
 8009186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d0f3      	beq.n	8009176 <_fflush_r+0xa>
 800918e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009190:	07d0      	lsls	r0, r2, #31
 8009192:	d404      	bmi.n	800919e <_fflush_r+0x32>
 8009194:	0599      	lsls	r1, r3, #22
 8009196:	d402      	bmi.n	800919e <_fflush_r+0x32>
 8009198:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800919a:	f7fd fe14 	bl	8006dc6 <__retarget_lock_acquire_recursive>
 800919e:	4628      	mov	r0, r5
 80091a0:	4621      	mov	r1, r4
 80091a2:	f7ff ff5f 	bl	8009064 <__sflush_r>
 80091a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091a8:	07da      	lsls	r2, r3, #31
 80091aa:	4605      	mov	r5, r0
 80091ac:	d4e4      	bmi.n	8009178 <_fflush_r+0xc>
 80091ae:	89a3      	ldrh	r3, [r4, #12]
 80091b0:	059b      	lsls	r3, r3, #22
 80091b2:	d4e1      	bmi.n	8009178 <_fflush_r+0xc>
 80091b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091b6:	f7fd fe07 	bl	8006dc8 <__retarget_lock_release_recursive>
 80091ba:	e7dd      	b.n	8009178 <_fflush_r+0xc>

080091bc <memmove>:
 80091bc:	4288      	cmp	r0, r1
 80091be:	b510      	push	{r4, lr}
 80091c0:	eb01 0402 	add.w	r4, r1, r2
 80091c4:	d902      	bls.n	80091cc <memmove+0x10>
 80091c6:	4284      	cmp	r4, r0
 80091c8:	4623      	mov	r3, r4
 80091ca:	d807      	bhi.n	80091dc <memmove+0x20>
 80091cc:	1e43      	subs	r3, r0, #1
 80091ce:	42a1      	cmp	r1, r4
 80091d0:	d008      	beq.n	80091e4 <memmove+0x28>
 80091d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091da:	e7f8      	b.n	80091ce <memmove+0x12>
 80091dc:	4402      	add	r2, r0
 80091de:	4601      	mov	r1, r0
 80091e0:	428a      	cmp	r2, r1
 80091e2:	d100      	bne.n	80091e6 <memmove+0x2a>
 80091e4:	bd10      	pop	{r4, pc}
 80091e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091ee:	e7f7      	b.n	80091e0 <memmove+0x24>

080091f0 <_sbrk_r>:
 80091f0:	b538      	push	{r3, r4, r5, lr}
 80091f2:	4d06      	ldr	r5, [pc, #24]	@ (800920c <_sbrk_r+0x1c>)
 80091f4:	2300      	movs	r3, #0
 80091f6:	4604      	mov	r4, r0
 80091f8:	4608      	mov	r0, r1
 80091fa:	602b      	str	r3, [r5, #0]
 80091fc:	f7f9 fa30 	bl	8002660 <_sbrk>
 8009200:	1c43      	adds	r3, r0, #1
 8009202:	d102      	bne.n	800920a <_sbrk_r+0x1a>
 8009204:	682b      	ldr	r3, [r5, #0]
 8009206:	b103      	cbz	r3, 800920a <_sbrk_r+0x1a>
 8009208:	6023      	str	r3, [r4, #0]
 800920a:	bd38      	pop	{r3, r4, r5, pc}
 800920c:	20000cd0 	.word	0x20000cd0

08009210 <__assert_func>:
 8009210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009212:	4614      	mov	r4, r2
 8009214:	461a      	mov	r2, r3
 8009216:	4b09      	ldr	r3, [pc, #36]	@ (800923c <__assert_func+0x2c>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4605      	mov	r5, r0
 800921c:	68d8      	ldr	r0, [r3, #12]
 800921e:	b14c      	cbz	r4, 8009234 <__assert_func+0x24>
 8009220:	4b07      	ldr	r3, [pc, #28]	@ (8009240 <__assert_func+0x30>)
 8009222:	9100      	str	r1, [sp, #0]
 8009224:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009228:	4906      	ldr	r1, [pc, #24]	@ (8009244 <__assert_func+0x34>)
 800922a:	462b      	mov	r3, r5
 800922c:	f000 f850 	bl	80092d0 <fiprintf>
 8009230:	f000 f860 	bl	80092f4 <abort>
 8009234:	4b04      	ldr	r3, [pc, #16]	@ (8009248 <__assert_func+0x38>)
 8009236:	461c      	mov	r4, r3
 8009238:	e7f3      	b.n	8009222 <__assert_func+0x12>
 800923a:	bf00      	nop
 800923c:	200001a4 	.word	0x200001a4
 8009240:	0800e94e 	.word	0x0800e94e
 8009244:	0800e95b 	.word	0x0800e95b
 8009248:	0800e989 	.word	0x0800e989

0800924c <_calloc_r>:
 800924c:	b570      	push	{r4, r5, r6, lr}
 800924e:	fba1 5402 	umull	r5, r4, r1, r2
 8009252:	b934      	cbnz	r4, 8009262 <_calloc_r+0x16>
 8009254:	4629      	mov	r1, r5
 8009256:	f7fe ffdd 	bl	8008214 <_malloc_r>
 800925a:	4606      	mov	r6, r0
 800925c:	b928      	cbnz	r0, 800926a <_calloc_r+0x1e>
 800925e:	4630      	mov	r0, r6
 8009260:	bd70      	pop	{r4, r5, r6, pc}
 8009262:	220c      	movs	r2, #12
 8009264:	6002      	str	r2, [r0, #0]
 8009266:	2600      	movs	r6, #0
 8009268:	e7f9      	b.n	800925e <_calloc_r+0x12>
 800926a:	462a      	mov	r2, r5
 800926c:	4621      	mov	r1, r4
 800926e:	f7fd fcf0 	bl	8006c52 <memset>
 8009272:	e7f4      	b.n	800925e <_calloc_r+0x12>

08009274 <_realloc_r>:
 8009274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009278:	4607      	mov	r7, r0
 800927a:	4614      	mov	r4, r2
 800927c:	460d      	mov	r5, r1
 800927e:	b921      	cbnz	r1, 800928a <_realloc_r+0x16>
 8009280:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009284:	4611      	mov	r1, r2
 8009286:	f7fe bfc5 	b.w	8008214 <_malloc_r>
 800928a:	b92a      	cbnz	r2, 8009298 <_realloc_r+0x24>
 800928c:	f7fe fc14 	bl	8007ab8 <_free_r>
 8009290:	4625      	mov	r5, r4
 8009292:	4628      	mov	r0, r5
 8009294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009298:	f000 f833 	bl	8009302 <_malloc_usable_size_r>
 800929c:	4284      	cmp	r4, r0
 800929e:	4606      	mov	r6, r0
 80092a0:	d802      	bhi.n	80092a8 <_realloc_r+0x34>
 80092a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80092a6:	d8f4      	bhi.n	8009292 <_realloc_r+0x1e>
 80092a8:	4621      	mov	r1, r4
 80092aa:	4638      	mov	r0, r7
 80092ac:	f7fe ffb2 	bl	8008214 <_malloc_r>
 80092b0:	4680      	mov	r8, r0
 80092b2:	b908      	cbnz	r0, 80092b8 <_realloc_r+0x44>
 80092b4:	4645      	mov	r5, r8
 80092b6:	e7ec      	b.n	8009292 <_realloc_r+0x1e>
 80092b8:	42b4      	cmp	r4, r6
 80092ba:	4622      	mov	r2, r4
 80092bc:	4629      	mov	r1, r5
 80092be:	bf28      	it	cs
 80092c0:	4632      	movcs	r2, r6
 80092c2:	f7fd fd82 	bl	8006dca <memcpy>
 80092c6:	4629      	mov	r1, r5
 80092c8:	4638      	mov	r0, r7
 80092ca:	f7fe fbf5 	bl	8007ab8 <_free_r>
 80092ce:	e7f1      	b.n	80092b4 <_realloc_r+0x40>

080092d0 <fiprintf>:
 80092d0:	b40e      	push	{r1, r2, r3}
 80092d2:	b503      	push	{r0, r1, lr}
 80092d4:	4601      	mov	r1, r0
 80092d6:	ab03      	add	r3, sp, #12
 80092d8:	4805      	ldr	r0, [pc, #20]	@ (80092f0 <fiprintf+0x20>)
 80092da:	f853 2b04 	ldr.w	r2, [r3], #4
 80092de:	6800      	ldr	r0, [r0, #0]
 80092e0:	9301      	str	r3, [sp, #4]
 80092e2:	f000 f83f 	bl	8009364 <_vfiprintf_r>
 80092e6:	b002      	add	sp, #8
 80092e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80092ec:	b003      	add	sp, #12
 80092ee:	4770      	bx	lr
 80092f0:	200001a4 	.word	0x200001a4

080092f4 <abort>:
 80092f4:	b508      	push	{r3, lr}
 80092f6:	2006      	movs	r0, #6
 80092f8:	f000 fa08 	bl	800970c <raise>
 80092fc:	2001      	movs	r0, #1
 80092fe:	f7f9 f97f 	bl	8002600 <_exit>

08009302 <_malloc_usable_size_r>:
 8009302:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009306:	1f18      	subs	r0, r3, #4
 8009308:	2b00      	cmp	r3, #0
 800930a:	bfbc      	itt	lt
 800930c:	580b      	ldrlt	r3, [r1, r0]
 800930e:	18c0      	addlt	r0, r0, r3
 8009310:	4770      	bx	lr

08009312 <__sfputc_r>:
 8009312:	6893      	ldr	r3, [r2, #8]
 8009314:	3b01      	subs	r3, #1
 8009316:	2b00      	cmp	r3, #0
 8009318:	b410      	push	{r4}
 800931a:	6093      	str	r3, [r2, #8]
 800931c:	da08      	bge.n	8009330 <__sfputc_r+0x1e>
 800931e:	6994      	ldr	r4, [r2, #24]
 8009320:	42a3      	cmp	r3, r4
 8009322:	db01      	blt.n	8009328 <__sfputc_r+0x16>
 8009324:	290a      	cmp	r1, #10
 8009326:	d103      	bne.n	8009330 <__sfputc_r+0x1e>
 8009328:	f85d 4b04 	ldr.w	r4, [sp], #4
 800932c:	f000 b932 	b.w	8009594 <__swbuf_r>
 8009330:	6813      	ldr	r3, [r2, #0]
 8009332:	1c58      	adds	r0, r3, #1
 8009334:	6010      	str	r0, [r2, #0]
 8009336:	7019      	strb	r1, [r3, #0]
 8009338:	4608      	mov	r0, r1
 800933a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800933e:	4770      	bx	lr

08009340 <__sfputs_r>:
 8009340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009342:	4606      	mov	r6, r0
 8009344:	460f      	mov	r7, r1
 8009346:	4614      	mov	r4, r2
 8009348:	18d5      	adds	r5, r2, r3
 800934a:	42ac      	cmp	r4, r5
 800934c:	d101      	bne.n	8009352 <__sfputs_r+0x12>
 800934e:	2000      	movs	r0, #0
 8009350:	e007      	b.n	8009362 <__sfputs_r+0x22>
 8009352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009356:	463a      	mov	r2, r7
 8009358:	4630      	mov	r0, r6
 800935a:	f7ff ffda 	bl	8009312 <__sfputc_r>
 800935e:	1c43      	adds	r3, r0, #1
 8009360:	d1f3      	bne.n	800934a <__sfputs_r+0xa>
 8009362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009364 <_vfiprintf_r>:
 8009364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009368:	460d      	mov	r5, r1
 800936a:	b09d      	sub	sp, #116	@ 0x74
 800936c:	4614      	mov	r4, r2
 800936e:	4698      	mov	r8, r3
 8009370:	4606      	mov	r6, r0
 8009372:	b118      	cbz	r0, 800937c <_vfiprintf_r+0x18>
 8009374:	6a03      	ldr	r3, [r0, #32]
 8009376:	b90b      	cbnz	r3, 800937c <_vfiprintf_r+0x18>
 8009378:	f7fd fbd0 	bl	8006b1c <__sinit>
 800937c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800937e:	07d9      	lsls	r1, r3, #31
 8009380:	d405      	bmi.n	800938e <_vfiprintf_r+0x2a>
 8009382:	89ab      	ldrh	r3, [r5, #12]
 8009384:	059a      	lsls	r2, r3, #22
 8009386:	d402      	bmi.n	800938e <_vfiprintf_r+0x2a>
 8009388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800938a:	f7fd fd1c 	bl	8006dc6 <__retarget_lock_acquire_recursive>
 800938e:	89ab      	ldrh	r3, [r5, #12]
 8009390:	071b      	lsls	r3, r3, #28
 8009392:	d501      	bpl.n	8009398 <_vfiprintf_r+0x34>
 8009394:	692b      	ldr	r3, [r5, #16]
 8009396:	b99b      	cbnz	r3, 80093c0 <_vfiprintf_r+0x5c>
 8009398:	4629      	mov	r1, r5
 800939a:	4630      	mov	r0, r6
 800939c:	f000 f938 	bl	8009610 <__swsetup_r>
 80093a0:	b170      	cbz	r0, 80093c0 <_vfiprintf_r+0x5c>
 80093a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093a4:	07dc      	lsls	r4, r3, #31
 80093a6:	d504      	bpl.n	80093b2 <_vfiprintf_r+0x4e>
 80093a8:	f04f 30ff 	mov.w	r0, #4294967295
 80093ac:	b01d      	add	sp, #116	@ 0x74
 80093ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093b2:	89ab      	ldrh	r3, [r5, #12]
 80093b4:	0598      	lsls	r0, r3, #22
 80093b6:	d4f7      	bmi.n	80093a8 <_vfiprintf_r+0x44>
 80093b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093ba:	f7fd fd05 	bl	8006dc8 <__retarget_lock_release_recursive>
 80093be:	e7f3      	b.n	80093a8 <_vfiprintf_r+0x44>
 80093c0:	2300      	movs	r3, #0
 80093c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80093c4:	2320      	movs	r3, #32
 80093c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80093ce:	2330      	movs	r3, #48	@ 0x30
 80093d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009580 <_vfiprintf_r+0x21c>
 80093d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093d8:	f04f 0901 	mov.w	r9, #1
 80093dc:	4623      	mov	r3, r4
 80093de:	469a      	mov	sl, r3
 80093e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093e4:	b10a      	cbz	r2, 80093ea <_vfiprintf_r+0x86>
 80093e6:	2a25      	cmp	r2, #37	@ 0x25
 80093e8:	d1f9      	bne.n	80093de <_vfiprintf_r+0x7a>
 80093ea:	ebba 0b04 	subs.w	fp, sl, r4
 80093ee:	d00b      	beq.n	8009408 <_vfiprintf_r+0xa4>
 80093f0:	465b      	mov	r3, fp
 80093f2:	4622      	mov	r2, r4
 80093f4:	4629      	mov	r1, r5
 80093f6:	4630      	mov	r0, r6
 80093f8:	f7ff ffa2 	bl	8009340 <__sfputs_r>
 80093fc:	3001      	adds	r0, #1
 80093fe:	f000 80a7 	beq.w	8009550 <_vfiprintf_r+0x1ec>
 8009402:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009404:	445a      	add	r2, fp
 8009406:	9209      	str	r2, [sp, #36]	@ 0x24
 8009408:	f89a 3000 	ldrb.w	r3, [sl]
 800940c:	2b00      	cmp	r3, #0
 800940e:	f000 809f 	beq.w	8009550 <_vfiprintf_r+0x1ec>
 8009412:	2300      	movs	r3, #0
 8009414:	f04f 32ff 	mov.w	r2, #4294967295
 8009418:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800941c:	f10a 0a01 	add.w	sl, sl, #1
 8009420:	9304      	str	r3, [sp, #16]
 8009422:	9307      	str	r3, [sp, #28]
 8009424:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009428:	931a      	str	r3, [sp, #104]	@ 0x68
 800942a:	4654      	mov	r4, sl
 800942c:	2205      	movs	r2, #5
 800942e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009432:	4853      	ldr	r0, [pc, #332]	@ (8009580 <_vfiprintf_r+0x21c>)
 8009434:	f7f6 fed4 	bl	80001e0 <memchr>
 8009438:	9a04      	ldr	r2, [sp, #16]
 800943a:	b9d8      	cbnz	r0, 8009474 <_vfiprintf_r+0x110>
 800943c:	06d1      	lsls	r1, r2, #27
 800943e:	bf44      	itt	mi
 8009440:	2320      	movmi	r3, #32
 8009442:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009446:	0713      	lsls	r3, r2, #28
 8009448:	bf44      	itt	mi
 800944a:	232b      	movmi	r3, #43	@ 0x2b
 800944c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009450:	f89a 3000 	ldrb.w	r3, [sl]
 8009454:	2b2a      	cmp	r3, #42	@ 0x2a
 8009456:	d015      	beq.n	8009484 <_vfiprintf_r+0x120>
 8009458:	9a07      	ldr	r2, [sp, #28]
 800945a:	4654      	mov	r4, sl
 800945c:	2000      	movs	r0, #0
 800945e:	f04f 0c0a 	mov.w	ip, #10
 8009462:	4621      	mov	r1, r4
 8009464:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009468:	3b30      	subs	r3, #48	@ 0x30
 800946a:	2b09      	cmp	r3, #9
 800946c:	d94b      	bls.n	8009506 <_vfiprintf_r+0x1a2>
 800946e:	b1b0      	cbz	r0, 800949e <_vfiprintf_r+0x13a>
 8009470:	9207      	str	r2, [sp, #28]
 8009472:	e014      	b.n	800949e <_vfiprintf_r+0x13a>
 8009474:	eba0 0308 	sub.w	r3, r0, r8
 8009478:	fa09 f303 	lsl.w	r3, r9, r3
 800947c:	4313      	orrs	r3, r2
 800947e:	9304      	str	r3, [sp, #16]
 8009480:	46a2      	mov	sl, r4
 8009482:	e7d2      	b.n	800942a <_vfiprintf_r+0xc6>
 8009484:	9b03      	ldr	r3, [sp, #12]
 8009486:	1d19      	adds	r1, r3, #4
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	9103      	str	r1, [sp, #12]
 800948c:	2b00      	cmp	r3, #0
 800948e:	bfbb      	ittet	lt
 8009490:	425b      	neglt	r3, r3
 8009492:	f042 0202 	orrlt.w	r2, r2, #2
 8009496:	9307      	strge	r3, [sp, #28]
 8009498:	9307      	strlt	r3, [sp, #28]
 800949a:	bfb8      	it	lt
 800949c:	9204      	strlt	r2, [sp, #16]
 800949e:	7823      	ldrb	r3, [r4, #0]
 80094a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80094a2:	d10a      	bne.n	80094ba <_vfiprintf_r+0x156>
 80094a4:	7863      	ldrb	r3, [r4, #1]
 80094a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80094a8:	d132      	bne.n	8009510 <_vfiprintf_r+0x1ac>
 80094aa:	9b03      	ldr	r3, [sp, #12]
 80094ac:	1d1a      	adds	r2, r3, #4
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	9203      	str	r2, [sp, #12]
 80094b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094b6:	3402      	adds	r4, #2
 80094b8:	9305      	str	r3, [sp, #20]
 80094ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009590 <_vfiprintf_r+0x22c>
 80094be:	7821      	ldrb	r1, [r4, #0]
 80094c0:	2203      	movs	r2, #3
 80094c2:	4650      	mov	r0, sl
 80094c4:	f7f6 fe8c 	bl	80001e0 <memchr>
 80094c8:	b138      	cbz	r0, 80094da <_vfiprintf_r+0x176>
 80094ca:	9b04      	ldr	r3, [sp, #16]
 80094cc:	eba0 000a 	sub.w	r0, r0, sl
 80094d0:	2240      	movs	r2, #64	@ 0x40
 80094d2:	4082      	lsls	r2, r0
 80094d4:	4313      	orrs	r3, r2
 80094d6:	3401      	adds	r4, #1
 80094d8:	9304      	str	r3, [sp, #16]
 80094da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094de:	4829      	ldr	r0, [pc, #164]	@ (8009584 <_vfiprintf_r+0x220>)
 80094e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094e4:	2206      	movs	r2, #6
 80094e6:	f7f6 fe7b 	bl	80001e0 <memchr>
 80094ea:	2800      	cmp	r0, #0
 80094ec:	d03f      	beq.n	800956e <_vfiprintf_r+0x20a>
 80094ee:	4b26      	ldr	r3, [pc, #152]	@ (8009588 <_vfiprintf_r+0x224>)
 80094f0:	bb1b      	cbnz	r3, 800953a <_vfiprintf_r+0x1d6>
 80094f2:	9b03      	ldr	r3, [sp, #12]
 80094f4:	3307      	adds	r3, #7
 80094f6:	f023 0307 	bic.w	r3, r3, #7
 80094fa:	3308      	adds	r3, #8
 80094fc:	9303      	str	r3, [sp, #12]
 80094fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009500:	443b      	add	r3, r7
 8009502:	9309      	str	r3, [sp, #36]	@ 0x24
 8009504:	e76a      	b.n	80093dc <_vfiprintf_r+0x78>
 8009506:	fb0c 3202 	mla	r2, ip, r2, r3
 800950a:	460c      	mov	r4, r1
 800950c:	2001      	movs	r0, #1
 800950e:	e7a8      	b.n	8009462 <_vfiprintf_r+0xfe>
 8009510:	2300      	movs	r3, #0
 8009512:	3401      	adds	r4, #1
 8009514:	9305      	str	r3, [sp, #20]
 8009516:	4619      	mov	r1, r3
 8009518:	f04f 0c0a 	mov.w	ip, #10
 800951c:	4620      	mov	r0, r4
 800951e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009522:	3a30      	subs	r2, #48	@ 0x30
 8009524:	2a09      	cmp	r2, #9
 8009526:	d903      	bls.n	8009530 <_vfiprintf_r+0x1cc>
 8009528:	2b00      	cmp	r3, #0
 800952a:	d0c6      	beq.n	80094ba <_vfiprintf_r+0x156>
 800952c:	9105      	str	r1, [sp, #20]
 800952e:	e7c4      	b.n	80094ba <_vfiprintf_r+0x156>
 8009530:	fb0c 2101 	mla	r1, ip, r1, r2
 8009534:	4604      	mov	r4, r0
 8009536:	2301      	movs	r3, #1
 8009538:	e7f0      	b.n	800951c <_vfiprintf_r+0x1b8>
 800953a:	ab03      	add	r3, sp, #12
 800953c:	9300      	str	r3, [sp, #0]
 800953e:	462a      	mov	r2, r5
 8009540:	4b12      	ldr	r3, [pc, #72]	@ (800958c <_vfiprintf_r+0x228>)
 8009542:	a904      	add	r1, sp, #16
 8009544:	4630      	mov	r0, r6
 8009546:	f7fc fc99 	bl	8005e7c <_printf_float>
 800954a:	4607      	mov	r7, r0
 800954c:	1c78      	adds	r0, r7, #1
 800954e:	d1d6      	bne.n	80094fe <_vfiprintf_r+0x19a>
 8009550:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009552:	07d9      	lsls	r1, r3, #31
 8009554:	d405      	bmi.n	8009562 <_vfiprintf_r+0x1fe>
 8009556:	89ab      	ldrh	r3, [r5, #12]
 8009558:	059a      	lsls	r2, r3, #22
 800955a:	d402      	bmi.n	8009562 <_vfiprintf_r+0x1fe>
 800955c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800955e:	f7fd fc33 	bl	8006dc8 <__retarget_lock_release_recursive>
 8009562:	89ab      	ldrh	r3, [r5, #12]
 8009564:	065b      	lsls	r3, r3, #25
 8009566:	f53f af1f 	bmi.w	80093a8 <_vfiprintf_r+0x44>
 800956a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800956c:	e71e      	b.n	80093ac <_vfiprintf_r+0x48>
 800956e:	ab03      	add	r3, sp, #12
 8009570:	9300      	str	r3, [sp, #0]
 8009572:	462a      	mov	r2, r5
 8009574:	4b05      	ldr	r3, [pc, #20]	@ (800958c <_vfiprintf_r+0x228>)
 8009576:	a904      	add	r1, sp, #16
 8009578:	4630      	mov	r0, r6
 800957a:	f7fc ff17 	bl	80063ac <_printf_i>
 800957e:	e7e4      	b.n	800954a <_vfiprintf_r+0x1e6>
 8009580:	0800e93d 	.word	0x0800e93d
 8009584:	0800e947 	.word	0x0800e947
 8009588:	08005e7d 	.word	0x08005e7d
 800958c:	08009341 	.word	0x08009341
 8009590:	0800e943 	.word	0x0800e943

08009594 <__swbuf_r>:
 8009594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009596:	460e      	mov	r6, r1
 8009598:	4614      	mov	r4, r2
 800959a:	4605      	mov	r5, r0
 800959c:	b118      	cbz	r0, 80095a6 <__swbuf_r+0x12>
 800959e:	6a03      	ldr	r3, [r0, #32]
 80095a0:	b90b      	cbnz	r3, 80095a6 <__swbuf_r+0x12>
 80095a2:	f7fd fabb 	bl	8006b1c <__sinit>
 80095a6:	69a3      	ldr	r3, [r4, #24]
 80095a8:	60a3      	str	r3, [r4, #8]
 80095aa:	89a3      	ldrh	r3, [r4, #12]
 80095ac:	071a      	lsls	r2, r3, #28
 80095ae:	d501      	bpl.n	80095b4 <__swbuf_r+0x20>
 80095b0:	6923      	ldr	r3, [r4, #16]
 80095b2:	b943      	cbnz	r3, 80095c6 <__swbuf_r+0x32>
 80095b4:	4621      	mov	r1, r4
 80095b6:	4628      	mov	r0, r5
 80095b8:	f000 f82a 	bl	8009610 <__swsetup_r>
 80095bc:	b118      	cbz	r0, 80095c6 <__swbuf_r+0x32>
 80095be:	f04f 37ff 	mov.w	r7, #4294967295
 80095c2:	4638      	mov	r0, r7
 80095c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095c6:	6823      	ldr	r3, [r4, #0]
 80095c8:	6922      	ldr	r2, [r4, #16]
 80095ca:	1a98      	subs	r0, r3, r2
 80095cc:	6963      	ldr	r3, [r4, #20]
 80095ce:	b2f6      	uxtb	r6, r6
 80095d0:	4283      	cmp	r3, r0
 80095d2:	4637      	mov	r7, r6
 80095d4:	dc05      	bgt.n	80095e2 <__swbuf_r+0x4e>
 80095d6:	4621      	mov	r1, r4
 80095d8:	4628      	mov	r0, r5
 80095da:	f7ff fdc7 	bl	800916c <_fflush_r>
 80095de:	2800      	cmp	r0, #0
 80095e0:	d1ed      	bne.n	80095be <__swbuf_r+0x2a>
 80095e2:	68a3      	ldr	r3, [r4, #8]
 80095e4:	3b01      	subs	r3, #1
 80095e6:	60a3      	str	r3, [r4, #8]
 80095e8:	6823      	ldr	r3, [r4, #0]
 80095ea:	1c5a      	adds	r2, r3, #1
 80095ec:	6022      	str	r2, [r4, #0]
 80095ee:	701e      	strb	r6, [r3, #0]
 80095f0:	6962      	ldr	r2, [r4, #20]
 80095f2:	1c43      	adds	r3, r0, #1
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d004      	beq.n	8009602 <__swbuf_r+0x6e>
 80095f8:	89a3      	ldrh	r3, [r4, #12]
 80095fa:	07db      	lsls	r3, r3, #31
 80095fc:	d5e1      	bpl.n	80095c2 <__swbuf_r+0x2e>
 80095fe:	2e0a      	cmp	r6, #10
 8009600:	d1df      	bne.n	80095c2 <__swbuf_r+0x2e>
 8009602:	4621      	mov	r1, r4
 8009604:	4628      	mov	r0, r5
 8009606:	f7ff fdb1 	bl	800916c <_fflush_r>
 800960a:	2800      	cmp	r0, #0
 800960c:	d0d9      	beq.n	80095c2 <__swbuf_r+0x2e>
 800960e:	e7d6      	b.n	80095be <__swbuf_r+0x2a>

08009610 <__swsetup_r>:
 8009610:	b538      	push	{r3, r4, r5, lr}
 8009612:	4b29      	ldr	r3, [pc, #164]	@ (80096b8 <__swsetup_r+0xa8>)
 8009614:	4605      	mov	r5, r0
 8009616:	6818      	ldr	r0, [r3, #0]
 8009618:	460c      	mov	r4, r1
 800961a:	b118      	cbz	r0, 8009624 <__swsetup_r+0x14>
 800961c:	6a03      	ldr	r3, [r0, #32]
 800961e:	b90b      	cbnz	r3, 8009624 <__swsetup_r+0x14>
 8009620:	f7fd fa7c 	bl	8006b1c <__sinit>
 8009624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009628:	0719      	lsls	r1, r3, #28
 800962a:	d422      	bmi.n	8009672 <__swsetup_r+0x62>
 800962c:	06da      	lsls	r2, r3, #27
 800962e:	d407      	bmi.n	8009640 <__swsetup_r+0x30>
 8009630:	2209      	movs	r2, #9
 8009632:	602a      	str	r2, [r5, #0]
 8009634:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009638:	81a3      	strh	r3, [r4, #12]
 800963a:	f04f 30ff 	mov.w	r0, #4294967295
 800963e:	e033      	b.n	80096a8 <__swsetup_r+0x98>
 8009640:	0758      	lsls	r0, r3, #29
 8009642:	d512      	bpl.n	800966a <__swsetup_r+0x5a>
 8009644:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009646:	b141      	cbz	r1, 800965a <__swsetup_r+0x4a>
 8009648:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800964c:	4299      	cmp	r1, r3
 800964e:	d002      	beq.n	8009656 <__swsetup_r+0x46>
 8009650:	4628      	mov	r0, r5
 8009652:	f7fe fa31 	bl	8007ab8 <_free_r>
 8009656:	2300      	movs	r3, #0
 8009658:	6363      	str	r3, [r4, #52]	@ 0x34
 800965a:	89a3      	ldrh	r3, [r4, #12]
 800965c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009660:	81a3      	strh	r3, [r4, #12]
 8009662:	2300      	movs	r3, #0
 8009664:	6063      	str	r3, [r4, #4]
 8009666:	6923      	ldr	r3, [r4, #16]
 8009668:	6023      	str	r3, [r4, #0]
 800966a:	89a3      	ldrh	r3, [r4, #12]
 800966c:	f043 0308 	orr.w	r3, r3, #8
 8009670:	81a3      	strh	r3, [r4, #12]
 8009672:	6923      	ldr	r3, [r4, #16]
 8009674:	b94b      	cbnz	r3, 800968a <__swsetup_r+0x7a>
 8009676:	89a3      	ldrh	r3, [r4, #12]
 8009678:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800967c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009680:	d003      	beq.n	800968a <__swsetup_r+0x7a>
 8009682:	4621      	mov	r1, r4
 8009684:	4628      	mov	r0, r5
 8009686:	f000 f883 	bl	8009790 <__smakebuf_r>
 800968a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800968e:	f013 0201 	ands.w	r2, r3, #1
 8009692:	d00a      	beq.n	80096aa <__swsetup_r+0x9a>
 8009694:	2200      	movs	r2, #0
 8009696:	60a2      	str	r2, [r4, #8]
 8009698:	6962      	ldr	r2, [r4, #20]
 800969a:	4252      	negs	r2, r2
 800969c:	61a2      	str	r2, [r4, #24]
 800969e:	6922      	ldr	r2, [r4, #16]
 80096a0:	b942      	cbnz	r2, 80096b4 <__swsetup_r+0xa4>
 80096a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80096a6:	d1c5      	bne.n	8009634 <__swsetup_r+0x24>
 80096a8:	bd38      	pop	{r3, r4, r5, pc}
 80096aa:	0799      	lsls	r1, r3, #30
 80096ac:	bf58      	it	pl
 80096ae:	6962      	ldrpl	r2, [r4, #20]
 80096b0:	60a2      	str	r2, [r4, #8]
 80096b2:	e7f4      	b.n	800969e <__swsetup_r+0x8e>
 80096b4:	2000      	movs	r0, #0
 80096b6:	e7f7      	b.n	80096a8 <__swsetup_r+0x98>
 80096b8:	200001a4 	.word	0x200001a4

080096bc <_raise_r>:
 80096bc:	291f      	cmp	r1, #31
 80096be:	b538      	push	{r3, r4, r5, lr}
 80096c0:	4605      	mov	r5, r0
 80096c2:	460c      	mov	r4, r1
 80096c4:	d904      	bls.n	80096d0 <_raise_r+0x14>
 80096c6:	2316      	movs	r3, #22
 80096c8:	6003      	str	r3, [r0, #0]
 80096ca:	f04f 30ff 	mov.w	r0, #4294967295
 80096ce:	bd38      	pop	{r3, r4, r5, pc}
 80096d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80096d2:	b112      	cbz	r2, 80096da <_raise_r+0x1e>
 80096d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096d8:	b94b      	cbnz	r3, 80096ee <_raise_r+0x32>
 80096da:	4628      	mov	r0, r5
 80096dc:	f000 f830 	bl	8009740 <_getpid_r>
 80096e0:	4622      	mov	r2, r4
 80096e2:	4601      	mov	r1, r0
 80096e4:	4628      	mov	r0, r5
 80096e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096ea:	f000 b817 	b.w	800971c <_kill_r>
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d00a      	beq.n	8009708 <_raise_r+0x4c>
 80096f2:	1c59      	adds	r1, r3, #1
 80096f4:	d103      	bne.n	80096fe <_raise_r+0x42>
 80096f6:	2316      	movs	r3, #22
 80096f8:	6003      	str	r3, [r0, #0]
 80096fa:	2001      	movs	r0, #1
 80096fc:	e7e7      	b.n	80096ce <_raise_r+0x12>
 80096fe:	2100      	movs	r1, #0
 8009700:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009704:	4620      	mov	r0, r4
 8009706:	4798      	blx	r3
 8009708:	2000      	movs	r0, #0
 800970a:	e7e0      	b.n	80096ce <_raise_r+0x12>

0800970c <raise>:
 800970c:	4b02      	ldr	r3, [pc, #8]	@ (8009718 <raise+0xc>)
 800970e:	4601      	mov	r1, r0
 8009710:	6818      	ldr	r0, [r3, #0]
 8009712:	f7ff bfd3 	b.w	80096bc <_raise_r>
 8009716:	bf00      	nop
 8009718:	200001a4 	.word	0x200001a4

0800971c <_kill_r>:
 800971c:	b538      	push	{r3, r4, r5, lr}
 800971e:	4d07      	ldr	r5, [pc, #28]	@ (800973c <_kill_r+0x20>)
 8009720:	2300      	movs	r3, #0
 8009722:	4604      	mov	r4, r0
 8009724:	4608      	mov	r0, r1
 8009726:	4611      	mov	r1, r2
 8009728:	602b      	str	r3, [r5, #0]
 800972a:	f7f8 ff61 	bl	80025f0 <_kill>
 800972e:	1c43      	adds	r3, r0, #1
 8009730:	d102      	bne.n	8009738 <_kill_r+0x1c>
 8009732:	682b      	ldr	r3, [r5, #0]
 8009734:	b103      	cbz	r3, 8009738 <_kill_r+0x1c>
 8009736:	6023      	str	r3, [r4, #0]
 8009738:	bd38      	pop	{r3, r4, r5, pc}
 800973a:	bf00      	nop
 800973c:	20000cd0 	.word	0x20000cd0

08009740 <_getpid_r>:
 8009740:	f7f8 bf54 	b.w	80025ec <_getpid>

08009744 <__swhatbuf_r>:
 8009744:	b570      	push	{r4, r5, r6, lr}
 8009746:	460c      	mov	r4, r1
 8009748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800974c:	2900      	cmp	r1, #0
 800974e:	b096      	sub	sp, #88	@ 0x58
 8009750:	4615      	mov	r5, r2
 8009752:	461e      	mov	r6, r3
 8009754:	da0d      	bge.n	8009772 <__swhatbuf_r+0x2e>
 8009756:	89a3      	ldrh	r3, [r4, #12]
 8009758:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800975c:	f04f 0100 	mov.w	r1, #0
 8009760:	bf14      	ite	ne
 8009762:	2340      	movne	r3, #64	@ 0x40
 8009764:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009768:	2000      	movs	r0, #0
 800976a:	6031      	str	r1, [r6, #0]
 800976c:	602b      	str	r3, [r5, #0]
 800976e:	b016      	add	sp, #88	@ 0x58
 8009770:	bd70      	pop	{r4, r5, r6, pc}
 8009772:	466a      	mov	r2, sp
 8009774:	f000 f848 	bl	8009808 <_fstat_r>
 8009778:	2800      	cmp	r0, #0
 800977a:	dbec      	blt.n	8009756 <__swhatbuf_r+0x12>
 800977c:	9901      	ldr	r1, [sp, #4]
 800977e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009782:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009786:	4259      	negs	r1, r3
 8009788:	4159      	adcs	r1, r3
 800978a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800978e:	e7eb      	b.n	8009768 <__swhatbuf_r+0x24>

08009790 <__smakebuf_r>:
 8009790:	898b      	ldrh	r3, [r1, #12]
 8009792:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009794:	079d      	lsls	r5, r3, #30
 8009796:	4606      	mov	r6, r0
 8009798:	460c      	mov	r4, r1
 800979a:	d507      	bpl.n	80097ac <__smakebuf_r+0x1c>
 800979c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80097a0:	6023      	str	r3, [r4, #0]
 80097a2:	6123      	str	r3, [r4, #16]
 80097a4:	2301      	movs	r3, #1
 80097a6:	6163      	str	r3, [r4, #20]
 80097a8:	b003      	add	sp, #12
 80097aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097ac:	ab01      	add	r3, sp, #4
 80097ae:	466a      	mov	r2, sp
 80097b0:	f7ff ffc8 	bl	8009744 <__swhatbuf_r>
 80097b4:	9f00      	ldr	r7, [sp, #0]
 80097b6:	4605      	mov	r5, r0
 80097b8:	4639      	mov	r1, r7
 80097ba:	4630      	mov	r0, r6
 80097bc:	f7fe fd2a 	bl	8008214 <_malloc_r>
 80097c0:	b948      	cbnz	r0, 80097d6 <__smakebuf_r+0x46>
 80097c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097c6:	059a      	lsls	r2, r3, #22
 80097c8:	d4ee      	bmi.n	80097a8 <__smakebuf_r+0x18>
 80097ca:	f023 0303 	bic.w	r3, r3, #3
 80097ce:	f043 0302 	orr.w	r3, r3, #2
 80097d2:	81a3      	strh	r3, [r4, #12]
 80097d4:	e7e2      	b.n	800979c <__smakebuf_r+0xc>
 80097d6:	89a3      	ldrh	r3, [r4, #12]
 80097d8:	6020      	str	r0, [r4, #0]
 80097da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097de:	81a3      	strh	r3, [r4, #12]
 80097e0:	9b01      	ldr	r3, [sp, #4]
 80097e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80097e6:	b15b      	cbz	r3, 8009800 <__smakebuf_r+0x70>
 80097e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097ec:	4630      	mov	r0, r6
 80097ee:	f000 f81d 	bl	800982c <_isatty_r>
 80097f2:	b128      	cbz	r0, 8009800 <__smakebuf_r+0x70>
 80097f4:	89a3      	ldrh	r3, [r4, #12]
 80097f6:	f023 0303 	bic.w	r3, r3, #3
 80097fa:	f043 0301 	orr.w	r3, r3, #1
 80097fe:	81a3      	strh	r3, [r4, #12]
 8009800:	89a3      	ldrh	r3, [r4, #12]
 8009802:	431d      	orrs	r5, r3
 8009804:	81a5      	strh	r5, [r4, #12]
 8009806:	e7cf      	b.n	80097a8 <__smakebuf_r+0x18>

08009808 <_fstat_r>:
 8009808:	b538      	push	{r3, r4, r5, lr}
 800980a:	4d07      	ldr	r5, [pc, #28]	@ (8009828 <_fstat_r+0x20>)
 800980c:	2300      	movs	r3, #0
 800980e:	4604      	mov	r4, r0
 8009810:	4608      	mov	r0, r1
 8009812:	4611      	mov	r1, r2
 8009814:	602b      	str	r3, [r5, #0]
 8009816:	f7f8 ff19 	bl	800264c <_fstat>
 800981a:	1c43      	adds	r3, r0, #1
 800981c:	d102      	bne.n	8009824 <_fstat_r+0x1c>
 800981e:	682b      	ldr	r3, [r5, #0]
 8009820:	b103      	cbz	r3, 8009824 <_fstat_r+0x1c>
 8009822:	6023      	str	r3, [r4, #0]
 8009824:	bd38      	pop	{r3, r4, r5, pc}
 8009826:	bf00      	nop
 8009828:	20000cd0 	.word	0x20000cd0

0800982c <_isatty_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4d06      	ldr	r5, [pc, #24]	@ (8009848 <_isatty_r+0x1c>)
 8009830:	2300      	movs	r3, #0
 8009832:	4604      	mov	r4, r0
 8009834:	4608      	mov	r0, r1
 8009836:	602b      	str	r3, [r5, #0]
 8009838:	f7f8 ff0e 	bl	8002658 <_isatty>
 800983c:	1c43      	adds	r3, r0, #1
 800983e:	d102      	bne.n	8009846 <_isatty_r+0x1a>
 8009840:	682b      	ldr	r3, [r5, #0]
 8009842:	b103      	cbz	r3, 8009846 <_isatty_r+0x1a>
 8009844:	6023      	str	r3, [r4, #0]
 8009846:	bd38      	pop	{r3, r4, r5, pc}
 8009848:	20000cd0 	.word	0x20000cd0

0800984c <_init>:
 800984c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800984e:	bf00      	nop
 8009850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009852:	bc08      	pop	{r3}
 8009854:	469e      	mov	lr, r3
 8009856:	4770      	bx	lr

08009858 <_fini>:
 8009858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985a:	bf00      	nop
 800985c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800985e:	bc08      	pop	{r3}
 8009860:	469e      	mov	lr, r3
 8009862:	4770      	bx	lr
