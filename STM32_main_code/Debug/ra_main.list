
ra_main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000536c  08009890  08009890  0000a890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebfc  0800ebfc  000101d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ebfc  0800ebfc  0000fbfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec04  0800ec04  000101d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec04  0800ec04  0000fc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ec08  0800ec08  0000fc08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ec0c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b90  200001d8  0800ede0  000101d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000d68  0800ede0  00010d68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001db8d  00000000  00000000  00010204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043ad  00000000  00000000  0002dd91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000fad5  00000000  00000000  0003213e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001038  00000000  00000000  00041c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a71  00000000  00000000  00042c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ad37  00000000  00000000  000446c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024b40  00000000  00000000  0005f3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095a5d  00000000  00000000  00083f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000bc  00000000  00000000  00119995  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004418  00000000  00000000  00119a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0011de6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    000001ee  00000000  00000000  0011dedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000020  00000000  00000000  0011e0ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009874 	.word	0x08009874

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08009874 	.word	0x08009874

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <MultivariablePID_Init>:
#define CMD_SET_KI              ( ('K'<<8) | 'I') // "KI"
#define CMD_SET_KD              ( ('K'<<8) | 'D') // "KD"

#define MAX_UART_BUFFER 800

void MultivariablePID_Init(MultivariablePID *pid) {
 8001030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (int i = 0; i < NUM_JOINTS*NUM_JOINTS; i++) {
		pid->Kp_data[i] = 0.0f;
 8001034:	22c0      	movs	r2, #192	@ 0xc0
 8001036:	2100      	movs	r1, #0
void MultivariablePID_Init(MultivariablePID *pid) {
 8001038:	4604      	mov	r4, r0
		pid->Kp_data[i] = 0.0f;
 800103a:	f005 fe1e 	bl	8006c7a <memset>
		pid->Ki_data[i] = 0.0f;
		pid->Kd_data[i] = 0.0f;
	}

	arm_mat_init_f32(&(pid->Kp_mat), NUM_JOINTS, NUM_JOINTS, pid->Kp_data);
 800103e:	2204      	movs	r2, #4
 8001040:	4623      	mov	r3, r4
 8001042:	4611      	mov	r1, r2
 8001044:	f104 00c0 	add.w	r0, r4, #192	@ 0xc0
 8001048:	f004 f80a 	bl	8005060 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->Ki_mat), NUM_JOINTS, NUM_JOINTS, pid->Ki_data);
 800104c:	2204      	movs	r2, #4
 800104e:	4611      	mov	r1, r2
 8001050:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8001054:	f104 00c8 	add.w	r0, r4, #200	@ 0xc8
 8001058:	f004 f802 	bl	8005060 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->Kd_mat), NUM_JOINTS, NUM_JOINTS, pid->Kd_data);
 800105c:	2204      	movs	r2, #4
 800105e:	4611      	mov	r1, r2
 8001060:	f104 0380 	add.w	r3, r4, #128	@ 0x80
 8001064:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001068:	f003 fffa 	bl	8005060 <arm_mat_init_f32>

	// Initialize data arrays to zero
	for (int i = 0; i < NUM_JOINTS; i++) {
		pid->setpoint_data[i] = 2048.0f;
		pid->meas_data[i] = 0.0f;
 800106c:	f04f 0820 	mov.w	r8, #32
		pid->setpoint_data[i] = 2048.0f;
 8001070:	f04f 438a 	mov.w	r3, #1157627904	@ 0x45000000
 8001074:	f104 07e8 	add.w	r7, r4, #232	@ 0xe8
 8001078:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 800107c:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
 8001080:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001084:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
		pid->meas_data[i] = 0.0f;
 8001088:	4642      	mov	r2, r8
 800108a:	f504 7690 	add.w	r6, r4, #288	@ 0x120
 800108e:	2100      	movs	r1, #0
 8001090:	4638      	mov	r0, r7
 8001092:	f005 fdf2 	bl	8006c7a <memset>
 8001096:	f504 75b4 	add.w	r5, r4, #360	@ 0x168
		pid->output_data[i] = 0.0f;

		pid->error_data[i] = 0.0f;
 800109a:	2230      	movs	r2, #48	@ 0x30
 800109c:	2100      	movs	r1, #0
 800109e:	4630      	mov	r0, r6
 80010a0:	f005 fdeb 	bl	8006c7a <memset>
		pid->error_sum_data[i] = 0.0f;
		pid->error_prev_data[i] = 0.0f;

		pid->temp1_N_1_data[i] = 0.0f;
 80010a4:	4642      	mov	r2, r8
 80010a6:	2100      	movs	r1, #0
 80010a8:	4628      	mov	r0, r5
 80010aa:	f005 fde6 	bl	8006c7a <memset>
		pid->temp2_N_1_data[i] = 0.0f;
	}

	arm_mat_init_f32(&(pid->setpoint_mat), NUM_JOINTS, 1, pid->setpoint_data);
 80010ae:	f104 03d8 	add.w	r3, r4, #216	@ 0xd8
 80010b2:	f504 7084 	add.w	r0, r4, #264	@ 0x108
 80010b6:	2201      	movs	r2, #1
 80010b8:	2104      	movs	r1, #4
 80010ba:	f003 ffd1 	bl	8005060 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->meas_mat), NUM_JOINTS, 1, pid->meas_data);
 80010be:	463b      	mov	r3, r7
 80010c0:	f504 7088 	add.w	r0, r4, #272	@ 0x110
 80010c4:	2201      	movs	r2, #1
 80010c6:	2104      	movs	r1, #4
 80010c8:	f003 ffca 	bl	8005060 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->output_mat), NUM_JOINTS, 1, pid->output_data);
 80010cc:	f104 03f8 	add.w	r3, r4, #248	@ 0xf8
 80010d0:	f504 708c 	add.w	r0, r4, #280	@ 0x118
 80010d4:	2201      	movs	r2, #1
 80010d6:	2104      	movs	r1, #4
 80010d8:	f003 ffc2 	bl	8005060 <arm_mat_init_f32>

	arm_mat_init_f32(&(pid->error_mat), NUM_JOINTS, 1, pid->error_data);
 80010dc:	4633      	mov	r3, r6
 80010de:	f504 70a8 	add.w	r0, r4, #336	@ 0x150
 80010e2:	2201      	movs	r2, #1
 80010e4:	2104      	movs	r1, #4
 80010e6:	f003 ffbb 	bl	8005060 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->error_sum_mat), NUM_JOINTS, 1, pid->error_sum_data);
 80010ea:	f504 7398 	add.w	r3, r4, #304	@ 0x130
 80010ee:	f504 70ac 	add.w	r0, r4, #344	@ 0x158
 80010f2:	2201      	movs	r2, #1
 80010f4:	2104      	movs	r1, #4
 80010f6:	f003 ffb3 	bl	8005060 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->error_prev_mat), NUM_JOINTS, 1, pid->error_prev_data);
 80010fa:	f504 73a0 	add.w	r3, r4, #320	@ 0x140
 80010fe:	f504 70b0 	add.w	r0, r4, #352	@ 0x160
 8001102:	2201      	movs	r2, #1
 8001104:	2104      	movs	r1, #4
 8001106:	f003 ffab 	bl	8005060 <arm_mat_init_f32>

	arm_mat_init_f32(&(pid->temp1_N_1_mat), NUM_JOINTS, 1, pid->temp1_N_1_data);
 800110a:	462b      	mov	r3, r5
 800110c:	f504 70c4 	add.w	r0, r4, #392	@ 0x188
 8001110:	2201      	movs	r2, #1
 8001112:	2104      	movs	r1, #4
 8001114:	f003 ffa4 	bl	8005060 <arm_mat_init_f32>
	arm_mat_init_f32(&(pid->temp2_N_1_mat), NUM_JOINTS, 1, pid->temp2_N_1_data);
 8001118:	f504 73bc 	add.w	r3, r4, #376	@ 0x178
 800111c:	f504 70c8 	add.w	r0, r4, #400	@ 0x190
 8001120:	2201      	movs	r2, #1
 8001122:	2104      	movs	r1, #4
 8001124:	f003 ff9c 	bl	8005060 <arm_mat_init_f32>

	pid->invert_data[0] = 1.0f;
 8001128:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
	pid->invert_data[1] = 1.0f;
	pid->invert_data[2] = 1.0f;
	pid->invert_data[3] = -1.0f;
 800112c:	4a09      	ldr	r2, [pc, #36]	@ (8001154 <MultivariablePID_Init+0x124>)
	pid->invert_data[0] = 1.0f;
 800112e:	f8c4 3198 	str.w	r3, [r4, #408]	@ 0x198
	pid->invert_data[1] = 1.0f;
 8001132:	f8c4 319c 	str.w	r3, [r4, #412]	@ 0x19c
	pid->invert_data[2] = 1.0f;
 8001136:	f8c4 31a0 	str.w	r3, [r4, #416]	@ 0x1a0
	pid->invert_data[3] = -1.0f;
 800113a:	f8c4 21a4 	str.w	r2, [r4, #420]	@ 0x1a4
	arm_mat_init_f32(&(pid->invert_mat), NUM_JOINTS, 1, pid->invert_data);
 800113e:	f504 73cc 	add.w	r3, r4, #408	@ 0x198
 8001142:	f504 70d4 	add.w	r0, r4, #424	@ 0x1a8
 8001146:	2201      	movs	r2, #1
}
 8001148:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	arm_mat_init_f32(&(pid->invert_mat), NUM_JOINTS, 1, pid->invert_data);
 800114c:	2104      	movs	r1, #4
 800114e:	f003 bf87 	b.w	8005060 <arm_mat_init_f32>
 8001152:	bf00      	nop
 8001154:	bf800000 	.word	0xbf800000

08001158 <ParsePIDParametersFromUART>:
    arm_copy_f32(new_matrix, target_data, NUM_JOINTS*NUM_JOINTS);
    // No need to re-initialize the matrix as the data pointer remains the same
}

uint8_t ParsePIDParametersFromUART(MultivariablePID *pid, char *uart_str, uint16_t len) {
    if (pid == NULL || uart_str == NULL || len == 0) return 0;
 8001158:	2800      	cmp	r0, #0
 800115a:	d04d      	beq.n	80011f8 <ParsePIDParametersFromUART+0xa0>
uint8_t ParsePIDParametersFromUART(MultivariablePID *pid, char *uart_str, uint16_t len) {
 800115c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001160:	460c      	mov	r4, r1
 8001162:	b092      	sub	sp, #72	@ 0x48
    if (pid == NULL || uart_str == NULL || len == 0) return 0;
 8001164:	2900      	cmp	r1, #0
 8001166:	d043      	beq.n	80011f0 <ParsePIDParametersFromUART+0x98>
 8001168:	2a00      	cmp	r2, #0
 800116a:	d041      	beq.n	80011f0 <ParsePIDParametersFromUART+0x98>

    // Make sure the string is null-terminated
    if (uart_str[len-1] != '\0') {
 800116c:	188b      	adds	r3, r1, r2
 800116e:	4606      	mov	r6, r0
 8001170:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8001174:	b123      	cbz	r3, 8001180 <ParsePIDParametersFromUART+0x28>
        if (len >= MAX_UART_BUFFER) {
 8001176:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 800117a:	d239      	bcs.n	80011f0 <ParsePIDParametersFromUART+0x98>
            // String too long, can't safely null-terminate
            return 0;
        }
        uart_str[len] = '\0';
 800117c:	2300      	movs	r3, #0
 800117e:	548b      	strb	r3, [r1, r2]
    }

    float32_t parsed_values[NUM_JOINTS*NUM_JOINTS];
    for (int i = 0; i < NUM_JOINTS*NUM_JOINTS; i++) {
        parsed_values[i] = 0.0f;
 8001180:	2240      	movs	r2, #64	@ 0x40
 8001182:	2100      	movs	r1, #0
 8001184:	a802      	add	r0, sp, #8
 8001186:	f005 fd78 	bl	8006c7a <memset>

    // Determine which parameter is being updated
    uint16_t chosen_param;
    char *data_start = NULL;

    if (strncmp(uart_str, "KP", 2) == 0) {
 800118a:	7823      	ldrb	r3, [r4, #0]
 800118c:	2b4b      	cmp	r3, #75	@ 0x4b
 800118e:	d12f      	bne.n	80011f0 <ParsePIDParametersFromUART+0x98>
 8001190:	7862      	ldrb	r2, [r4, #1]
 8001192:	2a50      	cmp	r2, #80	@ 0x50
 8001194:	d137      	bne.n	8001206 <ParsePIDParametersFromUART+0xae>
        chosen_param = CMD_SET_KP;
 8001196:	f644 3750 	movw	r7, #19280	@ 0x4b50
    }
    else {
        // Unrecognized parameter
        return 0;
    }
    data_start = uart_str + 2;
 800119a:	1ca0      	adds	r0, r4, #2
    // Parse the comma-separated values
    char *token;
    char *rest = data_start;
    int index = 0;

    while ((token = strtok_r(rest, ",", &rest)) != NULL && index < NUM_JOINTS*NUM_JOINTS) {
 800119c:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 8001224 <ParsePIDParametersFromUART+0xcc>
    char *rest = data_start;
 80011a0:	9001      	str	r0, [sp, #4]
    while ((token = strtok_r(rest, ",", &rest)) != NULL && index < NUM_JOINTS*NUM_JOINTS) {
 80011a2:	ad02      	add	r5, sp, #8
    int index = 0;
 80011a4:	2400      	movs	r4, #0
    while ((token = strtok_r(rest, ",", &rest)) != NULL && index < NUM_JOINTS*NUM_JOINTS) {
 80011a6:	e00a      	b.n	80011be <ParsePIDParametersFromUART+0x66>
        // Convert the token to float
        parsed_values[index] = (float32_t)atof(token);
 80011a8:	f003 ff5e 	bl	8005068 <atof>
 80011ac:	ec51 0b10 	vmov	r0, r1, d0
 80011b0:	f7ff fd22 	bl	8000bf8 <__aeabi_d2f>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f845 3b04 	str.w	r3, [r5], #4
    while ((token = strtok_r(rest, ",", &rest)) != NULL && index < NUM_JOINTS*NUM_JOINTS) {
 80011ba:	9801      	ldr	r0, [sp, #4]
        index++;
 80011bc:	3401      	adds	r4, #1
    while ((token = strtok_r(rest, ",", &rest)) != NULL && index < NUM_JOINTS*NUM_JOINTS) {
 80011be:	aa01      	add	r2, sp, #4
 80011c0:	4641      	mov	r1, r8
 80011c2:	f005 fd9c 	bl	8006cfe <strtok_r>
 80011c6:	b188      	cbz	r0, 80011ec <ParsePIDParametersFromUART+0x94>
 80011c8:	2c10      	cmp	r4, #16
 80011ca:	d1ed      	bne.n	80011a8 <ParsePIDParametersFromUART+0x50>
    switch (chosen_param) {
 80011cc:	f644 3349 	movw	r3, #19273	@ 0x4b49
 80011d0:	429f      	cmp	r7, r3
 80011d2:	d013      	beq.n	80011fc <ParsePIDParametersFromUART+0xa4>
 80011d4:	f644 3350 	movw	r3, #19280	@ 0x4b50
 80011d8:	429f      	cmp	r7, r3
 80011da:	d012      	beq.n	8001202 <ParsePIDParametersFromUART+0xaa>
            target_data = pid->Kd_data;
 80011dc:	f106 0180 	add.w	r1, r6, #128	@ 0x80
    arm_copy_f32(new_matrix, target_data, NUM_JOINTS*NUM_JOINTS);
 80011e0:	a802      	add	r0, sp, #8
 80011e2:	2210      	movs	r2, #16
 80011e4:	f003 ff0a 	bl	8004ffc <arm_copy_f32>
    }

    // Update the PID parameters
    MultivariablePID_SetParameter(pid, parsed_values, chosen_param);

    return 1;
 80011e8:	2001      	movs	r0, #1
 80011ea:	e002      	b.n	80011f2 <ParsePIDParametersFromUART+0x9a>
    if (index != NUM_JOINTS*NUM_JOINTS) {
 80011ec:	2c10      	cmp	r4, #16
 80011ee:	d0ed      	beq.n	80011cc <ParsePIDParametersFromUART+0x74>
    if (pid == NULL || uart_str == NULL || len == 0) return 0;
 80011f0:	2000      	movs	r0, #0
}
 80011f2:	b012      	add	sp, #72	@ 0x48
 80011f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pid == NULL || uart_str == NULL || len == 0) return 0;
 80011f8:	2000      	movs	r0, #0
}
 80011fa:	4770      	bx	lr
            target_data = pid->Ki_data;
 80011fc:	f106 0140 	add.w	r1, r6, #64	@ 0x40
            break;
 8001200:	e7ee      	b.n	80011e0 <ParsePIDParametersFromUART+0x88>
            target_data = pid->Kp_data;
 8001202:	4631      	mov	r1, r6
            break;
 8001204:	e7ec      	b.n	80011e0 <ParsePIDParametersFromUART+0x88>
    else if (strncmp(uart_str, "KI", 2) == 0) {
 8001206:	2b4b      	cmp	r3, #75	@ 0x4b
 8001208:	d1f2      	bne.n	80011f0 <ParsePIDParametersFromUART+0x98>
 800120a:	2a49      	cmp	r2, #73	@ 0x49
 800120c:	d102      	bne.n	8001214 <ParsePIDParametersFromUART+0xbc>
        chosen_param = CMD_SET_KI;
 800120e:	f644 3749 	movw	r7, #19273	@ 0x4b49
 8001212:	e7c2      	b.n	800119a <ParsePIDParametersFromUART+0x42>
    else if (strncmp(uart_str, "KD", 2) == 0) {
 8001214:	2b4b      	cmp	r3, #75	@ 0x4b
 8001216:	d1eb      	bne.n	80011f0 <ParsePIDParametersFromUART+0x98>
 8001218:	2a44      	cmp	r2, #68	@ 0x44
 800121a:	d1e9      	bne.n	80011f0 <ParsePIDParametersFromUART+0x98>
        chosen_param = CMD_SET_KD;
 800121c:	f644 3744 	movw	r7, #19268	@ 0x4b44
 8001220:	e7bb      	b.n	800119a <ParsePIDParametersFromUART+0x42>
 8001222:	bf00      	nop
 8001224:	08009890 	.word	0x08009890

08001228 <Trajectory_Init>:
    arm_mat_init_f32(&(traj->coeff_mat), NUM_JOINTS_TRAJ, TRAJ_POLY_TERMS, traj->coeff_data[phase]);
}

// User functions
void Trajectory_Init(Trajectory *traj) {
	if (traj == NULL) return;
 8001228:	2800      	cmp	r0, #0
 800122a:	f000 80d8 	beq.w	80013de <Trajectory_Init+0x1b6>
void Trajectory_Init(Trajectory *traj) {
 800122e:	b538      	push	{r3, r4, r5, lr}

	// Initialize all phase coefficient matrices to zero
	for (int phase = 0; phase < MAX_TRAJ_PHASES; phase++) {
		for (int i = 0; i < NUM_JOINTS_TRAJ*TRAJ_POLY_TERMS; i++) {
			traj->coeff_data[phase][i] = 0.0f;
 8001230:	2500      	movs	r5, #0
 8001232:	4604      	mov	r4, r0
 8001234:	6245      	str	r5, [r0, #36]	@ 0x24
 8001236:	6285      	str	r5, [r0, #40]	@ 0x28
 8001238:	62c5      	str	r5, [r0, #44]	@ 0x2c
 800123a:	6305      	str	r5, [r0, #48]	@ 0x30
 800123c:	6345      	str	r5, [r0, #52]	@ 0x34
 800123e:	6385      	str	r5, [r0, #56]	@ 0x38
 8001240:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8001242:	6405      	str	r5, [r0, #64]	@ 0x40
 8001244:	6445      	str	r5, [r0, #68]	@ 0x44
 8001246:	6485      	str	r5, [r0, #72]	@ 0x48
 8001248:	64c5      	str	r5, [r0, #76]	@ 0x4c
 800124a:	6505      	str	r5, [r0, #80]	@ 0x50
 800124c:	6545      	str	r5, [r0, #84]	@ 0x54
 800124e:	6585      	str	r5, [r0, #88]	@ 0x58
 8001250:	65c5      	str	r5, [r0, #92]	@ 0x5c
 8001252:	6605      	str	r5, [r0, #96]	@ 0x60
 8001254:	6645      	str	r5, [r0, #100]	@ 0x64
 8001256:	6685      	str	r5, [r0, #104]	@ 0x68
 8001258:	66c5      	str	r5, [r0, #108]	@ 0x6c
 800125a:	6705      	str	r5, [r0, #112]	@ 0x70
 800125c:	6745      	str	r5, [r0, #116]	@ 0x74
		}
	} // Initialize the coefficient matrix with phase 0 data
	arm_mat_init_f32(&(traj->coeff_mat), NUM_JOINTS_TRAJ, TRAJ_POLY_TERMS, traj->coeff_data[0]);
 800125e:	4603      	mov	r3, r0
			traj->coeff_data[phase][i] = 0.0f;
 8001260:	6005      	str	r5, [r0, #0]
 8001262:	6045      	str	r5, [r0, #4]
 8001264:	6085      	str	r5, [r0, #8]
 8001266:	60c5      	str	r5, [r0, #12]
 8001268:	6105      	str	r5, [r0, #16]
 800126a:	6145      	str	r5, [r0, #20]
 800126c:	6185      	str	r5, [r0, #24]
 800126e:	61c5      	str	r5, [r0, #28]
 8001270:	6205      	str	r5, [r0, #32]
	arm_mat_init_f32(&(traj->coeff_mat), NUM_JOINTS_TRAJ, TRAJ_POLY_TERMS, traj->coeff_data[0]);
 8001272:	2206      	movs	r2, #6
			traj->coeff_data[phase][i] = 0.0f;
 8001274:	6785      	str	r5, [r0, #120]	@ 0x78
	arm_mat_init_f32(&(traj->coeff_mat), NUM_JOINTS_TRAJ, TRAJ_POLY_TERMS, traj->coeff_data[0]);
 8001276:	2102      	movs	r1, #2
			traj->coeff_data[phase][i] = 0.0f;
 8001278:	67c5      	str	r5, [r0, #124]	@ 0x7c
 800127a:	f8c0 5080 	str.w	r5, [r0, #128]	@ 0x80
 800127e:	f8c0 5084 	str.w	r5, [r0, #132]	@ 0x84
 8001282:	f8c0 5088 	str.w	r5, [r0, #136]	@ 0x88
 8001286:	f8c0 508c 	str.w	r5, [r0, #140]	@ 0x8c
 800128a:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
 800128e:	f8c0 5094 	str.w	r5, [r0, #148]	@ 0x94
 8001292:	f8c0 5098 	str.w	r5, [r0, #152]	@ 0x98
 8001296:	f8c0 509c 	str.w	r5, [r0, #156]	@ 0x9c
 800129a:	f8c0 50a0 	str.w	r5, [r0, #160]	@ 0xa0
 800129e:	f8c0 50a4 	str.w	r5, [r0, #164]	@ 0xa4
 80012a2:	f8c0 50a8 	str.w	r5, [r0, #168]	@ 0xa8
 80012a6:	f8c0 50ac 	str.w	r5, [r0, #172]	@ 0xac
 80012aa:	f8c0 50b0 	str.w	r5, [r0, #176]	@ 0xb0
 80012ae:	f8c0 50b4 	str.w	r5, [r0, #180]	@ 0xb4
 80012b2:	f8c0 50b8 	str.w	r5, [r0, #184]	@ 0xb8
 80012b6:	f8c0 50bc 	str.w	r5, [r0, #188]	@ 0xbc
 80012ba:	f8c0 50c0 	str.w	r5, [r0, #192]	@ 0xc0
 80012be:	f8c0 50c4 	str.w	r5, [r0, #196]	@ 0xc4
 80012c2:	f8c0 50c8 	str.w	r5, [r0, #200]	@ 0xc8
 80012c6:	f8c0 50cc 	str.w	r5, [r0, #204]	@ 0xcc
 80012ca:	f8c0 50d0 	str.w	r5, [r0, #208]	@ 0xd0
 80012ce:	f8c0 50d4 	str.w	r5, [r0, #212]	@ 0xd4
 80012d2:	f8c0 50d8 	str.w	r5, [r0, #216]	@ 0xd8
 80012d6:	f8c0 50dc 	str.w	r5, [r0, #220]	@ 0xdc
 80012da:	f8c0 50e0 	str.w	r5, [r0, #224]	@ 0xe0
 80012de:	f8c0 50e4 	str.w	r5, [r0, #228]	@ 0xe4
 80012e2:	f8c0 50e8 	str.w	r5, [r0, #232]	@ 0xe8
 80012e6:	f8c0 50ec 	str.w	r5, [r0, #236]	@ 0xec
 80012ea:	f8c0 50f0 	str.w	r5, [r0, #240]	@ 0xf0
 80012ee:	f8c0 50f4 	str.w	r5, [r0, #244]	@ 0xf4
 80012f2:	f8c0 50f8 	str.w	r5, [r0, #248]	@ 0xf8
 80012f6:	f8c0 50fc 	str.w	r5, [r0, #252]	@ 0xfc
 80012fa:	f8c0 5100 	str.w	r5, [r0, #256]	@ 0x100
 80012fe:	f8c0 5104 	str.w	r5, [r0, #260]	@ 0x104
 8001302:	f8c0 5108 	str.w	r5, [r0, #264]	@ 0x108
 8001306:	f8c0 510c 	str.w	r5, [r0, #268]	@ 0x10c
 800130a:	f8c0 5110 	str.w	r5, [r0, #272]	@ 0x110
 800130e:	f8c0 5114 	str.w	r5, [r0, #276]	@ 0x114
 8001312:	f8c0 5118 	str.w	r5, [r0, #280]	@ 0x118
 8001316:	f8c0 511c 	str.w	r5, [r0, #284]	@ 0x11c
	arm_mat_init_f32(&(traj->coeff_mat), NUM_JOINTS_TRAJ, TRAJ_POLY_TERMS, traj->coeff_data[0]);
 800131a:	f500 7090 	add.w	r0, r0, #288	@ 0x120
 800131e:	f003 fe9f 	bl	8005060 <arm_mat_init_f32>

	for (int i = 0; i < TRAJ_POLY_TERMS; i++) {
 8001322:	f504 7394 	add.w	r3, r4, #296	@ 0x128
		traj->time_vec_pos_data[i] = 0.0f;
 8001326:	2248      	movs	r2, #72	@ 0x48
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f005 fca5 	bl	8006c7a <memset>
		traj->time_vec_vel_data[i] = 0.0f;
		traj->time_vec_acc_data[i] = 0.0f;
	}
	arm_mat_init_f32(&(traj->time_vec_pos_mat), TRAJ_POLY_TERMS, 1, traj->time_vec_pos_data);
 8001330:	2201      	movs	r2, #1
		traj->time_vec_pos_data[i] = 0.0f;
 8001332:	4603      	mov	r3, r0
	arm_mat_init_f32(&(traj->time_vec_pos_mat), TRAJ_POLY_TERMS, 1, traj->time_vec_pos_data);
 8001334:	2106      	movs	r1, #6
 8001336:	f504 70b8 	add.w	r0, r4, #368	@ 0x170
 800133a:	f003 fe91 	bl	8005060 <arm_mat_init_f32>
	arm_mat_init_f32(&(traj->time_vec_vel_mat), TRAJ_POLY_TERMS, 1, traj->time_vec_vel_data);
 800133e:	2201      	movs	r2, #1
 8001340:	2106      	movs	r1, #6
 8001342:	f504 73a0 	add.w	r3, r4, #320	@ 0x140
 8001346:	f504 70bc 	add.w	r0, r4, #376	@ 0x178
 800134a:	f003 fe89 	bl	8005060 <arm_mat_init_f32>
	arm_mat_init_f32(&(traj->time_vec_acc_mat), TRAJ_POLY_TERMS, 1, traj->time_vec_acc_data);
 800134e:	2201      	movs	r2, #1
 8001350:	2106      	movs	r1, #6
 8001352:	f504 73ac 	add.w	r3, r4, #344	@ 0x158
 8001356:	f504 70c0 	add.w	r0, r4, #384	@ 0x180
 800135a:	f003 fe81 	bl	8005060 <arm_mat_init_f32>
	for (int i = 0; i < NUM_JOINTS_TRAJ; i++) {
		traj->position_data[i] = 0.0f;
		traj->velocity_data[i] = 0.0f;
		traj->acceleration_data[i] = 0.0f;
	}
	arm_mat_init_f32(&(traj->position_mat), NUM_JOINTS_TRAJ, 1, traj->position_data);
 800135e:	2201      	movs	r2, #1
 8001360:	2102      	movs	r1, #2
 8001362:	f504 73c4 	add.w	r3, r4, #392	@ 0x188
 8001366:	f504 70d0 	add.w	r0, r4, #416	@ 0x1a0
		traj->position_data[i] = 0.0f;
 800136a:	f8c4 5188 	str.w	r5, [r4, #392]	@ 0x188
		traj->velocity_data[i] = 0.0f;
 800136e:	f8c4 5190 	str.w	r5, [r4, #400]	@ 0x190
		traj->acceleration_data[i] = 0.0f;
 8001372:	f8c4 5198 	str.w	r5, [r4, #408]	@ 0x198
		traj->position_data[i] = 0.0f;
 8001376:	f8c4 518c 	str.w	r5, [r4, #396]	@ 0x18c
		traj->velocity_data[i] = 0.0f;
 800137a:	f8c4 5194 	str.w	r5, [r4, #404]	@ 0x194
		traj->acceleration_data[i] = 0.0f;
 800137e:	f8c4 519c 	str.w	r5, [r4, #412]	@ 0x19c
	arm_mat_init_f32(&(traj->position_mat), NUM_JOINTS_TRAJ, 1, traj->position_data);
 8001382:	f003 fe6d 	bl	8005060 <arm_mat_init_f32>
	arm_mat_init_f32(&(traj->velocity_mat), NUM_JOINTS_TRAJ, 1, traj->velocity_data);
 8001386:	2201      	movs	r2, #1
 8001388:	2102      	movs	r1, #2
 800138a:	f504 73c8 	add.w	r3, r4, #400	@ 0x190
 800138e:	f504 70d4 	add.w	r0, r4, #424	@ 0x1a8
 8001392:	f003 fe65 	bl	8005060 <arm_mat_init_f32>
	arm_mat_init_f32(&(traj->acceleration_mat), NUM_JOINTS_TRAJ, 1, traj->acceleration_data);
 8001396:	2201      	movs	r2, #1
 8001398:	f504 73cc 	add.w	r3, r4, #408	@ 0x198
 800139c:	2102      	movs	r1, #2
 800139e:	f504 70d8 	add.w	r0, r4, #432	@ 0x1b0
 80013a2:	f003 fe5d 	bl	8005060 <arm_mat_init_f32>
	for (int i = 0; i < MAX_TRAJ_PHASES; i++) {
		traj->duration[i] = 0.0f;
	}

	// Initialize phase tracking
	traj->currentPhase = 0;
 80013a6:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
	// Initialize state
	traj->state = TRAJ_IDLE;

	// Initialize derivative computation flags
	traj->compute_velocity = 0;
	traj->compute_acceleration = 0;
 80013aa:	2300      	movs	r3, #0
	traj->currentPhase = 0;
 80013ac:	f8c4 21e0 	str.w	r2, [r4, #480]	@ 0x1e0
	traj->compute_acceleration = 0;
 80013b0:	f884 31e4 	strb.w	r3, [r4, #484]	@ 0x1e4
	traj->startTime = 0.0f;
 80013b4:	f8c4 51b8 	str.w	r5, [r4, #440]	@ 0x1b8
	traj->currentTime = 0.0f;
 80013b8:	f8c4 51bc 	str.w	r5, [r4, #444]	@ 0x1bc
	traj->phaseTime = 0.0f;
 80013bc:	f8c4 51c0 	str.w	r5, [r4, #448]	@ 0x1c0
	traj->totalDuration = 0.0f;
 80013c0:	f8c4 51dc 	str.w	r5, [r4, #476]	@ 0x1dc
		traj->duration[i] = 0.0f;
 80013c4:	f8c4 51c4 	str.w	r5, [r4, #452]	@ 0x1c4
 80013c8:	f8c4 51c8 	str.w	r5, [r4, #456]	@ 0x1c8
 80013cc:	f8c4 51cc 	str.w	r5, [r4, #460]	@ 0x1cc
 80013d0:	f8c4 51d0 	str.w	r5, [r4, #464]	@ 0x1d0
 80013d4:	f8c4 51d4 	str.w	r5, [r4, #468]	@ 0x1d4
 80013d8:	f8c4 51d8 	str.w	r5, [r4, #472]	@ 0x1d8
}
 80013dc:	bd38      	pop	{r3, r4, r5, pc}
 80013de:	4770      	bx	lr

080013e0 <Trajectory_Start>:

void Trajectory_Start(Trajectory *traj) {
    if (traj == NULL) return;
 80013e0:	4603      	mov	r3, r0
 80013e2:	b190      	cbz	r0, 800140a <Trajectory_Start+0x2a>

    traj->state = TRAJ_RUNNING;
    traj->startTime = 0.0f;
 80013e4:	2200      	movs	r2, #0
    traj->state = TRAJ_RUNNING;
 80013e6:	2001      	movs	r0, #1
    traj->currentPhase = phase;
 80013e8:	2100      	movs	r1, #0
    traj->state = TRAJ_RUNNING;
 80013ea:	f883 01e2 	strb.w	r0, [r3, #482]	@ 0x1e2
    traj->startTime = 0.0f;
 80013ee:	f8c3 21b8 	str.w	r2, [r3, #440]	@ 0x1b8
    traj->currentTime = 0.0f;
 80013f2:	f8c3 21bc 	str.w	r2, [r3, #444]	@ 0x1bc
    traj->phaseTime = 0.0f;
 80013f6:	f8c3 21c0 	str.w	r2, [r3, #448]	@ 0x1c0
    traj->currentPhase = phase;
 80013fa:	f883 11e0 	strb.w	r1, [r3, #480]	@ 0x1e0
    arm_mat_init_f32(&(traj->coeff_mat), NUM_JOINTS_TRAJ, TRAJ_POLY_TERMS, traj->coeff_data[phase]);
 80013fe:	2206      	movs	r2, #6
 8001400:	2102      	movs	r1, #2
 8001402:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8001406:	f003 be2b 	b.w	8005060 <arm_mat_init_f32>

    // Start with phase 0
    transition_to_phase(traj, 0);
}
 800140a:	4770      	bx	lr

0800140c <Trajectory_ParseCoeffs>:
        traj->totalDuration += durations[i];
    }
}

HAL_StatusTypeDef Trajectory_ParseCoeffs(const char* input_str, Trajectory* traj) {
    if (input_str == NULL || traj == NULL) return HAL_ERROR;
 800140c:	2800      	cmp	r0, #0
 800140e:	f000 8089 	beq.w	8001524 <Trajectory_ParseCoeffs+0x118>
HAL_StatusTypeDef Trajectory_ParseCoeffs(const char* input_str, Trajectory* traj) {
 8001412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001416:	460e      	mov	r6, r1
 8001418:	b0d0      	sub	sp, #320	@ 0x140
    if (input_str == NULL || traj == NULL) return HAL_ERROR;
 800141a:	b119      	cbz	r1, 8001424 <Trajectory_ParseCoeffs+0x18>

    const char* start = input_str;
    if (start[0] != 'T' || start[1] != 'C') return HAL_ERROR;
 800141c:	7803      	ldrb	r3, [r0, #0]
 800141e:	2b54      	cmp	r3, #84	@ 0x54
 8001420:	4605      	mov	r5, r0
 8001422:	d003      	beq.n	800142c <Trajectory_ParseCoeffs+0x20>
    if (input_str == NULL || traj == NULL) return HAL_ERROR;
 8001424:	2001      	movs	r0, #1
        Trajectory_SetCoefficients(traj, &tempCoeffs[phase * NUM_JOINTS_TRAJ * TRAJ_POLY_TERMS], phase);
    }

    Trajectory_SetDuration(traj, tempDurations, MAX_TRAJ_PHASES);
    return HAL_OK;
}
 8001426:	b050      	add	sp, #320	@ 0x140
 8001428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (start[0] != 'T' || start[1] != 'C') return HAL_ERROR;
 800142c:	7843      	ldrb	r3, [r0, #1]
 800142e:	2b43      	cmp	r3, #67	@ 0x43
 8001430:	d1f8      	bne.n	8001424 <Trajectory_ParseCoeffs+0x18>
    float32_t tempCoeffs[TOTAL_COEFFS] = {0};
 8001432:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8001436:	2100      	movs	r1, #0
    start += 2;
 8001438:	1c84      	adds	r4, r0, #2
    float32_t tempCoeffs[TOTAL_COEFFS] = {0};
 800143a:	a808      	add	r0, sp, #32
 800143c:	f005 fc1d 	bl	8006c7a <memset>
    while (*start != '\0' && *start != 'T' && value_count < TOTAL_COEFFS) {
 8001440:	78aa      	ldrb	r2, [r5, #2]
    float32_t tempDurations[MAX_TRAJ_PHASES] = {0};
 8001442:	2500      	movs	r5, #0
 8001444:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8001448:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800144c:	e9cd 5506 	strd	r5, r5, [sp, #24]
    while (*start != '\0' && *start != 'T' && value_count < TOTAL_COEFFS) {
 8001450:	2a00      	cmp	r2, #0
 8001452:	d0e7      	beq.n	8001424 <Trajectory_ParseCoeffs+0x18>
 8001454:	2a54      	cmp	r2, #84	@ 0x54
 8001456:	d01f      	beq.n	8001498 <Trajectory_ParseCoeffs+0x8c>
 8001458:	2d48      	cmp	r5, #72	@ 0x48
 800145a:	d0e3      	beq.n	8001424 <Trajectory_ParseCoeffs+0x18>
        float32_t val = strtof(start, &end);
 800145c:	a901      	add	r1, sp, #4
 800145e:	4620      	mov	r0, r4
 8001460:	f004 fc1c 	bl	8005c9c <strtof>
        if (end == start) {
 8001464:	9b01      	ldr	r3, [sp, #4]
 8001466:	42a3      	cmp	r3, r4
 8001468:	d010      	beq.n	800148c <Trajectory_ParseCoeffs+0x80>
        tempCoeffs[value_count++] = val;
 800146a:	aa08      	add	r2, sp, #32
 800146c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8001470:	ed82 0a00 	vstr	s0, [r2]
 8001474:	3501      	adds	r5, #1
        while (*start == ',' || *start == ' ') start++;
 8001476:	781a      	ldrb	r2, [r3, #0]
 8001478:	2a2c      	cmp	r2, #44	@ 0x2c
 800147a:	461c      	mov	r4, r3
 800147c:	f103 0301 	add.w	r3, r3, #1
 8001480:	d0f9      	beq.n	8001476 <Trajectory_ParseCoeffs+0x6a>
 8001482:	2a20      	cmp	r2, #32
 8001484:	d0f7      	beq.n	8001476 <Trajectory_ParseCoeffs+0x6a>
    while (*start != '\0' && *start != 'T' && value_count < TOTAL_COEFFS) {
 8001486:	2a00      	cmp	r2, #0
 8001488:	d1e4      	bne.n	8001454 <Trajectory_ParseCoeffs+0x48>
 800148a:	e7cb      	b.n	8001424 <Trajectory_ParseCoeffs+0x18>
 800148c:	7863      	ldrb	r3, [r4, #1]
            start++;  // Skip invalid char
 800148e:	3401      	adds	r4, #1
    while (*start != '\0' && *start != 'T' && value_count < TOTAL_COEFFS) {
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0c7      	beq.n	8001424 <Trajectory_ParseCoeffs+0x18>
 8001494:	2b54      	cmp	r3, #84	@ 0x54
 8001496:	d1e1      	bne.n	800145c <Trajectory_ParseCoeffs+0x50>
    while (*start != '\0' && dur_count < MAX_TRAJ_PHASES) {
 8001498:	7863      	ldrb	r3, [r4, #1]
    int dur_count = 0;
 800149a:	2700      	movs	r7, #0
    start++; // Skip 'T'
 800149c:	3401      	adds	r4, #1
    while (*start != '\0' && dur_count < MAX_TRAJ_PHASES) {
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0c0      	beq.n	8001424 <Trajectory_ParseCoeffs+0x18>
        float32_t val = strtof(start, &end);
 80014a2:	a901      	add	r1, sp, #4
 80014a4:	4620      	mov	r0, r4
 80014a6:	f004 fbf9 	bl	8005c9c <strtof>
        if (end == start) {
 80014aa:	9b01      	ldr	r3, [sp, #4]
 80014ac:	42a3      	cmp	r3, r4
 80014ae:	d030      	beq.n	8001512 <Trajectory_ParseCoeffs+0x106>
        tempDurations[dur_count++] = val;
 80014b0:	aa02      	add	r2, sp, #8
 80014b2:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 80014b6:	ed82 0a00 	vstr	s0, [r2]
 80014ba:	3701      	adds	r7, #1
        while (*start == ',' || *start == ' ') start++;
 80014bc:	781a      	ldrb	r2, [r3, #0]
 80014be:	2a2c      	cmp	r2, #44	@ 0x2c
 80014c0:	461c      	mov	r4, r3
 80014c2:	f103 0301 	add.w	r3, r3, #1
 80014c6:	d0f9      	beq.n	80014bc <Trajectory_ParseCoeffs+0xb0>
 80014c8:	2a20      	cmp	r2, #32
 80014ca:	d0f7      	beq.n	80014bc <Trajectory_ParseCoeffs+0xb0>
    while (*start != '\0' && dur_count < MAX_TRAJ_PHASES) {
 80014cc:	b32a      	cbz	r2, 800151a <Trajectory_ParseCoeffs+0x10e>
 80014ce:	2f06      	cmp	r7, #6
 80014d0:	d1e7      	bne.n	80014a2 <Trajectory_ParseCoeffs+0x96>
    if (value_count != TOTAL_COEFFS || dur_count != MAX_TRAJ_PHASES) return HAL_ERROR;
 80014d2:	2d48      	cmp	r5, #72	@ 0x48
 80014d4:	d1a6      	bne.n	8001424 <Trajectory_ParseCoeffs+0x18>
 80014d6:	af08      	add	r7, sp, #32
 80014d8:	4635      	mov	r5, r6
    for (int phase = 0; phase < MAX_TRAJ_PHASES; phase++) {
 80014da:	2400      	movs	r4, #0
        arm_mat_init_f32(&(traj->coeff_mat), NUM_JOINTS_TRAJ, TRAJ_POLY_TERMS, traj->coeff_data[phase]);
 80014dc:	f506 7890 	add.w	r8, r6, #288	@ 0x120
 80014e0:	e006      	b.n	80014f0 <Trajectory_ParseCoeffs+0xe4>
    for (int phase = 0; phase < MAX_TRAJ_PHASES; phase++) {
 80014e2:	3401      	adds	r4, #1
 80014e4:	2c06      	cmp	r4, #6
 80014e6:	f107 0730 	add.w	r7, r7, #48	@ 0x30
 80014ea:	f105 0530 	add.w	r5, r5, #48	@ 0x30
 80014ee:	d01b      	beq.n	8001528 <Trajectory_ParseCoeffs+0x11c>
    arm_copy_f32(new_coeffs, traj->coeff_data[phase], NUM_JOINTS_TRAJ*TRAJ_POLY_TERMS);
 80014f0:	220c      	movs	r2, #12
 80014f2:	4629      	mov	r1, r5
 80014f4:	4638      	mov	r0, r7
 80014f6:	f003 fd81 	bl	8004ffc <arm_copy_f32>
    if (phase == traj->currentPhase) {
 80014fa:	f896 21e0 	ldrb.w	r2, [r6, #480]	@ 0x1e0
 80014fe:	b2e3      	uxtb	r3, r4
 8001500:	429a      	cmp	r2, r3
 8001502:	d1ee      	bne.n	80014e2 <Trajectory_ParseCoeffs+0xd6>
        arm_mat_init_f32(&(traj->coeff_mat), NUM_JOINTS_TRAJ, TRAJ_POLY_TERMS, traj->coeff_data[phase]);
 8001504:	462b      	mov	r3, r5
 8001506:	2206      	movs	r2, #6
 8001508:	2102      	movs	r1, #2
 800150a:	4640      	mov	r0, r8
 800150c:	f003 fda8 	bl	8005060 <arm_mat_init_f32>
 8001510:	e7e7      	b.n	80014e2 <Trajectory_ParseCoeffs+0xd6>
    while (*start != '\0' && dur_count < MAX_TRAJ_PHASES) {
 8001512:	7863      	ldrb	r3, [r4, #1]
            start++;
 8001514:	3401      	adds	r4, #1
    while (*start != '\0' && dur_count < MAX_TRAJ_PHASES) {
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1c3      	bne.n	80014a2 <Trajectory_ParseCoeffs+0x96>
    if (value_count != TOTAL_COEFFS || dur_count != MAX_TRAJ_PHASES) return HAL_ERROR;
 800151a:	2d48      	cmp	r5, #72	@ 0x48
 800151c:	d182      	bne.n	8001424 <Trajectory_ParseCoeffs+0x18>
 800151e:	2f06      	cmp	r7, #6
 8001520:	d180      	bne.n	8001424 <Trajectory_ParseCoeffs+0x18>
 8001522:	e7d8      	b.n	80014d6 <Trajectory_ParseCoeffs+0xca>
    if (input_str == NULL || traj == NULL) return HAL_ERROR;
 8001524:	2001      	movs	r0, #1
}
 8001526:	4770      	bx	lr
        traj->duration[i] = durations[i];
 8001528:	eddd 4a02 	vldr	s9, [sp, #8]
 800152c:	ed9d 5a03 	vldr	s10, [sp, #12]
 8001530:	eddd 5a04 	vldr	s11, [sp, #16]
 8001534:	ed9d 6a05 	vldr	s12, [sp, #20]
 8001538:	eddd 6a06 	vldr	s13, [sp, #24]
 800153c:	ed9d 7a07 	vldr	s14, [sp, #28]
    traj->numPhases = num_phases;
 8001540:	f886 41e1 	strb.w	r4, [r6, #481]	@ 0x1e1
        traj->totalDuration += durations[i];
 8001544:	ee74 7a85 	vadd.f32	s15, s9, s10
        traj->duration[i] = durations[i];
 8001548:	edc6 4a71 	vstr	s9, [r6, #452]	@ 0x1c4
        traj->totalDuration += durations[i];
 800154c:	ee77 7aa5 	vadd.f32	s15, s15, s11
        traj->duration[i] = durations[i];
 8001550:	ed86 5a72 	vstr	s10, [r6, #456]	@ 0x1c8
        traj->totalDuration += durations[i];
 8001554:	ee77 7a86 	vadd.f32	s15, s15, s12
        traj->duration[i] = durations[i];
 8001558:	edc6 5a73 	vstr	s11, [r6, #460]	@ 0x1cc
        traj->totalDuration += durations[i];
 800155c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        traj->duration[i] = durations[i];
 8001560:	ed86 6a74 	vstr	s12, [r6, #464]	@ 0x1d0
        traj->totalDuration += durations[i];
 8001564:	ee77 7a87 	vadd.f32	s15, s15, s14
        traj->duration[i] = durations[i];
 8001568:	edc6 6a75 	vstr	s13, [r6, #468]	@ 0x1d4
 800156c:	ed86 7a76 	vstr	s14, [r6, #472]	@ 0x1d8
    for (uint8_t i = 0; i < num_phases; i++) {
 8001570:	edc6 7a77 	vstr	s15, [r6, #476]	@ 0x1dc
    return HAL_OK;
 8001574:	2000      	movs	r0, #0
 8001576:	e756      	b.n	8001426 <Trajectory_ParseCoeffs+0x1a>

08001578 <CommandProtocol_SetCommandProcessor>:
#include "CommandProtocol.h"

static ProcessCommandFn CustomProcessCommand = NULL;

void CommandProtocol_SetCommandProcessor(ProcessCommandFn processFn) {
    CustomProcessCommand = processFn;
 8001578:	4b01      	ldr	r3, [pc, #4]	@ (8001580 <CommandProtocol_SetCommandProcessor+0x8>)
 800157a:	6018      	str	r0, [r3, #0]
}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	200001f4 	.word	0x200001f4

08001584 <CommandProtocol_Init>:

HAL_StatusTypeDef CommandProtocol_Init(CommandProtocol_Handle* handle, UART_HandleTypeDef* huart, uint32_t timeout) {
 8001584:	4603      	mov	r3, r0
 8001586:	4608      	mov	r0, r1
    if (handle == NULL || huart == NULL) {
 8001588:	b15b      	cbz	r3, 80015a2 <CommandProtocol_Init+0x1e>
 800158a:	b151      	cbz	r1, 80015a2 <CommandProtocol_Init+0x1e>
        return HAL_ERROR;
    }

    handle->huart = huart;
	handle->timeout = timeout;
    handle->rxIndex = 0;
 800158c:	f44f 7180 	mov.w	r1, #256	@ 0x100
	handle->timeout = timeout;
 8001590:	e9c3 0200 	strd	r0, r2, [r3]
    handle->rxIndex = 0;
 8001594:	f8a3 13f0 	strh.w	r1, [r3, #1008]	@ 0x3f0
    handle->isInitialized = true;

    return HAL_UART_Receive_IT(handle->huart, &handle->rxBuffer[0], 1);
 8001598:	2201      	movs	r2, #1
 800159a:	f103 0108 	add.w	r1, r3, #8
 800159e:	f003 badb 	b.w	8004b58 <HAL_UART_Receive_IT>
}
 80015a2:	2001      	movs	r0, #1
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop

080015a8 <CommandProtocol_ProcessByte>:

HAL_StatusTypeDef CommandProtocol_ProcessByte(CommandProtocol_Handle* handle, uint8_t byte) {
 80015a8:	b538      	push	{r3, r4, r5, lr}
    if (!handle->isInitialized) {
 80015aa:	f890 33f1 	ldrb.w	r3, [r0, #1009]	@ 0x3f1
 80015ae:	b1c3      	cbz	r3, 80015e2 <CommandProtocol_ProcessByte+0x3a>
        return HAL_ERROR;
    }

    if (handle->rxIndex < sizeof(handle->rxBuffer) - 1)
    {
        if (byte == '\n' || byte == '\r')
 80015b0:	290a      	cmp	r1, #10

            handle->rxIndex = 0;
        }
        else
        {
        	handle->rxBuffer[handle->rxIndex] = byte; // Store the received byte in the buffer
 80015b2:	f890 33f0 	ldrb.w	r3, [r0, #1008]	@ 0x3f0
 80015b6:	4604      	mov	r4, r0
        if (byte == '\n' || byte == '\r')
 80015b8:	d008      	beq.n	80015cc <CommandProtocol_ProcessByte+0x24>
 80015ba:	290d      	cmp	r1, #13
 80015bc:	d006      	beq.n	80015cc <CommandProtocol_ProcessByte+0x24>
        	handle->rxBuffer[handle->rxIndex] = byte; // Store the received byte in the buffer
 80015be:	18c2      	adds	r2, r0, r3
        	handle->rxIndex++; // Move to the next position in the buffer
 80015c0:	3301      	adds	r3, #1
        	handle->rxBuffer[handle->rxIndex] = byte; // Store the received byte in the buffer
 80015c2:	7211      	strb	r1, [r2, #8]
        	handle->rxIndex++; // Move to the next position in the buffer
 80015c4:	f880 33f0 	strb.w	r3, [r0, #1008]	@ 0x3f0
    }
    else // Reset index to 0
    {
        handle->rxIndex = 0;
    }
    return HAL_OK;
 80015c8:	2000      	movs	r0, #0
}
 80015ca:	bd38      	pop	{r3, r4, r5, pc}
            if (CustomProcessCommand != NULL)
 80015cc:	4a06      	ldr	r2, [pc, #24]	@ (80015e8 <CommandProtocol_ProcessByte+0x40>)
            handle->rxBuffer[handle->rxIndex] = '\0';
 80015ce:	4423      	add	r3, r4
            if (CustomProcessCommand != NULL)
 80015d0:	6812      	ldr	r2, [r2, #0]
            handle->rxBuffer[handle->rxIndex] = '\0';
 80015d2:	2500      	movs	r5, #0
 80015d4:	721d      	strb	r5, [r3, #8]
            if (CustomProcessCommand != NULL)
 80015d6:	b122      	cbz	r2, 80015e2 <CommandProtocol_ProcessByte+0x3a>
                CustomProcessCommand(handle);
 80015d8:	4620      	mov	r0, r4
 80015da:	4790      	blx	r2
            handle->rxIndex = 0;
 80015dc:	f884 53f0 	strb.w	r5, [r4, #1008]	@ 0x3f0
 80015e0:	e7f2      	b.n	80015c8 <CommandProtocol_ProcessByte+0x20>
        return HAL_ERROR;
 80015e2:	2001      	movs	r0, #1
}
 80015e4:	bd38      	pop	{r3, r4, r5, pc}
 80015e6:	bf00      	nop
 80015e8:	200001f4 	.word	0x200001f4

080015ec <CommandProtocol_SendResponse>:

HAL_StatusTypeDef CommandProtocol_SendResponse(CommandProtocol_Handle* handle, const char* response) {
    if (!handle->isInitialized || response == NULL) {
 80015ec:	f890 33f1 	ldrb.w	r3, [r0, #1009]	@ 0x3f1
 80015f0:	b183      	cbz	r3, 8001614 <CommandProtocol_SendResponse+0x28>
HAL_StatusTypeDef CommandProtocol_SendResponse(CommandProtocol_Handle* handle, const char* response) {
 80015f2:	b570      	push	{r4, r5, r6, lr}
 80015f4:	460d      	mov	r5, r1
    if (!handle->isInitialized || response == NULL) {
 80015f6:	b159      	cbz	r1, 8001610 <CommandProtocol_SendResponse+0x24>
        return HAL_ERROR;
    }

    return HAL_UART_Transmit(handle->huart, (uint8_t*)response, strlen(response),
 80015f8:	4604      	mov	r4, r0
 80015fa:	4608      	mov	r0, r1
 80015fc:	f7fe fe40 	bl	8000280 <strlen>
 8001600:	4629      	mov	r1, r5
 8001602:	b282      	uxth	r2, r0
 8001604:	e9d4 0300 	ldrd	r0, r3, [r4]
                            handle->timeout);
}
 8001608:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return HAL_UART_Transmit(handle->huart, (uint8_t*)response, strlen(response),
 800160c:	f003 ba20 	b.w	8004a50 <HAL_UART_Transmit>
}
 8001610:	2001      	movs	r0, #1
 8001612:	bd70      	pop	{r4, r5, r6, pc}
 8001614:	2001      	movs	r0, #1
 8001616:	4770      	bx	lr

08001618 <StepMotor_Init>:
								 TIM_HandleTypeDef* tim,
								 uint32_t tim_channel,
								 GPIO_TypeDef* dir_port,
								 uint16_t dir_pin,
								 GPIO_TypeDef* en_port,
								 uint16_t en_pin) {
 8001618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800161a:	4604      	mov	r4, r0
 800161c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
	motor->timer = tim;
 8001620:	6001      	str	r1, [r0, #0]
								 uint16_t en_pin) {
 8001622:	f8bd 7020 	ldrh.w	r7, [sp, #32]
	motor->channel = tim_channel;

	motor->dir_gpio_port = dir_port;
	motor->dir_gpio_pin = dir_pin;
 8001626:	81a6      	strh	r6, [r4, #12]
	motor->en_gpio_port = en_port;
	motor->en_gpio_pin = en_pin;

	motor->last_speed = 0;
 8001628:	2500      	movs	r5, #0

	HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_RESET);
 800162a:	4631      	mov	r1, r6
								 uint16_t en_pin) {
 800162c:	9e07      	ldr	r6, [sp, #28]
	motor->last_speed = 0;
 800162e:	82e5      	strh	r5, [r4, #22]
	motor->dir_gpio_port = dir_port;
 8001630:	e9c4 2301 	strd	r2, r3, [r4, #4]
								 uint16_t en_pin) {
 8001634:	4618      	mov	r0, r3
	HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_RESET);
 8001636:	462a      	mov	r2, r5
	motor->en_gpio_port = en_port;
 8001638:	6126      	str	r6, [r4, #16]
	motor->en_gpio_pin = en_pin;
 800163a:	82a7      	strh	r7, [r4, #20]
	HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_RESET);
 800163c:	f001 fa92 	bl	8002b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(en_port, en_pin, GPIO_PIN_RESET);
 8001640:	4639      	mov	r1, r7
 8001642:	4630      	mov	r0, r6
 8001644:	462a      	mov	r2, r5
 8001646:	f001 fa8d 	bl	8002b64 <HAL_GPIO_WritePin>

	return HAL_TIM_OC_Start(motor->timer, motor->channel);
 800164a:	e9d4 0100 	ldrd	r0, r1, [r4]
}
 800164e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return HAL_TIM_OC_Start(motor->timer, motor->channel);
 8001652:	f002 be7d 	b.w	8004350 <HAL_TIM_OC_Start>
 8001656:	bf00      	nop

08001658 <StepMotor_SetSpeedLUT>:

void StepMotor_SetSpeedLUT(StepMotor* motor, int16_t speed) {
 8001658:	b538      	push	{r3, r4, r5, lr}
	if (speed == motor->last_speed)
 800165a:	f9b0 3016 	ldrsh.w	r3, [r0, #22]
 800165e:	428b      	cmp	r3, r1
 8001660:	d026      	beq.n	80016b0 <StepMotor_SetSpeedLUT+0x58>
	{
		return;
	}
	else if (speed == -motor->last_speed)
 8001662:	42d9      	cmn	r1, r3
 8001664:	4605      	mov	r5, r0
 8001666:	460c      	mov	r4, r1
 8001668:	d036      	beq.n	80016d8 <StepMotor_SetSpeedLUT+0x80>
	{
		motor->last_speed = speed;
		HAL_GPIO_TogglePin(motor->dir_gpio_port, motor->dir_gpio_pin);
		return;
	}
	else if (speed == 0)
 800166a:	2900      	cmp	r1, #0
 800166c:	d021      	beq.n	80016b2 <StepMotor_SetSpeedLUT+0x5a>
		HAL_GPIO_TogglePin(motor->dir_gpio_port, motor->dir_gpio_pin);
 800166e:	6880      	ldr	r0, [r0, #8]
 8001670:	89a9      	ldrh	r1, [r5, #12]
		motor->last_speed = speed;
		return;
	}
	else
	{
		if (speed < 0)
 8001672:	db2b      	blt.n	80016cc <StepMotor_SetSpeedLUT+0x74>
			motor->last_speed = speed;
			speed = -speed;
		}
		else
		{
			HAL_GPIO_WritePin(motor->dir_gpio_port, motor->dir_gpio_pin, STEP_MOTOR_CCW);
 8001674:	2201      	movs	r2, #1
 8001676:	f001 fa75 	bl	8002b64 <HAL_GPIO_WritePin>
 800167a:	4623      	mov	r3, r4
		else if (speed < MIN_LUT_SPEED)
		{
			speed = MIN_LUT_SPEED;
		}

		__HAL_TIM_SET_PRESCALER(motor->timer, LUT_PSC[speed - 1]);
 800167c:	2b01      	cmp	r3, #1
 800167e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001682:	bfb8      	it	lt
 8001684:	2301      	movlt	r3, #1
 8001686:	4293      	cmp	r3, r2
 8001688:	6829      	ldr	r1, [r5, #0]
		__HAL_TIM_SET_AUTORELOAD(motor->timer, LUT_ARR[speed - 1]);
 800168a:	4817      	ldr	r0, [pc, #92]	@ (80016e8 <StepMotor_SetSpeedLUT+0x90>)
		__HAL_TIM_SET_PRESCALER(motor->timer, LUT_PSC[speed - 1]);
 800168c:	bfa8      	it	ge
 800168e:	4613      	movge	r3, r2
 8001690:	3b01      	subs	r3, #1
 8001692:	680a      	ldr	r2, [r1, #0]
			motor->last_speed = speed;
 8001694:	82ec      	strh	r4, [r5, #22]
		__HAL_TIM_SET_PRESCALER(motor->timer, LUT_PSC[speed - 1]);
 8001696:	b21b      	sxth	r3, r3
 8001698:	4c14      	ldr	r4, [pc, #80]	@ (80016ec <StepMotor_SetSpeedLUT+0x94>)
		__HAL_TIM_SET_AUTORELOAD(motor->timer, LUT_ARR[speed - 1]);
 800169a:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
		__HAL_TIM_SET_PRESCALER(motor->timer, LUT_PSC[speed - 1]);
 800169e:	f834 4013 	ldrh.w	r4, [r4, r3, lsl #1]
 80016a2:	6294      	str	r4, [r2, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(motor->timer, LUT_ARR[speed - 1]);
 80016a4:	62d0      	str	r0, [r2, #44]	@ 0x2c

//		motor->timer->Instance->CNT = 0;
		motor->timer->Instance->EGR |= TIM_EGR_UG;
 80016a6:	6953      	ldr	r3, [r2, #20]
		__HAL_TIM_SET_AUTORELOAD(motor->timer, LUT_ARR[speed - 1]);
 80016a8:	60c8      	str	r0, [r1, #12]
		motor->timer->Instance->EGR |= TIM_EGR_UG;
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6153      	str	r3, [r2, #20]
		return;
	}
}
 80016b0:	bd38      	pop	{r3, r4, r5, pc}
		__HAL_TIM_SET_PRESCALER(motor->timer, 0xFFFF);
 80016b2:	6801      	ldr	r1, [r0, #0]
 80016b4:	680b      	ldr	r3, [r1, #0]
 80016b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016ba:	629a      	str	r2, [r3, #40]	@ 0x28
		__HAL_TIM_SET_AUTORELOAD(motor->timer, 0xFFFF);
 80016bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80016be:	60ca      	str	r2, [r1, #12]
		motor->timer->Instance->EGR |= TIM_EGR_UG;
 80016c0:	695a      	ldr	r2, [r3, #20]
 80016c2:	f042 0201 	orr.w	r2, r2, #1
 80016c6:	615a      	str	r2, [r3, #20]
		motor->last_speed = speed;
 80016c8:	82c4      	strh	r4, [r0, #22]
}
 80016ca:	bd38      	pop	{r3, r4, r5, pc}
			HAL_GPIO_WritePin(motor->dir_gpio_port, motor->dir_gpio_pin, STEP_MOTOR_CW);
 80016cc:	2200      	movs	r2, #0
 80016ce:	f001 fa49 	bl	8002b64 <HAL_GPIO_WritePin>
			speed = -speed;
 80016d2:	4263      	negs	r3, r4
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	e7d1      	b.n	800167c <StepMotor_SetSpeedLUT+0x24>
		HAL_GPIO_TogglePin(motor->dir_gpio_port, motor->dir_gpio_pin);
 80016d8:	8981      	ldrh	r1, [r0, #12]
 80016da:	6880      	ldr	r0, [r0, #8]
		motor->last_speed = speed;
 80016dc:	82ec      	strh	r4, [r5, #22]
}
 80016de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_GPIO_TogglePin(motor->dir_gpio_port, motor->dir_gpio_pin);
 80016e2:	f001 ba43 	b.w	8002b6c <HAL_GPIO_TogglePin>
 80016e6:	bf00      	nop
 80016e8:	0800998c 	.word	0x0800998c
 80016ec:	0800c09c 	.word	0x0800c09c

080016f0 <StepMotor_Enable>:
void StepMotor_Enable(StepMotor* motor) {
 80016f0:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(motor->en_gpio_port, motor->en_gpio_pin, GPIO_PIN_RESET);
 80016f2:	8a81      	ldrh	r1, [r0, #20]
void StepMotor_Enable(StepMotor* motor) {
 80016f4:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(motor->en_gpio_port, motor->en_gpio_pin, GPIO_PIN_RESET);
 80016f6:	2200      	movs	r2, #0
 80016f8:	6900      	ldr	r0, [r0, #16]
 80016fa:	f001 fa33 	bl	8002b64 <HAL_GPIO_WritePin>
    HAL_TIM_OC_Start(motor->timer, motor->channel);
 80016fe:	e9d4 0100 	ldrd	r0, r1, [r4]
}
 8001702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_TIM_OC_Start(motor->timer, motor->channel);
 8001706:	f002 be23 	b.w	8004350 <HAL_TIM_OC_Start>
 800170a:	bf00      	nop

0800170c <StepMotor_Disable>:
void StepMotor_Disable(StepMotor* motor) {
 800170c:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(motor->en_gpio_port, motor->en_gpio_pin, GPIO_PIN_SET);
 800170e:	8a81      	ldrh	r1, [r0, #20]
void StepMotor_Disable(StepMotor* motor) {
 8001710:	4604      	mov	r4, r0
    HAL_GPIO_WritePin(motor->en_gpio_port, motor->en_gpio_pin, GPIO_PIN_SET);
 8001712:	2201      	movs	r2, #1
 8001714:	6900      	ldr	r0, [r0, #16]
 8001716:	f001 fa25 	bl	8002b64 <HAL_GPIO_WritePin>
    HAL_TIM_OC_Stop(motor->timer, motor->channel);
 800171a:	e9d4 0100 	ldrd	r0, r1, [r4]
 800171e:	f002 fe73 	bl	8004408 <HAL_TIM_OC_Stop>
    motor->timer->Instance->CNT = 0;
 8001722:	6823      	ldr	r3, [r4, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2200      	movs	r2, #0
 8001728:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800172a:	bd10      	pop	{r4, pc}

0800172c <DWT_Init>:
#include "Timing.h"

static uint32_t last_cycle = 0;

void DWT_Init(void) {
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 800172c:	4908      	ldr	r1, [pc, #32]	@ (8001750 <DWT_Init+0x24>)
    DWT->CYCCNT = 0;                                // Reset cycle counter
 800172e:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <DWT_Init+0x28>)
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8001730:	f8d1 20fc 	ldr.w	r2, [r1, #252]	@ 0xfc
    DWT->CYCCNT = 0;                                // Reset cycle counter
 8001734:	2000      	movs	r0, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable DWT
 8001736:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800173a:	f8c1 20fc 	str.w	r2, [r1, #252]	@ 0xfc
    DWT->CYCCNT = 0;                                // Reset cycle counter
 800173e:	6058      	str	r0, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;           // Start cycle counter
 8001740:	681a      	ldr	r2, [r3, #0]
    last_cycle = DWT->CYCCNT;
 8001742:	4905      	ldr	r1, [pc, #20]	@ (8001758 <DWT_Init+0x2c>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;           // Start cycle counter
 8001744:	f042 0201 	orr.w	r2, r2, #1
 8001748:	601a      	str	r2, [r3, #0]
    last_cycle = DWT->CYCCNT;
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	600b      	str	r3, [r1, #0]
}
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00
 8001754:	e0001000 	.word	0xe0001000
 8001758:	200001f8 	.word	0x200001f8

0800175c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800175c:	b510      	push	{r4, lr}
 800175e:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001760:	2400      	movs	r4, #0
 8001762:	4b0f      	ldr	r3, [pc, #60]	@ (80017a0 <MX_DMA_Init+0x44>)
 8001764:	9401      	str	r4, [sp, #4]
 8001766:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001768:	f441 1100 	orr.w	r1, r1, #2097152	@ 0x200000
 800176c:	6319      	str	r1, [r3, #48]	@ 0x30
 800176e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001770:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001774:	4622      	mov	r2, r4
 8001776:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001778:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800177a:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800177c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800177e:	f000 fe0b 	bl	8002398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001782:	200b      	movs	r0, #11
 8001784:	f000 fe44 	bl	8002410 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001788:	4622      	mov	r2, r4
 800178a:	4621      	mov	r1, r4
 800178c:	200c      	movs	r0, #12
 800178e:	f000 fe03 	bl	8002398 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001792:	200c      	movs	r0, #12

}
 8001794:	b002      	add	sp, #8
 8001796:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800179a:	f000 be39 	b.w	8002410 <HAL_NVIC_EnableIRQ>
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800

080017a4 <MX_GPIO_Init>:
     PB5   ------> S_TIM3_CH2
     PB8   ------> S_TIM10_CH1
     PB9   ------> S_TIM4_CH4
*/
void MX_GPIO_Init(void)
{
 80017a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	2400      	movs	r4, #0
{
 80017aa:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80017b0:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b4:	4b51      	ldr	r3, [pc, #324]	@ (80018fc <MX_GPIO_Init+0x158>)
 80017b6:	9400      	str	r4, [sp, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	9408      	str	r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, TEST_LED_Pin|M1_DIR_Pin|M1_EN_Pin, GPIO_PIN_RESET);
 80017bc:	4f50      	ldr	r7, [pc, #320]	@ (8001900 <MX_GPIO_Init+0x15c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M2_DIR_Pin|M2_EN_Pin, GPIO_PIN_RESET);
 80017be:	4e51      	ldr	r6, [pc, #324]	@ (8001904 <MX_GPIO_Init+0x160>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c0:	f042 0204 	orr.w	r2, r2, #4
 80017c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80017c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017c8:	f002 0204 	and.w	r2, r2, #4
 80017cc:	9200      	str	r2, [sp, #0]
 80017ce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d0:	9401      	str	r4, [sp, #4]
 80017d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017d4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80017d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80017da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017dc:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80017e0:	9201      	str	r2, [sp, #4]
 80017e2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	9402      	str	r4, [sp, #8]
 80017e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017e8:	f042 0201 	orr.w	r2, r2, #1
 80017ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80017ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017f0:	f002 0201 	and.w	r2, r2, #1
 80017f4:	9202      	str	r2, [sp, #8]
 80017f6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f8:	9403      	str	r4, [sp, #12]
 80017fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80017fc:	f042 0202 	orr.w	r2, r2, #2
 8001800:	631a      	str	r2, [r3, #48]	@ 0x30
 8001802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, TEST_LED_Pin|M1_DIR_Pin|M1_EN_Pin, GPIO_PIN_RESET);
 800180a:	4622      	mov	r2, r4
 800180c:	4638      	mov	r0, r7
 800180e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001812:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, TEST_LED_Pin|M1_DIR_Pin|M1_EN_Pin, GPIO_PIN_RESET);
 8001814:	f001 f9a6 	bl	8002b64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, M2_DIR_Pin|M2_EN_Pin, GPIO_PIN_RESET);
 8001818:	4622      	mov	r2, r4
 800181a:	4630      	mov	r0, r6
 800181c:	210a      	movs	r1, #10
 800181e:	f001 f9a1 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TEST_LED_Pin M1_DIR_Pin */
  GPIO_InitStruct.Pin = TEST_LED_Pin|M1_DIR_Pin;
 8001822:	2400      	movs	r4, #0
 8001824:	2500      	movs	r5, #0
 8001826:	f44f 42c0 	mov.w	r2, #24576	@ 0x6000
 800182a:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182c:	a904      	add	r1, sp, #16
 800182e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = TEST_LED_Pin|M1_DIR_Pin;
 8001830:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001834:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001838:	f000 ffdc 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : M1_EN_Pin */
  GPIO_InitStruct.Pin = M1_EN_Pin;
 800183c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001840:	2301      	movs	r3, #1
 8001842:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(M1_EN_GPIO_Port, &GPIO_InitStruct);
 8001846:	4638      	mov	r0, r7
 8001848:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = M1_EN_Pin;
 800184a:	2202      	movs	r2, #2
 800184c:	2300      	movs	r3, #0
 800184e:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001852:	f5a7 6780 	sub.w	r7, r7, #1024	@ 0x400
  HAL_GPIO_Init(M1_EN_GPIO_Port, &GPIO_InitStruct);
 8001856:	f000 ffcd 	bl	80027f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M2_DIR_Pin|M2_EN_Pin;
 800185a:	220a      	movs	r2, #10
 800185c:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800185e:	a904      	add	r1, sp, #16
 8001860:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = M2_DIR_Pin|M2_EN_Pin;
 8001862:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001866:	f04f 0802 	mov.w	r8, #2
  GPIO_InitStruct.Pin = M2_DIR_Pin|M2_EN_Pin;
 800186a:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f000 ffc1 	bl	80027f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001872:	2233      	movs	r2, #51	@ 0x33
 8001874:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001876:	a904      	add	r1, sp, #16
 8001878:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800187a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800187e:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001882:	e9cd 4506 	strd	r4, r5, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001886:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800188a:	f000 ffb3 	bl	80027f4 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800188e:	a904      	add	r1, sp, #16
 8001890:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001892:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001896:	2302      	movs	r3, #2
 8001898:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800189c:	e9cd 4506 	strd	r4, r5, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018a0:	f8cd 9020 	str.w	r9, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a4:	f000 ffa6 	bl	80027f4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a8:	4630      	mov	r0, r6
 80018aa:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018ac:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018b0:	2302      	movs	r3, #2
 80018b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80018b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018ba:	f8cd 9020 	str.w	r9, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018be:	f000 ff99 	bl	80027f4 <HAL_GPIO_Init>
  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80018c2:	2303      	movs	r3, #3
 80018c4:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c6:	a904      	add	r1, sp, #16
 80018c8:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80018ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018ce:	2302      	movs	r3, #2
 80018d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80018d4:	e9cd 4506 	strd	r4, r5, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d8:	f000 ff8c 	bl	80027f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018e0:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e2:	a904      	add	r1, sp, #16
 80018e4:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018e6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80018ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018ee:	f8cd 8020 	str.w	r8, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f2:	f000 ff7f 	bl	80027f4 <HAL_GPIO_Init>

}
 80018f6:	b00b      	add	sp, #44	@ 0x2c
 80018f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020800 	.word	0x40020800
 8001904:	40020000 	.word	0x40020000

08001908 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001908:	b510      	push	{r4, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800190a:	480b      	ldr	r0, [pc, #44]	@ (8001938 <MX_I2C1_Init+0x30>)
 800190c:	4c0b      	ldr	r4, [pc, #44]	@ (800193c <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 400000;
 800190e:	490c      	ldr	r1, [pc, #48]	@ (8001940 <MX_I2C1_Init+0x38>)
 8001910:	2300      	movs	r3, #0
 8001912:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001916:	e9c0 4100 	strd	r4, r1, [r0]
 800191a:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800191e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8001922:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8001926:	6203      	str	r3, [r0, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001928:	f001 f92a 	bl	8002b80 <HAL_I2C_Init>
 800192c:	b900      	cbnz	r0, 8001930 <MX_I2C1_Init+0x28>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800192e:	bd10      	pop	{r4, pc}
 8001930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001934:	f000 ba1a 	b.w	8001d6c <Error_Handler>
 8001938:	200002c0 	.word	0x200002c0
 800193c:	40005400 	.word	0x40005400
 8001940:	00061a80 	.word	0x00061a80

08001944 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001944:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 8001946:	4b3a      	ldr	r3, [pc, #232]	@ (8001a30 <HAL_I2C_MspInit+0xec>)
 8001948:	6802      	ldr	r2, [r0, #0]
{
 800194a:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194c:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 800194e:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001954:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001958:	9406      	str	r4, [sp, #24]
  if(i2cHandle->Instance==I2C1)
 800195a:	d001      	beq.n	8001960 <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800195c:	b009      	add	sp, #36	@ 0x24
 800195e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001960:	4f34      	ldr	r7, [pc, #208]	@ (8001a34 <HAL_I2C_MspInit+0xf0>)
 8001962:	9400      	str	r4, [sp, #0]
 8001964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8001966:	4e34      	ldr	r6, [pc, #208]	@ (8001a38 <HAL_I2C_MspInit+0xf4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	633b      	str	r3, [r7, #48]	@ 0x30
 800196e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001978:	22c0      	movs	r2, #192	@ 0xc0
 800197a:	2312      	movs	r3, #18
 800197c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001980:	2201      	movs	r2, #1
 8001982:	2303      	movs	r3, #3
 8001984:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001988:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800198a:	2304      	movs	r3, #4
 800198c:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198e:	482b      	ldr	r0, [pc, #172]	@ (8001a3c <HAL_I2C_MspInit+0xf8>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001990:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001992:	f000 ff2f 	bl	80027f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001996:	9401      	str	r4, [sp, #4]
 8001998:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800199a:	6074      	str	r4, [r6, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 800199c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80019a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80019a4:	4a26      	ldr	r2, [pc, #152]	@ (8001a40 <HAL_I2C_MspInit+0xfc>)
 80019a6:	6032      	str	r2, [r6, #0]
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ac:	9301      	str	r3, [sp, #4]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 80019ae:	2240      	movs	r2, #64	@ 0x40
 80019b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80019b4:	4630      	mov	r0, r6
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 80019b6:	e9c6 2402 	strd	r2, r4, [r6, #8]
 80019ba:	e9c6 4405 	strd	r4, r4, [r6, #20]
 80019be:	e9c6 4407 	strd	r4, r4, [r6, #28]
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019c2:	9901      	ldr	r1, [sp, #4]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 80019c4:	6133      	str	r3, [r6, #16]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019c6:	6274      	str	r4, [r6, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80019c8:	f000 fd4a 	bl	8002460 <HAL_DMA_Init>
 80019cc:	bb50      	cbnz	r0, 8001a24 <HAL_I2C_MspInit+0xe0>
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80019ce:	4c1d      	ldr	r4, [pc, #116]	@ (8001a44 <HAL_I2C_MspInit+0x100>)
 80019d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a48 <HAL_I2C_MspInit+0x104>)
 80019d2:	6022      	str	r2, [r4, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80019d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019d8:	2300      	movs	r3, #0
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80019da:	636e      	str	r6, [r5, #52]	@ 0x34
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80019dc:	6062      	str	r2, [r4, #4]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80019de:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80019e0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019e4:	e9c4 3302 	strd	r3, r3, [r4, #8]
 80019e8:	e9c4 2304 	strd	r2, r3, [r4, #16]
 80019ec:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019f0:	e9c4 3308 	strd	r3, r3, [r4, #32]
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80019f4:	63b5      	str	r5, [r6, #56]	@ 0x38
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80019f6:	f000 fd33 	bl	8002460 <HAL_DMA_Init>
 80019fa:	b9b0      	cbnz	r0, 8001a2a <HAL_I2C_MspInit+0xe6>
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80019fc:	2200      	movs	r2, #0
 80019fe:	4611      	mov	r1, r2
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001a00:	63ac      	str	r4, [r5, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a02:	201f      	movs	r0, #31
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001a04:	63a5      	str	r5, [r4, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001a06:	f000 fcc7 	bl	8002398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001a0a:	201f      	movs	r0, #31
 8001a0c:	f000 fd00 	bl	8002410 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001a10:	2200      	movs	r2, #0
 8001a12:	4611      	mov	r1, r2
 8001a14:	2020      	movs	r0, #32
 8001a16:	f000 fcbf 	bl	8002398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001a1a:	2020      	movs	r0, #32
 8001a1c:	f000 fcf8 	bl	8002410 <HAL_NVIC_EnableIRQ>
}
 8001a20:	b009      	add	sp, #36	@ 0x24
 8001a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8001a24:	f000 f9a2 	bl	8001d6c <Error_Handler>
 8001a28:	e7d1      	b.n	80019ce <HAL_I2C_MspInit+0x8a>
      Error_Handler();
 8001a2a:	f000 f99f 	bl	8001d6c <Error_Handler>
 8001a2e:	e7e5      	b.n	80019fc <HAL_I2C_MspInit+0xb8>
 8001a30:	40005400 	.word	0x40005400
 8001a34:	40023800 	.word	0x40023800
 8001a38:	20000260 	.word	0x20000260
 8001a3c:	40020400 	.word	0x40020400
 8001a40:	40026028 	.word	0x40026028
 8001a44:	20000200 	.word	0x20000200
 8001a48:	40026010 	.word	0x40026010

08001a4c <MyProcessCommand>:
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void MyProcessCommand(CommandProtocol_Handle* handle) {
 8001a4c:	b570      	push	{r4, r5, r6, lr}
 8001a4e:	8902      	ldrh	r2, [r0, #8]
 8001a50:	ba52      	rev16	r2, r2
	// Combine the first two characters into a 16-bit integer
	uint16_t encodedCommand = (handle->rxBuffer[0] << 8) | handle->rxBuffer[1];
    char response[50];

    switch(encodedCommand) { // First 2 bytes are command
 8001a52:	f644 5153 	movw	r1, #19795	@ 0x4d53
 8001a56:	b213      	sxth	r3, r2
 8001a58:	428b      	cmp	r3, r1
void MyProcessCommand(CommandProtocol_Handle* handle) {
 8001a5a:	b08e      	sub	sp, #56	@ 0x38
 8001a5c:	4604      	mov	r4, r0
    switch(encodedCommand) { // First 2 bytes are command
 8001a5e:	d061      	beq.n	8001b24 <MyProcessCommand+0xd8>
 8001a60:	b292      	uxth	r2, r2
 8001a62:	dd13      	ble.n	8001a8c <MyProcessCommand+0x40>
 8001a64:	f245 4143 	movw	r1, #21571	@ 0x5443
 8001a68:	428b      	cmp	r3, r1
 8001a6a:	d054      	beq.n	8001b16 <MyProcessCommand+0xca>
 8001a6c:	f245 414c 	movw	r1, #21580	@ 0x544c
 8001a70:	428b      	cmp	r3, r1
 8001a72:	d131      	bne.n	8001ad8 <MyProcessCommand+0x8c>
        case CMD_TEST_LED:
            HAL_GPIO_TogglePin(TEST_LED_GPIO_Port, TEST_LED_Pin);
 8001a74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a78:	483b      	ldr	r0, [pc, #236]	@ (8001b68 <MyProcessCommand+0x11c>)
 8001a7a:	f001 f877 	bl	8002b6c <HAL_GPIO_TogglePin>
            CommandProtocol_SendResponse(handle, "LED TOGGLED!\n");
 8001a7e:	493b      	ldr	r1, [pc, #236]	@ (8001b6c <MyProcessCommand+0x120>)
        	{
				CommandProtocol_SendResponse(handle, "Trajectory coefficients received.\n");
			}
        	else
        	{
				CommandProtocol_SendResponse(handle, "Error parsing trajectory data.\n");
 8001a80:	4620      	mov	r0, r4
        default:
            sprintf(response, "Unknown command: %d\n", encodedCommand);
        	CommandProtocol_SendResponse(handle, response);
        	break;
    }
}
 8001a82:	b00e      	add	sp, #56	@ 0x38
 8001a84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				CommandProtocol_SendResponse(handle, "Error parsing trajectory data.\n");
 8001a88:	f7ff bdb0 	b.w	80015ec <CommandProtocol_SendResponse>
    switch(encodedCommand) { // First 2 bytes are command
 8001a8c:	f244 2154 	movw	r1, #16980	@ 0x4254
 8001a90:	428b      	cmp	r3, r1
 8001a92:	d02b      	beq.n	8001aec <MyProcessCommand+0xa0>
 8001a94:	f244 3150 	movw	r1, #17232	@ 0x4350
 8001a98:	428b      	cmp	r3, r1
 8001a9a:	d11d      	bne.n	8001ad8 <MyProcessCommand+0x8c>
			char paramType[3] = {handle->rxBuffer[2], handle->rxBuffer[3], '\0'};
 8001a9c:	f100 050a 	add.w	r5, r0, #10
 8001aa0:	8942      	ldrh	r2, [r0, #10]
 8001aa2:	f8ad 2000 	strh.w	r2, [sp]
 8001aa6:	2300      	movs	r3, #0
			if (ParsePIDParametersFromUART(&pidObj, recievedShit, strlen(recievedShit))) {
 8001aa8:	4628      	mov	r0, r5
			char paramType[3] = {handle->rxBuffer[2], handle->rxBuffer[3], '\0'};
 8001aaa:	f88d 3002 	strb.w	r3, [sp, #2]
			if (ParsePIDParametersFromUART(&pidObj, recievedShit, strlen(recievedShit))) {
 8001aae:	f7fe fbe7 	bl	8000280 <strlen>
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	b282      	uxth	r2, r0
 8001ab6:	482e      	ldr	r0, [pc, #184]	@ (8001b70 <MyProcessCommand+0x124>)
 8001ab8:	f7ff fb4e 	bl	8001158 <ParsePIDParametersFromUART>
				sprintf(response, "PID %s parameters updated successfully.\n", paramType);
 8001abc:	ad01      	add	r5, sp, #4
			if (ParsePIDParametersFromUART(&pidObj, recievedShit, strlen(recievedShit))) {
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	d046      	beq.n	8001b50 <MyProcessCommand+0x104>
				sprintf(response, "PID %s parameters updated successfully.\n", paramType);
 8001ac2:	492c      	ldr	r1, [pc, #176]	@ (8001b74 <MyProcessCommand+0x128>)
 8001ac4:	466a      	mov	r2, sp
 8001ac6:	4628      	mov	r0, r5
 8001ac8:	f005 f872 	bl	8006bb0 <siprintf>
			CommandProtocol_SendResponse(handle, response);
 8001acc:	4629      	mov	r1, r5
 8001ace:	4620      	mov	r0, r4
 8001ad0:	f7ff fd8c 	bl	80015ec <CommandProtocol_SendResponse>
}
 8001ad4:	b00e      	add	sp, #56	@ 0x38
 8001ad6:	bd70      	pop	{r4, r5, r6, pc}
            sprintf(response, "Unknown command: %d\n", encodedCommand);
 8001ad8:	4927      	ldr	r1, [pc, #156]	@ (8001b78 <MyProcessCommand+0x12c>)
 8001ada:	a801      	add	r0, sp, #4
 8001adc:	f005 f868 	bl	8006bb0 <siprintf>
        	CommandProtocol_SendResponse(handle, response);
 8001ae0:	a901      	add	r1, sp, #4
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f7ff fd82 	bl	80015ec <CommandProtocol_SendResponse>
}
 8001ae8:	b00e      	add	sp, #56	@ 0x38
 8001aea:	bd70      	pop	{r4, r5, r6, pc}
        	sprintf(response, "Trajectory started.\n");
 8001aec:	4d23      	ldr	r5, [pc, #140]	@ (8001b7c <MyProcessCommand+0x130>)
        	Trajectory_Start(&robotTraj);
 8001aee:	4824      	ldr	r0, [pc, #144]	@ (8001b80 <MyProcessCommand+0x134>)
 8001af0:	f7ff fc76 	bl	80013e0 <Trajectory_Start>
        	sprintf(response, "Trajectory started.\n");
 8001af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001af6:	f10d 0c04 	add.w	ip, sp, #4
 8001afa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001afe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b02:	f84c 0b04 	str.w	r0, [ip], #4
			CommandProtocol_SendResponse(handle, response);
 8001b06:	4620      	mov	r0, r4
        	sprintf(response, "Trajectory started.\n");
 8001b08:	f88c 1000 	strb.w	r1, [ip]
			CommandProtocol_SendResponse(handle, response);
 8001b0c:	a901      	add	r1, sp, #4
 8001b0e:	f7ff fd6d 	bl	80015ec <CommandProtocol_SendResponse>
}
 8001b12:	b00e      	add	sp, #56	@ 0x38
 8001b14:	bd70      	pop	{r4, r5, r6, pc}
        	if (Trajectory_ParseCoeffs((char*)handle->rxBuffer, &robotTraj) == HAL_OK)
 8001b16:	491a      	ldr	r1, [pc, #104]	@ (8001b80 <MyProcessCommand+0x134>)
 8001b18:	3008      	adds	r0, #8
 8001b1a:	f7ff fc77 	bl	800140c <Trajectory_ParseCoeffs>
 8001b1e:	b9e8      	cbnz	r0, 8001b5c <MyProcessCommand+0x110>
				CommandProtocol_SendResponse(handle, "Trajectory coefficients received.\n");
 8001b20:	4918      	ldr	r1, [pc, #96]	@ (8001b84 <MyProcessCommand+0x138>)
 8001b22:	e7ad      	b.n	8001a80 <MyProcessCommand+0x34>
			int index = handle->rxBuffer[2] - '0'; // Convert char to int by subtracting '0'
 8001b24:	7a85      	ldrb	r5, [r0, #10]
			char state = handle->rxBuffer[3];
 8001b26:	7ac6      	ldrb	r6, [r0, #11]
				StepMotor_Enable(motorArray[index]);
 8001b28:	4b17      	ldr	r3, [pc, #92]	@ (8001b88 <MyProcessCommand+0x13c>)
			int index = handle->rxBuffer[2] - '0'; // Convert char to int by subtracting '0'
 8001b2a:	3d30      	subs	r5, #48	@ 0x30
			if (state == '1') {
 8001b2c:	2e31      	cmp	r6, #49	@ 0x31
				StepMotor_Enable(motorArray[index]);
 8001b2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
			if (state == '1') {
 8001b32:	d015      	beq.n	8001b60 <MyProcessCommand+0x114>
				StepMotor_Disable(motorArray[index]);
 8001b34:	f7ff fdea 	bl	800170c <StepMotor_Disable>
			sprintf(response, "Motor %d is at state %c\n", index, state);
 8001b38:	4633      	mov	r3, r6
 8001b3a:	462a      	mov	r2, r5
 8001b3c:	4913      	ldr	r1, [pc, #76]	@ (8001b8c <MyProcessCommand+0x140>)
 8001b3e:	a801      	add	r0, sp, #4
 8001b40:	f005 f836 	bl	8006bb0 <siprintf>
			CommandProtocol_SendResponse(handle, response);
 8001b44:	a901      	add	r1, sp, #4
 8001b46:	4620      	mov	r0, r4
 8001b48:	f7ff fd50 	bl	80015ec <CommandProtocol_SendResponse>
}
 8001b4c:	b00e      	add	sp, #56	@ 0x38
 8001b4e:	bd70      	pop	{r4, r5, r6, pc}
				sprintf(response, "Error: Failed to parse PID %s parameters!\n", paramType);
 8001b50:	490f      	ldr	r1, [pc, #60]	@ (8001b90 <MyProcessCommand+0x144>)
 8001b52:	466a      	mov	r2, sp
 8001b54:	4628      	mov	r0, r5
 8001b56:	f005 f82b 	bl	8006bb0 <siprintf>
 8001b5a:	e7b7      	b.n	8001acc <MyProcessCommand+0x80>
				CommandProtocol_SendResponse(handle, "Error parsing trajectory data.\n");
 8001b5c:	490d      	ldr	r1, [pc, #52]	@ (8001b94 <MyProcessCommand+0x148>)
 8001b5e:	e78f      	b.n	8001a80 <MyProcessCommand+0x34>
				StepMotor_Enable(motorArray[index]);
 8001b60:	f7ff fdc6 	bl	80016f0 <StepMotor_Enable>
 8001b64:	e7e8      	b.n	8001b38 <MyProcessCommand+0xec>
 8001b66:	bf00      	nop
 8001b68:	40020800 	.word	0x40020800
 8001b6c:	08009894 	.word	0x08009894
 8001b70:	200004fc 	.word	0x200004fc
 8001b74:	080098c0 	.word	0x080098c0
 8001b78:	08009974 	.word	0x08009974
 8001b7c:	0800995c 	.word	0x0800995c
 8001b80:	20000314 	.word	0x20000314
 8001b84:	08009918 	.word	0x08009918
 8001b88:	200006b0 	.word	0x200006b0
 8001b8c:	080098a4 	.word	0x080098a4
 8001b90:	080098ec 	.word	0x080098ec
 8001b94:	0800993c 	.word	0x0800993c

08001b98 <SystemClock_Config>:
{
 8001b98:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9a:	2300      	movs	r3, #0
{
 8001b9c:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9e:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8001ba2:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba6:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001baa:	e9cd 3305 	strd	r3, r3, [sp, #20]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	4920      	ldr	r1, [pc, #128]	@ (8001c30 <SystemClock_Config+0x98>)
 8001bb0:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb2:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb4:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb6:	4a1f      	ldr	r2, [pc, #124]	@ (8001c34 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bb8:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8001bbc:	6408      	str	r0, [r1, #64]	@ 0x40
 8001bbe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001bc0:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8001bc4:	9101      	str	r1, [sp, #4]
 8001bc6:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc8:	9302      	str	r3, [sp, #8]
 8001bca:	6813      	ldr	r3, [r2, #0]
 8001bcc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bda:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bde:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001be2:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001be4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bea:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bee:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bf0:	2104      	movs	r1, #4
 8001bf2:	2002      	movs	r0, #2
 8001bf4:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001bf8:	220c      	movs	r2, #12
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001bfa:	2360      	movs	r3, #96	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfc:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001bfe:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001c00:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c02:	f001 ffdb 	bl	8003bbc <HAL_RCC_OscConfig>
 8001c06:	b108      	cbz	r0, 8001c0c <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c08:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c0c:	210f      	movs	r1, #15
 8001c0e:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c10:	e9cd 1403 	strd	r1, r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001c14:	2280      	movs	r2, #128	@ 0x80
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c16:	a803      	add	r0, sp, #12
 8001c18:	2101      	movs	r1, #1
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c1e:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c20:	f002 f9e2 	bl	8003fe8 <HAL_RCC_ClockConfig>
 8001c24:	b108      	cbz	r0, 8001c2a <SystemClock_Config+0x92>
 8001c26:	b672      	cpsid	i
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <SystemClock_Config+0x90>
}
 8001c2a:	b014      	add	sp, #80	@ 0x50
 8001c2c:	bd10      	pop	{r4, pc}
 8001c2e:	bf00      	nop
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40007000 	.word	0x40007000

08001c38 <HAL_UART_RxCpltCallback>:
{
 8001c38:	b538      	push	{r3, r4, r5, lr}
	if (huart == cmdHandle.huart) {
 8001c3a:	4c0b      	ldr	r4, [pc, #44]	@ (8001c68 <HAL_UART_RxCpltCallback+0x30>)
 8001c3c:	6825      	ldr	r5, [r4, #0]
 8001c3e:	4285      	cmp	r5, r0
 8001c40:	d000      	beq.n	8001c44 <HAL_UART_RxCpltCallback+0xc>
}
 8001c42:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t receivedByte = cmdHandle.rxBuffer[cmdHandle.rxIndex];
 8001c44:	f894 33f0 	ldrb.w	r3, [r4, #1008]	@ 0x3f0
 8001c48:	4423      	add	r3, r4
		CommandProtocol_ProcessByte(&cmdHandle, receivedByte);
 8001c4a:	4620      	mov	r0, r4
 8001c4c:	7a19      	ldrb	r1, [r3, #8]
 8001c4e:	f7ff fcab 	bl	80015a8 <CommandProtocol_ProcessByte>
		HAL_UART_Receive_IT(huart, &cmdHandle.rxBuffer[cmdHandle.rxIndex], 1);
 8001c52:	f894 13f0 	ldrb.w	r1, [r4, #1008]	@ 0x3f0
 8001c56:	3108      	adds	r1, #8
 8001c58:	4628      	mov	r0, r5
 8001c5a:	4421      	add	r1, r4
 8001c5c:	2201      	movs	r2, #1
}
 8001c5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_UART_Receive_IT(huart, &cmdHandle.rxBuffer[cmdHandle.rxIndex], 1);
 8001c62:	f002 bf79 	b.w	8004b58 <HAL_UART_Receive_IT>
 8001c66:	bf00      	nop
 8001c68:	200006f8 	.word	0x200006f8

08001c6c <HAL_TIM_PeriodElapsedCallback>:
    if (htim->Instance == TIM11)
 8001c6c:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x14>)
 8001c6e:	6802      	ldr	r2, [r0, #0]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d000      	beq.n	8001c76 <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8001c74:	4770      	bx	lr
    	globalControllerFlag = 1;
 8001c76:	4b03      	ldr	r3, [pc, #12]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]
}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40014800 	.word	0x40014800
 8001c84:	20000aed 	.word	0x20000aed

08001c88 <setup_motors>:
void setup_motors() {
 8001c88:	b570      	push	{r4, r5, r6, lr}
    statusCheck = StepMotor_Init(&l1_motor, &htim5, TIM_CHANNEL_1, M1_DIR_GPIO_Port, M1_DIR_Pin, M1_EN_GPIO_Port, M1_EN_Pin);
 8001c8a:	4b16      	ldr	r3, [pc, #88]	@ (8001ce4 <setup_motors+0x5c>)
 8001c8c:	4d16      	ldr	r5, [pc, #88]	@ (8001ce8 <setup_motors+0x60>)
 8001c8e:	4e17      	ldr	r6, [pc, #92]	@ (8001cec <setup_motors+0x64>)
    statusCheck = StepMotor_Init(&l2_motor, &htim9, TIM_CHANNEL_1, M2_DIR_GPIO_Port, M2_DIR_Pin, M2_EN_GPIO_Port, M2_EN_Pin);
 8001c90:	4c17      	ldr	r4, [pc, #92]	@ (8001cf0 <setup_motors+0x68>)
void setup_motors() {
 8001c92:	b084      	sub	sp, #16
    statusCheck = StepMotor_Init(&l1_motor, &htim5, TIM_CHANNEL_1, M1_DIR_GPIO_Port, M1_DIR_Pin, M1_EN_GPIO_Port, M1_EN_Pin);
 8001c94:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c98:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c9c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8001ca0:	9200      	str	r2, [sp, #0]
 8001ca2:	4914      	ldr	r1, [pc, #80]	@ (8001cf4 <setup_motors+0x6c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	4628      	mov	r0, r5
 8001ca8:	f7ff fcb6 	bl	8001618 <StepMotor_Init>
    statusCheck = StepMotor_Init(&l2_motor, &htim9, TIM_CHANNEL_1, M2_DIR_GPIO_Port, M2_DIR_Pin, M2_EN_GPIO_Port, M2_EN_Pin);
 8001cac:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <setup_motors+0x70>)
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	2208      	movs	r2, #8
    statusCheck = StepMotor_Init(&l1_motor, &htim5, TIM_CHANNEL_1, M1_DIR_GPIO_Port, M1_DIR_Pin, M1_EN_GPIO_Port, M1_EN_Pin);
 8001cb2:	7030      	strb	r0, [r6, #0]
    statusCheck = StepMotor_Init(&l2_motor, &htim9, TIM_CHANNEL_1, M2_DIR_GPIO_Port, M2_DIR_Pin, M2_EN_GPIO_Port, M2_EN_Pin);
 8001cb4:	9202      	str	r2, [sp, #8]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	9200      	str	r2, [sp, #0]
 8001cba:	4910      	ldr	r1, [pc, #64]	@ (8001cfc <setup_motors+0x74>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	4620      	mov	r0, r4
 8001cc0:	f7ff fcaa 	bl	8001618 <StepMotor_Init>
    motorArray[0] = &l1_motor;
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001d00 <setup_motors+0x78>)
    statusCheck = StepMotor_Init(&l2_motor, &htim9, TIM_CHANNEL_1, M2_DIR_GPIO_Port, M2_DIR_Pin, M2_EN_GPIO_Port, M2_EN_Pin);
 8001cc6:	7030      	strb	r0, [r6, #0]
    StepMotor_SetSpeedLUT(&l1_motor, 0); // Set motor speed to 0 Initially
 8001cc8:	2100      	movs	r1, #0
 8001cca:	4628      	mov	r0, r5
    motorArray[1] = &l2_motor;
 8001ccc:	e9c3 5400 	strd	r5, r4, [r3]
    StepMotor_SetSpeedLUT(&l1_motor, 0); // Set motor speed to 0 Initially
 8001cd0:	f7ff fcc2 	bl	8001658 <StepMotor_SetSpeedLUT>
    StepMotor_SetSpeedLUT(&l2_motor, 0); // Set motor speed to 0 Initially
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4620      	mov	r0, r4
}
 8001cd8:	b004      	add	sp, #16
 8001cda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    StepMotor_SetSpeedLUT(&l2_motor, 0); // Set motor speed to 0 Initially
 8001cde:	f7ff bcbb 	b.w	8001658 <StepMotor_SetSpeedLUT>
 8001ce2:	bf00      	nop
 8001ce4:	40020800 	.word	0x40020800
 8001ce8:	200006dc 	.word	0x200006dc
 8001cec:	20000aec 	.word	0x20000aec
 8001cf0:	200006c0 	.word	0x200006c0
 8001cf4:	20000b88 	.word	0x20000b88
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	20000b40 	.word	0x20000b40
 8001d00:	200006b0 	.word	0x200006b0

08001d04 <main>:
{
 8001d04:	b508      	push	{r3, lr}
  CommandProtocol_SetCommandProcessor(MyProcessCommand);
 8001d06:	4813      	ldr	r0, [pc, #76]	@ (8001d54 <main+0x50>)
 8001d08:	f7ff fc36 	bl	8001578 <CommandProtocol_SetCommandProcessor>
  HAL_Init();
 8001d0c:	f000 fb06 	bl	800231c <HAL_Init>
  SystemClock_Config();
 8001d10:	f7ff ff42 	bl	8001b98 <SystemClock_Config>
  DWT_Init();
 8001d14:	f7ff fd0a 	bl	800172c <DWT_Init>
  MX_GPIO_Init();
 8001d18:	f7ff fd44 	bl	80017a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d1c:	f7ff fd1e 	bl	800175c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001d20:	f000 fa4e 	bl	80021c0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001d24:	f7ff fdf0 	bl	8001908 <MX_I2C1_Init>
  MX_TIM11_Init();
 8001d28:	f000 f8da 	bl	8001ee0 <MX_TIM11_Init>
  MX_TIM5_Init();
 8001d2c:	f000 f990 	bl	8002050 <MX_TIM5_Init>
  MX_TIM9_Init();
 8001d30:	f000 f9f2 	bl	8002118 <MX_TIM9_Init>
  statusCheck = CommandProtocol_Init(&cmdHandle, &huart1, 100);
 8001d34:	4908      	ldr	r1, [pc, #32]	@ (8001d58 <main+0x54>)
 8001d36:	4809      	ldr	r0, [pc, #36]	@ (8001d5c <main+0x58>)
 8001d38:	2264      	movs	r2, #100	@ 0x64
 8001d3a:	f7ff fc23 	bl	8001584 <CommandProtocol_Init>
 8001d3e:	4b08      	ldr	r3, [pc, #32]	@ (8001d60 <main+0x5c>)
 8001d40:	7018      	strb	r0, [r3, #0]
  setup_motors();
 8001d42:	f7ff ffa1 	bl	8001c88 <setup_motors>
  MultivariablePID_Init(&pidObj);
 8001d46:	4807      	ldr	r0, [pc, #28]	@ (8001d64 <main+0x60>)
 8001d48:	f7ff f972 	bl	8001030 <MultivariablePID_Init>
  Trajectory_Init(&robotTraj);
 8001d4c:	4806      	ldr	r0, [pc, #24]	@ (8001d68 <main+0x64>)
 8001d4e:	f7ff fa6b 	bl	8001228 <Trajectory_Init>
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <main+0x4e>
 8001d54:	08001a4d 	.word	0x08001a4d
 8001d58:	20000bd0 	.word	0x20000bd0
 8001d5c:	200006f8 	.word	0x200006f8
 8001d60:	20000aec 	.word	0x20000aec
 8001d64:	200004fc 	.word	0x200004fc
 8001d68:	20000314 	.word	0x20000314

08001d6c <Error_Handler>:
 8001d6c:	b672      	cpsid	i
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <Error_Handler+0x2>

08001d70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d70:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d72:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <HAL_MspInit+0x34>)
 8001d74:	2100      	movs	r1, #0
 8001d76:	9100      	str	r1, [sp, #0]
 8001d78:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d7e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001d80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d82:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001d86:	9200      	str	r2, [sp, #0]
 8001d88:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	9101      	str	r1, [sp, #4]
 8001d8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d8e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001d92:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d9e:	b002      	add	sp, #8
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40023800 	.word	0x40023800

08001da8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001da8:	e7fe      	b.n	8001da8 <NMI_Handler>
 8001daa:	bf00      	nop

08001dac <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dac:	e7fe      	b.n	8001dac <HardFault_Handler>
 8001dae:	bf00      	nop

08001db0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db0:	e7fe      	b.n	8001db0 <MemManage_Handler>
 8001db2:	bf00      	nop

08001db4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db4:	e7fe      	b.n	8001db4 <BusFault_Handler>
 8001db6:	bf00      	nop

08001db8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001db8:	e7fe      	b.n	8001db8 <UsageFault_Handler>
 8001dba:	bf00      	nop

08001dbc <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop

08001dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop

08001dc4 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop

08001dc8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dc8:	f000 bac2 	b.w	8002350 <HAL_IncTick>

08001dcc <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001dcc:	4801      	ldr	r0, [pc, #4]	@ (8001dd4 <DMA1_Stream0_IRQHandler+0x8>)
 8001dce:	f000 bc37 	b.w	8002640 <HAL_DMA_IRQHandler>
 8001dd2:	bf00      	nop
 8001dd4:	20000200 	.word	0x20000200

08001dd8 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001dd8:	4801      	ldr	r0, [pc, #4]	@ (8001de0 <DMA1_Stream1_IRQHandler+0x8>)
 8001dda:	f000 bc31 	b.w	8002640 <HAL_DMA_IRQHandler>
 8001dde:	bf00      	nop
 8001de0:	20000260 	.word	0x20000260

08001de4 <TIM1_TRG_COM_TIM11_IRQHandler>:
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001de4:	4801      	ldr	r0, [pc, #4]	@ (8001dec <TIM1_TRG_COM_TIM11_IRQHandler+0x8>)
 8001de6:	f002 bcc9 	b.w	800477c <HAL_TIM_IRQHandler>
 8001dea:	bf00      	nop
 8001dec:	20000af8 	.word	0x20000af8

08001df0 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001df0:	4801      	ldr	r0, [pc, #4]	@ (8001df8 <I2C1_EV_IRQHandler+0x8>)
 8001df2:	f001 b935 	b.w	8003060 <HAL_I2C_EV_IRQHandler>
 8001df6:	bf00      	nop
 8001df8:	200002c0 	.word	0x200002c0

08001dfc <I2C1_ER_IRQHandler>:
void I2C1_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001dfc:	4801      	ldr	r0, [pc, #4]	@ (8001e04 <I2C1_ER_IRQHandler+0x8>)
 8001dfe:	f001 be0f 	b.w	8003a20 <HAL_I2C_ER_IRQHandler>
 8001e02:	bf00      	nop
 8001e04:	200002c0 	.word	0x200002c0

08001e08 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e08:	4801      	ldr	r0, [pc, #4]	@ (8001e10 <USART1_IRQHandler+0x8>)
 8001e0a:	f002 bf3b 	b.w	8004c84 <HAL_UART_IRQHandler>
 8001e0e:	bf00      	nop
 8001e10:	20000bd0 	.word	0x20000bd0

08001e14 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001e14:	2001      	movs	r0, #1
 8001e16:	4770      	bx	lr

08001e18 <_kill>:

int _kill(int pid, int sig)
{
 8001e18:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e1a:	f004 ffbd 	bl	8006d98 <__errno>
 8001e1e:	2316      	movs	r3, #22
 8001e20:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001e22:	f04f 30ff 	mov.w	r0, #4294967295
 8001e26:	bd08      	pop	{r3, pc}

08001e28 <_exit>:

void _exit (int status)
{
 8001e28:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001e2a:	f004 ffb5 	bl	8006d98 <__errno>
 8001e2e:	2316      	movs	r3, #22
 8001e30:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001e32:	e7fe      	b.n	8001e32 <_exit+0xa>

08001e34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e34:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e36:	1e16      	subs	r6, r2, #0
 8001e38:	dd07      	ble.n	8001e4a <_read+0x16>
 8001e3a:	460c      	mov	r4, r1
 8001e3c:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001e3e:	f3af 8000 	nop.w
 8001e42:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e46:	42a5      	cmp	r5, r4
 8001e48:	d1f9      	bne.n	8001e3e <_read+0xa>
  }

  return len;
}
 8001e4a:	4630      	mov	r0, r6
 8001e4c:	bd70      	pop	{r4, r5, r6, pc}
 8001e4e:	bf00      	nop

08001e50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e50:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e52:	1e16      	subs	r6, r2, #0
 8001e54:	dd07      	ble.n	8001e66 <_write+0x16>
 8001e56:	460c      	mov	r4, r1
 8001e58:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8001e5a:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001e5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e62:	42a5      	cmp	r5, r4
 8001e64:	d1f9      	bne.n	8001e5a <_write+0xa>
  }
  return len;
}
 8001e66:	4630      	mov	r0, r6
 8001e68:	bd70      	pop	{r4, r5, r6, pc}
 8001e6a:	bf00      	nop

08001e6c <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop

08001e74 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001e74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e78:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop

08001e80 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001e80:	2001      	movs	r0, #1
 8001e82:	4770      	bx	lr

08001e84 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001e84:	2000      	movs	r0, #0
 8001e86:	4770      	bx	lr

08001e88 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e88:	490c      	ldr	r1, [pc, #48]	@ (8001ebc <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e8a:	4a0d      	ldr	r2, [pc, #52]	@ (8001ec0 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001e8c:	680b      	ldr	r3, [r1, #0]
{
 8001e8e:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e90:	4c0c      	ldr	r4, [pc, #48]	@ (8001ec4 <_sbrk+0x3c>)
 8001e92:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001e94:	b12b      	cbz	r3, 8001ea2 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e96:	4418      	add	r0, r3
 8001e98:	4290      	cmp	r0, r2
 8001e9a:	d807      	bhi.n	8001eac <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001e9c:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001ea2:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <_sbrk+0x40>)
 8001ea4:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001ea6:	4418      	add	r0, r3
 8001ea8:	4290      	cmp	r0, r2
 8001eaa:	d9f7      	bls.n	8001e9c <_sbrk+0x14>
    errno = ENOMEM;
 8001eac:	f004 ff74 	bl	8006d98 <__errno>
 8001eb0:	230c      	movs	r3, #12
 8001eb2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	bd10      	pop	{r4, pc}
 8001ebc:	20000af0 	.word	0x20000af0
 8001ec0:	20020000 	.word	0x20020000
 8001ec4:	00000400 	.word	0x00000400
 8001ec8:	20000d68 	.word	0x20000d68

08001ecc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ecc:	4a03      	ldr	r2, [pc, #12]	@ (8001edc <SystemInit+0x10>)
 8001ece:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001ed2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ed6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eda:	4770      	bx	lr
 8001edc:	e000ed00 	.word	0xe000ed00

08001ee0 <MX_TIM11_Init>:
  HAL_TIM_MspPostInit(&htim9);

}
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001ee0:	b510      	push	{r4, lr}
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001ee2:	480a      	ldr	r0, [pc, #40]	@ (8001f0c <MX_TIM11_Init+0x2c>)
 8001ee4:	4c0a      	ldr	r4, [pc, #40]	@ (8001f10 <MX_TIM11_Init+0x30>)
  htim11.Init.Prescaler = 5000-1;
 8001ee6:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001eea:	2300      	movs	r3, #0
 8001eec:	e9c0 4200 	strd	r4, r2, [r0]
 8001ef0:	2163      	movs	r1, #99	@ 0x63
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim11.Init.Period = 100-1;
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ef2:	2280      	movs	r2, #128	@ 0x80
  htim11.Init.Prescaler = 5000-1;
 8001ef4:	e9c0 3102 	strd	r3, r1, [r0, #8]
 8001ef8:	6103      	str	r3, [r0, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001efa:	6182      	str	r2, [r0, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001efc:	f002 f932 	bl	8004164 <HAL_TIM_Base_Init>
 8001f00:	b900      	cbnz	r0, 8001f04 <MX_TIM11_Init+0x24>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001f02:	bd10      	pop	{r4, pc}
 8001f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001f08:	f7ff bf30 	b.w	8001d6c <Error_Handler>
 8001f0c:	20000af8 	.word	0x20000af8
 8001f10:	40014800 	.word	0x40014800

08001f14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f14:	b500      	push	{lr}

  if(tim_baseHandle->Instance==TIM5)
 8001f16:	4a21      	ldr	r2, [pc, #132]	@ (8001f9c <HAL_TIM_Base_MspInit+0x88>)
 8001f18:	6803      	ldr	r3, [r0, #0]
 8001f1a:	4293      	cmp	r3, r2
{
 8001f1c:	b085      	sub	sp, #20
  if(tim_baseHandle->Instance==TIM5)
 8001f1e:	d017      	beq.n	8001f50 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM9)
 8001f20:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa0 <HAL_TIM_Base_MspInit+0x8c>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d005      	beq.n	8001f32 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM11)
 8001f26:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa4 <HAL_TIM_Base_MspInit+0x90>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d020      	beq.n	8001f6e <HAL_TIM_Base_MspInit+0x5a>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001f2c:	b005      	add	sp, #20
 8001f2e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001f32:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x94>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	9202      	str	r2, [sp, #8]
 8001f38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f3a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001f3e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f46:	9302      	str	r3, [sp, #8]
 8001f48:	9b02      	ldr	r3, [sp, #8]
}
 8001f4a:	b005      	add	sp, #20
 8001f4c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f50:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x94>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	9201      	str	r2, [sp, #4]
 8001f56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f58:	f042 0208 	orr.w	r2, r2, #8
 8001f5c:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	9b01      	ldr	r3, [sp, #4]
}
 8001f68:	b005      	add	sp, #20
 8001f6a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001f6e:	2200      	movs	r2, #0
 8001f70:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa8 <HAL_TIM_Base_MspInit+0x94>)
 8001f72:	9203      	str	r2, [sp, #12]
 8001f74:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8001f76:	f441 2180 	orr.w	r1, r1, #262144	@ 0x40000
 8001f7a:	6459      	str	r1, [r3, #68]	@ 0x44
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f82:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001f84:	4611      	mov	r1, r2
 8001f86:	201a      	movs	r0, #26
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001f88:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001f8a:	f000 fa05 	bl	8002398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001f8e:	201a      	movs	r0, #26
}
 8001f90:	b005      	add	sp, #20
 8001f92:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001f96:	f000 ba3b 	b.w	8002410 <HAL_NVIC_EnableIRQ>
 8001f9a:	bf00      	nop
 8001f9c:	40000c00 	.word	0x40000c00
 8001fa0:	40014000 	.word	0x40014000
 8001fa4:	40014800 	.word	0x40014800
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	00000000 	.word	0x00000000

08001fb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001fb0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM5)
 8001fb2:	6802      	ldr	r2, [r0, #0]
 8001fb4:	4922      	ldr	r1, [pc, #136]	@ (8002040 <HAL_TIM_MspPostInit+0x90>)
{
 8001fb6:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM5)
 8001fba:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001fc0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001fc4:	9306      	str	r3, [sp, #24]
  if(timHandle->Instance==TIM5)
 8001fc6:	d004      	beq.n	8001fd2 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }
  else if(timHandle->Instance==TIM9)
 8001fc8:	491e      	ldr	r1, [pc, #120]	@ (8002044 <HAL_TIM_MspPostInit+0x94>)
 8001fca:	428a      	cmp	r2, r1
 8001fcc:	d018      	beq.n	8002000 <HAL_TIM_MspPostInit+0x50>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001fce:	b009      	add	sp, #36	@ 0x24
 8001fd0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8002048 <HAL_TIM_MspPostInit+0x98>)
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fd8:	481c      	ldr	r0, [pc, #112]	@ (800204c <HAL_TIM_MspPostInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fe2:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 8002038 <HAL_TIM_MspPostInit+0x88>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fec:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001fee:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ff0:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff4:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ff6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff8:	f000 fbfc 	bl	80027f4 <HAL_GPIO_Init>
}
 8001ffc:	b009      	add	sp, #36	@ 0x24
 8001ffe:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002000:	4a11      	ldr	r2, [pc, #68]	@ (8002048 <HAL_TIM_MspPostInit+0x98>)
 8002002:	9301      	str	r3, [sp, #4]
 8002004:	6b11      	ldr	r1, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002006:	4811      	ldr	r0, [pc, #68]	@ (800204c <HAL_TIM_MspPostInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002008:	f041 0101 	orr.w	r1, r1, #1
 800200c:	6311      	str	r1, [r2, #48]	@ 0x30
 800200e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002010:	f002 0201 	and.w	r2, r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002016:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002018:	2404      	movs	r4, #4
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800201a:	2203      	movs	r2, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800201c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	e9cd 4302 	strd	r4, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002022:	e9cd 3304 	strd	r3, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002026:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002028:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800202a:	f000 fbe3 	bl	80027f4 <HAL_GPIO_Init>
}
 800202e:	b009      	add	sp, #36	@ 0x24
 8002030:	bd30      	pop	{r4, r5, pc}
 8002032:	bf00      	nop
 8002034:	f3af 8000 	nop.w
 8002038:	00000001 	.word	0x00000001
 800203c:	00000002 	.word	0x00000002
 8002040:	40000c00 	.word	0x40000c00
 8002044:	40014000 	.word	0x40014000
 8002048:	40023800 	.word	0x40023800
 800204c:	40020000 	.word	0x40020000

08002050 <MX_TIM5_Init>:
{
 8002050:	b510      	push	{r4, lr}
  htim5.Instance = TIM5;
 8002052:	4c2f      	ldr	r4, [pc, #188]	@ (8002110 <MX_TIM5_Init+0xc0>)
{
 8002054:	b08e      	sub	sp, #56	@ 0x38
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002056:	2300      	movs	r3, #0
 8002058:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800205c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002060:	e9cd 3300 	strd	r3, r3, [sp]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002064:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002068:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800206c:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8002070:	930c      	str	r3, [sp, #48]	@ 0x30
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002072:	60a3      	str	r3, [r4, #8]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002074:	6123      	str	r3, [r4, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002076:	2380      	movs	r3, #128	@ 0x80
 8002078:	61a3      	str	r3, [r4, #24]
  htim5.Init.Prescaler = 65535;
 800207a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800207e:	6063      	str	r3, [r4, #4]
  htim5.Init.Period = 65535;
 8002080:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002082:	4620      	mov	r0, r4
  htim5.Instance = TIM5;
 8002084:	4b23      	ldr	r3, [pc, #140]	@ (8002114 <MX_TIM5_Init+0xc4>)
 8002086:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002088:	f002 f86c 	bl	8004164 <HAL_TIM_Base_Init>
 800208c:	bb50      	cbnz	r0, 80020e4 <MX_TIM5_Init+0x94>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800208e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002092:	481f      	ldr	r0, [pc, #124]	@ (8002110 <MX_TIM5_Init+0xc0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002094:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002096:	a902      	add	r1, sp, #8
 8002098:	f002 fabe 	bl	8004618 <HAL_TIM_ConfigClockSource>
 800209c:	bb70      	cbnz	r0, 80020fc <MX_TIM5_Init+0xac>
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 800209e:	481c      	ldr	r0, [pc, #112]	@ (8002110 <MX_TIM5_Init+0xc0>)
 80020a0:	f002 f8dc 	bl	800425c <HAL_TIM_OC_Init>
 80020a4:	bb38      	cbnz	r0, 80020f6 <MX_TIM5_Init+0xa6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a6:	2200      	movs	r2, #0
 80020a8:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020aa:	4819      	ldr	r0, [pc, #100]	@ (8002110 <MX_TIM5_Init+0xc0>)
 80020ac:	4669      	mov	r1, sp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ae:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80020b2:	f002 fbff 	bl	80048b4 <HAL_TIMEx_MasterConfigSynchronization>
 80020b6:	b9d8      	cbnz	r0, 80020f0 <MX_TIM5_Init+0xa0>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80020b8:	ed9f 7b13 	vldr	d7, [pc, #76]	@ 8002108 <MX_TIM5_Init+0xb8>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020bc:	2200      	movs	r2, #0
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020be:	4814      	ldr	r0, [pc, #80]	@ (8002110 <MX_TIM5_Init+0xc0>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020c0:	9208      	str	r2, [sp, #32]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020c2:	a906      	add	r1, sp, #24
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80020c4:	ed8d 7b06 	vstr	d7, [sp, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020c8:	920a      	str	r2, [sp, #40]	@ 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ca:	f002 f9e9 	bl	80044a0 <HAL_TIM_OC_ConfigChannel>
 80020ce:	b960      	cbnz	r0, 80020ea <MX_TIM5_Init+0x9a>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim5, TIM_CHANNEL_1);
 80020d0:	6822      	ldr	r2, [r4, #0]
  HAL_TIM_MspPostInit(&htim5);
 80020d2:	480f      	ldr	r0, [pc, #60]	@ (8002110 <MX_TIM5_Init+0xc0>)
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim5, TIM_CHANNEL_1);
 80020d4:	6993      	ldr	r3, [r2, #24]
 80020d6:	f043 0308 	orr.w	r3, r3, #8
 80020da:	6193      	str	r3, [r2, #24]
  HAL_TIM_MspPostInit(&htim5);
 80020dc:	f7ff ff68 	bl	8001fb0 <HAL_TIM_MspPostInit>
}
 80020e0:	b00e      	add	sp, #56	@ 0x38
 80020e2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80020e4:	f7ff fe42 	bl	8001d6c <Error_Handler>
 80020e8:	e7d1      	b.n	800208e <MX_TIM5_Init+0x3e>
    Error_Handler();
 80020ea:	f7ff fe3f 	bl	8001d6c <Error_Handler>
 80020ee:	e7ef      	b.n	80020d0 <MX_TIM5_Init+0x80>
    Error_Handler();
 80020f0:	f7ff fe3c 	bl	8001d6c <Error_Handler>
 80020f4:	e7e0      	b.n	80020b8 <MX_TIM5_Init+0x68>
    Error_Handler();
 80020f6:	f7ff fe39 	bl	8001d6c <Error_Handler>
 80020fa:	e7d4      	b.n	80020a6 <MX_TIM5_Init+0x56>
    Error_Handler();
 80020fc:	f7ff fe36 	bl	8001d6c <Error_Handler>
 8002100:	e7cd      	b.n	800209e <MX_TIM5_Init+0x4e>
 8002102:	bf00      	nop
 8002104:	f3af 8000 	nop.w
 8002108:	00000030 	.word	0x00000030
 800210c:	00000000 	.word	0x00000000
 8002110:	20000b88 	.word	0x20000b88
 8002114:	40000c00 	.word	0x40000c00

08002118 <MX_TIM9_Init>:
{
 8002118:	b510      	push	{r4, lr}
  htim9.Instance = TIM9;
 800211a:	4c27      	ldr	r4, [pc, #156]	@ (80021b8 <MX_TIM9_Init+0xa0>)
 800211c:	4a27      	ldr	r2, [pc, #156]	@ (80021bc <MX_TIM9_Init+0xa4>)
{
 800211e:	b08c      	sub	sp, #48	@ 0x30
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002120:	2300      	movs	r3, #0
  htim9.Instance = TIM9;
 8002122:	6022      	str	r2, [r4, #0]
  htim9.Init.Prescaler = 65535;
 8002124:	f64f 72ff 	movw	r2, #65535	@ 0xffff
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002128:	e9c4 2301 	strd	r2, r3, [r4, #4]
  htim9.Init.Period = 65535;
 800212c:	60e2      	str	r2, [r4, #12]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800212e:	4620      	mov	r0, r4
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002130:	2280      	movs	r2, #128	@ 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002132:	e9cd 3300 	strd	r3, r3, [sp]
 8002136:	e9cd 3302 	strd	r3, r3, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800213a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800213e:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002142:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8002146:	930a      	str	r3, [sp, #40]	@ 0x28
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002148:	6123      	str	r3, [r4, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800214a:	61a2      	str	r2, [r4, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800214c:	f002 f80a 	bl	8004164 <HAL_TIM_Base_Init>
 8002150:	bb08      	cbnz	r0, 8002196 <MX_TIM9_Init+0x7e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002152:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002156:	4818      	ldr	r0, [pc, #96]	@ (80021b8 <MX_TIM9_Init+0xa0>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002158:	9300      	str	r3, [sp, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800215a:	4669      	mov	r1, sp
 800215c:	f002 fa5c 	bl	8004618 <HAL_TIM_ConfigClockSource>
 8002160:	bb10      	cbnz	r0, 80021a8 <MX_TIM9_Init+0x90>
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 8002162:	4815      	ldr	r0, [pc, #84]	@ (80021b8 <MX_TIM9_Init+0xa0>)
 8002164:	f002 f87a 	bl	800425c <HAL_TIM_OC_Init>
 8002168:	b9d8      	cbnz	r0, 80021a2 <MX_TIM9_Init+0x8a>
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800216a:	ed9f 7b11 	vldr	d7, [pc, #68]	@ 80021b0 <MX_TIM9_Init+0x98>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800216e:	2200      	movs	r2, #0
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002170:	4811      	ldr	r0, [pc, #68]	@ (80021b8 <MX_TIM9_Init+0xa0>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002172:	9206      	str	r2, [sp, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002174:	a904      	add	r1, sp, #16
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002176:	ed8d 7b04 	vstr	d7, [sp, #16]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800217a:	9208      	str	r2, [sp, #32]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800217c:	f002 f990 	bl	80044a0 <HAL_TIM_OC_ConfigChannel>
 8002180:	b960      	cbnz	r0, 800219c <MX_TIM9_Init+0x84>
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim9, TIM_CHANNEL_1);
 8002182:	6822      	ldr	r2, [r4, #0]
  HAL_TIM_MspPostInit(&htim9);
 8002184:	480c      	ldr	r0, [pc, #48]	@ (80021b8 <MX_TIM9_Init+0xa0>)
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim9, TIM_CHANNEL_1);
 8002186:	6993      	ldr	r3, [r2, #24]
 8002188:	f043 0308 	orr.w	r3, r3, #8
 800218c:	6193      	str	r3, [r2, #24]
  HAL_TIM_MspPostInit(&htim9);
 800218e:	f7ff ff0f 	bl	8001fb0 <HAL_TIM_MspPostInit>
}
 8002192:	b00c      	add	sp, #48	@ 0x30
 8002194:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002196:	f7ff fde9 	bl	8001d6c <Error_Handler>
 800219a:	e7da      	b.n	8002152 <MX_TIM9_Init+0x3a>
    Error_Handler();
 800219c:	f7ff fde6 	bl	8001d6c <Error_Handler>
 80021a0:	e7ef      	b.n	8002182 <MX_TIM9_Init+0x6a>
    Error_Handler();
 80021a2:	f7ff fde3 	bl	8001d6c <Error_Handler>
 80021a6:	e7e0      	b.n	800216a <MX_TIM9_Init+0x52>
    Error_Handler();
 80021a8:	f7ff fde0 	bl	8001d6c <Error_Handler>
 80021ac:	e7d9      	b.n	8002162 <MX_TIM9_Init+0x4a>
 80021ae:	bf00      	nop
 80021b0:	00000030 	.word	0x00000030
 80021b4:	00000000 	.word	0x00000000
 80021b8:	20000b40 	.word	0x20000b40
 80021bc:	40014000 	.word	0x40014000

080021c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021c0:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021c2:	480b      	ldr	r0, [pc, #44]	@ (80021f0 <MX_USART1_UART_Init+0x30>)
 80021c4:	4c0b      	ldr	r4, [pc, #44]	@ (80021f4 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021c6:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 115200;
 80021c8:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021cc:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 80021ce:	e9c0 4100 	strd	r4, r1, [r0]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021d2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021d6:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021da:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021de:	f002 fba5 	bl	800492c <HAL_UART_Init>
 80021e2:	b900      	cbnz	r0, 80021e6 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021e4:	bd10      	pop	{r4, pc}
 80021e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80021ea:	f7ff bdbf 	b.w	8001d6c <Error_Handler>
 80021ee:	bf00      	nop
 80021f0:	20000bd0 	.word	0x20000bd0
 80021f4:	40011000 	.word	0x40011000

080021f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021f8:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 80021fa:	4b1f      	ldr	r3, [pc, #124]	@ (8002278 <HAL_UART_MspInit+0x80>)
 80021fc:	6802      	ldr	r2, [r0, #0]
{
 80021fe:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 8002202:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8002208:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800220c:	9406      	str	r4, [sp, #24]
  if(uartHandle->Instance==USART1)
 800220e:	d001      	beq.n	8002214 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002210:	b009      	add	sp, #36	@ 0x24
 8002212:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002214:	f503 3394 	add.w	r3, r3, #75776	@ 0x12800
 8002218:	9400      	str	r4, [sp, #0]
 800221a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221c:	4817      	ldr	r0, [pc, #92]	@ (800227c <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800221e:	f042 0210 	orr.w	r2, r2, #16
 8002222:	645a      	str	r2, [r3, #68]	@ 0x44
 8002224:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002226:	f002 0210 	and.w	r2, r2, #16
 800222a:	9200      	str	r2, [sp, #0]
 800222c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	9401      	str	r4, [sp, #4]
 8002230:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	631a      	str	r2, [r3, #48]	@ 0x30
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800223a:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8002270 <HAL_UART_MspInit+0x78>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002244:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002246:	2307      	movs	r3, #7
 8002248:	2203      	movs	r2, #3
 800224a:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800224e:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002252:	9d01      	ldr	r5, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002254:	f000 face 	bl	80027f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002258:	4622      	mov	r2, r4
 800225a:	4621      	mov	r1, r4
 800225c:	2025      	movs	r0, #37	@ 0x25
 800225e:	f000 f89b 	bl	8002398 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002262:	2025      	movs	r0, #37	@ 0x25
 8002264:	f000 f8d4 	bl	8002410 <HAL_NVIC_EnableIRQ>
}
 8002268:	b009      	add	sp, #36	@ 0x24
 800226a:	bd30      	pop	{r4, r5, pc}
 800226c:	f3af 8000 	nop.w
 8002270:	00000600 	.word	0x00000600
 8002274:	00000002 	.word	0x00000002
 8002278:	40011000 	.word	0x40011000
 800227c:	40020000 	.word	0x40020000

08002280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002280:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002284:	f7ff fe22 	bl	8001ecc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002288:	480c      	ldr	r0, [pc, #48]	@ (80022bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800228a:	490d      	ldr	r1, [pc, #52]	@ (80022c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800228c:	4a0d      	ldr	r2, [pc, #52]	@ (80022c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800228e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002290:	e002      	b.n	8002298 <LoopCopyDataInit>

08002292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002296:	3304      	adds	r3, #4

08002298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800229a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800229c:	d3f9      	bcc.n	8002292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800229e:	4a0a      	ldr	r2, [pc, #40]	@ (80022c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022a0:	4c0a      	ldr	r4, [pc, #40]	@ (80022cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80022a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a4:	e001      	b.n	80022aa <LoopFillZerobss>

080022a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a8:	3204      	adds	r2, #4

080022aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022ac:	d3fb      	bcc.n	80022a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ae:	f004 fd79 	bl	8006da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022b2:	f7ff fd27 	bl	8001d04 <main>
  bx  lr    
 80022b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80022c4:	0800ec0c 	.word	0x0800ec0c
  ldr r2, =_sbss
 80022c8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80022cc:	20000d68 	.word	0x20000d68

080022d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022d0:	e7fe      	b.n	80022d0 <ADC_IRQHandler>
	...

080022d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022d4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d6:	4a0e      	ldr	r2, [pc, #56]	@ (8002310 <HAL_InitTick+0x3c>)
 80022d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002314 <HAL_InitTick+0x40>)
 80022da:	7812      	ldrb	r2, [r2, #0]
{
 80022dc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80022e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80022ec:	f000 f89e 	bl	800242c <HAL_SYSTICK_Config>
 80022f0:	b908      	cbnz	r0, 80022f6 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f2:	2d0f      	cmp	r5, #15
 80022f4:	d901      	bls.n	80022fa <HAL_InitTick+0x26>
    return HAL_ERROR;
 80022f6:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80022f8:	bd38      	pop	{r3, r4, r5, pc}
 80022fa:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022fc:	4602      	mov	r2, r0
 80022fe:	4629      	mov	r1, r5
 8002300:	f04f 30ff 	mov.w	r0, #4294967295
 8002304:	f000 f848 	bl	8002398 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002308:	4b03      	ldr	r3, [pc, #12]	@ (8002318 <HAL_InitTick+0x44>)
 800230a:	4620      	mov	r0, r4
 800230c:	601d      	str	r5, [r3, #0]
}
 800230e:	bd38      	pop	{r3, r4, r5, pc}
 8002310:	20000004 	.word	0x20000004
 8002314:	20000000 	.word	0x20000000
 8002318:	20000008 	.word	0x20000008

0800231c <HAL_Init>:
{
 800231c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800231e:	4b0b      	ldr	r3, [pc, #44]	@ (800234c <HAL_Init+0x30>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002326:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800232e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002336:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002338:	2003      	movs	r0, #3
 800233a:	f000 f81b 	bl	8002374 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800233e:	200f      	movs	r0, #15
 8002340:	f7ff ffc8 	bl	80022d4 <HAL_InitTick>
  HAL_MspInit();
 8002344:	f7ff fd14 	bl	8001d70 <HAL_MspInit>
}
 8002348:	2000      	movs	r0, #0
 800234a:	bd08      	pop	{r3, pc}
 800234c:	40023c00 	.word	0x40023c00

08002350 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002350:	4a03      	ldr	r2, [pc, #12]	@ (8002360 <HAL_IncTick+0x10>)
 8002352:	4b04      	ldr	r3, [pc, #16]	@ (8002364 <HAL_IncTick+0x14>)
 8002354:	6811      	ldr	r1, [r2, #0]
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	440b      	add	r3, r1
 800235a:	6013      	str	r3, [r2, #0]
}
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	20000c18 	.word	0x20000c18
 8002364:	20000004 	.word	0x20000004

08002368 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002368:	4b01      	ldr	r3, [pc, #4]	@ (8002370 <HAL_GetTick+0x8>)
 800236a:	6818      	ldr	r0, [r3, #0]
}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20000c18 	.word	0x20000c18

08002374 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002374:	4907      	ldr	r1, [pc, #28]	@ (8002394 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002376:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002378:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237a:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800237e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002382:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002384:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002386:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800238a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800238e:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000ed00 	.word	0xe000ed00

08002398 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002398:	4b1b      	ldr	r3, [pc, #108]	@ (8002408 <HAL_NVIC_SetPriority+0x70>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a2:	f1c3 0e07 	rsb	lr, r3, #7
 80023a6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023aa:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023ae:	bf28      	it	cs
 80023b0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023b4:	f1bc 0f06 	cmp.w	ip, #6
 80023b8:	d91c      	bls.n	80023f4 <HAL_NVIC_SetPriority+0x5c>
 80023ba:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	fa03 f30c 	lsl.w	r3, r3, ip
 80023c6:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ca:	f04f 33ff 	mov.w	r3, #4294967295
 80023ce:	fa03 f30e 	lsl.w	r3, r3, lr
 80023d2:	ea21 0303 	bic.w	r3, r1, r3
 80023d6:	fa03 f30c 	lsl.w	r3, r3, ip
 80023da:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023dc:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80023de:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e0:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80023e2:	db0a      	blt.n	80023fa <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e4:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80023e8:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 80023ec:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80023f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80023f4:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023f6:	4694      	mov	ip, r2
 80023f8:	e7e7      	b.n	80023ca <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fa:	4a04      	ldr	r2, [pc, #16]	@ (800240c <HAL_NVIC_SetPriority+0x74>)
 80023fc:	f000 000f 	and.w	r0, r0, #15
 8002400:	4402      	add	r2, r0
 8002402:	7613      	strb	r3, [r2, #24]
 8002404:	f85d fb04 	ldr.w	pc, [sp], #4
 8002408:	e000ed00 	.word	0xe000ed00
 800240c:	e000ecfc 	.word	0xe000ecfc

08002410 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002410:	2800      	cmp	r0, #0
 8002412:	db07      	blt.n	8002424 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002414:	4a04      	ldr	r2, [pc, #16]	@ (8002428 <HAL_NVIC_EnableIRQ+0x18>)
 8002416:	0941      	lsrs	r1, r0, #5
 8002418:	2301      	movs	r3, #1
 800241a:	f000 001f 	and.w	r0, r0, #31
 800241e:	4083      	lsls	r3, r0
 8002420:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000e100 	.word	0xe000e100

0800242c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800242c:	3801      	subs	r0, #1
 800242e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8002432:	d301      	bcc.n	8002438 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002434:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002436:	4770      	bx	lr
{
 8002438:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800243a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800243e:	4c07      	ldr	r4, [pc, #28]	@ (800245c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002440:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002442:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8002446:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800244a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800244c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800244e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002450:	619a      	str	r2, [r3, #24]
}
 8002452:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002456:	6119      	str	r1, [r3, #16]
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002460:	b538      	push	{r3, r4, r5, lr}
 8002462:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8002464:	f7ff ff80 	bl	8002368 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002468:	2c00      	cmp	r4, #0
 800246a:	d06d      	beq.n	8002548 <HAL_DMA_Init+0xe8>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800246c:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 800246e:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8002470:	2102      	movs	r1, #2
 8002472:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8002476:	f884 2034 	strb.w	r2, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	f022 0201 	bic.w	r2, r2, #1
 8002480:	4605      	mov	r5, r0
 8002482:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002484:	e005      	b.n	8002492 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002486:	f7ff ff6f 	bl	8002368 <HAL_GetTick>
 800248a:	1b43      	subs	r3, r0, r5
 800248c:	2b05      	cmp	r3, #5
 800248e:	d837      	bhi.n	8002500 <HAL_DMA_Init+0xa0>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002490:	6823      	ldr	r3, [r4, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	07d1      	lsls	r1, r2, #31
 8002496:	d4f6      	bmi.n	8002486 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002498:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800249c:	68e1      	ldr	r1, [r4, #12]
 800249e:	4302      	orrs	r2, r0
 80024a0:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a2:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024a6:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a8:	432a      	orrs	r2, r5
 80024aa:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ac:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 80024ae:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b0:	4302      	orrs	r2, r0
 80024b2:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024b4:	4931      	ldr	r1, [pc, #196]	@ (800257c <HAL_DMA_Init+0x11c>)
 80024b6:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80024b8:	6a25      	ldr	r5, [r4, #32]
 80024ba:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024bc:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024be:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80024c0:	2904      	cmp	r1, #4
 80024c2:	d024      	beq.n	800250e <HAL_DMA_Init+0xae>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024c4:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024c6:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024c8:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024cc:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024ce:	b2d8      	uxtb	r0, r3
 80024d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002580 <HAL_DMA_Init+0x120>)
  hdma->Instance->FCR = tmp;
 80024d2:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024d4:	3810      	subs	r0, #16
 80024d6:	fba2 5200 	umull	r5, r2, r2, r0
 80024da:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024dc:	4929      	ldr	r1, [pc, #164]	@ (8002584 <HAL_DMA_Init+0x124>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024de:	f36f 0309 	bfc	r3, #0, #10
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024e2:	5c89      	ldrb	r1, [r1, r2]
 80024e4:	65e1      	str	r1, [r4, #92]	@ 0x5c
  if (stream_number > 3U)
 80024e6:	285f      	cmp	r0, #95	@ 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024e8:	bf88      	it	hi
 80024ea:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024ec:	223f      	movs	r2, #63	@ 0x3f
 80024ee:	408a      	lsls	r2, r1
 80024f0:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024f2:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024f4:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 80024f6:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024f8:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80024fa:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
}
 80024fe:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002500:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002502:	2220      	movs	r2, #32
 8002504:	6562      	str	r2, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002506:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      return HAL_TIMEOUT;
 800250a:	4618      	mov	r0, r3
}
 800250c:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800250e:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	@ 0x2c
 8002512:	4329      	orrs	r1, r5
 8002514:	4311      	orrs	r1, r2
  hdma->Instance->CR = tmp;  
 8002516:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8002518:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 800251a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800251c:	f021 0107 	bic.w	r1, r1, #7
 8002520:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8002522:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002526:	2d00      	cmp	r5, #0
 8002528:	d0d1      	beq.n	80024ce <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800252a:	b178      	cbz	r0, 800254c <HAL_DMA_Init+0xec>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800252c:	f5b0 5f00 	cmp.w	r0, #8192	@ 0x2000
 8002530:	d016      	beq.n	8002560 <HAL_DMA_Init+0x100>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002532:	2a02      	cmp	r2, #2
 8002534:	d903      	bls.n	800253e <HAL_DMA_Init+0xde>
 8002536:	2a03      	cmp	r2, #3
 8002538:	d1c9      	bne.n	80024ce <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800253a:	01ea      	lsls	r2, r5, #7
 800253c:	d5c7      	bpl.n	80024ce <HAL_DMA_Init+0x6e>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800253e:	2240      	movs	r2, #64	@ 0x40
        hdma->State = HAL_DMA_STATE_READY;
 8002540:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002542:	6562      	str	r2, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002544:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    return HAL_ERROR;
 8002548:	2001      	movs	r0, #1
}
 800254a:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 800254c:	2a01      	cmp	r2, #1
 800254e:	d003      	beq.n	8002558 <HAL_DMA_Init+0xf8>
 8002550:	f032 0202 	bics.w	r2, r2, #2
 8002554:	d1bb      	bne.n	80024ce <HAL_DMA_Init+0x6e>
 8002556:	e7f0      	b.n	800253a <HAL_DMA_Init+0xda>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002558:	f1b5 7fc0 	cmp.w	r5, #25165824	@ 0x1800000
 800255c:	d1b7      	bne.n	80024ce <HAL_DMA_Init+0x6e>
 800255e:	e7ee      	b.n	800253e <HAL_DMA_Init+0xde>
    switch (tmp)
 8002560:	2a03      	cmp	r2, #3
 8002562:	d8b4      	bhi.n	80024ce <HAL_DMA_Init+0x6e>
 8002564:	a001      	add	r0, pc, #4	@ (adr r0, 800256c <HAL_DMA_Init+0x10c>)
 8002566:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800256a:	bf00      	nop
 800256c:	0800253f 	.word	0x0800253f
 8002570:	0800253b 	.word	0x0800253b
 8002574:	0800253f 	.word	0x0800253f
 8002578:	08002559 	.word	0x08002559
 800257c:	f010803f 	.word	0xf010803f
 8002580:	aaaaaaab 	.word	0xaaaaaaab
 8002584:	0800e7c4 	.word	0x0800e7c4

08002588 <HAL_DMA_Abort>:
{
 8002588:	b570      	push	{r4, r5, r6, lr}
 800258a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800258c:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 800258e:	f7ff feeb 	bl	8002368 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002592:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8002596:	2b02      	cmp	r3, #2
 8002598:	d006      	beq.n	80025a8 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800259a:	2380      	movs	r3, #128	@ 0x80
 800259c:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 800259e:	2300      	movs	r3, #0
 80025a0:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 80025a4:	2001      	movs	r0, #1
}
 80025a6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	f022 0216 	bic.w	r2, r2, #22
 80025b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025b2:	695a      	ldr	r2, [r3, #20]
 80025b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025b8:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025ba:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80025bc:	4605      	mov	r5, r0
 80025be:	b342      	cbz	r2, 8002612 <HAL_DMA_Abort+0x8a>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	f022 0208 	bic.w	r2, r2, #8
 80025c6:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	f022 0201 	bic.w	r2, r2, #1
 80025ce:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d0:	e005      	b.n	80025de <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025d2:	f7ff fec9 	bl	8002368 <HAL_GetTick>
 80025d6:	1b43      	subs	r3, r0, r5
 80025d8:	2b05      	cmp	r3, #5
 80025da:	d810      	bhi.n	80025fe <HAL_DMA_Abort+0x76>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025dc:	6823      	ldr	r3, [r4, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f013 0301 	ands.w	r3, r3, #1
 80025e4:	d1f5      	bne.n	80025d2 <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e6:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 80025e8:	223f      	movs	r2, #63	@ 0x3f
 80025ea:	408a      	lsls	r2, r1
  return HAL_OK;
 80025ec:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 80025ee:	2101      	movs	r1, #1
    __HAL_UNLOCK(hdma);
 80025f0:	2300      	movs	r3, #0
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025f2:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80025f4:	f884 1035 	strb.w	r1, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80025f8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 80025fc:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002600:	2220      	movs	r2, #32
 8002602:	6562      	str	r2, [r4, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002604:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002606:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 800260a:	2300      	movs	r3, #0
 800260c:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
}
 8002610:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002612:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002614:	2a00      	cmp	r2, #0
 8002616:	d1d3      	bne.n	80025c0 <HAL_DMA_Abort+0x38>
 8002618:	e7d6      	b.n	80025c8 <HAL_DMA_Abort+0x40>
 800261a:	bf00      	nop

0800261c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800261c:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8002620:	2b02      	cmp	r3, #2
 8002622:	d003      	beq.n	800262c <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002624:	2380      	movs	r3, #128	@ 0x80
 8002626:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8002628:	2001      	movs	r0, #1
 800262a:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800262c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800262e:	2305      	movs	r3, #5
 8002630:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8002634:	6813      	ldr	r3, [r2, #0]
 8002636:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 800263a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800263c:	6013      	str	r3, [r2, #0]
}
 800263e:	4770      	bx	lr

08002640 <HAL_DMA_IRQHandler>:
{
 8002640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002642:	b083      	sub	sp, #12
  uint32_t timeout = SystemCoreClock / 9600U;
 8002644:	4a67      	ldr	r2, [pc, #412]	@ (80027e4 <HAL_DMA_IRQHandler+0x1a4>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002646:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8002648:	6816      	ldr	r6, [r2, #0]
  __IO uint32_t count = 0U;
 800264a:	2300      	movs	r3, #0
 800264c:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800264e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
  tmpisr = regs->ISR;
 8002650:	683d      	ldr	r5, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002652:	2208      	movs	r2, #8
 8002654:	409a      	lsls	r2, r3
 8002656:	422a      	tst	r2, r5
{
 8002658:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800265a:	d003      	beq.n	8002664 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800265c:	6801      	ldr	r1, [r0, #0]
 800265e:	6808      	ldr	r0, [r1, #0]
 8002660:	0740      	lsls	r0, r0, #29
 8002662:	d478      	bmi.n	8002756 <HAL_DMA_IRQHandler+0x116>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002664:	2201      	movs	r2, #1
 8002666:	409a      	lsls	r2, r3
 8002668:	422a      	tst	r2, r5
 800266a:	d003      	beq.n	8002674 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800266c:	6821      	ldr	r1, [r4, #0]
 800266e:	6949      	ldr	r1, [r1, #20]
 8002670:	0608      	lsls	r0, r1, #24
 8002672:	d46a      	bmi.n	800274a <HAL_DMA_IRQHandler+0x10a>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002674:	2204      	movs	r2, #4
 8002676:	409a      	lsls	r2, r3
 8002678:	422a      	tst	r2, r5
 800267a:	d003      	beq.n	8002684 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800267c:	6821      	ldr	r1, [r4, #0]
 800267e:	6809      	ldr	r1, [r1, #0]
 8002680:	0789      	lsls	r1, r1, #30
 8002682:	d45c      	bmi.n	800273e <HAL_DMA_IRQHandler+0xfe>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002684:	2210      	movs	r2, #16
 8002686:	409a      	lsls	r2, r3
 8002688:	422a      	tst	r2, r5
 800268a:	d003      	beq.n	8002694 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800268c:	6821      	ldr	r1, [r4, #0]
 800268e:	6808      	ldr	r0, [r1, #0]
 8002690:	0700      	lsls	r0, r0, #28
 8002692:	d441      	bmi.n	8002718 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002694:	2220      	movs	r2, #32
 8002696:	409a      	lsls	r2, r3
 8002698:	422a      	tst	r2, r5
 800269a:	d014      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800269c:	6821      	ldr	r1, [r4, #0]
 800269e:	6808      	ldr	r0, [r1, #0]
 80026a0:	06c0      	lsls	r0, r0, #27
 80026a2:	d510      	bpl.n	80026c6 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026a4:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026a6:	f894 2035 	ldrb.w	r2, [r4, #53]	@ 0x35
 80026aa:	2a05      	cmp	r2, #5
 80026ac:	d063      	beq.n	8002776 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026ae:	680b      	ldr	r3, [r1, #0]
 80026b0:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026b4:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026b6:	d07e      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026b8:	0319      	lsls	r1, r3, #12
 80026ba:	f140 8089 	bpl.w	80027d0 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 80026be:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80026c0:	b10b      	cbz	r3, 80026c6 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 80026c2:	4620      	mov	r0, r4
 80026c4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026c6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80026c8:	b323      	cbz	r3, 8002714 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026ca:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80026cc:	07da      	lsls	r2, r3, #31
 80026ce:	d51a      	bpl.n	8002706 <HAL_DMA_IRQHandler+0xc6>
      __HAL_DMA_DISABLE(hdma);
 80026d0:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026d2:	4945      	ldr	r1, [pc, #276]	@ (80027e8 <HAL_DMA_IRQHandler+0x1a8>)
      hdma->State = HAL_DMA_STATE_ABORT;
 80026d4:	2305      	movs	r3, #5
 80026d6:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80026da:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026dc:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 80026e0:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80026e4:	0ab6      	lsrs	r6, r6, #10
      __HAL_DMA_DISABLE(hdma);
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	e002      	b.n	80026f0 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80026ea:	6813      	ldr	r3, [r2, #0]
 80026ec:	07db      	lsls	r3, r3, #31
 80026ee:	d504      	bpl.n	80026fa <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 80026f0:	9b01      	ldr	r3, [sp, #4]
 80026f2:	3301      	adds	r3, #1
 80026f4:	42b3      	cmp	r3, r6
 80026f6:	9301      	str	r3, [sp, #4]
 80026f8:	d9f7      	bls.n	80026ea <HAL_DMA_IRQHandler+0xaa>
      hdma->State = HAL_DMA_STATE_READY;
 80026fa:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 80026fc:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 80026fe:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8002702:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 8002706:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8002708:	b123      	cbz	r3, 8002714 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 800270a:	4620      	mov	r0, r4
}
 800270c:	b003      	add	sp, #12
 800270e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8002712:	4718      	bx	r3
}
 8002714:	b003      	add	sp, #12
 8002716:	bdf0      	pop	{r4, r5, r6, r7, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002718:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800271a:	680a      	ldr	r2, [r1, #0]
 800271c:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002720:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002722:	d122      	bne.n	800276a <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002724:	05d2      	lsls	r2, r2, #23
 8002726:	d403      	bmi.n	8002730 <HAL_DMA_IRQHandler+0xf0>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002728:	680a      	ldr	r2, [r1, #0]
 800272a:	f022 0208 	bic.w	r2, r2, #8
 800272e:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8002730:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002732:	2a00      	cmp	r2, #0
 8002734:	d0ae      	beq.n	8002694 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8002736:	4620      	mov	r0, r4
 8002738:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800273a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800273c:	e7aa      	b.n	8002694 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800273e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002740:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002742:	f042 0204 	orr.w	r2, r2, #4
 8002746:	6562      	str	r2, [r4, #84]	@ 0x54
 8002748:	e79c      	b.n	8002684 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800274a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800274c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800274e:	f042 0202 	orr.w	r2, r2, #2
 8002752:	6562      	str	r2, [r4, #84]	@ 0x54
 8002754:	e78e      	b.n	8002674 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002756:	6808      	ldr	r0, [r1, #0]
 8002758:	f020 0004 	bic.w	r0, r0, #4
 800275c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800275e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002760:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002762:	f042 0201 	orr.w	r2, r2, #1
 8002766:	6562      	str	r2, [r4, #84]	@ 0x54
 8002768:	e77c      	b.n	8002664 <HAL_DMA_IRQHandler+0x24>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800276a:	0311      	lsls	r1, r2, #12
 800276c:	d5e0      	bpl.n	8002730 <HAL_DMA_IRQHandler+0xf0>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800276e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8002770:	2a00      	cmp	r2, #0
 8002772:	d1e0      	bne.n	8002736 <HAL_DMA_IRQHandler+0xf6>
 8002774:	e78e      	b.n	8002694 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002776:	680a      	ldr	r2, [r1, #0]
 8002778:	f022 0216 	bic.w	r2, r2, #22
 800277c:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800277e:	694a      	ldr	r2, [r1, #20]
 8002780:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002784:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002786:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002788:	b33a      	cbz	r2, 80027da <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800278a:	680a      	ldr	r2, [r1, #0]
 800278c:	f022 0208 	bic.w	r2, r2, #8
 8002790:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002792:	223f      	movs	r2, #63	@ 0x3f
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8002798:	6d21      	ldr	r1, [r4, #80]	@ 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800279a:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800279c:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 800279e:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 80027a0:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80027a4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 80027a8:	2900      	cmp	r1, #0
 80027aa:	d0b3      	beq.n	8002714 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 80027ac:	4620      	mov	r0, r4
}
 80027ae:	b003      	add	sp, #12
 80027b0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 80027b4:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027b6:	f413 7380 	ands.w	r3, r3, #256	@ 0x100
 80027ba:	d180      	bne.n	80026be <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027bc:	680a      	ldr	r2, [r1, #0]
 80027be:	f022 0210 	bic.w	r2, r2, #16
 80027c2:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80027c4:	2201      	movs	r2, #1
 80027c6:	f884 2035 	strb.w	r2, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80027ca:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 80027ce:	e776      	b.n	80026be <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 80027d0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f47f af75 	bne.w	80026c2 <HAL_DMA_IRQHandler+0x82>
 80027d8:	e775      	b.n	80026c6 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027da:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80027dc:	2a00      	cmp	r2, #0
 80027de:	d1d4      	bne.n	800278a <HAL_DMA_IRQHandler+0x14a>
 80027e0:	e7d7      	b.n	8002792 <HAL_DMA_IRQHandler+0x152>
 80027e2:	bf00      	nop
 80027e4:	20000000 	.word	0x20000000
 80027e8:	1b4e81b5 	.word	0x1b4e81b5

080027ec <HAL_DMA_GetState>:
  return hdma->State;
 80027ec:	f890 0035 	ldrb.w	r0, [r0, #53]	@ 0x35
}
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop

080027f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027f8:	4bc0      	ldr	r3, [pc, #768]	@ (8002afc <HAL_GPIO_Init+0x308>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027fa:	680a      	ldr	r2, [r1, #0]
 80027fc:	4298      	cmp	r0, r3
{
 80027fe:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002800:	f04f 0300 	mov.w	r3, #0
    ioposition = 0x01U << position;
 8002804:	f04f 0b01 	mov.w	fp, #1
 8002808:	f000 80c4 	beq.w	8002994 <HAL_GPIO_Init+0x1a0>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800280c:	f8df a2fc 	ldr.w	sl, [pc, #764]	@ 8002b0c <HAL_GPIO_Init+0x318>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002810:	4689      	mov	r9, r1
 8002812:	e002      	b.n	800281a <HAL_GPIO_Init+0x26>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002814:	3301      	adds	r3, #1
 8002816:	2b10      	cmp	r3, #16
 8002818:	d07b      	beq.n	8002912 <HAL_GPIO_Init+0x11e>
    ioposition = 0x01U << position;
 800281a:	fa0b f103 	lsl.w	r1, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800281e:	ea01 0802 	and.w	r8, r1, r2
    if(iocurrent == ioposition)
 8002822:	4391      	bics	r1, r2
 8002824:	d1f6      	bne.n	8002814 <HAL_GPIO_Init+0x20>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002826:	f8d9 4004 	ldr.w	r4, [r9, #4]
 800282a:	f004 0c03 	and.w	ip, r4, #3
 800282e:	0059      	lsls	r1, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002830:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002832:	f10c 36ff 	add.w	r6, ip, #4294967295
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002836:	408d      	lsls	r5, r1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002838:	2e01      	cmp	r6, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800283a:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800283e:	d96b      	bls.n	8002918 <HAL_GPIO_Init+0x124>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002840:	f1bc 0f03 	cmp.w	ip, #3
 8002844:	f040 8174 	bne.w	8002b30 <HAL_GPIO_Init+0x33c>
      temp = GPIOx->MODER;
 8002848:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800284a:	fa0c f101 	lsl.w	r1, ip, r1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800284e:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002850:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002852:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8002856:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002858:	d0dc      	beq.n	8002814 <HAL_GPIO_Init+0x20>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800285a:	2100      	movs	r1, #0
 800285c:	9103      	str	r1, [sp, #12]
 800285e:	f8da 1044 	ldr.w	r1, [sl, #68]	@ 0x44
 8002862:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8002866:	f8ca 1044 	str.w	r1, [sl, #68]	@ 0x44
 800286a:	f8da 1044 	ldr.w	r1, [sl, #68]	@ 0x44
 800286e:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8002872:	9103      	str	r1, [sp, #12]
 8002874:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002876:	f023 0103 	bic.w	r1, r3, #3
 800287a:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800287e:	f003 0603 	and.w	r6, r3, #3
 8002882:	270f      	movs	r7, #15
 8002884:	f501 319c 	add.w	r1, r1, #79872	@ 0x13800
 8002888:	00b6      	lsls	r6, r6, #2
 800288a:	fa07 fc06 	lsl.w	ip, r7, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800288e:	4f9c      	ldr	r7, [pc, #624]	@ (8002b00 <HAL_GPIO_Init+0x30c>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8002890:	688d      	ldr	r5, [r1, #8]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002892:	42b8      	cmp	r0, r7
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002894:	ea25 050c 	bic.w	r5, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002898:	d076      	beq.n	8002988 <HAL_GPIO_Init+0x194>
 800289a:	4f9a      	ldr	r7, [pc, #616]	@ (8002b04 <HAL_GPIO_Init+0x310>)
 800289c:	42b8      	cmp	r0, r7
 800289e:	f000 813b 	beq.w	8002b18 <HAL_GPIO_Init+0x324>
 80028a2:	f8df c26c 	ldr.w	ip, [pc, #620]	@ 8002b10 <HAL_GPIO_Init+0x31c>
 80028a6:	4560      	cmp	r0, ip
 80028a8:	f000 813c 	beq.w	8002b24 <HAL_GPIO_Init+0x330>
 80028ac:	f8df c264 	ldr.w	ip, [pc, #612]	@ 8002b14 <HAL_GPIO_Init+0x320>
 80028b0:	4560      	cmp	r0, ip
 80028b2:	bf0c      	ite	eq
 80028b4:	f04f 0c04 	moveq.w	ip, #4
 80028b8:	f04f 0c07 	movne.w	ip, #7
 80028bc:	fa0c f606 	lsl.w	r6, ip, r6
 80028c0:	4335      	orrs	r5, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c2:	608d      	str	r5, [r1, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028c4:	4990      	ldr	r1, [pc, #576]	@ (8002b08 <HAL_GPIO_Init+0x314>)
 80028c6:	6889      	ldr	r1, [r1, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028c8:	02e6      	lsls	r6, r4, #11
        temp &= ~((uint32_t)iocurrent);
 80028ca:	ea6f 0508 	mvn.w	r5, r8
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 80028ce:	4e8e      	ldr	r6, [pc, #568]	@ (8002b08 <HAL_GPIO_Init+0x314>)
        temp &= ~((uint32_t)iocurrent);
 80028d0:	bf54      	ite	pl
 80028d2:	4029      	andpl	r1, r5
          temp |= iocurrent;
 80028d4:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->RTSR = temp;
 80028d8:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 80028da:	68f1      	ldr	r1, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 80028dc:	4e8a      	ldr	r6, [pc, #552]	@ (8002b08 <HAL_GPIO_Init+0x314>)
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028de:	02a7      	lsls	r7, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80028e0:	bf54      	ite	pl
 80028e2:	4029      	andpl	r1, r5
          temp |= iocurrent;
 80028e4:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->FTSR = temp;
 80028e8:	60f1      	str	r1, [r6, #12]

        temp = EXTI->EMR;
 80028ea:	6871      	ldr	r1, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028ec:	03a6      	lsls	r6, r4, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 80028ee:	4e86      	ldr	r6, [pc, #536]	@ (8002b08 <HAL_GPIO_Init+0x314>)
        temp &= ~((uint32_t)iocurrent);
 80028f0:	bf54      	ite	pl
 80028f2:	4029      	andpl	r1, r5
          temp |= iocurrent;
 80028f4:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->EMR = temp;
 80028f8:	6071      	str	r1, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028fa:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028fc:	03e4      	lsls	r4, r4, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028fe:	f103 0301 	add.w	r3, r3, #1
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8002902:	4c81      	ldr	r4, [pc, #516]	@ (8002b08 <HAL_GPIO_Init+0x314>)
        temp &= ~((uint32_t)iocurrent);
 8002904:	bf54      	ite	pl
 8002906:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8002908:	ea48 0101 	orrmi.w	r1, r8, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290c:	2b10      	cmp	r3, #16
        EXTI->IMR = temp;
 800290e:	6021      	str	r1, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002910:	d183      	bne.n	800281a <HAL_GPIO_Init+0x26>
      }
    }
  }
}
 8002912:	b005      	add	sp, #20
 8002914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8002918:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800291a:	ea06 0e05 	and.w	lr, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800291e:	f8d9 600c 	ldr.w	r6, [r9, #12]
 8002922:	408e      	lsls	r6, r1
 8002924:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OSPEEDR = temp;
 8002928:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800292a:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800292c:	ea26 0e08 	bic.w	lr, r6, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002930:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8002934:	409e      	lsls	r6, r3
 8002936:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->OTYPER = temp;
 800293a:	6046      	str	r6, [r0, #4]
        temp = GPIOx->PUPDR;
 800293c:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800293e:	ea06 0e05 	and.w	lr, r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002942:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8002946:	408e      	lsls	r6, r1
 8002948:	ea46 060e 	orr.w	r6, r6, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800294c:	f1bc 0f02 	cmp.w	ip, #2
        GPIOx->PUPDR = temp;
 8002950:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002952:	f47f af79 	bne.w	8002848 <HAL_GPIO_Init+0x54>
        temp = GPIOx->AFR[position >> 3U];
 8002956:	08de      	lsrs	r6, r3, #3
 8002958:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800295c:	9601      	str	r6, [sp, #4]
 800295e:	6a37      	ldr	r7, [r6, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002960:	f8d9 6010 	ldr.w	r6, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 8002964:	9700      	str	r7, [sp, #0]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002966:	f003 0e07 	and.w	lr, r3, #7
 800296a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800296e:	270f      	movs	r7, #15
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002970:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002974:	fa07 fe0e 	lsl.w	lr, r7, lr
 8002978:	9f00      	ldr	r7, [sp, #0]
 800297a:	ea27 0e0e 	bic.w	lr, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800297e:	9f01      	ldr	r7, [sp, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002980:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002984:	623e      	str	r6, [r7, #32]
 8002986:	e75f      	b.n	8002848 <HAL_GPIO_Init+0x54>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002988:	f04f 0c01 	mov.w	ip, #1
 800298c:	fa0c f606 	lsl.w	r6, ip, r6
 8002990:	4335      	orrs	r5, r6
 8002992:	e796      	b.n	80028c2 <HAL_GPIO_Init+0xce>
        temp = EXTI->RTSR;
 8002994:	f8df 8170 	ldr.w	r8, [pc, #368]	@ 8002b08 <HAL_GPIO_Init+0x314>
 8002998:	e002      	b.n	80029a0 <HAL_GPIO_Init+0x1ac>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800299a:	3301      	adds	r3, #1
 800299c:	2b10      	cmp	r3, #16
 800299e:	d0b8      	beq.n	8002912 <HAL_GPIO_Init+0x11e>
    ioposition = 0x01U << position;
 80029a0:	fa0b f403 	lsl.w	r4, fp, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029a4:	ea02 0604 	and.w	r6, r2, r4
    if(iocurrent == ioposition)
 80029a8:	4394      	bics	r4, r2
 80029aa:	d1f6      	bne.n	800299a <HAL_GPIO_Init+0x1a6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ac:	684d      	ldr	r5, [r1, #4]
 80029ae:	f005 0403 	and.w	r4, r5, #3
 80029b2:	9400      	str	r4, [sp, #0]
 80029b4:	005f      	lsls	r7, r3, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029b6:	2403      	movs	r4, #3
 80029b8:	fa04 fc07 	lsl.w	ip, r4, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029bc:	9c00      	ldr	r4, [sp, #0]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029be:	ea6f 0a0c 	mvn.w	sl, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029c2:	f104 3cff 	add.w	ip, r4, #4294967295
 80029c6:	f1bc 0f01 	cmp.w	ip, #1
 80029ca:	d94c      	bls.n	8002a66 <HAL_GPIO_Init+0x272>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029cc:	2c03      	cmp	r4, #3
 80029ce:	f040 80b9 	bne.w	8002b44 <HAL_GPIO_Init+0x350>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029d2:	9c00      	ldr	r4, [sp, #0]
 80029d4:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 80029d6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029d8:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029dc:	433c      	orrs	r4, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029de:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80029e2:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029e4:	d0d9      	beq.n	800299a <HAL_GPIO_Init+0x1a6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e6:	4f49      	ldr	r7, [pc, #292]	@ (8002b0c <HAL_GPIO_Init+0x318>)
 80029e8:	2400      	movs	r4, #0
 80029ea:	9403      	str	r4, [sp, #12]
 80029ec:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80029ee:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 80029f2:	647c      	str	r4, [r7, #68]	@ 0x44
 80029f4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80029f6:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 80029fa:	9403      	str	r4, [sp, #12]
 80029fc:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80029fe:	f023 0403 	bic.w	r4, r3, #3
 8002a02:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8002a06:	f504 349c 	add.w	r4, r4, #79872	@ 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a0a:	f003 0703 	and.w	r7, r3, #3
 8002a0e:	f04f 0c0f 	mov.w	ip, #15
 8002a12:	00bf      	lsls	r7, r7, #2
 8002a14:	fa0c f707 	lsl.w	r7, ip, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8002a18:	f8d4 c008 	ldr.w	ip, [r4, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a1c:	ea2c 0707 	bic.w	r7, ip, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a20:	60a7      	str	r7, [r4, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a22:	f415 1f80 	tst.w	r5, #1048576	@ 0x100000
        temp = EXTI->RTSR;
 8002a26:	f8d8 4008 	ldr.w	r4, [r8, #8]
        temp &= ~((uint32_t)iocurrent);
 8002a2a:	ea6f 0706 	mvn.w	r7, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a2e:	d162      	bne.n	8002af6 <HAL_GPIO_Init+0x302>
        temp &= ~((uint32_t)iocurrent);
 8002a30:	403c      	ands	r4, r7
        EXTI->RTSR = temp;
 8002a32:	f8c8 4008 	str.w	r4, [r8, #8]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a36:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
        temp = EXTI->FTSR;
 8002a3a:	f8d8 400c 	ldr.w	r4, [r8, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a3e:	d158      	bne.n	8002af2 <HAL_GPIO_Init+0x2fe>
        temp &= ~((uint32_t)iocurrent);
 8002a40:	403c      	ands	r4, r7
        EXTI->FTSR = temp;
 8002a42:	f8c8 400c 	str.w	r4, [r8, #12]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a46:	f415 3f00 	tst.w	r5, #131072	@ 0x20000
        temp = EXTI->EMR;
 8002a4a:	f8d8 4004 	ldr.w	r4, [r8, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a4e:	d14e      	bne.n	8002aee <HAL_GPIO_Init+0x2fa>
        temp &= ~((uint32_t)iocurrent);
 8002a50:	403c      	ands	r4, r7
        EXTI->EMR = temp;
 8002a52:	f8c8 4004 	str.w	r4, [r8, #4]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a56:	03ed      	lsls	r5, r5, #15
        temp = EXTI->IMR;
 8002a58:	f8d8 4000 	ldr.w	r4, [r8]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a5c:	d445      	bmi.n	8002aea <HAL_GPIO_Init+0x2f6>
        temp &= ~((uint32_t)iocurrent);
 8002a5e:	403c      	ands	r4, r7
        EXTI->IMR = temp;
 8002a60:	f8c8 4000 	str.w	r4, [r8]
 8002a64:	e799      	b.n	800299a <HAL_GPIO_Init+0x1a6>
        temp = GPIOx->OSPEEDR; 
 8002a66:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a6a:	68cc      	ldr	r4, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a6c:	ea0a 0e0e 	and.w	lr, sl, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a70:	fa04 fc07 	lsl.w	ip, r4, r7
 8002a74:	ea4c 0c0e 	orr.w	ip, ip, lr
        GPIOx->OSPEEDR = temp;
 8002a78:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 8002a7c:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a80:	f3c5 1c00 	ubfx	ip, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a84:	ea2e 0e06 	bic.w	lr, lr, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a88:	fa0c fc03 	lsl.w	ip, ip, r3
 8002a8c:	ea4c 0c0e 	orr.w	ip, ip, lr
        GPIOx->OTYPER = temp;
 8002a90:	f8c0 c004 	str.w	ip, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a94:	688c      	ldr	r4, [r1, #8]
        temp = GPIOx->PUPDR;
 8002a96:	f8d0 e00c 	ldr.w	lr, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a9a:	fa04 fc07 	lsl.w	ip, r4, r7
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a9e:	9c00      	ldr	r4, [sp, #0]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aa0:	ea0a 0e0e 	and.w	lr, sl, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002aa4:	ea4c 0c0e 	orr.w	ip, ip, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa8:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8002aaa:	f8c0 c00c 	str.w	ip, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aae:	d190      	bne.n	80029d2 <HAL_GPIO_Init+0x1de>
        temp = GPIOx->AFR[position >> 3U];
 8002ab0:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8002ab4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ab8:	690c      	ldr	r4, [r1, #16]
 8002aba:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002abe:	f003 0e07 	and.w	lr, r3, #7
 8002ac2:	f50c 3c00 	add.w	ip, ip, #131072	@ 0x20000
 8002ac6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002aca:	fa04 f40e 	lsl.w	r4, r4, lr
        temp = GPIOx->AFR[position >> 3U];
 8002ace:	f8dc 9020 	ldr.w	r9, [ip, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad2:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ad4:	240f      	movs	r4, #15
 8002ad6:	fa04 fe0e 	lsl.w	lr, r4, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ada:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002adc:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ae0:	ea44 0e09 	orr.w	lr, r4, r9
        GPIOx->AFR[position >> 3U] = temp;
 8002ae4:	f8cc e020 	str.w	lr, [ip, #32]
 8002ae8:	e773      	b.n	80029d2 <HAL_GPIO_Init+0x1de>
          temp |= iocurrent;
 8002aea:	4334      	orrs	r4, r6
 8002aec:	e7b8      	b.n	8002a60 <HAL_GPIO_Init+0x26c>
          temp |= iocurrent;
 8002aee:	4334      	orrs	r4, r6
 8002af0:	e7af      	b.n	8002a52 <HAL_GPIO_Init+0x25e>
          temp |= iocurrent;
 8002af2:	4334      	orrs	r4, r6
 8002af4:	e7a5      	b.n	8002a42 <HAL_GPIO_Init+0x24e>
          temp |= iocurrent;
 8002af6:	4334      	orrs	r4, r6
 8002af8:	e79b      	b.n	8002a32 <HAL_GPIO_Init+0x23e>
 8002afa:	bf00      	nop
 8002afc:	40020000 	.word	0x40020000
 8002b00:	40020400 	.word	0x40020400
 8002b04:	40020800 	.word	0x40020800
 8002b08:	40013c00 	.word	0x40013c00
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	40020c00 	.word	0x40020c00
 8002b14:	40021000 	.word	0x40021000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b18:	f04f 0c02 	mov.w	ip, #2
 8002b1c:	fa0c f606 	lsl.w	r6, ip, r6
 8002b20:	4335      	orrs	r5, r6
 8002b22:	e6ce      	b.n	80028c2 <HAL_GPIO_Init+0xce>
 8002b24:	f04f 0c03 	mov.w	ip, #3
 8002b28:	fa0c f606 	lsl.w	r6, ip, r6
 8002b2c:	4335      	orrs	r5, r6
 8002b2e:	e6c8      	b.n	80028c2 <HAL_GPIO_Init+0xce>
        temp = GPIOx->PUPDR;
 8002b30:	68c6      	ldr	r6, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b32:	ea06 0e05 	and.w	lr, r6, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b36:	f8d9 6008 	ldr.w	r6, [r9, #8]
 8002b3a:	408e      	lsls	r6, r1
 8002b3c:	ea46 060e 	orr.w	r6, r6, lr
        GPIOx->PUPDR = temp;
 8002b40:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b42:	e681      	b.n	8002848 <HAL_GPIO_Init+0x54>
        temp = GPIOx->PUPDR;
 8002b44:	f8df e018 	ldr.w	lr, [pc, #24]	@ 8002b60 <HAL_GPIO_Init+0x36c>
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b48:	688c      	ldr	r4, [r1, #8]
        temp = GPIOx->PUPDR;
 8002b4a:	f8de 900c 	ldr.w	r9, [lr, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b4e:	fa04 fc07 	lsl.w	ip, r4, r7
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b52:	ea0a 0909 	and.w	r9, sl, r9
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b56:	ea4c 0c09 	orr.w	ip, ip, r9
        GPIOx->PUPDR = temp;
 8002b5a:	f8ce c00c 	str.w	ip, [lr, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b5e:	e738      	b.n	80029d2 <HAL_GPIO_Init+0x1de>
 8002b60:	40020000 	.word	0x40020000

08002b64 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b64:	b902      	cbnz	r2, 8002b68 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b66:	0409      	lsls	r1, r1, #16
 8002b68:	6181      	str	r1, [r0, #24]
  }
}
 8002b6a:	4770      	bx	lr

08002b6c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002b6c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002b6e:	ea01 0203 	and.w	r2, r1, r3
 8002b72:	ea21 0103 	bic.w	r1, r1, r3
 8002b76:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002b7a:	6181      	str	r1, [r0, #24]
}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop

08002b80 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b80:	2800      	cmp	r0, #0
 8002b82:	f000 80b8 	beq.w	8002cf6 <HAL_I2C_Init+0x176>
{
 8002b86:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b88:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002b8c:	4604      	mov	r4, r0
 8002b8e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 8098 	beq.w	8002cc8 <HAL_I2C_Init+0x148>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b98:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b9a:	2224      	movs	r2, #36	@ 0x24
 8002b9c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	f022 0201 	bic.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002bae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bb8:	f001 fab4 	bl	8004124 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bbc:	4b4f      	ldr	r3, [pc, #316]	@ (8002cfc <HAL_I2C_Init+0x17c>)
 8002bbe:	6865      	ldr	r5, [r4, #4]
 8002bc0:	429d      	cmp	r5, r3
 8002bc2:	d84f      	bhi.n	8002c64 <HAL_I2C_Init+0xe4>
 8002bc4:	4b4e      	ldr	r3, [pc, #312]	@ (8002d00 <HAL_I2C_Init+0x180>)
 8002bc6:	4298      	cmp	r0, r3
 8002bc8:	d97c      	bls.n	8002cc4 <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002bca:	4b4e      	ldr	r3, [pc, #312]	@ (8002d04 <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bcc:	006a      	lsls	r2, r5, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8002bce:	fba3 3500 	umull	r3, r5, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bd2:	1e43      	subs	r3, r0, #1
 8002bd4:	fbb3 f3f2 	udiv	r3, r3, r2
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bd8:	6822      	ldr	r2, [r4, #0]
 8002bda:	6851      	ldr	r1, [r2, #4]
 8002bdc:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8002be0:	ea41 4195 	orr.w	r1, r1, r5, lsr #18
 8002be4:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002be6:	6a11      	ldr	r1, [r2, #32]
  freqrange = I2C_FREQRANGE(pclk1);
 8002be8:	ea4f 4c95 	mov.w	ip, r5, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bec:	f10c 0c01 	add.w	ip, ip, #1
 8002bf0:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8002bf4:	ea41 010c 	orr.w	r1, r1, ip
 8002bf8:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bfa:	69d1      	ldr	r1, [r2, #28]
 8002bfc:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8002c00:	3301      	adds	r3, #1
 8002c02:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8002c06:	4203      	tst	r3, r0
 8002c08:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002c0c:	d161      	bne.n	8002cd2 <HAL_I2C_Init+0x152>
 8002c0e:	2304      	movs	r3, #4
 8002c10:	430b      	orrs	r3, r1
 8002c12:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c14:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002c18:	6811      	ldr	r1, [r2, #0]
 8002c1a:	4303      	orrs	r3, r0
 8002c1c:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8002c20:	430b      	orrs	r3, r1
 8002c22:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002c24:	6891      	ldr	r1, [r2, #8]
 8002c26:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002c2a:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8002c2e:	4303      	orrs	r3, r0
 8002c30:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002c34:	430b      	orrs	r3, r1
 8002c36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c38:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002c3c:	68d1      	ldr	r1, [r2, #12]
 8002c3e:	4303      	orrs	r3, r0
 8002c40:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002c44:	430b      	orrs	r3, r1
 8002c46:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c48:	6811      	ldr	r1, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c4a:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8002c4c:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8002c50:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 8002c52:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c54:	6423      	str	r3, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c56:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c5a:	6323      	str	r3, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e

  return HAL_OK;
 8002c60:	4618      	mov	r0, r3
}
 8002c62:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c64:	4b28      	ldr	r3, [pc, #160]	@ (8002d08 <HAL_I2C_Init+0x188>)
 8002c66:	4298      	cmp	r0, r3
 8002c68:	d92c      	bls.n	8002cc4 <HAL_I2C_Init+0x144>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c6a:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002c6c:	4b25      	ldr	r3, [pc, #148]	@ (8002d04 <HAL_I2C_Init+0x184>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c6e:	4e27      	ldr	r6, [pc, #156]	@ (8002d0c <HAL_I2C_Init+0x18c>)
  freqrange = I2C_FREQRANGE(pclk1);
 8002c70:	fba3 3c00 	umull	r3, ip, r3, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c74:	1e43      	subs	r3, r0, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c76:	6850      	ldr	r0, [r2, #4]
 8002c78:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 8002c7c:	ea40 409c 	orr.w	r0, r0, ip, lsr #18
 8002c80:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8002c82:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c86:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002c8a:	fb00 f101 	mul.w	r1, r0, r1
 8002c8e:	fba6 6101 	umull	r6, r1, r6, r1
 8002c92:	6a10      	ldr	r0, [r2, #32]
 8002c94:	0989      	lsrs	r1, r1, #6
 8002c96:	f020 003f 	bic.w	r0, r0, #63	@ 0x3f
 8002c9a:	3101      	adds	r1, #1
 8002c9c:	4301      	orrs	r1, r0
 8002c9e:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ca0:	69d1      	ldr	r1, [r2, #28]
 8002ca2:	68a0      	ldr	r0, [r4, #8]
 8002ca4:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8002ca8:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8002cac:	b9a0      	cbnz	r0, 8002cd8 <HAL_I2C_Init+0x158>
 8002cae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002cb2:	fbb3 f3f5 	udiv	r3, r3, r5
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbc:	b1cb      	cbz	r3, 8002cf2 <HAL_I2C_Init+0x172>
 8002cbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cc2:	e7a5      	b.n	8002c10 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002cc4:	2001      	movs	r0, #1
}
 8002cc6:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002cc8:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8002ccc:	f7fe fe3a 	bl	8001944 <HAL_I2C_MspInit>
 8002cd0:	e762      	b.n	8002b98 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002cd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cd6:	e79b      	b.n	8002c10 <HAL_I2C_Init+0x90>
 8002cd8:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002cdc:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002ce0:	fbb3 f3f5 	udiv	r3, r3, r5
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cea:	b113      	cbz	r3, 8002cf2 <HAL_I2C_Init+0x172>
 8002cec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002cf0:	e78e      	b.n	8002c10 <HAL_I2C_Init+0x90>
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e78c      	b.n	8002c10 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002cf6:	2001      	movs	r0, #1
}
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	000186a0 	.word	0x000186a0
 8002d00:	001e847f 	.word	0x001e847f
 8002d04:	431bde83 	.word	0x431bde83
 8002d08:	003d08ff 	.word	0x003d08ff
 8002d0c:	10624dd3 	.word	0x10624dd3

08002d10 <HAL_I2C_MasterTxCpltCallback>:
  * @brief  Master Tx Transfer completed callback.
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop

08002d14 <HAL_I2C_MasterRxCpltCallback>:
  * @brief  Master Rx Transfer completed callback.
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop

08002d18 <HAL_I2C_SlaveTxCpltCallback>:
/** @brief  Slave Tx Transfer completed callback.
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop

08002d1c <HAL_I2C_SlaveRxCpltCallback>:
  * @brief  Slave Rx Transfer completed callback.
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop

08002d20 <HAL_I2C_AddrCallback>:
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop

08002d24 <HAL_I2C_ListenCpltCallback>:
  * @brief  Listen Complete callback.
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop

08002d28 <HAL_I2C_MemTxCpltCallback>:
  * @brief  Memory Tx Transfer completed callback.
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002d28:	4770      	bx	lr
 8002d2a:	bf00      	nop

08002d2c <I2C_MemoryTransmit_TXE_BTF>:
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d2c:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d

  if (hi2c->EventCount == 0U)
 8002d30:	6d01      	ldr	r1, [r0, #80]	@ 0x50
{
 8002d32:	4603      	mov	r3, r0
  if (hi2c->EventCount == 0U)
 8002d34:	b959      	cbnz	r1, 8002d4e <I2C_MemoryTransmit_TXE_BTF+0x22>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002d36:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002d38:	6801      	ldr	r1, [r0, #0]
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002d3a:	2a01      	cmp	r2, #1
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002d3c:	6c82      	ldr	r2, [r0, #72]	@ 0x48
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002d3e:	d01c      	beq.n	8002d7a <I2C_MemoryTransmit_TXE_BTF+0x4e>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Send MSB of Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002d40:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d44:	610a      	str	r2, [r1, #16]

      hi2c->EventCount++;
 8002d46:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8002d48:	3201      	adds	r2, #1
 8002d4a:	6502      	str	r2, [r0, #80]	@ 0x50
 8002d4c:	4770      	bx	lr
    }
  }
  else if (hi2c->EventCount == 1U)
 8002d4e:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8002d50:	2901      	cmp	r1, #1
 8002d52:	d00a      	beq.n	8002d6a <I2C_MemoryTransmit_TXE_BTF+0x3e>
    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);

    hi2c->EventCount++;
  }
  else if (hi2c->EventCount == 2U)
 8002d54:	6d01      	ldr	r1, [r0, #80]	@ 0x50
 8002d56:	2902      	cmp	r1, #2
 8002d58:	d015      	beq.n	8002d86 <I2C_MemoryTransmit_TXE_BTF+0x5a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8002d5a:	6803      	ldr	r3, [r0, #0]
 8002d5c:	695a      	ldr	r2, [r3, #20]
 8002d5e:	0612      	lsls	r2, r2, #24
 8002d60:	d502      	bpl.n	8002d68 <I2C_MemoryTransmit_TXE_BTF+0x3c>
    hi2c->Instance->DR = 0x00U;
 8002d62:	2200      	movs	r2, #0
 8002d64:	611a      	str	r2, [r3, #16]
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002d66:	4770      	bx	lr
 8002d68:	4770      	bx	lr
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002d6a:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8002d6c:	6801      	ldr	r1, [r0, #0]
 8002d6e:	b2d2      	uxtb	r2, r2
 8002d70:	610a      	str	r2, [r1, #16]
    hi2c->EventCount++;
 8002d72:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8002d74:	3201      	adds	r2, #1
 8002d76:	6502      	str	r2, [r0, #80]	@ 0x50
 8002d78:	4770      	bx	lr
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002d7a:	b2d2      	uxtb	r2, r2
 8002d7c:	610a      	str	r2, [r1, #16]
      hi2c->EventCount += 2U;
 8002d7e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8002d80:	3202      	adds	r2, #2
 8002d82:	6502      	str	r2, [r0, #80]	@ 0x50
 8002d84:	4770      	bx	lr
 8002d86:	b2d2      	uxtb	r2, r2
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002d88:	2a22      	cmp	r2, #34	@ 0x22
 8002d8a:	d01f      	beq.n	8002dcc <I2C_MemoryTransmit_TXE_BTF+0xa0>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d8c:	8d41      	ldrh	r1, [r0, #42]	@ 0x2a
 8002d8e:	b289      	uxth	r1, r1
 8002d90:	b9c1      	cbnz	r1, 8002dc4 <I2C_MemoryTransmit_TXE_BTF+0x98>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002d92:	8d41      	ldrh	r1, [r0, #42]	@ 0x2a
 8002d94:	b289      	uxth	r1, r1
 8002d96:	2900      	cmp	r1, #0
 8002d98:	d1e6      	bne.n	8002d68 <I2C_MemoryTransmit_TXE_BTF+0x3c>
 8002d9a:	2a21      	cmp	r2, #33	@ 0x21
 8002d9c:	d1e4      	bne.n	8002d68 <I2C_MemoryTransmit_TXE_BTF+0x3c>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d9e:	6802      	ldr	r2, [r0, #0]
{
 8002da0:	b510      	push	{r4, lr}
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002da2:	6854      	ldr	r4, [r2, #4]
 8002da4:	f424 64e0 	bic.w	r4, r4, #1792	@ 0x700
 8002da8:	6054      	str	r4, [r2, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002daa:	6814      	ldr	r4, [r2, #0]
 8002dac:	f444 7400 	orr.w	r4, r4, #512	@ 0x200
 8002db0:	6014      	str	r4, [r2, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8002db4:	6301      	str	r1, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002db6:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dba:	f880 103e 	strb.w	r1, [r0, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002dbe:	f7ff ffb3 	bl	8002d28 <HAL_I2C_MemTxCpltCallback>
}
 8002dc2:	bd10      	pop	{r4, pc}
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002dc4:	2a21      	cmp	r2, #33	@ 0x21
 8002dc6:	d00a      	beq.n	8002dde <I2C_MemoryTransmit_TXE_BTF+0xb2>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002dc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dca:	4770      	bx	lr
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002dcc:	6801      	ldr	r1, [r0, #0]
 8002dce:	680a      	ldr	r2, [r1, #0]
 8002dd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002dd4:	600a      	str	r2, [r1, #0]
      hi2c->EventCount++;
 8002dd6:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8002dd8:	3201      	adds	r2, #1
 8002dda:	6502      	str	r2, [r0, #80]	@ 0x50
 8002ddc:	4770      	bx	lr
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002dde:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 8002de0:	6802      	ldr	r2, [r0, #0]
 8002de2:	f811 0b01 	ldrb.w	r0, [r1], #1
 8002de6:	6110      	str	r0, [r2, #16]
      hi2c->XferCount--;
 8002de8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8002dea:	6259      	str	r1, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8002dec:	3a01      	subs	r2, #1
 8002dee:	b292      	uxth	r2, r2
 8002df0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002df2:	4770      	bx	lr

08002df4 <HAL_I2C_MemRxCpltCallback>:
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop

08002df8 <HAL_I2C_ErrorCallback>:
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop

08002dfc <HAL_I2C_AbortCpltCallback>:
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop

08002e00 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002e00:	b570      	push	{r4, r5, r6, lr}
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e02:	4b3a      	ldr	r3, [pc, #232]	@ (8002eec <I2C_DMAAbort+0xec>)
 8002e04:	4a3a      	ldr	r2, [pc, #232]	@ (8002ef0 <I2C_DMAAbort+0xf0>)
 8002e06:	681b      	ldr	r3, [r3, #0]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e08:	6b80      	ldr	r0, [r0, #56]	@ 0x38
{
 8002e0a:	b082      	sub	sp, #8
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e0c:	08db      	lsrs	r3, r3, #3
  __IO uint32_t count = 0U;
 8002e0e:	2100      	movs	r1, #0
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e10:	fba2 2303 	umull	r2, r3, r2, r3
  __IO uint32_t count = 0U;
 8002e14:	9101      	str	r1, [sp, #4]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e16:	0a1b      	lsrs	r3, r3, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e18:	f890 103d 	ldrb.w	r1, [r0, #61]	@ 0x3d
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e1c:	6802      	ldr	r2, [r0, #0]
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e1e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e22:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e26:	b2c9      	uxtb	r1, r1
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	e005      	b.n	8002e38 <I2C_DMAAbort+0x38>
    count--;
 8002e2c:	9b01      	ldr	r3, [sp, #4]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	9301      	str	r3, [sp, #4]
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8002e32:	6813      	ldr	r3, [r2, #0]
 8002e34:	059b      	lsls	r3, r3, #22
 8002e36:	d506      	bpl.n	8002e46 <I2C_DMAAbort+0x46>
    if (count == 0U)
 8002e38:	9b01      	ldr	r3, [sp, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1f6      	bne.n	8002e2c <I2C_DMAAbort+0x2c>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e3e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002e40:	f043 0320 	orr.w	r3, r3, #32
 8002e44:	6403      	str	r3, [r0, #64]	@ 0x40
  if (hi2c->hdmarx != NULL)
 8002e46:	e9d0 430d 	ldrd	r4, r3, [r0, #52]	@ 0x34
  if (hi2c->hdmatx != NULL)
 8002e4a:	b344      	cbz	r4, 8002e9e <I2C_DMAAbort+0x9e>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8002e4c:	2500      	movs	r5, #0
 8002e4e:	63e5      	str	r5, [r4, #60]	@ 0x3c
  if (hi2c->hdmarx != NULL)
 8002e50:	b1f3      	cbz	r3, 8002e90 <I2C_DMAAbort+0x90>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e52:	6816      	ldr	r6, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002e54:	63dd      	str	r5, [r3, #60]	@ 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e56:	f426 6680 	bic.w	r6, r6, #1024	@ 0x400
 8002e5a:	6016      	str	r6, [r2, #0]

  hi2c->XferCount = 0U;
 8002e5c:	8545      	strh	r5, [r0, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002e5e:	6525      	str	r5, [r4, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002e60:	2400      	movs	r4, #0
 8002e62:	651c      	str	r4, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002e64:	6813      	ldr	r3, [r2, #0]
 8002e66:	f023 0301 	bic.w	r3, r3, #1
 8002e6a:	6013      	str	r3, [r2, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002e6c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8002e70:	2b60      	cmp	r3, #96	@ 0x60
 8002e72:	d029      	beq.n	8002ec8 <I2C_DMAAbort+0xc8>
    HAL_I2C_AbortCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e74:	f001 0128 	and.w	r1, r1, #40	@ 0x28
 8002e78:	2928      	cmp	r1, #40	@ 0x28
 8002e7a:	d018      	beq.n	8002eae <I2C_DMAAbort+0xae>
      hi2c->PreviousState = I2C_STATE_NONE;
      hi2c->State = HAL_I2C_STATE_LISTEN;
    }
    else
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002e7c:	2220      	movs	r2, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e7e:	2300      	movs	r3, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8002e80:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e84:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002e88:	f7ff ffb6 	bl	8002df8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e8c:	b002      	add	sp, #8
 8002e8e:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e90:	6815      	ldr	r5, [r2, #0]
 8002e92:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8002e96:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8002e98:	8543      	strh	r3, [r0, #42]	@ 0x2a
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002e9a:	6523      	str	r3, [r4, #80]	@ 0x50
  if (hi2c->hdmarx != NULL)
 8002e9c:	e7e2      	b.n	8002e64 <I2C_DMAAbort+0x64>
  if (hi2c->hdmarx != NULL)
 8002e9e:	b1f3      	cbz	r3, 8002ede <I2C_DMAAbort+0xde>
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea0:	6815      	ldr	r5, [r2, #0]
    hi2c->hdmarx->XferCpltCallback = NULL;
 8002ea2:	63dc      	str	r4, [r3, #60]	@ 0x3c
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea4:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8002ea8:	6015      	str	r5, [r2, #0]
  hi2c->XferCount = 0U;
 8002eaa:	8544      	strh	r4, [r0, #42]	@ 0x2a
  if (hi2c->hdmatx != NULL)
 8002eac:	e7d8      	b.n	8002e60 <I2C_DMAAbort+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8002eae:	6813      	ldr	r3, [r2, #0]
 8002eb0:	f043 0301 	orr.w	r3, r3, #1
 8002eb4:	6013      	str	r3, [r2, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb6:	6813      	ldr	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002eb8:	2400      	movs	r4, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ebe:	6013      	str	r3, [r2, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ec0:	6304      	str	r4, [r0, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002ec2:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
 8002ec6:	e7df      	b.n	8002e88 <I2C_DMAAbort+0x88>
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ec8:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ed0:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002ed4:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8002ed6:	f7ff ff91 	bl	8002dfc <HAL_I2C_AbortCpltCallback>
}
 8002eda:	b002      	add	sp, #8
 8002edc:	bd70      	pop	{r4, r5, r6, pc}
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ede:	6814      	ldr	r4, [r2, #0]
 8002ee0:	f424 6480 	bic.w	r4, r4, #1024	@ 0x400
 8002ee4:	6014      	str	r4, [r2, #0]
  hi2c->XferCount = 0U;
 8002ee6:	8543      	strh	r3, [r0, #42]	@ 0x2a
  if (hi2c->hdmatx != NULL)
 8002ee8:	e7bc      	b.n	8002e64 <I2C_DMAAbort+0x64>
 8002eea:	bf00      	nop
 8002eec:	20000000 	.word	0x20000000
 8002ef0:	14f8b589 	.word	0x14f8b589

08002ef4 <I2C_ITError>:
{
 8002ef4:	b510      	push	{r4, lr}
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ef6:	f890 203d 	ldrb.w	r2, [r0, #61]	@ 0x3d
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002efa:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002efe:	2b10      	cmp	r3, #16
{
 8002f00:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f02:	b2d2      	uxtb	r2, r2
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002f04:	d039      	beq.n	8002f7a <I2C_ITError+0x86>
 8002f06:	b2d9      	uxtb	r1, r3
 8002f08:	2940      	cmp	r1, #64	@ 0x40
 8002f0a:	d036      	beq.n	8002f7a <I2C_ITError+0x86>
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f0c:	f002 0128 	and.w	r1, r2, #40	@ 0x28
 8002f10:	2928      	cmp	r1, #40	@ 0x28
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002f12:	6823      	ldr	r3, [r4, #0]
  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f14:	d03c      	beq.n	8002f90 <I2C_ITError+0x9c>
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002f16:	6859      	ldr	r1, [r3, #4]
 8002f18:	0508      	lsls	r0, r1, #20
 8002f1a:	d407      	bmi.n	8002f2c <I2C_ITError+0x38>
 8002f1c:	2a60      	cmp	r2, #96	@ 0x60
 8002f1e:	d005      	beq.n	8002f2c <I2C_ITError+0x38>
      hi2c->State = HAL_I2C_STATE_READY;
 8002f20:	2120      	movs	r1, #32
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f22:	2200      	movs	r2, #0
      hi2c->State = HAL_I2C_STATE_READY;
 8002f24:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f28:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	6322      	str	r2, [r4, #48]	@ 0x30
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f30:	685a      	ldr	r2, [r3, #4]
 8002f32:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 8002f36:	d133      	bne.n	8002fa0 <I2C_ITError+0xac>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002f38:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 8002f3c:	2960      	cmp	r1, #96	@ 0x60
 8002f3e:	d074      	beq.n	800302a <I2C_ITError+0x136>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f40:	695a      	ldr	r2, [r3, #20]
 8002f42:	0650      	lsls	r0, r2, #25
 8002f44:	d505      	bpl.n	8002f52 <I2C_ITError+0x5e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f46:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8002f4c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002f4e:	3301      	adds	r3, #1
 8002f50:	6263      	str	r3, [r4, #36]	@ 0x24
    HAL_I2C_ErrorCallback(hi2c);
 8002f52:	4620      	mov	r0, r4
 8002f54:	f7ff ff50 	bl	8002df8 <HAL_I2C_ErrorCallback>
  CurrentError = hi2c->ErrorCode;
 8002f58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002f5a:	0719      	lsls	r1, r3, #28
 8002f5c:	d004      	beq.n	8002f68 <I2C_ITError+0x74>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f5e:	6822      	ldr	r2, [r4, #0]
 8002f60:	6853      	ldr	r3, [r2, #4]
 8002f62:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002f66:	6053      	str	r3, [r2, #4]
  CurrentState = hi2c->State;
 8002f68:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002f6c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002f6e:	0752      	lsls	r2, r2, #29
  CurrentState = hi2c->State;
 8002f70:	b2db      	uxtb	r3, r3
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002f72:	d501      	bpl.n	8002f78 <I2C_ITError+0x84>
 8002f74:	2b28      	cmp	r3, #40	@ 0x28
 8002f76:	d02e      	beq.n	8002fd6 <I2C_ITError+0xe2>
}
 8002f78:	bd10      	pop	{r4, pc}
  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002f7a:	2a22      	cmp	r2, #34	@ 0x22
 8002f7c:	d1c6      	bne.n	8002f0c <I2C_ITError+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002f7e:	6823      	ldr	r3, [r4, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f86:	601a      	str	r2, [r3, #0]
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	0512      	lsls	r2, r2, #20
 8002f8c:	d5c8      	bpl.n	8002f20 <I2C_ITError+0x2c>
 8002f8e:	e7cd      	b.n	8002f2c <I2C_ITError+0x38>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f90:	2200      	movs	r2, #0
 8002f92:	6322      	str	r2, [r4, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f94:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 8002f9e:	d0cb      	beq.n	8002f38 <I2C_ITError+0x44>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002fa0:	685a      	ldr	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002fa2:	6b60      	ldr	r0, [r4, #52]	@ 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002fa4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fa8:	605a      	str	r2, [r3, #4]
    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002faa:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d01e      	beq.n	8002ff0 <I2C_ITError+0xfc>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002fb2:	4b29      	ldr	r3, [pc, #164]	@ (8003058 <I2C_ITError+0x164>)
 8002fb4:	6503      	str	r3, [r0, #80]	@ 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002fb6:	f7ff fb31 	bl	800261c <HAL_DMA_Abort_IT>
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	d0cc      	beq.n	8002f58 <I2C_ITError+0x64>
        __HAL_I2C_DISABLE(hi2c);
 8002fbe:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002fc0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        __HAL_I2C_DISABLE(hi2c);
 8002fc2:	6813      	ldr	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002fc4:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 8002fc6:	f023 0301 	bic.w	r3, r3, #1
 8002fca:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8002fcc:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002fd0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002fd2:	4798      	blx	r3
 8002fd4:	e7c0      	b.n	8002f58 <I2C_ITError+0x64>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fd6:	2300      	movs	r3, #0
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002fd8:	4920      	ldr	r1, [pc, #128]	@ (800305c <I2C_ITError+0x168>)
 8002fda:	62e1      	str	r1, [r4, #44]	@ 0x2c
    hi2c->State         = HAL_I2C_STATE_READY;
 8002fdc:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8002fde:	6323      	str	r3, [r4, #48]	@ 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8002fe0:	4620      	mov	r0, r4
    hi2c->State         = HAL_I2C_STATE_READY;
 8002fe2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002fe6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8002fea:	f7ff fe9b 	bl	8002d24 <HAL_I2C_ListenCpltCallback>
}
 8002fee:	bd10      	pop	{r4, pc}
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ff0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002ff2:	4b19      	ldr	r3, [pc, #100]	@ (8003058 <I2C_ITError+0x164>)
 8002ff4:	6503      	str	r3, [r0, #80]	@ 0x50
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ff6:	f7ff fb11 	bl	800261c <HAL_DMA_Abort_IT>
 8002ffa:	2800      	cmp	r0, #0
 8002ffc:	d0ac      	beq.n	8002f58 <I2C_ITError+0x64>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ffe:	6823      	ldr	r3, [r4, #0]
 8003000:	695a      	ldr	r2, [r3, #20]
 8003002:	0651      	lsls	r1, r2, #25
 8003004:	d506      	bpl.n	8003014 <I2C_ITError+0x120>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003006:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 800300c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        __HAL_I2C_DISABLE(hi2c);
 800300e:	6823      	ldr	r3, [r4, #0]
          hi2c->pBuffPtr++;
 8003010:	3201      	adds	r2, #1
 8003012:	6262      	str	r2, [r4, #36]	@ 0x24
        __HAL_I2C_DISABLE(hi2c);
 8003014:	681a      	ldr	r2, [r3, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003016:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
        __HAL_I2C_DISABLE(hi2c);
 8003018:	f022 0201 	bic.w	r2, r2, #1
        hi2c->State = HAL_I2C_STATE_READY;
 800301c:	2120      	movs	r1, #32
        __HAL_I2C_DISABLE(hi2c);
 800301e:	601a      	str	r2, [r3, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8003020:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003024:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003026:	4798      	blx	r3
 8003028:	e796      	b.n	8002f58 <I2C_ITError+0x64>
    hi2c->State = HAL_I2C_STATE_READY;
 800302a:	2120      	movs	r1, #32
 800302c:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003030:	6422      	str	r2, [r4, #64]	@ 0x40
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003032:	695a      	ldr	r2, [r3, #20]
 8003034:	0652      	lsls	r2, r2, #25
 8003036:	d506      	bpl.n	8003046 <I2C_ITError+0x152>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003038:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 800303e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE(hi2c);
 8003040:	6823      	ldr	r3, [r4, #0]
      hi2c->pBuffPtr++;
 8003042:	3201      	adds	r2, #1
 8003044:	6262      	str	r2, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE(hi2c);
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	f022 0201 	bic.w	r2, r2, #1
    HAL_I2C_AbortCpltCallback(hi2c);
 800304c:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 800304e:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8003050:	f7ff fed4 	bl	8002dfc <HAL_I2C_AbortCpltCallback>
 8003054:	e780      	b.n	8002f58 <I2C_ITError+0x64>
 8003056:	bf00      	nop
 8003058:	08002e01 	.word	0x08002e01
 800305c:	ffff0000 	.word	0xffff0000

08003060 <HAL_I2C_EV_IRQHandler>:
{
 8003060:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003062:	6803      	ldr	r3, [r0, #0]
 8003064:	685f      	ldr	r7, [r3, #4]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003066:	6ac5      	ldr	r5, [r0, #44]	@ 0x2c
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003068:	f890 203e 	ldrb.w	r2, [r0, #62]	@ 0x3e
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800306c:	f890 103d 	ldrb.w	r1, [r0, #61]	@ 0x3d
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003070:	2a10      	cmp	r2, #16
{
 8003072:	4604      	mov	r4, r0
 8003074:	b08f      	sub	sp, #60	@ 0x3c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003076:	b2c9      	uxtb	r1, r1
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003078:	b2d0      	uxtb	r0, r2
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800307a:	d023      	beq.n	80030c4 <HAL_I2C_EV_IRQHandler+0x64>
 800307c:	2840      	cmp	r0, #64	@ 0x40
 800307e:	d021      	beq.n	80030c4 <HAL_I2C_EV_IRQHandler+0x64>
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003080:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003082:	2a00      	cmp	r2, #0
 8003084:	f000 80ce 	beq.w	8003224 <HAL_I2C_EV_IRQHandler+0x1c4>
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003088:	695a      	ldr	r2, [r3, #20]
  uint32_t sr2itflags               = 0U;
 800308a:	2000      	movs	r0, #0
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800308c:	f012 0502 	ands.w	r5, r2, #2
 8003090:	f000 808e 	beq.w	80031b0 <HAL_I2C_EV_IRQHandler+0x150>
 8003094:	05bd      	lsls	r5, r7, #22
 8003096:	f140 808d 	bpl.w	80031b4 <HAL_I2C_EV_IRQHandler+0x154>
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800309a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800309c:	b102      	cbz	r2, 80030a0 <HAL_I2C_EV_IRQHandler+0x40>
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800309e:	6998      	ldr	r0, [r3, #24]
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030a0:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80030a4:	f002 0228 	and.w	r2, r2, #40	@ 0x28
 80030a8:	2a28      	cmp	r2, #40	@ 0x28
 80030aa:	f000 824f 	beq.w	800354c <HAL_I2C_EV_IRQHandler+0x4ec>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ae:	2200      	movs	r2, #0
 80030b0:	920c      	str	r2, [sp, #48]	@ 0x30
 80030b2:	6959      	ldr	r1, [r3, #20]
 80030b4:	910c      	str	r1, [sp, #48]	@ 0x30
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	930c      	str	r3, [sp, #48]	@ 0x30
 80030ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80030bc:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
}
 80030c0:	b00f      	add	sp, #60	@ 0x3c
 80030c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80030c4:	699e      	ldr	r6, [r3, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80030c6:	695a      	ldr	r2, [r3, #20]
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80030c8:	f012 0f01 	tst.w	r2, #1
 80030cc:	d120      	bne.n	8003110 <HAL_I2C_EV_IRQHandler+0xb0>
 80030ce:	f5b5 0f2a 	cmp.w	r5, #11141120	@ 0xaa0000
 80030d2:	d0f5      	beq.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
 80030d4:	f1b5 4f2a 	cmp.w	r5, #2852126720	@ 0xaa000000
 80030d8:	d0f2      	beq.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030da:	f012 0508 	ands.w	r5, r2, #8
 80030de:	f040 80ce 	bne.w	800327e <HAL_I2C_EV_IRQHandler+0x21e>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80030e2:	f012 0f02 	tst.w	r2, #2
 80030e6:	d036      	beq.n	8003156 <HAL_I2C_EV_IRQHandler+0xf6>
 80030e8:	f417 7f00 	tst.w	r7, #512	@ 0x200
 80030ec:	d033      	beq.n	8003156 <HAL_I2C_EV_IRQHandler+0xf6>
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80030ee:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80030f2:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  uint32_t Prev_State                   = hi2c->PreviousState;
 80030f4:	6b26      	ldr	r6, [r4, #48]	@ 0x30
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030f6:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
 80030fa:	2922      	cmp	r1, #34	@ 0x22
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80030fc:	b2d2      	uxtb	r2, r2
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030fe:	f000 81fe 	beq.w	80034fe <HAL_I2C_EV_IRQHandler+0x49e>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003102:	950a      	str	r5, [sp, #40]	@ 0x28
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	920a      	str	r2, [sp, #40]	@ 0x28
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	930a      	str	r3, [sp, #40]	@ 0x28
 800310c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800310e:	e7d7      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003110:	05bd      	lsls	r5, r7, #22
 8003112:	d520      	bpl.n	8003156 <HAL_I2C_EV_IRQHandler+0xf6>
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003114:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003116:	f5b2 0f2a 	cmp.w	r2, #11141120	@ 0xaa0000
 800311a:	f000 8214 	beq.w	8003546 <HAL_I2C_EV_IRQHandler+0x4e6>
  }
  /* else if user set XferOptions to I2C_OTHER_AND_LAST_FRAME */
  /* it request implicitly to generate a restart condition    */
  /* then generate a stop condition at the end of transfer    */
  /* set XferOptions to I2C_FIRST_AND_LAST_FRAME              */
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800311e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003120:	f1b2 4f2a 	cmp.w	r2, #2852126720	@ 0xaa000000
  {
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003124:	bf04      	itt	eq
 8003126:	2208      	moveq	r2, #8
 8003128:	62e2      	streq	r2, [r4, #44]	@ 0x2c
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800312a:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 800312e:	2a40      	cmp	r2, #64	@ 0x40
 8003130:	f000 8202 	beq.w	8003538 <HAL_I2C_EV_IRQHandler+0x4d8>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003134:	6922      	ldr	r2, [r4, #16]
 8003136:	f5b2 4f80 	cmp.w	r2, #16384	@ 0x4000
 800313a:	f000 81c6 	beq.w	80034ca <HAL_I2C_EV_IRQHandler+0x46a>
      if (hi2c->EventCount == 0U)
 800313e:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003140:	2a00      	cmp	r2, #0
 8003142:	f040 8217 	bne.w	8003574 <HAL_I2C_EV_IRQHandler+0x514>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003146:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003148:	11d2      	asrs	r2, r2, #7
 800314a:	f002 0206 	and.w	r2, r2, #6
 800314e:	f042 02f0 	orr.w	r2, r2, #240	@ 0xf0
 8003152:	611a      	str	r2, [r3, #16]
 8003154:	e7b4      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003156:	0776      	lsls	r6, r6, #29
 8003158:	d567      	bpl.n	800322a <HAL_I2C_EV_IRQHandler+0x1ca>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800315a:	685d      	ldr	r5, [r3, #4]
 800315c:	052d      	lsls	r5, r5, #20
 800315e:	d4af      	bmi.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003160:	0616      	lsls	r6, r2, #24
 8003162:	f002 0504 	and.w	r5, r2, #4
 8003166:	f140 8147 	bpl.w	80033f8 <HAL_I2C_EV_IRQHandler+0x398>
 800316a:	057a      	lsls	r2, r7, #21
 800316c:	f140 8144 	bpl.w	80033f8 <HAL_I2C_EV_IRQHandler+0x398>
 8003170:	2d00      	cmp	r5, #0
 8003172:	f040 8144 	bne.w	80033fe <HAL_I2C_EV_IRQHandler+0x39e>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003176:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800317a:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800317c:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003180:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003182:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003184:	b2c9      	uxtb	r1, r1
  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003186:	2800      	cmp	r0, #0
 8003188:	f040 829d 	bne.w	80036c6 <HAL_I2C_EV_IRQHandler+0x666>
 800318c:	2a21      	cmp	r2, #33	@ 0x21
 800318e:	f000 83a4 	beq.w	80038da <HAL_I2C_EV_IRQHandler+0x87a>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003192:	2940      	cmp	r1, #64	@ 0x40
 8003194:	d194      	bne.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003196:	2a22      	cmp	r2, #34	@ 0x22
 8003198:	d192      	bne.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
    if (hi2c->XferCount == 0U)
 800319a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800319c:	b292      	uxth	r2, r2
 800319e:	2a00      	cmp	r2, #0
 80031a0:	f000 8324 	beq.w	80037ec <HAL_I2C_EV_IRQHandler+0x78c>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80031a4:	f894 203e 	ldrb.w	r2, [r4, #62]	@ 0x3e
 80031a8:	2a40      	cmp	r2, #64	@ 0x40
 80031aa:	f040 810c 	bne.w	80033c6 <HAL_I2C_EV_IRQHandler+0x366>
 80031ae:	e12f      	b.n	8003410 <HAL_I2C_EV_IRQHandler+0x3b0>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80031b0:	06d6      	lsls	r6, r2, #27
 80031b2:	d477      	bmi.n	80032a4 <HAL_I2C_EV_IRQHandler+0x244>
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80031b4:	f001 01f7 	and.w	r1, r1, #247	@ 0xf7
 80031b8:	2921      	cmp	r1, #33	@ 0x21
 80031ba:	f002 0004 	and.w	r0, r2, #4
 80031be:	f000 80cd 	beq.w	800335c <HAL_I2C_EV_IRQHandler+0x2fc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80031c2:	0655      	lsls	r5, r2, #25
 80031c4:	f140 8109 	bpl.w	80033da <HAL_I2C_EV_IRQHandler+0x37a>
 80031c8:	0579      	lsls	r1, r7, #21
 80031ca:	f140 8106 	bpl.w	80033da <HAL_I2C_EV_IRQHandler+0x37a>
 80031ce:	2800      	cmp	r0, #0
 80031d0:	f040 8106 	bne.w	80033e0 <HAL_I2C_EV_IRQHandler+0x380>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031d4:	f894 103d 	ldrb.w	r1, [r4, #61]	@ 0x3d
  if (hi2c->XferCount != 0U)
 80031d8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80031da:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80031dc:	b2c9      	uxtb	r1, r1
  if (hi2c->XferCount != 0U)
 80031de:	2a00      	cmp	r2, #0
 80031e0:	f43f af6e 	beq.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031e4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 80031ea:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr++;
 80031ec:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031f4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr++;
 80031f6:	3201      	adds	r2, #1
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031f8:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 80031fa:	6262      	str	r2, [r4, #36]	@ 0x24
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f47f af5f 	bne.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
 8003202:	292a      	cmp	r1, #42	@ 0x2a
 8003204:	f47f af5c 	bne.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003208:	6822      	ldr	r2, [r4, #0]
 800320a:	6853      	ldr	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800320c:	2522      	movs	r5, #34	@ 0x22
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800320e:	2128      	movs	r1, #40	@ 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003210:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003214:	6053      	str	r3, [r2, #4]
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003216:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003218:	6325      	str	r5, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800321a:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800321e:	f7ff fd7d 	bl	8002d1c <HAL_I2C_SlaveRxCpltCallback>
 8003222:	e74d      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003224:	6998      	ldr	r0, [r3, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003226:	695a      	ldr	r2, [r3, #20]
 8003228:	e730      	b.n	800308c <HAL_I2C_EV_IRQHandler+0x2c>
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800322a:	6859      	ldr	r1, [r3, #4]
 800322c:	050d      	lsls	r5, r1, #20
 800322e:	f53f af47 	bmi.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003232:	0650      	lsls	r0, r2, #25
 8003234:	f002 0104 	and.w	r1, r2, #4
 8003238:	f100 80f0 	bmi.w	800341c <HAL_I2C_EV_IRQHandler+0x3bc>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800323c:	2900      	cmp	r1, #0
 800323e:	f43f af3f 	beq.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
 8003242:	05be      	lsls	r6, r7, #22
 8003244:	f57f af3c 	bpl.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003248:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
  if (hi2c->XferCount == 4U)
 800324a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800324c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  if (hi2c->XferCount == 4U)
 800324e:	b292      	uxth	r2, r2
 8003250:	2a04      	cmp	r2, #4
 8003252:	f000 8206 	beq.w	8003662 <HAL_I2C_EV_IRQHandler+0x602>
  else if (hi2c->XferCount == 3U)
 8003256:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003258:	b292      	uxth	r2, r2
 800325a:	2a03      	cmp	r2, #3
 800325c:	f000 8245 	beq.w	80036ea <HAL_I2C_EV_IRQHandler+0x68a>
  else if (hi2c->XferCount == 2U)
 8003260:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003262:	b292      	uxth	r2, r2
 8003264:	2a02      	cmp	r2, #2
 8003266:	f000 8276 	beq.w	8003756 <HAL_I2C_EV_IRQHandler+0x6f6>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 800326e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr++;
 8003270:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8003272:	3b01      	subs	r3, #1
    hi2c->pBuffPtr++;
 8003274:	3201      	adds	r2, #1
    hi2c->XferCount--;
 8003276:	b29b      	uxth	r3, r3
    hi2c->pBuffPtr++;
 8003278:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 800327a:	8563      	strh	r3, [r4, #42]	@ 0x2a
      }
 800327c:	e720      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800327e:	05bd      	lsls	r5, r7, #22
 8003280:	f57f af69 	bpl.w	8003156 <HAL_I2C_EV_IRQHandler+0xf6>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003284:	6c62      	ldr	r2, [r4, #68]	@ 0x44
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003286:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003288:	b2d2      	uxtb	r2, r2
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800328a:	611a      	str	r2, [r3, #16]
  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800328c:	2900      	cmp	r1, #0
 800328e:	f000 812d 	beq.w	80034ec <HAL_I2C_EV_IRQHandler+0x48c>
 8003292:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
 8003294:	2a00      	cmp	r2, #0
 8003296:	f000 8129 	beq.w	80034ec <HAL_I2C_EV_IRQHandler+0x48c>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	e70d      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80032a4:	05b8      	lsls	r0, r7, #22
 80032a6:	d585      	bpl.n	80031b4 <HAL_I2C_EV_IRQHandler+0x154>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032a8:	f894 603d 	ldrb.w	r6, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80032b2:	605a      	str	r2, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80032b4:	950d      	str	r5, [sp, #52]	@ 0x34
 80032b6:	695a      	ldr	r2, [r3, #20]
 80032b8:	920d      	str	r2, [sp, #52]	@ 0x34
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	f042 0201 	orr.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ca:	601a      	str	r2, [r3, #0]
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032cc:	685a      	ldr	r2, [r3, #4]
 80032ce:	0511      	lsls	r1, r2, #20
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80032d0:	b2f6      	uxtb	r6, r6
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032d2:	f100 80c9 	bmi.w	8003468 <HAL_I2C_EV_IRQHandler+0x408>
  if (hi2c->XferCount != 0U)
 80032d6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	b313      	cbz	r3, 8003322 <HAL_I2C_EV_IRQHandler+0x2c2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80032dc:	6823      	ldr	r3, [r4, #0]
 80032de:	695a      	ldr	r2, [r3, #20]
 80032e0:	0752      	lsls	r2, r2, #29
 80032e2:	d50a      	bpl.n	80032fa <HAL_I2C_EV_IRQHandler+0x29a>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80032ea:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 80032ec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80032ee:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80032f0:	1c59      	adds	r1, r3, #1
      hi2c->XferCount--;
 80032f2:	b292      	uxth	r2, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032f4:	6823      	ldr	r3, [r4, #0]
      hi2c->pBuffPtr++;
 80032f6:	6261      	str	r1, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80032f8:	8562      	strh	r2, [r4, #42]	@ 0x2a
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032fa:	695a      	ldr	r2, [r3, #20]
 80032fc:	0657      	lsls	r7, r2, #25
 80032fe:	d509      	bpl.n	8003314 <HAL_I2C_EV_IRQHandler+0x2b4>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003300:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8003306:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8003308:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 800330a:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800330c:	3201      	adds	r2, #1
      hi2c->XferCount--;
 800330e:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8003310:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003312:	8563      	strh	r3, [r4, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8003314:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003316:	b29b      	uxth	r3, r3
 8003318:	b11b      	cbz	r3, 8003322 <HAL_I2C_EV_IRQHandler+0x2c2>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800331a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800331c:	f043 0304 	orr.w	r3, r3, #4
 8003320:	6423      	str	r3, [r4, #64]	@ 0x40
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003322:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003324:	2b00      	cmp	r3, #0
 8003326:	f040 80ca 	bne.w	80034be <HAL_I2C_EV_IRQHandler+0x45e>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800332a:	2e2a      	cmp	r6, #42	@ 0x2a
 800332c:	f000 8155 	beq.w	80035da <HAL_I2C_EV_IRQHandler+0x57a>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003330:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 8003334:	2b28      	cmp	r3, #40	@ 0x28
 8003336:	f000 8160 	beq.w	80035fa <HAL_I2C_EV_IRQHandler+0x59a>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800333a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800333c:	2b22      	cmp	r3, #34	@ 0x22
 800333e:	d002      	beq.n	8003346 <HAL_I2C_EV_IRQHandler+0x2e6>
 8003340:	2e22      	cmp	r6, #34	@ 0x22
 8003342:	f47f aebd 	bne.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003346:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003348:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800334a:	6323      	str	r3, [r4, #48]	@ 0x30
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800334c:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 800334e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003352:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003356:	f7ff fce1 	bl	8002d1c <HAL_I2C_SlaveRxCpltCallback>
 800335a:	e6b1      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800335c:	0615      	lsls	r5, r2, #24
 800335e:	d527      	bpl.n	80033b0 <HAL_I2C_EV_IRQHandler+0x350>
 8003360:	057a      	lsls	r2, r7, #21
 8003362:	d525      	bpl.n	80033b0 <HAL_I2C_EV_IRQHandler+0x350>
 8003364:	bb38      	cbnz	r0, 80033b6 <HAL_I2C_EV_IRQHandler+0x356>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003366:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
  if (hi2c->XferCount != 0U)
 800336a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800336c:	b292      	uxth	r2, r2
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800336e:	b2c0      	uxtb	r0, r0
  if (hi2c->XferCount != 0U)
 8003370:	2a00      	cmp	r2, #0
 8003372:	f43f aea5 	beq.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003376:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003378:	f812 5b01 	ldrb.w	r5, [r2], #1
 800337c:	611d      	str	r5, [r3, #16]
    hi2c->pBuffPtr++;
 800337e:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8003380:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003382:	3a01      	subs	r2, #1
 8003384:	b292      	uxth	r2, r2
 8003386:	8562      	strh	r2, [r4, #42]	@ 0x2a
    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003388:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800338a:	b292      	uxth	r2, r2
 800338c:	2a00      	cmp	r2, #0
 800338e:	f47f ae97 	bne.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
 8003392:	2829      	cmp	r0, #41	@ 0x29
 8003394:	f47f ae94 	bne.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003398:	685a      	ldr	r2, [r3, #4]
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800339a:	2528      	movs	r5, #40	@ 0x28
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800339c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033a0:	605a      	str	r2, [r3, #4]
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033a2:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033a4:	6321      	str	r1, [r4, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80033a6:	f884 503d 	strb.w	r5, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033aa:	f7ff fcb5 	bl	8002d18 <HAL_I2C_SlaveTxCpltCallback>
 80033ae:	e687      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033b0:	2800      	cmp	r0, #0
 80033b2:	f43f ae85 	beq.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
 80033b6:	05be      	lsls	r6, r7, #22
 80033b8:	f57f ae82 	bpl.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
  if (hi2c->XferCount != 0U)
 80033bc:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80033be:	b292      	uxth	r2, r2
 80033c0:	2a00      	cmp	r2, #0
 80033c2:	f43f ae7d 	beq.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033c6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80033c8:	f812 1b01 	ldrb.w	r1, [r2], #1
 80033cc:	6119      	str	r1, [r3, #16]
    hi2c->XferCount--;
 80033ce:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr++;
 80033d0:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 80033d2:	3b01      	subs	r3, #1
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	8563      	strh	r3, [r4, #42]	@ 0x2a
 80033d8:	e672      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033da:	2800      	cmp	r0, #0
 80033dc:	f43f ae70 	beq.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
 80033e0:	05ba      	lsls	r2, r7, #22
 80033e2:	f57f ae6d 	bpl.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
  if (hi2c->XferCount != 0U)
 80033e6:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80033e8:	b292      	uxth	r2, r2
 80033ea:	2a00      	cmp	r2, #0
 80033ec:	f43f ae68 	beq.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	7013      	strb	r3, [r2, #0]
 80033f6:	e73a      	b.n	800326e <HAL_I2C_EV_IRQHandler+0x20e>
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80033f8:	2d00      	cmp	r5, #0
 80033fa:	f43f ae61 	beq.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
 80033fe:	05be      	lsls	r6, r7, #22
 8003400:	f57f ae5e 	bpl.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003404:	2921      	cmp	r1, #33	@ 0x21
 8003406:	f000 8133 	beq.w	8003670 <HAL_I2C_EV_IRQHandler+0x610>
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800340a:	2840      	cmp	r0, #64	@ 0x40
 800340c:	f47f ae58 	bne.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003410:	4620      	mov	r0, r4
}
 8003412:	b00f      	add	sp, #60	@ 0x3c
 8003414:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003418:	f7ff bc88 	b.w	8002d2c <I2C_MemoryTransmit_TXE_BTF>
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800341c:	057a      	lsls	r2, r7, #21
 800341e:	f57f af0d 	bpl.w	800323c <HAL_I2C_EV_IRQHandler+0x1dc>
 8003422:	2900      	cmp	r1, #0
 8003424:	f47f af0d 	bne.w	8003242 <HAL_I2C_EV_IRQHandler+0x1e2>
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003428:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800342c:	2a22      	cmp	r2, #34	@ 0x22
 800342e:	f47f ae47 	bne.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
    CurrentXferOptions = hi2c->XferOptions;
 8003432:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    tmp = hi2c->XferCount;
 8003434:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003436:	b292      	uxth	r2, r2
    if (tmp > 3U)
 8003438:	2a03      	cmp	r2, #3
 800343a:	f240 8217 	bls.w	800386c <HAL_I2C_EV_IRQHandler+0x80c>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800343e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8003444:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->pBuffPtr++;
 8003446:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8003448:	3b01      	subs	r3, #1
 800344a:	b29b      	uxth	r3, r3
 800344c:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if (hi2c->XferCount == (uint16_t)3)
 800344e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8003450:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8003452:	3201      	adds	r2, #1
      if (hi2c->XferCount == (uint16_t)3)
 8003454:	2b03      	cmp	r3, #3
      hi2c->pBuffPtr++;
 8003456:	6262      	str	r2, [r4, #36]	@ 0x24
      if (hi2c->XferCount == (uint16_t)3)
 8003458:	f47f ae32 	bne.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800345c:	6822      	ldr	r2, [r4, #0]
 800345e:	6853      	ldr	r3, [r2, #4]
 8003460:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003464:	6053      	str	r3, [r2, #4]
 8003466:	e62b      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003468:	f006 02f7 	and.w	r2, r6, #247	@ 0xf7
 800346c:	2a22      	cmp	r2, #34	@ 0x22
 800346e:	f000 8093 	beq.w	8003598 <HAL_I2C_EV_IRQHandler+0x538>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003472:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8003474:	6802      	ldr	r2, [r0, #0]
 8003476:	6852      	ldr	r2, [r2, #4]
 8003478:	b292      	uxth	r2, r2
 800347a:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 800347c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800347e:	b292      	uxth	r2, r2
 8003480:	b11a      	cbz	r2, 800348a <HAL_I2C_EV_IRQHandler+0x42a>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003482:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8003484:	f042 0204 	orr.w	r2, r2, #4
 8003488:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003490:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003492:	f7ff f9ab 	bl	80027ec <HAL_DMA_GetState>
 8003496:	2801      	cmp	r0, #1
 8003498:	d008      	beq.n	80034ac <HAL_I2C_EV_IRQHandler+0x44c>
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800349a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800349c:	4b9a      	ldr	r3, [pc, #616]	@ (8003708 <HAL_I2C_EV_IRQHandler+0x6a8>)
 800349e:	6503      	str	r3, [r0, #80]	@ 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80034a0:	f7ff f8bc 	bl	800261c <HAL_DMA_Abort_IT>
 80034a4:	b110      	cbz	r0, 80034ac <HAL_I2C_EV_IRQHandler+0x44c>
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80034a6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80034a8:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80034aa:	4798      	blx	r3
  if (hi2c->XferCount != 0U)
 80034ac:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f47f af13 	bne.w	80032dc <HAL_I2C_EV_IRQHandler+0x27c>
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80034b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f43f af39 	beq.w	8003330 <HAL_I2C_EV_IRQHandler+0x2d0>
    I2C_ITError(hi2c);
 80034be:	4620      	mov	r0, r4
}
 80034c0:	b00f      	add	sp, #60	@ 0x3c
 80034c2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    I2C_ITError(hi2c);
 80034c6:	f7ff bd15 	b.w	8002ef4 <I2C_ITError>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80034ca:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80034ce:	2a21      	cmp	r2, #33	@ 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034d0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80034d2:	bf16      	itet	ne
 80034d4:	f042 0201 	orrne.w	r2, r2, #1
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80034d8:	f002 02fe 	andeq.w	r2, r2, #254	@ 0xfe
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80034dc:	b2d2      	uxtbne	r2, r2
 80034de:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80034e0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80034e2:	b11a      	cbz	r2, 80034ec <HAL_I2C_EV_IRQHandler+0x48c>
 80034e4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80034e6:	2a00      	cmp	r2, #0
 80034e8:	f47f aed7 	bne.w	800329a <HAL_I2C_EV_IRQHandler+0x23a>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80034ec:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80034ee:	2a00      	cmp	r2, #0
 80034f0:	f43f ade6 	beq.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
 80034f4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80034f6:	2a00      	cmp	r2, #0
 80034f8:	f47f aecf 	bne.w	800329a <HAL_I2C_EV_IRQHandler+0x23a>
 80034fc:	e5e0      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80034fe:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8003500:	b911      	cbnz	r1, 8003508 <HAL_I2C_EV_IRQHandler+0x4a8>
 8003502:	2a40      	cmp	r2, #64	@ 0x40
 8003504:	f000 80d8 	beq.w	80036b8 <HAL_I2C_EV_IRQHandler+0x658>
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003508:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800350a:	b922      	cbnz	r2, 8003516 <HAL_I2C_EV_IRQHandler+0x4b6>
 800350c:	6921      	ldr	r1, [r4, #16]
 800350e:	f5b1 4f40 	cmp.w	r1, #49152	@ 0xc000
 8003512:	f000 80dc 	beq.w	80036ce <HAL_I2C_EV_IRQHandler+0x66e>
      if (hi2c->XferCount == 0U)
 8003516:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003518:	b292      	uxth	r2, r2
 800351a:	2a00      	cmp	r2, #0
 800351c:	d17a      	bne.n	8003614 <HAL_I2C_EV_IRQHandler+0x5b4>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800351e:	9203      	str	r2, [sp, #12]
 8003520:	695a      	ldr	r2, [r3, #20]
 8003522:	9203      	str	r2, [sp, #12]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	9203      	str	r2, [sp, #12]
 8003528:	9a03      	ldr	r2, [sp, #12]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003530:	601a      	str	r2, [r3, #0]
      hi2c->EventCount = 0U;
 8003532:	2300      	movs	r3, #0
 8003534:	6523      	str	r3, [r4, #80]	@ 0x50
 8003536:	e5c3      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
    if (hi2c->EventCount == 0U)
 8003538:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 800353a:	bb3a      	cbnz	r2, 800358c <HAL_I2C_EV_IRQHandler+0x52c>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800353c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800353e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003542:	611a      	str	r2, [r3, #16]
 8003544:	e5bc      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003546:	2201      	movs	r2, #1
 8003548:	62e2      	str	r2, [r4, #44]	@ 0x2c
 800354a:	e5ee      	b.n	800312a <HAL_I2C_EV_IRQHandler+0xca>
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003552:	605a      	str	r2, [r3, #4]
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8003554:	0607      	lsls	r7, r0, #24
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003556:	f080 0104 	eor.w	r1, r0, #4
    __HAL_UNLOCK(hi2c);
 800355a:	f04f 0300 	mov.w	r3, #0
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800355e:	bf54      	ite	pl
 8003560:	89a2      	ldrhpl	r2, [r4, #12]
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003562:	8b22      	ldrhmi	r2, [r4, #24]
    __HAL_UNLOCK(hi2c);
 8003564:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8003568:	f3c1 0180 	ubfx	r1, r1, #2, #1
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800356c:	4620      	mov	r0, r4
 800356e:	f7ff fbd7 	bl	8002d20 <HAL_I2C_AddrCallback>
 8003572:	e5a5      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
      else if (hi2c->EventCount == 1U)
 8003574:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8003576:	2a01      	cmp	r2, #1
 8003578:	f47f ada2 	bne.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800357c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800357e:	11d2      	asrs	r2, r2, #7
 8003580:	f002 0206 	and.w	r2, r2, #6
 8003584:	f042 02f1 	orr.w	r2, r2, #241	@ 0xf1
 8003588:	611a      	str	r2, [r3, #16]
 800358a:	e599      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800358c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	611a      	str	r2, [r3, #16]
 8003596:	e593      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003598:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800359a:	6802      	ldr	r2, [r0, #0]
 800359c:	6852      	ldr	r2, [r2, #4]
 800359e:	b292      	uxth	r2, r2
 80035a0:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if (hi2c->XferCount != 0U)
 80035a2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 80035a4:	b292      	uxth	r2, r2
 80035a6:	b11a      	cbz	r2, 80035b0 <HAL_I2C_EV_IRQHandler+0x550>
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80035a8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80035aa:	f042 0204 	orr.w	r2, r2, #4
 80035ae:	6422      	str	r2, [r4, #64]	@ 0x40
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035b6:	605a      	str	r2, [r3, #4]
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80035b8:	f7ff f918 	bl	80027ec <HAL_DMA_GetState>
 80035bc:	2801      	cmp	r0, #1
 80035be:	f43f ae8a 	beq.w	80032d6 <HAL_I2C_EV_IRQHandler+0x276>
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80035c2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80035c4:	4b50      	ldr	r3, [pc, #320]	@ (8003708 <HAL_I2C_EV_IRQHandler+0x6a8>)
 80035c6:	6503      	str	r3, [r0, #80]	@ 0x50
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80035c8:	f7ff f828 	bl	800261c <HAL_DMA_Abort_IT>
 80035cc:	2800      	cmp	r0, #0
 80035ce:	f43f ae82 	beq.w	80032d6 <HAL_I2C_EV_IRQHandler+0x276>
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035d2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80035d4:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80035d6:	4798      	blx	r3
 80035d8:	e67d      	b.n	80032d6 <HAL_I2C_EV_IRQHandler+0x276>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035da:	2228      	movs	r2, #40	@ 0x28
      hi2c->PreviousState = I2C_STATE_NONE;
 80035dc:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035de:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035e0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80035e4:	f7ff fb9a 	bl	8002d1c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80035e8:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
 80035ec:	2b28      	cmp	r3, #40	@ 0x28
 80035ee:	d004      	beq.n	80035fa <HAL_I2C_EV_IRQHandler+0x59a>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80035f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80035f2:	2b22      	cmp	r3, #34	@ 0x22
 80035f4:	f47f ad64 	bne.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
 80035f8:	e6a5      	b.n	8003346 <HAL_I2C_EV_IRQHandler+0x2e6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80035fa:	2300      	movs	r3, #0
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035fc:	4943      	ldr	r1, [pc, #268]	@ (800370c <HAL_I2C_EV_IRQHandler+0x6ac>)
 80035fe:	62e1      	str	r1, [r4, #44]	@ 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 8003600:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8003602:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_I2C_ListenCpltCallback(hi2c);
 8003604:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 8003606:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800360a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800360e:	f7ff fb89 	bl	8002d24 <HAL_I2C_ListenCpltCallback>
 8003612:	e555      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
      else if (hi2c->XferCount == 1U)
 8003614:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8003616:	b292      	uxth	r2, r2
 8003618:	2a01      	cmp	r2, #1
 800361a:	d07b      	beq.n	8003714 <HAL_I2C_EV_IRQHandler+0x6b4>
      else if (hi2c->XferCount == 2U)
 800361c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800361e:	b292      	uxth	r2, r2
 8003620:	2a02      	cmp	r2, #2
 8003622:	f000 80e8 	beq.w	80037f6 <HAL_I2C_EV_IRQHandler+0x796>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800362c:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	0512      	lsls	r2, r2, #20
 8003632:	d50e      	bpl.n	8003652 <HAL_I2C_EV_IRQHandler+0x5f2>
 8003634:	2820      	cmp	r0, #32
 8003636:	f200 81a7 	bhi.w	8003988 <HAL_I2C_EV_IRQHandler+0x928>
 800363a:	2807      	cmp	r0, #7
 800363c:	f240 81a0 	bls.w	8003980 <HAL_I2C_EV_IRQHandler+0x920>
 8003640:	4a33      	ldr	r2, [pc, #204]	@ (8003710 <HAL_I2C_EV_IRQHandler+0x6b0>)
 8003642:	3808      	subs	r0, #8
 8003644:	40c2      	lsrs	r2, r0
 8003646:	07d7      	lsls	r7, r2, #31
 8003648:	d503      	bpl.n	8003652 <HAL_I2C_EV_IRQHandler+0x5f2>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003650:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003652:	2200      	movs	r2, #0
 8003654:	9209      	str	r2, [sp, #36]	@ 0x24
 8003656:	695a      	ldr	r2, [r3, #20]
 8003658:	9209      	str	r2, [sp, #36]	@ 0x24
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	9309      	str	r3, [sp, #36]	@ 0x24
 800365e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003660:	e767      	b.n	8003532 <HAL_I2C_EV_IRQHandler+0x4d2>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003668:	605a      	str	r2, [r3, #4]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	700b      	strb	r3, [r1, #0]
    hi2c->pBuffPtr++;
 800366e:	e5fe      	b.n	800326e <HAL_I2C_EV_IRQHandler+0x20e>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003670:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003672:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8003676:	2a21      	cmp	r2, #33	@ 0x21
 8003678:	f47f ad22 	bne.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
    if (hi2c->XferCount != 0U)
 800367c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 800367e:	b292      	uxth	r2, r2
 8003680:	2a00      	cmp	r2, #0
 8003682:	f47f aea0 	bne.w	80033c6 <HAL_I2C_EV_IRQHandler+0x366>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003686:	2908      	cmp	r1, #8
 8003688:	f000 80d8 	beq.w	800383c <HAL_I2C_EV_IRQHandler+0x7dc>
 800368c:	2920      	cmp	r1, #32
 800368e:	f000 80d5 	beq.w	800383c <HAL_I2C_EV_IRQHandler+0x7dc>
 8003692:	f511 3f80 	cmn.w	r1, #65536	@ 0x10000
 8003696:	f000 80d1 	beq.w	800383c <HAL_I2C_EV_IRQHandler+0x7dc>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800369a:	6859      	ldr	r1, [r3, #4]
 800369c:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 80036a0:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036a2:	2011      	movs	r0, #17
        hi2c->State = HAL_I2C_STATE_READY;
 80036a4:	2320      	movs	r3, #32
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80036a6:	6320      	str	r0, [r4, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a8:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036ac:	4620      	mov	r0, r4
        hi2c->State = HAL_I2C_STATE_READY;
 80036ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80036b2:	f7ff fb2d 	bl	8002d10 <HAL_I2C_MasterTxCpltCallback>
 80036b6:	e503      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b8:	9101      	str	r1, [sp, #4]
 80036ba:	695a      	ldr	r2, [r3, #20]
 80036bc:	9201      	str	r2, [sp, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	9b01      	ldr	r3, [sp, #4]
 80036c4:	e4fc      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80036c6:	2a21      	cmp	r2, #33	@ 0x21
 80036c8:	f47f ad63 	bne.w	8003192 <HAL_I2C_EV_IRQHandler+0x132>
 80036cc:	e565      	b.n	800319a <HAL_I2C_EV_IRQHandler+0x13a>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036ce:	9202      	str	r2, [sp, #8]
 80036d0:	695a      	ldr	r2, [r3, #20]
 80036d2:	9202      	str	r2, [sp, #8]
 80036d4:	699a      	ldr	r2, [r3, #24]
 80036d6:	9202      	str	r2, [sp, #8]
 80036d8:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036e0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80036e2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80036e4:	3301      	adds	r3, #1
 80036e6:	6523      	str	r3, [r4, #80]	@ 0x50
 80036e8:	e4ea      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036ea:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80036ec:	2804      	cmp	r0, #4
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80036ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036f2:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80036f4:	f43f adb9 	beq.w	800326a <HAL_I2C_EV_IRQHandler+0x20a>
 80036f8:	2802      	cmp	r0, #2
 80036fa:	f43f adb6 	beq.w	800326a <HAL_I2C_EV_IRQHandler+0x20a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	e5b0      	b.n	800326a <HAL_I2C_EV_IRQHandler+0x20a>
 8003708:	08002e01 	.word	0x08002e01
 800370c:	ffff0000 	.word	0xffff0000
 8003710:	01000101 	.word	0x01000101
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003714:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 8003718:	f000 811b 	beq.w	8003952 <HAL_I2C_EV_IRQHandler+0x8f2>
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800371c:	2808      	cmp	r0, #8
 800371e:	f000 80f4 	beq.w	800390a <HAL_I2C_EV_IRQHandler+0x8aa>
 8003722:	2820      	cmp	r0, #32
 8003724:	f000 80f1 	beq.w	800390a <HAL_I2C_EV_IRQHandler+0x8aa>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8003728:	2e12      	cmp	r6, #18
 800372a:	f000 814c 	beq.w	80039c6 <HAL_I2C_EV_IRQHandler+0x966>
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800372e:	2810      	cmp	r0, #16
 8003730:	f200 814b 	bhi.w	80039ca <HAL_I2C_EV_IRQHandler+0x96a>
 8003734:	4a9a      	ldr	r2, [pc, #616]	@ (80039a0 <HAL_I2C_EV_IRQHandler+0x940>)
 8003736:	4102      	asrs	r2, r0
 8003738:	07d2      	lsls	r2, r2, #31
 800373a:	f100 8146 	bmi.w	80039ca <HAL_I2C_EV_IRQHandler+0x96a>
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003744:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003746:	2200      	movs	r2, #0
 8003748:	9206      	str	r2, [sp, #24]
 800374a:	695a      	ldr	r2, [r3, #20]
 800374c:	9206      	str	r2, [sp, #24]
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	9306      	str	r3, [sp, #24]
 8003752:	9b06      	ldr	r3, [sp, #24]
 8003754:	e6ed      	b.n	8003532 <HAL_I2C_EV_IRQHandler+0x4d2>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003756:	1e42      	subs	r2, r0, #1
 8003758:	2a0f      	cmp	r2, #15
 800375a:	d809      	bhi.n	8003770 <HAL_I2C_EV_IRQHandler+0x710>
 800375c:	e8df f002 	tbb	[pc, r2]
 8003760:	3c083c41 	.word	0x3c083c41
 8003764:	08080808 	.word	0x08080808
 8003768:	08080808 	.word	0x08080808
 800376c:	41080808 	.word	0x41080808
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003776:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 800377c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    hi2c->pBuffPtr++;
 800377e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8003780:	3b01      	subs	r3, #1
 8003782:	b29b      	uxth	r3, r3
 8003784:	8563      	strh	r3, [r4, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003786:	6823      	ldr	r3, [r4, #0]
    hi2c->pBuffPtr++;
 8003788:	1c51      	adds	r1, r2, #1
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378a:	691b      	ldr	r3, [r3, #16]
    hi2c->pBuffPtr++;
 800378c:	6261      	str	r1, [r4, #36]	@ 0x24
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378e:	7053      	strb	r3, [r2, #1]
    hi2c->XferCount--;
 8003790:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003792:	6821      	ldr	r1, [r4, #0]
    hi2c->pBuffPtr++;
 8003794:	6a62      	ldr	r2, [r4, #36]	@ 0x24
    hi2c->XferCount--;
 8003796:	3b01      	subs	r3, #1
 8003798:	b29b      	uxth	r3, r3
 800379a:	8563      	strh	r3, [r4, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800379c:	684b      	ldr	r3, [r1, #4]
    hi2c->pBuffPtr++;
 800379e:	3201      	adds	r2, #1
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80037a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    hi2c->pBuffPtr++;
 80037a4:	6262      	str	r2, [r4, #36]	@ 0x24
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80037a6:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80037a8:	2320      	movs	r3, #32
 80037aa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037ae:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80037b2:	2b40      	cmp	r3, #64	@ 0x40
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b4:	f04f 0300 	mov.w	r3, #0
 80037b8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80037bc:	f000 80e9 	beq.w	8003992 <HAL_I2C_EV_IRQHandler+0x932>
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80037c0:	2808      	cmp	r0, #8
 80037c2:	f000 80da 	beq.w	800397a <HAL_I2C_EV_IRQHandler+0x91a>
 80037c6:	2820      	cmp	r0, #32
 80037c8:	f000 80d7 	beq.w	800397a <HAL_I2C_EV_IRQHandler+0x91a>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80037cc:	2312      	movs	r3, #18
 80037ce:	6323      	str	r3, [r4, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80037d0:	4620      	mov	r0, r4
 80037d2:	f7ff fa9f 	bl	8002d14 <HAL_I2C_MasterRxCpltCallback>
 80037d6:	e473      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	e7ca      	b.n	8003778 <HAL_I2C_EV_IRQHandler+0x718>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	e7c5      	b.n	8003778 <HAL_I2C_EV_IRQHandler+0x718>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037f2:	605a      	str	r2, [r3, #4]
 80037f4:	e464      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80037f6:	2810      	cmp	r0, #16
 80037f8:	f200 8097 	bhi.w	800392a <HAL_I2C_EV_IRQHandler+0x8ca>
 80037fc:	4a69      	ldr	r2, [pc, #420]	@ (80039a4 <HAL_I2C_EV_IRQHandler+0x944>)
 80037fe:	40c2      	lsrs	r2, r0
 8003800:	07d7      	lsls	r7, r2, #31
 8003802:	f140 8092 	bpl.w	800392a <HAL_I2C_EV_IRQHandler+0x8ca>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800380c:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	0515      	lsls	r5, r2, #20
 8003812:	d50b      	bpl.n	800382c <HAL_I2C_EV_IRQHandler+0x7cc>
 8003814:	2807      	cmp	r0, #7
 8003816:	f240 80dd 	bls.w	80039d4 <HAL_I2C_EV_IRQHandler+0x974>
 800381a:	4a63      	ldr	r2, [pc, #396]	@ (80039a8 <HAL_I2C_EV_IRQHandler+0x948>)
 800381c:	3808      	subs	r0, #8
 800381e:	40c2      	lsrs	r2, r0
 8003820:	07d1      	lsls	r1, r2, #31
 8003822:	d503      	bpl.n	800382c <HAL_I2C_EV_IRQHandler+0x7cc>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800382a:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800382c:	2200      	movs	r2, #0
 800382e:	9208      	str	r2, [sp, #32]
 8003830:	695a      	ldr	r2, [r3, #20]
 8003832:	9208      	str	r2, [sp, #32]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	9308      	str	r3, [sp, #32]
 8003838:	9b08      	ldr	r3, [sp, #32]
 800383a:	e67a      	b.n	8003532 <HAL_I2C_EV_IRQHandler+0x4d2>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800383c:	6859      	ldr	r1, [r3, #4]
 800383e:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8003842:	6059      	str	r1, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003844:	6819      	ldr	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003846:	2200      	movs	r2, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8003848:	2020      	movs	r0, #32
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384a:	f441 7100 	orr.w	r1, r1, #512	@ 0x200
 800384e:	6019      	str	r1, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003850:	6322      	str	r2, [r4, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003852:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003856:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800385a:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800385e:	2b40      	cmp	r3, #64	@ 0x40
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003860:	4620      	mov	r0, r4
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003862:	f47f af26 	bne.w	80036b2 <HAL_I2C_EV_IRQHandler+0x652>
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003866:	f7ff fa5f 	bl	8002d28 <HAL_I2C_MemTxCpltCallback>
 800386a:	e429      	b.n	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800386c:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 800386e:	2d02      	cmp	r5, #2
 8003870:	d0bc      	beq.n	80037ec <HAL_I2C_EV_IRQHandler+0x78c>
 8003872:	2a01      	cmp	r2, #1
 8003874:	d8ba      	bhi.n	80037ec <HAL_I2C_EV_IRQHandler+0x78c>
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003876:	4a4d      	ldr	r2, [pc, #308]	@ (80039ac <HAL_I2C_EV_IRQHandler+0x94c>)
  __IO uint32_t count = 0U;
 8003878:	910b      	str	r1, [sp, #44]	@ 0x2c
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800387a:	6812      	ldr	r2, [r2, #0]
 800387c:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8003880:	fbb2 f2f1 	udiv	r2, r2, r1
 8003884:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003888:	920b      	str	r2, [sp, #44]	@ 0x2c
 800388a:	e004      	b.n	8003896 <HAL_I2C_EV_IRQHandler+0x836>
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	f412 7200 	ands.w	r2, r2, #512	@ 0x200
 8003892:	f000 80a3 	beq.w	80039dc <HAL_I2C_EV_IRQHandler+0x97c>
    count--;
 8003896:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8003898:	3a01      	subs	r2, #1
 800389a:	920b      	str	r2, [sp, #44]	@ 0x2c
    if (count == 0U)
 800389c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800389e:	2900      	cmp	r1, #0
 80038a0:	d1f4      	bne.n	800388c <HAL_I2C_EV_IRQHandler+0x82c>
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038a2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a4:	6a60      	ldr	r0, [r4, #36]	@ 0x24
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038a6:	f042 0220 	orr.w	r2, r2, #32
 80038aa:	6422      	str	r2, [r4, #64]	@ 0x40
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038b2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	7003      	strb	r3, [r0, #0]
        hi2c->XferCount--;
 80038b8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->pBuffPtr++;
 80038ba:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 80038bc:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 80038be:	3201      	adds	r2, #1
        hi2c->XferCount--;
 80038c0:	b29b      	uxth	r3, r3
        hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	2020      	movs	r0, #32
        hi2c->XferCount--;
 80038c4:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->pBuffPtr++;
 80038c6:	6262      	str	r2, [r4, #36]	@ 0x24
        hi2c->State = HAL_I2C_STATE_READY;
 80038c8:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
        HAL_I2C_ErrorCallback(hi2c);
 80038cc:	4620      	mov	r0, r4
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80038ce:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80038d2:	f7ff fa91 	bl	8002df8 <HAL_I2C_ErrorCallback>
 80038d6:	f7ff bbf3 	b.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80038da:	2d08      	cmp	r5, #8
 80038dc:	d0ae      	beq.n	800383c <HAL_I2C_EV_IRQHandler+0x7dc>
 80038de:	2d20      	cmp	r5, #32
 80038e0:	d0ac      	beq.n	800383c <HAL_I2C_EV_IRQHandler+0x7dc>
 80038e2:	f515 3f80 	cmn.w	r5, #65536	@ 0x10000
 80038e6:	d0a9      	beq.n	800383c <HAL_I2C_EV_IRQHandler+0x7dc>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80038ee:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038f0:	2011      	movs	r0, #17
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f2:	2100      	movs	r1, #0
      hi2c->State = HAL_I2C_STATE_READY;
 80038f4:	2320      	movs	r3, #32
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80038f6:	6320      	str	r0, [r4, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f8:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80038fc:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_READY;
 80038fe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003902:	f7ff fa05 	bl	8002d10 <HAL_I2C_MasterTxCpltCallback>
 8003906:	f7ff bbdb 	b.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390a:	681a      	ldr	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800390c:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800390e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003912:	601a      	str	r2, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003914:	9107      	str	r1, [sp, #28]
 8003916:	695a      	ldr	r2, [r3, #20]
 8003918:	9207      	str	r2, [sp, #28]
 800391a:	699a      	ldr	r2, [r3, #24]
 800391c:	9207      	str	r2, [sp, #28]
 800391e:	9a07      	ldr	r2, [sp, #28]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	e603      	b.n	8003532 <HAL_I2C_EV_IRQHandler+0x4d2>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003930:	601a      	str	r2, [r3, #0]
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003938:	601a      	str	r2, [r3, #0]
        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	0516      	lsls	r6, r2, #20
 800393e:	f57f af75 	bpl.w	800382c <HAL_I2C_EV_IRQHandler+0x7cc>
 8003942:	2820      	cmp	r0, #32
 8003944:	f67f af66 	bls.w	8003814 <HAL_I2C_EV_IRQHandler+0x7b4>
 8003948:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 800394c:	f47f af6e 	bne.w	800382c <HAL_I2C_EV_IRQHandler+0x7cc>
 8003950:	e768      	b.n	8003824 <HAL_I2C_EV_IRQHandler+0x7c4>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003958:	601a      	str	r2, [r3, #0]
          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	f412 6200 	ands.w	r2, r2, #2048	@ 0x800
 8003960:	d026      	beq.n	80039b0 <HAL_I2C_EV_IRQHandler+0x950>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003962:	681a      	ldr	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003964:	2100      	movs	r1, #0
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003966:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800396a:	601a      	str	r2, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396c:	9104      	str	r1, [sp, #16]
 800396e:	695a      	ldr	r2, [r3, #20]
 8003970:	9204      	str	r2, [sp, #16]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	9304      	str	r3, [sp, #16]
 8003976:	9b04      	ldr	r3, [sp, #16]
 8003978:	e5db      	b.n	8003532 <HAL_I2C_EV_IRQHandler+0x4d2>
        hi2c->PreviousState = I2C_STATE_NONE;
 800397a:	2300      	movs	r3, #0
 800397c:	6323      	str	r3, [r4, #48]	@ 0x30
 800397e:	e727      	b.n	80037d0 <HAL_I2C_EV_IRQHandler+0x770>
 8003980:	2801      	cmp	r0, #1
 8003982:	f47f ae66 	bne.w	8003652 <HAL_I2C_EV_IRQHandler+0x5f2>
 8003986:	e660      	b.n	800364a <HAL_I2C_EV_IRQHandler+0x5ea>
 8003988:	f510 3f80 	cmn.w	r0, #65536	@ 0x10000
 800398c:	f47f ae61 	bne.w	8003652 <HAL_I2C_EV_IRQHandler+0x5f2>
 8003990:	e65b      	b.n	800364a <HAL_I2C_EV_IRQHandler+0x5ea>
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003992:	4620      	mov	r0, r4
      hi2c->PreviousState = I2C_STATE_NONE;
 8003994:	6323      	str	r3, [r4, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003996:	f7ff fa2d 	bl	8002df4 <HAL_I2C_MemRxCpltCallback>
 800399a:	f7ff bb91 	b.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>
 800399e:	bf00      	nop
 80039a0:	fffeffeb 	.word	0xfffeffeb
 80039a4:	00010014 	.word	0x00010014
 80039a8:	01000101 	.word	0x01000101
 80039ac:	20000000 	.word	0x20000000
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b0:	9205      	str	r2, [sp, #20]
 80039b2:	695a      	ldr	r2, [r3, #20]
 80039b4:	9205      	str	r2, [sp, #20]
 80039b6:	699a      	ldr	r2, [r3, #24]
 80039b8:	9205      	str	r2, [sp, #20]
 80039ba:	9a05      	ldr	r2, [sp, #20]
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	e5b5      	b.n	8003532 <HAL_I2C_EV_IRQHandler+0x4d2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80039c6:	2801      	cmp	r0, #1
 80039c8:	d19f      	bne.n	800390a <HAL_I2C_EV_IRQHandler+0x8aa>
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	e6b8      	b.n	8003746 <HAL_I2C_EV_IRQHandler+0x6e6>
 80039d4:	2801      	cmp	r0, #1
 80039d6:	f47f af29 	bne.w	800382c <HAL_I2C_EV_IRQHandler+0x7cc>
 80039da:	e723      	b.n	8003824 <HAL_I2C_EV_IRQHandler+0x7c4>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039dc:	6819      	ldr	r1, [r3, #0]
 80039de:	f421 6180 	bic.w	r1, r1, #1024	@ 0x400
 80039e2:	6019      	str	r1, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80039e4:	6859      	ldr	r1, [r3, #4]
 80039e6:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 80039ea:	6059      	str	r1, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ec:	6919      	ldr	r1, [r3, #16]
 80039ee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80039f0:	7019      	strb	r1, [r3, #0]
        hi2c->XferCount--;
 80039f2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80039f4:	3b01      	subs	r3, #1
        hi2c->State = HAL_I2C_STATE_READY;
 80039f6:	2120      	movs	r1, #32
        hi2c->XferCount--;
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	8563      	strh	r3, [r4, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80039fc:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
        hi2c->pBuffPtr++;
 8003a00:	6a63      	ldr	r3, [r4, #36]	@ 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a02:	f894 103e 	ldrb.w	r1, [r4, #62]	@ 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a06:	f884 203e 	strb.w	r2, [r4, #62]	@ 0x3e
        hi2c->pBuffPtr++;
 8003a0a:	3301      	adds	r3, #1
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a0c:	2940      	cmp	r1, #64	@ 0x40
        hi2c->pBuffPtr++;
 8003a0e:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003a10:	f47f aed6 	bne.w	80037c0 <HAL_I2C_EV_IRQHandler+0x760>
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003a14:	4620      	mov	r0, r4
          hi2c->PreviousState = I2C_STATE_NONE;
 8003a16:	6322      	str	r2, [r4, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003a18:	f7ff f9ec 	bl	8002df4 <HAL_I2C_MemRxCpltCallback>
 8003a1c:	f7ff bb50 	b.w	80030c0 <HAL_I2C_EV_IRQHandler+0x60>

08003a20 <HAL_I2C_ER_IRQHandler>:
{
 8003a20:	b570      	push	{r4, r5, r6, lr}
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003a22:	6802      	ldr	r2, [r0, #0]
 8003a24:	6953      	ldr	r3, [r2, #20]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003a26:	6854      	ldr	r4, [r2, #4]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a28:	f890 103e 	ldrb.w	r1, [r0, #62]	@ 0x3e
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a2c:	05dd      	lsls	r5, r3, #23
{
 8003a2e:	b082      	sub	sp, #8
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a30:	b2c9      	uxtb	r1, r1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a32:	d50a      	bpl.n	8003a4a <HAL_I2C_ER_IRQHandler+0x2a>
 8003a34:	05e4      	lsls	r4, r4, #23
 8003a36:	d51b      	bpl.n	8003a70 <HAL_I2C_ER_IRQHandler+0x50>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a38:	f46f 7480 	mvn.w	r4, #256	@ 0x100
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a3c:	059e      	lsls	r6, r3, #22
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a3e:	6154      	str	r4, [r2, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a40:	d544      	bpl.n	8003acc <HAL_I2C_ER_IRQHandler+0xac>
 8003a42:	f04f 0c0b 	mov.w	ip, #11
 8003a46:	2503      	movs	r5, #3
 8003a48:	e007      	b.n	8003a5a <HAL_I2C_ER_IRQHandler+0x3a>
 8003a4a:	f413 7500 	ands.w	r5, r3, #512	@ 0x200
 8003a4e:	d011      	beq.n	8003a74 <HAL_I2C_ER_IRQHandler+0x54>
 8003a50:	05e5      	lsls	r5, r4, #23
 8003a52:	d50d      	bpl.n	8003a70 <HAL_I2C_ER_IRQHandler+0x50>
 8003a54:	f04f 0c0a 	mov.w	ip, #10
 8003a58:	2502      	movs	r5, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a5a:	f46f 7400 	mvn.w	r4, #512	@ 0x200
 8003a5e:	6154      	str	r4, [r2, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a60:	055c      	lsls	r4, r3, #21
 8003a62:	d40c      	bmi.n	8003a7e <HAL_I2C_ER_IRQHandler+0x5e>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a64:	0519      	lsls	r1, r3, #20
 8003a66:	d425      	bmi.n	8003ab4 <HAL_I2C_ER_IRQHandler+0x94>
 8003a68:	46ac      	mov	ip, r5
 8003a6a:	e026      	b.n	8003aba <HAL_I2C_ER_IRQHandler+0x9a>
  if (error != HAL_I2C_ERROR_NONE)
 8003a6c:	2d00      	cmp	r5, #0
 8003a6e:	d1fb      	bne.n	8003a68 <HAL_I2C_ER_IRQHandler+0x48>
}
 8003a70:	b002      	add	sp, #8
 8003a72:	bd70      	pop	{r4, r5, r6, pc}
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a74:	f413 6c80 	ands.w	ip, r3, #1024	@ 0x400
 8003a78:	d02f      	beq.n	8003ada <HAL_I2C_ER_IRQHandler+0xba>
 8003a7a:	05e4      	lsls	r4, r4, #23
 8003a7c:	d5f8      	bpl.n	8003a70 <HAL_I2C_ER_IRQHandler+0x50>
    tmp2 = hi2c->XferCount;
 8003a7e:	f403 6400 	and.w	r4, r3, #2048	@ 0x800
 8003a82:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
    tmp3 = hi2c->State;
 8003a84:	f890 c03d 	ldrb.w	ip, [r0, #61]	@ 0x3d
    tmp4 = hi2c->PreviousState;
 8003a88:	6b06      	ldr	r6, [r0, #48]	@ 0x30
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003a8a:	2920      	cmp	r1, #32
    tmp2 = hi2c->XferCount;
 8003a8c:	b29b      	uxth	r3, r3
    tmp3 = hi2c->State;
 8003a8e:	fa5f fc8c 	uxtb.w	ip, ip
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003a92:	d029      	beq.n	8003ae8 <HAL_I2C_ER_IRQHandler+0xc8>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a94:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a98:	2910      	cmp	r1, #16
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a9a:	6153      	str	r3, [r2, #20]
      error |= HAL_I2C_ERROR_AF;
 8003a9c:	f045 0c04 	orr.w	ip, r5, #4
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003aa0:	d001      	beq.n	8003aa6 <HAL_I2C_ER_IRQHandler+0x86>
 8003aa2:	2940      	cmp	r1, #64	@ 0x40
 8003aa4:	d126      	bne.n	8003af4 <HAL_I2C_ER_IRQHandler+0xd4>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa6:	6813      	ldr	r3, [r2, #0]
 8003aa8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003aac:	6013      	str	r3, [r2, #0]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003aae:	b124      	cbz	r4, 8003aba <HAL_I2C_ER_IRQHandler+0x9a>
    error |= HAL_I2C_ERROR_OVR;
 8003ab0:	f045 0c0c 	orr.w	ip, r5, #12
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ab4:	f46f 6300 	mvn.w	r3, #2048	@ 0x800
 8003ab8:	6153      	str	r3, [r2, #20]
    hi2c->ErrorCode |= error;
 8003aba:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003abc:	ea43 030c 	orr.w	r3, r3, ip
 8003ac0:	6403      	str	r3, [r0, #64]	@ 0x40
}
 8003ac2:	b002      	add	sp, #8
 8003ac4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    I2C_ITError(hi2c);
 8003ac8:	f7ff ba14 	b.w	8002ef4 <I2C_ITError>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003acc:	055e      	lsls	r6, r3, #21
 8003ace:	d414      	bmi.n	8003afa <HAL_I2C_ER_IRQHandler+0xda>
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ad0:	051d      	lsls	r5, r3, #20
    error |= HAL_I2C_ERROR_BERR;
 8003ad2:	f04f 0c01 	mov.w	ip, #1
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ad6:	d404      	bmi.n	8003ae2 <HAL_I2C_ER_IRQHandler+0xc2>
 8003ad8:	e7ef      	b.n	8003aba <HAL_I2C_ER_IRQHandler+0x9a>
 8003ada:	051b      	lsls	r3, r3, #20
 8003adc:	d5c8      	bpl.n	8003a70 <HAL_I2C_ER_IRQHandler+0x50>
 8003ade:	05e3      	lsls	r3, r4, #23
 8003ae0:	d5c6      	bpl.n	8003a70 <HAL_I2C_ER_IRQHandler+0x50>
    error |= HAL_I2C_ERROR_OVR;
 8003ae2:	f04c 0c08 	orr.w	ip, ip, #8
 8003ae6:	e7e5      	b.n	8003ab4 <HAL_I2C_ER_IRQHandler+0x94>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003ae8:	b14b      	cbz	r3, 8003afe <HAL_I2C_ER_IRQHandler+0xde>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aea:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8003aee:	6153      	str	r3, [r2, #20]
      error |= HAL_I2C_ERROR_AF;
 8003af0:	f045 0c04 	orr.w	ip, r5, #4
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003af4:	2c00      	cmp	r4, #0
 8003af6:	d0e0      	beq.n	8003aba <HAL_I2C_ER_IRQHandler+0x9a>
 8003af8:	e7f3      	b.n	8003ae2 <HAL_I2C_ER_IRQHandler+0xc2>
    error |= HAL_I2C_ERROR_BERR;
 8003afa:	2501      	movs	r5, #1
 8003afc:	e7bf      	b.n	8003a7e <HAL_I2C_ER_IRQHandler+0x5e>
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003afe:	f00c 03f7 	and.w	r3, ip, #247	@ 0xf7
 8003b02:	2b21      	cmp	r3, #33	@ 0x21
 8003b04:	d00c      	beq.n	8003b20 <HAL_I2C_ER_IRQHandler+0x100>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003b06:	f1bc 0f28 	cmp.w	ip, #40	@ 0x28
 8003b0a:	d1ee      	bne.n	8003aea <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003b0c:	2e21      	cmp	r6, #33	@ 0x21
 8003b0e:	d007      	beq.n	8003b20 <HAL_I2C_ER_IRQHandler+0x100>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b10:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8003b14:	6153      	str	r3, [r2, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b16:	2c00      	cmp	r4, #0
 8003b18:	d1ca      	bne.n	8003ab0 <HAL_I2C_ER_IRQHandler+0x90>
      error |= HAL_I2C_ERROR_AF;
 8003b1a:	f045 0c04 	orr.w	ip, r5, #4
 8003b1e:	e7cc      	b.n	8003aba <HAL_I2C_ER_IRQHandler+0x9a>
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b20:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b24:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003b26:	2908      	cmp	r1, #8
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b28:	b2db      	uxtb	r3, r3
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003b2a:	d00c      	beq.n	8003b46 <HAL_I2C_ER_IRQHandler+0x126>
 8003b2c:	2920      	cmp	r1, #32
 8003b2e:	d00a      	beq.n	8003b46 <HAL_I2C_ER_IRQHandler+0x126>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003b30:	2b21      	cmp	r3, #33	@ 0x21
 8003b32:	d023      	beq.n	8003b7c <HAL_I2C_ER_IRQHandler+0x15c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b34:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8003b38:	6153      	str	r3, [r2, #20]
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003b3a:	2c00      	cmp	r4, #0
 8003b3c:	d096      	beq.n	8003a6c <HAL_I2C_ER_IRQHandler+0x4c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b3e:	6802      	ldr	r2, [r0, #0]
    error |= HAL_I2C_ERROR_OVR;
 8003b40:	f045 0c08 	orr.w	ip, r5, #8
 8003b44:	e7b6      	b.n	8003ab4 <HAL_I2C_ER_IRQHandler+0x94>
  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8003b46:	2b28      	cmp	r3, #40	@ 0x28
 8003b48:	d1f2      	bne.n	8003b30 <HAL_I2C_ER_IRQHandler+0x110>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003bb8 <HAL_I2C_ER_IRQHandler+0x198>)
 8003b4c:	62c3      	str	r3, [r0, #44]	@ 0x2c
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b4e:	6853      	ldr	r3, [r2, #4]
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b50:	9001      	str	r0, [sp, #4]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b52:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003b56:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b58:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8003b5c:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5e:	6813      	ldr	r3, [r2, #0]
 8003b60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b64:	6013      	str	r3, [r2, #0]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b66:	2300      	movs	r3, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b68:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b6a:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b6c:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b70:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b74:	f7ff f8d6 	bl	8002d24 <HAL_I2C_ListenCpltCallback>
 8003b78:	9801      	ldr	r0, [sp, #4]
 8003b7a:	e7de      	b.n	8003b3a <HAL_I2C_ER_IRQHandler+0x11a>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b7c:	490e      	ldr	r1, [pc, #56]	@ (8003bb8 <HAL_I2C_ER_IRQHandler+0x198>)
 8003b7e:	62c1      	str	r1, [r0, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b80:	6303      	str	r3, [r0, #48]	@ 0x30
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b82:	2100      	movs	r1, #0
    hi2c->State         = HAL_I2C_STATE_READY;
 8003b84:	2320      	movs	r3, #32
 8003b86:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b8a:	f880 103e 	strb.w	r1, [r0, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b8e:	6853      	ldr	r3, [r2, #4]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b90:	9001      	str	r0, [sp, #4]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b92:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003b96:	6053      	str	r3, [r2, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b98:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8003b9c:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9e:	6813      	ldr	r3, [r2, #0]
 8003ba0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ba4:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003ba6:	6953      	ldr	r3, [r2, #20]
 8003ba8:	061e      	lsls	r6, r3, #24
    hi2c->Instance->DR = 0x00U;
 8003baa:	bf48      	it	mi
 8003bac:	6111      	strmi	r1, [r2, #16]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003bae:	f7ff f8b3 	bl	8002d18 <HAL_I2C_SlaveTxCpltCallback>
 8003bb2:	9801      	ldr	r0, [sp, #4]
 8003bb4:	e7c1      	b.n	8003b3a <HAL_I2C_ER_IRQHandler+0x11a>
 8003bb6:	bf00      	nop
 8003bb8:	ffff0000 	.word	0xffff0000

08003bbc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	f000 81d8 	beq.w	8003f72 <HAL_RCC_OscConfig+0x3b6>
{
 8003bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bc6:	6803      	ldr	r3, [r0, #0]
 8003bc8:	07dd      	lsls	r5, r3, #31
{
 8003bca:	b082      	sub	sp, #8
 8003bcc:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bce:	d52f      	bpl.n	8003c30 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003bd0:	499d      	ldr	r1, [pc, #628]	@ (8003e48 <HAL_RCC_OscConfig+0x28c>)
 8003bd2:	688a      	ldr	r2, [r1, #8]
 8003bd4:	f002 020c 	and.w	r2, r2, #12
 8003bd8:	2a04      	cmp	r2, #4
 8003bda:	f000 80ec 	beq.w	8003db6 <HAL_RCC_OscConfig+0x1fa>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bde:	688a      	ldr	r2, [r1, #8]
 8003be0:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003be4:	2a08      	cmp	r2, #8
 8003be6:	f000 80e2 	beq.w	8003dae <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bea:	6863      	ldr	r3, [r4, #4]
 8003bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bf0:	f000 80eb 	beq.w	8003dca <HAL_RCC_OscConfig+0x20e>
 8003bf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bf8:	f000 8173 	beq.w	8003ee2 <HAL_RCC_OscConfig+0x326>
 8003bfc:	4d92      	ldr	r5, [pc, #584]	@ (8003e48 <HAL_RCC_OscConfig+0x28c>)
 8003bfe:	682a      	ldr	r2, [r5, #0]
 8003c00:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003c04:	602a      	str	r2, [r5, #0]
 8003c06:	682a      	ldr	r2, [r5, #0]
 8003c08:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003c0c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f040 80e0 	bne.w	8003dd4 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c14:	f7fe fba8 	bl	8002368 <HAL_GetTick>
 8003c18:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c1a:	e005      	b.n	8003c28 <HAL_RCC_OscConfig+0x6c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c1c:	f7fe fba4 	bl	8002368 <HAL_GetTick>
 8003c20:	1b80      	subs	r0, r0, r6
 8003c22:	2864      	cmp	r0, #100	@ 0x64
 8003c24:	f200 8100 	bhi.w	8003e28 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c28:	682b      	ldr	r3, [r5, #0]
 8003c2a:	039f      	lsls	r7, r3, #14
 8003c2c:	d4f6      	bmi.n	8003c1c <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c2e:	6823      	ldr	r3, [r4, #0]
 8003c30:	079d      	lsls	r5, r3, #30
 8003c32:	d528      	bpl.n	8003c86 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c34:	4a84      	ldr	r2, [pc, #528]	@ (8003e48 <HAL_RCC_OscConfig+0x28c>)
 8003c36:	6891      	ldr	r1, [r2, #8]
 8003c38:	f011 0f0c 	tst.w	r1, #12
 8003c3c:	f000 809b 	beq.w	8003d76 <HAL_RCC_OscConfig+0x1ba>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c40:	6891      	ldr	r1, [r2, #8]
 8003c42:	f001 010c 	and.w	r1, r1, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c46:	2908      	cmp	r1, #8
 8003c48:	f000 8091 	beq.w	8003d6e <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c4c:	68e3      	ldr	r3, [r4, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	f000 810c 	beq.w	8003e6c <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c54:	4b7d      	ldr	r3, [pc, #500]	@ (8003e4c <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c56:	4e7c      	ldr	r6, [pc, #496]	@ (8003e48 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8003c58:	2201      	movs	r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003c5c:	f7fe fb84 	bl	8002368 <HAL_GetTick>
 8003c60:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c62:	e005      	b.n	8003c70 <HAL_RCC_OscConfig+0xb4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c64:	f7fe fb80 	bl	8002368 <HAL_GetTick>
 8003c68:	1b40      	subs	r0, r0, r5
 8003c6a:	2802      	cmp	r0, #2
 8003c6c:	f200 80dc 	bhi.w	8003e28 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c70:	6833      	ldr	r3, [r6, #0]
 8003c72:	079f      	lsls	r7, r3, #30
 8003c74:	d5f6      	bpl.n	8003c64 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c76:	6833      	ldr	r3, [r6, #0]
 8003c78:	6922      	ldr	r2, [r4, #16]
 8003c7a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003c7e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003c82:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c84:	6823      	ldr	r3, [r4, #0]
 8003c86:	071a      	lsls	r2, r3, #28
 8003c88:	d45c      	bmi.n	8003d44 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c8a:	075d      	lsls	r5, r3, #29
 8003c8c:	d53a      	bpl.n	8003d04 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c8e:	4a6e      	ldr	r2, [pc, #440]	@ (8003e48 <HAL_RCC_OscConfig+0x28c>)
 8003c90:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003c92:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8003c96:	f040 8088 	bne.w	8003daa <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c9a:	9301      	str	r3, [sp, #4]
 8003c9c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003c9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ca2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ca4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003caa:	9301      	str	r3, [sp, #4]
 8003cac:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003cae:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb0:	4e67      	ldr	r6, [pc, #412]	@ (8003e50 <HAL_RCC_OscConfig+0x294>)
 8003cb2:	6833      	ldr	r3, [r6, #0]
 8003cb4:	05d8      	lsls	r0, r3, #23
 8003cb6:	f140 80a7 	bpl.w	8003e08 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cba:	68a3      	ldr	r3, [r4, #8]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	f000 80b7 	beq.w	8003e30 <HAL_RCC_OscConfig+0x274>
 8003cc2:	2b05      	cmp	r3, #5
 8003cc4:	f000 811d 	beq.w	8003f02 <HAL_RCC_OscConfig+0x346>
 8003cc8:	4e5f      	ldr	r6, [pc, #380]	@ (8003e48 <HAL_RCC_OscConfig+0x28c>)
 8003cca:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8003ccc:	f022 0201 	bic.w	r2, r2, #1
 8003cd0:	6732      	str	r2, [r6, #112]	@ 0x70
 8003cd2:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8003cd4:	f022 0204 	bic.w	r2, r2, #4
 8003cd8:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	f040 80ad 	bne.w	8003e3a <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce0:	f7fe fb42 	bl	8002368 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ce4:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8003ce8:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cea:	e005      	b.n	8003cf8 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cec:	f7fe fb3c 	bl	8002368 <HAL_GetTick>
 8003cf0:	1bc0      	subs	r0, r0, r7
 8003cf2:	4540      	cmp	r0, r8
 8003cf4:	f200 8098 	bhi.w	8003e28 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf8:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8003cfa:	079b      	lsls	r3, r3, #30
 8003cfc:	d4f6      	bmi.n	8003cec <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cfe:	2d00      	cmp	r5, #0
 8003d00:	f040 80f9 	bne.w	8003ef6 <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d04:	69a3      	ldr	r3, [r4, #24]
 8003d06:	b1cb      	cbz	r3, 8003d3c <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d08:	4d4f      	ldr	r5, [pc, #316]	@ (8003e48 <HAL_RCC_OscConfig+0x28c>)
 8003d0a:	68aa      	ldr	r2, [r5, #8]
 8003d0c:	f002 020c 	and.w	r2, r2, #12
 8003d10:	2a08      	cmp	r2, #8
 8003d12:	f000 80bc 	beq.w	8003e8e <HAL_RCC_OscConfig+0x2d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d16:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d18:	4b4c      	ldr	r3, [pc, #304]	@ (8003e4c <HAL_RCC_OscConfig+0x290>)
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d20:	f000 80f9 	beq.w	8003f16 <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d24:	f7fe fb20 	bl	8002368 <HAL_GetTick>
 8003d28:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d2a:	e004      	b.n	8003d36 <HAL_RCC_OscConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d2c:	f7fe fb1c 	bl	8002368 <HAL_GetTick>
 8003d30:	1b00      	subs	r0, r0, r4
 8003d32:	2802      	cmp	r0, #2
 8003d34:	d878      	bhi.n	8003e28 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d36:	682b      	ldr	r3, [r5, #0]
 8003d38:	019b      	lsls	r3, r3, #6
 8003d3a:	d4f7      	bmi.n	8003d2c <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003d3c:	2000      	movs	r0, #0
}
 8003d3e:	b002      	add	sp, #8
 8003d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d44:	6963      	ldr	r3, [r4, #20]
 8003d46:	b1fb      	cbz	r3, 8003d88 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 8003d48:	4b40      	ldr	r3, [pc, #256]	@ (8003e4c <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d4a:	4e3f      	ldr	r6, [pc, #252]	@ (8003e48 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8003d52:	f7fe fb09 	bl	8002368 <HAL_GetTick>
 8003d56:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d58:	e004      	b.n	8003d64 <HAL_RCC_OscConfig+0x1a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d5a:	f7fe fb05 	bl	8002368 <HAL_GetTick>
 8003d5e:	1b40      	subs	r0, r0, r5
 8003d60:	2802      	cmp	r0, #2
 8003d62:	d861      	bhi.n	8003e28 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d64:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8003d66:	079b      	lsls	r3, r3, #30
 8003d68:	d5f7      	bpl.n	8003d5a <HAL_RCC_OscConfig+0x19e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d6a:	6823      	ldr	r3, [r4, #0]
 8003d6c:	e78d      	b.n	8003c8a <HAL_RCC_OscConfig+0xce>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d6e:	6852      	ldr	r2, [r2, #4]
 8003d70:	0251      	lsls	r1, r2, #9
 8003d72:	f53f af6b 	bmi.w	8003c4c <HAL_RCC_OscConfig+0x90>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d76:	4a34      	ldr	r2, [pc, #208]	@ (8003e48 <HAL_RCC_OscConfig+0x28c>)
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	0792      	lsls	r2, r2, #30
 8003d7c:	d538      	bpl.n	8003df0 <HAL_RCC_OscConfig+0x234>
 8003d7e:	68e2      	ldr	r2, [r4, #12]
 8003d80:	2a01      	cmp	r2, #1
 8003d82:	d035      	beq.n	8003df0 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 8003d84:	2001      	movs	r0, #1
 8003d86:	e7da      	b.n	8003d3e <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 8003d88:	4a30      	ldr	r2, [pc, #192]	@ (8003e4c <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d8a:	4e2f      	ldr	r6, [pc, #188]	@ (8003e48 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 8003d8c:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8003d90:	f7fe faea 	bl	8002368 <HAL_GetTick>
 8003d94:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d96:	e004      	b.n	8003da2 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d98:	f7fe fae6 	bl	8002368 <HAL_GetTick>
 8003d9c:	1b40      	subs	r0, r0, r5
 8003d9e:	2802      	cmp	r0, #2
 8003da0:	d842      	bhi.n	8003e28 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da2:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8003da4:	079f      	lsls	r7, r3, #30
 8003da6:	d4f7      	bmi.n	8003d98 <HAL_RCC_OscConfig+0x1dc>
 8003da8:	e7df      	b.n	8003d6a <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 8003daa:	2500      	movs	r5, #0
 8003dac:	e780      	b.n	8003cb0 <HAL_RCC_OscConfig+0xf4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dae:	684a      	ldr	r2, [r1, #4]
 8003db0:	0251      	lsls	r1, r2, #9
 8003db2:	f57f af1a 	bpl.w	8003bea <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db6:	4a24      	ldr	r2, [pc, #144]	@ (8003e48 <HAL_RCC_OscConfig+0x28c>)
 8003db8:	6812      	ldr	r2, [r2, #0]
 8003dba:	0392      	lsls	r2, r2, #14
 8003dbc:	f57f af38 	bpl.w	8003c30 <HAL_RCC_OscConfig+0x74>
 8003dc0:	6862      	ldr	r2, [r4, #4]
 8003dc2:	2a00      	cmp	r2, #0
 8003dc4:	f47f af34 	bne.w	8003c30 <HAL_RCC_OscConfig+0x74>
 8003dc8:	e7dc      	b.n	8003d84 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dca:	4a1f      	ldr	r2, [pc, #124]	@ (8003e48 <HAL_RCC_OscConfig+0x28c>)
 8003dcc:	6813      	ldr	r3, [r2, #0]
 8003dce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003dd4:	f7fe fac8 	bl	8002368 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dd8:	4e1b      	ldr	r6, [pc, #108]	@ (8003e48 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8003dda:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ddc:	e004      	b.n	8003de8 <HAL_RCC_OscConfig+0x22c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dde:	f7fe fac3 	bl	8002368 <HAL_GetTick>
 8003de2:	1b40      	subs	r0, r0, r5
 8003de4:	2864      	cmp	r0, #100	@ 0x64
 8003de6:	d81f      	bhi.n	8003e28 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de8:	6833      	ldr	r3, [r6, #0]
 8003dea:	039b      	lsls	r3, r3, #14
 8003dec:	d5f7      	bpl.n	8003dde <HAL_RCC_OscConfig+0x222>
 8003dee:	e71e      	b.n	8003c2e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df0:	4915      	ldr	r1, [pc, #84]	@ (8003e48 <HAL_RCC_OscConfig+0x28c>)
 8003df2:	6920      	ldr	r0, [r4, #16]
 8003df4:	680a      	ldr	r2, [r1, #0]
 8003df6:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 8003dfa:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8003dfe:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e00:	071a      	lsls	r2, r3, #28
 8003e02:	f57f af42 	bpl.w	8003c8a <HAL_RCC_OscConfig+0xce>
 8003e06:	e79d      	b.n	8003d44 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e08:	6833      	ldr	r3, [r6, #0]
 8003e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e0e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003e10:	f7fe faaa 	bl	8002368 <HAL_GetTick>
 8003e14:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e16:	6833      	ldr	r3, [r6, #0]
 8003e18:	05d9      	lsls	r1, r3, #23
 8003e1a:	f53f af4e 	bmi.w	8003cba <HAL_RCC_OscConfig+0xfe>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e1e:	f7fe faa3 	bl	8002368 <HAL_GetTick>
 8003e22:	1bc0      	subs	r0, r0, r7
 8003e24:	2802      	cmp	r0, #2
 8003e26:	d9f6      	bls.n	8003e16 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 8003e28:	2003      	movs	r0, #3
}
 8003e2a:	b002      	add	sp, #8
 8003e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e30:	4a05      	ldr	r2, [pc, #20]	@ (8003e48 <HAL_RCC_OscConfig+0x28c>)
 8003e32:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8003e3a:	f7fe fa95 	bl	8002368 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3e:	4f02      	ldr	r7, [pc, #8]	@ (8003e48 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8003e40:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e42:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e46:	e00a      	b.n	8003e5e <HAL_RCC_OscConfig+0x2a2>
 8003e48:	40023800 	.word	0x40023800
 8003e4c:	42470000 	.word	0x42470000
 8003e50:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e54:	f7fe fa88 	bl	8002368 <HAL_GetTick>
 8003e58:	1b80      	subs	r0, r0, r6
 8003e5a:	4540      	cmp	r0, r8
 8003e5c:	d8e4      	bhi.n	8003e28 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e60:	079a      	lsls	r2, r3, #30
 8003e62:	d5f7      	bpl.n	8003e54 <HAL_RCC_OscConfig+0x298>
    if (pwrclkchanged == SET)
 8003e64:	2d00      	cmp	r5, #0
 8003e66:	f43f af4d 	beq.w	8003d04 <HAL_RCC_OscConfig+0x148>
 8003e6a:	e044      	b.n	8003ef6 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 8003e6c:	4a42      	ldr	r2, [pc, #264]	@ (8003f78 <HAL_RCC_OscConfig+0x3bc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e6e:	4e43      	ldr	r6, [pc, #268]	@ (8003f7c <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 8003e70:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003e72:	f7fe fa79 	bl	8002368 <HAL_GetTick>
 8003e76:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e78:	e004      	b.n	8003e84 <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e7a:	f7fe fa75 	bl	8002368 <HAL_GetTick>
 8003e7e:	1b40      	subs	r0, r0, r5
 8003e80:	2802      	cmp	r0, #2
 8003e82:	d8d1      	bhi.n	8003e28 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e84:	6833      	ldr	r3, [r6, #0]
 8003e86:	0799      	lsls	r1, r3, #30
 8003e88:	d4f7      	bmi.n	8003e7a <HAL_RCC_OscConfig+0x2be>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	e6fb      	b.n	8003c86 <HAL_RCC_OscConfig+0xca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	f43f af78 	beq.w	8003d84 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8003e94:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e96:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e98:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e9c:	4291      	cmp	r1, r2
 8003e9e:	f47f af71 	bne.w	8003d84 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea2:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ea4:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ea8:	4291      	cmp	r1, r2
 8003eaa:	f47f af6b 	bne.w	8003d84 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003eae:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003eb0:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8003eb4:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003eb6:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003eba:	f47f af63 	bne.w	8003d84 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ebe:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8003ec0:	0852      	lsrs	r2, r2, #1
 8003ec2:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8003ec6:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ec8:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003ecc:	f47f af5a 	bne.w	8003d84 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ed0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003ed2:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ed6:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8003eda:	bf14      	ite	ne
 8003edc:	2001      	movne	r0, #1
 8003ede:	2000      	moveq	r0, #0
 8003ee0:	e72d      	b.n	8003d3e <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee2:	4b26      	ldr	r3, [pc, #152]	@ (8003f7c <HAL_RCC_OscConfig+0x3c0>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003ef2:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ef4:	e76e      	b.n	8003dd4 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef6:	4a21      	ldr	r2, [pc, #132]	@ (8003f7c <HAL_RCC_OscConfig+0x3c0>)
 8003ef8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003efa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003efe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f00:	e700      	b.n	8003d04 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f02:	4b1e      	ldr	r3, [pc, #120]	@ (8003f7c <HAL_RCC_OscConfig+0x3c0>)
 8003f04:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f06:	f042 0204 	orr.w	r2, r2, #4
 8003f0a:	671a      	str	r2, [r3, #112]	@ 0x70
 8003f0c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f0e:	f042 0201 	orr.w	r2, r2, #1
 8003f12:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f14:	e791      	b.n	8003e3a <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 8003f16:	f7fe fa27 	bl	8002368 <HAL_GetTick>
 8003f1a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f1c:	e005      	b.n	8003f2a <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1e:	f7fe fa23 	bl	8002368 <HAL_GetTick>
 8003f22:	1b80      	subs	r0, r0, r6
 8003f24:	2802      	cmp	r0, #2
 8003f26:	f63f af7f 	bhi.w	8003e28 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f2a:	682b      	ldr	r3, [r5, #0]
 8003f2c:	0199      	lsls	r1, r3, #6
 8003f2e:	d4f6      	bmi.n	8003f1e <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f30:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8003f34:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003f36:	430b      	orrs	r3, r1
 8003f38:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003f3c:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 8003f40:	0852      	lsrs	r2, r2, #1
        __HAL_RCC_PLL_ENABLE();
 8003f42:	490d      	ldr	r1, [pc, #52]	@ (8003f78 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f44:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8003f48:	3a01      	subs	r2, #1
 8003f4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8003f4e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f50:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003f52:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8003f54:	f7fe fa08 	bl	8002368 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f58:	4d08      	ldr	r5, [pc, #32]	@ (8003f7c <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 8003f5a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5c:	e005      	b.n	8003f6a <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5e:	f7fe fa03 	bl	8002368 <HAL_GetTick>
 8003f62:	1b00      	subs	r0, r0, r4
 8003f64:	2802      	cmp	r0, #2
 8003f66:	f63f af5f 	bhi.w	8003e28 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f6a:	682b      	ldr	r3, [r5, #0]
 8003f6c:	019a      	lsls	r2, r3, #6
 8003f6e:	d5f6      	bpl.n	8003f5e <HAL_RCC_OscConfig+0x3a2>
 8003f70:	e6e4      	b.n	8003d3c <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 8003f72:	2001      	movs	r0, #1
}
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	42470000 	.word	0x42470000
 8003f7c:	40023800 	.word	0x40023800

08003f80 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f80:	4916      	ldr	r1, [pc, #88]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8003f82:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f84:	688b      	ldr	r3, [r1, #8]
 8003f86:	f003 030c 	and.w	r3, r3, #12
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d01b      	beq.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x46>
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d001      	beq.n	8003f96 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f92:	4813      	ldr	r0, [pc, #76]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003f94:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f96:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f98:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9a:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f9c:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fa0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fa4:	d111      	bne.n	8003fca <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fa6:	480e      	ldr	r0, [pc, #56]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x60>)
 8003fa8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003fac:	fba1 0100 	umull	r0, r1, r1, r0
 8003fb0:	f7fc fe72 	bl	8000c98 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003fb4:	4b09      	ldr	r3, [pc, #36]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x5c>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8003fc0:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003fc4:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fc6:	4807      	ldr	r0, [pc, #28]	@ (8003fe4 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8003fc8:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fca:	4806      	ldr	r0, [pc, #24]	@ (8003fe4 <HAL_RCC_GetSysClockFreq+0x64>)
 8003fcc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	fba1 0100 	umull	r0, r1, r1, r0
 8003fd6:	f7fc fe5f 	bl	8000c98 <__aeabi_uldivmod>
 8003fda:	e7eb      	b.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	00f42400 	.word	0x00f42400
 8003fe4:	017d7840 	.word	0x017d7840

08003fe8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	f000 8087 	beq.w	80040fc <HAL_RCC_ClockConfig+0x114>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fee:	4a48      	ldr	r2, [pc, #288]	@ (8004110 <HAL_RCC_ClockConfig+0x128>)
 8003ff0:	6813      	ldr	r3, [r2, #0]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	428b      	cmp	r3, r1
{
 8003ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ffc:	460d      	mov	r5, r1
 8003ffe:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004000:	d209      	bcs.n	8004016 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004002:	b2cb      	uxtb	r3, r1
 8004004:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004006:	6813      	ldr	r3, [r2, #0]
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	428b      	cmp	r3, r1
 800400e:	d002      	beq.n	8004016 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004010:	2001      	movs	r0, #1
}
 8004012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	0798      	lsls	r0, r3, #30
 800401a:	d514      	bpl.n	8004046 <HAL_RCC_ClockConfig+0x5e>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401c:	0759      	lsls	r1, r3, #29
 800401e:	d504      	bpl.n	800402a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004020:	493c      	ldr	r1, [pc, #240]	@ (8004114 <HAL_RCC_ClockConfig+0x12c>)
 8004022:	688a      	ldr	r2, [r1, #8]
 8004024:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 8004028:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402a:	071a      	lsls	r2, r3, #28
 800402c:	d504      	bpl.n	8004038 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800402e:	4939      	ldr	r1, [pc, #228]	@ (8004114 <HAL_RCC_ClockConfig+0x12c>)
 8004030:	688a      	ldr	r2, [r1, #8]
 8004032:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 8004036:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004038:	4936      	ldr	r1, [pc, #216]	@ (8004114 <HAL_RCC_ClockConfig+0x12c>)
 800403a:	68a0      	ldr	r0, [r4, #8]
 800403c:	688a      	ldr	r2, [r1, #8]
 800403e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8004042:	4302      	orrs	r2, r0
 8004044:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004046:	07df      	lsls	r7, r3, #31
 8004048:	d521      	bpl.n	800408e <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800404a:	6862      	ldr	r2, [r4, #4]
 800404c:	2a01      	cmp	r2, #1
 800404e:	d057      	beq.n	8004100 <HAL_RCC_ClockConfig+0x118>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004050:	1e93      	subs	r3, r2, #2
 8004052:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004054:	4b2f      	ldr	r3, [pc, #188]	@ (8004114 <HAL_RCC_ClockConfig+0x12c>)
 8004056:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004058:	d94d      	bls.n	80040f6 <HAL_RCC_ClockConfig+0x10e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800405a:	0799      	lsls	r1, r3, #30
 800405c:	d5d8      	bpl.n	8004010 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800405e:	4e2d      	ldr	r6, [pc, #180]	@ (8004114 <HAL_RCC_ClockConfig+0x12c>)
 8004060:	68b3      	ldr	r3, [r6, #8]
 8004062:	f023 0303 	bic.w	r3, r3, #3
 8004066:	4313      	orrs	r3, r2
 8004068:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800406a:	f7fe f97d 	bl	8002368 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800406e:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8004072:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004074:	e004      	b.n	8004080 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004076:	f7fe f977 	bl	8002368 <HAL_GetTick>
 800407a:	1bc0      	subs	r0, r0, r7
 800407c:	4540      	cmp	r0, r8
 800407e:	d844      	bhi.n	800410a <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004080:	68b3      	ldr	r3, [r6, #8]
 8004082:	6862      	ldr	r2, [r4, #4]
 8004084:	f003 030c 	and.w	r3, r3, #12
 8004088:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800408c:	d1f3      	bne.n	8004076 <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800408e:	4a20      	ldr	r2, [pc, #128]	@ (8004110 <HAL_RCC_ClockConfig+0x128>)
 8004090:	6813      	ldr	r3, [r2, #0]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	42ab      	cmp	r3, r5
 8004098:	d906      	bls.n	80040a8 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409a:	b2eb      	uxtb	r3, r5
 800409c:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800409e:	6813      	ldr	r3, [r2, #0]
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	42ab      	cmp	r3, r5
 80040a6:	d1b3      	bne.n	8004010 <HAL_RCC_ClockConfig+0x28>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a8:	6823      	ldr	r3, [r4, #0]
 80040aa:	075a      	lsls	r2, r3, #29
 80040ac:	d506      	bpl.n	80040bc <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040ae:	4919      	ldr	r1, [pc, #100]	@ (8004114 <HAL_RCC_ClockConfig+0x12c>)
 80040b0:	68e0      	ldr	r0, [r4, #12]
 80040b2:	688a      	ldr	r2, [r1, #8]
 80040b4:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 80040b8:	4302      	orrs	r2, r0
 80040ba:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040bc:	071b      	lsls	r3, r3, #28
 80040be:	d507      	bpl.n	80040d0 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040c0:	4a14      	ldr	r2, [pc, #80]	@ (8004114 <HAL_RCC_ClockConfig+0x12c>)
 80040c2:	6921      	ldr	r1, [r4, #16]
 80040c4:	6893      	ldr	r3, [r2, #8]
 80040c6:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80040ca:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80040ce:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040d0:	f7ff ff56 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 80040d4:	4a0f      	ldr	r2, [pc, #60]	@ (8004114 <HAL_RCC_ClockConfig+0x12c>)
 80040d6:	4c10      	ldr	r4, [pc, #64]	@ (8004118 <HAL_RCC_ClockConfig+0x130>)
 80040d8:	6892      	ldr	r2, [r2, #8]
 80040da:	4910      	ldr	r1, [pc, #64]	@ (800411c <HAL_RCC_ClockConfig+0x134>)
 80040dc:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80040e0:	4603      	mov	r3, r0
 80040e2:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick(uwTickPrio);
 80040e4:	480e      	ldr	r0, [pc, #56]	@ (8004120 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040e6:	40d3      	lsrs	r3, r2
  HAL_InitTick(uwTickPrio);
 80040e8:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80040ea:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 80040ec:	f7fe f8f2 	bl	80022d4 <HAL_InitTick>
  return HAL_OK;
 80040f0:	2000      	movs	r0, #0
}
 80040f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f6:	0198      	lsls	r0, r3, #6
 80040f8:	d4b1      	bmi.n	800405e <HAL_RCC_ClockConfig+0x76>
 80040fa:	e789      	b.n	8004010 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80040fc:	2001      	movs	r0, #1
}
 80040fe:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004100:	4b04      	ldr	r3, [pc, #16]	@ (8004114 <HAL_RCC_ClockConfig+0x12c>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	039e      	lsls	r6, r3, #14
 8004106:	d4aa      	bmi.n	800405e <HAL_RCC_ClockConfig+0x76>
 8004108:	e782      	b.n	8004010 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800410a:	2003      	movs	r0, #3
 800410c:	e781      	b.n	8004012 <HAL_RCC_ClockConfig+0x2a>
 800410e:	bf00      	nop
 8004110:	40023c00 	.word	0x40023c00
 8004114:	40023800 	.word	0x40023800
 8004118:	0800e7b4 	.word	0x0800e7b4
 800411c:	20000000 	.word	0x20000000
 8004120:	20000008 	.word	0x20000008

08004124 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004124:	4b04      	ldr	r3, [pc, #16]	@ (8004138 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8004126:	4905      	ldr	r1, [pc, #20]	@ (800413c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	4a05      	ldr	r2, [pc, #20]	@ (8004140 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800412c:	6808      	ldr	r0, [r1, #0]
 800412e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004132:	5cd3      	ldrb	r3, [r2, r3]
}
 8004134:	40d8      	lsrs	r0, r3
 8004136:	4770      	bx	lr
 8004138:	40023800 	.word	0x40023800
 800413c:	20000000 	.word	0x20000000
 8004140:	0800e7ac 	.word	0x0800e7ac

08004144 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004144:	4b04      	ldr	r3, [pc, #16]	@ (8004158 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004146:	4905      	ldr	r1, [pc, #20]	@ (800415c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	4a05      	ldr	r2, [pc, #20]	@ (8004160 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800414c:	6808      	ldr	r0, [r1, #0]
 800414e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004152:	5cd3      	ldrb	r3, [r2, r3]
}
 8004154:	40d8      	lsrs	r0, r3
 8004156:	4770      	bx	lr
 8004158:	40023800 	.word	0x40023800
 800415c:	20000000 	.word	0x20000000
 8004160:	0800e7ac 	.word	0x0800e7ac

08004164 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004164:	2800      	cmp	r0, #0
 8004166:	d071      	beq.n	800424c <HAL_TIM_Base_Init+0xe8>
{
 8004168:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800416a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800416e:	4604      	mov	r4, r0
 8004170:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004174:	2b00      	cmp	r3, #0
 8004176:	d054      	beq.n	8004222 <HAL_TIM_Base_Init+0xbe>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004178:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800417a:	4e35      	ldr	r6, [pc, #212]	@ (8004250 <HAL_TIM_Base_Init+0xec>)
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800417c:	69a1      	ldr	r1, [r4, #24]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800417e:	68e5      	ldr	r5, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004180:	6860      	ldr	r0, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8004182:	2302      	movs	r3, #2
 8004184:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004188:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 800418a:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800418c:	d04e      	beq.n	800422c <HAL_TIM_Base_Init+0xc8>
 800418e:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8004192:	d01c      	beq.n	80041ce <HAL_TIM_Base_Init+0x6a>
 8004194:	f5a6 467c 	sub.w	r6, r6, #64512	@ 0xfc00
 8004198:	42b2      	cmp	r2, r6
 800419a:	d018      	beq.n	80041ce <HAL_TIM_Base_Init+0x6a>
 800419c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80041a0:	42b2      	cmp	r2, r6
 80041a2:	d014      	beq.n	80041ce <HAL_TIM_Base_Init+0x6a>
 80041a4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80041a8:	42b2      	cmp	r2, r6
 80041aa:	d010      	beq.n	80041ce <HAL_TIM_Base_Init+0x6a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ac:	4e29      	ldr	r6, [pc, #164]	@ (8004254 <HAL_TIM_Base_Init+0xf0>)
 80041ae:	42b2      	cmp	r2, r6
 80041b0:	d011      	beq.n	80041d6 <HAL_TIM_Base_Init+0x72>
 80041b2:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80041b6:	42b2      	cmp	r2, r6
 80041b8:	d00d      	beq.n	80041d6 <HAL_TIM_Base_Init+0x72>
 80041ba:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80041be:	42b2      	cmp	r2, r6
 80041c0:	d009      	beq.n	80041d6 <HAL_TIM_Base_Init+0x72>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c6:	62d5      	str	r5, [r2, #44]	@ 0x2c
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041c8:	4319      	orrs	r1, r3
  TIMx->PSC = Structure->Prescaler;
 80041ca:	6290      	str	r0, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041cc:	e00c      	b.n	80041e8 <HAL_TIM_Base_Init+0x84>
    tmpcr1 |= Structure->CounterMode;
 80041ce:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80041d4:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041d6:	6926      	ldr	r6, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041d8:	62d5      	str	r5, [r2, #44]	@ 0x2c
    tmpcr1 &= ~TIM_CR1_CKD;
 80041da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041de:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041e4:	4319      	orrs	r1, r3
  TIMx->PSC = Structure->Prescaler;
 80041e6:	6290      	str	r0, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80041e8:	6810      	ldr	r0, [r2, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041ea:	2301      	movs	r3, #1
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80041ec:	f040 0004 	orr.w	r0, r0, #4
 80041f0:	6010      	str	r0, [r2, #0]
  TIMx->EGR = TIM_EGR_UG;
 80041f2:	6153      	str	r3, [r2, #20]

  TIMx->CR1 = tmpcr1;
 80041f4:	6011      	str	r1, [r2, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041f6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041fa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80041fe:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004202:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004206:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800420a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800420e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004212:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004216:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800421a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800421e:	2000      	movs	r0, #0
}
 8004220:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8004222:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004226:	f7fd fe75 	bl	8001f14 <HAL_TIM_Base_MspInit>
 800422a:	e7a5      	b.n	8004178 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800422c:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800422e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004232:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004234:	6926      	ldr	r6, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004236:	62d5      	str	r5, [r2, #44]	@ 0x2c
    tmpcr1 &= ~TIM_CR1_CKD;
 8004238:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  TIMx->PSC = Structure->Prescaler;
 800423c:	6290      	str	r0, [r2, #40]	@ 0x28
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800423e:	4333      	orrs	r3, r6
    TIMx->RCR = Structure->RepetitionCounter;
 8004240:	6960      	ldr	r0, [r4, #20]
 8004242:	6310      	str	r0, [r2, #48]	@ 0x30
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004244:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004248:	4319      	orrs	r1, r3
    TIMx->RCR = Structure->RepetitionCounter;
 800424a:	e7cd      	b.n	80041e8 <HAL_TIM_Base_Init+0x84>
    return HAL_ERROR;
 800424c:	2001      	movs	r0, #1
}
 800424e:	4770      	bx	lr
 8004250:	40010000 	.word	0x40010000
 8004254:	40014000 	.word	0x40014000

08004258 <HAL_TIM_OC_MspInit>:
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop

0800425c <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800425c:	2800      	cmp	r0, #0
 800425e:	d071      	beq.n	8004344 <HAL_TIM_OC_Init+0xe8>
{
 8004260:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004262:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004266:	4604      	mov	r4, r0
 8004268:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800426c:	2b00      	cmp	r3, #0
 800426e:	d054      	beq.n	800431a <HAL_TIM_OC_Init+0xbe>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004270:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004272:	4e35      	ldr	r6, [pc, #212]	@ (8004348 <HAL_TIM_OC_Init+0xec>)
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004274:	69a1      	ldr	r1, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004276:	68e5      	ldr	r5, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 8004278:	6860      	ldr	r0, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 800427a:	2302      	movs	r3, #2
 800427c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004280:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8004282:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004284:	d04e      	beq.n	8004324 <HAL_TIM_OC_Init+0xc8>
 8004286:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800428a:	d01c      	beq.n	80042c6 <HAL_TIM_OC_Init+0x6a>
 800428c:	f5a6 467c 	sub.w	r6, r6, #64512	@ 0xfc00
 8004290:	42b2      	cmp	r2, r6
 8004292:	d018      	beq.n	80042c6 <HAL_TIM_OC_Init+0x6a>
 8004294:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8004298:	42b2      	cmp	r2, r6
 800429a:	d014      	beq.n	80042c6 <HAL_TIM_OC_Init+0x6a>
 800429c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80042a0:	42b2      	cmp	r2, r6
 80042a2:	d010      	beq.n	80042c6 <HAL_TIM_OC_Init+0x6a>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042a4:	4e29      	ldr	r6, [pc, #164]	@ (800434c <HAL_TIM_OC_Init+0xf0>)
 80042a6:	42b2      	cmp	r2, r6
 80042a8:	d011      	beq.n	80042ce <HAL_TIM_OC_Init+0x72>
 80042aa:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80042ae:	42b2      	cmp	r2, r6
 80042b0:	d00d      	beq.n	80042ce <HAL_TIM_OC_Init+0x72>
 80042b2:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80042b6:	42b2      	cmp	r2, r6
 80042b8:	d009      	beq.n	80042ce <HAL_TIM_OC_Init+0x72>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042be:	62d5      	str	r5, [r2, #44]	@ 0x2c
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042c0:	4319      	orrs	r1, r3
  TIMx->PSC = Structure->Prescaler;
 80042c2:	6290      	str	r0, [r2, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042c4:	e00c      	b.n	80042e0 <HAL_TIM_OC_Init+0x84>
    tmpcr1 |= Structure->CounterMode;
 80042c6:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80042cc:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042ce:	6926      	ldr	r6, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042d0:	62d5      	str	r5, [r2, #44]	@ 0x2c
    tmpcr1 &= ~TIM_CR1_CKD;
 80042d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042d6:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042dc:	4319      	orrs	r1, r3
  TIMx->PSC = Structure->Prescaler;
 80042de:	6290      	str	r0, [r2, #40]	@ 0x28
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80042e0:	6810      	ldr	r0, [r2, #0]
  TIMx->EGR = TIM_EGR_UG;
 80042e2:	2301      	movs	r3, #1
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80042e4:	f040 0004 	orr.w	r0, r0, #4
 80042e8:	6010      	str	r0, [r2, #0]
  TIMx->EGR = TIM_EGR_UG;
 80042ea:	6153      	str	r3, [r2, #20]
  TIMx->CR1 = tmpcr1;
 80042ec:	6011      	str	r1, [r2, #0]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042ee:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f2:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80042f6:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80042fa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80042fe:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004302:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004306:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800430a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800430e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004312:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8004316:	2000      	movs	r0, #0
}
 8004318:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 800431a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_OC_MspInit(htim);
 800431e:	f7ff ff9b 	bl	8004258 <HAL_TIM_OC_MspInit>
 8004322:	e7a5      	b.n	8004270 <HAL_TIM_OC_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8004324:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800432a:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800432c:	6926      	ldr	r6, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800432e:	62d5      	str	r5, [r2, #44]	@ 0x2c
    tmpcr1 &= ~TIM_CR1_CKD;
 8004330:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
  TIMx->PSC = Structure->Prescaler;
 8004334:	6290      	str	r0, [r2, #40]	@ 0x28
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004336:	4333      	orrs	r3, r6
    TIMx->RCR = Structure->RepetitionCounter;
 8004338:	6960      	ldr	r0, [r4, #20]
 800433a:	6310      	str	r0, [r2, #48]	@ 0x30
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800433c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004340:	4319      	orrs	r1, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8004342:	e7cd      	b.n	80042e0 <HAL_TIM_OC_Init+0x84>
    return HAL_ERROR;
 8004344:	2001      	movs	r0, #1
}
 8004346:	4770      	bx	lr
 8004348:	40010000 	.word	0x40010000
 800434c:	40014000 	.word	0x40014000

08004350 <HAL_TIM_OC_Start>:
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004350:	bb91      	cbnz	r1, 80043b8 <HAL_TIM_OC_Start+0x68>
 8004352:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8004356:	2b01      	cmp	r3, #1
 8004358:	d136      	bne.n	80043c8 <HAL_TIM_OC_Start+0x78>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800435a:	2302      	movs	r3, #2
 800435c:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004360:	6803      	ldr	r3, [r0, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004362:	f001 011f 	and.w	r1, r1, #31

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004366:	6a18      	ldr	r0, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004368:	2201      	movs	r2, #1
 800436a:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 800436c:	ea20 0002 	bic.w	r0, r0, r2
 8004370:	6218      	str	r0, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004372:	6a18      	ldr	r0, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004374:	4922      	ldr	r1, [pc, #136]	@ (8004400 <HAL_TIM_OC_Start+0xb0>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004376:	4302      	orrs	r2, r0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004378:	428b      	cmp	r3, r1
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800437a:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800437c:	d02a      	beq.n	80043d4 <HAL_TIM_OC_Start+0x84>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800437e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004382:	d00e      	beq.n	80043a2 <HAL_TIM_OC_Start+0x52>
 8004384:	4a1f      	ldr	r2, [pc, #124]	@ (8004404 <HAL_TIM_OC_Start+0xb4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00b      	beq.n	80043a2 <HAL_TIM_OC_Start+0x52>
 800438a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800438e:	4293      	cmp	r3, r2
 8004390:	d007      	beq.n	80043a2 <HAL_TIM_OC_Start+0x52>
 8004392:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004396:	4293      	cmp	r3, r2
 8004398:	d003      	beq.n	80043a2 <HAL_TIM_OC_Start+0x52>
 800439a:	f502 329a 	add.w	r2, r2, #78848	@ 0x13400
 800439e:	4293      	cmp	r3, r2
 80043a0:	d104      	bne.n	80043ac <HAL_TIM_OC_Start+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043a8:	2a06      	cmp	r2, #6
 80043aa:	d003      	beq.n	80043b4 <HAL_TIM_OC_Start+0x64>
      __HAL_TIM_ENABLE(htim);
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80043b4:	2000      	movs	r0, #0
 80043b6:	4770      	bx	lr
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043b8:	2904      	cmp	r1, #4
 80043ba:	d010      	beq.n	80043de <HAL_TIM_OC_Start+0x8e>
 80043bc:	2908      	cmp	r1, #8
 80043be:	d016      	beq.n	80043ee <HAL_TIM_OC_Start+0x9e>
 80043c0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d001      	beq.n	80043cc <HAL_TIM_OC_Start+0x7c>
    return HAL_ERROR;
 80043c8:	2001      	movs	r0, #1
}
 80043ca:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043cc:	2302      	movs	r3, #2
 80043ce:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
 80043d2:	e7c5      	b.n	8004360 <HAL_TIM_OC_Start+0x10>
    __HAL_TIM_MOE_ENABLE(htim);
 80043d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043da:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043dc:	e7e1      	b.n	80043a2 <HAL_TIM_OC_Start+0x52>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043de:	f890 303f 	ldrb.w	r3, [r0, #63]	@ 0x3f
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d1f0      	bne.n	80043c8 <HAL_TIM_OC_Start+0x78>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043e6:	2302      	movs	r3, #2
 80043e8:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
 80043ec:	e7b8      	b.n	8004360 <HAL_TIM_OC_Start+0x10>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80043ee:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d1e8      	bne.n	80043c8 <HAL_TIM_OC_Start+0x78>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043f6:	2302      	movs	r3, #2
 80043f8:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 80043fc:	e7b0      	b.n	8004360 <HAL_TIM_OC_Start+0x10>
 80043fe:	bf00      	nop
 8004400:	40010000 	.word	0x40010000
 8004404:	40000400 	.word	0x40000400

08004408 <HAL_TIM_OC_Stop>:
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004408:	6803      	ldr	r3, [r0, #0]
{
 800440a:	b410      	push	{r4}
  TIMx->CCER &= ~tmp;
 800440c:	6a1a      	ldr	r2, [r3, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800440e:	f001 041f 	and.w	r4, r1, #31
 8004412:	f04f 0c01 	mov.w	ip, #1
 8004416:	fa0c fc04 	lsl.w	ip, ip, r4
  TIMx->CCER &= ~tmp;
 800441a:	ea22 020c 	bic.w	r2, r2, ip
 800441e:	621a      	str	r2, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004420:	4a1e      	ldr	r2, [pc, #120]	@ (800449c <HAL_TIM_OC_Stop+0x94>)
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004422:	6a1c      	ldr	r4, [r3, #32]
 8004424:	621c      	str	r4, [r3, #32]
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004426:	4293      	cmp	r3, r2
 8004428:	d022      	beq.n	8004470 <HAL_TIM_OC_Stop+0x68>
  __HAL_TIM_DISABLE(htim);
 800442a:	6a1c      	ldr	r4, [r3, #32]
 800442c:	f241 1211 	movw	r2, #4369	@ 0x1111
 8004430:	4214      	tst	r4, r2
 8004432:	d104      	bne.n	800443e <HAL_TIM_OC_Stop+0x36>
 8004434:	6a1c      	ldr	r4, [r3, #32]
 8004436:	f240 4244 	movw	r2, #1092	@ 0x444
 800443a:	4214      	tst	r4, r2
 800443c:	d013      	beq.n	8004466 <HAL_TIM_OC_Stop+0x5e>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800443e:	2301      	movs	r3, #1
 8004440:	b929      	cbnz	r1, 800444e <HAL_TIM_OC_Stop+0x46>
 8004442:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
}
 8004446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800444a:	2000      	movs	r0, #0
 800444c:	4770      	bx	lr
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800444e:	2904      	cmp	r1, #4
 8004450:	d01d      	beq.n	800448e <HAL_TIM_OC_Stop+0x86>
 8004452:	2908      	cmp	r1, #8
 8004454:	bf0c      	ite	eq
 8004456:	f880 3040 	strbeq.w	r3, [r0, #64]	@ 0x40
 800445a:	f880 3041 	strbne.w	r3, [r0, #65]	@ 0x41
}
 800445e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004462:	2000      	movs	r0, #0
 8004464:	4770      	bx	lr
  __HAL_TIM_DISABLE(htim);
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	f022 0201 	bic.w	r2, r2, #1
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	e7e6      	b.n	800443e <HAL_TIM_OC_Stop+0x36>
    __HAL_TIM_MOE_DISABLE(htim);
 8004470:	6a1c      	ldr	r4, [r3, #32]
 8004472:	f241 1211 	movw	r2, #4369	@ 0x1111
 8004476:	4214      	tst	r4, r2
 8004478:	d1d7      	bne.n	800442a <HAL_TIM_OC_Stop+0x22>
 800447a:	6a1c      	ldr	r4, [r3, #32]
 800447c:	f240 4244 	movw	r2, #1092	@ 0x444
 8004480:	4214      	tst	r4, r2
 8004482:	d1d2      	bne.n	800442a <HAL_TIM_OC_Stop+0x22>
 8004484:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004486:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800448a:	645a      	str	r2, [r3, #68]	@ 0x44
 800448c:	e7cd      	b.n	800442a <HAL_TIM_OC_Stop+0x22>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800448e:	f880 303f 	strb.w	r3, [r0, #63]	@ 0x3f
}
 8004492:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004496:	2000      	movs	r0, #0
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40010000 	.word	0x40010000

080044a0 <HAL_TIM_OC_ConfigChannel>:
  __HAL_LOCK(htim);
 80044a0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	f000 8081 	beq.w	80045ac <HAL_TIM_OC_ConfigChannel+0x10c>
{
 80044aa:	b470      	push	{r4, r5, r6}
 80044ac:	4684      	mov	ip, r0
  switch (Channel)
 80044ae:	2a0c      	cmp	r2, #12
 80044b0:	d808      	bhi.n	80044c4 <HAL_TIM_OC_ConfigChannel+0x24>
 80044b2:	e8df f002 	tbb	[pc, r2]
 80044b6:	072d      	.short	0x072d
 80044b8:	07460707 	.word	0x07460707
 80044bc:	07610707 	.word	0x07610707
 80044c0:	0707      	.short	0x0707
 80044c2:	0d          	.byte	0x0d
 80044c3:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80044c4:	2300      	movs	r3, #0
 80044c6:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  switch (Channel)
 80044ca:	2001      	movs	r0, #1
}
 80044cc:	bc70      	pop	{r4, r5, r6}
 80044ce:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044d0:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044d2:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 80044d4:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044d6:	6a18      	ldr	r0, [r3, #32]
 80044d8:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 80044dc:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80044de:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80044e0:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044e2:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044e6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044ea:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80044ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044f0:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044f4:	4d47      	ldr	r5, [pc, #284]	@ (8004614 <HAL_TIM_OC_ConfigChannel+0x174>)
 80044f6:	42ab      	cmp	r3, r5
 80044f8:	d076      	beq.n	80045e8 <HAL_TIM_OC_ConfigChannel+0x148>
  TIMx->CCR4 = OC_Config->Pulse;
 80044fa:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80044fc:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80044fe:	61d8      	str	r0, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8004500:	6419      	str	r1, [r3, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8004502:	621a      	str	r2, [r3, #32]
  __HAL_UNLOCK(htim);
 8004504:	2300      	movs	r3, #0
 8004506:	f88c 303c 	strb.w	r3, [ip, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800450a:	2000      	movs	r0, #0
}
 800450c:	bc70      	pop	{r4, r5, r6}
 800450e:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004510:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8004512:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8004514:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004516:	6a18      	ldr	r0, [r3, #32]
 8004518:	f020 0001 	bic.w	r0, r0, #1
 800451c:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800451e:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004520:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004522:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004526:	4328      	orrs	r0, r5
  tmpccer |= OC_Config->OCPolarity;
 8004528:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800452a:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 800452e:	432a      	orrs	r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004530:	4d38      	ldr	r5, [pc, #224]	@ (8004614 <HAL_TIM_OC_ConfigChannel+0x174>)
 8004532:	42ab      	cmp	r3, r5
 8004534:	d03c      	beq.n	80045b0 <HAL_TIM_OC_ConfigChannel+0x110>
  TIMx->CCR1 = OC_Config->Pulse;
 8004536:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004538:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800453a:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800453c:	6359      	str	r1, [r3, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 800453e:	621a      	str	r2, [r3, #32]
}
 8004540:	e7e0      	b.n	8004504 <HAL_TIM_OC_ConfigChannel+0x64>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004542:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004544:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 8004546:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004548:	6a18      	ldr	r0, [r3, #32]
 800454a:	f020 0010 	bic.w	r0, r0, #16
 800454e:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004550:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8004552:	6998      	ldr	r0, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004554:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004558:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800455c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800455e:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004562:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004566:	4d2b      	ldr	r5, [pc, #172]	@ (8004614 <HAL_TIM_OC_ConfigChannel+0x174>)
 8004568:	42ab      	cmp	r3, r5
 800456a:	d02e      	beq.n	80045ca <HAL_TIM_OC_ConfigChannel+0x12a>
  TIMx->CCR2 = OC_Config->Pulse;
 800456c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800456e:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004570:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004572:	6399      	str	r1, [r3, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004574:	621a      	str	r2, [r3, #32]
}
 8004576:	e7c5      	b.n	8004504 <HAL_TIM_OC_ConfigChannel+0x64>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004578:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800457a:	680d      	ldr	r5, [r1, #0]
  tmpccer = TIMx->CCER;
 800457c:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800457e:	6a18      	ldr	r0, [r3, #32]
 8004580:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8004584:	6218      	str	r0, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004586:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004588:	69d8      	ldr	r0, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800458a:	f020 0073 	bic.w	r0, r0, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800458e:	4328      	orrs	r0, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004590:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004592:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004596:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800459a:	4d1e      	ldr	r5, [pc, #120]	@ (8004614 <HAL_TIM_OC_ConfigChannel+0x174>)
 800459c:	42ab      	cmp	r3, r5
 800459e:	d029      	beq.n	80045f4 <HAL_TIM_OC_ConfigChannel+0x154>
  TIMx->CCR3 = OC_Config->Pulse;
 80045a0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80045a2:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80045a4:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80045a6:	63d9      	str	r1, [r3, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 80045a8:	621a      	str	r2, [r3, #32]
}
 80045aa:	e7ab      	b.n	8004504 <HAL_TIM_OC_ConfigChannel+0x64>
  __HAL_LOCK(htim);
 80045ac:	2002      	movs	r0, #2
}
 80045ae:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 80045b0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80045b2:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 80045b6:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 80045b8:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045bc:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80045c0:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80045c2:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80045c6:	432c      	orrs	r4, r5
 80045c8:	e7b5      	b.n	8004536 <HAL_TIM_OC_ConfigChannel+0x96>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045ca:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80045cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045d0:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045d4:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045d8:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045dc:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80045de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045e2:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 80045e6:	e7c1      	b.n	800456c <HAL_TIM_OC_ConfigChannel+0xcc>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045e8:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045ea:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045ee:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80045f2:	e782      	b.n	80044fa <HAL_TIM_OC_ConfigChannel+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045f4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80045f6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045fe:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004602:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004606:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8004608:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800460c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8004610:	e7c6      	b.n	80045a0 <HAL_TIM_OC_ConfigChannel+0x100>
 8004612:	bf00      	nop
 8004614:	40010000 	.word	0x40010000

08004618 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004618:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 800461c:	2a01      	cmp	r2, #1
 800461e:	d06e      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0xe6>
 8004620:	4603      	mov	r3, r0
  tmpsmcr = htim->Instance->SMCR;
 8004622:	6802      	ldr	r2, [r0, #0]
{
 8004624:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8004626:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004628:	2402      	movs	r4, #2
  __HAL_LOCK(htim);
 800462a:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800462e:	f883 403d 	strb.w	r4, [r3, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004632:	6894      	ldr	r4, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004634:	f424 447f 	bic.w	r4, r4, #65280	@ 0xff00
 8004638:	f024 0477 	bic.w	r4, r4, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 800463c:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800463e:	680c      	ldr	r4, [r1, #0]
 8004640:	2c60      	cmp	r4, #96	@ 0x60
 8004642:	d076      	beq.n	8004732 <HAL_TIM_ConfigClockSource+0x11a>
 8004644:	d811      	bhi.n	800466a <HAL_TIM_ConfigClockSource+0x52>
 8004646:	2c40      	cmp	r4, #64	@ 0x40
 8004648:	d05b      	beq.n	8004702 <HAL_TIM_ConfigClockSource+0xea>
 800464a:	d82e      	bhi.n	80046aa <HAL_TIM_ConfigClockSource+0x92>
 800464c:	2c20      	cmp	r4, #32
 800464e:	d004      	beq.n	800465a <HAL_TIM_ConfigClockSource+0x42>
 8004650:	f200 8088 	bhi.w	8004764 <HAL_TIM_ConfigClockSource+0x14c>
 8004654:	f034 0110 	bics.w	r1, r4, #16
 8004658:	d11f      	bne.n	800469a <HAL_TIM_ConfigClockSource+0x82>
  tmpsmcr = TIMx->SMCR;
 800465a:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800465c:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004660:	4321      	orrs	r1, r4
 8004662:	f041 0107 	orr.w	r1, r1, #7
  TIMx->SMCR = tmpsmcr;
 8004666:	6091      	str	r1, [r2, #8]
}
 8004668:	e016      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 800466a:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 800466e:	d013      	beq.n	8004698 <HAL_TIM_ConfigClockSource+0x80>
 8004670:	f5b4 5f00 	cmp.w	r4, #8192	@ 0x2000
 8004674:	d033      	beq.n	80046de <HAL_TIM_ConfigClockSource+0xc6>
 8004676:	2c70      	cmp	r4, #112	@ 0x70
 8004678:	d10f      	bne.n	800469a <HAL_TIM_ConfigClockSource+0x82>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800467a:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800467e:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004680:	4328      	orrs	r0, r5
 8004682:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004684:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004688:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 800468c:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 800468e:	6090      	str	r0, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8004690:	6891      	ldr	r1, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004692:	f041 0177 	orr.w	r1, r1, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004696:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004698:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800469a:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800469c:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 800469e:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 80046a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80046a6:	bc30      	pop	{r4, r5}
 80046a8:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 80046aa:	2c50      	cmp	r4, #80	@ 0x50
 80046ac:	d1f5      	bne.n	800469a <HAL_TIM_ConfigClockSource+0x82>
                               sClockSourceConfig->ClockPolarity,
 80046ae:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80046b0:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 80046b2:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046b4:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80046b8:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ba:	6a11      	ldr	r1, [r2, #32]
 80046bc:	f021 0101 	bic.w	r1, r1, #1
 80046c0:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046c2:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046c4:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046c8:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80046cc:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 80046ce:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80046d0:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80046d2:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046d6:	f041 0157 	orr.w	r1, r1, #87	@ 0x57
  TIMx->SMCR = tmpsmcr;
 80046da:	6091      	str	r1, [r2, #8]
}
 80046dc:	e7dc      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x80>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046de:	e9d1 5001 	ldrd	r5, r0, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80046e2:	6894      	ldr	r4, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046e4:	4328      	orrs	r0, r5
 80046e6:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046e8:	f424 417f 	bic.w	r1, r4, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046ec:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80046f0:	4308      	orrs	r0, r1
  TIMx->SMCR = tmpsmcr;
 80046f2:	6090      	str	r0, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046f4:	6891      	ldr	r1, [r2, #8]
 80046f6:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80046fa:	6091      	str	r1, [r2, #8]
      break;
 80046fc:	e7cc      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x80>
  __HAL_LOCK(htim);
 80046fe:	2002      	movs	r0, #2
}
 8004700:	4770      	bx	lr
                               sClockSourceConfig->ClockPolarity,
 8004702:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004704:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8004706:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004708:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800470c:	4308      	orrs	r0, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800470e:	6a11      	ldr	r1, [r2, #32]
 8004710:	f021 0101 	bic.w	r1, r1, #1
 8004714:	6211      	str	r1, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004716:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004718:	f021 01f0 	bic.w	r1, r1, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800471c:	ea41 1104 	orr.w	r1, r1, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004720:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 8004722:	6210      	str	r0, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8004724:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004726:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800472a:	f041 0147 	orr.w	r1, r1, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 800472e:	6091      	str	r1, [r2, #8]
}
 8004730:	e7b2      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x80>
                               sClockSourceConfig->ClockPolarity,
 8004732:	6848      	ldr	r0, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 8004734:	68cc      	ldr	r4, [r1, #12]
  tmpccer = TIMx->CCER;
 8004736:	6a11      	ldr	r1, [r2, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004738:	f021 01a0 	bic.w	r1, r1, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800473c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004740:	6a10      	ldr	r0, [r2, #32]
 8004742:	f020 0010 	bic.w	r0, r0, #16
 8004746:	6210      	str	r0, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004748:	6990      	ldr	r0, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800474a:	f420 4070 	bic.w	r0, r0, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800474e:	ea40 3004 	orr.w	r0, r0, r4, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004752:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 8004754:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8004756:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004758:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800475c:	f041 0167 	orr.w	r1, r1, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 8004760:	6091      	str	r1, [r2, #8]
}
 8004762:	e799      	b.n	8004698 <HAL_TIM_ConfigClockSource+0x80>
  switch (sClockSourceConfig->ClockSource)
 8004764:	2c30      	cmp	r4, #48	@ 0x30
 8004766:	f43f af78 	beq.w	800465a <HAL_TIM_ConfigClockSource+0x42>
 800476a:	e796      	b.n	800469a <HAL_TIM_ConfigClockSource+0x82>

0800476c <HAL_TIM_OC_DelayElapsedCallback>:
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop

08004770 <HAL_TIM_IC_CaptureCallback>:
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop

08004774 <HAL_TIM_PWM_PulseFinishedCallback>:
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop

08004778 <HAL_TIM_TriggerCallback>:
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop

0800477c <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800477c:	6803      	ldr	r3, [r0, #0]
{
 800477e:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 8004780:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004782:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004784:	07a9      	lsls	r1, r5, #30
{
 8004786:	4604      	mov	r4, r0
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004788:	d501      	bpl.n	800478e <HAL_TIM_IRQHandler+0x12>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800478a:	07b2      	lsls	r2, r6, #30
 800478c:	d451      	bmi.n	8004832 <HAL_TIM_IRQHandler+0xb6>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800478e:	0769      	lsls	r1, r5, #29
 8004790:	d501      	bpl.n	8004796 <HAL_TIM_IRQHandler+0x1a>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004792:	0772      	lsls	r2, r6, #29
 8004794:	d43a      	bmi.n	800480c <HAL_TIM_IRQHandler+0x90>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004796:	072b      	lsls	r3, r5, #28
 8004798:	d501      	bpl.n	800479e <HAL_TIM_IRQHandler+0x22>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800479a:	0730      	lsls	r0, r6, #28
 800479c:	d424      	bmi.n	80047e8 <HAL_TIM_IRQHandler+0x6c>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800479e:	06ea      	lsls	r2, r5, #27
 80047a0:	d501      	bpl.n	80047a6 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047a2:	06f3      	lsls	r3, r6, #27
 80047a4:	d410      	bmi.n	80047c8 <HAL_TIM_IRQHandler+0x4c>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047a6:	07e8      	lsls	r0, r5, #31
 80047a8:	d501      	bpl.n	80047ae <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047aa:	07f1      	lsls	r1, r6, #31
 80047ac:	d457      	bmi.n	800485e <HAL_TIM_IRQHandler+0xe2>
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80047ae:	062a      	lsls	r2, r5, #24
 80047b0:	d501      	bpl.n	80047b6 <HAL_TIM_IRQHandler+0x3a>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047b2:	0633      	lsls	r3, r6, #24
 80047b4:	d45b      	bmi.n	800486e <HAL_TIM_IRQHandler+0xf2>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047b6:	0668      	lsls	r0, r5, #25
 80047b8:	d501      	bpl.n	80047be <HAL_TIM_IRQHandler+0x42>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047ba:	0671      	lsls	r1, r6, #25
 80047bc:	d45f      	bmi.n	800487e <HAL_TIM_IRQHandler+0x102>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80047be:	06aa      	lsls	r2, r5, #26
 80047c0:	d501      	bpl.n	80047c6 <HAL_TIM_IRQHandler+0x4a>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80047c2:	06b3      	lsls	r3, r6, #26
 80047c4:	d442      	bmi.n	800484c <HAL_TIM_IRQHandler+0xd0>
}
 80047c6:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	f06f 0210 	mvn.w	r2, #16
 80047ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047d0:	2208      	movs	r2, #8
 80047d2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80047da:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047dc:	d063      	beq.n	80048a6 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80047de:	f7ff ffc7 	bl	8004770 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e2:	2300      	movs	r3, #0
 80047e4:	7723      	strb	r3, [r4, #28]
 80047e6:	e7de      	b.n	80047a6 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	f06f 0208 	mvn.w	r2, #8
 80047ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047f0:	2204      	movs	r2, #4
 80047f2:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80047f8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047fa:	d151      	bne.n	80048a0 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fc:	f7ff ffb6 	bl	800476c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004800:	4620      	mov	r0, r4
 8004802:	f7ff ffb7 	bl	8004774 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004806:	2300      	movs	r3, #0
 8004808:	7723      	strb	r3, [r4, #28]
 800480a:	e7c8      	b.n	800479e <HAL_TIM_IRQHandler+0x22>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	f06f 0204 	mvn.w	r2, #4
 8004812:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004814:	2202      	movs	r2, #2
 8004816:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	f413 7f40 	tst.w	r3, #768	@ 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800481e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004820:	d13b      	bne.n	800489a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004822:	f7ff ffa3 	bl	800476c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004826:	4620      	mov	r0, r4
 8004828:	f7ff ffa4 	bl	8004774 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482c:	2300      	movs	r3, #0
 800482e:	7723      	strb	r3, [r4, #28]
 8004830:	e7b1      	b.n	8004796 <HAL_TIM_IRQHandler+0x1a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004832:	f06f 0202 	mvn.w	r2, #2
 8004836:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004838:	2201      	movs	r2, #1
 800483a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	079b      	lsls	r3, r3, #30
 8004840:	d025      	beq.n	800488e <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8004842:	f7ff ff95 	bl	8004770 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004846:	2300      	movs	r3, #0
 8004848:	7723      	strb	r3, [r4, #28]
 800484a:	e7a0      	b.n	800478e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800484c:	6823      	ldr	r3, [r4, #0]
 800484e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8004852:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004854:	611a      	str	r2, [r3, #16]
}
 8004856:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800485a:	f000 b863 	b.w	8004924 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800485e:	6823      	ldr	r3, [r4, #0]
 8004860:	f06f 0201 	mvn.w	r2, #1
 8004864:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004866:	4620      	mov	r0, r4
 8004868:	f7fd fa00 	bl	8001c6c <HAL_TIM_PeriodElapsedCallback>
 800486c:	e79f      	b.n	80047ae <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800486e:	6823      	ldr	r3, [r4, #0]
 8004870:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004874:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004876:	4620      	mov	r0, r4
 8004878:	f000 f856 	bl	8004928 <HAL_TIMEx_BreakCallback>
 800487c:	e79b      	b.n	80047b6 <HAL_TIM_IRQHandler+0x3a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004884:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004886:	4620      	mov	r0, r4
 8004888:	f7ff ff76 	bl	8004778 <HAL_TIM_TriggerCallback>
 800488c:	e797      	b.n	80047be <HAL_TIM_IRQHandler+0x42>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800488e:	f7ff ff6d 	bl	800476c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004892:	4620      	mov	r0, r4
 8004894:	f7ff ff6e 	bl	8004774 <HAL_TIM_PWM_PulseFinishedCallback>
 8004898:	e7d5      	b.n	8004846 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 800489a:	f7ff ff69 	bl	8004770 <HAL_TIM_IC_CaptureCallback>
 800489e:	e7c5      	b.n	800482c <HAL_TIM_IRQHandler+0xb0>
        HAL_TIM_IC_CaptureCallback(htim);
 80048a0:	f7ff ff66 	bl	8004770 <HAL_TIM_IC_CaptureCallback>
 80048a4:	e7af      	b.n	8004806 <HAL_TIM_IRQHandler+0x8a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a6:	f7ff ff61 	bl	800476c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048aa:	4620      	mov	r0, r4
 80048ac:	f7ff ff62 	bl	8004774 <HAL_TIM_PWM_PulseFinishedCallback>
 80048b0:	e797      	b.n	80047e2 <HAL_TIM_IRQHandler+0x66>
 80048b2:	bf00      	nop

080048b4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048b4:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80048b8:	2a01      	cmp	r2, #1
 80048ba:	d02f      	beq.n	800491c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80048bc:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048be:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80048c0:	2002      	movs	r0, #2
{
 80048c2:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80048c4:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 80048c8:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048ca:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80048cc:	6894      	ldr	r4, [r2, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80048ce:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048d2:	4328      	orrs	r0, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048d4:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d6:	4812      	ldr	r0, [pc, #72]	@ (8004920 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80048d8:	4282      	cmp	r2, r0
 80048da:	d012      	beq.n	8004902 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80048dc:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80048e0:	d00f      	beq.n	8004902 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80048e2:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 80048e6:	4282      	cmp	r2, r0
 80048e8:	d00b      	beq.n	8004902 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80048ea:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80048ee:	4282      	cmp	r2, r0
 80048f0:	d007      	beq.n	8004902 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80048f2:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80048f6:	4282      	cmp	r2, r0
 80048f8:	d003      	beq.n	8004902 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
 80048fa:	f500 309a 	add.w	r0, r0, #78848	@ 0x13400
 80048fe:	4282      	cmp	r2, r0
 8004900:	d104      	bne.n	800490c <HAL_TIMEx_MasterConfigSynchronization+0x58>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004902:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004904:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004908:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800490a:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800490c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800490e:	2201      	movs	r2, #1
 8004910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004914:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8004918:	bc30      	pop	{r4, r5}
 800491a:	4770      	bx	lr
  __HAL_LOCK(htim);
 800491c:	2002      	movs	r0, #2
}
 800491e:	4770      	bx	lr
 8004920:	40010000 	.word	0x40010000

08004924 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop

08004928 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 8004928:	4770      	bx	lr
 800492a:	bf00      	nop

0800492c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800492c:	2800      	cmp	r0, #0
 800492e:	f000 8087 	beq.w	8004a40 <HAL_UART_Init+0x114>
{
 8004932:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004934:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004938:	4604      	mov	r4, r0
 800493a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800493e:	2b00      	cmp	r3, #0
 8004940:	d079      	beq.n	8004a36 <HAL_UART_Init+0x10a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004942:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004944:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8004946:	2224      	movs	r2, #36	@ 0x24
 8004948:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004952:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004954:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004956:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004958:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 800495c:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800495e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004960:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004962:	4302      	orrs	r2, r0
 8004964:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004966:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004968:	4302      	orrs	r2, r0
 800496a:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 800496c:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8004970:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004974:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004976:	430a      	orrs	r2, r1
 8004978:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800497a:	695a      	ldr	r2, [r3, #20]
 800497c:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800497e:	4931      	ldr	r1, [pc, #196]	@ (8004a44 <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004980:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004984:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004986:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004988:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800498a:	d036      	beq.n	80049fa <HAL_UART_Init+0xce>
 800498c:	4a2e      	ldr	r2, [pc, #184]	@ (8004a48 <HAL_UART_Init+0x11c>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d033      	beq.n	80049fa <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004992:	f7ff fbc7 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004996:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004998:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800499a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800499e:	e9d4 5300 	ldrd	r5, r3, [r4]
 80049a2:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049a6:	d02b      	beq.n	8004a00 <HAL_UART_Init+0xd4>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049a8:	009a      	lsls	r2, r3, #2
 80049aa:	0f9b      	lsrs	r3, r3, #30
 80049ac:	f7fc f974 	bl	8000c98 <__aeabi_uldivmod>
 80049b0:	4a26      	ldr	r2, [pc, #152]	@ (8004a4c <HAL_UART_Init+0x120>)
 80049b2:	fba2 1300 	umull	r1, r3, r2, r0
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	2164      	movs	r1, #100	@ 0x64
 80049ba:	fb01 0013 	mls	r0, r1, r3, r0
 80049be:	0100      	lsls	r0, r0, #4
 80049c0:	3032      	adds	r0, #50	@ 0x32
 80049c2:	fba2 2000 	umull	r2, r0, r2, r0
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 80049cc:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ce:	692a      	ldr	r2, [r5, #16]
 80049d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049d4:	612a      	str	r2, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049d6:	696a      	ldr	r2, [r5, #20]
 80049d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049dc:	616a      	str	r2, [r5, #20]
  __HAL_UART_ENABLE(huart);
 80049de:	68ea      	ldr	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e0:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80049e2:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80049e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80049e8:	60ea      	str	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ea:	6463      	str	r3, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80049ec:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80049f0:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  return HAL_OK;
 80049f4:	4618      	mov	r0, r3
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049f6:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80049f8:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80049fa:	f7ff fba3 	bl	8004144 <HAL_RCC_GetPCLK2Freq>
 80049fe:	e7ca      	b.n	8004996 <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a00:	18da      	adds	r2, r3, r3
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	415b      	adcs	r3, r3
 8004a08:	f7fc f946 	bl	8000c98 <__aeabi_uldivmod>
 8004a0c:	4a0f      	ldr	r2, [pc, #60]	@ (8004a4c <HAL_UART_Init+0x120>)
 8004a0e:	fba2 3100 	umull	r3, r1, r2, r0
 8004a12:	0949      	lsrs	r1, r1, #5
 8004a14:	2364      	movs	r3, #100	@ 0x64
 8004a16:	fb03 0311 	mls	r3, r3, r1, r0
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	3332      	adds	r3, #50	@ 0x32
 8004a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a22:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8004a26:	091b      	lsrs	r3, r3, #4
 8004a28:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004a2c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a30:	4413      	add	r3, r2
 8004a32:	60ab      	str	r3, [r5, #8]
 8004a34:	e7cb      	b.n	80049ce <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 8004a36:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8004a3a:	f7fd fbdd 	bl	80021f8 <HAL_UART_MspInit>
 8004a3e:	e780      	b.n	8004942 <HAL_UART_Init+0x16>
    return HAL_ERROR;
 8004a40:	2001      	movs	r0, #1
}
 8004a42:	4770      	bx	lr
 8004a44:	40011000 	.word	0x40011000
 8004a48:	40011400 	.word	0x40011400
 8004a4c:	51eb851f 	.word	0x51eb851f

08004a50 <HAL_UART_Transmit>:
{
 8004a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a54:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8004a56:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8004a5a:	2820      	cmp	r0, #32
 8004a5c:	d155      	bne.n	8004b0a <HAL_UART_Transmit+0xba>
    if ((pData == NULL) || (Size == 0U))
 8004a5e:	460d      	mov	r5, r1
 8004a60:	b109      	cbz	r1, 8004a66 <HAL_UART_Transmit+0x16>
 8004a62:	4616      	mov	r6, r2
 8004a64:	b912      	cbnz	r2, 8004a6c <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 8004a66:	2001      	movs	r0, #1
}
 8004a68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a6c:	461f      	mov	r7, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6e:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a72:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a74:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a78:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8004a7c:	f7fd fc74 	bl	8002368 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a80:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 8004a82:	84a6      	strh	r6, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8004a88:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8004a8a:	84e6      	strh	r6, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a8c:	d040      	beq.n	8004b10 <HAL_UART_Transmit+0xc0>
    while (huart->TxXferCount > 0U)
 8004a8e:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a90:	6822      	ldr	r2, [r4, #0]
    while (huart->TxXferCount > 0U)
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d047      	beq.n	8004b28 <HAL_UART_Transmit+0xd8>
 8004a98:	1c7b      	adds	r3, r7, #1
 8004a9a:	d124      	bne.n	8004ae6 <HAL_UART_Transmit+0x96>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a9c:	6813      	ldr	r3, [r2, #0]
 8004a9e:	061f      	lsls	r7, r3, #24
 8004aa0:	d5fc      	bpl.n	8004a9c <HAL_UART_Transmit+0x4c>
      if (pdata8bits == NULL)
 8004aa2:	2d00      	cmp	r5, #0
 8004aa4:	d02c      	beq.n	8004b00 <HAL_UART_Transmit+0xb0>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aa6:	f815 3b01 	ldrb.w	r3, [r5], #1
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aaa:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8004aac:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	84e3      	strh	r3, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ab4:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1ef      	bne.n	8004a9c <HAL_UART_Transmit+0x4c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004abc:	6813      	ldr	r3, [r2, #0]
 8004abe:	0659      	lsls	r1, r3, #25
 8004ac0:	d5fc      	bpl.n	8004abc <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8004ac2:	2320      	movs	r3, #32
 8004ac4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8004ac8:	2000      	movs	r0, #0
}
 8004aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 8004ace:	2d00      	cmp	r5, #0
 8004ad0:	d03d      	beq.n	8004b4e <HAL_UART_Transmit+0xfe>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ad2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004ad6:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8004ad8:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	84e3      	strh	r3, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004ae0:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	b313      	cbz	r3, 8004b2c <HAL_UART_Transmit+0xdc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae6:	6813      	ldr	r3, [r2, #0]
 8004ae8:	061e      	lsls	r6, r3, #24
 8004aea:	d4f0      	bmi.n	8004ace <HAL_UART_Transmit+0x7e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aec:	f7fd fc3c 	bl	8002368 <HAL_GetTick>
 8004af0:	eba0 0309 	sub.w	r3, r0, r9
 8004af4:	429f      	cmp	r7, r3
 8004af6:	d311      	bcc.n	8004b1c <HAL_UART_Transmit+0xcc>
 8004af8:	b187      	cbz	r7, 8004b1c <HAL_UART_Transmit+0xcc>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004afa:	6822      	ldr	r2, [r4, #0]
 8004afc:	68d3      	ldr	r3, [r2, #12]
 8004afe:	e7f2      	b.n	8004ae6 <HAL_UART_Transmit+0x96>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b00:	f838 3b02 	ldrh.w	r3, [r8], #2
 8004b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b08:	e7cf      	b.n	8004aaa <HAL_UART_Transmit+0x5a>
    return HAL_BUSY;
 8004b0a:	2002      	movs	r0, #2
}
 8004b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b10:	6923      	ldr	r3, [r4, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1bb      	bne.n	8004a8e <HAL_UART_Transmit+0x3e>
      pdata16bits = (const uint16_t *) pData;
 8004b16:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8004b18:	461d      	mov	r5, r3
 8004b1a:	e7b8      	b.n	8004a8e <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 8004b1c:	2320      	movs	r3, #32
 8004b1e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8004b22:	2003      	movs	r0, #3
}
 8004b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b28:	1c78      	adds	r0, r7, #1
 8004b2a:	d0c7      	beq.n	8004abc <HAL_UART_Transmit+0x6c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b2c:	6813      	ldr	r3, [r2, #0]
 8004b2e:	065b      	lsls	r3, r3, #25
 8004b30:	d4c7      	bmi.n	8004ac2 <HAL_UART_Transmit+0x72>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b32:	f7fd fc19 	bl	8002368 <HAL_GetTick>
 8004b36:	eba0 0309 	sub.w	r3, r0, r9
 8004b3a:	429f      	cmp	r7, r3
 8004b3c:	d3ee      	bcc.n	8004b1c <HAL_UART_Transmit+0xcc>
 8004b3e:	2f00      	cmp	r7, #0
 8004b40:	d0ec      	beq.n	8004b1c <HAL_UART_Transmit+0xcc>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b42:	6822      	ldr	r2, [r4, #0]
 8004b44:	68d3      	ldr	r3, [r2, #12]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b46:	6813      	ldr	r3, [r2, #0]
 8004b48:	065b      	lsls	r3, r3, #25
 8004b4a:	d5f2      	bpl.n	8004b32 <HAL_UART_Transmit+0xe2>
 8004b4c:	e7b9      	b.n	8004ac2 <HAL_UART_Transmit+0x72>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b4e:	f838 3b02 	ldrh.w	r3, [r8], #2
 8004b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b56:	e7be      	b.n	8004ad6 <HAL_UART_Transmit+0x86>

08004b58 <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b58:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	d120      	bne.n	8004ba2 <HAL_UART_Receive_IT+0x4a>
    if ((pData == NULL) || (Size == 0U))
 8004b60:	b101      	cbz	r1, 8004b64 <HAL_UART_Receive_IT+0xc>
 8004b62:	b90a      	cbnz	r2, 8004b68 <HAL_UART_Receive_IT+0x10>
      return HAL_ERROR;
 8004b64:	2001      	movs	r0, #1
}
 8004b66:	4770      	bx	lr
{
 8004b68:	b410      	push	{r4}
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b6a:	6904      	ldr	r4, [r0, #16]
  huart->pRxBuffPtr = pData;
 8004b6c:	6281      	str	r1, [r0, #40]	@ 0x28
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b6e:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b70:	2122      	movs	r1, #34	@ 0x22
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b72:	6303      	str	r3, [r0, #48]	@ 0x30
  huart->RxXferSize = Size;
 8004b74:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004b76:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b78:	6443      	str	r3, [r0, #68]	@ 0x44
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b7a:	6803      	ldr	r3, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b7c:	f880 1042 	strb.w	r1, [r0, #66]	@ 0x42
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b80:	b11c      	cbz	r4, 8004b8a <HAL_UART_Receive_IT+0x32>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b88:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b8a:	695a      	ldr	r2, [r3, #20]
}
 8004b8c:	f85d 4b04 	ldr.w	r4, [sp], #4
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b90:	f042 0201 	orr.w	r2, r2, #1
 8004b94:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b96:	68da      	ldr	r2, [r3, #12]
 8004b98:	f042 0220 	orr.w	r2, r2, #32
    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b9c:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b9e:	60da      	str	r2, [r3, #12]
}
 8004ba0:	4770      	bx	lr
    return HAL_BUSY;
 8004ba2:	2002      	movs	r0, #2
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop

08004ba8 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop

08004bac <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop

08004bb0 <UART_DMAAbortOnError>:
{
 8004bb0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bb2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  HAL_UART_ErrorCallback(huart);
 8004bb8:	f7ff fff8 	bl	8004bac <HAL_UART_ErrorCallback>
}
 8004bbc:	bd08      	pop	{r3, pc}
 8004bbe:	bf00      	nop

08004bc0 <HAL_UARTEx_RxEventCallback>:
}
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop

08004bc4 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bc4:	6883      	ldr	r3, [r0, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bc6:	6801      	ldr	r1, [r0, #0]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004bc8:	6a82      	ldr	r2, [r0, #40]	@ 0x28
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bce:	d042      	beq.n	8004c56 <UART_Receive_IT.part.0.isra.0+0x92>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d039      	beq.n	8004c48 <UART_Receive_IT.part.0.isra.0+0x84>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bd4:	684b      	ldr	r3, [r1, #4]
 8004bd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bda:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004bdc:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8004bde:	3201      	adds	r2, #1
    if (--huart->RxXferCount == 0U)
 8004be0:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
      huart->pRxBuffPtr += 2U;
 8004be2:	6282      	str	r2, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8004be4:	3b01      	subs	r3, #1
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d132      	bne.n	8004c54 <UART_Receive_IT.part.0.isra.0+0x90>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004bee:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bf0:	6802      	ldr	r2, [r0, #0]
 8004bf2:	68d1      	ldr	r1, [r2, #12]
 8004bf4:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004bf8:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004bfa:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004bfc:	68d1      	ldr	r1, [r2, #12]
 8004bfe:	f421 7180 	bic.w	r1, r1, #256	@ 0x100
 8004c02:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c04:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004c06:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c0a:	f021 0101 	bic.w	r1, r1, #1
 8004c0e:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004c10:	f880 c042 	strb.w	ip, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c14:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c16:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8004c18:	2901      	cmp	r1, #1
 8004c1a:	d125      	bne.n	8004c68 <UART_Receive_IT.part.0.isra.0+0xa4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c1c:	6303      	str	r3, [r0, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1e:	f102 030c 	add.w	r3, r2, #12
 8004c22:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c26:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c2a:	f102 0c0c 	add.w	ip, r2, #12
 8004c2e:	e84c 3100 	strex	r1, r3, [ip]
 8004c32:	2900      	cmp	r1, #0
 8004c34:	d1f3      	bne.n	8004c1e <UART_Receive_IT.part.0.isra.0+0x5a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c36:	6813      	ldr	r3, [r2, #0]
 8004c38:	06db      	lsls	r3, r3, #27
 8004c3a:	d41a      	bmi.n	8004c72 <UART_Receive_IT.part.0.isra.0+0xae>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c3c:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8004c3e:	f7ff ffbf 	bl	8004bc0 <HAL_UARTEx_RxEventCallback>
}
 8004c42:	b003      	add	sp, #12
 8004c44:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c48:	6903      	ldr	r3, [r0, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d1c2      	bne.n	8004bd4 <UART_Receive_IT.part.0.isra.0+0x10>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c4e:	684b      	ldr	r3, [r1, #4]
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	e7c2      	b.n	8004bda <UART_Receive_IT.part.0.isra.0+0x16>
 8004c54:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c56:	6903      	ldr	r3, [r0, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1f8      	bne.n	8004c4e <UART_Receive_IT.part.0.isra.0+0x8a>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c5c:	684b      	ldr	r3, [r1, #4]
 8004c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c62:	f822 3b02 	strh.w	r3, [r2], #2
      huart->pRxBuffPtr += 2U;
 8004c66:	e7bb      	b.n	8004be0 <UART_Receive_IT.part.0.isra.0+0x1c>
        HAL_UART_RxCpltCallback(huart);
 8004c68:	f7fc ffe6 	bl	8001c38 <HAL_UART_RxCpltCallback>
}
 8004c6c:	b003      	add	sp, #12
 8004c6e:	f85d fb04 	ldr.w	pc, [sp], #4
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c72:	2300      	movs	r3, #0
 8004c74:	9301      	str	r3, [sp, #4]
 8004c76:	6813      	ldr	r3, [r2, #0]
 8004c78:	9301      	str	r3, [sp, #4]
 8004c7a:	6853      	ldr	r3, [r2, #4]
 8004c7c:	9301      	str	r3, [sp, #4]
 8004c7e:	9b01      	ldr	r3, [sp, #4]
 8004c80:	e7dc      	b.n	8004c3c <UART_Receive_IT.part.0.isra.0+0x78>
 8004c82:	bf00      	nop

08004c84 <HAL_UART_IRQHandler>:
{
 8004c84:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c86:	6803      	ldr	r3, [r0, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c8a:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c8c:	6959      	ldr	r1, [r3, #20]
  if (errorflags == RESET)
 8004c8e:	f012 0f0f 	tst.w	r2, #15
{
 8004c92:	b083      	sub	sp, #12
 8004c94:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8004c96:	d172      	bne.n	8004d7e <HAL_UART_IRQHandler+0xfa>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c98:	0691      	lsls	r1, r2, #26
 8004c9a:	d502      	bpl.n	8004ca2 <HAL_UART_IRQHandler+0x1e>
 8004c9c:	06a9      	lsls	r1, r5, #26
 8004c9e:	f100 80a5 	bmi.w	8004dec <HAL_UART_IRQHandler+0x168>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004ca4:	2901      	cmp	r1, #1
 8004ca6:	d00b      	beq.n	8004cc0 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ca8:	0610      	lsls	r0, r2, #24
 8004caa:	d502      	bpl.n	8004cb2 <HAL_UART_IRQHandler+0x2e>
 8004cac:	0629      	lsls	r1, r5, #24
 8004cae:	f100 80a7 	bmi.w	8004e00 <HAL_UART_IRQHandler+0x17c>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004cb2:	0652      	lsls	r2, r2, #25
 8004cb4:	d502      	bpl.n	8004cbc <HAL_UART_IRQHandler+0x38>
 8004cb6:	0668      	lsls	r0, r5, #25
 8004cb8:	f100 80c1 	bmi.w	8004e3e <HAL_UART_IRQHandler+0x1ba>
}
 8004cbc:	b003      	add	sp, #12
 8004cbe:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004cc0:	06d0      	lsls	r0, r2, #27
 8004cc2:	d5f1      	bpl.n	8004ca8 <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004cc4:	06e9      	lsls	r1, r5, #27
 8004cc6:	d5ef      	bpl.n	8004ca8 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cc8:	2200      	movs	r2, #0
 8004cca:	9201      	str	r2, [sp, #4]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	9201      	str	r2, [sp, #4]
 8004cd0:	685a      	ldr	r2, [r3, #4]
 8004cd2:	9201      	str	r2, [sp, #4]
 8004cd4:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd6:	6959      	ldr	r1, [r3, #20]
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cd8:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cda:	064d      	lsls	r5, r1, #25
 8004cdc:	f140 813d 	bpl.w	8004f5a <HAL_UART_IRQHandler+0x2d6>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ce0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004ce2:	6801      	ldr	r1, [r0, #0]
 8004ce4:	6849      	ldr	r1, [r1, #4]
 8004ce6:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8004ce8:	2900      	cmp	r1, #0
 8004cea:	f000 8170 	beq.w	8004fce <HAL_UART_IRQHandler+0x34a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cee:	4291      	cmp	r1, r2
 8004cf0:	f080 816d 	bcs.w	8004fce <HAL_UART_IRQHandler+0x34a>
        huart->RxXferCount = nb_remaining_rx_data;
 8004cf4:	85e1      	strh	r1, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cf6:	69c1      	ldr	r1, [r0, #28]
 8004cf8:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8004cfc:	d036      	beq.n	8004d6c <HAL_UART_IRQHandler+0xe8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfe:	f103 020c 	add.w	r2, r3, #12
 8004d02:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d0a:	f103 050c 	add.w	r5, r3, #12
 8004d0e:	e845 2100 	strex	r1, r2, [r5]
 8004d12:	2900      	cmp	r1, #0
 8004d14:	d1f3      	bne.n	8004cfe <HAL_UART_IRQHandler+0x7a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d16:	f103 0214 	add.w	r2, r3, #20
 8004d1a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d1e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d22:	f103 0514 	add.w	r5, r3, #20
 8004d26:	e845 2100 	strex	r1, r2, [r5]
 8004d2a:	2900      	cmp	r1, #0
 8004d2c:	d1f3      	bne.n	8004d16 <HAL_UART_IRQHandler+0x92>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2e:	f103 0214 	add.w	r2, r3, #20
 8004d32:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3a:	f103 0514 	add.w	r5, r3, #20
 8004d3e:	e845 2100 	strex	r1, r2, [r5]
 8004d42:	2900      	cmp	r1, #0
 8004d44:	d1f3      	bne.n	8004d2e <HAL_UART_IRQHandler+0xaa>
          huart->RxState = HAL_UART_STATE_READY;
 8004d46:	2220      	movs	r2, #32
 8004d48:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d4c:	6321      	str	r1, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4e:	f103 020c 	add.w	r2, r3, #12
 8004d52:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d56:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5a:	f103 050c 	add.w	r5, r3, #12
 8004d5e:	e845 2100 	strex	r1, r2, [r5]
 8004d62:	2900      	cmp	r1, #0
 8004d64:	d1f3      	bne.n	8004d4e <HAL_UART_IRQHandler+0xca>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d66:	f7fd fc0f 	bl	8002588 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d6a:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d70:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
 8004d72:	1a51      	subs	r1, r2, r1
 8004d74:	4620      	mov	r0, r4
 8004d76:	b289      	uxth	r1, r1
 8004d78:	f7ff ff22 	bl	8004bc0 <HAL_UARTEx_RxEventCallback>
 8004d7c:	e79e      	b.n	8004cbc <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d7e:	f011 0101 	ands.w	r1, r1, #1
 8004d82:	f040 80cf 	bne.w	8004f24 <HAL_UART_IRQHandler+0x2a0>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d86:	f415 7f90 	tst.w	r5, #288	@ 0x120
 8004d8a:	d08a      	beq.n	8004ca2 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d8c:	07d0      	lsls	r0, r2, #31
 8004d8e:	d50b      	bpl.n	8004da8 <HAL_UART_IRQHandler+0x124>
 8004d90:	05e8      	lsls	r0, r5, #23
 8004d92:	f140 80de 	bpl.w	8004f52 <HAL_UART_IRQHandler+0x2ce>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d96:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8004d98:	f040 0001 	orr.w	r0, r0, #1
 8004d9c:	6460      	str	r0, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d9e:	0750      	lsls	r0, r2, #29
 8004da0:	d55c      	bpl.n	8004e5c <HAL_UART_IRQHandler+0x1d8>
 8004da2:	2900      	cmp	r1, #0
 8004da4:	f040 80c2 	bne.w	8004f2c <HAL_UART_IRQHandler+0x2a8>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004da8:	0790      	lsls	r0, r2, #30
 8004daa:	d566      	bpl.n	8004e7a <HAL_UART_IRQHandler+0x1f6>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004dac:	0710      	lsls	r0, r2, #28
 8004dae:	f100 80cd 	bmi.w	8004f4c <HAL_UART_IRQHandler+0x2c8>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004db2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004db4:	2900      	cmp	r1, #0
 8004db6:	d081      	beq.n	8004cbc <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004db8:	0691      	lsls	r1, r2, #26
 8004dba:	d509      	bpl.n	8004dd0 <HAL_UART_IRQHandler+0x14c>
 8004dbc:	06aa      	lsls	r2, r5, #26
 8004dbe:	d507      	bpl.n	8004dd0 <HAL_UART_IRQHandler+0x14c>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dc0:	f894 2042 	ldrb.w	r2, [r4, #66]	@ 0x42
 8004dc4:	2a22      	cmp	r2, #34	@ 0x22
 8004dc6:	d103      	bne.n	8004dd0 <HAL_UART_IRQHandler+0x14c>
 8004dc8:	4620      	mov	r0, r4
 8004dca:	f7ff fefb 	bl	8004bc4 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dce:	6823      	ldr	r3, [r4, #0]
 8004dd0:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004dd2:	6c61      	ldr	r1, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dd4:	f002 0240 	and.w	r2, r2, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004dd8:	f001 0108 	and.w	r1, r1, #8
 8004ddc:	ea52 0501 	orrs.w	r5, r2, r1
 8004de0:	d155      	bne.n	8004e8e <HAL_UART_IRQHandler+0x20a>
        HAL_UART_ErrorCallback(huart);
 8004de2:	4620      	mov	r0, r4
 8004de4:	f7ff fee2 	bl	8004bac <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de8:	6465      	str	r5, [r4, #68]	@ 0x44
 8004dea:	e767      	b.n	8004cbc <HAL_UART_IRQHandler+0x38>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dec:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8004df0:	2b22      	cmp	r3, #34	@ 0x22
 8004df2:	f47f af63 	bne.w	8004cbc <HAL_UART_IRQHandler+0x38>
}
 8004df6:	b003      	add	sp, #12
 8004df8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004dfc:	f7ff bee2 	b.w	8004bc4 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e00:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8004e04:	2a21      	cmp	r2, #33	@ 0x21
 8004e06:	f47f af59 	bne.w	8004cbc <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e0a:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e0c:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e0e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8004e12:	f000 80e5 	beq.w	8004fe0 <HAL_UART_IRQHandler+0x35c>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e16:	1c51      	adds	r1, r2, #1
 8004e18:	6221      	str	r1, [r4, #32]
 8004e1a:	7812      	ldrb	r2, [r2, #0]
 8004e1c:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8004e1e:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8004e20:	3a01      	subs	r2, #1
 8004e22:	b292      	uxth	r2, r2
 8004e24:	84e2      	strh	r2, [r4, #38]	@ 0x26
 8004e26:	2a00      	cmp	r2, #0
 8004e28:	f47f af48 	bne.w	8004cbc <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e2c:	68da      	ldr	r2, [r3, #12]
 8004e2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e32:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e3a:	60da      	str	r2, [r3, #12]
 8004e3c:	e73e      	b.n	8004cbc <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e3e:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004e40:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e46:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8004e48:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8004e4a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8004e4e:	f7ff feab 	bl	8004ba8 <HAL_UART_TxCpltCallback>
    return;
 8004e52:	e733      	b.n	8004cbc <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e54:	05e8      	lsls	r0, r5, #23
 8004e56:	d49e      	bmi.n	8004d96 <HAL_UART_IRQHandler+0x112>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e58:	0750      	lsls	r0, r2, #29
 8004e5a:	d467      	bmi.n	8004f2c <HAL_UART_IRQHandler+0x2a8>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e5c:	0790      	lsls	r0, r2, #30
 8004e5e:	d50c      	bpl.n	8004e7a <HAL_UART_IRQHandler+0x1f6>
 8004e60:	2900      	cmp	r1, #0
 8004e62:	d0a3      	beq.n	8004dac <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e64:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004e66:	f041 0104 	orr.w	r1, r1, #4
 8004e6a:	6461      	str	r1, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e6c:	0711      	lsls	r1, r2, #28
 8004e6e:	d5a0      	bpl.n	8004db2 <HAL_UART_IRQHandler+0x12e>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e70:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004e72:	f041 0108 	orr.w	r1, r1, #8
 8004e76:	6461      	str	r1, [r4, #68]	@ 0x44
 8004e78:	e79b      	b.n	8004db2 <HAL_UART_IRQHandler+0x12e>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e7a:	0710      	lsls	r0, r2, #28
 8004e7c:	d599      	bpl.n	8004db2 <HAL_UART_IRQHandler+0x12e>
 8004e7e:	f005 0020 	and.w	r0, r5, #32
 8004e82:	4308      	orrs	r0, r1
 8004e84:	d1f4      	bne.n	8004e70 <HAL_UART_IRQHandler+0x1ec>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e86:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8004e88:	2a00      	cmp	r2, #0
 8004e8a:	d1a1      	bne.n	8004dd0 <HAL_UART_IRQHandler+0x14c>
 8004e8c:	e716      	b.n	8004cbc <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8e:	f103 020c 	add.w	r2, r3, #12
 8004e92:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e96:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9a:	f103 000c 	add.w	r0, r3, #12
 8004e9e:	e840 2100 	strex	r1, r2, [r0]
 8004ea2:	2900      	cmp	r1, #0
 8004ea4:	d1f3      	bne.n	8004e8e <HAL_UART_IRQHandler+0x20a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea6:	f103 0214 	add.w	r2, r3, #20
 8004eaa:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eae:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb2:	f103 0014 	add.w	r0, r3, #20
 8004eb6:	e840 2100 	strex	r1, r2, [r0]
 8004eba:	2900      	cmp	r1, #0
 8004ebc:	d1f3      	bne.n	8004ea6 <HAL_UART_IRQHandler+0x222>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ebe:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004ec0:	2a01      	cmp	r2, #1
 8004ec2:	d022      	beq.n	8004f0a <HAL_UART_IRQHandler+0x286>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec4:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004ec6:	2120      	movs	r1, #32
 8004ec8:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ecc:	6322      	str	r2, [r4, #48]	@ 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ece:	695a      	ldr	r2, [r3, #20]
 8004ed0:	0655      	lsls	r5, r2, #25
 8004ed2:	d534      	bpl.n	8004f3e <HAL_UART_IRQHandler+0x2ba>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed4:	f103 0214 	add.w	r2, r3, #20
 8004ed8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004edc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	f103 0014 	add.w	r0, r3, #20
 8004ee4:	e840 2100 	strex	r1, r2, [r0]
 8004ee8:	2900      	cmp	r1, #0
 8004eea:	d1f3      	bne.n	8004ed4 <HAL_UART_IRQHandler+0x250>
          if (huart->hdmarx != NULL)
 8004eec:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004eee:	b330      	cbz	r0, 8004f3e <HAL_UART_IRQHandler+0x2ba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ef0:	4b41      	ldr	r3, [pc, #260]	@ (8004ff8 <HAL_UART_IRQHandler+0x374>)
 8004ef2:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ef4:	f7fd fb92 	bl	800261c <HAL_DMA_Abort_IT>
 8004ef8:	2800      	cmp	r0, #0
 8004efa:	f43f aedf 	beq.w	8004cbc <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004efe:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8004f00:	6d03      	ldr	r3, [r0, #80]	@ 0x50
}
 8004f02:	b003      	add	sp, #12
 8004f04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f08:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0a:	f103 020c 	add.w	r2, r3, #12
 8004f0e:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f12:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f16:	f103 000c 	add.w	r0, r3, #12
 8004f1a:	e840 2100 	strex	r1, r2, [r0]
 8004f1e:	2900      	cmp	r1, #0
 8004f20:	d1f3      	bne.n	8004f0a <HAL_UART_IRQHandler+0x286>
 8004f22:	e7cf      	b.n	8004ec4 <HAL_UART_IRQHandler+0x240>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f24:	07d0      	lsls	r0, r2, #31
 8004f26:	d495      	bmi.n	8004e54 <HAL_UART_IRQHandler+0x1d0>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f28:	0750      	lsls	r0, r2, #29
 8004f2a:	d50c      	bpl.n	8004f46 <HAL_UART_IRQHandler+0x2c2>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f2c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004f2e:	f041 0102 	orr.w	r1, r1, #2
 8004f32:	6461      	str	r1, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f34:	0791      	lsls	r1, r2, #30
 8004f36:	d495      	bmi.n	8004e64 <HAL_UART_IRQHandler+0x1e0>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f38:	0711      	lsls	r1, r2, #28
 8004f3a:	d499      	bmi.n	8004e70 <HAL_UART_IRQHandler+0x1ec>
 8004f3c:	e739      	b.n	8004db2 <HAL_UART_IRQHandler+0x12e>
            HAL_UART_ErrorCallback(huart);
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f7ff fe34 	bl	8004bac <HAL_UART_ErrorCallback>
 8004f44:	e6ba      	b.n	8004cbc <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f46:	0791      	lsls	r1, r2, #30
 8004f48:	d48c      	bmi.n	8004e64 <HAL_UART_IRQHandler+0x1e0>
 8004f4a:	e7f5      	b.n	8004f38 <HAL_UART_IRQHandler+0x2b4>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f4c:	06a9      	lsls	r1, r5, #26
 8004f4e:	d48f      	bmi.n	8004e70 <HAL_UART_IRQHandler+0x1ec>
 8004f50:	e799      	b.n	8004e86 <HAL_UART_IRQHandler+0x202>
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f52:	0750      	lsls	r0, r2, #29
 8004f54:	f53f af28 	bmi.w	8004da8 <HAL_UART_IRQHandler+0x124>
 8004f58:	e780      	b.n	8004e5c <HAL_UART_IRQHandler+0x1d8>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f5a:	8de0      	ldrh	r0, [r4, #46]	@ 0x2e
      if ((huart->RxXferCount > 0U)
 8004f5c:	8de1      	ldrh	r1, [r4, #46]	@ 0x2e
 8004f5e:	b289      	uxth	r1, r1
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f60:	b280      	uxth	r0, r0
      if ((huart->RxXferCount > 0U)
 8004f62:	2900      	cmp	r1, #0
 8004f64:	f43f aeaa 	beq.w	8004cbc <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004f68:	1a12      	subs	r2, r2, r0
 8004f6a:	b291      	uxth	r1, r2
          && (nb_rx_data > 0U))
 8004f6c:	2900      	cmp	r1, #0
 8004f6e:	f43f aea5 	beq.w	8004cbc <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f72:	f103 020c 	add.w	r2, r3, #12
 8004f76:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f7a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	f103 050c 	add.w	r5, r3, #12
 8004f82:	e845 2000 	strex	r0, r2, [r5]
 8004f86:	2800      	cmp	r0, #0
 8004f88:	d1f3      	bne.n	8004f72 <HAL_UART_IRQHandler+0x2ee>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8a:	f103 0214 	add.w	r2, r3, #20
 8004f8e:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f92:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	f103 0514 	add.w	r5, r3, #20
 8004f9a:	e845 2000 	strex	r0, r2, [r5]
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	d1f3      	bne.n	8004f8a <HAL_UART_IRQHandler+0x306>
        huart->RxState = HAL_UART_STATE_READY;
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fa8:	6320      	str	r0, [r4, #48]	@ 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004faa:	f103 020c 	add.w	r2, r3, #12
 8004fae:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	f103 050c 	add.w	r5, r3, #12
 8004fba:	e845 2000 	strex	r0, r2, [r5]
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	d1f3      	bne.n	8004faa <HAL_UART_IRQHandler+0x326>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fc2:	2302      	movs	r3, #2
 8004fc4:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	f7ff fdfa 	bl	8004bc0 <HAL_UARTEx_RxEventCallback>
 8004fcc:	e676      	b.n	8004cbc <HAL_UART_IRQHandler+0x38>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004fce:	4291      	cmp	r1, r2
 8004fd0:	f47f ae74 	bne.w	8004cbc <HAL_UART_IRQHandler+0x38>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004fd4:	69c3      	ldr	r3, [r0, #28]
 8004fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fda:	f47f ae6f 	bne.w	8004cbc <HAL_UART_IRQHandler+0x38>
 8004fde:	e7f0      	b.n	8004fc2 <HAL_UART_IRQHandler+0x33e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fe0:	6921      	ldr	r1, [r4, #16]
 8004fe2:	2900      	cmp	r1, #0
 8004fe4:	f47f af17 	bne.w	8004e16 <HAL_UART_IRQHandler+0x192>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fe8:	f832 1b02 	ldrh.w	r1, [r2], #2
 8004fec:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004ff0:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ff2:	6222      	str	r2, [r4, #32]
 8004ff4:	e713      	b.n	8004e1e <HAL_UART_IRQHandler+0x19a>
 8004ff6:	bf00      	nop
 8004ff8:	08004bb1 	.word	0x08004bb1

08004ffc <arm_copy_f32>:
 8004ffc:	b4f0      	push	{r4, r5, r6, r7}
 8004ffe:	0897      	lsrs	r7, r2, #2
 8005000:	d01e      	beq.n	8005040 <arm_copy_f32+0x44>
 8005002:	f100 0410 	add.w	r4, r0, #16
 8005006:	f101 0310 	add.w	r3, r1, #16
 800500a:	463d      	mov	r5, r7
 800500c:	f854 6c10 	ldr.w	r6, [r4, #-16]
 8005010:	f843 6c10 	str.w	r6, [r3, #-16]
 8005014:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 8005018:	f843 6c0c 	str.w	r6, [r3, #-12]
 800501c:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8005020:	f843 6c08 	str.w	r6, [r3, #-8]
 8005024:	f854 6c04 	ldr.w	r6, [r4, #-4]
 8005028:	f843 6c04 	str.w	r6, [r3, #-4]
 800502c:	3d01      	subs	r5, #1
 800502e:	f104 0410 	add.w	r4, r4, #16
 8005032:	f103 0310 	add.w	r3, r3, #16
 8005036:	d1e9      	bne.n	800500c <arm_copy_f32+0x10>
 8005038:	eb00 1007 	add.w	r0, r0, r7, lsl #4
 800503c:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8005040:	f012 0203 	ands.w	r2, r2, #3
 8005044:	d009      	beq.n	800505a <arm_copy_f32+0x5e>
 8005046:	6803      	ldr	r3, [r0, #0]
 8005048:	600b      	str	r3, [r1, #0]
 800504a:	3a01      	subs	r2, #1
 800504c:	d005      	beq.n	800505a <arm_copy_f32+0x5e>
 800504e:	6843      	ldr	r3, [r0, #4]
 8005050:	604b      	str	r3, [r1, #4]
 8005052:	2a01      	cmp	r2, #1
 8005054:	bf1c      	itt	ne
 8005056:	6883      	ldrne	r3, [r0, #8]
 8005058:	608b      	strne	r3, [r1, #8]
 800505a:	bcf0      	pop	{r4, r5, r6, r7}
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop

08005060 <arm_mat_init_f32>:
 8005060:	8001      	strh	r1, [r0, #0]
 8005062:	8042      	strh	r2, [r0, #2]
 8005064:	6043      	str	r3, [r0, #4]
 8005066:	4770      	bx	lr

08005068 <atof>:
 8005068:	2100      	movs	r1, #0
 800506a:	f000 be0b 	b.w	8005c84 <strtod>

0800506e <sulp>:
 800506e:	b570      	push	{r4, r5, r6, lr}
 8005070:	4604      	mov	r4, r0
 8005072:	460d      	mov	r5, r1
 8005074:	ec45 4b10 	vmov	d0, r4, r5
 8005078:	4616      	mov	r6, r2
 800507a:	f003 fce9 	bl	8008a50 <__ulp>
 800507e:	ec51 0b10 	vmov	r0, r1, d0
 8005082:	b17e      	cbz	r6, 80050a4 <sulp+0x36>
 8005084:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005088:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800508c:	2b00      	cmp	r3, #0
 800508e:	dd09      	ble.n	80050a4 <sulp+0x36>
 8005090:	051b      	lsls	r3, r3, #20
 8005092:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005096:	2400      	movs	r4, #0
 8005098:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800509c:	4622      	mov	r2, r4
 800509e:	462b      	mov	r3, r5
 80050a0:	f7fb fab2 	bl	8000608 <__aeabi_dmul>
 80050a4:	ec41 0b10 	vmov	d0, r0, r1
 80050a8:	bd70      	pop	{r4, r5, r6, pc}
 80050aa:	0000      	movs	r0, r0
 80050ac:	0000      	movs	r0, r0
	...

080050b0 <_strtod_l>:
 80050b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b4:	b09f      	sub	sp, #124	@ 0x7c
 80050b6:	460c      	mov	r4, r1
 80050b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80050ba:	2200      	movs	r2, #0
 80050bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80050be:	9005      	str	r0, [sp, #20]
 80050c0:	f04f 0a00 	mov.w	sl, #0
 80050c4:	f04f 0b00 	mov.w	fp, #0
 80050c8:	460a      	mov	r2, r1
 80050ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80050cc:	7811      	ldrb	r1, [r2, #0]
 80050ce:	292b      	cmp	r1, #43	@ 0x2b
 80050d0:	d04a      	beq.n	8005168 <_strtod_l+0xb8>
 80050d2:	d838      	bhi.n	8005146 <_strtod_l+0x96>
 80050d4:	290d      	cmp	r1, #13
 80050d6:	d832      	bhi.n	800513e <_strtod_l+0x8e>
 80050d8:	2908      	cmp	r1, #8
 80050da:	d832      	bhi.n	8005142 <_strtod_l+0x92>
 80050dc:	2900      	cmp	r1, #0
 80050de:	d03b      	beq.n	8005158 <_strtod_l+0xa8>
 80050e0:	2200      	movs	r2, #0
 80050e2:	920e      	str	r2, [sp, #56]	@ 0x38
 80050e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80050e6:	782a      	ldrb	r2, [r5, #0]
 80050e8:	2a30      	cmp	r2, #48	@ 0x30
 80050ea:	f040 80b2 	bne.w	8005252 <_strtod_l+0x1a2>
 80050ee:	786a      	ldrb	r2, [r5, #1]
 80050f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80050f4:	2a58      	cmp	r2, #88	@ 0x58
 80050f6:	d16e      	bne.n	80051d6 <_strtod_l+0x126>
 80050f8:	9302      	str	r3, [sp, #8]
 80050fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80050fc:	9301      	str	r3, [sp, #4]
 80050fe:	ab1a      	add	r3, sp, #104	@ 0x68
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	4a8f      	ldr	r2, [pc, #572]	@ (8005340 <_strtod_l+0x290>)
 8005104:	9805      	ldr	r0, [sp, #20]
 8005106:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005108:	a919      	add	r1, sp, #100	@ 0x64
 800510a:	f002 fd9b 	bl	8007c44 <__gethex>
 800510e:	f010 060f 	ands.w	r6, r0, #15
 8005112:	4604      	mov	r4, r0
 8005114:	d005      	beq.n	8005122 <_strtod_l+0x72>
 8005116:	2e06      	cmp	r6, #6
 8005118:	d128      	bne.n	800516c <_strtod_l+0xbc>
 800511a:	3501      	adds	r5, #1
 800511c:	2300      	movs	r3, #0
 800511e:	9519      	str	r5, [sp, #100]	@ 0x64
 8005120:	930e      	str	r3, [sp, #56]	@ 0x38
 8005122:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005124:	2b00      	cmp	r3, #0
 8005126:	f040 858e 	bne.w	8005c46 <_strtod_l+0xb96>
 800512a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800512c:	b1cb      	cbz	r3, 8005162 <_strtod_l+0xb2>
 800512e:	4652      	mov	r2, sl
 8005130:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8005134:	ec43 2b10 	vmov	d0, r2, r3
 8005138:	b01f      	add	sp, #124	@ 0x7c
 800513a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513e:	2920      	cmp	r1, #32
 8005140:	d1ce      	bne.n	80050e0 <_strtod_l+0x30>
 8005142:	3201      	adds	r2, #1
 8005144:	e7c1      	b.n	80050ca <_strtod_l+0x1a>
 8005146:	292d      	cmp	r1, #45	@ 0x2d
 8005148:	d1ca      	bne.n	80050e0 <_strtod_l+0x30>
 800514a:	2101      	movs	r1, #1
 800514c:	910e      	str	r1, [sp, #56]	@ 0x38
 800514e:	1c51      	adds	r1, r2, #1
 8005150:	9119      	str	r1, [sp, #100]	@ 0x64
 8005152:	7852      	ldrb	r2, [r2, #1]
 8005154:	2a00      	cmp	r2, #0
 8005156:	d1c5      	bne.n	80050e4 <_strtod_l+0x34>
 8005158:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800515a:	9419      	str	r4, [sp, #100]	@ 0x64
 800515c:	2b00      	cmp	r3, #0
 800515e:	f040 8570 	bne.w	8005c42 <_strtod_l+0xb92>
 8005162:	4652      	mov	r2, sl
 8005164:	465b      	mov	r3, fp
 8005166:	e7e5      	b.n	8005134 <_strtod_l+0x84>
 8005168:	2100      	movs	r1, #0
 800516a:	e7ef      	b.n	800514c <_strtod_l+0x9c>
 800516c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800516e:	b13a      	cbz	r2, 8005180 <_strtod_l+0xd0>
 8005170:	2135      	movs	r1, #53	@ 0x35
 8005172:	a81c      	add	r0, sp, #112	@ 0x70
 8005174:	f003 fd66 	bl	8008c44 <__copybits>
 8005178:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800517a:	9805      	ldr	r0, [sp, #20]
 800517c:	f003 f93c 	bl	80083f8 <_Bfree>
 8005180:	3e01      	subs	r6, #1
 8005182:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005184:	2e04      	cmp	r6, #4
 8005186:	d806      	bhi.n	8005196 <_strtod_l+0xe6>
 8005188:	e8df f006 	tbb	[pc, r6]
 800518c:	201d0314 	.word	0x201d0314
 8005190:	14          	.byte	0x14
 8005191:	00          	.byte	0x00
 8005192:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005196:	05e1      	lsls	r1, r4, #23
 8005198:	bf48      	it	mi
 800519a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800519e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80051a2:	0d1b      	lsrs	r3, r3, #20
 80051a4:	051b      	lsls	r3, r3, #20
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1bb      	bne.n	8005122 <_strtod_l+0x72>
 80051aa:	f001 fdf5 	bl	8006d98 <__errno>
 80051ae:	2322      	movs	r3, #34	@ 0x22
 80051b0:	6003      	str	r3, [r0, #0]
 80051b2:	e7b6      	b.n	8005122 <_strtod_l+0x72>
 80051b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80051b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80051bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80051c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80051c4:	e7e7      	b.n	8005196 <_strtod_l+0xe6>
 80051c6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8005348 <_strtod_l+0x298>
 80051ca:	e7e4      	b.n	8005196 <_strtod_l+0xe6>
 80051cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80051d0:	f04f 3aff 	mov.w	sl, #4294967295
 80051d4:	e7df      	b.n	8005196 <_strtod_l+0xe6>
 80051d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	9219      	str	r2, [sp, #100]	@ 0x64
 80051dc:	785b      	ldrb	r3, [r3, #1]
 80051de:	2b30      	cmp	r3, #48	@ 0x30
 80051e0:	d0f9      	beq.n	80051d6 <_strtod_l+0x126>
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d09d      	beq.n	8005122 <_strtod_l+0x72>
 80051e6:	2301      	movs	r3, #1
 80051e8:	2700      	movs	r7, #0
 80051ea:	9308      	str	r3, [sp, #32]
 80051ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80051ee:	930c      	str	r3, [sp, #48]	@ 0x30
 80051f0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80051f2:	46b9      	mov	r9, r7
 80051f4:	220a      	movs	r2, #10
 80051f6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80051f8:	7805      	ldrb	r5, [r0, #0]
 80051fa:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80051fe:	b2d9      	uxtb	r1, r3
 8005200:	2909      	cmp	r1, #9
 8005202:	d928      	bls.n	8005256 <_strtod_l+0x1a6>
 8005204:	494f      	ldr	r1, [pc, #316]	@ (8005344 <_strtod_l+0x294>)
 8005206:	2201      	movs	r2, #1
 8005208:	f001 fd3f 	bl	8006c8a <strncmp>
 800520c:	2800      	cmp	r0, #0
 800520e:	d032      	beq.n	8005276 <_strtod_l+0x1c6>
 8005210:	2000      	movs	r0, #0
 8005212:	462a      	mov	r2, r5
 8005214:	900a      	str	r0, [sp, #40]	@ 0x28
 8005216:	464d      	mov	r5, r9
 8005218:	4603      	mov	r3, r0
 800521a:	2a65      	cmp	r2, #101	@ 0x65
 800521c:	d001      	beq.n	8005222 <_strtod_l+0x172>
 800521e:	2a45      	cmp	r2, #69	@ 0x45
 8005220:	d114      	bne.n	800524c <_strtod_l+0x19c>
 8005222:	b91d      	cbnz	r5, 800522c <_strtod_l+0x17c>
 8005224:	9a08      	ldr	r2, [sp, #32]
 8005226:	4302      	orrs	r2, r0
 8005228:	d096      	beq.n	8005158 <_strtod_l+0xa8>
 800522a:	2500      	movs	r5, #0
 800522c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800522e:	1c62      	adds	r2, r4, #1
 8005230:	9219      	str	r2, [sp, #100]	@ 0x64
 8005232:	7862      	ldrb	r2, [r4, #1]
 8005234:	2a2b      	cmp	r2, #43	@ 0x2b
 8005236:	d07a      	beq.n	800532e <_strtod_l+0x27e>
 8005238:	2a2d      	cmp	r2, #45	@ 0x2d
 800523a:	d07e      	beq.n	800533a <_strtod_l+0x28a>
 800523c:	f04f 0c00 	mov.w	ip, #0
 8005240:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005244:	2909      	cmp	r1, #9
 8005246:	f240 8085 	bls.w	8005354 <_strtod_l+0x2a4>
 800524a:	9419      	str	r4, [sp, #100]	@ 0x64
 800524c:	f04f 0800 	mov.w	r8, #0
 8005250:	e0a5      	b.n	800539e <_strtod_l+0x2ee>
 8005252:	2300      	movs	r3, #0
 8005254:	e7c8      	b.n	80051e8 <_strtod_l+0x138>
 8005256:	f1b9 0f08 	cmp.w	r9, #8
 800525a:	bfd8      	it	le
 800525c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800525e:	f100 0001 	add.w	r0, r0, #1
 8005262:	bfda      	itte	le
 8005264:	fb02 3301 	mlale	r3, r2, r1, r3
 8005268:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800526a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800526e:	f109 0901 	add.w	r9, r9, #1
 8005272:	9019      	str	r0, [sp, #100]	@ 0x64
 8005274:	e7bf      	b.n	80051f6 <_strtod_l+0x146>
 8005276:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	9219      	str	r2, [sp, #100]	@ 0x64
 800527c:	785a      	ldrb	r2, [r3, #1]
 800527e:	f1b9 0f00 	cmp.w	r9, #0
 8005282:	d03b      	beq.n	80052fc <_strtod_l+0x24c>
 8005284:	900a      	str	r0, [sp, #40]	@ 0x28
 8005286:	464d      	mov	r5, r9
 8005288:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800528c:	2b09      	cmp	r3, #9
 800528e:	d912      	bls.n	80052b6 <_strtod_l+0x206>
 8005290:	2301      	movs	r3, #1
 8005292:	e7c2      	b.n	800521a <_strtod_l+0x16a>
 8005294:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	9219      	str	r2, [sp, #100]	@ 0x64
 800529a:	785a      	ldrb	r2, [r3, #1]
 800529c:	3001      	adds	r0, #1
 800529e:	2a30      	cmp	r2, #48	@ 0x30
 80052a0:	d0f8      	beq.n	8005294 <_strtod_l+0x1e4>
 80052a2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	f200 84d2 	bhi.w	8005c50 <_strtod_l+0xba0>
 80052ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80052ae:	900a      	str	r0, [sp, #40]	@ 0x28
 80052b0:	2000      	movs	r0, #0
 80052b2:	930c      	str	r3, [sp, #48]	@ 0x30
 80052b4:	4605      	mov	r5, r0
 80052b6:	3a30      	subs	r2, #48	@ 0x30
 80052b8:	f100 0301 	add.w	r3, r0, #1
 80052bc:	d018      	beq.n	80052f0 <_strtod_l+0x240>
 80052be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80052c0:	4419      	add	r1, r3
 80052c2:	910a      	str	r1, [sp, #40]	@ 0x28
 80052c4:	462e      	mov	r6, r5
 80052c6:	f04f 0e0a 	mov.w	lr, #10
 80052ca:	1c71      	adds	r1, r6, #1
 80052cc:	eba1 0c05 	sub.w	ip, r1, r5
 80052d0:	4563      	cmp	r3, ip
 80052d2:	dc15      	bgt.n	8005300 <_strtod_l+0x250>
 80052d4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80052d8:	182b      	adds	r3, r5, r0
 80052da:	2b08      	cmp	r3, #8
 80052dc:	f105 0501 	add.w	r5, r5, #1
 80052e0:	4405      	add	r5, r0
 80052e2:	dc1a      	bgt.n	800531a <_strtod_l+0x26a>
 80052e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80052e6:	230a      	movs	r3, #10
 80052e8:	fb03 2301 	mla	r3, r3, r1, r2
 80052ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80052ee:	2300      	movs	r3, #0
 80052f0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80052f2:	1c51      	adds	r1, r2, #1
 80052f4:	9119      	str	r1, [sp, #100]	@ 0x64
 80052f6:	7852      	ldrb	r2, [r2, #1]
 80052f8:	4618      	mov	r0, r3
 80052fa:	e7c5      	b.n	8005288 <_strtod_l+0x1d8>
 80052fc:	4648      	mov	r0, r9
 80052fe:	e7ce      	b.n	800529e <_strtod_l+0x1ee>
 8005300:	2e08      	cmp	r6, #8
 8005302:	dc05      	bgt.n	8005310 <_strtod_l+0x260>
 8005304:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005306:	fb0e f606 	mul.w	r6, lr, r6
 800530a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800530c:	460e      	mov	r6, r1
 800530e:	e7dc      	b.n	80052ca <_strtod_l+0x21a>
 8005310:	2910      	cmp	r1, #16
 8005312:	bfd8      	it	le
 8005314:	fb0e f707 	mulle.w	r7, lr, r7
 8005318:	e7f8      	b.n	800530c <_strtod_l+0x25c>
 800531a:	2b0f      	cmp	r3, #15
 800531c:	bfdc      	itt	le
 800531e:	230a      	movle	r3, #10
 8005320:	fb03 2707 	mlale	r7, r3, r7, r2
 8005324:	e7e3      	b.n	80052ee <_strtod_l+0x23e>
 8005326:	2300      	movs	r3, #0
 8005328:	930a      	str	r3, [sp, #40]	@ 0x28
 800532a:	2301      	movs	r3, #1
 800532c:	e77a      	b.n	8005224 <_strtod_l+0x174>
 800532e:	f04f 0c00 	mov.w	ip, #0
 8005332:	1ca2      	adds	r2, r4, #2
 8005334:	9219      	str	r2, [sp, #100]	@ 0x64
 8005336:	78a2      	ldrb	r2, [r4, #2]
 8005338:	e782      	b.n	8005240 <_strtod_l+0x190>
 800533a:	f04f 0c01 	mov.w	ip, #1
 800533e:	e7f8      	b.n	8005332 <_strtod_l+0x282>
 8005340:	0800e9b8 	.word	0x0800e9b8
 8005344:	0800e7cc 	.word	0x0800e7cc
 8005348:	7ff00000 	.word	0x7ff00000
 800534c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800534e:	1c51      	adds	r1, r2, #1
 8005350:	9119      	str	r1, [sp, #100]	@ 0x64
 8005352:	7852      	ldrb	r2, [r2, #1]
 8005354:	2a30      	cmp	r2, #48	@ 0x30
 8005356:	d0f9      	beq.n	800534c <_strtod_l+0x29c>
 8005358:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800535c:	2908      	cmp	r1, #8
 800535e:	f63f af75 	bhi.w	800524c <_strtod_l+0x19c>
 8005362:	3a30      	subs	r2, #48	@ 0x30
 8005364:	9209      	str	r2, [sp, #36]	@ 0x24
 8005366:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005368:	920f      	str	r2, [sp, #60]	@ 0x3c
 800536a:	f04f 080a 	mov.w	r8, #10
 800536e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005370:	1c56      	adds	r6, r2, #1
 8005372:	9619      	str	r6, [sp, #100]	@ 0x64
 8005374:	7852      	ldrb	r2, [r2, #1]
 8005376:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800537a:	f1be 0f09 	cmp.w	lr, #9
 800537e:	d939      	bls.n	80053f4 <_strtod_l+0x344>
 8005380:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005382:	1a76      	subs	r6, r6, r1
 8005384:	2e08      	cmp	r6, #8
 8005386:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800538a:	dc03      	bgt.n	8005394 <_strtod_l+0x2e4>
 800538c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800538e:	4588      	cmp	r8, r1
 8005390:	bfa8      	it	ge
 8005392:	4688      	movge	r8, r1
 8005394:	f1bc 0f00 	cmp.w	ip, #0
 8005398:	d001      	beq.n	800539e <_strtod_l+0x2ee>
 800539a:	f1c8 0800 	rsb	r8, r8, #0
 800539e:	2d00      	cmp	r5, #0
 80053a0:	d14e      	bne.n	8005440 <_strtod_l+0x390>
 80053a2:	9908      	ldr	r1, [sp, #32]
 80053a4:	4308      	orrs	r0, r1
 80053a6:	f47f aebc 	bne.w	8005122 <_strtod_l+0x72>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f47f aed4 	bne.w	8005158 <_strtod_l+0xa8>
 80053b0:	2a69      	cmp	r2, #105	@ 0x69
 80053b2:	d028      	beq.n	8005406 <_strtod_l+0x356>
 80053b4:	dc25      	bgt.n	8005402 <_strtod_l+0x352>
 80053b6:	2a49      	cmp	r2, #73	@ 0x49
 80053b8:	d025      	beq.n	8005406 <_strtod_l+0x356>
 80053ba:	2a4e      	cmp	r2, #78	@ 0x4e
 80053bc:	f47f aecc 	bne.w	8005158 <_strtod_l+0xa8>
 80053c0:	499a      	ldr	r1, [pc, #616]	@ (800562c <_strtod_l+0x57c>)
 80053c2:	a819      	add	r0, sp, #100	@ 0x64
 80053c4:	f002 fe60 	bl	8008088 <__match>
 80053c8:	2800      	cmp	r0, #0
 80053ca:	f43f aec5 	beq.w	8005158 <_strtod_l+0xa8>
 80053ce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	2b28      	cmp	r3, #40	@ 0x28
 80053d4:	d12e      	bne.n	8005434 <_strtod_l+0x384>
 80053d6:	4996      	ldr	r1, [pc, #600]	@ (8005630 <_strtod_l+0x580>)
 80053d8:	aa1c      	add	r2, sp, #112	@ 0x70
 80053da:	a819      	add	r0, sp, #100	@ 0x64
 80053dc:	f002 fe68 	bl	80080b0 <__hexnan>
 80053e0:	2805      	cmp	r0, #5
 80053e2:	d127      	bne.n	8005434 <_strtod_l+0x384>
 80053e4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80053e6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80053ea:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80053ee:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80053f2:	e696      	b.n	8005122 <_strtod_l+0x72>
 80053f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80053f6:	fb08 2101 	mla	r1, r8, r1, r2
 80053fa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80053fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8005400:	e7b5      	b.n	800536e <_strtod_l+0x2be>
 8005402:	2a6e      	cmp	r2, #110	@ 0x6e
 8005404:	e7da      	b.n	80053bc <_strtod_l+0x30c>
 8005406:	498b      	ldr	r1, [pc, #556]	@ (8005634 <_strtod_l+0x584>)
 8005408:	a819      	add	r0, sp, #100	@ 0x64
 800540a:	f002 fe3d 	bl	8008088 <__match>
 800540e:	2800      	cmp	r0, #0
 8005410:	f43f aea2 	beq.w	8005158 <_strtod_l+0xa8>
 8005414:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005416:	4988      	ldr	r1, [pc, #544]	@ (8005638 <_strtod_l+0x588>)
 8005418:	3b01      	subs	r3, #1
 800541a:	a819      	add	r0, sp, #100	@ 0x64
 800541c:	9319      	str	r3, [sp, #100]	@ 0x64
 800541e:	f002 fe33 	bl	8008088 <__match>
 8005422:	b910      	cbnz	r0, 800542a <_strtod_l+0x37a>
 8005424:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005426:	3301      	adds	r3, #1
 8005428:	9319      	str	r3, [sp, #100]	@ 0x64
 800542a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8005648 <_strtod_l+0x598>
 800542e:	f04f 0a00 	mov.w	sl, #0
 8005432:	e676      	b.n	8005122 <_strtod_l+0x72>
 8005434:	4881      	ldr	r0, [pc, #516]	@ (800563c <_strtod_l+0x58c>)
 8005436:	f001 fceb 	bl	8006e10 <nan>
 800543a:	ec5b ab10 	vmov	sl, fp, d0
 800543e:	e670      	b.n	8005122 <_strtod_l+0x72>
 8005440:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005442:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005444:	eba8 0303 	sub.w	r3, r8, r3
 8005448:	f1b9 0f00 	cmp.w	r9, #0
 800544c:	bf08      	it	eq
 800544e:	46a9      	moveq	r9, r5
 8005450:	2d10      	cmp	r5, #16
 8005452:	9309      	str	r3, [sp, #36]	@ 0x24
 8005454:	462c      	mov	r4, r5
 8005456:	bfa8      	it	ge
 8005458:	2410      	movge	r4, #16
 800545a:	f7fb f85b 	bl	8000514 <__aeabi_ui2d>
 800545e:	2d09      	cmp	r5, #9
 8005460:	4682      	mov	sl, r0
 8005462:	468b      	mov	fp, r1
 8005464:	dc13      	bgt.n	800548e <_strtod_l+0x3de>
 8005466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005468:	2b00      	cmp	r3, #0
 800546a:	f43f ae5a 	beq.w	8005122 <_strtod_l+0x72>
 800546e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005470:	dd78      	ble.n	8005564 <_strtod_l+0x4b4>
 8005472:	2b16      	cmp	r3, #22
 8005474:	dc5f      	bgt.n	8005536 <_strtod_l+0x486>
 8005476:	4972      	ldr	r1, [pc, #456]	@ (8005640 <_strtod_l+0x590>)
 8005478:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800547c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005480:	4652      	mov	r2, sl
 8005482:	465b      	mov	r3, fp
 8005484:	f7fb f8c0 	bl	8000608 <__aeabi_dmul>
 8005488:	4682      	mov	sl, r0
 800548a:	468b      	mov	fp, r1
 800548c:	e649      	b.n	8005122 <_strtod_l+0x72>
 800548e:	4b6c      	ldr	r3, [pc, #432]	@ (8005640 <_strtod_l+0x590>)
 8005490:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005494:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005498:	f7fb f8b6 	bl	8000608 <__aeabi_dmul>
 800549c:	4682      	mov	sl, r0
 800549e:	4638      	mov	r0, r7
 80054a0:	468b      	mov	fp, r1
 80054a2:	f7fb f837 	bl	8000514 <__aeabi_ui2d>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	4650      	mov	r0, sl
 80054ac:	4659      	mov	r1, fp
 80054ae:	f7fa fef5 	bl	800029c <__adddf3>
 80054b2:	2d0f      	cmp	r5, #15
 80054b4:	4682      	mov	sl, r0
 80054b6:	468b      	mov	fp, r1
 80054b8:	ddd5      	ble.n	8005466 <_strtod_l+0x3b6>
 80054ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054bc:	1b2c      	subs	r4, r5, r4
 80054be:	441c      	add	r4, r3
 80054c0:	2c00      	cmp	r4, #0
 80054c2:	f340 8093 	ble.w	80055ec <_strtod_l+0x53c>
 80054c6:	f014 030f 	ands.w	r3, r4, #15
 80054ca:	d00a      	beq.n	80054e2 <_strtod_l+0x432>
 80054cc:	495c      	ldr	r1, [pc, #368]	@ (8005640 <_strtod_l+0x590>)
 80054ce:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80054d2:	4652      	mov	r2, sl
 80054d4:	465b      	mov	r3, fp
 80054d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80054da:	f7fb f895 	bl	8000608 <__aeabi_dmul>
 80054de:	4682      	mov	sl, r0
 80054e0:	468b      	mov	fp, r1
 80054e2:	f034 040f 	bics.w	r4, r4, #15
 80054e6:	d073      	beq.n	80055d0 <_strtod_l+0x520>
 80054e8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80054ec:	dd49      	ble.n	8005582 <_strtod_l+0x4d2>
 80054ee:	2400      	movs	r4, #0
 80054f0:	46a0      	mov	r8, r4
 80054f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80054f4:	46a1      	mov	r9, r4
 80054f6:	9a05      	ldr	r2, [sp, #20]
 80054f8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8005648 <_strtod_l+0x598>
 80054fc:	2322      	movs	r3, #34	@ 0x22
 80054fe:	6013      	str	r3, [r2, #0]
 8005500:	f04f 0a00 	mov.w	sl, #0
 8005504:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005506:	2b00      	cmp	r3, #0
 8005508:	f43f ae0b 	beq.w	8005122 <_strtod_l+0x72>
 800550c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800550e:	9805      	ldr	r0, [sp, #20]
 8005510:	f002 ff72 	bl	80083f8 <_Bfree>
 8005514:	9805      	ldr	r0, [sp, #20]
 8005516:	4649      	mov	r1, r9
 8005518:	f002 ff6e 	bl	80083f8 <_Bfree>
 800551c:	9805      	ldr	r0, [sp, #20]
 800551e:	4641      	mov	r1, r8
 8005520:	f002 ff6a 	bl	80083f8 <_Bfree>
 8005524:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005526:	9805      	ldr	r0, [sp, #20]
 8005528:	f002 ff66 	bl	80083f8 <_Bfree>
 800552c:	9805      	ldr	r0, [sp, #20]
 800552e:	4621      	mov	r1, r4
 8005530:	f002 ff62 	bl	80083f8 <_Bfree>
 8005534:	e5f5      	b.n	8005122 <_strtod_l+0x72>
 8005536:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005538:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800553c:	4293      	cmp	r3, r2
 800553e:	dbbc      	blt.n	80054ba <_strtod_l+0x40a>
 8005540:	4c3f      	ldr	r4, [pc, #252]	@ (8005640 <_strtod_l+0x590>)
 8005542:	f1c5 050f 	rsb	r5, r5, #15
 8005546:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800554a:	4652      	mov	r2, sl
 800554c:	465b      	mov	r3, fp
 800554e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005552:	f7fb f859 	bl	8000608 <__aeabi_dmul>
 8005556:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005558:	1b5d      	subs	r5, r3, r5
 800555a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800555e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005562:	e78f      	b.n	8005484 <_strtod_l+0x3d4>
 8005564:	3316      	adds	r3, #22
 8005566:	dba8      	blt.n	80054ba <_strtod_l+0x40a>
 8005568:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800556a:	eba3 0808 	sub.w	r8, r3, r8
 800556e:	4b34      	ldr	r3, [pc, #208]	@ (8005640 <_strtod_l+0x590>)
 8005570:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005574:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005578:	4650      	mov	r0, sl
 800557a:	4659      	mov	r1, fp
 800557c:	f7fb f96e 	bl	800085c <__aeabi_ddiv>
 8005580:	e782      	b.n	8005488 <_strtod_l+0x3d8>
 8005582:	2300      	movs	r3, #0
 8005584:	4f2f      	ldr	r7, [pc, #188]	@ (8005644 <_strtod_l+0x594>)
 8005586:	1124      	asrs	r4, r4, #4
 8005588:	4650      	mov	r0, sl
 800558a:	4659      	mov	r1, fp
 800558c:	461e      	mov	r6, r3
 800558e:	2c01      	cmp	r4, #1
 8005590:	dc21      	bgt.n	80055d6 <_strtod_l+0x526>
 8005592:	b10b      	cbz	r3, 8005598 <_strtod_l+0x4e8>
 8005594:	4682      	mov	sl, r0
 8005596:	468b      	mov	fp, r1
 8005598:	492a      	ldr	r1, [pc, #168]	@ (8005644 <_strtod_l+0x594>)
 800559a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800559e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80055a2:	4652      	mov	r2, sl
 80055a4:	465b      	mov	r3, fp
 80055a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055aa:	f7fb f82d 	bl	8000608 <__aeabi_dmul>
 80055ae:	4b26      	ldr	r3, [pc, #152]	@ (8005648 <_strtod_l+0x598>)
 80055b0:	460a      	mov	r2, r1
 80055b2:	400b      	ands	r3, r1
 80055b4:	4925      	ldr	r1, [pc, #148]	@ (800564c <_strtod_l+0x59c>)
 80055b6:	428b      	cmp	r3, r1
 80055b8:	4682      	mov	sl, r0
 80055ba:	d898      	bhi.n	80054ee <_strtod_l+0x43e>
 80055bc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80055c0:	428b      	cmp	r3, r1
 80055c2:	bf86      	itte	hi
 80055c4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8005650 <_strtod_l+0x5a0>
 80055c8:	f04f 3aff 	movhi.w	sl, #4294967295
 80055cc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80055d0:	2300      	movs	r3, #0
 80055d2:	9308      	str	r3, [sp, #32]
 80055d4:	e076      	b.n	80056c4 <_strtod_l+0x614>
 80055d6:	07e2      	lsls	r2, r4, #31
 80055d8:	d504      	bpl.n	80055e4 <_strtod_l+0x534>
 80055da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055de:	f7fb f813 	bl	8000608 <__aeabi_dmul>
 80055e2:	2301      	movs	r3, #1
 80055e4:	3601      	adds	r6, #1
 80055e6:	1064      	asrs	r4, r4, #1
 80055e8:	3708      	adds	r7, #8
 80055ea:	e7d0      	b.n	800558e <_strtod_l+0x4de>
 80055ec:	d0f0      	beq.n	80055d0 <_strtod_l+0x520>
 80055ee:	4264      	negs	r4, r4
 80055f0:	f014 020f 	ands.w	r2, r4, #15
 80055f4:	d00a      	beq.n	800560c <_strtod_l+0x55c>
 80055f6:	4b12      	ldr	r3, [pc, #72]	@ (8005640 <_strtod_l+0x590>)
 80055f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055fc:	4650      	mov	r0, sl
 80055fe:	4659      	mov	r1, fp
 8005600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005604:	f7fb f92a 	bl	800085c <__aeabi_ddiv>
 8005608:	4682      	mov	sl, r0
 800560a:	468b      	mov	fp, r1
 800560c:	1124      	asrs	r4, r4, #4
 800560e:	d0df      	beq.n	80055d0 <_strtod_l+0x520>
 8005610:	2c1f      	cmp	r4, #31
 8005612:	dd1f      	ble.n	8005654 <_strtod_l+0x5a4>
 8005614:	2400      	movs	r4, #0
 8005616:	46a0      	mov	r8, r4
 8005618:	940b      	str	r4, [sp, #44]	@ 0x2c
 800561a:	46a1      	mov	r9, r4
 800561c:	9a05      	ldr	r2, [sp, #20]
 800561e:	2322      	movs	r3, #34	@ 0x22
 8005620:	f04f 0a00 	mov.w	sl, #0
 8005624:	f04f 0b00 	mov.w	fp, #0
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	e76b      	b.n	8005504 <_strtod_l+0x454>
 800562c:	0800e7db 	.word	0x0800e7db
 8005630:	0800e9a4 	.word	0x0800e9a4
 8005634:	0800e7d3 	.word	0x0800e7d3
 8005638:	0800e812 	.word	0x0800e812
 800563c:	0800e9a1 	.word	0x0800e9a1
 8005640:	0800ea30 	.word	0x0800ea30
 8005644:	0800ea08 	.word	0x0800ea08
 8005648:	7ff00000 	.word	0x7ff00000
 800564c:	7ca00000 	.word	0x7ca00000
 8005650:	7fefffff 	.word	0x7fefffff
 8005654:	f014 0310 	ands.w	r3, r4, #16
 8005658:	bf18      	it	ne
 800565a:	236a      	movne	r3, #106	@ 0x6a
 800565c:	4ea9      	ldr	r6, [pc, #676]	@ (8005904 <_strtod_l+0x854>)
 800565e:	9308      	str	r3, [sp, #32]
 8005660:	4650      	mov	r0, sl
 8005662:	4659      	mov	r1, fp
 8005664:	2300      	movs	r3, #0
 8005666:	07e7      	lsls	r7, r4, #31
 8005668:	d504      	bpl.n	8005674 <_strtod_l+0x5c4>
 800566a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800566e:	f7fa ffcb 	bl	8000608 <__aeabi_dmul>
 8005672:	2301      	movs	r3, #1
 8005674:	1064      	asrs	r4, r4, #1
 8005676:	f106 0608 	add.w	r6, r6, #8
 800567a:	d1f4      	bne.n	8005666 <_strtod_l+0x5b6>
 800567c:	b10b      	cbz	r3, 8005682 <_strtod_l+0x5d2>
 800567e:	4682      	mov	sl, r0
 8005680:	468b      	mov	fp, r1
 8005682:	9b08      	ldr	r3, [sp, #32]
 8005684:	b1b3      	cbz	r3, 80056b4 <_strtod_l+0x604>
 8005686:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800568a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800568e:	2b00      	cmp	r3, #0
 8005690:	4659      	mov	r1, fp
 8005692:	dd0f      	ble.n	80056b4 <_strtod_l+0x604>
 8005694:	2b1f      	cmp	r3, #31
 8005696:	dd56      	ble.n	8005746 <_strtod_l+0x696>
 8005698:	2b34      	cmp	r3, #52	@ 0x34
 800569a:	bfde      	ittt	le
 800569c:	f04f 33ff 	movle.w	r3, #4294967295
 80056a0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80056a4:	4093      	lslle	r3, r2
 80056a6:	f04f 0a00 	mov.w	sl, #0
 80056aa:	bfcc      	ite	gt
 80056ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80056b0:	ea03 0b01 	andle.w	fp, r3, r1
 80056b4:	2200      	movs	r2, #0
 80056b6:	2300      	movs	r3, #0
 80056b8:	4650      	mov	r0, sl
 80056ba:	4659      	mov	r1, fp
 80056bc:	f7fb fa0c 	bl	8000ad8 <__aeabi_dcmpeq>
 80056c0:	2800      	cmp	r0, #0
 80056c2:	d1a7      	bne.n	8005614 <_strtod_l+0x564>
 80056c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80056ca:	9805      	ldr	r0, [sp, #20]
 80056cc:	462b      	mov	r3, r5
 80056ce:	464a      	mov	r2, r9
 80056d0:	f002 fefa 	bl	80084c8 <__s2b>
 80056d4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80056d6:	2800      	cmp	r0, #0
 80056d8:	f43f af09 	beq.w	80054ee <_strtod_l+0x43e>
 80056dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80056e0:	2a00      	cmp	r2, #0
 80056e2:	eba3 0308 	sub.w	r3, r3, r8
 80056e6:	bfa8      	it	ge
 80056e8:	2300      	movge	r3, #0
 80056ea:	9312      	str	r3, [sp, #72]	@ 0x48
 80056ec:	2400      	movs	r4, #0
 80056ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80056f2:	9316      	str	r3, [sp, #88]	@ 0x58
 80056f4:	46a0      	mov	r8, r4
 80056f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056f8:	9805      	ldr	r0, [sp, #20]
 80056fa:	6859      	ldr	r1, [r3, #4]
 80056fc:	f002 fe3c 	bl	8008378 <_Balloc>
 8005700:	4681      	mov	r9, r0
 8005702:	2800      	cmp	r0, #0
 8005704:	f43f aef7 	beq.w	80054f6 <_strtod_l+0x446>
 8005708:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800570a:	691a      	ldr	r2, [r3, #16]
 800570c:	3202      	adds	r2, #2
 800570e:	f103 010c 	add.w	r1, r3, #12
 8005712:	0092      	lsls	r2, r2, #2
 8005714:	300c      	adds	r0, #12
 8005716:	f001 fb6c 	bl	8006df2 <memcpy>
 800571a:	ec4b ab10 	vmov	d0, sl, fp
 800571e:	9805      	ldr	r0, [sp, #20]
 8005720:	aa1c      	add	r2, sp, #112	@ 0x70
 8005722:	a91b      	add	r1, sp, #108	@ 0x6c
 8005724:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005728:	f003 fa02 	bl	8008b30 <__d2b>
 800572c:	901a      	str	r0, [sp, #104]	@ 0x68
 800572e:	2800      	cmp	r0, #0
 8005730:	f43f aee1 	beq.w	80054f6 <_strtod_l+0x446>
 8005734:	9805      	ldr	r0, [sp, #20]
 8005736:	2101      	movs	r1, #1
 8005738:	f002 ff5c 	bl	80085f4 <__i2b>
 800573c:	4680      	mov	r8, r0
 800573e:	b948      	cbnz	r0, 8005754 <_strtod_l+0x6a4>
 8005740:	f04f 0800 	mov.w	r8, #0
 8005744:	e6d7      	b.n	80054f6 <_strtod_l+0x446>
 8005746:	f04f 32ff 	mov.w	r2, #4294967295
 800574a:	fa02 f303 	lsl.w	r3, r2, r3
 800574e:	ea03 0a0a 	and.w	sl, r3, sl
 8005752:	e7af      	b.n	80056b4 <_strtod_l+0x604>
 8005754:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005756:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005758:	2d00      	cmp	r5, #0
 800575a:	bfab      	itete	ge
 800575c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800575e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005760:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005762:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005764:	bfac      	ite	ge
 8005766:	18ef      	addge	r7, r5, r3
 8005768:	1b5e      	sublt	r6, r3, r5
 800576a:	9b08      	ldr	r3, [sp, #32]
 800576c:	1aed      	subs	r5, r5, r3
 800576e:	4415      	add	r5, r2
 8005770:	4b65      	ldr	r3, [pc, #404]	@ (8005908 <_strtod_l+0x858>)
 8005772:	3d01      	subs	r5, #1
 8005774:	429d      	cmp	r5, r3
 8005776:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800577a:	da50      	bge.n	800581e <_strtod_l+0x76e>
 800577c:	1b5b      	subs	r3, r3, r5
 800577e:	2b1f      	cmp	r3, #31
 8005780:	eba2 0203 	sub.w	r2, r2, r3
 8005784:	f04f 0101 	mov.w	r1, #1
 8005788:	dc3d      	bgt.n	8005806 <_strtod_l+0x756>
 800578a:	fa01 f303 	lsl.w	r3, r1, r3
 800578e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005790:	2300      	movs	r3, #0
 8005792:	9310      	str	r3, [sp, #64]	@ 0x40
 8005794:	18bd      	adds	r5, r7, r2
 8005796:	9b08      	ldr	r3, [sp, #32]
 8005798:	42af      	cmp	r7, r5
 800579a:	4416      	add	r6, r2
 800579c:	441e      	add	r6, r3
 800579e:	463b      	mov	r3, r7
 80057a0:	bfa8      	it	ge
 80057a2:	462b      	movge	r3, r5
 80057a4:	42b3      	cmp	r3, r6
 80057a6:	bfa8      	it	ge
 80057a8:	4633      	movge	r3, r6
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	bfc2      	ittt	gt
 80057ae:	1aed      	subgt	r5, r5, r3
 80057b0:	1af6      	subgt	r6, r6, r3
 80057b2:	1aff      	subgt	r7, r7, r3
 80057b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	dd16      	ble.n	80057e8 <_strtod_l+0x738>
 80057ba:	4641      	mov	r1, r8
 80057bc:	9805      	ldr	r0, [sp, #20]
 80057be:	461a      	mov	r2, r3
 80057c0:	f002 ffd0 	bl	8008764 <__pow5mult>
 80057c4:	4680      	mov	r8, r0
 80057c6:	2800      	cmp	r0, #0
 80057c8:	d0ba      	beq.n	8005740 <_strtod_l+0x690>
 80057ca:	4601      	mov	r1, r0
 80057cc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80057ce:	9805      	ldr	r0, [sp, #20]
 80057d0:	f002 ff26 	bl	8008620 <__multiply>
 80057d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80057d6:	2800      	cmp	r0, #0
 80057d8:	f43f ae8d 	beq.w	80054f6 <_strtod_l+0x446>
 80057dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80057de:	9805      	ldr	r0, [sp, #20]
 80057e0:	f002 fe0a 	bl	80083f8 <_Bfree>
 80057e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80057e8:	2d00      	cmp	r5, #0
 80057ea:	dc1d      	bgt.n	8005828 <_strtod_l+0x778>
 80057ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	dd23      	ble.n	800583a <_strtod_l+0x78a>
 80057f2:	4649      	mov	r1, r9
 80057f4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80057f6:	9805      	ldr	r0, [sp, #20]
 80057f8:	f002 ffb4 	bl	8008764 <__pow5mult>
 80057fc:	4681      	mov	r9, r0
 80057fe:	b9e0      	cbnz	r0, 800583a <_strtod_l+0x78a>
 8005800:	f04f 0900 	mov.w	r9, #0
 8005804:	e677      	b.n	80054f6 <_strtod_l+0x446>
 8005806:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800580a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800580e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005812:	35e2      	adds	r5, #226	@ 0xe2
 8005814:	fa01 f305 	lsl.w	r3, r1, r5
 8005818:	9310      	str	r3, [sp, #64]	@ 0x40
 800581a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800581c:	e7ba      	b.n	8005794 <_strtod_l+0x6e4>
 800581e:	2300      	movs	r3, #0
 8005820:	9310      	str	r3, [sp, #64]	@ 0x40
 8005822:	2301      	movs	r3, #1
 8005824:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005826:	e7b5      	b.n	8005794 <_strtod_l+0x6e4>
 8005828:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800582a:	9805      	ldr	r0, [sp, #20]
 800582c:	462a      	mov	r2, r5
 800582e:	f002 fff3 	bl	8008818 <__lshift>
 8005832:	901a      	str	r0, [sp, #104]	@ 0x68
 8005834:	2800      	cmp	r0, #0
 8005836:	d1d9      	bne.n	80057ec <_strtod_l+0x73c>
 8005838:	e65d      	b.n	80054f6 <_strtod_l+0x446>
 800583a:	2e00      	cmp	r6, #0
 800583c:	dd07      	ble.n	800584e <_strtod_l+0x79e>
 800583e:	4649      	mov	r1, r9
 8005840:	9805      	ldr	r0, [sp, #20]
 8005842:	4632      	mov	r2, r6
 8005844:	f002 ffe8 	bl	8008818 <__lshift>
 8005848:	4681      	mov	r9, r0
 800584a:	2800      	cmp	r0, #0
 800584c:	d0d8      	beq.n	8005800 <_strtod_l+0x750>
 800584e:	2f00      	cmp	r7, #0
 8005850:	dd08      	ble.n	8005864 <_strtod_l+0x7b4>
 8005852:	4641      	mov	r1, r8
 8005854:	9805      	ldr	r0, [sp, #20]
 8005856:	463a      	mov	r2, r7
 8005858:	f002 ffde 	bl	8008818 <__lshift>
 800585c:	4680      	mov	r8, r0
 800585e:	2800      	cmp	r0, #0
 8005860:	f43f ae49 	beq.w	80054f6 <_strtod_l+0x446>
 8005864:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005866:	9805      	ldr	r0, [sp, #20]
 8005868:	464a      	mov	r2, r9
 800586a:	f003 f85d 	bl	8008928 <__mdiff>
 800586e:	4604      	mov	r4, r0
 8005870:	2800      	cmp	r0, #0
 8005872:	f43f ae40 	beq.w	80054f6 <_strtod_l+0x446>
 8005876:	68c3      	ldr	r3, [r0, #12]
 8005878:	930f      	str	r3, [sp, #60]	@ 0x3c
 800587a:	2300      	movs	r3, #0
 800587c:	60c3      	str	r3, [r0, #12]
 800587e:	4641      	mov	r1, r8
 8005880:	f003 f836 	bl	80088f0 <__mcmp>
 8005884:	2800      	cmp	r0, #0
 8005886:	da45      	bge.n	8005914 <_strtod_l+0x864>
 8005888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800588a:	ea53 030a 	orrs.w	r3, r3, sl
 800588e:	d16b      	bne.n	8005968 <_strtod_l+0x8b8>
 8005890:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005894:	2b00      	cmp	r3, #0
 8005896:	d167      	bne.n	8005968 <_strtod_l+0x8b8>
 8005898:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800589c:	0d1b      	lsrs	r3, r3, #20
 800589e:	051b      	lsls	r3, r3, #20
 80058a0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80058a4:	d960      	bls.n	8005968 <_strtod_l+0x8b8>
 80058a6:	6963      	ldr	r3, [r4, #20]
 80058a8:	b913      	cbnz	r3, 80058b0 <_strtod_l+0x800>
 80058aa:	6923      	ldr	r3, [r4, #16]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	dd5b      	ble.n	8005968 <_strtod_l+0x8b8>
 80058b0:	4621      	mov	r1, r4
 80058b2:	2201      	movs	r2, #1
 80058b4:	9805      	ldr	r0, [sp, #20]
 80058b6:	f002 ffaf 	bl	8008818 <__lshift>
 80058ba:	4641      	mov	r1, r8
 80058bc:	4604      	mov	r4, r0
 80058be:	f003 f817 	bl	80088f0 <__mcmp>
 80058c2:	2800      	cmp	r0, #0
 80058c4:	dd50      	ble.n	8005968 <_strtod_l+0x8b8>
 80058c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80058ca:	9a08      	ldr	r2, [sp, #32]
 80058cc:	0d1b      	lsrs	r3, r3, #20
 80058ce:	051b      	lsls	r3, r3, #20
 80058d0:	2a00      	cmp	r2, #0
 80058d2:	d06a      	beq.n	80059aa <_strtod_l+0x8fa>
 80058d4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80058d8:	d867      	bhi.n	80059aa <_strtod_l+0x8fa>
 80058da:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80058de:	f67f ae9d 	bls.w	800561c <_strtod_l+0x56c>
 80058e2:	4b0a      	ldr	r3, [pc, #40]	@ (800590c <_strtod_l+0x85c>)
 80058e4:	4650      	mov	r0, sl
 80058e6:	4659      	mov	r1, fp
 80058e8:	2200      	movs	r2, #0
 80058ea:	f7fa fe8d 	bl	8000608 <__aeabi_dmul>
 80058ee:	4b08      	ldr	r3, [pc, #32]	@ (8005910 <_strtod_l+0x860>)
 80058f0:	400b      	ands	r3, r1
 80058f2:	4682      	mov	sl, r0
 80058f4:	468b      	mov	fp, r1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	f47f ae08 	bne.w	800550c <_strtod_l+0x45c>
 80058fc:	9a05      	ldr	r2, [sp, #20]
 80058fe:	2322      	movs	r3, #34	@ 0x22
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	e603      	b.n	800550c <_strtod_l+0x45c>
 8005904:	0800e9d0 	.word	0x0800e9d0
 8005908:	fffffc02 	.word	0xfffffc02
 800590c:	39500000 	.word	0x39500000
 8005910:	7ff00000 	.word	0x7ff00000
 8005914:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8005918:	d165      	bne.n	80059e6 <_strtod_l+0x936>
 800591a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800591c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005920:	b35a      	cbz	r2, 800597a <_strtod_l+0x8ca>
 8005922:	4a9f      	ldr	r2, [pc, #636]	@ (8005ba0 <_strtod_l+0xaf0>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d12b      	bne.n	8005980 <_strtod_l+0x8d0>
 8005928:	9b08      	ldr	r3, [sp, #32]
 800592a:	4651      	mov	r1, sl
 800592c:	b303      	cbz	r3, 8005970 <_strtod_l+0x8c0>
 800592e:	4b9d      	ldr	r3, [pc, #628]	@ (8005ba4 <_strtod_l+0xaf4>)
 8005930:	465a      	mov	r2, fp
 8005932:	4013      	ands	r3, r2
 8005934:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005938:	f04f 32ff 	mov.w	r2, #4294967295
 800593c:	d81b      	bhi.n	8005976 <_strtod_l+0x8c6>
 800593e:	0d1b      	lsrs	r3, r3, #20
 8005940:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005944:	fa02 f303 	lsl.w	r3, r2, r3
 8005948:	4299      	cmp	r1, r3
 800594a:	d119      	bne.n	8005980 <_strtod_l+0x8d0>
 800594c:	4b96      	ldr	r3, [pc, #600]	@ (8005ba8 <_strtod_l+0xaf8>)
 800594e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005950:	429a      	cmp	r2, r3
 8005952:	d102      	bne.n	800595a <_strtod_l+0x8aa>
 8005954:	3101      	adds	r1, #1
 8005956:	f43f adce 	beq.w	80054f6 <_strtod_l+0x446>
 800595a:	4b92      	ldr	r3, [pc, #584]	@ (8005ba4 <_strtod_l+0xaf4>)
 800595c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800595e:	401a      	ands	r2, r3
 8005960:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005964:	f04f 0a00 	mov.w	sl, #0
 8005968:	9b08      	ldr	r3, [sp, #32]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1b9      	bne.n	80058e2 <_strtod_l+0x832>
 800596e:	e5cd      	b.n	800550c <_strtod_l+0x45c>
 8005970:	f04f 33ff 	mov.w	r3, #4294967295
 8005974:	e7e8      	b.n	8005948 <_strtod_l+0x898>
 8005976:	4613      	mov	r3, r2
 8005978:	e7e6      	b.n	8005948 <_strtod_l+0x898>
 800597a:	ea53 030a 	orrs.w	r3, r3, sl
 800597e:	d0a2      	beq.n	80058c6 <_strtod_l+0x816>
 8005980:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005982:	b1db      	cbz	r3, 80059bc <_strtod_l+0x90c>
 8005984:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005986:	4213      	tst	r3, r2
 8005988:	d0ee      	beq.n	8005968 <_strtod_l+0x8b8>
 800598a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800598c:	9a08      	ldr	r2, [sp, #32]
 800598e:	4650      	mov	r0, sl
 8005990:	4659      	mov	r1, fp
 8005992:	b1bb      	cbz	r3, 80059c4 <_strtod_l+0x914>
 8005994:	f7ff fb6b 	bl	800506e <sulp>
 8005998:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800599c:	ec53 2b10 	vmov	r2, r3, d0
 80059a0:	f7fa fc7c 	bl	800029c <__adddf3>
 80059a4:	4682      	mov	sl, r0
 80059a6:	468b      	mov	fp, r1
 80059a8:	e7de      	b.n	8005968 <_strtod_l+0x8b8>
 80059aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80059ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80059b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80059b6:	f04f 3aff 	mov.w	sl, #4294967295
 80059ba:	e7d5      	b.n	8005968 <_strtod_l+0x8b8>
 80059bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80059be:	ea13 0f0a 	tst.w	r3, sl
 80059c2:	e7e1      	b.n	8005988 <_strtod_l+0x8d8>
 80059c4:	f7ff fb53 	bl	800506e <sulp>
 80059c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059cc:	ec53 2b10 	vmov	r2, r3, d0
 80059d0:	f7fa fc62 	bl	8000298 <__aeabi_dsub>
 80059d4:	2200      	movs	r2, #0
 80059d6:	2300      	movs	r3, #0
 80059d8:	4682      	mov	sl, r0
 80059da:	468b      	mov	fp, r1
 80059dc:	f7fb f87c 	bl	8000ad8 <__aeabi_dcmpeq>
 80059e0:	2800      	cmp	r0, #0
 80059e2:	d0c1      	beq.n	8005968 <_strtod_l+0x8b8>
 80059e4:	e61a      	b.n	800561c <_strtod_l+0x56c>
 80059e6:	4641      	mov	r1, r8
 80059e8:	4620      	mov	r0, r4
 80059ea:	f003 f8f9 	bl	8008be0 <__ratio>
 80059ee:	ec57 6b10 	vmov	r6, r7, d0
 80059f2:	2200      	movs	r2, #0
 80059f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80059f8:	4630      	mov	r0, r6
 80059fa:	4639      	mov	r1, r7
 80059fc:	f7fb f880 	bl	8000b00 <__aeabi_dcmple>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	d06f      	beq.n	8005ae4 <_strtod_l+0xa34>
 8005a04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d17a      	bne.n	8005b00 <_strtod_l+0xa50>
 8005a0a:	f1ba 0f00 	cmp.w	sl, #0
 8005a0e:	d158      	bne.n	8005ac2 <_strtod_l+0xa12>
 8005a10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d15a      	bne.n	8005ad0 <_strtod_l+0xa20>
 8005a1a:	4b64      	ldr	r3, [pc, #400]	@ (8005bac <_strtod_l+0xafc>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	4630      	mov	r0, r6
 8005a20:	4639      	mov	r1, r7
 8005a22:	f7fb f863 	bl	8000aec <__aeabi_dcmplt>
 8005a26:	2800      	cmp	r0, #0
 8005a28:	d159      	bne.n	8005ade <_strtod_l+0xa2e>
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	4639      	mov	r1, r7
 8005a2e:	4b60      	ldr	r3, [pc, #384]	@ (8005bb0 <_strtod_l+0xb00>)
 8005a30:	2200      	movs	r2, #0
 8005a32:	f7fa fde9 	bl	8000608 <__aeabi_dmul>
 8005a36:	4606      	mov	r6, r0
 8005a38:	460f      	mov	r7, r1
 8005a3a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005a3e:	9606      	str	r6, [sp, #24]
 8005a40:	9307      	str	r3, [sp, #28]
 8005a42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a46:	4d57      	ldr	r5, [pc, #348]	@ (8005ba4 <_strtod_l+0xaf4>)
 8005a48:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005a4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a4e:	401d      	ands	r5, r3
 8005a50:	4b58      	ldr	r3, [pc, #352]	@ (8005bb4 <_strtod_l+0xb04>)
 8005a52:	429d      	cmp	r5, r3
 8005a54:	f040 80b2 	bne.w	8005bbc <_strtod_l+0xb0c>
 8005a58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a5a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005a5e:	ec4b ab10 	vmov	d0, sl, fp
 8005a62:	f002 fff5 	bl	8008a50 <__ulp>
 8005a66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a6a:	ec51 0b10 	vmov	r0, r1, d0
 8005a6e:	f7fa fdcb 	bl	8000608 <__aeabi_dmul>
 8005a72:	4652      	mov	r2, sl
 8005a74:	465b      	mov	r3, fp
 8005a76:	f7fa fc11 	bl	800029c <__adddf3>
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	4949      	ldr	r1, [pc, #292]	@ (8005ba4 <_strtod_l+0xaf4>)
 8005a7e:	4a4e      	ldr	r2, [pc, #312]	@ (8005bb8 <_strtod_l+0xb08>)
 8005a80:	4019      	ands	r1, r3
 8005a82:	4291      	cmp	r1, r2
 8005a84:	4682      	mov	sl, r0
 8005a86:	d942      	bls.n	8005b0e <_strtod_l+0xa5e>
 8005a88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005a8a:	4b47      	ldr	r3, [pc, #284]	@ (8005ba8 <_strtod_l+0xaf8>)
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d103      	bne.n	8005a98 <_strtod_l+0x9e8>
 8005a90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a92:	3301      	adds	r3, #1
 8005a94:	f43f ad2f 	beq.w	80054f6 <_strtod_l+0x446>
 8005a98:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8005ba8 <_strtod_l+0xaf8>
 8005a9c:	f04f 3aff 	mov.w	sl, #4294967295
 8005aa0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005aa2:	9805      	ldr	r0, [sp, #20]
 8005aa4:	f002 fca8 	bl	80083f8 <_Bfree>
 8005aa8:	9805      	ldr	r0, [sp, #20]
 8005aaa:	4649      	mov	r1, r9
 8005aac:	f002 fca4 	bl	80083f8 <_Bfree>
 8005ab0:	9805      	ldr	r0, [sp, #20]
 8005ab2:	4641      	mov	r1, r8
 8005ab4:	f002 fca0 	bl	80083f8 <_Bfree>
 8005ab8:	9805      	ldr	r0, [sp, #20]
 8005aba:	4621      	mov	r1, r4
 8005abc:	f002 fc9c 	bl	80083f8 <_Bfree>
 8005ac0:	e619      	b.n	80056f6 <_strtod_l+0x646>
 8005ac2:	f1ba 0f01 	cmp.w	sl, #1
 8005ac6:	d103      	bne.n	8005ad0 <_strtod_l+0xa20>
 8005ac8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f43f ada6 	beq.w	800561c <_strtod_l+0x56c>
 8005ad0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005b80 <_strtod_l+0xad0>
 8005ad4:	4f35      	ldr	r7, [pc, #212]	@ (8005bac <_strtod_l+0xafc>)
 8005ad6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005ada:	2600      	movs	r6, #0
 8005adc:	e7b1      	b.n	8005a42 <_strtod_l+0x992>
 8005ade:	4f34      	ldr	r7, [pc, #208]	@ (8005bb0 <_strtod_l+0xb00>)
 8005ae0:	2600      	movs	r6, #0
 8005ae2:	e7aa      	b.n	8005a3a <_strtod_l+0x98a>
 8005ae4:	4b32      	ldr	r3, [pc, #200]	@ (8005bb0 <_strtod_l+0xb00>)
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	4639      	mov	r1, r7
 8005aea:	2200      	movs	r2, #0
 8005aec:	f7fa fd8c 	bl	8000608 <__aeabi_dmul>
 8005af0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005af2:	4606      	mov	r6, r0
 8005af4:	460f      	mov	r7, r1
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d09f      	beq.n	8005a3a <_strtod_l+0x98a>
 8005afa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005afe:	e7a0      	b.n	8005a42 <_strtod_l+0x992>
 8005b00:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005b88 <_strtod_l+0xad8>
 8005b04:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005b08:	ec57 6b17 	vmov	r6, r7, d7
 8005b0c:	e799      	b.n	8005a42 <_strtod_l+0x992>
 8005b0e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005b12:	9b08      	ldr	r3, [sp, #32]
 8005b14:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1c1      	bne.n	8005aa0 <_strtod_l+0x9f0>
 8005b1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005b20:	0d1b      	lsrs	r3, r3, #20
 8005b22:	051b      	lsls	r3, r3, #20
 8005b24:	429d      	cmp	r5, r3
 8005b26:	d1bb      	bne.n	8005aa0 <_strtod_l+0x9f0>
 8005b28:	4630      	mov	r0, r6
 8005b2a:	4639      	mov	r1, r7
 8005b2c:	f7fb f8cc 	bl	8000cc8 <__aeabi_d2lz>
 8005b30:	f7fa fd3c 	bl	80005ac <__aeabi_l2d>
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	4630      	mov	r0, r6
 8005b3a:	4639      	mov	r1, r7
 8005b3c:	f7fa fbac 	bl	8000298 <__aeabi_dsub>
 8005b40:	460b      	mov	r3, r1
 8005b42:	4602      	mov	r2, r0
 8005b44:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005b48:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005b4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b4e:	ea46 060a 	orr.w	r6, r6, sl
 8005b52:	431e      	orrs	r6, r3
 8005b54:	d06f      	beq.n	8005c36 <_strtod_l+0xb86>
 8005b56:	a30e      	add	r3, pc, #56	@ (adr r3, 8005b90 <_strtod_l+0xae0>)
 8005b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5c:	f7fa ffc6 	bl	8000aec <__aeabi_dcmplt>
 8005b60:	2800      	cmp	r0, #0
 8005b62:	f47f acd3 	bne.w	800550c <_strtod_l+0x45c>
 8005b66:	a30c      	add	r3, pc, #48	@ (adr r3, 8005b98 <_strtod_l+0xae8>)
 8005b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b70:	f7fa ffda 	bl	8000b28 <__aeabi_dcmpgt>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	d093      	beq.n	8005aa0 <_strtod_l+0x9f0>
 8005b78:	e4c8      	b.n	800550c <_strtod_l+0x45c>
 8005b7a:	bf00      	nop
 8005b7c:	f3af 8000 	nop.w
 8005b80:	00000000 	.word	0x00000000
 8005b84:	bff00000 	.word	0xbff00000
 8005b88:	00000000 	.word	0x00000000
 8005b8c:	3ff00000 	.word	0x3ff00000
 8005b90:	94a03595 	.word	0x94a03595
 8005b94:	3fdfffff 	.word	0x3fdfffff
 8005b98:	35afe535 	.word	0x35afe535
 8005b9c:	3fe00000 	.word	0x3fe00000
 8005ba0:	000fffff 	.word	0x000fffff
 8005ba4:	7ff00000 	.word	0x7ff00000
 8005ba8:	7fefffff 	.word	0x7fefffff
 8005bac:	3ff00000 	.word	0x3ff00000
 8005bb0:	3fe00000 	.word	0x3fe00000
 8005bb4:	7fe00000 	.word	0x7fe00000
 8005bb8:	7c9fffff 	.word	0x7c9fffff
 8005bbc:	9b08      	ldr	r3, [sp, #32]
 8005bbe:	b323      	cbz	r3, 8005c0a <_strtod_l+0xb5a>
 8005bc0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005bc4:	d821      	bhi.n	8005c0a <_strtod_l+0xb5a>
 8005bc6:	a328      	add	r3, pc, #160	@ (adr r3, 8005c68 <_strtod_l+0xbb8>)
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	4630      	mov	r0, r6
 8005bce:	4639      	mov	r1, r7
 8005bd0:	f7fa ff96 	bl	8000b00 <__aeabi_dcmple>
 8005bd4:	b1a0      	cbz	r0, 8005c00 <_strtod_l+0xb50>
 8005bd6:	4639      	mov	r1, r7
 8005bd8:	4630      	mov	r0, r6
 8005bda:	f7fa ffed 	bl	8000bb8 <__aeabi_d2uiz>
 8005bde:	2801      	cmp	r0, #1
 8005be0:	bf38      	it	cc
 8005be2:	2001      	movcc	r0, #1
 8005be4:	f7fa fc96 	bl	8000514 <__aeabi_ui2d>
 8005be8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005bea:	4606      	mov	r6, r0
 8005bec:	460f      	mov	r7, r1
 8005bee:	b9fb      	cbnz	r3, 8005c30 <_strtod_l+0xb80>
 8005bf0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005bf4:	9014      	str	r0, [sp, #80]	@ 0x50
 8005bf6:	9315      	str	r3, [sp, #84]	@ 0x54
 8005bf8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005bfc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005c00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005c02:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005c06:	1b5b      	subs	r3, r3, r5
 8005c08:	9311      	str	r3, [sp, #68]	@ 0x44
 8005c0a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005c0e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005c12:	f002 ff1d 	bl	8008a50 <__ulp>
 8005c16:	4650      	mov	r0, sl
 8005c18:	ec53 2b10 	vmov	r2, r3, d0
 8005c1c:	4659      	mov	r1, fp
 8005c1e:	f7fa fcf3 	bl	8000608 <__aeabi_dmul>
 8005c22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005c26:	f7fa fb39 	bl	800029c <__adddf3>
 8005c2a:	4682      	mov	sl, r0
 8005c2c:	468b      	mov	fp, r1
 8005c2e:	e770      	b.n	8005b12 <_strtod_l+0xa62>
 8005c30:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005c34:	e7e0      	b.n	8005bf8 <_strtod_l+0xb48>
 8005c36:	a30e      	add	r3, pc, #56	@ (adr r3, 8005c70 <_strtod_l+0xbc0>)
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f7fa ff56 	bl	8000aec <__aeabi_dcmplt>
 8005c40:	e798      	b.n	8005b74 <_strtod_l+0xac4>
 8005c42:	2300      	movs	r3, #0
 8005c44:	930e      	str	r3, [sp, #56]	@ 0x38
 8005c46:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005c48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c4a:	6013      	str	r3, [r2, #0]
 8005c4c:	f7ff ba6d 	b.w	800512a <_strtod_l+0x7a>
 8005c50:	2a65      	cmp	r2, #101	@ 0x65
 8005c52:	f43f ab68 	beq.w	8005326 <_strtod_l+0x276>
 8005c56:	2a45      	cmp	r2, #69	@ 0x45
 8005c58:	f43f ab65 	beq.w	8005326 <_strtod_l+0x276>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	f7ff bba0 	b.w	80053a2 <_strtod_l+0x2f2>
 8005c62:	bf00      	nop
 8005c64:	f3af 8000 	nop.w
 8005c68:	ffc00000 	.word	0xffc00000
 8005c6c:	41dfffff 	.word	0x41dfffff
 8005c70:	94a03595 	.word	0x94a03595
 8005c74:	3fcfffff 	.word	0x3fcfffff

08005c78 <_strtod_r>:
 8005c78:	4b01      	ldr	r3, [pc, #4]	@ (8005c80 <_strtod_r+0x8>)
 8005c7a:	f7ff ba19 	b.w	80050b0 <_strtod_l>
 8005c7e:	bf00      	nop
 8005c80:	20000018 	.word	0x20000018

08005c84 <strtod>:
 8005c84:	460a      	mov	r2, r1
 8005c86:	4601      	mov	r1, r0
 8005c88:	4802      	ldr	r0, [pc, #8]	@ (8005c94 <strtod+0x10>)
 8005c8a:	4b03      	ldr	r3, [pc, #12]	@ (8005c98 <strtod+0x14>)
 8005c8c:	6800      	ldr	r0, [r0, #0]
 8005c8e:	f7ff ba0f 	b.w	80050b0 <_strtod_l>
 8005c92:	bf00      	nop
 8005c94:	20000184 	.word	0x20000184
 8005c98:	20000018 	.word	0x20000018

08005c9c <strtof>:
 8005c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca0:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8005d60 <strtof+0xc4>
 8005ca4:	4b29      	ldr	r3, [pc, #164]	@ (8005d4c <strtof+0xb0>)
 8005ca6:	460a      	mov	r2, r1
 8005ca8:	ed2d 8b02 	vpush	{d8}
 8005cac:	4601      	mov	r1, r0
 8005cae:	f8d8 0000 	ldr.w	r0, [r8]
 8005cb2:	f7ff f9fd 	bl	80050b0 <_strtod_l>
 8005cb6:	ec55 4b10 	vmov	r4, r5, d0
 8005cba:	4622      	mov	r2, r4
 8005cbc:	462b      	mov	r3, r5
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	f7fa ff3b 	bl	8000b3c <__aeabi_dcmpun>
 8005cc6:	b190      	cbz	r0, 8005cee <strtof+0x52>
 8005cc8:	2d00      	cmp	r5, #0
 8005cca:	4821      	ldr	r0, [pc, #132]	@ (8005d50 <strtof+0xb4>)
 8005ccc:	da09      	bge.n	8005ce2 <strtof+0x46>
 8005cce:	f001 f8a7 	bl	8006e20 <nanf>
 8005cd2:	eeb1 8a40 	vneg.f32	s16, s0
 8005cd6:	eeb0 0a48 	vmov.f32	s0, s16
 8005cda:	ecbd 8b02 	vpop	{d8}
 8005cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ce2:	ecbd 8b02 	vpop	{d8}
 8005ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cea:	f001 b899 	b.w	8006e20 <nanf>
 8005cee:	4620      	mov	r0, r4
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	f7fa ff81 	bl	8000bf8 <__aeabi_d2f>
 8005cf6:	ee08 0a10 	vmov	s16, r0
 8005cfa:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8005d54 <strtof+0xb8>
 8005cfe:	eeb0 7ac8 	vabs.f32	s14, s16
 8005d02:	eeb4 7a67 	vcmp.f32	s14, s15
 8005d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d0a:	dd11      	ble.n	8005d30 <strtof+0x94>
 8005d0c:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8005d10:	4b11      	ldr	r3, [pc, #68]	@ (8005d58 <strtof+0xbc>)
 8005d12:	f04f 32ff 	mov.w	r2, #4294967295
 8005d16:	4620      	mov	r0, r4
 8005d18:	4639      	mov	r1, r7
 8005d1a:	f7fa ff0f 	bl	8000b3c <__aeabi_dcmpun>
 8005d1e:	b980      	cbnz	r0, 8005d42 <strtof+0xa6>
 8005d20:	4b0d      	ldr	r3, [pc, #52]	@ (8005d58 <strtof+0xbc>)
 8005d22:	f04f 32ff 	mov.w	r2, #4294967295
 8005d26:	4620      	mov	r0, r4
 8005d28:	4639      	mov	r1, r7
 8005d2a:	f7fa fee9 	bl	8000b00 <__aeabi_dcmple>
 8005d2e:	b940      	cbnz	r0, 8005d42 <strtof+0xa6>
 8005d30:	ee18 3a10 	vmov	r3, s16
 8005d34:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8005d38:	d1cd      	bne.n	8005cd6 <strtof+0x3a>
 8005d3a:	4b08      	ldr	r3, [pc, #32]	@ (8005d5c <strtof+0xc0>)
 8005d3c:	402b      	ands	r3, r5
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0c9      	beq.n	8005cd6 <strtof+0x3a>
 8005d42:	f8d8 3000 	ldr.w	r3, [r8]
 8005d46:	2222      	movs	r2, #34	@ 0x22
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	e7c4      	b.n	8005cd6 <strtof+0x3a>
 8005d4c:	20000018 	.word	0x20000018
 8005d50:	0800e9a1 	.word	0x0800e9a1
 8005d54:	7f7fffff 	.word	0x7f7fffff
 8005d58:	7fefffff 	.word	0x7fefffff
 8005d5c:	7ff00000 	.word	0x7ff00000
 8005d60:	20000184 	.word	0x20000184

08005d64 <__cvt>:
 8005d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d68:	ec57 6b10 	vmov	r6, r7, d0
 8005d6c:	2f00      	cmp	r7, #0
 8005d6e:	460c      	mov	r4, r1
 8005d70:	4619      	mov	r1, r3
 8005d72:	463b      	mov	r3, r7
 8005d74:	bfbb      	ittet	lt
 8005d76:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005d7a:	461f      	movlt	r7, r3
 8005d7c:	2300      	movge	r3, #0
 8005d7e:	232d      	movlt	r3, #45	@ 0x2d
 8005d80:	700b      	strb	r3, [r1, #0]
 8005d82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d84:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005d88:	4691      	mov	r9, r2
 8005d8a:	f023 0820 	bic.w	r8, r3, #32
 8005d8e:	bfbc      	itt	lt
 8005d90:	4632      	movlt	r2, r6
 8005d92:	4616      	movlt	r6, r2
 8005d94:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005d98:	d005      	beq.n	8005da6 <__cvt+0x42>
 8005d9a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005d9e:	d100      	bne.n	8005da2 <__cvt+0x3e>
 8005da0:	3401      	adds	r4, #1
 8005da2:	2102      	movs	r1, #2
 8005da4:	e000      	b.n	8005da8 <__cvt+0x44>
 8005da6:	2103      	movs	r1, #3
 8005da8:	ab03      	add	r3, sp, #12
 8005daa:	9301      	str	r3, [sp, #4]
 8005dac:	ab02      	add	r3, sp, #8
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	ec47 6b10 	vmov	d0, r6, r7
 8005db4:	4653      	mov	r3, sl
 8005db6:	4622      	mov	r2, r4
 8005db8:	f001 f8c2 	bl	8006f40 <_dtoa_r>
 8005dbc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005dc0:	4605      	mov	r5, r0
 8005dc2:	d119      	bne.n	8005df8 <__cvt+0x94>
 8005dc4:	f019 0f01 	tst.w	r9, #1
 8005dc8:	d00e      	beq.n	8005de8 <__cvt+0x84>
 8005dca:	eb00 0904 	add.w	r9, r0, r4
 8005dce:	2200      	movs	r2, #0
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	4639      	mov	r1, r7
 8005dd6:	f7fa fe7f 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dda:	b108      	cbz	r0, 8005de0 <__cvt+0x7c>
 8005ddc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005de0:	2230      	movs	r2, #48	@ 0x30
 8005de2:	9b03      	ldr	r3, [sp, #12]
 8005de4:	454b      	cmp	r3, r9
 8005de6:	d31e      	bcc.n	8005e26 <__cvt+0xc2>
 8005de8:	9b03      	ldr	r3, [sp, #12]
 8005dea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005dec:	1b5b      	subs	r3, r3, r5
 8005dee:	4628      	mov	r0, r5
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	b004      	add	sp, #16
 8005df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005dfc:	eb00 0904 	add.w	r9, r0, r4
 8005e00:	d1e5      	bne.n	8005dce <__cvt+0x6a>
 8005e02:	7803      	ldrb	r3, [r0, #0]
 8005e04:	2b30      	cmp	r3, #48	@ 0x30
 8005e06:	d10a      	bne.n	8005e1e <__cvt+0xba>
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	4639      	mov	r1, r7
 8005e10:	f7fa fe62 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e14:	b918      	cbnz	r0, 8005e1e <__cvt+0xba>
 8005e16:	f1c4 0401 	rsb	r4, r4, #1
 8005e1a:	f8ca 4000 	str.w	r4, [sl]
 8005e1e:	f8da 3000 	ldr.w	r3, [sl]
 8005e22:	4499      	add	r9, r3
 8005e24:	e7d3      	b.n	8005dce <__cvt+0x6a>
 8005e26:	1c59      	adds	r1, r3, #1
 8005e28:	9103      	str	r1, [sp, #12]
 8005e2a:	701a      	strb	r2, [r3, #0]
 8005e2c:	e7d9      	b.n	8005de2 <__cvt+0x7e>

08005e2e <__exponent>:
 8005e2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e30:	2900      	cmp	r1, #0
 8005e32:	bfba      	itte	lt
 8005e34:	4249      	neglt	r1, r1
 8005e36:	232d      	movlt	r3, #45	@ 0x2d
 8005e38:	232b      	movge	r3, #43	@ 0x2b
 8005e3a:	2909      	cmp	r1, #9
 8005e3c:	7002      	strb	r2, [r0, #0]
 8005e3e:	7043      	strb	r3, [r0, #1]
 8005e40:	dd29      	ble.n	8005e96 <__exponent+0x68>
 8005e42:	f10d 0307 	add.w	r3, sp, #7
 8005e46:	461d      	mov	r5, r3
 8005e48:	270a      	movs	r7, #10
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005e50:	fb07 1416 	mls	r4, r7, r6, r1
 8005e54:	3430      	adds	r4, #48	@ 0x30
 8005e56:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	2c63      	cmp	r4, #99	@ 0x63
 8005e5e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e62:	4631      	mov	r1, r6
 8005e64:	dcf1      	bgt.n	8005e4a <__exponent+0x1c>
 8005e66:	3130      	adds	r1, #48	@ 0x30
 8005e68:	1e94      	subs	r4, r2, #2
 8005e6a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005e6e:	1c41      	adds	r1, r0, #1
 8005e70:	4623      	mov	r3, r4
 8005e72:	42ab      	cmp	r3, r5
 8005e74:	d30a      	bcc.n	8005e8c <__exponent+0x5e>
 8005e76:	f10d 0309 	add.w	r3, sp, #9
 8005e7a:	1a9b      	subs	r3, r3, r2
 8005e7c:	42ac      	cmp	r4, r5
 8005e7e:	bf88      	it	hi
 8005e80:	2300      	movhi	r3, #0
 8005e82:	3302      	adds	r3, #2
 8005e84:	4403      	add	r3, r0
 8005e86:	1a18      	subs	r0, r3, r0
 8005e88:	b003      	add	sp, #12
 8005e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e8c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005e90:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005e94:	e7ed      	b.n	8005e72 <__exponent+0x44>
 8005e96:	2330      	movs	r3, #48	@ 0x30
 8005e98:	3130      	adds	r1, #48	@ 0x30
 8005e9a:	7083      	strb	r3, [r0, #2]
 8005e9c:	70c1      	strb	r1, [r0, #3]
 8005e9e:	1d03      	adds	r3, r0, #4
 8005ea0:	e7f1      	b.n	8005e86 <__exponent+0x58>
	...

08005ea4 <_printf_float>:
 8005ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea8:	b08d      	sub	sp, #52	@ 0x34
 8005eaa:	460c      	mov	r4, r1
 8005eac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005eb0:	4616      	mov	r6, r2
 8005eb2:	461f      	mov	r7, r3
 8005eb4:	4605      	mov	r5, r0
 8005eb6:	f000 ff25 	bl	8006d04 <_localeconv_r>
 8005eba:	6803      	ldr	r3, [r0, #0]
 8005ebc:	9304      	str	r3, [sp, #16]
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fa f9de 	bl	8000280 <strlen>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ec8:	f8d8 3000 	ldr.w	r3, [r8]
 8005ecc:	9005      	str	r0, [sp, #20]
 8005ece:	3307      	adds	r3, #7
 8005ed0:	f023 0307 	bic.w	r3, r3, #7
 8005ed4:	f103 0208 	add.w	r2, r3, #8
 8005ed8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005edc:	f8d4 b000 	ldr.w	fp, [r4]
 8005ee0:	f8c8 2000 	str.w	r2, [r8]
 8005ee4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ee8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005eec:	9307      	str	r3, [sp, #28]
 8005eee:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ef2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005ef6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005efa:	4b9c      	ldr	r3, [pc, #624]	@ (800616c <_printf_float+0x2c8>)
 8005efc:	f04f 32ff 	mov.w	r2, #4294967295
 8005f00:	f7fa fe1c 	bl	8000b3c <__aeabi_dcmpun>
 8005f04:	bb70      	cbnz	r0, 8005f64 <_printf_float+0xc0>
 8005f06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f0a:	4b98      	ldr	r3, [pc, #608]	@ (800616c <_printf_float+0x2c8>)
 8005f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f10:	f7fa fdf6 	bl	8000b00 <__aeabi_dcmple>
 8005f14:	bb30      	cbnz	r0, 8005f64 <_printf_float+0xc0>
 8005f16:	2200      	movs	r2, #0
 8005f18:	2300      	movs	r3, #0
 8005f1a:	4640      	mov	r0, r8
 8005f1c:	4649      	mov	r1, r9
 8005f1e:	f7fa fde5 	bl	8000aec <__aeabi_dcmplt>
 8005f22:	b110      	cbz	r0, 8005f2a <_printf_float+0x86>
 8005f24:	232d      	movs	r3, #45	@ 0x2d
 8005f26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f2a:	4a91      	ldr	r2, [pc, #580]	@ (8006170 <_printf_float+0x2cc>)
 8005f2c:	4b91      	ldr	r3, [pc, #580]	@ (8006174 <_printf_float+0x2d0>)
 8005f2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005f32:	bf8c      	ite	hi
 8005f34:	4690      	movhi	r8, r2
 8005f36:	4698      	movls	r8, r3
 8005f38:	2303      	movs	r3, #3
 8005f3a:	6123      	str	r3, [r4, #16]
 8005f3c:	f02b 0304 	bic.w	r3, fp, #4
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	f04f 0900 	mov.w	r9, #0
 8005f46:	9700      	str	r7, [sp, #0]
 8005f48:	4633      	mov	r3, r6
 8005f4a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	4628      	mov	r0, r5
 8005f50:	f000 f9d2 	bl	80062f8 <_printf_common>
 8005f54:	3001      	adds	r0, #1
 8005f56:	f040 808d 	bne.w	8006074 <_printf_float+0x1d0>
 8005f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f5e:	b00d      	add	sp, #52	@ 0x34
 8005f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f64:	4642      	mov	r2, r8
 8005f66:	464b      	mov	r3, r9
 8005f68:	4640      	mov	r0, r8
 8005f6a:	4649      	mov	r1, r9
 8005f6c:	f7fa fde6 	bl	8000b3c <__aeabi_dcmpun>
 8005f70:	b140      	cbz	r0, 8005f84 <_printf_float+0xe0>
 8005f72:	464b      	mov	r3, r9
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	bfbc      	itt	lt
 8005f78:	232d      	movlt	r3, #45	@ 0x2d
 8005f7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005f7e:	4a7e      	ldr	r2, [pc, #504]	@ (8006178 <_printf_float+0x2d4>)
 8005f80:	4b7e      	ldr	r3, [pc, #504]	@ (800617c <_printf_float+0x2d8>)
 8005f82:	e7d4      	b.n	8005f2e <_printf_float+0x8a>
 8005f84:	6863      	ldr	r3, [r4, #4]
 8005f86:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005f8a:	9206      	str	r2, [sp, #24]
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	d13b      	bne.n	8006008 <_printf_float+0x164>
 8005f90:	2306      	movs	r3, #6
 8005f92:	6063      	str	r3, [r4, #4]
 8005f94:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005f98:	2300      	movs	r3, #0
 8005f9a:	6022      	str	r2, [r4, #0]
 8005f9c:	9303      	str	r3, [sp, #12]
 8005f9e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005fa0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005fa4:	ab09      	add	r3, sp, #36	@ 0x24
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	6861      	ldr	r1, [r4, #4]
 8005faa:	ec49 8b10 	vmov	d0, r8, r9
 8005fae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	f7ff fed6 	bl	8005d64 <__cvt>
 8005fb8:	9b06      	ldr	r3, [sp, #24]
 8005fba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005fbc:	2b47      	cmp	r3, #71	@ 0x47
 8005fbe:	4680      	mov	r8, r0
 8005fc0:	d129      	bne.n	8006016 <_printf_float+0x172>
 8005fc2:	1cc8      	adds	r0, r1, #3
 8005fc4:	db02      	blt.n	8005fcc <_printf_float+0x128>
 8005fc6:	6863      	ldr	r3, [r4, #4]
 8005fc8:	4299      	cmp	r1, r3
 8005fca:	dd41      	ble.n	8006050 <_printf_float+0x1ac>
 8005fcc:	f1aa 0a02 	sub.w	sl, sl, #2
 8005fd0:	fa5f fa8a 	uxtb.w	sl, sl
 8005fd4:	3901      	subs	r1, #1
 8005fd6:	4652      	mov	r2, sl
 8005fd8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005fdc:	9109      	str	r1, [sp, #36]	@ 0x24
 8005fde:	f7ff ff26 	bl	8005e2e <__exponent>
 8005fe2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fe4:	1813      	adds	r3, r2, r0
 8005fe6:	2a01      	cmp	r2, #1
 8005fe8:	4681      	mov	r9, r0
 8005fea:	6123      	str	r3, [r4, #16]
 8005fec:	dc02      	bgt.n	8005ff4 <_printf_float+0x150>
 8005fee:	6822      	ldr	r2, [r4, #0]
 8005ff0:	07d2      	lsls	r2, r2, #31
 8005ff2:	d501      	bpl.n	8005ff8 <_printf_float+0x154>
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	6123      	str	r3, [r4, #16]
 8005ff8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d0a2      	beq.n	8005f46 <_printf_float+0xa2>
 8006000:	232d      	movs	r3, #45	@ 0x2d
 8006002:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006006:	e79e      	b.n	8005f46 <_printf_float+0xa2>
 8006008:	9a06      	ldr	r2, [sp, #24]
 800600a:	2a47      	cmp	r2, #71	@ 0x47
 800600c:	d1c2      	bne.n	8005f94 <_printf_float+0xf0>
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1c0      	bne.n	8005f94 <_printf_float+0xf0>
 8006012:	2301      	movs	r3, #1
 8006014:	e7bd      	b.n	8005f92 <_printf_float+0xee>
 8006016:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800601a:	d9db      	bls.n	8005fd4 <_printf_float+0x130>
 800601c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006020:	d118      	bne.n	8006054 <_printf_float+0x1b0>
 8006022:	2900      	cmp	r1, #0
 8006024:	6863      	ldr	r3, [r4, #4]
 8006026:	dd0b      	ble.n	8006040 <_printf_float+0x19c>
 8006028:	6121      	str	r1, [r4, #16]
 800602a:	b913      	cbnz	r3, 8006032 <_printf_float+0x18e>
 800602c:	6822      	ldr	r2, [r4, #0]
 800602e:	07d0      	lsls	r0, r2, #31
 8006030:	d502      	bpl.n	8006038 <_printf_float+0x194>
 8006032:	3301      	adds	r3, #1
 8006034:	440b      	add	r3, r1
 8006036:	6123      	str	r3, [r4, #16]
 8006038:	65a1      	str	r1, [r4, #88]	@ 0x58
 800603a:	f04f 0900 	mov.w	r9, #0
 800603e:	e7db      	b.n	8005ff8 <_printf_float+0x154>
 8006040:	b913      	cbnz	r3, 8006048 <_printf_float+0x1a4>
 8006042:	6822      	ldr	r2, [r4, #0]
 8006044:	07d2      	lsls	r2, r2, #31
 8006046:	d501      	bpl.n	800604c <_printf_float+0x1a8>
 8006048:	3302      	adds	r3, #2
 800604a:	e7f4      	b.n	8006036 <_printf_float+0x192>
 800604c:	2301      	movs	r3, #1
 800604e:	e7f2      	b.n	8006036 <_printf_float+0x192>
 8006050:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006054:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006056:	4299      	cmp	r1, r3
 8006058:	db05      	blt.n	8006066 <_printf_float+0x1c2>
 800605a:	6823      	ldr	r3, [r4, #0]
 800605c:	6121      	str	r1, [r4, #16]
 800605e:	07d8      	lsls	r0, r3, #31
 8006060:	d5ea      	bpl.n	8006038 <_printf_float+0x194>
 8006062:	1c4b      	adds	r3, r1, #1
 8006064:	e7e7      	b.n	8006036 <_printf_float+0x192>
 8006066:	2900      	cmp	r1, #0
 8006068:	bfd4      	ite	le
 800606a:	f1c1 0202 	rsble	r2, r1, #2
 800606e:	2201      	movgt	r2, #1
 8006070:	4413      	add	r3, r2
 8006072:	e7e0      	b.n	8006036 <_printf_float+0x192>
 8006074:	6823      	ldr	r3, [r4, #0]
 8006076:	055a      	lsls	r2, r3, #21
 8006078:	d407      	bmi.n	800608a <_printf_float+0x1e6>
 800607a:	6923      	ldr	r3, [r4, #16]
 800607c:	4642      	mov	r2, r8
 800607e:	4631      	mov	r1, r6
 8006080:	4628      	mov	r0, r5
 8006082:	47b8      	blx	r7
 8006084:	3001      	adds	r0, #1
 8006086:	d12b      	bne.n	80060e0 <_printf_float+0x23c>
 8006088:	e767      	b.n	8005f5a <_printf_float+0xb6>
 800608a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800608e:	f240 80dd 	bls.w	800624c <_printf_float+0x3a8>
 8006092:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006096:	2200      	movs	r2, #0
 8006098:	2300      	movs	r3, #0
 800609a:	f7fa fd1d 	bl	8000ad8 <__aeabi_dcmpeq>
 800609e:	2800      	cmp	r0, #0
 80060a0:	d033      	beq.n	800610a <_printf_float+0x266>
 80060a2:	4a37      	ldr	r2, [pc, #220]	@ (8006180 <_printf_float+0x2dc>)
 80060a4:	2301      	movs	r3, #1
 80060a6:	4631      	mov	r1, r6
 80060a8:	4628      	mov	r0, r5
 80060aa:	47b8      	blx	r7
 80060ac:	3001      	adds	r0, #1
 80060ae:	f43f af54 	beq.w	8005f5a <_printf_float+0xb6>
 80060b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80060b6:	4543      	cmp	r3, r8
 80060b8:	db02      	blt.n	80060c0 <_printf_float+0x21c>
 80060ba:	6823      	ldr	r3, [r4, #0]
 80060bc:	07d8      	lsls	r0, r3, #31
 80060be:	d50f      	bpl.n	80060e0 <_printf_float+0x23c>
 80060c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060c4:	4631      	mov	r1, r6
 80060c6:	4628      	mov	r0, r5
 80060c8:	47b8      	blx	r7
 80060ca:	3001      	adds	r0, #1
 80060cc:	f43f af45 	beq.w	8005f5a <_printf_float+0xb6>
 80060d0:	f04f 0900 	mov.w	r9, #0
 80060d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80060d8:	f104 0a1a 	add.w	sl, r4, #26
 80060dc:	45c8      	cmp	r8, r9
 80060de:	dc09      	bgt.n	80060f4 <_printf_float+0x250>
 80060e0:	6823      	ldr	r3, [r4, #0]
 80060e2:	079b      	lsls	r3, r3, #30
 80060e4:	f100 8103 	bmi.w	80062ee <_printf_float+0x44a>
 80060e8:	68e0      	ldr	r0, [r4, #12]
 80060ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060ec:	4298      	cmp	r0, r3
 80060ee:	bfb8      	it	lt
 80060f0:	4618      	movlt	r0, r3
 80060f2:	e734      	b.n	8005f5e <_printf_float+0xba>
 80060f4:	2301      	movs	r3, #1
 80060f6:	4652      	mov	r2, sl
 80060f8:	4631      	mov	r1, r6
 80060fa:	4628      	mov	r0, r5
 80060fc:	47b8      	blx	r7
 80060fe:	3001      	adds	r0, #1
 8006100:	f43f af2b 	beq.w	8005f5a <_printf_float+0xb6>
 8006104:	f109 0901 	add.w	r9, r9, #1
 8006108:	e7e8      	b.n	80060dc <_printf_float+0x238>
 800610a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800610c:	2b00      	cmp	r3, #0
 800610e:	dc39      	bgt.n	8006184 <_printf_float+0x2e0>
 8006110:	4a1b      	ldr	r2, [pc, #108]	@ (8006180 <_printf_float+0x2dc>)
 8006112:	2301      	movs	r3, #1
 8006114:	4631      	mov	r1, r6
 8006116:	4628      	mov	r0, r5
 8006118:	47b8      	blx	r7
 800611a:	3001      	adds	r0, #1
 800611c:	f43f af1d 	beq.w	8005f5a <_printf_float+0xb6>
 8006120:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006124:	ea59 0303 	orrs.w	r3, r9, r3
 8006128:	d102      	bne.n	8006130 <_printf_float+0x28c>
 800612a:	6823      	ldr	r3, [r4, #0]
 800612c:	07d9      	lsls	r1, r3, #31
 800612e:	d5d7      	bpl.n	80060e0 <_printf_float+0x23c>
 8006130:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006134:	4631      	mov	r1, r6
 8006136:	4628      	mov	r0, r5
 8006138:	47b8      	blx	r7
 800613a:	3001      	adds	r0, #1
 800613c:	f43f af0d 	beq.w	8005f5a <_printf_float+0xb6>
 8006140:	f04f 0a00 	mov.w	sl, #0
 8006144:	f104 0b1a 	add.w	fp, r4, #26
 8006148:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800614a:	425b      	negs	r3, r3
 800614c:	4553      	cmp	r3, sl
 800614e:	dc01      	bgt.n	8006154 <_printf_float+0x2b0>
 8006150:	464b      	mov	r3, r9
 8006152:	e793      	b.n	800607c <_printf_float+0x1d8>
 8006154:	2301      	movs	r3, #1
 8006156:	465a      	mov	r2, fp
 8006158:	4631      	mov	r1, r6
 800615a:	4628      	mov	r0, r5
 800615c:	47b8      	blx	r7
 800615e:	3001      	adds	r0, #1
 8006160:	f43f aefb 	beq.w	8005f5a <_printf_float+0xb6>
 8006164:	f10a 0a01 	add.w	sl, sl, #1
 8006168:	e7ee      	b.n	8006148 <_printf_float+0x2a4>
 800616a:	bf00      	nop
 800616c:	7fefffff 	.word	0x7fefffff
 8006170:	0800e7d2 	.word	0x0800e7d2
 8006174:	0800e7ce 	.word	0x0800e7ce
 8006178:	0800e7da 	.word	0x0800e7da
 800617c:	0800e7d6 	.word	0x0800e7d6
 8006180:	0800e7de 	.word	0x0800e7de
 8006184:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006186:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800618a:	4553      	cmp	r3, sl
 800618c:	bfa8      	it	ge
 800618e:	4653      	movge	r3, sl
 8006190:	2b00      	cmp	r3, #0
 8006192:	4699      	mov	r9, r3
 8006194:	dc36      	bgt.n	8006204 <_printf_float+0x360>
 8006196:	f04f 0b00 	mov.w	fp, #0
 800619a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800619e:	f104 021a 	add.w	r2, r4, #26
 80061a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80061a4:	9306      	str	r3, [sp, #24]
 80061a6:	eba3 0309 	sub.w	r3, r3, r9
 80061aa:	455b      	cmp	r3, fp
 80061ac:	dc31      	bgt.n	8006212 <_printf_float+0x36e>
 80061ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061b0:	459a      	cmp	sl, r3
 80061b2:	dc3a      	bgt.n	800622a <_printf_float+0x386>
 80061b4:	6823      	ldr	r3, [r4, #0]
 80061b6:	07da      	lsls	r2, r3, #31
 80061b8:	d437      	bmi.n	800622a <_printf_float+0x386>
 80061ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061bc:	ebaa 0903 	sub.w	r9, sl, r3
 80061c0:	9b06      	ldr	r3, [sp, #24]
 80061c2:	ebaa 0303 	sub.w	r3, sl, r3
 80061c6:	4599      	cmp	r9, r3
 80061c8:	bfa8      	it	ge
 80061ca:	4699      	movge	r9, r3
 80061cc:	f1b9 0f00 	cmp.w	r9, #0
 80061d0:	dc33      	bgt.n	800623a <_printf_float+0x396>
 80061d2:	f04f 0800 	mov.w	r8, #0
 80061d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061da:	f104 0b1a 	add.w	fp, r4, #26
 80061de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061e0:	ebaa 0303 	sub.w	r3, sl, r3
 80061e4:	eba3 0309 	sub.w	r3, r3, r9
 80061e8:	4543      	cmp	r3, r8
 80061ea:	f77f af79 	ble.w	80060e0 <_printf_float+0x23c>
 80061ee:	2301      	movs	r3, #1
 80061f0:	465a      	mov	r2, fp
 80061f2:	4631      	mov	r1, r6
 80061f4:	4628      	mov	r0, r5
 80061f6:	47b8      	blx	r7
 80061f8:	3001      	adds	r0, #1
 80061fa:	f43f aeae 	beq.w	8005f5a <_printf_float+0xb6>
 80061fe:	f108 0801 	add.w	r8, r8, #1
 8006202:	e7ec      	b.n	80061de <_printf_float+0x33a>
 8006204:	4642      	mov	r2, r8
 8006206:	4631      	mov	r1, r6
 8006208:	4628      	mov	r0, r5
 800620a:	47b8      	blx	r7
 800620c:	3001      	adds	r0, #1
 800620e:	d1c2      	bne.n	8006196 <_printf_float+0x2f2>
 8006210:	e6a3      	b.n	8005f5a <_printf_float+0xb6>
 8006212:	2301      	movs	r3, #1
 8006214:	4631      	mov	r1, r6
 8006216:	4628      	mov	r0, r5
 8006218:	9206      	str	r2, [sp, #24]
 800621a:	47b8      	blx	r7
 800621c:	3001      	adds	r0, #1
 800621e:	f43f ae9c 	beq.w	8005f5a <_printf_float+0xb6>
 8006222:	9a06      	ldr	r2, [sp, #24]
 8006224:	f10b 0b01 	add.w	fp, fp, #1
 8006228:	e7bb      	b.n	80061a2 <_printf_float+0x2fe>
 800622a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800622e:	4631      	mov	r1, r6
 8006230:	4628      	mov	r0, r5
 8006232:	47b8      	blx	r7
 8006234:	3001      	adds	r0, #1
 8006236:	d1c0      	bne.n	80061ba <_printf_float+0x316>
 8006238:	e68f      	b.n	8005f5a <_printf_float+0xb6>
 800623a:	9a06      	ldr	r2, [sp, #24]
 800623c:	464b      	mov	r3, r9
 800623e:	4442      	add	r2, r8
 8006240:	4631      	mov	r1, r6
 8006242:	4628      	mov	r0, r5
 8006244:	47b8      	blx	r7
 8006246:	3001      	adds	r0, #1
 8006248:	d1c3      	bne.n	80061d2 <_printf_float+0x32e>
 800624a:	e686      	b.n	8005f5a <_printf_float+0xb6>
 800624c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006250:	f1ba 0f01 	cmp.w	sl, #1
 8006254:	dc01      	bgt.n	800625a <_printf_float+0x3b6>
 8006256:	07db      	lsls	r3, r3, #31
 8006258:	d536      	bpl.n	80062c8 <_printf_float+0x424>
 800625a:	2301      	movs	r3, #1
 800625c:	4642      	mov	r2, r8
 800625e:	4631      	mov	r1, r6
 8006260:	4628      	mov	r0, r5
 8006262:	47b8      	blx	r7
 8006264:	3001      	adds	r0, #1
 8006266:	f43f ae78 	beq.w	8005f5a <_printf_float+0xb6>
 800626a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800626e:	4631      	mov	r1, r6
 8006270:	4628      	mov	r0, r5
 8006272:	47b8      	blx	r7
 8006274:	3001      	adds	r0, #1
 8006276:	f43f ae70 	beq.w	8005f5a <_printf_float+0xb6>
 800627a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800627e:	2200      	movs	r2, #0
 8006280:	2300      	movs	r3, #0
 8006282:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006286:	f7fa fc27 	bl	8000ad8 <__aeabi_dcmpeq>
 800628a:	b9c0      	cbnz	r0, 80062be <_printf_float+0x41a>
 800628c:	4653      	mov	r3, sl
 800628e:	f108 0201 	add.w	r2, r8, #1
 8006292:	4631      	mov	r1, r6
 8006294:	4628      	mov	r0, r5
 8006296:	47b8      	blx	r7
 8006298:	3001      	adds	r0, #1
 800629a:	d10c      	bne.n	80062b6 <_printf_float+0x412>
 800629c:	e65d      	b.n	8005f5a <_printf_float+0xb6>
 800629e:	2301      	movs	r3, #1
 80062a0:	465a      	mov	r2, fp
 80062a2:	4631      	mov	r1, r6
 80062a4:	4628      	mov	r0, r5
 80062a6:	47b8      	blx	r7
 80062a8:	3001      	adds	r0, #1
 80062aa:	f43f ae56 	beq.w	8005f5a <_printf_float+0xb6>
 80062ae:	f108 0801 	add.w	r8, r8, #1
 80062b2:	45d0      	cmp	r8, sl
 80062b4:	dbf3      	blt.n	800629e <_printf_float+0x3fa>
 80062b6:	464b      	mov	r3, r9
 80062b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80062bc:	e6df      	b.n	800607e <_printf_float+0x1da>
 80062be:	f04f 0800 	mov.w	r8, #0
 80062c2:	f104 0b1a 	add.w	fp, r4, #26
 80062c6:	e7f4      	b.n	80062b2 <_printf_float+0x40e>
 80062c8:	2301      	movs	r3, #1
 80062ca:	4642      	mov	r2, r8
 80062cc:	e7e1      	b.n	8006292 <_printf_float+0x3ee>
 80062ce:	2301      	movs	r3, #1
 80062d0:	464a      	mov	r2, r9
 80062d2:	4631      	mov	r1, r6
 80062d4:	4628      	mov	r0, r5
 80062d6:	47b8      	blx	r7
 80062d8:	3001      	adds	r0, #1
 80062da:	f43f ae3e 	beq.w	8005f5a <_printf_float+0xb6>
 80062de:	f108 0801 	add.w	r8, r8, #1
 80062e2:	68e3      	ldr	r3, [r4, #12]
 80062e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80062e6:	1a5b      	subs	r3, r3, r1
 80062e8:	4543      	cmp	r3, r8
 80062ea:	dcf0      	bgt.n	80062ce <_printf_float+0x42a>
 80062ec:	e6fc      	b.n	80060e8 <_printf_float+0x244>
 80062ee:	f04f 0800 	mov.w	r8, #0
 80062f2:	f104 0919 	add.w	r9, r4, #25
 80062f6:	e7f4      	b.n	80062e2 <_printf_float+0x43e>

080062f8 <_printf_common>:
 80062f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062fc:	4616      	mov	r6, r2
 80062fe:	4698      	mov	r8, r3
 8006300:	688a      	ldr	r2, [r1, #8]
 8006302:	690b      	ldr	r3, [r1, #16]
 8006304:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006308:	4293      	cmp	r3, r2
 800630a:	bfb8      	it	lt
 800630c:	4613      	movlt	r3, r2
 800630e:	6033      	str	r3, [r6, #0]
 8006310:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006314:	4607      	mov	r7, r0
 8006316:	460c      	mov	r4, r1
 8006318:	b10a      	cbz	r2, 800631e <_printf_common+0x26>
 800631a:	3301      	adds	r3, #1
 800631c:	6033      	str	r3, [r6, #0]
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	0699      	lsls	r1, r3, #26
 8006322:	bf42      	ittt	mi
 8006324:	6833      	ldrmi	r3, [r6, #0]
 8006326:	3302      	addmi	r3, #2
 8006328:	6033      	strmi	r3, [r6, #0]
 800632a:	6825      	ldr	r5, [r4, #0]
 800632c:	f015 0506 	ands.w	r5, r5, #6
 8006330:	d106      	bne.n	8006340 <_printf_common+0x48>
 8006332:	f104 0a19 	add.w	sl, r4, #25
 8006336:	68e3      	ldr	r3, [r4, #12]
 8006338:	6832      	ldr	r2, [r6, #0]
 800633a:	1a9b      	subs	r3, r3, r2
 800633c:	42ab      	cmp	r3, r5
 800633e:	dc26      	bgt.n	800638e <_printf_common+0x96>
 8006340:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006344:	6822      	ldr	r2, [r4, #0]
 8006346:	3b00      	subs	r3, #0
 8006348:	bf18      	it	ne
 800634a:	2301      	movne	r3, #1
 800634c:	0692      	lsls	r2, r2, #26
 800634e:	d42b      	bmi.n	80063a8 <_printf_common+0xb0>
 8006350:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006354:	4641      	mov	r1, r8
 8006356:	4638      	mov	r0, r7
 8006358:	47c8      	blx	r9
 800635a:	3001      	adds	r0, #1
 800635c:	d01e      	beq.n	800639c <_printf_common+0xa4>
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	6922      	ldr	r2, [r4, #16]
 8006362:	f003 0306 	and.w	r3, r3, #6
 8006366:	2b04      	cmp	r3, #4
 8006368:	bf02      	ittt	eq
 800636a:	68e5      	ldreq	r5, [r4, #12]
 800636c:	6833      	ldreq	r3, [r6, #0]
 800636e:	1aed      	subeq	r5, r5, r3
 8006370:	68a3      	ldr	r3, [r4, #8]
 8006372:	bf0c      	ite	eq
 8006374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006378:	2500      	movne	r5, #0
 800637a:	4293      	cmp	r3, r2
 800637c:	bfc4      	itt	gt
 800637e:	1a9b      	subgt	r3, r3, r2
 8006380:	18ed      	addgt	r5, r5, r3
 8006382:	2600      	movs	r6, #0
 8006384:	341a      	adds	r4, #26
 8006386:	42b5      	cmp	r5, r6
 8006388:	d11a      	bne.n	80063c0 <_printf_common+0xc8>
 800638a:	2000      	movs	r0, #0
 800638c:	e008      	b.n	80063a0 <_printf_common+0xa8>
 800638e:	2301      	movs	r3, #1
 8006390:	4652      	mov	r2, sl
 8006392:	4641      	mov	r1, r8
 8006394:	4638      	mov	r0, r7
 8006396:	47c8      	blx	r9
 8006398:	3001      	adds	r0, #1
 800639a:	d103      	bne.n	80063a4 <_printf_common+0xac>
 800639c:	f04f 30ff 	mov.w	r0, #4294967295
 80063a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a4:	3501      	adds	r5, #1
 80063a6:	e7c6      	b.n	8006336 <_printf_common+0x3e>
 80063a8:	18e1      	adds	r1, r4, r3
 80063aa:	1c5a      	adds	r2, r3, #1
 80063ac:	2030      	movs	r0, #48	@ 0x30
 80063ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80063b2:	4422      	add	r2, r4
 80063b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80063b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80063bc:	3302      	adds	r3, #2
 80063be:	e7c7      	b.n	8006350 <_printf_common+0x58>
 80063c0:	2301      	movs	r3, #1
 80063c2:	4622      	mov	r2, r4
 80063c4:	4641      	mov	r1, r8
 80063c6:	4638      	mov	r0, r7
 80063c8:	47c8      	blx	r9
 80063ca:	3001      	adds	r0, #1
 80063cc:	d0e6      	beq.n	800639c <_printf_common+0xa4>
 80063ce:	3601      	adds	r6, #1
 80063d0:	e7d9      	b.n	8006386 <_printf_common+0x8e>
	...

080063d4 <_printf_i>:
 80063d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063d8:	7e0f      	ldrb	r7, [r1, #24]
 80063da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063dc:	2f78      	cmp	r7, #120	@ 0x78
 80063de:	4691      	mov	r9, r2
 80063e0:	4680      	mov	r8, r0
 80063e2:	460c      	mov	r4, r1
 80063e4:	469a      	mov	sl, r3
 80063e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80063ea:	d807      	bhi.n	80063fc <_printf_i+0x28>
 80063ec:	2f62      	cmp	r7, #98	@ 0x62
 80063ee:	d80a      	bhi.n	8006406 <_printf_i+0x32>
 80063f0:	2f00      	cmp	r7, #0
 80063f2:	f000 80d1 	beq.w	8006598 <_printf_i+0x1c4>
 80063f6:	2f58      	cmp	r7, #88	@ 0x58
 80063f8:	f000 80b8 	beq.w	800656c <_printf_i+0x198>
 80063fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006400:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006404:	e03a      	b.n	800647c <_printf_i+0xa8>
 8006406:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800640a:	2b15      	cmp	r3, #21
 800640c:	d8f6      	bhi.n	80063fc <_printf_i+0x28>
 800640e:	a101      	add	r1, pc, #4	@ (adr r1, 8006414 <_printf_i+0x40>)
 8006410:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006414:	0800646d 	.word	0x0800646d
 8006418:	08006481 	.word	0x08006481
 800641c:	080063fd 	.word	0x080063fd
 8006420:	080063fd 	.word	0x080063fd
 8006424:	080063fd 	.word	0x080063fd
 8006428:	080063fd 	.word	0x080063fd
 800642c:	08006481 	.word	0x08006481
 8006430:	080063fd 	.word	0x080063fd
 8006434:	080063fd 	.word	0x080063fd
 8006438:	080063fd 	.word	0x080063fd
 800643c:	080063fd 	.word	0x080063fd
 8006440:	0800657f 	.word	0x0800657f
 8006444:	080064ab 	.word	0x080064ab
 8006448:	08006539 	.word	0x08006539
 800644c:	080063fd 	.word	0x080063fd
 8006450:	080063fd 	.word	0x080063fd
 8006454:	080065a1 	.word	0x080065a1
 8006458:	080063fd 	.word	0x080063fd
 800645c:	080064ab 	.word	0x080064ab
 8006460:	080063fd 	.word	0x080063fd
 8006464:	080063fd 	.word	0x080063fd
 8006468:	08006541 	.word	0x08006541
 800646c:	6833      	ldr	r3, [r6, #0]
 800646e:	1d1a      	adds	r2, r3, #4
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6032      	str	r2, [r6, #0]
 8006474:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006478:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800647c:	2301      	movs	r3, #1
 800647e:	e09c      	b.n	80065ba <_printf_i+0x1e6>
 8006480:	6833      	ldr	r3, [r6, #0]
 8006482:	6820      	ldr	r0, [r4, #0]
 8006484:	1d19      	adds	r1, r3, #4
 8006486:	6031      	str	r1, [r6, #0]
 8006488:	0606      	lsls	r6, r0, #24
 800648a:	d501      	bpl.n	8006490 <_printf_i+0xbc>
 800648c:	681d      	ldr	r5, [r3, #0]
 800648e:	e003      	b.n	8006498 <_printf_i+0xc4>
 8006490:	0645      	lsls	r5, r0, #25
 8006492:	d5fb      	bpl.n	800648c <_printf_i+0xb8>
 8006494:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006498:	2d00      	cmp	r5, #0
 800649a:	da03      	bge.n	80064a4 <_printf_i+0xd0>
 800649c:	232d      	movs	r3, #45	@ 0x2d
 800649e:	426d      	negs	r5, r5
 80064a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064a4:	4858      	ldr	r0, [pc, #352]	@ (8006608 <_printf_i+0x234>)
 80064a6:	230a      	movs	r3, #10
 80064a8:	e011      	b.n	80064ce <_printf_i+0xfa>
 80064aa:	6821      	ldr	r1, [r4, #0]
 80064ac:	6833      	ldr	r3, [r6, #0]
 80064ae:	0608      	lsls	r0, r1, #24
 80064b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80064b4:	d402      	bmi.n	80064bc <_printf_i+0xe8>
 80064b6:	0649      	lsls	r1, r1, #25
 80064b8:	bf48      	it	mi
 80064ba:	b2ad      	uxthmi	r5, r5
 80064bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80064be:	4852      	ldr	r0, [pc, #328]	@ (8006608 <_printf_i+0x234>)
 80064c0:	6033      	str	r3, [r6, #0]
 80064c2:	bf14      	ite	ne
 80064c4:	230a      	movne	r3, #10
 80064c6:	2308      	moveq	r3, #8
 80064c8:	2100      	movs	r1, #0
 80064ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80064ce:	6866      	ldr	r6, [r4, #4]
 80064d0:	60a6      	str	r6, [r4, #8]
 80064d2:	2e00      	cmp	r6, #0
 80064d4:	db05      	blt.n	80064e2 <_printf_i+0x10e>
 80064d6:	6821      	ldr	r1, [r4, #0]
 80064d8:	432e      	orrs	r6, r5
 80064da:	f021 0104 	bic.w	r1, r1, #4
 80064de:	6021      	str	r1, [r4, #0]
 80064e0:	d04b      	beq.n	800657a <_printf_i+0x1a6>
 80064e2:	4616      	mov	r6, r2
 80064e4:	fbb5 f1f3 	udiv	r1, r5, r3
 80064e8:	fb03 5711 	mls	r7, r3, r1, r5
 80064ec:	5dc7      	ldrb	r7, [r0, r7]
 80064ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064f2:	462f      	mov	r7, r5
 80064f4:	42bb      	cmp	r3, r7
 80064f6:	460d      	mov	r5, r1
 80064f8:	d9f4      	bls.n	80064e4 <_printf_i+0x110>
 80064fa:	2b08      	cmp	r3, #8
 80064fc:	d10b      	bne.n	8006516 <_printf_i+0x142>
 80064fe:	6823      	ldr	r3, [r4, #0]
 8006500:	07df      	lsls	r7, r3, #31
 8006502:	d508      	bpl.n	8006516 <_printf_i+0x142>
 8006504:	6923      	ldr	r3, [r4, #16]
 8006506:	6861      	ldr	r1, [r4, #4]
 8006508:	4299      	cmp	r1, r3
 800650a:	bfde      	ittt	le
 800650c:	2330      	movle	r3, #48	@ 0x30
 800650e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006512:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006516:	1b92      	subs	r2, r2, r6
 8006518:	6122      	str	r2, [r4, #16]
 800651a:	f8cd a000 	str.w	sl, [sp]
 800651e:	464b      	mov	r3, r9
 8006520:	aa03      	add	r2, sp, #12
 8006522:	4621      	mov	r1, r4
 8006524:	4640      	mov	r0, r8
 8006526:	f7ff fee7 	bl	80062f8 <_printf_common>
 800652a:	3001      	adds	r0, #1
 800652c:	d14a      	bne.n	80065c4 <_printf_i+0x1f0>
 800652e:	f04f 30ff 	mov.w	r0, #4294967295
 8006532:	b004      	add	sp, #16
 8006534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006538:	6823      	ldr	r3, [r4, #0]
 800653a:	f043 0320 	orr.w	r3, r3, #32
 800653e:	6023      	str	r3, [r4, #0]
 8006540:	4832      	ldr	r0, [pc, #200]	@ (800660c <_printf_i+0x238>)
 8006542:	2778      	movs	r7, #120	@ 0x78
 8006544:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	6831      	ldr	r1, [r6, #0]
 800654c:	061f      	lsls	r7, r3, #24
 800654e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006552:	d402      	bmi.n	800655a <_printf_i+0x186>
 8006554:	065f      	lsls	r7, r3, #25
 8006556:	bf48      	it	mi
 8006558:	b2ad      	uxthmi	r5, r5
 800655a:	6031      	str	r1, [r6, #0]
 800655c:	07d9      	lsls	r1, r3, #31
 800655e:	bf44      	itt	mi
 8006560:	f043 0320 	orrmi.w	r3, r3, #32
 8006564:	6023      	strmi	r3, [r4, #0]
 8006566:	b11d      	cbz	r5, 8006570 <_printf_i+0x19c>
 8006568:	2310      	movs	r3, #16
 800656a:	e7ad      	b.n	80064c8 <_printf_i+0xf4>
 800656c:	4826      	ldr	r0, [pc, #152]	@ (8006608 <_printf_i+0x234>)
 800656e:	e7e9      	b.n	8006544 <_printf_i+0x170>
 8006570:	6823      	ldr	r3, [r4, #0]
 8006572:	f023 0320 	bic.w	r3, r3, #32
 8006576:	6023      	str	r3, [r4, #0]
 8006578:	e7f6      	b.n	8006568 <_printf_i+0x194>
 800657a:	4616      	mov	r6, r2
 800657c:	e7bd      	b.n	80064fa <_printf_i+0x126>
 800657e:	6833      	ldr	r3, [r6, #0]
 8006580:	6825      	ldr	r5, [r4, #0]
 8006582:	6961      	ldr	r1, [r4, #20]
 8006584:	1d18      	adds	r0, r3, #4
 8006586:	6030      	str	r0, [r6, #0]
 8006588:	062e      	lsls	r6, r5, #24
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	d501      	bpl.n	8006592 <_printf_i+0x1be>
 800658e:	6019      	str	r1, [r3, #0]
 8006590:	e002      	b.n	8006598 <_printf_i+0x1c4>
 8006592:	0668      	lsls	r0, r5, #25
 8006594:	d5fb      	bpl.n	800658e <_printf_i+0x1ba>
 8006596:	8019      	strh	r1, [r3, #0]
 8006598:	2300      	movs	r3, #0
 800659a:	6123      	str	r3, [r4, #16]
 800659c:	4616      	mov	r6, r2
 800659e:	e7bc      	b.n	800651a <_printf_i+0x146>
 80065a0:	6833      	ldr	r3, [r6, #0]
 80065a2:	1d1a      	adds	r2, r3, #4
 80065a4:	6032      	str	r2, [r6, #0]
 80065a6:	681e      	ldr	r6, [r3, #0]
 80065a8:	6862      	ldr	r2, [r4, #4]
 80065aa:	2100      	movs	r1, #0
 80065ac:	4630      	mov	r0, r6
 80065ae:	f7f9 fe17 	bl	80001e0 <memchr>
 80065b2:	b108      	cbz	r0, 80065b8 <_printf_i+0x1e4>
 80065b4:	1b80      	subs	r0, r0, r6
 80065b6:	6060      	str	r0, [r4, #4]
 80065b8:	6863      	ldr	r3, [r4, #4]
 80065ba:	6123      	str	r3, [r4, #16]
 80065bc:	2300      	movs	r3, #0
 80065be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065c2:	e7aa      	b.n	800651a <_printf_i+0x146>
 80065c4:	6923      	ldr	r3, [r4, #16]
 80065c6:	4632      	mov	r2, r6
 80065c8:	4649      	mov	r1, r9
 80065ca:	4640      	mov	r0, r8
 80065cc:	47d0      	blx	sl
 80065ce:	3001      	adds	r0, #1
 80065d0:	d0ad      	beq.n	800652e <_printf_i+0x15a>
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	079b      	lsls	r3, r3, #30
 80065d6:	d413      	bmi.n	8006600 <_printf_i+0x22c>
 80065d8:	68e0      	ldr	r0, [r4, #12]
 80065da:	9b03      	ldr	r3, [sp, #12]
 80065dc:	4298      	cmp	r0, r3
 80065de:	bfb8      	it	lt
 80065e0:	4618      	movlt	r0, r3
 80065e2:	e7a6      	b.n	8006532 <_printf_i+0x15e>
 80065e4:	2301      	movs	r3, #1
 80065e6:	4632      	mov	r2, r6
 80065e8:	4649      	mov	r1, r9
 80065ea:	4640      	mov	r0, r8
 80065ec:	47d0      	blx	sl
 80065ee:	3001      	adds	r0, #1
 80065f0:	d09d      	beq.n	800652e <_printf_i+0x15a>
 80065f2:	3501      	adds	r5, #1
 80065f4:	68e3      	ldr	r3, [r4, #12]
 80065f6:	9903      	ldr	r1, [sp, #12]
 80065f8:	1a5b      	subs	r3, r3, r1
 80065fa:	42ab      	cmp	r3, r5
 80065fc:	dcf2      	bgt.n	80065e4 <_printf_i+0x210>
 80065fe:	e7eb      	b.n	80065d8 <_printf_i+0x204>
 8006600:	2500      	movs	r5, #0
 8006602:	f104 0619 	add.w	r6, r4, #25
 8006606:	e7f5      	b.n	80065f4 <_printf_i+0x220>
 8006608:	0800e7e0 	.word	0x0800e7e0
 800660c:	0800e7f1 	.word	0x0800e7f1

08006610 <_scanf_float>:
 8006610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006614:	b087      	sub	sp, #28
 8006616:	4691      	mov	r9, r2
 8006618:	9303      	str	r3, [sp, #12]
 800661a:	688b      	ldr	r3, [r1, #8]
 800661c:	1e5a      	subs	r2, r3, #1
 800661e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006622:	bf81      	itttt	hi
 8006624:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006628:	eb03 0b05 	addhi.w	fp, r3, r5
 800662c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006630:	608b      	strhi	r3, [r1, #8]
 8006632:	680b      	ldr	r3, [r1, #0]
 8006634:	460a      	mov	r2, r1
 8006636:	f04f 0500 	mov.w	r5, #0
 800663a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800663e:	f842 3b1c 	str.w	r3, [r2], #28
 8006642:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006646:	4680      	mov	r8, r0
 8006648:	460c      	mov	r4, r1
 800664a:	bf98      	it	ls
 800664c:	f04f 0b00 	movls.w	fp, #0
 8006650:	9201      	str	r2, [sp, #4]
 8006652:	4616      	mov	r6, r2
 8006654:	46aa      	mov	sl, r5
 8006656:	462f      	mov	r7, r5
 8006658:	9502      	str	r5, [sp, #8]
 800665a:	68a2      	ldr	r2, [r4, #8]
 800665c:	b15a      	cbz	r2, 8006676 <_scanf_float+0x66>
 800665e:	f8d9 3000 	ldr.w	r3, [r9]
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	2b4e      	cmp	r3, #78	@ 0x4e
 8006666:	d863      	bhi.n	8006730 <_scanf_float+0x120>
 8006668:	2b40      	cmp	r3, #64	@ 0x40
 800666a:	d83b      	bhi.n	80066e4 <_scanf_float+0xd4>
 800666c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006670:	b2c8      	uxtb	r0, r1
 8006672:	280e      	cmp	r0, #14
 8006674:	d939      	bls.n	80066ea <_scanf_float+0xda>
 8006676:	b11f      	cbz	r7, 8006680 <_scanf_float+0x70>
 8006678:	6823      	ldr	r3, [r4, #0]
 800667a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800667e:	6023      	str	r3, [r4, #0]
 8006680:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006684:	f1ba 0f01 	cmp.w	sl, #1
 8006688:	f200 8114 	bhi.w	80068b4 <_scanf_float+0x2a4>
 800668c:	9b01      	ldr	r3, [sp, #4]
 800668e:	429e      	cmp	r6, r3
 8006690:	f200 8105 	bhi.w	800689e <_scanf_float+0x28e>
 8006694:	2001      	movs	r0, #1
 8006696:	b007      	add	sp, #28
 8006698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800669c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80066a0:	2a0d      	cmp	r2, #13
 80066a2:	d8e8      	bhi.n	8006676 <_scanf_float+0x66>
 80066a4:	a101      	add	r1, pc, #4	@ (adr r1, 80066ac <_scanf_float+0x9c>)
 80066a6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80066aa:	bf00      	nop
 80066ac:	080067f5 	.word	0x080067f5
 80066b0:	08006677 	.word	0x08006677
 80066b4:	08006677 	.word	0x08006677
 80066b8:	08006677 	.word	0x08006677
 80066bc:	08006851 	.word	0x08006851
 80066c0:	0800682b 	.word	0x0800682b
 80066c4:	08006677 	.word	0x08006677
 80066c8:	08006677 	.word	0x08006677
 80066cc:	08006803 	.word	0x08006803
 80066d0:	08006677 	.word	0x08006677
 80066d4:	08006677 	.word	0x08006677
 80066d8:	08006677 	.word	0x08006677
 80066dc:	08006677 	.word	0x08006677
 80066e0:	080067bf 	.word	0x080067bf
 80066e4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80066e8:	e7da      	b.n	80066a0 <_scanf_float+0x90>
 80066ea:	290e      	cmp	r1, #14
 80066ec:	d8c3      	bhi.n	8006676 <_scanf_float+0x66>
 80066ee:	a001      	add	r0, pc, #4	@ (adr r0, 80066f4 <_scanf_float+0xe4>)
 80066f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80066f4:	080067af 	.word	0x080067af
 80066f8:	08006677 	.word	0x08006677
 80066fc:	080067af 	.word	0x080067af
 8006700:	0800683f 	.word	0x0800683f
 8006704:	08006677 	.word	0x08006677
 8006708:	08006751 	.word	0x08006751
 800670c:	08006795 	.word	0x08006795
 8006710:	08006795 	.word	0x08006795
 8006714:	08006795 	.word	0x08006795
 8006718:	08006795 	.word	0x08006795
 800671c:	08006795 	.word	0x08006795
 8006720:	08006795 	.word	0x08006795
 8006724:	08006795 	.word	0x08006795
 8006728:	08006795 	.word	0x08006795
 800672c:	08006795 	.word	0x08006795
 8006730:	2b6e      	cmp	r3, #110	@ 0x6e
 8006732:	d809      	bhi.n	8006748 <_scanf_float+0x138>
 8006734:	2b60      	cmp	r3, #96	@ 0x60
 8006736:	d8b1      	bhi.n	800669c <_scanf_float+0x8c>
 8006738:	2b54      	cmp	r3, #84	@ 0x54
 800673a:	d07b      	beq.n	8006834 <_scanf_float+0x224>
 800673c:	2b59      	cmp	r3, #89	@ 0x59
 800673e:	d19a      	bne.n	8006676 <_scanf_float+0x66>
 8006740:	2d07      	cmp	r5, #7
 8006742:	d198      	bne.n	8006676 <_scanf_float+0x66>
 8006744:	2508      	movs	r5, #8
 8006746:	e02f      	b.n	80067a8 <_scanf_float+0x198>
 8006748:	2b74      	cmp	r3, #116	@ 0x74
 800674a:	d073      	beq.n	8006834 <_scanf_float+0x224>
 800674c:	2b79      	cmp	r3, #121	@ 0x79
 800674e:	e7f6      	b.n	800673e <_scanf_float+0x12e>
 8006750:	6821      	ldr	r1, [r4, #0]
 8006752:	05c8      	lsls	r0, r1, #23
 8006754:	d51e      	bpl.n	8006794 <_scanf_float+0x184>
 8006756:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800675a:	6021      	str	r1, [r4, #0]
 800675c:	3701      	adds	r7, #1
 800675e:	f1bb 0f00 	cmp.w	fp, #0
 8006762:	d003      	beq.n	800676c <_scanf_float+0x15c>
 8006764:	3201      	adds	r2, #1
 8006766:	f10b 3bff 	add.w	fp, fp, #4294967295
 800676a:	60a2      	str	r2, [r4, #8]
 800676c:	68a3      	ldr	r3, [r4, #8]
 800676e:	3b01      	subs	r3, #1
 8006770:	60a3      	str	r3, [r4, #8]
 8006772:	6923      	ldr	r3, [r4, #16]
 8006774:	3301      	adds	r3, #1
 8006776:	6123      	str	r3, [r4, #16]
 8006778:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800677c:	3b01      	subs	r3, #1
 800677e:	2b00      	cmp	r3, #0
 8006780:	f8c9 3004 	str.w	r3, [r9, #4]
 8006784:	f340 8082 	ble.w	800688c <_scanf_float+0x27c>
 8006788:	f8d9 3000 	ldr.w	r3, [r9]
 800678c:	3301      	adds	r3, #1
 800678e:	f8c9 3000 	str.w	r3, [r9]
 8006792:	e762      	b.n	800665a <_scanf_float+0x4a>
 8006794:	eb1a 0105 	adds.w	r1, sl, r5
 8006798:	f47f af6d 	bne.w	8006676 <_scanf_float+0x66>
 800679c:	6822      	ldr	r2, [r4, #0]
 800679e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80067a2:	6022      	str	r2, [r4, #0]
 80067a4:	460d      	mov	r5, r1
 80067a6:	468a      	mov	sl, r1
 80067a8:	f806 3b01 	strb.w	r3, [r6], #1
 80067ac:	e7de      	b.n	800676c <_scanf_float+0x15c>
 80067ae:	6822      	ldr	r2, [r4, #0]
 80067b0:	0610      	lsls	r0, r2, #24
 80067b2:	f57f af60 	bpl.w	8006676 <_scanf_float+0x66>
 80067b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80067ba:	6022      	str	r2, [r4, #0]
 80067bc:	e7f4      	b.n	80067a8 <_scanf_float+0x198>
 80067be:	f1ba 0f00 	cmp.w	sl, #0
 80067c2:	d10c      	bne.n	80067de <_scanf_float+0x1ce>
 80067c4:	b977      	cbnz	r7, 80067e4 <_scanf_float+0x1d4>
 80067c6:	6822      	ldr	r2, [r4, #0]
 80067c8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80067cc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80067d0:	d108      	bne.n	80067e4 <_scanf_float+0x1d4>
 80067d2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80067d6:	6022      	str	r2, [r4, #0]
 80067d8:	f04f 0a01 	mov.w	sl, #1
 80067dc:	e7e4      	b.n	80067a8 <_scanf_float+0x198>
 80067de:	f1ba 0f02 	cmp.w	sl, #2
 80067e2:	d050      	beq.n	8006886 <_scanf_float+0x276>
 80067e4:	2d01      	cmp	r5, #1
 80067e6:	d002      	beq.n	80067ee <_scanf_float+0x1de>
 80067e8:	2d04      	cmp	r5, #4
 80067ea:	f47f af44 	bne.w	8006676 <_scanf_float+0x66>
 80067ee:	3501      	adds	r5, #1
 80067f0:	b2ed      	uxtb	r5, r5
 80067f2:	e7d9      	b.n	80067a8 <_scanf_float+0x198>
 80067f4:	f1ba 0f01 	cmp.w	sl, #1
 80067f8:	f47f af3d 	bne.w	8006676 <_scanf_float+0x66>
 80067fc:	f04f 0a02 	mov.w	sl, #2
 8006800:	e7d2      	b.n	80067a8 <_scanf_float+0x198>
 8006802:	b975      	cbnz	r5, 8006822 <_scanf_float+0x212>
 8006804:	2f00      	cmp	r7, #0
 8006806:	f47f af37 	bne.w	8006678 <_scanf_float+0x68>
 800680a:	6822      	ldr	r2, [r4, #0]
 800680c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006810:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006814:	f040 8103 	bne.w	8006a1e <_scanf_float+0x40e>
 8006818:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800681c:	6022      	str	r2, [r4, #0]
 800681e:	2501      	movs	r5, #1
 8006820:	e7c2      	b.n	80067a8 <_scanf_float+0x198>
 8006822:	2d03      	cmp	r5, #3
 8006824:	d0e3      	beq.n	80067ee <_scanf_float+0x1de>
 8006826:	2d05      	cmp	r5, #5
 8006828:	e7df      	b.n	80067ea <_scanf_float+0x1da>
 800682a:	2d02      	cmp	r5, #2
 800682c:	f47f af23 	bne.w	8006676 <_scanf_float+0x66>
 8006830:	2503      	movs	r5, #3
 8006832:	e7b9      	b.n	80067a8 <_scanf_float+0x198>
 8006834:	2d06      	cmp	r5, #6
 8006836:	f47f af1e 	bne.w	8006676 <_scanf_float+0x66>
 800683a:	2507      	movs	r5, #7
 800683c:	e7b4      	b.n	80067a8 <_scanf_float+0x198>
 800683e:	6822      	ldr	r2, [r4, #0]
 8006840:	0591      	lsls	r1, r2, #22
 8006842:	f57f af18 	bpl.w	8006676 <_scanf_float+0x66>
 8006846:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800684a:	6022      	str	r2, [r4, #0]
 800684c:	9702      	str	r7, [sp, #8]
 800684e:	e7ab      	b.n	80067a8 <_scanf_float+0x198>
 8006850:	6822      	ldr	r2, [r4, #0]
 8006852:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006856:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800685a:	d005      	beq.n	8006868 <_scanf_float+0x258>
 800685c:	0550      	lsls	r0, r2, #21
 800685e:	f57f af0a 	bpl.w	8006676 <_scanf_float+0x66>
 8006862:	2f00      	cmp	r7, #0
 8006864:	f000 80db 	beq.w	8006a1e <_scanf_float+0x40e>
 8006868:	0591      	lsls	r1, r2, #22
 800686a:	bf58      	it	pl
 800686c:	9902      	ldrpl	r1, [sp, #8]
 800686e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006872:	bf58      	it	pl
 8006874:	1a79      	subpl	r1, r7, r1
 8006876:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800687a:	bf58      	it	pl
 800687c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006880:	6022      	str	r2, [r4, #0]
 8006882:	2700      	movs	r7, #0
 8006884:	e790      	b.n	80067a8 <_scanf_float+0x198>
 8006886:	f04f 0a03 	mov.w	sl, #3
 800688a:	e78d      	b.n	80067a8 <_scanf_float+0x198>
 800688c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006890:	4649      	mov	r1, r9
 8006892:	4640      	mov	r0, r8
 8006894:	4798      	blx	r3
 8006896:	2800      	cmp	r0, #0
 8006898:	f43f aedf 	beq.w	800665a <_scanf_float+0x4a>
 800689c:	e6eb      	b.n	8006676 <_scanf_float+0x66>
 800689e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068a6:	464a      	mov	r2, r9
 80068a8:	4640      	mov	r0, r8
 80068aa:	4798      	blx	r3
 80068ac:	6923      	ldr	r3, [r4, #16]
 80068ae:	3b01      	subs	r3, #1
 80068b0:	6123      	str	r3, [r4, #16]
 80068b2:	e6eb      	b.n	800668c <_scanf_float+0x7c>
 80068b4:	1e6b      	subs	r3, r5, #1
 80068b6:	2b06      	cmp	r3, #6
 80068b8:	d824      	bhi.n	8006904 <_scanf_float+0x2f4>
 80068ba:	2d02      	cmp	r5, #2
 80068bc:	d836      	bhi.n	800692c <_scanf_float+0x31c>
 80068be:	9b01      	ldr	r3, [sp, #4]
 80068c0:	429e      	cmp	r6, r3
 80068c2:	f67f aee7 	bls.w	8006694 <_scanf_float+0x84>
 80068c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80068ce:	464a      	mov	r2, r9
 80068d0:	4640      	mov	r0, r8
 80068d2:	4798      	blx	r3
 80068d4:	6923      	ldr	r3, [r4, #16]
 80068d6:	3b01      	subs	r3, #1
 80068d8:	6123      	str	r3, [r4, #16]
 80068da:	e7f0      	b.n	80068be <_scanf_float+0x2ae>
 80068dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80068e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80068e4:	464a      	mov	r2, r9
 80068e6:	4640      	mov	r0, r8
 80068e8:	4798      	blx	r3
 80068ea:	6923      	ldr	r3, [r4, #16]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	6123      	str	r3, [r4, #16]
 80068f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80068f4:	fa5f fa8a 	uxtb.w	sl, sl
 80068f8:	f1ba 0f02 	cmp.w	sl, #2
 80068fc:	d1ee      	bne.n	80068dc <_scanf_float+0x2cc>
 80068fe:	3d03      	subs	r5, #3
 8006900:	b2ed      	uxtb	r5, r5
 8006902:	1b76      	subs	r6, r6, r5
 8006904:	6823      	ldr	r3, [r4, #0]
 8006906:	05da      	lsls	r2, r3, #23
 8006908:	d530      	bpl.n	800696c <_scanf_float+0x35c>
 800690a:	055b      	lsls	r3, r3, #21
 800690c:	d511      	bpl.n	8006932 <_scanf_float+0x322>
 800690e:	9b01      	ldr	r3, [sp, #4]
 8006910:	429e      	cmp	r6, r3
 8006912:	f67f aebf 	bls.w	8006694 <_scanf_float+0x84>
 8006916:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800691a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800691e:	464a      	mov	r2, r9
 8006920:	4640      	mov	r0, r8
 8006922:	4798      	blx	r3
 8006924:	6923      	ldr	r3, [r4, #16]
 8006926:	3b01      	subs	r3, #1
 8006928:	6123      	str	r3, [r4, #16]
 800692a:	e7f0      	b.n	800690e <_scanf_float+0x2fe>
 800692c:	46aa      	mov	sl, r5
 800692e:	46b3      	mov	fp, r6
 8006930:	e7de      	b.n	80068f0 <_scanf_float+0x2e0>
 8006932:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006936:	6923      	ldr	r3, [r4, #16]
 8006938:	2965      	cmp	r1, #101	@ 0x65
 800693a:	f103 33ff 	add.w	r3, r3, #4294967295
 800693e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006942:	6123      	str	r3, [r4, #16]
 8006944:	d00c      	beq.n	8006960 <_scanf_float+0x350>
 8006946:	2945      	cmp	r1, #69	@ 0x45
 8006948:	d00a      	beq.n	8006960 <_scanf_float+0x350>
 800694a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800694e:	464a      	mov	r2, r9
 8006950:	4640      	mov	r0, r8
 8006952:	4798      	blx	r3
 8006954:	6923      	ldr	r3, [r4, #16]
 8006956:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800695a:	3b01      	subs	r3, #1
 800695c:	1eb5      	subs	r5, r6, #2
 800695e:	6123      	str	r3, [r4, #16]
 8006960:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006964:	464a      	mov	r2, r9
 8006966:	4640      	mov	r0, r8
 8006968:	4798      	blx	r3
 800696a:	462e      	mov	r6, r5
 800696c:	6822      	ldr	r2, [r4, #0]
 800696e:	f012 0210 	ands.w	r2, r2, #16
 8006972:	d001      	beq.n	8006978 <_scanf_float+0x368>
 8006974:	2000      	movs	r0, #0
 8006976:	e68e      	b.n	8006696 <_scanf_float+0x86>
 8006978:	7032      	strb	r2, [r6, #0]
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006980:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006984:	d125      	bne.n	80069d2 <_scanf_float+0x3c2>
 8006986:	9b02      	ldr	r3, [sp, #8]
 8006988:	429f      	cmp	r7, r3
 800698a:	d00a      	beq.n	80069a2 <_scanf_float+0x392>
 800698c:	1bda      	subs	r2, r3, r7
 800698e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006992:	429e      	cmp	r6, r3
 8006994:	bf28      	it	cs
 8006996:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800699a:	4922      	ldr	r1, [pc, #136]	@ (8006a24 <_scanf_float+0x414>)
 800699c:	4630      	mov	r0, r6
 800699e:	f000 f907 	bl	8006bb0 <siprintf>
 80069a2:	9901      	ldr	r1, [sp, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	4640      	mov	r0, r8
 80069a8:	f7ff f966 	bl	8005c78 <_strtod_r>
 80069ac:	9b03      	ldr	r3, [sp, #12]
 80069ae:	6821      	ldr	r1, [r4, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f011 0f02 	tst.w	r1, #2
 80069b6:	ec57 6b10 	vmov	r6, r7, d0
 80069ba:	f103 0204 	add.w	r2, r3, #4
 80069be:	d015      	beq.n	80069ec <_scanf_float+0x3dc>
 80069c0:	9903      	ldr	r1, [sp, #12]
 80069c2:	600a      	str	r2, [r1, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	e9c3 6700 	strd	r6, r7, [r3]
 80069ca:	68e3      	ldr	r3, [r4, #12]
 80069cc:	3301      	adds	r3, #1
 80069ce:	60e3      	str	r3, [r4, #12]
 80069d0:	e7d0      	b.n	8006974 <_scanf_float+0x364>
 80069d2:	9b04      	ldr	r3, [sp, #16]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0e4      	beq.n	80069a2 <_scanf_float+0x392>
 80069d8:	9905      	ldr	r1, [sp, #20]
 80069da:	230a      	movs	r3, #10
 80069dc:	3101      	adds	r1, #1
 80069de:	4640      	mov	r0, r8
 80069e0:	f002 f9ee 	bl	8008dc0 <_strtol_r>
 80069e4:	9b04      	ldr	r3, [sp, #16]
 80069e6:	9e05      	ldr	r6, [sp, #20]
 80069e8:	1ac2      	subs	r2, r0, r3
 80069ea:	e7d0      	b.n	800698e <_scanf_float+0x37e>
 80069ec:	f011 0f04 	tst.w	r1, #4
 80069f0:	9903      	ldr	r1, [sp, #12]
 80069f2:	600a      	str	r2, [r1, #0]
 80069f4:	d1e6      	bne.n	80069c4 <_scanf_float+0x3b4>
 80069f6:	681d      	ldr	r5, [r3, #0]
 80069f8:	4632      	mov	r2, r6
 80069fa:	463b      	mov	r3, r7
 80069fc:	4630      	mov	r0, r6
 80069fe:	4639      	mov	r1, r7
 8006a00:	f7fa f89c 	bl	8000b3c <__aeabi_dcmpun>
 8006a04:	b128      	cbz	r0, 8006a12 <_scanf_float+0x402>
 8006a06:	4808      	ldr	r0, [pc, #32]	@ (8006a28 <_scanf_float+0x418>)
 8006a08:	f000 fa0a 	bl	8006e20 <nanf>
 8006a0c:	ed85 0a00 	vstr	s0, [r5]
 8006a10:	e7db      	b.n	80069ca <_scanf_float+0x3ba>
 8006a12:	4630      	mov	r0, r6
 8006a14:	4639      	mov	r1, r7
 8006a16:	f7fa f8ef 	bl	8000bf8 <__aeabi_d2f>
 8006a1a:	6028      	str	r0, [r5, #0]
 8006a1c:	e7d5      	b.n	80069ca <_scanf_float+0x3ba>
 8006a1e:	2700      	movs	r7, #0
 8006a20:	e62e      	b.n	8006680 <_scanf_float+0x70>
 8006a22:	bf00      	nop
 8006a24:	0800e802 	.word	0x0800e802
 8006a28:	0800e9a1 	.word	0x0800e9a1

08006a2c <std>:
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	b510      	push	{r4, lr}
 8006a30:	4604      	mov	r4, r0
 8006a32:	e9c0 3300 	strd	r3, r3, [r0]
 8006a36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a3a:	6083      	str	r3, [r0, #8]
 8006a3c:	8181      	strh	r1, [r0, #12]
 8006a3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a40:	81c2      	strh	r2, [r0, #14]
 8006a42:	6183      	str	r3, [r0, #24]
 8006a44:	4619      	mov	r1, r3
 8006a46:	2208      	movs	r2, #8
 8006a48:	305c      	adds	r0, #92	@ 0x5c
 8006a4a:	f000 f916 	bl	8006c7a <memset>
 8006a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a84 <std+0x58>)
 8006a50:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a52:	4b0d      	ldr	r3, [pc, #52]	@ (8006a88 <std+0x5c>)
 8006a54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a56:	4b0d      	ldr	r3, [pc, #52]	@ (8006a8c <std+0x60>)
 8006a58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a90 <std+0x64>)
 8006a5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a94 <std+0x68>)
 8006a60:	6224      	str	r4, [r4, #32]
 8006a62:	429c      	cmp	r4, r3
 8006a64:	d006      	beq.n	8006a74 <std+0x48>
 8006a66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a6a:	4294      	cmp	r4, r2
 8006a6c:	d002      	beq.n	8006a74 <std+0x48>
 8006a6e:	33d0      	adds	r3, #208	@ 0xd0
 8006a70:	429c      	cmp	r4, r3
 8006a72:	d105      	bne.n	8006a80 <std+0x54>
 8006a74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a7c:	f000 b9b6 	b.w	8006dec <__retarget_lock_init_recursive>
 8006a80:	bd10      	pop	{r4, pc}
 8006a82:	bf00      	nop
 8006a84:	08006bf5 	.word	0x08006bf5
 8006a88:	08006c17 	.word	0x08006c17
 8006a8c:	08006c4f 	.word	0x08006c4f
 8006a90:	08006c73 	.word	0x08006c73
 8006a94:	20000c1c 	.word	0x20000c1c

08006a98 <stdio_exit_handler>:
 8006a98:	4a02      	ldr	r2, [pc, #8]	@ (8006aa4 <stdio_exit_handler+0xc>)
 8006a9a:	4903      	ldr	r1, [pc, #12]	@ (8006aa8 <stdio_exit_handler+0x10>)
 8006a9c:	4803      	ldr	r0, [pc, #12]	@ (8006aac <stdio_exit_handler+0x14>)
 8006a9e:	f000 b869 	b.w	8006b74 <_fwalk_sglue>
 8006aa2:	bf00      	nop
 8006aa4:	2000000c 	.word	0x2000000c
 8006aa8:	08009195 	.word	0x08009195
 8006aac:	20000188 	.word	0x20000188

08006ab0 <cleanup_stdio>:
 8006ab0:	6841      	ldr	r1, [r0, #4]
 8006ab2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae4 <cleanup_stdio+0x34>)
 8006ab4:	4299      	cmp	r1, r3
 8006ab6:	b510      	push	{r4, lr}
 8006ab8:	4604      	mov	r4, r0
 8006aba:	d001      	beq.n	8006ac0 <cleanup_stdio+0x10>
 8006abc:	f002 fb6a 	bl	8009194 <_fflush_r>
 8006ac0:	68a1      	ldr	r1, [r4, #8]
 8006ac2:	4b09      	ldr	r3, [pc, #36]	@ (8006ae8 <cleanup_stdio+0x38>)
 8006ac4:	4299      	cmp	r1, r3
 8006ac6:	d002      	beq.n	8006ace <cleanup_stdio+0x1e>
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f002 fb63 	bl	8009194 <_fflush_r>
 8006ace:	68e1      	ldr	r1, [r4, #12]
 8006ad0:	4b06      	ldr	r3, [pc, #24]	@ (8006aec <cleanup_stdio+0x3c>)
 8006ad2:	4299      	cmp	r1, r3
 8006ad4:	d004      	beq.n	8006ae0 <cleanup_stdio+0x30>
 8006ad6:	4620      	mov	r0, r4
 8006ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006adc:	f002 bb5a 	b.w	8009194 <_fflush_r>
 8006ae0:	bd10      	pop	{r4, pc}
 8006ae2:	bf00      	nop
 8006ae4:	20000c1c 	.word	0x20000c1c
 8006ae8:	20000c84 	.word	0x20000c84
 8006aec:	20000cec 	.word	0x20000cec

08006af0 <global_stdio_init.part.0>:
 8006af0:	b510      	push	{r4, lr}
 8006af2:	4b0b      	ldr	r3, [pc, #44]	@ (8006b20 <global_stdio_init.part.0+0x30>)
 8006af4:	4c0b      	ldr	r4, [pc, #44]	@ (8006b24 <global_stdio_init.part.0+0x34>)
 8006af6:	4a0c      	ldr	r2, [pc, #48]	@ (8006b28 <global_stdio_init.part.0+0x38>)
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	4620      	mov	r0, r4
 8006afc:	2200      	movs	r2, #0
 8006afe:	2104      	movs	r1, #4
 8006b00:	f7ff ff94 	bl	8006a2c <std>
 8006b04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b08:	2201      	movs	r2, #1
 8006b0a:	2109      	movs	r1, #9
 8006b0c:	f7ff ff8e 	bl	8006a2c <std>
 8006b10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b14:	2202      	movs	r2, #2
 8006b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b1a:	2112      	movs	r1, #18
 8006b1c:	f7ff bf86 	b.w	8006a2c <std>
 8006b20:	20000d54 	.word	0x20000d54
 8006b24:	20000c1c 	.word	0x20000c1c
 8006b28:	08006a99 	.word	0x08006a99

08006b2c <__sfp_lock_acquire>:
 8006b2c:	4801      	ldr	r0, [pc, #4]	@ (8006b34 <__sfp_lock_acquire+0x8>)
 8006b2e:	f000 b95e 	b.w	8006dee <__retarget_lock_acquire_recursive>
 8006b32:	bf00      	nop
 8006b34:	20000d5d 	.word	0x20000d5d

08006b38 <__sfp_lock_release>:
 8006b38:	4801      	ldr	r0, [pc, #4]	@ (8006b40 <__sfp_lock_release+0x8>)
 8006b3a:	f000 b959 	b.w	8006df0 <__retarget_lock_release_recursive>
 8006b3e:	bf00      	nop
 8006b40:	20000d5d 	.word	0x20000d5d

08006b44 <__sinit>:
 8006b44:	b510      	push	{r4, lr}
 8006b46:	4604      	mov	r4, r0
 8006b48:	f7ff fff0 	bl	8006b2c <__sfp_lock_acquire>
 8006b4c:	6a23      	ldr	r3, [r4, #32]
 8006b4e:	b11b      	cbz	r3, 8006b58 <__sinit+0x14>
 8006b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b54:	f7ff bff0 	b.w	8006b38 <__sfp_lock_release>
 8006b58:	4b04      	ldr	r3, [pc, #16]	@ (8006b6c <__sinit+0x28>)
 8006b5a:	6223      	str	r3, [r4, #32]
 8006b5c:	4b04      	ldr	r3, [pc, #16]	@ (8006b70 <__sinit+0x2c>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d1f5      	bne.n	8006b50 <__sinit+0xc>
 8006b64:	f7ff ffc4 	bl	8006af0 <global_stdio_init.part.0>
 8006b68:	e7f2      	b.n	8006b50 <__sinit+0xc>
 8006b6a:	bf00      	nop
 8006b6c:	08006ab1 	.word	0x08006ab1
 8006b70:	20000d54 	.word	0x20000d54

08006b74 <_fwalk_sglue>:
 8006b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b78:	4607      	mov	r7, r0
 8006b7a:	4688      	mov	r8, r1
 8006b7c:	4614      	mov	r4, r2
 8006b7e:	2600      	movs	r6, #0
 8006b80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b84:	f1b9 0901 	subs.w	r9, r9, #1
 8006b88:	d505      	bpl.n	8006b96 <_fwalk_sglue+0x22>
 8006b8a:	6824      	ldr	r4, [r4, #0]
 8006b8c:	2c00      	cmp	r4, #0
 8006b8e:	d1f7      	bne.n	8006b80 <_fwalk_sglue+0xc>
 8006b90:	4630      	mov	r0, r6
 8006b92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b96:	89ab      	ldrh	r3, [r5, #12]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d907      	bls.n	8006bac <_fwalk_sglue+0x38>
 8006b9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	d003      	beq.n	8006bac <_fwalk_sglue+0x38>
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	47c0      	blx	r8
 8006baa:	4306      	orrs	r6, r0
 8006bac:	3568      	adds	r5, #104	@ 0x68
 8006bae:	e7e9      	b.n	8006b84 <_fwalk_sglue+0x10>

08006bb0 <siprintf>:
 8006bb0:	b40e      	push	{r1, r2, r3}
 8006bb2:	b510      	push	{r4, lr}
 8006bb4:	b09d      	sub	sp, #116	@ 0x74
 8006bb6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006bb8:	9002      	str	r0, [sp, #8]
 8006bba:	9006      	str	r0, [sp, #24]
 8006bbc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006bc0:	480a      	ldr	r0, [pc, #40]	@ (8006bec <siprintf+0x3c>)
 8006bc2:	9107      	str	r1, [sp, #28]
 8006bc4:	9104      	str	r1, [sp, #16]
 8006bc6:	490a      	ldr	r1, [pc, #40]	@ (8006bf0 <siprintf+0x40>)
 8006bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bcc:	9105      	str	r1, [sp, #20]
 8006bce:	2400      	movs	r4, #0
 8006bd0:	a902      	add	r1, sp, #8
 8006bd2:	6800      	ldr	r0, [r0, #0]
 8006bd4:	9301      	str	r3, [sp, #4]
 8006bd6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006bd8:	f002 f95c 	bl	8008e94 <_svfiprintf_r>
 8006bdc:	9b02      	ldr	r3, [sp, #8]
 8006bde:	701c      	strb	r4, [r3, #0]
 8006be0:	b01d      	add	sp, #116	@ 0x74
 8006be2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006be6:	b003      	add	sp, #12
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	20000184 	.word	0x20000184
 8006bf0:	ffff0208 	.word	0xffff0208

08006bf4 <__sread>:
 8006bf4:	b510      	push	{r4, lr}
 8006bf6:	460c      	mov	r4, r1
 8006bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bfc:	f000 f8a8 	bl	8006d50 <_read_r>
 8006c00:	2800      	cmp	r0, #0
 8006c02:	bfab      	itete	ge
 8006c04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c06:	89a3      	ldrhlt	r3, [r4, #12]
 8006c08:	181b      	addge	r3, r3, r0
 8006c0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c0e:	bfac      	ite	ge
 8006c10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c12:	81a3      	strhlt	r3, [r4, #12]
 8006c14:	bd10      	pop	{r4, pc}

08006c16 <__swrite>:
 8006c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c1a:	461f      	mov	r7, r3
 8006c1c:	898b      	ldrh	r3, [r1, #12]
 8006c1e:	05db      	lsls	r3, r3, #23
 8006c20:	4605      	mov	r5, r0
 8006c22:	460c      	mov	r4, r1
 8006c24:	4616      	mov	r6, r2
 8006c26:	d505      	bpl.n	8006c34 <__swrite+0x1e>
 8006c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f000 f87c 	bl	8006d2c <_lseek_r>
 8006c34:	89a3      	ldrh	r3, [r4, #12]
 8006c36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c3e:	81a3      	strh	r3, [r4, #12]
 8006c40:	4632      	mov	r2, r6
 8006c42:	463b      	mov	r3, r7
 8006c44:	4628      	mov	r0, r5
 8006c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c4a:	f000 b893 	b.w	8006d74 <_write_r>

08006c4e <__sseek>:
 8006c4e:	b510      	push	{r4, lr}
 8006c50:	460c      	mov	r4, r1
 8006c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c56:	f000 f869 	bl	8006d2c <_lseek_r>
 8006c5a:	1c43      	adds	r3, r0, #1
 8006c5c:	89a3      	ldrh	r3, [r4, #12]
 8006c5e:	bf15      	itete	ne
 8006c60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c6a:	81a3      	strheq	r3, [r4, #12]
 8006c6c:	bf18      	it	ne
 8006c6e:	81a3      	strhne	r3, [r4, #12]
 8006c70:	bd10      	pop	{r4, pc}

08006c72 <__sclose>:
 8006c72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c76:	f000 b849 	b.w	8006d0c <_close_r>

08006c7a <memset>:
 8006c7a:	4402      	add	r2, r0
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d100      	bne.n	8006c84 <memset+0xa>
 8006c82:	4770      	bx	lr
 8006c84:	f803 1b01 	strb.w	r1, [r3], #1
 8006c88:	e7f9      	b.n	8006c7e <memset+0x4>

08006c8a <strncmp>:
 8006c8a:	b510      	push	{r4, lr}
 8006c8c:	b16a      	cbz	r2, 8006caa <strncmp+0x20>
 8006c8e:	3901      	subs	r1, #1
 8006c90:	1884      	adds	r4, r0, r2
 8006c92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c96:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d103      	bne.n	8006ca6 <strncmp+0x1c>
 8006c9e:	42a0      	cmp	r0, r4
 8006ca0:	d001      	beq.n	8006ca6 <strncmp+0x1c>
 8006ca2:	2a00      	cmp	r2, #0
 8006ca4:	d1f5      	bne.n	8006c92 <strncmp+0x8>
 8006ca6:	1ad0      	subs	r0, r2, r3
 8006ca8:	bd10      	pop	{r4, pc}
 8006caa:	4610      	mov	r0, r2
 8006cac:	e7fc      	b.n	8006ca8 <strncmp+0x1e>

08006cae <__strtok_r>:
 8006cae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	b908      	cbnz	r0, 8006cb8 <__strtok_r+0xa>
 8006cb4:	6814      	ldr	r4, [r2, #0]
 8006cb6:	b144      	cbz	r4, 8006cca <__strtok_r+0x1c>
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006cbe:	460f      	mov	r7, r1
 8006cc0:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006cc4:	b91e      	cbnz	r6, 8006cce <__strtok_r+0x20>
 8006cc6:	b965      	cbnz	r5, 8006ce2 <__strtok_r+0x34>
 8006cc8:	6015      	str	r5, [r2, #0]
 8006cca:	2000      	movs	r0, #0
 8006ccc:	e005      	b.n	8006cda <__strtok_r+0x2c>
 8006cce:	42b5      	cmp	r5, r6
 8006cd0:	d1f6      	bne.n	8006cc0 <__strtok_r+0x12>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1f0      	bne.n	8006cb8 <__strtok_r+0xa>
 8006cd6:	6014      	str	r4, [r2, #0]
 8006cd8:	7003      	strb	r3, [r0, #0]
 8006cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cdc:	461c      	mov	r4, r3
 8006cde:	e00c      	b.n	8006cfa <__strtok_r+0x4c>
 8006ce0:	b91d      	cbnz	r5, 8006cea <__strtok_r+0x3c>
 8006ce2:	4627      	mov	r7, r4
 8006ce4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006ce8:	460e      	mov	r6, r1
 8006cea:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006cee:	42ab      	cmp	r3, r5
 8006cf0:	d1f6      	bne.n	8006ce0 <__strtok_r+0x32>
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d0f2      	beq.n	8006cdc <__strtok_r+0x2e>
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	703b      	strb	r3, [r7, #0]
 8006cfa:	6014      	str	r4, [r2, #0]
 8006cfc:	e7ed      	b.n	8006cda <__strtok_r+0x2c>

08006cfe <strtok_r>:
 8006cfe:	2301      	movs	r3, #1
 8006d00:	f7ff bfd5 	b.w	8006cae <__strtok_r>

08006d04 <_localeconv_r>:
 8006d04:	4800      	ldr	r0, [pc, #0]	@ (8006d08 <_localeconv_r+0x4>)
 8006d06:	4770      	bx	lr
 8006d08:	20000108 	.word	0x20000108

08006d0c <_close_r>:
 8006d0c:	b538      	push	{r3, r4, r5, lr}
 8006d0e:	4d06      	ldr	r5, [pc, #24]	@ (8006d28 <_close_r+0x1c>)
 8006d10:	2300      	movs	r3, #0
 8006d12:	4604      	mov	r4, r0
 8006d14:	4608      	mov	r0, r1
 8006d16:	602b      	str	r3, [r5, #0]
 8006d18:	f7fb f8a8 	bl	8001e6c <_close>
 8006d1c:	1c43      	adds	r3, r0, #1
 8006d1e:	d102      	bne.n	8006d26 <_close_r+0x1a>
 8006d20:	682b      	ldr	r3, [r5, #0]
 8006d22:	b103      	cbz	r3, 8006d26 <_close_r+0x1a>
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	bd38      	pop	{r3, r4, r5, pc}
 8006d28:	20000d58 	.word	0x20000d58

08006d2c <_lseek_r>:
 8006d2c:	b538      	push	{r3, r4, r5, lr}
 8006d2e:	4d07      	ldr	r5, [pc, #28]	@ (8006d4c <_lseek_r+0x20>)
 8006d30:	4604      	mov	r4, r0
 8006d32:	4608      	mov	r0, r1
 8006d34:	4611      	mov	r1, r2
 8006d36:	2200      	movs	r2, #0
 8006d38:	602a      	str	r2, [r5, #0]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	f7fb f8a2 	bl	8001e84 <_lseek>
 8006d40:	1c43      	adds	r3, r0, #1
 8006d42:	d102      	bne.n	8006d4a <_lseek_r+0x1e>
 8006d44:	682b      	ldr	r3, [r5, #0]
 8006d46:	b103      	cbz	r3, 8006d4a <_lseek_r+0x1e>
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	bd38      	pop	{r3, r4, r5, pc}
 8006d4c:	20000d58 	.word	0x20000d58

08006d50 <_read_r>:
 8006d50:	b538      	push	{r3, r4, r5, lr}
 8006d52:	4d07      	ldr	r5, [pc, #28]	@ (8006d70 <_read_r+0x20>)
 8006d54:	4604      	mov	r4, r0
 8006d56:	4608      	mov	r0, r1
 8006d58:	4611      	mov	r1, r2
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	602a      	str	r2, [r5, #0]
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f7fb f868 	bl	8001e34 <_read>
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	d102      	bne.n	8006d6e <_read_r+0x1e>
 8006d68:	682b      	ldr	r3, [r5, #0]
 8006d6a:	b103      	cbz	r3, 8006d6e <_read_r+0x1e>
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	bd38      	pop	{r3, r4, r5, pc}
 8006d70:	20000d58 	.word	0x20000d58

08006d74 <_write_r>:
 8006d74:	b538      	push	{r3, r4, r5, lr}
 8006d76:	4d07      	ldr	r5, [pc, #28]	@ (8006d94 <_write_r+0x20>)
 8006d78:	4604      	mov	r4, r0
 8006d7a:	4608      	mov	r0, r1
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	2200      	movs	r2, #0
 8006d80:	602a      	str	r2, [r5, #0]
 8006d82:	461a      	mov	r2, r3
 8006d84:	f7fb f864 	bl	8001e50 <_write>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d102      	bne.n	8006d92 <_write_r+0x1e>
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	b103      	cbz	r3, 8006d92 <_write_r+0x1e>
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
 8006d94:	20000d58 	.word	0x20000d58

08006d98 <__errno>:
 8006d98:	4b01      	ldr	r3, [pc, #4]	@ (8006da0 <__errno+0x8>)
 8006d9a:	6818      	ldr	r0, [r3, #0]
 8006d9c:	4770      	bx	lr
 8006d9e:	bf00      	nop
 8006da0:	20000184 	.word	0x20000184

08006da4 <__libc_init_array>:
 8006da4:	b570      	push	{r4, r5, r6, lr}
 8006da6:	4d0d      	ldr	r5, [pc, #52]	@ (8006ddc <__libc_init_array+0x38>)
 8006da8:	4c0d      	ldr	r4, [pc, #52]	@ (8006de0 <__libc_init_array+0x3c>)
 8006daa:	1b64      	subs	r4, r4, r5
 8006dac:	10a4      	asrs	r4, r4, #2
 8006dae:	2600      	movs	r6, #0
 8006db0:	42a6      	cmp	r6, r4
 8006db2:	d109      	bne.n	8006dc8 <__libc_init_array+0x24>
 8006db4:	4d0b      	ldr	r5, [pc, #44]	@ (8006de4 <__libc_init_array+0x40>)
 8006db6:	4c0c      	ldr	r4, [pc, #48]	@ (8006de8 <__libc_init_array+0x44>)
 8006db8:	f002 fd5c 	bl	8009874 <_init>
 8006dbc:	1b64      	subs	r4, r4, r5
 8006dbe:	10a4      	asrs	r4, r4, #2
 8006dc0:	2600      	movs	r6, #0
 8006dc2:	42a6      	cmp	r6, r4
 8006dc4:	d105      	bne.n	8006dd2 <__libc_init_array+0x2e>
 8006dc6:	bd70      	pop	{r4, r5, r6, pc}
 8006dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dcc:	4798      	blx	r3
 8006dce:	3601      	adds	r6, #1
 8006dd0:	e7ee      	b.n	8006db0 <__libc_init_array+0xc>
 8006dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dd6:	4798      	blx	r3
 8006dd8:	3601      	adds	r6, #1
 8006dda:	e7f2      	b.n	8006dc2 <__libc_init_array+0x1e>
 8006ddc:	0800ec04 	.word	0x0800ec04
 8006de0:	0800ec04 	.word	0x0800ec04
 8006de4:	0800ec04 	.word	0x0800ec04
 8006de8:	0800ec08 	.word	0x0800ec08

08006dec <__retarget_lock_init_recursive>:
 8006dec:	4770      	bx	lr

08006dee <__retarget_lock_acquire_recursive>:
 8006dee:	4770      	bx	lr

08006df0 <__retarget_lock_release_recursive>:
 8006df0:	4770      	bx	lr

08006df2 <memcpy>:
 8006df2:	440a      	add	r2, r1
 8006df4:	4291      	cmp	r1, r2
 8006df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dfa:	d100      	bne.n	8006dfe <memcpy+0xc>
 8006dfc:	4770      	bx	lr
 8006dfe:	b510      	push	{r4, lr}
 8006e00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e08:	4291      	cmp	r1, r2
 8006e0a:	d1f9      	bne.n	8006e00 <memcpy+0xe>
 8006e0c:	bd10      	pop	{r4, pc}
	...

08006e10 <nan>:
 8006e10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006e18 <nan+0x8>
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	00000000 	.word	0x00000000
 8006e1c:	7ff80000 	.word	0x7ff80000

08006e20 <nanf>:
 8006e20:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006e28 <nanf+0x8>
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	7fc00000 	.word	0x7fc00000

08006e2c <quorem>:
 8006e2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e30:	6903      	ldr	r3, [r0, #16]
 8006e32:	690c      	ldr	r4, [r1, #16]
 8006e34:	42a3      	cmp	r3, r4
 8006e36:	4607      	mov	r7, r0
 8006e38:	db7e      	blt.n	8006f38 <quorem+0x10c>
 8006e3a:	3c01      	subs	r4, #1
 8006e3c:	f101 0814 	add.w	r8, r1, #20
 8006e40:	00a3      	lsls	r3, r4, #2
 8006e42:	f100 0514 	add.w	r5, r0, #20
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e4c:	9301      	str	r3, [sp, #4]
 8006e4e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e56:	3301      	adds	r3, #1
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e5e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e62:	d32e      	bcc.n	8006ec2 <quorem+0x96>
 8006e64:	f04f 0a00 	mov.w	sl, #0
 8006e68:	46c4      	mov	ip, r8
 8006e6a:	46ae      	mov	lr, r5
 8006e6c:	46d3      	mov	fp, sl
 8006e6e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006e72:	b298      	uxth	r0, r3
 8006e74:	fb06 a000 	mla	r0, r6, r0, sl
 8006e78:	0c02      	lsrs	r2, r0, #16
 8006e7a:	0c1b      	lsrs	r3, r3, #16
 8006e7c:	fb06 2303 	mla	r3, r6, r3, r2
 8006e80:	f8de 2000 	ldr.w	r2, [lr]
 8006e84:	b280      	uxth	r0, r0
 8006e86:	b292      	uxth	r2, r2
 8006e88:	1a12      	subs	r2, r2, r0
 8006e8a:	445a      	add	r2, fp
 8006e8c:	f8de 0000 	ldr.w	r0, [lr]
 8006e90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006e9a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006e9e:	b292      	uxth	r2, r2
 8006ea0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006ea4:	45e1      	cmp	r9, ip
 8006ea6:	f84e 2b04 	str.w	r2, [lr], #4
 8006eaa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006eae:	d2de      	bcs.n	8006e6e <quorem+0x42>
 8006eb0:	9b00      	ldr	r3, [sp, #0]
 8006eb2:	58eb      	ldr	r3, [r5, r3]
 8006eb4:	b92b      	cbnz	r3, 8006ec2 <quorem+0x96>
 8006eb6:	9b01      	ldr	r3, [sp, #4]
 8006eb8:	3b04      	subs	r3, #4
 8006eba:	429d      	cmp	r5, r3
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	d32f      	bcc.n	8006f20 <quorem+0xf4>
 8006ec0:	613c      	str	r4, [r7, #16]
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	f001 fd14 	bl	80088f0 <__mcmp>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	db25      	blt.n	8006f18 <quorem+0xec>
 8006ecc:	4629      	mov	r1, r5
 8006ece:	2000      	movs	r0, #0
 8006ed0:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ed4:	f8d1 c000 	ldr.w	ip, [r1]
 8006ed8:	fa1f fe82 	uxth.w	lr, r2
 8006edc:	fa1f f38c 	uxth.w	r3, ip
 8006ee0:	eba3 030e 	sub.w	r3, r3, lr
 8006ee4:	4403      	add	r3, r0
 8006ee6:	0c12      	lsrs	r2, r2, #16
 8006ee8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006eec:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ef6:	45c1      	cmp	r9, r8
 8006ef8:	f841 3b04 	str.w	r3, [r1], #4
 8006efc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006f00:	d2e6      	bcs.n	8006ed0 <quorem+0xa4>
 8006f02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f0a:	b922      	cbnz	r2, 8006f16 <quorem+0xea>
 8006f0c:	3b04      	subs	r3, #4
 8006f0e:	429d      	cmp	r5, r3
 8006f10:	461a      	mov	r2, r3
 8006f12:	d30b      	bcc.n	8006f2c <quorem+0x100>
 8006f14:	613c      	str	r4, [r7, #16]
 8006f16:	3601      	adds	r6, #1
 8006f18:	4630      	mov	r0, r6
 8006f1a:	b003      	add	sp, #12
 8006f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f20:	6812      	ldr	r2, [r2, #0]
 8006f22:	3b04      	subs	r3, #4
 8006f24:	2a00      	cmp	r2, #0
 8006f26:	d1cb      	bne.n	8006ec0 <quorem+0x94>
 8006f28:	3c01      	subs	r4, #1
 8006f2a:	e7c6      	b.n	8006eba <quorem+0x8e>
 8006f2c:	6812      	ldr	r2, [r2, #0]
 8006f2e:	3b04      	subs	r3, #4
 8006f30:	2a00      	cmp	r2, #0
 8006f32:	d1ef      	bne.n	8006f14 <quorem+0xe8>
 8006f34:	3c01      	subs	r4, #1
 8006f36:	e7ea      	b.n	8006f0e <quorem+0xe2>
 8006f38:	2000      	movs	r0, #0
 8006f3a:	e7ee      	b.n	8006f1a <quorem+0xee>
 8006f3c:	0000      	movs	r0, r0
	...

08006f40 <_dtoa_r>:
 8006f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f44:	69c7      	ldr	r7, [r0, #28]
 8006f46:	b097      	sub	sp, #92	@ 0x5c
 8006f48:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006f4c:	ec55 4b10 	vmov	r4, r5, d0
 8006f50:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006f52:	9107      	str	r1, [sp, #28]
 8006f54:	4681      	mov	r9, r0
 8006f56:	920c      	str	r2, [sp, #48]	@ 0x30
 8006f58:	9311      	str	r3, [sp, #68]	@ 0x44
 8006f5a:	b97f      	cbnz	r7, 8006f7c <_dtoa_r+0x3c>
 8006f5c:	2010      	movs	r0, #16
 8006f5e:	f001 f943 	bl	80081e8 <malloc>
 8006f62:	4602      	mov	r2, r0
 8006f64:	f8c9 001c 	str.w	r0, [r9, #28]
 8006f68:	b920      	cbnz	r0, 8006f74 <_dtoa_r+0x34>
 8006f6a:	4ba9      	ldr	r3, [pc, #676]	@ (8007210 <_dtoa_r+0x2d0>)
 8006f6c:	21ef      	movs	r1, #239	@ 0xef
 8006f6e:	48a9      	ldr	r0, [pc, #676]	@ (8007214 <_dtoa_r+0x2d4>)
 8006f70:	f002 f962 	bl	8009238 <__assert_func>
 8006f74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006f78:	6007      	str	r7, [r0, #0]
 8006f7a:	60c7      	str	r7, [r0, #12]
 8006f7c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006f80:	6819      	ldr	r1, [r3, #0]
 8006f82:	b159      	cbz	r1, 8006f9c <_dtoa_r+0x5c>
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	604a      	str	r2, [r1, #4]
 8006f88:	2301      	movs	r3, #1
 8006f8a:	4093      	lsls	r3, r2
 8006f8c:	608b      	str	r3, [r1, #8]
 8006f8e:	4648      	mov	r0, r9
 8006f90:	f001 fa32 	bl	80083f8 <_Bfree>
 8006f94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	1e2b      	subs	r3, r5, #0
 8006f9e:	bfb9      	ittee	lt
 8006fa0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006fa4:	9305      	strlt	r3, [sp, #20]
 8006fa6:	2300      	movge	r3, #0
 8006fa8:	6033      	strge	r3, [r6, #0]
 8006faa:	9f05      	ldr	r7, [sp, #20]
 8006fac:	4b9a      	ldr	r3, [pc, #616]	@ (8007218 <_dtoa_r+0x2d8>)
 8006fae:	bfbc      	itt	lt
 8006fb0:	2201      	movlt	r2, #1
 8006fb2:	6032      	strlt	r2, [r6, #0]
 8006fb4:	43bb      	bics	r3, r7
 8006fb6:	d112      	bne.n	8006fde <_dtoa_r+0x9e>
 8006fb8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006fba:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006fbe:	6013      	str	r3, [r2, #0]
 8006fc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006fc4:	4323      	orrs	r3, r4
 8006fc6:	f000 855a 	beq.w	8007a7e <_dtoa_r+0xb3e>
 8006fca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006fcc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800722c <_dtoa_r+0x2ec>
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	f000 855c 	beq.w	8007a8e <_dtoa_r+0xb4e>
 8006fd6:	f10a 0303 	add.w	r3, sl, #3
 8006fda:	f000 bd56 	b.w	8007a8a <_dtoa_r+0xb4a>
 8006fde:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	ec51 0b17 	vmov	r0, r1, d7
 8006fe8:	2300      	movs	r3, #0
 8006fea:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006fee:	f7f9 fd73 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ff2:	4680      	mov	r8, r0
 8006ff4:	b158      	cbz	r0, 800700e <_dtoa_r+0xce>
 8006ff6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	6013      	str	r3, [r2, #0]
 8006ffc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ffe:	b113      	cbz	r3, 8007006 <_dtoa_r+0xc6>
 8007000:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007002:	4b86      	ldr	r3, [pc, #536]	@ (800721c <_dtoa_r+0x2dc>)
 8007004:	6013      	str	r3, [r2, #0]
 8007006:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007230 <_dtoa_r+0x2f0>
 800700a:	f000 bd40 	b.w	8007a8e <_dtoa_r+0xb4e>
 800700e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007012:	aa14      	add	r2, sp, #80	@ 0x50
 8007014:	a915      	add	r1, sp, #84	@ 0x54
 8007016:	4648      	mov	r0, r9
 8007018:	f001 fd8a 	bl	8008b30 <__d2b>
 800701c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007020:	9002      	str	r0, [sp, #8]
 8007022:	2e00      	cmp	r6, #0
 8007024:	d078      	beq.n	8007118 <_dtoa_r+0x1d8>
 8007026:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007028:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800702c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007030:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007034:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007038:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800703c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007040:	4619      	mov	r1, r3
 8007042:	2200      	movs	r2, #0
 8007044:	4b76      	ldr	r3, [pc, #472]	@ (8007220 <_dtoa_r+0x2e0>)
 8007046:	f7f9 f927 	bl	8000298 <__aeabi_dsub>
 800704a:	a36b      	add	r3, pc, #428	@ (adr r3, 80071f8 <_dtoa_r+0x2b8>)
 800704c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007050:	f7f9 fada 	bl	8000608 <__aeabi_dmul>
 8007054:	a36a      	add	r3, pc, #424	@ (adr r3, 8007200 <_dtoa_r+0x2c0>)
 8007056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705a:	f7f9 f91f 	bl	800029c <__adddf3>
 800705e:	4604      	mov	r4, r0
 8007060:	4630      	mov	r0, r6
 8007062:	460d      	mov	r5, r1
 8007064:	f7f9 fa66 	bl	8000534 <__aeabi_i2d>
 8007068:	a367      	add	r3, pc, #412	@ (adr r3, 8007208 <_dtoa_r+0x2c8>)
 800706a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800706e:	f7f9 facb 	bl	8000608 <__aeabi_dmul>
 8007072:	4602      	mov	r2, r0
 8007074:	460b      	mov	r3, r1
 8007076:	4620      	mov	r0, r4
 8007078:	4629      	mov	r1, r5
 800707a:	f7f9 f90f 	bl	800029c <__adddf3>
 800707e:	4604      	mov	r4, r0
 8007080:	460d      	mov	r5, r1
 8007082:	f7f9 fd71 	bl	8000b68 <__aeabi_d2iz>
 8007086:	2200      	movs	r2, #0
 8007088:	4607      	mov	r7, r0
 800708a:	2300      	movs	r3, #0
 800708c:	4620      	mov	r0, r4
 800708e:	4629      	mov	r1, r5
 8007090:	f7f9 fd2c 	bl	8000aec <__aeabi_dcmplt>
 8007094:	b140      	cbz	r0, 80070a8 <_dtoa_r+0x168>
 8007096:	4638      	mov	r0, r7
 8007098:	f7f9 fa4c 	bl	8000534 <__aeabi_i2d>
 800709c:	4622      	mov	r2, r4
 800709e:	462b      	mov	r3, r5
 80070a0:	f7f9 fd1a 	bl	8000ad8 <__aeabi_dcmpeq>
 80070a4:	b900      	cbnz	r0, 80070a8 <_dtoa_r+0x168>
 80070a6:	3f01      	subs	r7, #1
 80070a8:	2f16      	cmp	r7, #22
 80070aa:	d852      	bhi.n	8007152 <_dtoa_r+0x212>
 80070ac:	4b5d      	ldr	r3, [pc, #372]	@ (8007224 <_dtoa_r+0x2e4>)
 80070ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80070b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80070ba:	f7f9 fd17 	bl	8000aec <__aeabi_dcmplt>
 80070be:	2800      	cmp	r0, #0
 80070c0:	d049      	beq.n	8007156 <_dtoa_r+0x216>
 80070c2:	3f01      	subs	r7, #1
 80070c4:	2300      	movs	r3, #0
 80070c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80070c8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80070ca:	1b9b      	subs	r3, r3, r6
 80070cc:	1e5a      	subs	r2, r3, #1
 80070ce:	bf45      	ittet	mi
 80070d0:	f1c3 0301 	rsbmi	r3, r3, #1
 80070d4:	9300      	strmi	r3, [sp, #0]
 80070d6:	2300      	movpl	r3, #0
 80070d8:	2300      	movmi	r3, #0
 80070da:	9206      	str	r2, [sp, #24]
 80070dc:	bf54      	ite	pl
 80070de:	9300      	strpl	r3, [sp, #0]
 80070e0:	9306      	strmi	r3, [sp, #24]
 80070e2:	2f00      	cmp	r7, #0
 80070e4:	db39      	blt.n	800715a <_dtoa_r+0x21a>
 80070e6:	9b06      	ldr	r3, [sp, #24]
 80070e8:	970d      	str	r7, [sp, #52]	@ 0x34
 80070ea:	443b      	add	r3, r7
 80070ec:	9306      	str	r3, [sp, #24]
 80070ee:	2300      	movs	r3, #0
 80070f0:	9308      	str	r3, [sp, #32]
 80070f2:	9b07      	ldr	r3, [sp, #28]
 80070f4:	2b09      	cmp	r3, #9
 80070f6:	d863      	bhi.n	80071c0 <_dtoa_r+0x280>
 80070f8:	2b05      	cmp	r3, #5
 80070fa:	bfc4      	itt	gt
 80070fc:	3b04      	subgt	r3, #4
 80070fe:	9307      	strgt	r3, [sp, #28]
 8007100:	9b07      	ldr	r3, [sp, #28]
 8007102:	f1a3 0302 	sub.w	r3, r3, #2
 8007106:	bfcc      	ite	gt
 8007108:	2400      	movgt	r4, #0
 800710a:	2401      	movle	r4, #1
 800710c:	2b03      	cmp	r3, #3
 800710e:	d863      	bhi.n	80071d8 <_dtoa_r+0x298>
 8007110:	e8df f003 	tbb	[pc, r3]
 8007114:	2b375452 	.word	0x2b375452
 8007118:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800711c:	441e      	add	r6, r3
 800711e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007122:	2b20      	cmp	r3, #32
 8007124:	bfc1      	itttt	gt
 8007126:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800712a:	409f      	lslgt	r7, r3
 800712c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007130:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007134:	bfd6      	itet	le
 8007136:	f1c3 0320 	rsble	r3, r3, #32
 800713a:	ea47 0003 	orrgt.w	r0, r7, r3
 800713e:	fa04 f003 	lslle.w	r0, r4, r3
 8007142:	f7f9 f9e7 	bl	8000514 <__aeabi_ui2d>
 8007146:	2201      	movs	r2, #1
 8007148:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800714c:	3e01      	subs	r6, #1
 800714e:	9212      	str	r2, [sp, #72]	@ 0x48
 8007150:	e776      	b.n	8007040 <_dtoa_r+0x100>
 8007152:	2301      	movs	r3, #1
 8007154:	e7b7      	b.n	80070c6 <_dtoa_r+0x186>
 8007156:	9010      	str	r0, [sp, #64]	@ 0x40
 8007158:	e7b6      	b.n	80070c8 <_dtoa_r+0x188>
 800715a:	9b00      	ldr	r3, [sp, #0]
 800715c:	1bdb      	subs	r3, r3, r7
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	427b      	negs	r3, r7
 8007162:	9308      	str	r3, [sp, #32]
 8007164:	2300      	movs	r3, #0
 8007166:	930d      	str	r3, [sp, #52]	@ 0x34
 8007168:	e7c3      	b.n	80070f2 <_dtoa_r+0x1b2>
 800716a:	2301      	movs	r3, #1
 800716c:	9309      	str	r3, [sp, #36]	@ 0x24
 800716e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007170:	eb07 0b03 	add.w	fp, r7, r3
 8007174:	f10b 0301 	add.w	r3, fp, #1
 8007178:	2b01      	cmp	r3, #1
 800717a:	9303      	str	r3, [sp, #12]
 800717c:	bfb8      	it	lt
 800717e:	2301      	movlt	r3, #1
 8007180:	e006      	b.n	8007190 <_dtoa_r+0x250>
 8007182:	2301      	movs	r3, #1
 8007184:	9309      	str	r3, [sp, #36]	@ 0x24
 8007186:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007188:	2b00      	cmp	r3, #0
 800718a:	dd28      	ble.n	80071de <_dtoa_r+0x29e>
 800718c:	469b      	mov	fp, r3
 800718e:	9303      	str	r3, [sp, #12]
 8007190:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007194:	2100      	movs	r1, #0
 8007196:	2204      	movs	r2, #4
 8007198:	f102 0514 	add.w	r5, r2, #20
 800719c:	429d      	cmp	r5, r3
 800719e:	d926      	bls.n	80071ee <_dtoa_r+0x2ae>
 80071a0:	6041      	str	r1, [r0, #4]
 80071a2:	4648      	mov	r0, r9
 80071a4:	f001 f8e8 	bl	8008378 <_Balloc>
 80071a8:	4682      	mov	sl, r0
 80071aa:	2800      	cmp	r0, #0
 80071ac:	d142      	bne.n	8007234 <_dtoa_r+0x2f4>
 80071ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007228 <_dtoa_r+0x2e8>)
 80071b0:	4602      	mov	r2, r0
 80071b2:	f240 11af 	movw	r1, #431	@ 0x1af
 80071b6:	e6da      	b.n	8006f6e <_dtoa_r+0x2e>
 80071b8:	2300      	movs	r3, #0
 80071ba:	e7e3      	b.n	8007184 <_dtoa_r+0x244>
 80071bc:	2300      	movs	r3, #0
 80071be:	e7d5      	b.n	800716c <_dtoa_r+0x22c>
 80071c0:	2401      	movs	r4, #1
 80071c2:	2300      	movs	r3, #0
 80071c4:	9307      	str	r3, [sp, #28]
 80071c6:	9409      	str	r4, [sp, #36]	@ 0x24
 80071c8:	f04f 3bff 	mov.w	fp, #4294967295
 80071cc:	2200      	movs	r2, #0
 80071ce:	f8cd b00c 	str.w	fp, [sp, #12]
 80071d2:	2312      	movs	r3, #18
 80071d4:	920c      	str	r2, [sp, #48]	@ 0x30
 80071d6:	e7db      	b.n	8007190 <_dtoa_r+0x250>
 80071d8:	2301      	movs	r3, #1
 80071da:	9309      	str	r3, [sp, #36]	@ 0x24
 80071dc:	e7f4      	b.n	80071c8 <_dtoa_r+0x288>
 80071de:	f04f 0b01 	mov.w	fp, #1
 80071e2:	f8cd b00c 	str.w	fp, [sp, #12]
 80071e6:	465b      	mov	r3, fp
 80071e8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80071ec:	e7d0      	b.n	8007190 <_dtoa_r+0x250>
 80071ee:	3101      	adds	r1, #1
 80071f0:	0052      	lsls	r2, r2, #1
 80071f2:	e7d1      	b.n	8007198 <_dtoa_r+0x258>
 80071f4:	f3af 8000 	nop.w
 80071f8:	636f4361 	.word	0x636f4361
 80071fc:	3fd287a7 	.word	0x3fd287a7
 8007200:	8b60c8b3 	.word	0x8b60c8b3
 8007204:	3fc68a28 	.word	0x3fc68a28
 8007208:	509f79fb 	.word	0x509f79fb
 800720c:	3fd34413 	.word	0x3fd34413
 8007210:	0800e81c 	.word	0x0800e81c
 8007214:	0800e833 	.word	0x0800e833
 8007218:	7ff00000 	.word	0x7ff00000
 800721c:	0800e7df 	.word	0x0800e7df
 8007220:	3ff80000 	.word	0x3ff80000
 8007224:	0800ea30 	.word	0x0800ea30
 8007228:	0800e88b 	.word	0x0800e88b
 800722c:	0800e818 	.word	0x0800e818
 8007230:	0800e7de 	.word	0x0800e7de
 8007234:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007238:	6018      	str	r0, [r3, #0]
 800723a:	9b03      	ldr	r3, [sp, #12]
 800723c:	2b0e      	cmp	r3, #14
 800723e:	f200 80a1 	bhi.w	8007384 <_dtoa_r+0x444>
 8007242:	2c00      	cmp	r4, #0
 8007244:	f000 809e 	beq.w	8007384 <_dtoa_r+0x444>
 8007248:	2f00      	cmp	r7, #0
 800724a:	dd33      	ble.n	80072b4 <_dtoa_r+0x374>
 800724c:	4b9c      	ldr	r3, [pc, #624]	@ (80074c0 <_dtoa_r+0x580>)
 800724e:	f007 020f 	and.w	r2, r7, #15
 8007252:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007256:	ed93 7b00 	vldr	d7, [r3]
 800725a:	05f8      	lsls	r0, r7, #23
 800725c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007260:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007264:	d516      	bpl.n	8007294 <_dtoa_r+0x354>
 8007266:	4b97      	ldr	r3, [pc, #604]	@ (80074c4 <_dtoa_r+0x584>)
 8007268:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800726c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007270:	f7f9 faf4 	bl	800085c <__aeabi_ddiv>
 8007274:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007278:	f004 040f 	and.w	r4, r4, #15
 800727c:	2603      	movs	r6, #3
 800727e:	4d91      	ldr	r5, [pc, #580]	@ (80074c4 <_dtoa_r+0x584>)
 8007280:	b954      	cbnz	r4, 8007298 <_dtoa_r+0x358>
 8007282:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007286:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800728a:	f7f9 fae7 	bl	800085c <__aeabi_ddiv>
 800728e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007292:	e028      	b.n	80072e6 <_dtoa_r+0x3a6>
 8007294:	2602      	movs	r6, #2
 8007296:	e7f2      	b.n	800727e <_dtoa_r+0x33e>
 8007298:	07e1      	lsls	r1, r4, #31
 800729a:	d508      	bpl.n	80072ae <_dtoa_r+0x36e>
 800729c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80072a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80072a4:	f7f9 f9b0 	bl	8000608 <__aeabi_dmul>
 80072a8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80072ac:	3601      	adds	r6, #1
 80072ae:	1064      	asrs	r4, r4, #1
 80072b0:	3508      	adds	r5, #8
 80072b2:	e7e5      	b.n	8007280 <_dtoa_r+0x340>
 80072b4:	f000 80af 	beq.w	8007416 <_dtoa_r+0x4d6>
 80072b8:	427c      	negs	r4, r7
 80072ba:	4b81      	ldr	r3, [pc, #516]	@ (80074c0 <_dtoa_r+0x580>)
 80072bc:	4d81      	ldr	r5, [pc, #516]	@ (80074c4 <_dtoa_r+0x584>)
 80072be:	f004 020f 	and.w	r2, r4, #15
 80072c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80072ce:	f7f9 f99b 	bl	8000608 <__aeabi_dmul>
 80072d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80072d6:	1124      	asrs	r4, r4, #4
 80072d8:	2300      	movs	r3, #0
 80072da:	2602      	movs	r6, #2
 80072dc:	2c00      	cmp	r4, #0
 80072de:	f040 808f 	bne.w	8007400 <_dtoa_r+0x4c0>
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1d3      	bne.n	800728e <_dtoa_r+0x34e>
 80072e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80072e8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f000 8094 	beq.w	800741a <_dtoa_r+0x4da>
 80072f2:	4b75      	ldr	r3, [pc, #468]	@ (80074c8 <_dtoa_r+0x588>)
 80072f4:	2200      	movs	r2, #0
 80072f6:	4620      	mov	r0, r4
 80072f8:	4629      	mov	r1, r5
 80072fa:	f7f9 fbf7 	bl	8000aec <__aeabi_dcmplt>
 80072fe:	2800      	cmp	r0, #0
 8007300:	f000 808b 	beq.w	800741a <_dtoa_r+0x4da>
 8007304:	9b03      	ldr	r3, [sp, #12]
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 8087 	beq.w	800741a <_dtoa_r+0x4da>
 800730c:	f1bb 0f00 	cmp.w	fp, #0
 8007310:	dd34      	ble.n	800737c <_dtoa_r+0x43c>
 8007312:	4620      	mov	r0, r4
 8007314:	4b6d      	ldr	r3, [pc, #436]	@ (80074cc <_dtoa_r+0x58c>)
 8007316:	2200      	movs	r2, #0
 8007318:	4629      	mov	r1, r5
 800731a:	f7f9 f975 	bl	8000608 <__aeabi_dmul>
 800731e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007322:	f107 38ff 	add.w	r8, r7, #4294967295
 8007326:	3601      	adds	r6, #1
 8007328:	465c      	mov	r4, fp
 800732a:	4630      	mov	r0, r6
 800732c:	f7f9 f902 	bl	8000534 <__aeabi_i2d>
 8007330:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007334:	f7f9 f968 	bl	8000608 <__aeabi_dmul>
 8007338:	4b65      	ldr	r3, [pc, #404]	@ (80074d0 <_dtoa_r+0x590>)
 800733a:	2200      	movs	r2, #0
 800733c:	f7f8 ffae 	bl	800029c <__adddf3>
 8007340:	4605      	mov	r5, r0
 8007342:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007346:	2c00      	cmp	r4, #0
 8007348:	d16a      	bne.n	8007420 <_dtoa_r+0x4e0>
 800734a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800734e:	4b61      	ldr	r3, [pc, #388]	@ (80074d4 <_dtoa_r+0x594>)
 8007350:	2200      	movs	r2, #0
 8007352:	f7f8 ffa1 	bl	8000298 <__aeabi_dsub>
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800735e:	462a      	mov	r2, r5
 8007360:	4633      	mov	r3, r6
 8007362:	f7f9 fbe1 	bl	8000b28 <__aeabi_dcmpgt>
 8007366:	2800      	cmp	r0, #0
 8007368:	f040 8298 	bne.w	800789c <_dtoa_r+0x95c>
 800736c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007370:	462a      	mov	r2, r5
 8007372:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007376:	f7f9 fbb9 	bl	8000aec <__aeabi_dcmplt>
 800737a:	bb38      	cbnz	r0, 80073cc <_dtoa_r+0x48c>
 800737c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007380:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007384:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007386:	2b00      	cmp	r3, #0
 8007388:	f2c0 8157 	blt.w	800763a <_dtoa_r+0x6fa>
 800738c:	2f0e      	cmp	r7, #14
 800738e:	f300 8154 	bgt.w	800763a <_dtoa_r+0x6fa>
 8007392:	4b4b      	ldr	r3, [pc, #300]	@ (80074c0 <_dtoa_r+0x580>)
 8007394:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007398:	ed93 7b00 	vldr	d7, [r3]
 800739c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800739e:	2b00      	cmp	r3, #0
 80073a0:	ed8d 7b00 	vstr	d7, [sp]
 80073a4:	f280 80e5 	bge.w	8007572 <_dtoa_r+0x632>
 80073a8:	9b03      	ldr	r3, [sp, #12]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f300 80e1 	bgt.w	8007572 <_dtoa_r+0x632>
 80073b0:	d10c      	bne.n	80073cc <_dtoa_r+0x48c>
 80073b2:	4b48      	ldr	r3, [pc, #288]	@ (80074d4 <_dtoa_r+0x594>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	ec51 0b17 	vmov	r0, r1, d7
 80073ba:	f7f9 f925 	bl	8000608 <__aeabi_dmul>
 80073be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073c2:	f7f9 fba7 	bl	8000b14 <__aeabi_dcmpge>
 80073c6:	2800      	cmp	r0, #0
 80073c8:	f000 8266 	beq.w	8007898 <_dtoa_r+0x958>
 80073cc:	2400      	movs	r4, #0
 80073ce:	4625      	mov	r5, r4
 80073d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80073d2:	4656      	mov	r6, sl
 80073d4:	ea6f 0803 	mvn.w	r8, r3
 80073d8:	2700      	movs	r7, #0
 80073da:	4621      	mov	r1, r4
 80073dc:	4648      	mov	r0, r9
 80073de:	f001 f80b 	bl	80083f8 <_Bfree>
 80073e2:	2d00      	cmp	r5, #0
 80073e4:	f000 80bd 	beq.w	8007562 <_dtoa_r+0x622>
 80073e8:	b12f      	cbz	r7, 80073f6 <_dtoa_r+0x4b6>
 80073ea:	42af      	cmp	r7, r5
 80073ec:	d003      	beq.n	80073f6 <_dtoa_r+0x4b6>
 80073ee:	4639      	mov	r1, r7
 80073f0:	4648      	mov	r0, r9
 80073f2:	f001 f801 	bl	80083f8 <_Bfree>
 80073f6:	4629      	mov	r1, r5
 80073f8:	4648      	mov	r0, r9
 80073fa:	f000 fffd 	bl	80083f8 <_Bfree>
 80073fe:	e0b0      	b.n	8007562 <_dtoa_r+0x622>
 8007400:	07e2      	lsls	r2, r4, #31
 8007402:	d505      	bpl.n	8007410 <_dtoa_r+0x4d0>
 8007404:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007408:	f7f9 f8fe 	bl	8000608 <__aeabi_dmul>
 800740c:	3601      	adds	r6, #1
 800740e:	2301      	movs	r3, #1
 8007410:	1064      	asrs	r4, r4, #1
 8007412:	3508      	adds	r5, #8
 8007414:	e762      	b.n	80072dc <_dtoa_r+0x39c>
 8007416:	2602      	movs	r6, #2
 8007418:	e765      	b.n	80072e6 <_dtoa_r+0x3a6>
 800741a:	9c03      	ldr	r4, [sp, #12]
 800741c:	46b8      	mov	r8, r7
 800741e:	e784      	b.n	800732a <_dtoa_r+0x3ea>
 8007420:	4b27      	ldr	r3, [pc, #156]	@ (80074c0 <_dtoa_r+0x580>)
 8007422:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007424:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007428:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800742c:	4454      	add	r4, sl
 800742e:	2900      	cmp	r1, #0
 8007430:	d054      	beq.n	80074dc <_dtoa_r+0x59c>
 8007432:	4929      	ldr	r1, [pc, #164]	@ (80074d8 <_dtoa_r+0x598>)
 8007434:	2000      	movs	r0, #0
 8007436:	f7f9 fa11 	bl	800085c <__aeabi_ddiv>
 800743a:	4633      	mov	r3, r6
 800743c:	462a      	mov	r2, r5
 800743e:	f7f8 ff2b 	bl	8000298 <__aeabi_dsub>
 8007442:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007446:	4656      	mov	r6, sl
 8007448:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800744c:	f7f9 fb8c 	bl	8000b68 <__aeabi_d2iz>
 8007450:	4605      	mov	r5, r0
 8007452:	f7f9 f86f 	bl	8000534 <__aeabi_i2d>
 8007456:	4602      	mov	r2, r0
 8007458:	460b      	mov	r3, r1
 800745a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800745e:	f7f8 ff1b 	bl	8000298 <__aeabi_dsub>
 8007462:	3530      	adds	r5, #48	@ 0x30
 8007464:	4602      	mov	r2, r0
 8007466:	460b      	mov	r3, r1
 8007468:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800746c:	f806 5b01 	strb.w	r5, [r6], #1
 8007470:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007474:	f7f9 fb3a 	bl	8000aec <__aeabi_dcmplt>
 8007478:	2800      	cmp	r0, #0
 800747a:	d172      	bne.n	8007562 <_dtoa_r+0x622>
 800747c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007480:	4911      	ldr	r1, [pc, #68]	@ (80074c8 <_dtoa_r+0x588>)
 8007482:	2000      	movs	r0, #0
 8007484:	f7f8 ff08 	bl	8000298 <__aeabi_dsub>
 8007488:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800748c:	f7f9 fb2e 	bl	8000aec <__aeabi_dcmplt>
 8007490:	2800      	cmp	r0, #0
 8007492:	f040 80b4 	bne.w	80075fe <_dtoa_r+0x6be>
 8007496:	42a6      	cmp	r6, r4
 8007498:	f43f af70 	beq.w	800737c <_dtoa_r+0x43c>
 800749c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80074a0:	4b0a      	ldr	r3, [pc, #40]	@ (80074cc <_dtoa_r+0x58c>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	f7f9 f8b0 	bl	8000608 <__aeabi_dmul>
 80074a8:	4b08      	ldr	r3, [pc, #32]	@ (80074cc <_dtoa_r+0x58c>)
 80074aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80074ae:	2200      	movs	r2, #0
 80074b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074b4:	f7f9 f8a8 	bl	8000608 <__aeabi_dmul>
 80074b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074bc:	e7c4      	b.n	8007448 <_dtoa_r+0x508>
 80074be:	bf00      	nop
 80074c0:	0800ea30 	.word	0x0800ea30
 80074c4:	0800ea08 	.word	0x0800ea08
 80074c8:	3ff00000 	.word	0x3ff00000
 80074cc:	40240000 	.word	0x40240000
 80074d0:	401c0000 	.word	0x401c0000
 80074d4:	40140000 	.word	0x40140000
 80074d8:	3fe00000 	.word	0x3fe00000
 80074dc:	4631      	mov	r1, r6
 80074de:	4628      	mov	r0, r5
 80074e0:	f7f9 f892 	bl	8000608 <__aeabi_dmul>
 80074e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80074e8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80074ea:	4656      	mov	r6, sl
 80074ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074f0:	f7f9 fb3a 	bl	8000b68 <__aeabi_d2iz>
 80074f4:	4605      	mov	r5, r0
 80074f6:	f7f9 f81d 	bl	8000534 <__aeabi_i2d>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007502:	f7f8 fec9 	bl	8000298 <__aeabi_dsub>
 8007506:	3530      	adds	r5, #48	@ 0x30
 8007508:	f806 5b01 	strb.w	r5, [r6], #1
 800750c:	4602      	mov	r2, r0
 800750e:	460b      	mov	r3, r1
 8007510:	42a6      	cmp	r6, r4
 8007512:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007516:	f04f 0200 	mov.w	r2, #0
 800751a:	d124      	bne.n	8007566 <_dtoa_r+0x626>
 800751c:	4baf      	ldr	r3, [pc, #700]	@ (80077dc <_dtoa_r+0x89c>)
 800751e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007522:	f7f8 febb 	bl	800029c <__adddf3>
 8007526:	4602      	mov	r2, r0
 8007528:	460b      	mov	r3, r1
 800752a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800752e:	f7f9 fafb 	bl	8000b28 <__aeabi_dcmpgt>
 8007532:	2800      	cmp	r0, #0
 8007534:	d163      	bne.n	80075fe <_dtoa_r+0x6be>
 8007536:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800753a:	49a8      	ldr	r1, [pc, #672]	@ (80077dc <_dtoa_r+0x89c>)
 800753c:	2000      	movs	r0, #0
 800753e:	f7f8 feab 	bl	8000298 <__aeabi_dsub>
 8007542:	4602      	mov	r2, r0
 8007544:	460b      	mov	r3, r1
 8007546:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800754a:	f7f9 facf 	bl	8000aec <__aeabi_dcmplt>
 800754e:	2800      	cmp	r0, #0
 8007550:	f43f af14 	beq.w	800737c <_dtoa_r+0x43c>
 8007554:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007556:	1e73      	subs	r3, r6, #1
 8007558:	9313      	str	r3, [sp, #76]	@ 0x4c
 800755a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800755e:	2b30      	cmp	r3, #48	@ 0x30
 8007560:	d0f8      	beq.n	8007554 <_dtoa_r+0x614>
 8007562:	4647      	mov	r7, r8
 8007564:	e03b      	b.n	80075de <_dtoa_r+0x69e>
 8007566:	4b9e      	ldr	r3, [pc, #632]	@ (80077e0 <_dtoa_r+0x8a0>)
 8007568:	f7f9 f84e 	bl	8000608 <__aeabi_dmul>
 800756c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007570:	e7bc      	b.n	80074ec <_dtoa_r+0x5ac>
 8007572:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007576:	4656      	mov	r6, sl
 8007578:	e9dd 2300 	ldrd	r2, r3, [sp]
 800757c:	4620      	mov	r0, r4
 800757e:	4629      	mov	r1, r5
 8007580:	f7f9 f96c 	bl	800085c <__aeabi_ddiv>
 8007584:	f7f9 faf0 	bl	8000b68 <__aeabi_d2iz>
 8007588:	4680      	mov	r8, r0
 800758a:	f7f8 ffd3 	bl	8000534 <__aeabi_i2d>
 800758e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007592:	f7f9 f839 	bl	8000608 <__aeabi_dmul>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	4620      	mov	r0, r4
 800759c:	4629      	mov	r1, r5
 800759e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80075a2:	f7f8 fe79 	bl	8000298 <__aeabi_dsub>
 80075a6:	f806 4b01 	strb.w	r4, [r6], #1
 80075aa:	9d03      	ldr	r5, [sp, #12]
 80075ac:	eba6 040a 	sub.w	r4, r6, sl
 80075b0:	42a5      	cmp	r5, r4
 80075b2:	4602      	mov	r2, r0
 80075b4:	460b      	mov	r3, r1
 80075b6:	d133      	bne.n	8007620 <_dtoa_r+0x6e0>
 80075b8:	f7f8 fe70 	bl	800029c <__adddf3>
 80075bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075c0:	4604      	mov	r4, r0
 80075c2:	460d      	mov	r5, r1
 80075c4:	f7f9 fab0 	bl	8000b28 <__aeabi_dcmpgt>
 80075c8:	b9c0      	cbnz	r0, 80075fc <_dtoa_r+0x6bc>
 80075ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80075ce:	4620      	mov	r0, r4
 80075d0:	4629      	mov	r1, r5
 80075d2:	f7f9 fa81 	bl	8000ad8 <__aeabi_dcmpeq>
 80075d6:	b110      	cbz	r0, 80075de <_dtoa_r+0x69e>
 80075d8:	f018 0f01 	tst.w	r8, #1
 80075dc:	d10e      	bne.n	80075fc <_dtoa_r+0x6bc>
 80075de:	9902      	ldr	r1, [sp, #8]
 80075e0:	4648      	mov	r0, r9
 80075e2:	f000 ff09 	bl	80083f8 <_Bfree>
 80075e6:	2300      	movs	r3, #0
 80075e8:	7033      	strb	r3, [r6, #0]
 80075ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80075ec:	3701      	adds	r7, #1
 80075ee:	601f      	str	r7, [r3, #0]
 80075f0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 824b 	beq.w	8007a8e <_dtoa_r+0xb4e>
 80075f8:	601e      	str	r6, [r3, #0]
 80075fa:	e248      	b.n	8007a8e <_dtoa_r+0xb4e>
 80075fc:	46b8      	mov	r8, r7
 80075fe:	4633      	mov	r3, r6
 8007600:	461e      	mov	r6, r3
 8007602:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007606:	2a39      	cmp	r2, #57	@ 0x39
 8007608:	d106      	bne.n	8007618 <_dtoa_r+0x6d8>
 800760a:	459a      	cmp	sl, r3
 800760c:	d1f8      	bne.n	8007600 <_dtoa_r+0x6c0>
 800760e:	2230      	movs	r2, #48	@ 0x30
 8007610:	f108 0801 	add.w	r8, r8, #1
 8007614:	f88a 2000 	strb.w	r2, [sl]
 8007618:	781a      	ldrb	r2, [r3, #0]
 800761a:	3201      	adds	r2, #1
 800761c:	701a      	strb	r2, [r3, #0]
 800761e:	e7a0      	b.n	8007562 <_dtoa_r+0x622>
 8007620:	4b6f      	ldr	r3, [pc, #444]	@ (80077e0 <_dtoa_r+0x8a0>)
 8007622:	2200      	movs	r2, #0
 8007624:	f7f8 fff0 	bl	8000608 <__aeabi_dmul>
 8007628:	2200      	movs	r2, #0
 800762a:	2300      	movs	r3, #0
 800762c:	4604      	mov	r4, r0
 800762e:	460d      	mov	r5, r1
 8007630:	f7f9 fa52 	bl	8000ad8 <__aeabi_dcmpeq>
 8007634:	2800      	cmp	r0, #0
 8007636:	d09f      	beq.n	8007578 <_dtoa_r+0x638>
 8007638:	e7d1      	b.n	80075de <_dtoa_r+0x69e>
 800763a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800763c:	2a00      	cmp	r2, #0
 800763e:	f000 80ea 	beq.w	8007816 <_dtoa_r+0x8d6>
 8007642:	9a07      	ldr	r2, [sp, #28]
 8007644:	2a01      	cmp	r2, #1
 8007646:	f300 80cd 	bgt.w	80077e4 <_dtoa_r+0x8a4>
 800764a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800764c:	2a00      	cmp	r2, #0
 800764e:	f000 80c1 	beq.w	80077d4 <_dtoa_r+0x894>
 8007652:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007656:	9c08      	ldr	r4, [sp, #32]
 8007658:	9e00      	ldr	r6, [sp, #0]
 800765a:	9a00      	ldr	r2, [sp, #0]
 800765c:	441a      	add	r2, r3
 800765e:	9200      	str	r2, [sp, #0]
 8007660:	9a06      	ldr	r2, [sp, #24]
 8007662:	2101      	movs	r1, #1
 8007664:	441a      	add	r2, r3
 8007666:	4648      	mov	r0, r9
 8007668:	9206      	str	r2, [sp, #24]
 800766a:	f000 ffc3 	bl	80085f4 <__i2b>
 800766e:	4605      	mov	r5, r0
 8007670:	b166      	cbz	r6, 800768c <_dtoa_r+0x74c>
 8007672:	9b06      	ldr	r3, [sp, #24]
 8007674:	2b00      	cmp	r3, #0
 8007676:	dd09      	ble.n	800768c <_dtoa_r+0x74c>
 8007678:	42b3      	cmp	r3, r6
 800767a:	9a00      	ldr	r2, [sp, #0]
 800767c:	bfa8      	it	ge
 800767e:	4633      	movge	r3, r6
 8007680:	1ad2      	subs	r2, r2, r3
 8007682:	9200      	str	r2, [sp, #0]
 8007684:	9a06      	ldr	r2, [sp, #24]
 8007686:	1af6      	subs	r6, r6, r3
 8007688:	1ad3      	subs	r3, r2, r3
 800768a:	9306      	str	r3, [sp, #24]
 800768c:	9b08      	ldr	r3, [sp, #32]
 800768e:	b30b      	cbz	r3, 80076d4 <_dtoa_r+0x794>
 8007690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 80c6 	beq.w	8007824 <_dtoa_r+0x8e4>
 8007698:	2c00      	cmp	r4, #0
 800769a:	f000 80c0 	beq.w	800781e <_dtoa_r+0x8de>
 800769e:	4629      	mov	r1, r5
 80076a0:	4622      	mov	r2, r4
 80076a2:	4648      	mov	r0, r9
 80076a4:	f001 f85e 	bl	8008764 <__pow5mult>
 80076a8:	9a02      	ldr	r2, [sp, #8]
 80076aa:	4601      	mov	r1, r0
 80076ac:	4605      	mov	r5, r0
 80076ae:	4648      	mov	r0, r9
 80076b0:	f000 ffb6 	bl	8008620 <__multiply>
 80076b4:	9902      	ldr	r1, [sp, #8]
 80076b6:	4680      	mov	r8, r0
 80076b8:	4648      	mov	r0, r9
 80076ba:	f000 fe9d 	bl	80083f8 <_Bfree>
 80076be:	9b08      	ldr	r3, [sp, #32]
 80076c0:	1b1b      	subs	r3, r3, r4
 80076c2:	9308      	str	r3, [sp, #32]
 80076c4:	f000 80b1 	beq.w	800782a <_dtoa_r+0x8ea>
 80076c8:	9a08      	ldr	r2, [sp, #32]
 80076ca:	4641      	mov	r1, r8
 80076cc:	4648      	mov	r0, r9
 80076ce:	f001 f849 	bl	8008764 <__pow5mult>
 80076d2:	9002      	str	r0, [sp, #8]
 80076d4:	2101      	movs	r1, #1
 80076d6:	4648      	mov	r0, r9
 80076d8:	f000 ff8c 	bl	80085f4 <__i2b>
 80076dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076de:	4604      	mov	r4, r0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	f000 81d8 	beq.w	8007a96 <_dtoa_r+0xb56>
 80076e6:	461a      	mov	r2, r3
 80076e8:	4601      	mov	r1, r0
 80076ea:	4648      	mov	r0, r9
 80076ec:	f001 f83a 	bl	8008764 <__pow5mult>
 80076f0:	9b07      	ldr	r3, [sp, #28]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	4604      	mov	r4, r0
 80076f6:	f300 809f 	bgt.w	8007838 <_dtoa_r+0x8f8>
 80076fa:	9b04      	ldr	r3, [sp, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	f040 8097 	bne.w	8007830 <_dtoa_r+0x8f0>
 8007702:	9b05      	ldr	r3, [sp, #20]
 8007704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007708:	2b00      	cmp	r3, #0
 800770a:	f040 8093 	bne.w	8007834 <_dtoa_r+0x8f4>
 800770e:	9b05      	ldr	r3, [sp, #20]
 8007710:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007714:	0d1b      	lsrs	r3, r3, #20
 8007716:	051b      	lsls	r3, r3, #20
 8007718:	b133      	cbz	r3, 8007728 <_dtoa_r+0x7e8>
 800771a:	9b00      	ldr	r3, [sp, #0]
 800771c:	3301      	adds	r3, #1
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	9b06      	ldr	r3, [sp, #24]
 8007722:	3301      	adds	r3, #1
 8007724:	9306      	str	r3, [sp, #24]
 8007726:	2301      	movs	r3, #1
 8007728:	9308      	str	r3, [sp, #32]
 800772a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 81b8 	beq.w	8007aa2 <_dtoa_r+0xb62>
 8007732:	6923      	ldr	r3, [r4, #16]
 8007734:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007738:	6918      	ldr	r0, [r3, #16]
 800773a:	f000 ff0f 	bl	800855c <__hi0bits>
 800773e:	f1c0 0020 	rsb	r0, r0, #32
 8007742:	9b06      	ldr	r3, [sp, #24]
 8007744:	4418      	add	r0, r3
 8007746:	f010 001f 	ands.w	r0, r0, #31
 800774a:	f000 8082 	beq.w	8007852 <_dtoa_r+0x912>
 800774e:	f1c0 0320 	rsb	r3, r0, #32
 8007752:	2b04      	cmp	r3, #4
 8007754:	dd73      	ble.n	800783e <_dtoa_r+0x8fe>
 8007756:	9b00      	ldr	r3, [sp, #0]
 8007758:	f1c0 001c 	rsb	r0, r0, #28
 800775c:	4403      	add	r3, r0
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	9b06      	ldr	r3, [sp, #24]
 8007762:	4403      	add	r3, r0
 8007764:	4406      	add	r6, r0
 8007766:	9306      	str	r3, [sp, #24]
 8007768:	9b00      	ldr	r3, [sp, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	dd05      	ble.n	800777a <_dtoa_r+0x83a>
 800776e:	9902      	ldr	r1, [sp, #8]
 8007770:	461a      	mov	r2, r3
 8007772:	4648      	mov	r0, r9
 8007774:	f001 f850 	bl	8008818 <__lshift>
 8007778:	9002      	str	r0, [sp, #8]
 800777a:	9b06      	ldr	r3, [sp, #24]
 800777c:	2b00      	cmp	r3, #0
 800777e:	dd05      	ble.n	800778c <_dtoa_r+0x84c>
 8007780:	4621      	mov	r1, r4
 8007782:	461a      	mov	r2, r3
 8007784:	4648      	mov	r0, r9
 8007786:	f001 f847 	bl	8008818 <__lshift>
 800778a:	4604      	mov	r4, r0
 800778c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800778e:	2b00      	cmp	r3, #0
 8007790:	d061      	beq.n	8007856 <_dtoa_r+0x916>
 8007792:	9802      	ldr	r0, [sp, #8]
 8007794:	4621      	mov	r1, r4
 8007796:	f001 f8ab 	bl	80088f0 <__mcmp>
 800779a:	2800      	cmp	r0, #0
 800779c:	da5b      	bge.n	8007856 <_dtoa_r+0x916>
 800779e:	2300      	movs	r3, #0
 80077a0:	9902      	ldr	r1, [sp, #8]
 80077a2:	220a      	movs	r2, #10
 80077a4:	4648      	mov	r0, r9
 80077a6:	f000 fe49 	bl	800843c <__multadd>
 80077aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ac:	9002      	str	r0, [sp, #8]
 80077ae:	f107 38ff 	add.w	r8, r7, #4294967295
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f000 8177 	beq.w	8007aa6 <_dtoa_r+0xb66>
 80077b8:	4629      	mov	r1, r5
 80077ba:	2300      	movs	r3, #0
 80077bc:	220a      	movs	r2, #10
 80077be:	4648      	mov	r0, r9
 80077c0:	f000 fe3c 	bl	800843c <__multadd>
 80077c4:	f1bb 0f00 	cmp.w	fp, #0
 80077c8:	4605      	mov	r5, r0
 80077ca:	dc6f      	bgt.n	80078ac <_dtoa_r+0x96c>
 80077cc:	9b07      	ldr	r3, [sp, #28]
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	dc49      	bgt.n	8007866 <_dtoa_r+0x926>
 80077d2:	e06b      	b.n	80078ac <_dtoa_r+0x96c>
 80077d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80077d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80077da:	e73c      	b.n	8007656 <_dtoa_r+0x716>
 80077dc:	3fe00000 	.word	0x3fe00000
 80077e0:	40240000 	.word	0x40240000
 80077e4:	9b03      	ldr	r3, [sp, #12]
 80077e6:	1e5c      	subs	r4, r3, #1
 80077e8:	9b08      	ldr	r3, [sp, #32]
 80077ea:	42a3      	cmp	r3, r4
 80077ec:	db09      	blt.n	8007802 <_dtoa_r+0x8c2>
 80077ee:	1b1c      	subs	r4, r3, r4
 80077f0:	9b03      	ldr	r3, [sp, #12]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f6bf af30 	bge.w	8007658 <_dtoa_r+0x718>
 80077f8:	9b00      	ldr	r3, [sp, #0]
 80077fa:	9a03      	ldr	r2, [sp, #12]
 80077fc:	1a9e      	subs	r6, r3, r2
 80077fe:	2300      	movs	r3, #0
 8007800:	e72b      	b.n	800765a <_dtoa_r+0x71a>
 8007802:	9b08      	ldr	r3, [sp, #32]
 8007804:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007806:	9408      	str	r4, [sp, #32]
 8007808:	1ae3      	subs	r3, r4, r3
 800780a:	441a      	add	r2, r3
 800780c:	9e00      	ldr	r6, [sp, #0]
 800780e:	9b03      	ldr	r3, [sp, #12]
 8007810:	920d      	str	r2, [sp, #52]	@ 0x34
 8007812:	2400      	movs	r4, #0
 8007814:	e721      	b.n	800765a <_dtoa_r+0x71a>
 8007816:	9c08      	ldr	r4, [sp, #32]
 8007818:	9e00      	ldr	r6, [sp, #0]
 800781a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800781c:	e728      	b.n	8007670 <_dtoa_r+0x730>
 800781e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007822:	e751      	b.n	80076c8 <_dtoa_r+0x788>
 8007824:	9a08      	ldr	r2, [sp, #32]
 8007826:	9902      	ldr	r1, [sp, #8]
 8007828:	e750      	b.n	80076cc <_dtoa_r+0x78c>
 800782a:	f8cd 8008 	str.w	r8, [sp, #8]
 800782e:	e751      	b.n	80076d4 <_dtoa_r+0x794>
 8007830:	2300      	movs	r3, #0
 8007832:	e779      	b.n	8007728 <_dtoa_r+0x7e8>
 8007834:	9b04      	ldr	r3, [sp, #16]
 8007836:	e777      	b.n	8007728 <_dtoa_r+0x7e8>
 8007838:	2300      	movs	r3, #0
 800783a:	9308      	str	r3, [sp, #32]
 800783c:	e779      	b.n	8007732 <_dtoa_r+0x7f2>
 800783e:	d093      	beq.n	8007768 <_dtoa_r+0x828>
 8007840:	9a00      	ldr	r2, [sp, #0]
 8007842:	331c      	adds	r3, #28
 8007844:	441a      	add	r2, r3
 8007846:	9200      	str	r2, [sp, #0]
 8007848:	9a06      	ldr	r2, [sp, #24]
 800784a:	441a      	add	r2, r3
 800784c:	441e      	add	r6, r3
 800784e:	9206      	str	r2, [sp, #24]
 8007850:	e78a      	b.n	8007768 <_dtoa_r+0x828>
 8007852:	4603      	mov	r3, r0
 8007854:	e7f4      	b.n	8007840 <_dtoa_r+0x900>
 8007856:	9b03      	ldr	r3, [sp, #12]
 8007858:	2b00      	cmp	r3, #0
 800785a:	46b8      	mov	r8, r7
 800785c:	dc20      	bgt.n	80078a0 <_dtoa_r+0x960>
 800785e:	469b      	mov	fp, r3
 8007860:	9b07      	ldr	r3, [sp, #28]
 8007862:	2b02      	cmp	r3, #2
 8007864:	dd1e      	ble.n	80078a4 <_dtoa_r+0x964>
 8007866:	f1bb 0f00 	cmp.w	fp, #0
 800786a:	f47f adb1 	bne.w	80073d0 <_dtoa_r+0x490>
 800786e:	4621      	mov	r1, r4
 8007870:	465b      	mov	r3, fp
 8007872:	2205      	movs	r2, #5
 8007874:	4648      	mov	r0, r9
 8007876:	f000 fde1 	bl	800843c <__multadd>
 800787a:	4601      	mov	r1, r0
 800787c:	4604      	mov	r4, r0
 800787e:	9802      	ldr	r0, [sp, #8]
 8007880:	f001 f836 	bl	80088f0 <__mcmp>
 8007884:	2800      	cmp	r0, #0
 8007886:	f77f ada3 	ble.w	80073d0 <_dtoa_r+0x490>
 800788a:	4656      	mov	r6, sl
 800788c:	2331      	movs	r3, #49	@ 0x31
 800788e:	f806 3b01 	strb.w	r3, [r6], #1
 8007892:	f108 0801 	add.w	r8, r8, #1
 8007896:	e59f      	b.n	80073d8 <_dtoa_r+0x498>
 8007898:	9c03      	ldr	r4, [sp, #12]
 800789a:	46b8      	mov	r8, r7
 800789c:	4625      	mov	r5, r4
 800789e:	e7f4      	b.n	800788a <_dtoa_r+0x94a>
 80078a0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80078a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	f000 8101 	beq.w	8007aae <_dtoa_r+0xb6e>
 80078ac:	2e00      	cmp	r6, #0
 80078ae:	dd05      	ble.n	80078bc <_dtoa_r+0x97c>
 80078b0:	4629      	mov	r1, r5
 80078b2:	4632      	mov	r2, r6
 80078b4:	4648      	mov	r0, r9
 80078b6:	f000 ffaf 	bl	8008818 <__lshift>
 80078ba:	4605      	mov	r5, r0
 80078bc:	9b08      	ldr	r3, [sp, #32]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d05c      	beq.n	800797c <_dtoa_r+0xa3c>
 80078c2:	6869      	ldr	r1, [r5, #4]
 80078c4:	4648      	mov	r0, r9
 80078c6:	f000 fd57 	bl	8008378 <_Balloc>
 80078ca:	4606      	mov	r6, r0
 80078cc:	b928      	cbnz	r0, 80078da <_dtoa_r+0x99a>
 80078ce:	4b82      	ldr	r3, [pc, #520]	@ (8007ad8 <_dtoa_r+0xb98>)
 80078d0:	4602      	mov	r2, r0
 80078d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80078d6:	f7ff bb4a 	b.w	8006f6e <_dtoa_r+0x2e>
 80078da:	692a      	ldr	r2, [r5, #16]
 80078dc:	3202      	adds	r2, #2
 80078de:	0092      	lsls	r2, r2, #2
 80078e0:	f105 010c 	add.w	r1, r5, #12
 80078e4:	300c      	adds	r0, #12
 80078e6:	f7ff fa84 	bl	8006df2 <memcpy>
 80078ea:	2201      	movs	r2, #1
 80078ec:	4631      	mov	r1, r6
 80078ee:	4648      	mov	r0, r9
 80078f0:	f000 ff92 	bl	8008818 <__lshift>
 80078f4:	f10a 0301 	add.w	r3, sl, #1
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	eb0a 030b 	add.w	r3, sl, fp
 80078fe:	9308      	str	r3, [sp, #32]
 8007900:	9b04      	ldr	r3, [sp, #16]
 8007902:	f003 0301 	and.w	r3, r3, #1
 8007906:	462f      	mov	r7, r5
 8007908:	9306      	str	r3, [sp, #24]
 800790a:	4605      	mov	r5, r0
 800790c:	9b00      	ldr	r3, [sp, #0]
 800790e:	9802      	ldr	r0, [sp, #8]
 8007910:	4621      	mov	r1, r4
 8007912:	f103 3bff 	add.w	fp, r3, #4294967295
 8007916:	f7ff fa89 	bl	8006e2c <quorem>
 800791a:	4603      	mov	r3, r0
 800791c:	3330      	adds	r3, #48	@ 0x30
 800791e:	9003      	str	r0, [sp, #12]
 8007920:	4639      	mov	r1, r7
 8007922:	9802      	ldr	r0, [sp, #8]
 8007924:	9309      	str	r3, [sp, #36]	@ 0x24
 8007926:	f000 ffe3 	bl	80088f0 <__mcmp>
 800792a:	462a      	mov	r2, r5
 800792c:	9004      	str	r0, [sp, #16]
 800792e:	4621      	mov	r1, r4
 8007930:	4648      	mov	r0, r9
 8007932:	f000 fff9 	bl	8008928 <__mdiff>
 8007936:	68c2      	ldr	r2, [r0, #12]
 8007938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800793a:	4606      	mov	r6, r0
 800793c:	bb02      	cbnz	r2, 8007980 <_dtoa_r+0xa40>
 800793e:	4601      	mov	r1, r0
 8007940:	9802      	ldr	r0, [sp, #8]
 8007942:	f000 ffd5 	bl	80088f0 <__mcmp>
 8007946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007948:	4602      	mov	r2, r0
 800794a:	4631      	mov	r1, r6
 800794c:	4648      	mov	r0, r9
 800794e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007950:	9309      	str	r3, [sp, #36]	@ 0x24
 8007952:	f000 fd51 	bl	80083f8 <_Bfree>
 8007956:	9b07      	ldr	r3, [sp, #28]
 8007958:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800795a:	9e00      	ldr	r6, [sp, #0]
 800795c:	ea42 0103 	orr.w	r1, r2, r3
 8007960:	9b06      	ldr	r3, [sp, #24]
 8007962:	4319      	orrs	r1, r3
 8007964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007966:	d10d      	bne.n	8007984 <_dtoa_r+0xa44>
 8007968:	2b39      	cmp	r3, #57	@ 0x39
 800796a:	d027      	beq.n	80079bc <_dtoa_r+0xa7c>
 800796c:	9a04      	ldr	r2, [sp, #16]
 800796e:	2a00      	cmp	r2, #0
 8007970:	dd01      	ble.n	8007976 <_dtoa_r+0xa36>
 8007972:	9b03      	ldr	r3, [sp, #12]
 8007974:	3331      	adds	r3, #49	@ 0x31
 8007976:	f88b 3000 	strb.w	r3, [fp]
 800797a:	e52e      	b.n	80073da <_dtoa_r+0x49a>
 800797c:	4628      	mov	r0, r5
 800797e:	e7b9      	b.n	80078f4 <_dtoa_r+0x9b4>
 8007980:	2201      	movs	r2, #1
 8007982:	e7e2      	b.n	800794a <_dtoa_r+0xa0a>
 8007984:	9904      	ldr	r1, [sp, #16]
 8007986:	2900      	cmp	r1, #0
 8007988:	db04      	blt.n	8007994 <_dtoa_r+0xa54>
 800798a:	9807      	ldr	r0, [sp, #28]
 800798c:	4301      	orrs	r1, r0
 800798e:	9806      	ldr	r0, [sp, #24]
 8007990:	4301      	orrs	r1, r0
 8007992:	d120      	bne.n	80079d6 <_dtoa_r+0xa96>
 8007994:	2a00      	cmp	r2, #0
 8007996:	ddee      	ble.n	8007976 <_dtoa_r+0xa36>
 8007998:	9902      	ldr	r1, [sp, #8]
 800799a:	9300      	str	r3, [sp, #0]
 800799c:	2201      	movs	r2, #1
 800799e:	4648      	mov	r0, r9
 80079a0:	f000 ff3a 	bl	8008818 <__lshift>
 80079a4:	4621      	mov	r1, r4
 80079a6:	9002      	str	r0, [sp, #8]
 80079a8:	f000 ffa2 	bl	80088f0 <__mcmp>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	9b00      	ldr	r3, [sp, #0]
 80079b0:	dc02      	bgt.n	80079b8 <_dtoa_r+0xa78>
 80079b2:	d1e0      	bne.n	8007976 <_dtoa_r+0xa36>
 80079b4:	07da      	lsls	r2, r3, #31
 80079b6:	d5de      	bpl.n	8007976 <_dtoa_r+0xa36>
 80079b8:	2b39      	cmp	r3, #57	@ 0x39
 80079ba:	d1da      	bne.n	8007972 <_dtoa_r+0xa32>
 80079bc:	2339      	movs	r3, #57	@ 0x39
 80079be:	f88b 3000 	strb.w	r3, [fp]
 80079c2:	4633      	mov	r3, r6
 80079c4:	461e      	mov	r6, r3
 80079c6:	3b01      	subs	r3, #1
 80079c8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80079cc:	2a39      	cmp	r2, #57	@ 0x39
 80079ce:	d04e      	beq.n	8007a6e <_dtoa_r+0xb2e>
 80079d0:	3201      	adds	r2, #1
 80079d2:	701a      	strb	r2, [r3, #0]
 80079d4:	e501      	b.n	80073da <_dtoa_r+0x49a>
 80079d6:	2a00      	cmp	r2, #0
 80079d8:	dd03      	ble.n	80079e2 <_dtoa_r+0xaa2>
 80079da:	2b39      	cmp	r3, #57	@ 0x39
 80079dc:	d0ee      	beq.n	80079bc <_dtoa_r+0xa7c>
 80079de:	3301      	adds	r3, #1
 80079e0:	e7c9      	b.n	8007976 <_dtoa_r+0xa36>
 80079e2:	9a00      	ldr	r2, [sp, #0]
 80079e4:	9908      	ldr	r1, [sp, #32]
 80079e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80079ea:	428a      	cmp	r2, r1
 80079ec:	d028      	beq.n	8007a40 <_dtoa_r+0xb00>
 80079ee:	9902      	ldr	r1, [sp, #8]
 80079f0:	2300      	movs	r3, #0
 80079f2:	220a      	movs	r2, #10
 80079f4:	4648      	mov	r0, r9
 80079f6:	f000 fd21 	bl	800843c <__multadd>
 80079fa:	42af      	cmp	r7, r5
 80079fc:	9002      	str	r0, [sp, #8]
 80079fe:	f04f 0300 	mov.w	r3, #0
 8007a02:	f04f 020a 	mov.w	r2, #10
 8007a06:	4639      	mov	r1, r7
 8007a08:	4648      	mov	r0, r9
 8007a0a:	d107      	bne.n	8007a1c <_dtoa_r+0xadc>
 8007a0c:	f000 fd16 	bl	800843c <__multadd>
 8007a10:	4607      	mov	r7, r0
 8007a12:	4605      	mov	r5, r0
 8007a14:	9b00      	ldr	r3, [sp, #0]
 8007a16:	3301      	adds	r3, #1
 8007a18:	9300      	str	r3, [sp, #0]
 8007a1a:	e777      	b.n	800790c <_dtoa_r+0x9cc>
 8007a1c:	f000 fd0e 	bl	800843c <__multadd>
 8007a20:	4629      	mov	r1, r5
 8007a22:	4607      	mov	r7, r0
 8007a24:	2300      	movs	r3, #0
 8007a26:	220a      	movs	r2, #10
 8007a28:	4648      	mov	r0, r9
 8007a2a:	f000 fd07 	bl	800843c <__multadd>
 8007a2e:	4605      	mov	r5, r0
 8007a30:	e7f0      	b.n	8007a14 <_dtoa_r+0xad4>
 8007a32:	f1bb 0f00 	cmp.w	fp, #0
 8007a36:	bfcc      	ite	gt
 8007a38:	465e      	movgt	r6, fp
 8007a3a:	2601      	movle	r6, #1
 8007a3c:	4456      	add	r6, sl
 8007a3e:	2700      	movs	r7, #0
 8007a40:	9902      	ldr	r1, [sp, #8]
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	2201      	movs	r2, #1
 8007a46:	4648      	mov	r0, r9
 8007a48:	f000 fee6 	bl	8008818 <__lshift>
 8007a4c:	4621      	mov	r1, r4
 8007a4e:	9002      	str	r0, [sp, #8]
 8007a50:	f000 ff4e 	bl	80088f0 <__mcmp>
 8007a54:	2800      	cmp	r0, #0
 8007a56:	dcb4      	bgt.n	80079c2 <_dtoa_r+0xa82>
 8007a58:	d102      	bne.n	8007a60 <_dtoa_r+0xb20>
 8007a5a:	9b00      	ldr	r3, [sp, #0]
 8007a5c:	07db      	lsls	r3, r3, #31
 8007a5e:	d4b0      	bmi.n	80079c2 <_dtoa_r+0xa82>
 8007a60:	4633      	mov	r3, r6
 8007a62:	461e      	mov	r6, r3
 8007a64:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a68:	2a30      	cmp	r2, #48	@ 0x30
 8007a6a:	d0fa      	beq.n	8007a62 <_dtoa_r+0xb22>
 8007a6c:	e4b5      	b.n	80073da <_dtoa_r+0x49a>
 8007a6e:	459a      	cmp	sl, r3
 8007a70:	d1a8      	bne.n	80079c4 <_dtoa_r+0xa84>
 8007a72:	2331      	movs	r3, #49	@ 0x31
 8007a74:	f108 0801 	add.w	r8, r8, #1
 8007a78:	f88a 3000 	strb.w	r3, [sl]
 8007a7c:	e4ad      	b.n	80073da <_dtoa_r+0x49a>
 8007a7e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a80:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007adc <_dtoa_r+0xb9c>
 8007a84:	b11b      	cbz	r3, 8007a8e <_dtoa_r+0xb4e>
 8007a86:	f10a 0308 	add.w	r3, sl, #8
 8007a8a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007a8c:	6013      	str	r3, [r2, #0]
 8007a8e:	4650      	mov	r0, sl
 8007a90:	b017      	add	sp, #92	@ 0x5c
 8007a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a96:	9b07      	ldr	r3, [sp, #28]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	f77f ae2e 	ble.w	80076fa <_dtoa_r+0x7ba>
 8007a9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007aa0:	9308      	str	r3, [sp, #32]
 8007aa2:	2001      	movs	r0, #1
 8007aa4:	e64d      	b.n	8007742 <_dtoa_r+0x802>
 8007aa6:	f1bb 0f00 	cmp.w	fp, #0
 8007aaa:	f77f aed9 	ble.w	8007860 <_dtoa_r+0x920>
 8007aae:	4656      	mov	r6, sl
 8007ab0:	9802      	ldr	r0, [sp, #8]
 8007ab2:	4621      	mov	r1, r4
 8007ab4:	f7ff f9ba 	bl	8006e2c <quorem>
 8007ab8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007abc:	f806 3b01 	strb.w	r3, [r6], #1
 8007ac0:	eba6 020a 	sub.w	r2, r6, sl
 8007ac4:	4593      	cmp	fp, r2
 8007ac6:	ddb4      	ble.n	8007a32 <_dtoa_r+0xaf2>
 8007ac8:	9902      	ldr	r1, [sp, #8]
 8007aca:	2300      	movs	r3, #0
 8007acc:	220a      	movs	r2, #10
 8007ace:	4648      	mov	r0, r9
 8007ad0:	f000 fcb4 	bl	800843c <__multadd>
 8007ad4:	9002      	str	r0, [sp, #8]
 8007ad6:	e7eb      	b.n	8007ab0 <_dtoa_r+0xb70>
 8007ad8:	0800e88b 	.word	0x0800e88b
 8007adc:	0800e80f 	.word	0x0800e80f

08007ae0 <_free_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	4605      	mov	r5, r0
 8007ae4:	2900      	cmp	r1, #0
 8007ae6:	d041      	beq.n	8007b6c <_free_r+0x8c>
 8007ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aec:	1f0c      	subs	r4, r1, #4
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	bfb8      	it	lt
 8007af2:	18e4      	addlt	r4, r4, r3
 8007af4:	f000 fc34 	bl	8008360 <__malloc_lock>
 8007af8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b70 <_free_r+0x90>)
 8007afa:	6813      	ldr	r3, [r2, #0]
 8007afc:	b933      	cbnz	r3, 8007b0c <_free_r+0x2c>
 8007afe:	6063      	str	r3, [r4, #4]
 8007b00:	6014      	str	r4, [r2, #0]
 8007b02:	4628      	mov	r0, r5
 8007b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b08:	f000 bc30 	b.w	800836c <__malloc_unlock>
 8007b0c:	42a3      	cmp	r3, r4
 8007b0e:	d908      	bls.n	8007b22 <_free_r+0x42>
 8007b10:	6820      	ldr	r0, [r4, #0]
 8007b12:	1821      	adds	r1, r4, r0
 8007b14:	428b      	cmp	r3, r1
 8007b16:	bf01      	itttt	eq
 8007b18:	6819      	ldreq	r1, [r3, #0]
 8007b1a:	685b      	ldreq	r3, [r3, #4]
 8007b1c:	1809      	addeq	r1, r1, r0
 8007b1e:	6021      	streq	r1, [r4, #0]
 8007b20:	e7ed      	b.n	8007afe <_free_r+0x1e>
 8007b22:	461a      	mov	r2, r3
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	b10b      	cbz	r3, 8007b2c <_free_r+0x4c>
 8007b28:	42a3      	cmp	r3, r4
 8007b2a:	d9fa      	bls.n	8007b22 <_free_r+0x42>
 8007b2c:	6811      	ldr	r1, [r2, #0]
 8007b2e:	1850      	adds	r0, r2, r1
 8007b30:	42a0      	cmp	r0, r4
 8007b32:	d10b      	bne.n	8007b4c <_free_r+0x6c>
 8007b34:	6820      	ldr	r0, [r4, #0]
 8007b36:	4401      	add	r1, r0
 8007b38:	1850      	adds	r0, r2, r1
 8007b3a:	4283      	cmp	r3, r0
 8007b3c:	6011      	str	r1, [r2, #0]
 8007b3e:	d1e0      	bne.n	8007b02 <_free_r+0x22>
 8007b40:	6818      	ldr	r0, [r3, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	6053      	str	r3, [r2, #4]
 8007b46:	4408      	add	r0, r1
 8007b48:	6010      	str	r0, [r2, #0]
 8007b4a:	e7da      	b.n	8007b02 <_free_r+0x22>
 8007b4c:	d902      	bls.n	8007b54 <_free_r+0x74>
 8007b4e:	230c      	movs	r3, #12
 8007b50:	602b      	str	r3, [r5, #0]
 8007b52:	e7d6      	b.n	8007b02 <_free_r+0x22>
 8007b54:	6820      	ldr	r0, [r4, #0]
 8007b56:	1821      	adds	r1, r4, r0
 8007b58:	428b      	cmp	r3, r1
 8007b5a:	bf04      	itt	eq
 8007b5c:	6819      	ldreq	r1, [r3, #0]
 8007b5e:	685b      	ldreq	r3, [r3, #4]
 8007b60:	6063      	str	r3, [r4, #4]
 8007b62:	bf04      	itt	eq
 8007b64:	1809      	addeq	r1, r1, r0
 8007b66:	6021      	streq	r1, [r4, #0]
 8007b68:	6054      	str	r4, [r2, #4]
 8007b6a:	e7ca      	b.n	8007b02 <_free_r+0x22>
 8007b6c:	bd38      	pop	{r3, r4, r5, pc}
 8007b6e:	bf00      	nop
 8007b70:	20000d64 	.word	0x20000d64

08007b74 <rshift>:
 8007b74:	6903      	ldr	r3, [r0, #16]
 8007b76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007b7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007b7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007b82:	f100 0414 	add.w	r4, r0, #20
 8007b86:	dd45      	ble.n	8007c14 <rshift+0xa0>
 8007b88:	f011 011f 	ands.w	r1, r1, #31
 8007b8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007b90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007b94:	d10c      	bne.n	8007bb0 <rshift+0x3c>
 8007b96:	f100 0710 	add.w	r7, r0, #16
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	42b1      	cmp	r1, r6
 8007b9e:	d334      	bcc.n	8007c0a <rshift+0x96>
 8007ba0:	1a9b      	subs	r3, r3, r2
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	1eea      	subs	r2, r5, #3
 8007ba6:	4296      	cmp	r6, r2
 8007ba8:	bf38      	it	cc
 8007baa:	2300      	movcc	r3, #0
 8007bac:	4423      	add	r3, r4
 8007bae:	e015      	b.n	8007bdc <rshift+0x68>
 8007bb0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007bb4:	f1c1 0820 	rsb	r8, r1, #32
 8007bb8:	40cf      	lsrs	r7, r1
 8007bba:	f105 0e04 	add.w	lr, r5, #4
 8007bbe:	46a1      	mov	r9, r4
 8007bc0:	4576      	cmp	r6, lr
 8007bc2:	46f4      	mov	ip, lr
 8007bc4:	d815      	bhi.n	8007bf2 <rshift+0x7e>
 8007bc6:	1a9a      	subs	r2, r3, r2
 8007bc8:	0092      	lsls	r2, r2, #2
 8007bca:	3a04      	subs	r2, #4
 8007bcc:	3501      	adds	r5, #1
 8007bce:	42ae      	cmp	r6, r5
 8007bd0:	bf38      	it	cc
 8007bd2:	2200      	movcc	r2, #0
 8007bd4:	18a3      	adds	r3, r4, r2
 8007bd6:	50a7      	str	r7, [r4, r2]
 8007bd8:	b107      	cbz	r7, 8007bdc <rshift+0x68>
 8007bda:	3304      	adds	r3, #4
 8007bdc:	1b1a      	subs	r2, r3, r4
 8007bde:	42a3      	cmp	r3, r4
 8007be0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007be4:	bf08      	it	eq
 8007be6:	2300      	moveq	r3, #0
 8007be8:	6102      	str	r2, [r0, #16]
 8007bea:	bf08      	it	eq
 8007bec:	6143      	streq	r3, [r0, #20]
 8007bee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bf2:	f8dc c000 	ldr.w	ip, [ip]
 8007bf6:	fa0c fc08 	lsl.w	ip, ip, r8
 8007bfa:	ea4c 0707 	orr.w	r7, ip, r7
 8007bfe:	f849 7b04 	str.w	r7, [r9], #4
 8007c02:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c06:	40cf      	lsrs	r7, r1
 8007c08:	e7da      	b.n	8007bc0 <rshift+0x4c>
 8007c0a:	f851 cb04 	ldr.w	ip, [r1], #4
 8007c0e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007c12:	e7c3      	b.n	8007b9c <rshift+0x28>
 8007c14:	4623      	mov	r3, r4
 8007c16:	e7e1      	b.n	8007bdc <rshift+0x68>

08007c18 <__hexdig_fun>:
 8007c18:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007c1c:	2b09      	cmp	r3, #9
 8007c1e:	d802      	bhi.n	8007c26 <__hexdig_fun+0xe>
 8007c20:	3820      	subs	r0, #32
 8007c22:	b2c0      	uxtb	r0, r0
 8007c24:	4770      	bx	lr
 8007c26:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007c2a:	2b05      	cmp	r3, #5
 8007c2c:	d801      	bhi.n	8007c32 <__hexdig_fun+0x1a>
 8007c2e:	3847      	subs	r0, #71	@ 0x47
 8007c30:	e7f7      	b.n	8007c22 <__hexdig_fun+0xa>
 8007c32:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007c36:	2b05      	cmp	r3, #5
 8007c38:	d801      	bhi.n	8007c3e <__hexdig_fun+0x26>
 8007c3a:	3827      	subs	r0, #39	@ 0x27
 8007c3c:	e7f1      	b.n	8007c22 <__hexdig_fun+0xa>
 8007c3e:	2000      	movs	r0, #0
 8007c40:	4770      	bx	lr
	...

08007c44 <__gethex>:
 8007c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c48:	b085      	sub	sp, #20
 8007c4a:	468a      	mov	sl, r1
 8007c4c:	9302      	str	r3, [sp, #8]
 8007c4e:	680b      	ldr	r3, [r1, #0]
 8007c50:	9001      	str	r0, [sp, #4]
 8007c52:	4690      	mov	r8, r2
 8007c54:	1c9c      	adds	r4, r3, #2
 8007c56:	46a1      	mov	r9, r4
 8007c58:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007c5c:	2830      	cmp	r0, #48	@ 0x30
 8007c5e:	d0fa      	beq.n	8007c56 <__gethex+0x12>
 8007c60:	eba9 0303 	sub.w	r3, r9, r3
 8007c64:	f1a3 0b02 	sub.w	fp, r3, #2
 8007c68:	f7ff ffd6 	bl	8007c18 <__hexdig_fun>
 8007c6c:	4605      	mov	r5, r0
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d168      	bne.n	8007d44 <__gethex+0x100>
 8007c72:	49a0      	ldr	r1, [pc, #640]	@ (8007ef4 <__gethex+0x2b0>)
 8007c74:	2201      	movs	r2, #1
 8007c76:	4648      	mov	r0, r9
 8007c78:	f7ff f807 	bl	8006c8a <strncmp>
 8007c7c:	4607      	mov	r7, r0
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	d167      	bne.n	8007d52 <__gethex+0x10e>
 8007c82:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007c86:	4626      	mov	r6, r4
 8007c88:	f7ff ffc6 	bl	8007c18 <__hexdig_fun>
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d062      	beq.n	8007d56 <__gethex+0x112>
 8007c90:	4623      	mov	r3, r4
 8007c92:	7818      	ldrb	r0, [r3, #0]
 8007c94:	2830      	cmp	r0, #48	@ 0x30
 8007c96:	4699      	mov	r9, r3
 8007c98:	f103 0301 	add.w	r3, r3, #1
 8007c9c:	d0f9      	beq.n	8007c92 <__gethex+0x4e>
 8007c9e:	f7ff ffbb 	bl	8007c18 <__hexdig_fun>
 8007ca2:	fab0 f580 	clz	r5, r0
 8007ca6:	096d      	lsrs	r5, r5, #5
 8007ca8:	f04f 0b01 	mov.w	fp, #1
 8007cac:	464a      	mov	r2, r9
 8007cae:	4616      	mov	r6, r2
 8007cb0:	3201      	adds	r2, #1
 8007cb2:	7830      	ldrb	r0, [r6, #0]
 8007cb4:	f7ff ffb0 	bl	8007c18 <__hexdig_fun>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d1f8      	bne.n	8007cae <__gethex+0x6a>
 8007cbc:	498d      	ldr	r1, [pc, #564]	@ (8007ef4 <__gethex+0x2b0>)
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	4630      	mov	r0, r6
 8007cc2:	f7fe ffe2 	bl	8006c8a <strncmp>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	d13f      	bne.n	8007d4a <__gethex+0x106>
 8007cca:	b944      	cbnz	r4, 8007cde <__gethex+0x9a>
 8007ccc:	1c74      	adds	r4, r6, #1
 8007cce:	4622      	mov	r2, r4
 8007cd0:	4616      	mov	r6, r2
 8007cd2:	3201      	adds	r2, #1
 8007cd4:	7830      	ldrb	r0, [r6, #0]
 8007cd6:	f7ff ff9f 	bl	8007c18 <__hexdig_fun>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d1f8      	bne.n	8007cd0 <__gethex+0x8c>
 8007cde:	1ba4      	subs	r4, r4, r6
 8007ce0:	00a7      	lsls	r7, r4, #2
 8007ce2:	7833      	ldrb	r3, [r6, #0]
 8007ce4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007ce8:	2b50      	cmp	r3, #80	@ 0x50
 8007cea:	d13e      	bne.n	8007d6a <__gethex+0x126>
 8007cec:	7873      	ldrb	r3, [r6, #1]
 8007cee:	2b2b      	cmp	r3, #43	@ 0x2b
 8007cf0:	d033      	beq.n	8007d5a <__gethex+0x116>
 8007cf2:	2b2d      	cmp	r3, #45	@ 0x2d
 8007cf4:	d034      	beq.n	8007d60 <__gethex+0x11c>
 8007cf6:	1c71      	adds	r1, r6, #1
 8007cf8:	2400      	movs	r4, #0
 8007cfa:	7808      	ldrb	r0, [r1, #0]
 8007cfc:	f7ff ff8c 	bl	8007c18 <__hexdig_fun>
 8007d00:	1e43      	subs	r3, r0, #1
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b18      	cmp	r3, #24
 8007d06:	d830      	bhi.n	8007d6a <__gethex+0x126>
 8007d08:	f1a0 0210 	sub.w	r2, r0, #16
 8007d0c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007d10:	f7ff ff82 	bl	8007c18 <__hexdig_fun>
 8007d14:	f100 3cff 	add.w	ip, r0, #4294967295
 8007d18:	fa5f fc8c 	uxtb.w	ip, ip
 8007d1c:	f1bc 0f18 	cmp.w	ip, #24
 8007d20:	f04f 030a 	mov.w	r3, #10
 8007d24:	d91e      	bls.n	8007d64 <__gethex+0x120>
 8007d26:	b104      	cbz	r4, 8007d2a <__gethex+0xe6>
 8007d28:	4252      	negs	r2, r2
 8007d2a:	4417      	add	r7, r2
 8007d2c:	f8ca 1000 	str.w	r1, [sl]
 8007d30:	b1ed      	cbz	r5, 8007d6e <__gethex+0x12a>
 8007d32:	f1bb 0f00 	cmp.w	fp, #0
 8007d36:	bf0c      	ite	eq
 8007d38:	2506      	moveq	r5, #6
 8007d3a:	2500      	movne	r5, #0
 8007d3c:	4628      	mov	r0, r5
 8007d3e:	b005      	add	sp, #20
 8007d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d44:	2500      	movs	r5, #0
 8007d46:	462c      	mov	r4, r5
 8007d48:	e7b0      	b.n	8007cac <__gethex+0x68>
 8007d4a:	2c00      	cmp	r4, #0
 8007d4c:	d1c7      	bne.n	8007cde <__gethex+0x9a>
 8007d4e:	4627      	mov	r7, r4
 8007d50:	e7c7      	b.n	8007ce2 <__gethex+0x9e>
 8007d52:	464e      	mov	r6, r9
 8007d54:	462f      	mov	r7, r5
 8007d56:	2501      	movs	r5, #1
 8007d58:	e7c3      	b.n	8007ce2 <__gethex+0x9e>
 8007d5a:	2400      	movs	r4, #0
 8007d5c:	1cb1      	adds	r1, r6, #2
 8007d5e:	e7cc      	b.n	8007cfa <__gethex+0xb6>
 8007d60:	2401      	movs	r4, #1
 8007d62:	e7fb      	b.n	8007d5c <__gethex+0x118>
 8007d64:	fb03 0002 	mla	r0, r3, r2, r0
 8007d68:	e7ce      	b.n	8007d08 <__gethex+0xc4>
 8007d6a:	4631      	mov	r1, r6
 8007d6c:	e7de      	b.n	8007d2c <__gethex+0xe8>
 8007d6e:	eba6 0309 	sub.w	r3, r6, r9
 8007d72:	3b01      	subs	r3, #1
 8007d74:	4629      	mov	r1, r5
 8007d76:	2b07      	cmp	r3, #7
 8007d78:	dc0a      	bgt.n	8007d90 <__gethex+0x14c>
 8007d7a:	9801      	ldr	r0, [sp, #4]
 8007d7c:	f000 fafc 	bl	8008378 <_Balloc>
 8007d80:	4604      	mov	r4, r0
 8007d82:	b940      	cbnz	r0, 8007d96 <__gethex+0x152>
 8007d84:	4b5c      	ldr	r3, [pc, #368]	@ (8007ef8 <__gethex+0x2b4>)
 8007d86:	4602      	mov	r2, r0
 8007d88:	21e4      	movs	r1, #228	@ 0xe4
 8007d8a:	485c      	ldr	r0, [pc, #368]	@ (8007efc <__gethex+0x2b8>)
 8007d8c:	f001 fa54 	bl	8009238 <__assert_func>
 8007d90:	3101      	adds	r1, #1
 8007d92:	105b      	asrs	r3, r3, #1
 8007d94:	e7ef      	b.n	8007d76 <__gethex+0x132>
 8007d96:	f100 0a14 	add.w	sl, r0, #20
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	4655      	mov	r5, sl
 8007d9e:	469b      	mov	fp, r3
 8007da0:	45b1      	cmp	r9, r6
 8007da2:	d337      	bcc.n	8007e14 <__gethex+0x1d0>
 8007da4:	f845 bb04 	str.w	fp, [r5], #4
 8007da8:	eba5 050a 	sub.w	r5, r5, sl
 8007dac:	10ad      	asrs	r5, r5, #2
 8007dae:	6125      	str	r5, [r4, #16]
 8007db0:	4658      	mov	r0, fp
 8007db2:	f000 fbd3 	bl	800855c <__hi0bits>
 8007db6:	016d      	lsls	r5, r5, #5
 8007db8:	f8d8 6000 	ldr.w	r6, [r8]
 8007dbc:	1a2d      	subs	r5, r5, r0
 8007dbe:	42b5      	cmp	r5, r6
 8007dc0:	dd54      	ble.n	8007e6c <__gethex+0x228>
 8007dc2:	1bad      	subs	r5, r5, r6
 8007dc4:	4629      	mov	r1, r5
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f000 ff5f 	bl	8008c8a <__any_on>
 8007dcc:	4681      	mov	r9, r0
 8007dce:	b178      	cbz	r0, 8007df0 <__gethex+0x1ac>
 8007dd0:	1e6b      	subs	r3, r5, #1
 8007dd2:	1159      	asrs	r1, r3, #5
 8007dd4:	f003 021f 	and.w	r2, r3, #31
 8007dd8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007ddc:	f04f 0901 	mov.w	r9, #1
 8007de0:	fa09 f202 	lsl.w	r2, r9, r2
 8007de4:	420a      	tst	r2, r1
 8007de6:	d003      	beq.n	8007df0 <__gethex+0x1ac>
 8007de8:	454b      	cmp	r3, r9
 8007dea:	dc36      	bgt.n	8007e5a <__gethex+0x216>
 8007dec:	f04f 0902 	mov.w	r9, #2
 8007df0:	4629      	mov	r1, r5
 8007df2:	4620      	mov	r0, r4
 8007df4:	f7ff febe 	bl	8007b74 <rshift>
 8007df8:	442f      	add	r7, r5
 8007dfa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007dfe:	42bb      	cmp	r3, r7
 8007e00:	da42      	bge.n	8007e88 <__gethex+0x244>
 8007e02:	9801      	ldr	r0, [sp, #4]
 8007e04:	4621      	mov	r1, r4
 8007e06:	f000 faf7 	bl	80083f8 <_Bfree>
 8007e0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	6013      	str	r3, [r2, #0]
 8007e10:	25a3      	movs	r5, #163	@ 0xa3
 8007e12:	e793      	b.n	8007d3c <__gethex+0xf8>
 8007e14:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007e18:	2a2e      	cmp	r2, #46	@ 0x2e
 8007e1a:	d012      	beq.n	8007e42 <__gethex+0x1fe>
 8007e1c:	2b20      	cmp	r3, #32
 8007e1e:	d104      	bne.n	8007e2a <__gethex+0x1e6>
 8007e20:	f845 bb04 	str.w	fp, [r5], #4
 8007e24:	f04f 0b00 	mov.w	fp, #0
 8007e28:	465b      	mov	r3, fp
 8007e2a:	7830      	ldrb	r0, [r6, #0]
 8007e2c:	9303      	str	r3, [sp, #12]
 8007e2e:	f7ff fef3 	bl	8007c18 <__hexdig_fun>
 8007e32:	9b03      	ldr	r3, [sp, #12]
 8007e34:	f000 000f 	and.w	r0, r0, #15
 8007e38:	4098      	lsls	r0, r3
 8007e3a:	ea4b 0b00 	orr.w	fp, fp, r0
 8007e3e:	3304      	adds	r3, #4
 8007e40:	e7ae      	b.n	8007da0 <__gethex+0x15c>
 8007e42:	45b1      	cmp	r9, r6
 8007e44:	d8ea      	bhi.n	8007e1c <__gethex+0x1d8>
 8007e46:	492b      	ldr	r1, [pc, #172]	@ (8007ef4 <__gethex+0x2b0>)
 8007e48:	9303      	str	r3, [sp, #12]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	4630      	mov	r0, r6
 8007e4e:	f7fe ff1c 	bl	8006c8a <strncmp>
 8007e52:	9b03      	ldr	r3, [sp, #12]
 8007e54:	2800      	cmp	r0, #0
 8007e56:	d1e1      	bne.n	8007e1c <__gethex+0x1d8>
 8007e58:	e7a2      	b.n	8007da0 <__gethex+0x15c>
 8007e5a:	1ea9      	subs	r1, r5, #2
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f000 ff14 	bl	8008c8a <__any_on>
 8007e62:	2800      	cmp	r0, #0
 8007e64:	d0c2      	beq.n	8007dec <__gethex+0x1a8>
 8007e66:	f04f 0903 	mov.w	r9, #3
 8007e6a:	e7c1      	b.n	8007df0 <__gethex+0x1ac>
 8007e6c:	da09      	bge.n	8007e82 <__gethex+0x23e>
 8007e6e:	1b75      	subs	r5, r6, r5
 8007e70:	4621      	mov	r1, r4
 8007e72:	9801      	ldr	r0, [sp, #4]
 8007e74:	462a      	mov	r2, r5
 8007e76:	f000 fccf 	bl	8008818 <__lshift>
 8007e7a:	1b7f      	subs	r7, r7, r5
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	f100 0a14 	add.w	sl, r0, #20
 8007e82:	f04f 0900 	mov.w	r9, #0
 8007e86:	e7b8      	b.n	8007dfa <__gethex+0x1b6>
 8007e88:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007e8c:	42bd      	cmp	r5, r7
 8007e8e:	dd6f      	ble.n	8007f70 <__gethex+0x32c>
 8007e90:	1bed      	subs	r5, r5, r7
 8007e92:	42ae      	cmp	r6, r5
 8007e94:	dc34      	bgt.n	8007f00 <__gethex+0x2bc>
 8007e96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d022      	beq.n	8007ee4 <__gethex+0x2a0>
 8007e9e:	2b03      	cmp	r3, #3
 8007ea0:	d024      	beq.n	8007eec <__gethex+0x2a8>
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d115      	bne.n	8007ed2 <__gethex+0x28e>
 8007ea6:	42ae      	cmp	r6, r5
 8007ea8:	d113      	bne.n	8007ed2 <__gethex+0x28e>
 8007eaa:	2e01      	cmp	r6, #1
 8007eac:	d10b      	bne.n	8007ec6 <__gethex+0x282>
 8007eae:	9a02      	ldr	r2, [sp, #8]
 8007eb0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	6123      	str	r3, [r4, #16]
 8007eba:	f8ca 3000 	str.w	r3, [sl]
 8007ebe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ec0:	2562      	movs	r5, #98	@ 0x62
 8007ec2:	601c      	str	r4, [r3, #0]
 8007ec4:	e73a      	b.n	8007d3c <__gethex+0xf8>
 8007ec6:	1e71      	subs	r1, r6, #1
 8007ec8:	4620      	mov	r0, r4
 8007eca:	f000 fede 	bl	8008c8a <__any_on>
 8007ece:	2800      	cmp	r0, #0
 8007ed0:	d1ed      	bne.n	8007eae <__gethex+0x26a>
 8007ed2:	9801      	ldr	r0, [sp, #4]
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	f000 fa8f 	bl	80083f8 <_Bfree>
 8007eda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007edc:	2300      	movs	r3, #0
 8007ede:	6013      	str	r3, [r2, #0]
 8007ee0:	2550      	movs	r5, #80	@ 0x50
 8007ee2:	e72b      	b.n	8007d3c <__gethex+0xf8>
 8007ee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d1f3      	bne.n	8007ed2 <__gethex+0x28e>
 8007eea:	e7e0      	b.n	8007eae <__gethex+0x26a>
 8007eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1dd      	bne.n	8007eae <__gethex+0x26a>
 8007ef2:	e7ee      	b.n	8007ed2 <__gethex+0x28e>
 8007ef4:	0800e7cc 	.word	0x0800e7cc
 8007ef8:	0800e88b 	.word	0x0800e88b
 8007efc:	0800e89c 	.word	0x0800e89c
 8007f00:	1e6f      	subs	r7, r5, #1
 8007f02:	f1b9 0f00 	cmp.w	r9, #0
 8007f06:	d130      	bne.n	8007f6a <__gethex+0x326>
 8007f08:	b127      	cbz	r7, 8007f14 <__gethex+0x2d0>
 8007f0a:	4639      	mov	r1, r7
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f000 febc 	bl	8008c8a <__any_on>
 8007f12:	4681      	mov	r9, r0
 8007f14:	117a      	asrs	r2, r7, #5
 8007f16:	2301      	movs	r3, #1
 8007f18:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007f1c:	f007 071f 	and.w	r7, r7, #31
 8007f20:	40bb      	lsls	r3, r7
 8007f22:	4213      	tst	r3, r2
 8007f24:	4629      	mov	r1, r5
 8007f26:	4620      	mov	r0, r4
 8007f28:	bf18      	it	ne
 8007f2a:	f049 0902 	orrne.w	r9, r9, #2
 8007f2e:	f7ff fe21 	bl	8007b74 <rshift>
 8007f32:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007f36:	1b76      	subs	r6, r6, r5
 8007f38:	2502      	movs	r5, #2
 8007f3a:	f1b9 0f00 	cmp.w	r9, #0
 8007f3e:	d047      	beq.n	8007fd0 <__gethex+0x38c>
 8007f40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d015      	beq.n	8007f74 <__gethex+0x330>
 8007f48:	2b03      	cmp	r3, #3
 8007f4a:	d017      	beq.n	8007f7c <__gethex+0x338>
 8007f4c:	2b01      	cmp	r3, #1
 8007f4e:	d109      	bne.n	8007f64 <__gethex+0x320>
 8007f50:	f019 0f02 	tst.w	r9, #2
 8007f54:	d006      	beq.n	8007f64 <__gethex+0x320>
 8007f56:	f8da 3000 	ldr.w	r3, [sl]
 8007f5a:	ea49 0903 	orr.w	r9, r9, r3
 8007f5e:	f019 0f01 	tst.w	r9, #1
 8007f62:	d10e      	bne.n	8007f82 <__gethex+0x33e>
 8007f64:	f045 0510 	orr.w	r5, r5, #16
 8007f68:	e032      	b.n	8007fd0 <__gethex+0x38c>
 8007f6a:	f04f 0901 	mov.w	r9, #1
 8007f6e:	e7d1      	b.n	8007f14 <__gethex+0x2d0>
 8007f70:	2501      	movs	r5, #1
 8007f72:	e7e2      	b.n	8007f3a <__gethex+0x2f6>
 8007f74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f76:	f1c3 0301 	rsb	r3, r3, #1
 8007f7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d0f0      	beq.n	8007f64 <__gethex+0x320>
 8007f82:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007f86:	f104 0314 	add.w	r3, r4, #20
 8007f8a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007f8e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007f92:	f04f 0c00 	mov.w	ip, #0
 8007f96:	4618      	mov	r0, r3
 8007f98:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f9c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007fa0:	d01b      	beq.n	8007fda <__gethex+0x396>
 8007fa2:	3201      	adds	r2, #1
 8007fa4:	6002      	str	r2, [r0, #0]
 8007fa6:	2d02      	cmp	r5, #2
 8007fa8:	f104 0314 	add.w	r3, r4, #20
 8007fac:	d13c      	bne.n	8008028 <__gethex+0x3e4>
 8007fae:	f8d8 2000 	ldr.w	r2, [r8]
 8007fb2:	3a01      	subs	r2, #1
 8007fb4:	42b2      	cmp	r2, r6
 8007fb6:	d109      	bne.n	8007fcc <__gethex+0x388>
 8007fb8:	1171      	asrs	r1, r6, #5
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007fc0:	f006 061f 	and.w	r6, r6, #31
 8007fc4:	fa02 f606 	lsl.w	r6, r2, r6
 8007fc8:	421e      	tst	r6, r3
 8007fca:	d13a      	bne.n	8008042 <__gethex+0x3fe>
 8007fcc:	f045 0520 	orr.w	r5, r5, #32
 8007fd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fd2:	601c      	str	r4, [r3, #0]
 8007fd4:	9b02      	ldr	r3, [sp, #8]
 8007fd6:	601f      	str	r7, [r3, #0]
 8007fd8:	e6b0      	b.n	8007d3c <__gethex+0xf8>
 8007fda:	4299      	cmp	r1, r3
 8007fdc:	f843 cc04 	str.w	ip, [r3, #-4]
 8007fe0:	d8d9      	bhi.n	8007f96 <__gethex+0x352>
 8007fe2:	68a3      	ldr	r3, [r4, #8]
 8007fe4:	459b      	cmp	fp, r3
 8007fe6:	db17      	blt.n	8008018 <__gethex+0x3d4>
 8007fe8:	6861      	ldr	r1, [r4, #4]
 8007fea:	9801      	ldr	r0, [sp, #4]
 8007fec:	3101      	adds	r1, #1
 8007fee:	f000 f9c3 	bl	8008378 <_Balloc>
 8007ff2:	4681      	mov	r9, r0
 8007ff4:	b918      	cbnz	r0, 8007ffe <__gethex+0x3ba>
 8007ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8008060 <__gethex+0x41c>)
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	2184      	movs	r1, #132	@ 0x84
 8007ffc:	e6c5      	b.n	8007d8a <__gethex+0x146>
 8007ffe:	6922      	ldr	r2, [r4, #16]
 8008000:	3202      	adds	r2, #2
 8008002:	f104 010c 	add.w	r1, r4, #12
 8008006:	0092      	lsls	r2, r2, #2
 8008008:	300c      	adds	r0, #12
 800800a:	f7fe fef2 	bl	8006df2 <memcpy>
 800800e:	4621      	mov	r1, r4
 8008010:	9801      	ldr	r0, [sp, #4]
 8008012:	f000 f9f1 	bl	80083f8 <_Bfree>
 8008016:	464c      	mov	r4, r9
 8008018:	6923      	ldr	r3, [r4, #16]
 800801a:	1c5a      	adds	r2, r3, #1
 800801c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008020:	6122      	str	r2, [r4, #16]
 8008022:	2201      	movs	r2, #1
 8008024:	615a      	str	r2, [r3, #20]
 8008026:	e7be      	b.n	8007fa6 <__gethex+0x362>
 8008028:	6922      	ldr	r2, [r4, #16]
 800802a:	455a      	cmp	r2, fp
 800802c:	dd0b      	ble.n	8008046 <__gethex+0x402>
 800802e:	2101      	movs	r1, #1
 8008030:	4620      	mov	r0, r4
 8008032:	f7ff fd9f 	bl	8007b74 <rshift>
 8008036:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800803a:	3701      	adds	r7, #1
 800803c:	42bb      	cmp	r3, r7
 800803e:	f6ff aee0 	blt.w	8007e02 <__gethex+0x1be>
 8008042:	2501      	movs	r5, #1
 8008044:	e7c2      	b.n	8007fcc <__gethex+0x388>
 8008046:	f016 061f 	ands.w	r6, r6, #31
 800804a:	d0fa      	beq.n	8008042 <__gethex+0x3fe>
 800804c:	4453      	add	r3, sl
 800804e:	f1c6 0620 	rsb	r6, r6, #32
 8008052:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008056:	f000 fa81 	bl	800855c <__hi0bits>
 800805a:	42b0      	cmp	r0, r6
 800805c:	dbe7      	blt.n	800802e <__gethex+0x3ea>
 800805e:	e7f0      	b.n	8008042 <__gethex+0x3fe>
 8008060:	0800e88b 	.word	0x0800e88b

08008064 <L_shift>:
 8008064:	f1c2 0208 	rsb	r2, r2, #8
 8008068:	0092      	lsls	r2, r2, #2
 800806a:	b570      	push	{r4, r5, r6, lr}
 800806c:	f1c2 0620 	rsb	r6, r2, #32
 8008070:	6843      	ldr	r3, [r0, #4]
 8008072:	6804      	ldr	r4, [r0, #0]
 8008074:	fa03 f506 	lsl.w	r5, r3, r6
 8008078:	432c      	orrs	r4, r5
 800807a:	40d3      	lsrs	r3, r2
 800807c:	6004      	str	r4, [r0, #0]
 800807e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008082:	4288      	cmp	r0, r1
 8008084:	d3f4      	bcc.n	8008070 <L_shift+0xc>
 8008086:	bd70      	pop	{r4, r5, r6, pc}

08008088 <__match>:
 8008088:	b530      	push	{r4, r5, lr}
 800808a:	6803      	ldr	r3, [r0, #0]
 800808c:	3301      	adds	r3, #1
 800808e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008092:	b914      	cbnz	r4, 800809a <__match+0x12>
 8008094:	6003      	str	r3, [r0, #0]
 8008096:	2001      	movs	r0, #1
 8008098:	bd30      	pop	{r4, r5, pc}
 800809a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800809e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80080a2:	2d19      	cmp	r5, #25
 80080a4:	bf98      	it	ls
 80080a6:	3220      	addls	r2, #32
 80080a8:	42a2      	cmp	r2, r4
 80080aa:	d0f0      	beq.n	800808e <__match+0x6>
 80080ac:	2000      	movs	r0, #0
 80080ae:	e7f3      	b.n	8008098 <__match+0x10>

080080b0 <__hexnan>:
 80080b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b4:	680b      	ldr	r3, [r1, #0]
 80080b6:	6801      	ldr	r1, [r0, #0]
 80080b8:	115e      	asrs	r6, r3, #5
 80080ba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80080be:	f013 031f 	ands.w	r3, r3, #31
 80080c2:	b087      	sub	sp, #28
 80080c4:	bf18      	it	ne
 80080c6:	3604      	addne	r6, #4
 80080c8:	2500      	movs	r5, #0
 80080ca:	1f37      	subs	r7, r6, #4
 80080cc:	4682      	mov	sl, r0
 80080ce:	4690      	mov	r8, r2
 80080d0:	9301      	str	r3, [sp, #4]
 80080d2:	f846 5c04 	str.w	r5, [r6, #-4]
 80080d6:	46b9      	mov	r9, r7
 80080d8:	463c      	mov	r4, r7
 80080da:	9502      	str	r5, [sp, #8]
 80080dc:	46ab      	mov	fp, r5
 80080de:	784a      	ldrb	r2, [r1, #1]
 80080e0:	1c4b      	adds	r3, r1, #1
 80080e2:	9303      	str	r3, [sp, #12]
 80080e4:	b342      	cbz	r2, 8008138 <__hexnan+0x88>
 80080e6:	4610      	mov	r0, r2
 80080e8:	9105      	str	r1, [sp, #20]
 80080ea:	9204      	str	r2, [sp, #16]
 80080ec:	f7ff fd94 	bl	8007c18 <__hexdig_fun>
 80080f0:	2800      	cmp	r0, #0
 80080f2:	d151      	bne.n	8008198 <__hexnan+0xe8>
 80080f4:	9a04      	ldr	r2, [sp, #16]
 80080f6:	9905      	ldr	r1, [sp, #20]
 80080f8:	2a20      	cmp	r2, #32
 80080fa:	d818      	bhi.n	800812e <__hexnan+0x7e>
 80080fc:	9b02      	ldr	r3, [sp, #8]
 80080fe:	459b      	cmp	fp, r3
 8008100:	dd13      	ble.n	800812a <__hexnan+0x7a>
 8008102:	454c      	cmp	r4, r9
 8008104:	d206      	bcs.n	8008114 <__hexnan+0x64>
 8008106:	2d07      	cmp	r5, #7
 8008108:	dc04      	bgt.n	8008114 <__hexnan+0x64>
 800810a:	462a      	mov	r2, r5
 800810c:	4649      	mov	r1, r9
 800810e:	4620      	mov	r0, r4
 8008110:	f7ff ffa8 	bl	8008064 <L_shift>
 8008114:	4544      	cmp	r4, r8
 8008116:	d952      	bls.n	80081be <__hexnan+0x10e>
 8008118:	2300      	movs	r3, #0
 800811a:	f1a4 0904 	sub.w	r9, r4, #4
 800811e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008122:	f8cd b008 	str.w	fp, [sp, #8]
 8008126:	464c      	mov	r4, r9
 8008128:	461d      	mov	r5, r3
 800812a:	9903      	ldr	r1, [sp, #12]
 800812c:	e7d7      	b.n	80080de <__hexnan+0x2e>
 800812e:	2a29      	cmp	r2, #41	@ 0x29
 8008130:	d157      	bne.n	80081e2 <__hexnan+0x132>
 8008132:	3102      	adds	r1, #2
 8008134:	f8ca 1000 	str.w	r1, [sl]
 8008138:	f1bb 0f00 	cmp.w	fp, #0
 800813c:	d051      	beq.n	80081e2 <__hexnan+0x132>
 800813e:	454c      	cmp	r4, r9
 8008140:	d206      	bcs.n	8008150 <__hexnan+0xa0>
 8008142:	2d07      	cmp	r5, #7
 8008144:	dc04      	bgt.n	8008150 <__hexnan+0xa0>
 8008146:	462a      	mov	r2, r5
 8008148:	4649      	mov	r1, r9
 800814a:	4620      	mov	r0, r4
 800814c:	f7ff ff8a 	bl	8008064 <L_shift>
 8008150:	4544      	cmp	r4, r8
 8008152:	d936      	bls.n	80081c2 <__hexnan+0x112>
 8008154:	f1a8 0204 	sub.w	r2, r8, #4
 8008158:	4623      	mov	r3, r4
 800815a:	f853 1b04 	ldr.w	r1, [r3], #4
 800815e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008162:	429f      	cmp	r7, r3
 8008164:	d2f9      	bcs.n	800815a <__hexnan+0xaa>
 8008166:	1b3b      	subs	r3, r7, r4
 8008168:	f023 0303 	bic.w	r3, r3, #3
 800816c:	3304      	adds	r3, #4
 800816e:	3401      	adds	r4, #1
 8008170:	3e03      	subs	r6, #3
 8008172:	42b4      	cmp	r4, r6
 8008174:	bf88      	it	hi
 8008176:	2304      	movhi	r3, #4
 8008178:	4443      	add	r3, r8
 800817a:	2200      	movs	r2, #0
 800817c:	f843 2b04 	str.w	r2, [r3], #4
 8008180:	429f      	cmp	r7, r3
 8008182:	d2fb      	bcs.n	800817c <__hexnan+0xcc>
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	b91b      	cbnz	r3, 8008190 <__hexnan+0xe0>
 8008188:	4547      	cmp	r7, r8
 800818a:	d128      	bne.n	80081de <__hexnan+0x12e>
 800818c:	2301      	movs	r3, #1
 800818e:	603b      	str	r3, [r7, #0]
 8008190:	2005      	movs	r0, #5
 8008192:	b007      	add	sp, #28
 8008194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008198:	3501      	adds	r5, #1
 800819a:	2d08      	cmp	r5, #8
 800819c:	f10b 0b01 	add.w	fp, fp, #1
 80081a0:	dd06      	ble.n	80081b0 <__hexnan+0x100>
 80081a2:	4544      	cmp	r4, r8
 80081a4:	d9c1      	bls.n	800812a <__hexnan+0x7a>
 80081a6:	2300      	movs	r3, #0
 80081a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80081ac:	2501      	movs	r5, #1
 80081ae:	3c04      	subs	r4, #4
 80081b0:	6822      	ldr	r2, [r4, #0]
 80081b2:	f000 000f 	and.w	r0, r0, #15
 80081b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80081ba:	6020      	str	r0, [r4, #0]
 80081bc:	e7b5      	b.n	800812a <__hexnan+0x7a>
 80081be:	2508      	movs	r5, #8
 80081c0:	e7b3      	b.n	800812a <__hexnan+0x7a>
 80081c2:	9b01      	ldr	r3, [sp, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d0dd      	beq.n	8008184 <__hexnan+0xd4>
 80081c8:	f1c3 0320 	rsb	r3, r3, #32
 80081cc:	f04f 32ff 	mov.w	r2, #4294967295
 80081d0:	40da      	lsrs	r2, r3
 80081d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80081d6:	4013      	ands	r3, r2
 80081d8:	f846 3c04 	str.w	r3, [r6, #-4]
 80081dc:	e7d2      	b.n	8008184 <__hexnan+0xd4>
 80081de:	3f04      	subs	r7, #4
 80081e0:	e7d0      	b.n	8008184 <__hexnan+0xd4>
 80081e2:	2004      	movs	r0, #4
 80081e4:	e7d5      	b.n	8008192 <__hexnan+0xe2>
	...

080081e8 <malloc>:
 80081e8:	4b02      	ldr	r3, [pc, #8]	@ (80081f4 <malloc+0xc>)
 80081ea:	4601      	mov	r1, r0
 80081ec:	6818      	ldr	r0, [r3, #0]
 80081ee:	f000 b825 	b.w	800823c <_malloc_r>
 80081f2:	bf00      	nop
 80081f4:	20000184 	.word	0x20000184

080081f8 <sbrk_aligned>:
 80081f8:	b570      	push	{r4, r5, r6, lr}
 80081fa:	4e0f      	ldr	r6, [pc, #60]	@ (8008238 <sbrk_aligned+0x40>)
 80081fc:	460c      	mov	r4, r1
 80081fe:	6831      	ldr	r1, [r6, #0]
 8008200:	4605      	mov	r5, r0
 8008202:	b911      	cbnz	r1, 800820a <sbrk_aligned+0x12>
 8008204:	f001 f808 	bl	8009218 <_sbrk_r>
 8008208:	6030      	str	r0, [r6, #0]
 800820a:	4621      	mov	r1, r4
 800820c:	4628      	mov	r0, r5
 800820e:	f001 f803 	bl	8009218 <_sbrk_r>
 8008212:	1c43      	adds	r3, r0, #1
 8008214:	d103      	bne.n	800821e <sbrk_aligned+0x26>
 8008216:	f04f 34ff 	mov.w	r4, #4294967295
 800821a:	4620      	mov	r0, r4
 800821c:	bd70      	pop	{r4, r5, r6, pc}
 800821e:	1cc4      	adds	r4, r0, #3
 8008220:	f024 0403 	bic.w	r4, r4, #3
 8008224:	42a0      	cmp	r0, r4
 8008226:	d0f8      	beq.n	800821a <sbrk_aligned+0x22>
 8008228:	1a21      	subs	r1, r4, r0
 800822a:	4628      	mov	r0, r5
 800822c:	f000 fff4 	bl	8009218 <_sbrk_r>
 8008230:	3001      	adds	r0, #1
 8008232:	d1f2      	bne.n	800821a <sbrk_aligned+0x22>
 8008234:	e7ef      	b.n	8008216 <sbrk_aligned+0x1e>
 8008236:	bf00      	nop
 8008238:	20000d60 	.word	0x20000d60

0800823c <_malloc_r>:
 800823c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008240:	1ccd      	adds	r5, r1, #3
 8008242:	f025 0503 	bic.w	r5, r5, #3
 8008246:	3508      	adds	r5, #8
 8008248:	2d0c      	cmp	r5, #12
 800824a:	bf38      	it	cc
 800824c:	250c      	movcc	r5, #12
 800824e:	2d00      	cmp	r5, #0
 8008250:	4606      	mov	r6, r0
 8008252:	db01      	blt.n	8008258 <_malloc_r+0x1c>
 8008254:	42a9      	cmp	r1, r5
 8008256:	d904      	bls.n	8008262 <_malloc_r+0x26>
 8008258:	230c      	movs	r3, #12
 800825a:	6033      	str	r3, [r6, #0]
 800825c:	2000      	movs	r0, #0
 800825e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008262:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008338 <_malloc_r+0xfc>
 8008266:	f000 f87b 	bl	8008360 <__malloc_lock>
 800826a:	f8d8 3000 	ldr.w	r3, [r8]
 800826e:	461c      	mov	r4, r3
 8008270:	bb44      	cbnz	r4, 80082c4 <_malloc_r+0x88>
 8008272:	4629      	mov	r1, r5
 8008274:	4630      	mov	r0, r6
 8008276:	f7ff ffbf 	bl	80081f8 <sbrk_aligned>
 800827a:	1c43      	adds	r3, r0, #1
 800827c:	4604      	mov	r4, r0
 800827e:	d158      	bne.n	8008332 <_malloc_r+0xf6>
 8008280:	f8d8 4000 	ldr.w	r4, [r8]
 8008284:	4627      	mov	r7, r4
 8008286:	2f00      	cmp	r7, #0
 8008288:	d143      	bne.n	8008312 <_malloc_r+0xd6>
 800828a:	2c00      	cmp	r4, #0
 800828c:	d04b      	beq.n	8008326 <_malloc_r+0xea>
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	4639      	mov	r1, r7
 8008292:	4630      	mov	r0, r6
 8008294:	eb04 0903 	add.w	r9, r4, r3
 8008298:	f000 ffbe 	bl	8009218 <_sbrk_r>
 800829c:	4581      	cmp	r9, r0
 800829e:	d142      	bne.n	8008326 <_malloc_r+0xea>
 80082a0:	6821      	ldr	r1, [r4, #0]
 80082a2:	1a6d      	subs	r5, r5, r1
 80082a4:	4629      	mov	r1, r5
 80082a6:	4630      	mov	r0, r6
 80082a8:	f7ff ffa6 	bl	80081f8 <sbrk_aligned>
 80082ac:	3001      	adds	r0, #1
 80082ae:	d03a      	beq.n	8008326 <_malloc_r+0xea>
 80082b0:	6823      	ldr	r3, [r4, #0]
 80082b2:	442b      	add	r3, r5
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	f8d8 3000 	ldr.w	r3, [r8]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	bb62      	cbnz	r2, 8008318 <_malloc_r+0xdc>
 80082be:	f8c8 7000 	str.w	r7, [r8]
 80082c2:	e00f      	b.n	80082e4 <_malloc_r+0xa8>
 80082c4:	6822      	ldr	r2, [r4, #0]
 80082c6:	1b52      	subs	r2, r2, r5
 80082c8:	d420      	bmi.n	800830c <_malloc_r+0xd0>
 80082ca:	2a0b      	cmp	r2, #11
 80082cc:	d917      	bls.n	80082fe <_malloc_r+0xc2>
 80082ce:	1961      	adds	r1, r4, r5
 80082d0:	42a3      	cmp	r3, r4
 80082d2:	6025      	str	r5, [r4, #0]
 80082d4:	bf18      	it	ne
 80082d6:	6059      	strne	r1, [r3, #4]
 80082d8:	6863      	ldr	r3, [r4, #4]
 80082da:	bf08      	it	eq
 80082dc:	f8c8 1000 	streq.w	r1, [r8]
 80082e0:	5162      	str	r2, [r4, r5]
 80082e2:	604b      	str	r3, [r1, #4]
 80082e4:	4630      	mov	r0, r6
 80082e6:	f000 f841 	bl	800836c <__malloc_unlock>
 80082ea:	f104 000b 	add.w	r0, r4, #11
 80082ee:	1d23      	adds	r3, r4, #4
 80082f0:	f020 0007 	bic.w	r0, r0, #7
 80082f4:	1ac2      	subs	r2, r0, r3
 80082f6:	bf1c      	itt	ne
 80082f8:	1a1b      	subne	r3, r3, r0
 80082fa:	50a3      	strne	r3, [r4, r2]
 80082fc:	e7af      	b.n	800825e <_malloc_r+0x22>
 80082fe:	6862      	ldr	r2, [r4, #4]
 8008300:	42a3      	cmp	r3, r4
 8008302:	bf0c      	ite	eq
 8008304:	f8c8 2000 	streq.w	r2, [r8]
 8008308:	605a      	strne	r2, [r3, #4]
 800830a:	e7eb      	b.n	80082e4 <_malloc_r+0xa8>
 800830c:	4623      	mov	r3, r4
 800830e:	6864      	ldr	r4, [r4, #4]
 8008310:	e7ae      	b.n	8008270 <_malloc_r+0x34>
 8008312:	463c      	mov	r4, r7
 8008314:	687f      	ldr	r7, [r7, #4]
 8008316:	e7b6      	b.n	8008286 <_malloc_r+0x4a>
 8008318:	461a      	mov	r2, r3
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	42a3      	cmp	r3, r4
 800831e:	d1fb      	bne.n	8008318 <_malloc_r+0xdc>
 8008320:	2300      	movs	r3, #0
 8008322:	6053      	str	r3, [r2, #4]
 8008324:	e7de      	b.n	80082e4 <_malloc_r+0xa8>
 8008326:	230c      	movs	r3, #12
 8008328:	6033      	str	r3, [r6, #0]
 800832a:	4630      	mov	r0, r6
 800832c:	f000 f81e 	bl	800836c <__malloc_unlock>
 8008330:	e794      	b.n	800825c <_malloc_r+0x20>
 8008332:	6005      	str	r5, [r0, #0]
 8008334:	e7d6      	b.n	80082e4 <_malloc_r+0xa8>
 8008336:	bf00      	nop
 8008338:	20000d64 	.word	0x20000d64

0800833c <__ascii_mbtowc>:
 800833c:	b082      	sub	sp, #8
 800833e:	b901      	cbnz	r1, 8008342 <__ascii_mbtowc+0x6>
 8008340:	a901      	add	r1, sp, #4
 8008342:	b142      	cbz	r2, 8008356 <__ascii_mbtowc+0x1a>
 8008344:	b14b      	cbz	r3, 800835a <__ascii_mbtowc+0x1e>
 8008346:	7813      	ldrb	r3, [r2, #0]
 8008348:	600b      	str	r3, [r1, #0]
 800834a:	7812      	ldrb	r2, [r2, #0]
 800834c:	1e10      	subs	r0, r2, #0
 800834e:	bf18      	it	ne
 8008350:	2001      	movne	r0, #1
 8008352:	b002      	add	sp, #8
 8008354:	4770      	bx	lr
 8008356:	4610      	mov	r0, r2
 8008358:	e7fb      	b.n	8008352 <__ascii_mbtowc+0x16>
 800835a:	f06f 0001 	mvn.w	r0, #1
 800835e:	e7f8      	b.n	8008352 <__ascii_mbtowc+0x16>

08008360 <__malloc_lock>:
 8008360:	4801      	ldr	r0, [pc, #4]	@ (8008368 <__malloc_lock+0x8>)
 8008362:	f7fe bd44 	b.w	8006dee <__retarget_lock_acquire_recursive>
 8008366:	bf00      	nop
 8008368:	20000d5c 	.word	0x20000d5c

0800836c <__malloc_unlock>:
 800836c:	4801      	ldr	r0, [pc, #4]	@ (8008374 <__malloc_unlock+0x8>)
 800836e:	f7fe bd3f 	b.w	8006df0 <__retarget_lock_release_recursive>
 8008372:	bf00      	nop
 8008374:	20000d5c 	.word	0x20000d5c

08008378 <_Balloc>:
 8008378:	b570      	push	{r4, r5, r6, lr}
 800837a:	69c6      	ldr	r6, [r0, #28]
 800837c:	4604      	mov	r4, r0
 800837e:	460d      	mov	r5, r1
 8008380:	b976      	cbnz	r6, 80083a0 <_Balloc+0x28>
 8008382:	2010      	movs	r0, #16
 8008384:	f7ff ff30 	bl	80081e8 <malloc>
 8008388:	4602      	mov	r2, r0
 800838a:	61e0      	str	r0, [r4, #28]
 800838c:	b920      	cbnz	r0, 8008398 <_Balloc+0x20>
 800838e:	4b18      	ldr	r3, [pc, #96]	@ (80083f0 <_Balloc+0x78>)
 8008390:	4818      	ldr	r0, [pc, #96]	@ (80083f4 <_Balloc+0x7c>)
 8008392:	216b      	movs	r1, #107	@ 0x6b
 8008394:	f000 ff50 	bl	8009238 <__assert_func>
 8008398:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800839c:	6006      	str	r6, [r0, #0]
 800839e:	60c6      	str	r6, [r0, #12]
 80083a0:	69e6      	ldr	r6, [r4, #28]
 80083a2:	68f3      	ldr	r3, [r6, #12]
 80083a4:	b183      	cbz	r3, 80083c8 <_Balloc+0x50>
 80083a6:	69e3      	ldr	r3, [r4, #28]
 80083a8:	68db      	ldr	r3, [r3, #12]
 80083aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80083ae:	b9b8      	cbnz	r0, 80083e0 <_Balloc+0x68>
 80083b0:	2101      	movs	r1, #1
 80083b2:	fa01 f605 	lsl.w	r6, r1, r5
 80083b6:	1d72      	adds	r2, r6, #5
 80083b8:	0092      	lsls	r2, r2, #2
 80083ba:	4620      	mov	r0, r4
 80083bc:	f000 ff5a 	bl	8009274 <_calloc_r>
 80083c0:	b160      	cbz	r0, 80083dc <_Balloc+0x64>
 80083c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80083c6:	e00e      	b.n	80083e6 <_Balloc+0x6e>
 80083c8:	2221      	movs	r2, #33	@ 0x21
 80083ca:	2104      	movs	r1, #4
 80083cc:	4620      	mov	r0, r4
 80083ce:	f000 ff51 	bl	8009274 <_calloc_r>
 80083d2:	69e3      	ldr	r3, [r4, #28]
 80083d4:	60f0      	str	r0, [r6, #12]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1e4      	bne.n	80083a6 <_Balloc+0x2e>
 80083dc:	2000      	movs	r0, #0
 80083de:	bd70      	pop	{r4, r5, r6, pc}
 80083e0:	6802      	ldr	r2, [r0, #0]
 80083e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80083e6:	2300      	movs	r3, #0
 80083e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083ec:	e7f7      	b.n	80083de <_Balloc+0x66>
 80083ee:	bf00      	nop
 80083f0:	0800e81c 	.word	0x0800e81c
 80083f4:	0800e8fc 	.word	0x0800e8fc

080083f8 <_Bfree>:
 80083f8:	b570      	push	{r4, r5, r6, lr}
 80083fa:	69c6      	ldr	r6, [r0, #28]
 80083fc:	4605      	mov	r5, r0
 80083fe:	460c      	mov	r4, r1
 8008400:	b976      	cbnz	r6, 8008420 <_Bfree+0x28>
 8008402:	2010      	movs	r0, #16
 8008404:	f7ff fef0 	bl	80081e8 <malloc>
 8008408:	4602      	mov	r2, r0
 800840a:	61e8      	str	r0, [r5, #28]
 800840c:	b920      	cbnz	r0, 8008418 <_Bfree+0x20>
 800840e:	4b09      	ldr	r3, [pc, #36]	@ (8008434 <_Bfree+0x3c>)
 8008410:	4809      	ldr	r0, [pc, #36]	@ (8008438 <_Bfree+0x40>)
 8008412:	218f      	movs	r1, #143	@ 0x8f
 8008414:	f000 ff10 	bl	8009238 <__assert_func>
 8008418:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800841c:	6006      	str	r6, [r0, #0]
 800841e:	60c6      	str	r6, [r0, #12]
 8008420:	b13c      	cbz	r4, 8008432 <_Bfree+0x3a>
 8008422:	69eb      	ldr	r3, [r5, #28]
 8008424:	6862      	ldr	r2, [r4, #4]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800842c:	6021      	str	r1, [r4, #0]
 800842e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008432:	bd70      	pop	{r4, r5, r6, pc}
 8008434:	0800e81c 	.word	0x0800e81c
 8008438:	0800e8fc 	.word	0x0800e8fc

0800843c <__multadd>:
 800843c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008440:	690d      	ldr	r5, [r1, #16]
 8008442:	4607      	mov	r7, r0
 8008444:	460c      	mov	r4, r1
 8008446:	461e      	mov	r6, r3
 8008448:	f101 0c14 	add.w	ip, r1, #20
 800844c:	2000      	movs	r0, #0
 800844e:	f8dc 3000 	ldr.w	r3, [ip]
 8008452:	b299      	uxth	r1, r3
 8008454:	fb02 6101 	mla	r1, r2, r1, r6
 8008458:	0c1e      	lsrs	r6, r3, #16
 800845a:	0c0b      	lsrs	r3, r1, #16
 800845c:	fb02 3306 	mla	r3, r2, r6, r3
 8008460:	b289      	uxth	r1, r1
 8008462:	3001      	adds	r0, #1
 8008464:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008468:	4285      	cmp	r5, r0
 800846a:	f84c 1b04 	str.w	r1, [ip], #4
 800846e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008472:	dcec      	bgt.n	800844e <__multadd+0x12>
 8008474:	b30e      	cbz	r6, 80084ba <__multadd+0x7e>
 8008476:	68a3      	ldr	r3, [r4, #8]
 8008478:	42ab      	cmp	r3, r5
 800847a:	dc19      	bgt.n	80084b0 <__multadd+0x74>
 800847c:	6861      	ldr	r1, [r4, #4]
 800847e:	4638      	mov	r0, r7
 8008480:	3101      	adds	r1, #1
 8008482:	f7ff ff79 	bl	8008378 <_Balloc>
 8008486:	4680      	mov	r8, r0
 8008488:	b928      	cbnz	r0, 8008496 <__multadd+0x5a>
 800848a:	4602      	mov	r2, r0
 800848c:	4b0c      	ldr	r3, [pc, #48]	@ (80084c0 <__multadd+0x84>)
 800848e:	480d      	ldr	r0, [pc, #52]	@ (80084c4 <__multadd+0x88>)
 8008490:	21ba      	movs	r1, #186	@ 0xba
 8008492:	f000 fed1 	bl	8009238 <__assert_func>
 8008496:	6922      	ldr	r2, [r4, #16]
 8008498:	3202      	adds	r2, #2
 800849a:	f104 010c 	add.w	r1, r4, #12
 800849e:	0092      	lsls	r2, r2, #2
 80084a0:	300c      	adds	r0, #12
 80084a2:	f7fe fca6 	bl	8006df2 <memcpy>
 80084a6:	4621      	mov	r1, r4
 80084a8:	4638      	mov	r0, r7
 80084aa:	f7ff ffa5 	bl	80083f8 <_Bfree>
 80084ae:	4644      	mov	r4, r8
 80084b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80084b4:	3501      	adds	r5, #1
 80084b6:	615e      	str	r6, [r3, #20]
 80084b8:	6125      	str	r5, [r4, #16]
 80084ba:	4620      	mov	r0, r4
 80084bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084c0:	0800e88b 	.word	0x0800e88b
 80084c4:	0800e8fc 	.word	0x0800e8fc

080084c8 <__s2b>:
 80084c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084cc:	460c      	mov	r4, r1
 80084ce:	4615      	mov	r5, r2
 80084d0:	461f      	mov	r7, r3
 80084d2:	2209      	movs	r2, #9
 80084d4:	3308      	adds	r3, #8
 80084d6:	4606      	mov	r6, r0
 80084d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80084dc:	2100      	movs	r1, #0
 80084de:	2201      	movs	r2, #1
 80084e0:	429a      	cmp	r2, r3
 80084e2:	db09      	blt.n	80084f8 <__s2b+0x30>
 80084e4:	4630      	mov	r0, r6
 80084e6:	f7ff ff47 	bl	8008378 <_Balloc>
 80084ea:	b940      	cbnz	r0, 80084fe <__s2b+0x36>
 80084ec:	4602      	mov	r2, r0
 80084ee:	4b19      	ldr	r3, [pc, #100]	@ (8008554 <__s2b+0x8c>)
 80084f0:	4819      	ldr	r0, [pc, #100]	@ (8008558 <__s2b+0x90>)
 80084f2:	21d3      	movs	r1, #211	@ 0xd3
 80084f4:	f000 fea0 	bl	8009238 <__assert_func>
 80084f8:	0052      	lsls	r2, r2, #1
 80084fa:	3101      	adds	r1, #1
 80084fc:	e7f0      	b.n	80084e0 <__s2b+0x18>
 80084fe:	9b08      	ldr	r3, [sp, #32]
 8008500:	6143      	str	r3, [r0, #20]
 8008502:	2d09      	cmp	r5, #9
 8008504:	f04f 0301 	mov.w	r3, #1
 8008508:	6103      	str	r3, [r0, #16]
 800850a:	dd16      	ble.n	800853a <__s2b+0x72>
 800850c:	f104 0909 	add.w	r9, r4, #9
 8008510:	46c8      	mov	r8, r9
 8008512:	442c      	add	r4, r5
 8008514:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008518:	4601      	mov	r1, r0
 800851a:	3b30      	subs	r3, #48	@ 0x30
 800851c:	220a      	movs	r2, #10
 800851e:	4630      	mov	r0, r6
 8008520:	f7ff ff8c 	bl	800843c <__multadd>
 8008524:	45a0      	cmp	r8, r4
 8008526:	d1f5      	bne.n	8008514 <__s2b+0x4c>
 8008528:	f1a5 0408 	sub.w	r4, r5, #8
 800852c:	444c      	add	r4, r9
 800852e:	1b2d      	subs	r5, r5, r4
 8008530:	1963      	adds	r3, r4, r5
 8008532:	42bb      	cmp	r3, r7
 8008534:	db04      	blt.n	8008540 <__s2b+0x78>
 8008536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800853a:	340a      	adds	r4, #10
 800853c:	2509      	movs	r5, #9
 800853e:	e7f6      	b.n	800852e <__s2b+0x66>
 8008540:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008544:	4601      	mov	r1, r0
 8008546:	3b30      	subs	r3, #48	@ 0x30
 8008548:	220a      	movs	r2, #10
 800854a:	4630      	mov	r0, r6
 800854c:	f7ff ff76 	bl	800843c <__multadd>
 8008550:	e7ee      	b.n	8008530 <__s2b+0x68>
 8008552:	bf00      	nop
 8008554:	0800e88b 	.word	0x0800e88b
 8008558:	0800e8fc 	.word	0x0800e8fc

0800855c <__hi0bits>:
 800855c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008560:	4603      	mov	r3, r0
 8008562:	bf36      	itet	cc
 8008564:	0403      	lslcc	r3, r0, #16
 8008566:	2000      	movcs	r0, #0
 8008568:	2010      	movcc	r0, #16
 800856a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800856e:	bf3c      	itt	cc
 8008570:	021b      	lslcc	r3, r3, #8
 8008572:	3008      	addcc	r0, #8
 8008574:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008578:	bf3c      	itt	cc
 800857a:	011b      	lslcc	r3, r3, #4
 800857c:	3004      	addcc	r0, #4
 800857e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008582:	bf3c      	itt	cc
 8008584:	009b      	lslcc	r3, r3, #2
 8008586:	3002      	addcc	r0, #2
 8008588:	2b00      	cmp	r3, #0
 800858a:	db05      	blt.n	8008598 <__hi0bits+0x3c>
 800858c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008590:	f100 0001 	add.w	r0, r0, #1
 8008594:	bf08      	it	eq
 8008596:	2020      	moveq	r0, #32
 8008598:	4770      	bx	lr

0800859a <__lo0bits>:
 800859a:	6803      	ldr	r3, [r0, #0]
 800859c:	4602      	mov	r2, r0
 800859e:	f013 0007 	ands.w	r0, r3, #7
 80085a2:	d00b      	beq.n	80085bc <__lo0bits+0x22>
 80085a4:	07d9      	lsls	r1, r3, #31
 80085a6:	d421      	bmi.n	80085ec <__lo0bits+0x52>
 80085a8:	0798      	lsls	r0, r3, #30
 80085aa:	bf49      	itett	mi
 80085ac:	085b      	lsrmi	r3, r3, #1
 80085ae:	089b      	lsrpl	r3, r3, #2
 80085b0:	2001      	movmi	r0, #1
 80085b2:	6013      	strmi	r3, [r2, #0]
 80085b4:	bf5c      	itt	pl
 80085b6:	6013      	strpl	r3, [r2, #0]
 80085b8:	2002      	movpl	r0, #2
 80085ba:	4770      	bx	lr
 80085bc:	b299      	uxth	r1, r3
 80085be:	b909      	cbnz	r1, 80085c4 <__lo0bits+0x2a>
 80085c0:	0c1b      	lsrs	r3, r3, #16
 80085c2:	2010      	movs	r0, #16
 80085c4:	b2d9      	uxtb	r1, r3
 80085c6:	b909      	cbnz	r1, 80085cc <__lo0bits+0x32>
 80085c8:	3008      	adds	r0, #8
 80085ca:	0a1b      	lsrs	r3, r3, #8
 80085cc:	0719      	lsls	r1, r3, #28
 80085ce:	bf04      	itt	eq
 80085d0:	091b      	lsreq	r3, r3, #4
 80085d2:	3004      	addeq	r0, #4
 80085d4:	0799      	lsls	r1, r3, #30
 80085d6:	bf04      	itt	eq
 80085d8:	089b      	lsreq	r3, r3, #2
 80085da:	3002      	addeq	r0, #2
 80085dc:	07d9      	lsls	r1, r3, #31
 80085de:	d403      	bmi.n	80085e8 <__lo0bits+0x4e>
 80085e0:	085b      	lsrs	r3, r3, #1
 80085e2:	f100 0001 	add.w	r0, r0, #1
 80085e6:	d003      	beq.n	80085f0 <__lo0bits+0x56>
 80085e8:	6013      	str	r3, [r2, #0]
 80085ea:	4770      	bx	lr
 80085ec:	2000      	movs	r0, #0
 80085ee:	4770      	bx	lr
 80085f0:	2020      	movs	r0, #32
 80085f2:	4770      	bx	lr

080085f4 <__i2b>:
 80085f4:	b510      	push	{r4, lr}
 80085f6:	460c      	mov	r4, r1
 80085f8:	2101      	movs	r1, #1
 80085fa:	f7ff febd 	bl	8008378 <_Balloc>
 80085fe:	4602      	mov	r2, r0
 8008600:	b928      	cbnz	r0, 800860e <__i2b+0x1a>
 8008602:	4b05      	ldr	r3, [pc, #20]	@ (8008618 <__i2b+0x24>)
 8008604:	4805      	ldr	r0, [pc, #20]	@ (800861c <__i2b+0x28>)
 8008606:	f240 1145 	movw	r1, #325	@ 0x145
 800860a:	f000 fe15 	bl	8009238 <__assert_func>
 800860e:	2301      	movs	r3, #1
 8008610:	6144      	str	r4, [r0, #20]
 8008612:	6103      	str	r3, [r0, #16]
 8008614:	bd10      	pop	{r4, pc}
 8008616:	bf00      	nop
 8008618:	0800e88b 	.word	0x0800e88b
 800861c:	0800e8fc 	.word	0x0800e8fc

08008620 <__multiply>:
 8008620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008624:	4617      	mov	r7, r2
 8008626:	690a      	ldr	r2, [r1, #16]
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	429a      	cmp	r2, r3
 800862c:	bfa8      	it	ge
 800862e:	463b      	movge	r3, r7
 8008630:	4689      	mov	r9, r1
 8008632:	bfa4      	itt	ge
 8008634:	460f      	movge	r7, r1
 8008636:	4699      	movge	r9, r3
 8008638:	693d      	ldr	r5, [r7, #16]
 800863a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	6879      	ldr	r1, [r7, #4]
 8008642:	eb05 060a 	add.w	r6, r5, sl
 8008646:	42b3      	cmp	r3, r6
 8008648:	b085      	sub	sp, #20
 800864a:	bfb8      	it	lt
 800864c:	3101      	addlt	r1, #1
 800864e:	f7ff fe93 	bl	8008378 <_Balloc>
 8008652:	b930      	cbnz	r0, 8008662 <__multiply+0x42>
 8008654:	4602      	mov	r2, r0
 8008656:	4b41      	ldr	r3, [pc, #260]	@ (800875c <__multiply+0x13c>)
 8008658:	4841      	ldr	r0, [pc, #260]	@ (8008760 <__multiply+0x140>)
 800865a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800865e:	f000 fdeb 	bl	8009238 <__assert_func>
 8008662:	f100 0414 	add.w	r4, r0, #20
 8008666:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800866a:	4623      	mov	r3, r4
 800866c:	2200      	movs	r2, #0
 800866e:	4573      	cmp	r3, lr
 8008670:	d320      	bcc.n	80086b4 <__multiply+0x94>
 8008672:	f107 0814 	add.w	r8, r7, #20
 8008676:	f109 0114 	add.w	r1, r9, #20
 800867a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800867e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008682:	9302      	str	r3, [sp, #8]
 8008684:	1beb      	subs	r3, r5, r7
 8008686:	3b15      	subs	r3, #21
 8008688:	f023 0303 	bic.w	r3, r3, #3
 800868c:	3304      	adds	r3, #4
 800868e:	3715      	adds	r7, #21
 8008690:	42bd      	cmp	r5, r7
 8008692:	bf38      	it	cc
 8008694:	2304      	movcc	r3, #4
 8008696:	9301      	str	r3, [sp, #4]
 8008698:	9b02      	ldr	r3, [sp, #8]
 800869a:	9103      	str	r1, [sp, #12]
 800869c:	428b      	cmp	r3, r1
 800869e:	d80c      	bhi.n	80086ba <__multiply+0x9a>
 80086a0:	2e00      	cmp	r6, #0
 80086a2:	dd03      	ble.n	80086ac <__multiply+0x8c>
 80086a4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d055      	beq.n	8008758 <__multiply+0x138>
 80086ac:	6106      	str	r6, [r0, #16]
 80086ae:	b005      	add	sp, #20
 80086b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086b4:	f843 2b04 	str.w	r2, [r3], #4
 80086b8:	e7d9      	b.n	800866e <__multiply+0x4e>
 80086ba:	f8b1 a000 	ldrh.w	sl, [r1]
 80086be:	f1ba 0f00 	cmp.w	sl, #0
 80086c2:	d01f      	beq.n	8008704 <__multiply+0xe4>
 80086c4:	46c4      	mov	ip, r8
 80086c6:	46a1      	mov	r9, r4
 80086c8:	2700      	movs	r7, #0
 80086ca:	f85c 2b04 	ldr.w	r2, [ip], #4
 80086ce:	f8d9 3000 	ldr.w	r3, [r9]
 80086d2:	fa1f fb82 	uxth.w	fp, r2
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	fb0a 330b 	mla	r3, sl, fp, r3
 80086dc:	443b      	add	r3, r7
 80086de:	f8d9 7000 	ldr.w	r7, [r9]
 80086e2:	0c12      	lsrs	r2, r2, #16
 80086e4:	0c3f      	lsrs	r7, r7, #16
 80086e6:	fb0a 7202 	mla	r2, sl, r2, r7
 80086ea:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80086f4:	4565      	cmp	r5, ip
 80086f6:	f849 3b04 	str.w	r3, [r9], #4
 80086fa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80086fe:	d8e4      	bhi.n	80086ca <__multiply+0xaa>
 8008700:	9b01      	ldr	r3, [sp, #4]
 8008702:	50e7      	str	r7, [r4, r3]
 8008704:	9b03      	ldr	r3, [sp, #12]
 8008706:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800870a:	3104      	adds	r1, #4
 800870c:	f1b9 0f00 	cmp.w	r9, #0
 8008710:	d020      	beq.n	8008754 <__multiply+0x134>
 8008712:	6823      	ldr	r3, [r4, #0]
 8008714:	4647      	mov	r7, r8
 8008716:	46a4      	mov	ip, r4
 8008718:	f04f 0a00 	mov.w	sl, #0
 800871c:	f8b7 b000 	ldrh.w	fp, [r7]
 8008720:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008724:	fb09 220b 	mla	r2, r9, fp, r2
 8008728:	4452      	add	r2, sl
 800872a:	b29b      	uxth	r3, r3
 800872c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008730:	f84c 3b04 	str.w	r3, [ip], #4
 8008734:	f857 3b04 	ldr.w	r3, [r7], #4
 8008738:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800873c:	f8bc 3000 	ldrh.w	r3, [ip]
 8008740:	fb09 330a 	mla	r3, r9, sl, r3
 8008744:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008748:	42bd      	cmp	r5, r7
 800874a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800874e:	d8e5      	bhi.n	800871c <__multiply+0xfc>
 8008750:	9a01      	ldr	r2, [sp, #4]
 8008752:	50a3      	str	r3, [r4, r2]
 8008754:	3404      	adds	r4, #4
 8008756:	e79f      	b.n	8008698 <__multiply+0x78>
 8008758:	3e01      	subs	r6, #1
 800875a:	e7a1      	b.n	80086a0 <__multiply+0x80>
 800875c:	0800e88b 	.word	0x0800e88b
 8008760:	0800e8fc 	.word	0x0800e8fc

08008764 <__pow5mult>:
 8008764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008768:	4615      	mov	r5, r2
 800876a:	f012 0203 	ands.w	r2, r2, #3
 800876e:	4607      	mov	r7, r0
 8008770:	460e      	mov	r6, r1
 8008772:	d007      	beq.n	8008784 <__pow5mult+0x20>
 8008774:	4c25      	ldr	r4, [pc, #148]	@ (800880c <__pow5mult+0xa8>)
 8008776:	3a01      	subs	r2, #1
 8008778:	2300      	movs	r3, #0
 800877a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800877e:	f7ff fe5d 	bl	800843c <__multadd>
 8008782:	4606      	mov	r6, r0
 8008784:	10ad      	asrs	r5, r5, #2
 8008786:	d03d      	beq.n	8008804 <__pow5mult+0xa0>
 8008788:	69fc      	ldr	r4, [r7, #28]
 800878a:	b97c      	cbnz	r4, 80087ac <__pow5mult+0x48>
 800878c:	2010      	movs	r0, #16
 800878e:	f7ff fd2b 	bl	80081e8 <malloc>
 8008792:	4602      	mov	r2, r0
 8008794:	61f8      	str	r0, [r7, #28]
 8008796:	b928      	cbnz	r0, 80087a4 <__pow5mult+0x40>
 8008798:	4b1d      	ldr	r3, [pc, #116]	@ (8008810 <__pow5mult+0xac>)
 800879a:	481e      	ldr	r0, [pc, #120]	@ (8008814 <__pow5mult+0xb0>)
 800879c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80087a0:	f000 fd4a 	bl	8009238 <__assert_func>
 80087a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80087a8:	6004      	str	r4, [r0, #0]
 80087aa:	60c4      	str	r4, [r0, #12]
 80087ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80087b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80087b4:	b94c      	cbnz	r4, 80087ca <__pow5mult+0x66>
 80087b6:	f240 2171 	movw	r1, #625	@ 0x271
 80087ba:	4638      	mov	r0, r7
 80087bc:	f7ff ff1a 	bl	80085f4 <__i2b>
 80087c0:	2300      	movs	r3, #0
 80087c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80087c6:	4604      	mov	r4, r0
 80087c8:	6003      	str	r3, [r0, #0]
 80087ca:	f04f 0900 	mov.w	r9, #0
 80087ce:	07eb      	lsls	r3, r5, #31
 80087d0:	d50a      	bpl.n	80087e8 <__pow5mult+0x84>
 80087d2:	4631      	mov	r1, r6
 80087d4:	4622      	mov	r2, r4
 80087d6:	4638      	mov	r0, r7
 80087d8:	f7ff ff22 	bl	8008620 <__multiply>
 80087dc:	4631      	mov	r1, r6
 80087de:	4680      	mov	r8, r0
 80087e0:	4638      	mov	r0, r7
 80087e2:	f7ff fe09 	bl	80083f8 <_Bfree>
 80087e6:	4646      	mov	r6, r8
 80087e8:	106d      	asrs	r5, r5, #1
 80087ea:	d00b      	beq.n	8008804 <__pow5mult+0xa0>
 80087ec:	6820      	ldr	r0, [r4, #0]
 80087ee:	b938      	cbnz	r0, 8008800 <__pow5mult+0x9c>
 80087f0:	4622      	mov	r2, r4
 80087f2:	4621      	mov	r1, r4
 80087f4:	4638      	mov	r0, r7
 80087f6:	f7ff ff13 	bl	8008620 <__multiply>
 80087fa:	6020      	str	r0, [r4, #0]
 80087fc:	f8c0 9000 	str.w	r9, [r0]
 8008800:	4604      	mov	r4, r0
 8008802:	e7e4      	b.n	80087ce <__pow5mult+0x6a>
 8008804:	4630      	mov	r0, r6
 8008806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800880a:	bf00      	nop
 800880c:	0800e9f8 	.word	0x0800e9f8
 8008810:	0800e81c 	.word	0x0800e81c
 8008814:	0800e8fc 	.word	0x0800e8fc

08008818 <__lshift>:
 8008818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800881c:	460c      	mov	r4, r1
 800881e:	6849      	ldr	r1, [r1, #4]
 8008820:	6923      	ldr	r3, [r4, #16]
 8008822:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008826:	68a3      	ldr	r3, [r4, #8]
 8008828:	4607      	mov	r7, r0
 800882a:	4691      	mov	r9, r2
 800882c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008830:	f108 0601 	add.w	r6, r8, #1
 8008834:	42b3      	cmp	r3, r6
 8008836:	db0b      	blt.n	8008850 <__lshift+0x38>
 8008838:	4638      	mov	r0, r7
 800883a:	f7ff fd9d 	bl	8008378 <_Balloc>
 800883e:	4605      	mov	r5, r0
 8008840:	b948      	cbnz	r0, 8008856 <__lshift+0x3e>
 8008842:	4602      	mov	r2, r0
 8008844:	4b28      	ldr	r3, [pc, #160]	@ (80088e8 <__lshift+0xd0>)
 8008846:	4829      	ldr	r0, [pc, #164]	@ (80088ec <__lshift+0xd4>)
 8008848:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800884c:	f000 fcf4 	bl	8009238 <__assert_func>
 8008850:	3101      	adds	r1, #1
 8008852:	005b      	lsls	r3, r3, #1
 8008854:	e7ee      	b.n	8008834 <__lshift+0x1c>
 8008856:	2300      	movs	r3, #0
 8008858:	f100 0114 	add.w	r1, r0, #20
 800885c:	f100 0210 	add.w	r2, r0, #16
 8008860:	4618      	mov	r0, r3
 8008862:	4553      	cmp	r3, sl
 8008864:	db33      	blt.n	80088ce <__lshift+0xb6>
 8008866:	6920      	ldr	r0, [r4, #16]
 8008868:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800886c:	f104 0314 	add.w	r3, r4, #20
 8008870:	f019 091f 	ands.w	r9, r9, #31
 8008874:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008878:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800887c:	d02b      	beq.n	80088d6 <__lshift+0xbe>
 800887e:	f1c9 0e20 	rsb	lr, r9, #32
 8008882:	468a      	mov	sl, r1
 8008884:	2200      	movs	r2, #0
 8008886:	6818      	ldr	r0, [r3, #0]
 8008888:	fa00 f009 	lsl.w	r0, r0, r9
 800888c:	4310      	orrs	r0, r2
 800888e:	f84a 0b04 	str.w	r0, [sl], #4
 8008892:	f853 2b04 	ldr.w	r2, [r3], #4
 8008896:	459c      	cmp	ip, r3
 8008898:	fa22 f20e 	lsr.w	r2, r2, lr
 800889c:	d8f3      	bhi.n	8008886 <__lshift+0x6e>
 800889e:	ebac 0304 	sub.w	r3, ip, r4
 80088a2:	3b15      	subs	r3, #21
 80088a4:	f023 0303 	bic.w	r3, r3, #3
 80088a8:	3304      	adds	r3, #4
 80088aa:	f104 0015 	add.w	r0, r4, #21
 80088ae:	4560      	cmp	r0, ip
 80088b0:	bf88      	it	hi
 80088b2:	2304      	movhi	r3, #4
 80088b4:	50ca      	str	r2, [r1, r3]
 80088b6:	b10a      	cbz	r2, 80088bc <__lshift+0xa4>
 80088b8:	f108 0602 	add.w	r6, r8, #2
 80088bc:	3e01      	subs	r6, #1
 80088be:	4638      	mov	r0, r7
 80088c0:	612e      	str	r6, [r5, #16]
 80088c2:	4621      	mov	r1, r4
 80088c4:	f7ff fd98 	bl	80083f8 <_Bfree>
 80088c8:	4628      	mov	r0, r5
 80088ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80088d2:	3301      	adds	r3, #1
 80088d4:	e7c5      	b.n	8008862 <__lshift+0x4a>
 80088d6:	3904      	subs	r1, #4
 80088d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80088dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80088e0:	459c      	cmp	ip, r3
 80088e2:	d8f9      	bhi.n	80088d8 <__lshift+0xc0>
 80088e4:	e7ea      	b.n	80088bc <__lshift+0xa4>
 80088e6:	bf00      	nop
 80088e8:	0800e88b 	.word	0x0800e88b
 80088ec:	0800e8fc 	.word	0x0800e8fc

080088f0 <__mcmp>:
 80088f0:	690a      	ldr	r2, [r1, #16]
 80088f2:	4603      	mov	r3, r0
 80088f4:	6900      	ldr	r0, [r0, #16]
 80088f6:	1a80      	subs	r0, r0, r2
 80088f8:	b530      	push	{r4, r5, lr}
 80088fa:	d10e      	bne.n	800891a <__mcmp+0x2a>
 80088fc:	3314      	adds	r3, #20
 80088fe:	3114      	adds	r1, #20
 8008900:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008904:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008908:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800890c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008910:	4295      	cmp	r5, r2
 8008912:	d003      	beq.n	800891c <__mcmp+0x2c>
 8008914:	d205      	bcs.n	8008922 <__mcmp+0x32>
 8008916:	f04f 30ff 	mov.w	r0, #4294967295
 800891a:	bd30      	pop	{r4, r5, pc}
 800891c:	42a3      	cmp	r3, r4
 800891e:	d3f3      	bcc.n	8008908 <__mcmp+0x18>
 8008920:	e7fb      	b.n	800891a <__mcmp+0x2a>
 8008922:	2001      	movs	r0, #1
 8008924:	e7f9      	b.n	800891a <__mcmp+0x2a>
	...

08008928 <__mdiff>:
 8008928:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800892c:	4689      	mov	r9, r1
 800892e:	4606      	mov	r6, r0
 8008930:	4611      	mov	r1, r2
 8008932:	4648      	mov	r0, r9
 8008934:	4614      	mov	r4, r2
 8008936:	f7ff ffdb 	bl	80088f0 <__mcmp>
 800893a:	1e05      	subs	r5, r0, #0
 800893c:	d112      	bne.n	8008964 <__mdiff+0x3c>
 800893e:	4629      	mov	r1, r5
 8008940:	4630      	mov	r0, r6
 8008942:	f7ff fd19 	bl	8008378 <_Balloc>
 8008946:	4602      	mov	r2, r0
 8008948:	b928      	cbnz	r0, 8008956 <__mdiff+0x2e>
 800894a:	4b3f      	ldr	r3, [pc, #252]	@ (8008a48 <__mdiff+0x120>)
 800894c:	f240 2137 	movw	r1, #567	@ 0x237
 8008950:	483e      	ldr	r0, [pc, #248]	@ (8008a4c <__mdiff+0x124>)
 8008952:	f000 fc71 	bl	8009238 <__assert_func>
 8008956:	2301      	movs	r3, #1
 8008958:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800895c:	4610      	mov	r0, r2
 800895e:	b003      	add	sp, #12
 8008960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008964:	bfbc      	itt	lt
 8008966:	464b      	movlt	r3, r9
 8008968:	46a1      	movlt	r9, r4
 800896a:	4630      	mov	r0, r6
 800896c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008970:	bfba      	itte	lt
 8008972:	461c      	movlt	r4, r3
 8008974:	2501      	movlt	r5, #1
 8008976:	2500      	movge	r5, #0
 8008978:	f7ff fcfe 	bl	8008378 <_Balloc>
 800897c:	4602      	mov	r2, r0
 800897e:	b918      	cbnz	r0, 8008988 <__mdiff+0x60>
 8008980:	4b31      	ldr	r3, [pc, #196]	@ (8008a48 <__mdiff+0x120>)
 8008982:	f240 2145 	movw	r1, #581	@ 0x245
 8008986:	e7e3      	b.n	8008950 <__mdiff+0x28>
 8008988:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800898c:	6926      	ldr	r6, [r4, #16]
 800898e:	60c5      	str	r5, [r0, #12]
 8008990:	f109 0310 	add.w	r3, r9, #16
 8008994:	f109 0514 	add.w	r5, r9, #20
 8008998:	f104 0e14 	add.w	lr, r4, #20
 800899c:	f100 0b14 	add.w	fp, r0, #20
 80089a0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80089a4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80089a8:	9301      	str	r3, [sp, #4]
 80089aa:	46d9      	mov	r9, fp
 80089ac:	f04f 0c00 	mov.w	ip, #0
 80089b0:	9b01      	ldr	r3, [sp, #4]
 80089b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80089b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80089ba:	9301      	str	r3, [sp, #4]
 80089bc:	fa1f f38a 	uxth.w	r3, sl
 80089c0:	4619      	mov	r1, r3
 80089c2:	b283      	uxth	r3, r0
 80089c4:	1acb      	subs	r3, r1, r3
 80089c6:	0c00      	lsrs	r0, r0, #16
 80089c8:	4463      	add	r3, ip
 80089ca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80089ce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80089d2:	b29b      	uxth	r3, r3
 80089d4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80089d8:	4576      	cmp	r6, lr
 80089da:	f849 3b04 	str.w	r3, [r9], #4
 80089de:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80089e2:	d8e5      	bhi.n	80089b0 <__mdiff+0x88>
 80089e4:	1b33      	subs	r3, r6, r4
 80089e6:	3b15      	subs	r3, #21
 80089e8:	f023 0303 	bic.w	r3, r3, #3
 80089ec:	3415      	adds	r4, #21
 80089ee:	3304      	adds	r3, #4
 80089f0:	42a6      	cmp	r6, r4
 80089f2:	bf38      	it	cc
 80089f4:	2304      	movcc	r3, #4
 80089f6:	441d      	add	r5, r3
 80089f8:	445b      	add	r3, fp
 80089fa:	461e      	mov	r6, r3
 80089fc:	462c      	mov	r4, r5
 80089fe:	4544      	cmp	r4, r8
 8008a00:	d30e      	bcc.n	8008a20 <__mdiff+0xf8>
 8008a02:	f108 0103 	add.w	r1, r8, #3
 8008a06:	1b49      	subs	r1, r1, r5
 8008a08:	f021 0103 	bic.w	r1, r1, #3
 8008a0c:	3d03      	subs	r5, #3
 8008a0e:	45a8      	cmp	r8, r5
 8008a10:	bf38      	it	cc
 8008a12:	2100      	movcc	r1, #0
 8008a14:	440b      	add	r3, r1
 8008a16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a1a:	b191      	cbz	r1, 8008a42 <__mdiff+0x11a>
 8008a1c:	6117      	str	r7, [r2, #16]
 8008a1e:	e79d      	b.n	800895c <__mdiff+0x34>
 8008a20:	f854 1b04 	ldr.w	r1, [r4], #4
 8008a24:	46e6      	mov	lr, ip
 8008a26:	0c08      	lsrs	r0, r1, #16
 8008a28:	fa1c fc81 	uxtah	ip, ip, r1
 8008a2c:	4471      	add	r1, lr
 8008a2e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008a32:	b289      	uxth	r1, r1
 8008a34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a38:	f846 1b04 	str.w	r1, [r6], #4
 8008a3c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a40:	e7dd      	b.n	80089fe <__mdiff+0xd6>
 8008a42:	3f01      	subs	r7, #1
 8008a44:	e7e7      	b.n	8008a16 <__mdiff+0xee>
 8008a46:	bf00      	nop
 8008a48:	0800e88b 	.word	0x0800e88b
 8008a4c:	0800e8fc 	.word	0x0800e8fc

08008a50 <__ulp>:
 8008a50:	b082      	sub	sp, #8
 8008a52:	ed8d 0b00 	vstr	d0, [sp]
 8008a56:	9a01      	ldr	r2, [sp, #4]
 8008a58:	4b0f      	ldr	r3, [pc, #60]	@ (8008a98 <__ulp+0x48>)
 8008a5a:	4013      	ands	r3, r2
 8008a5c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	dc08      	bgt.n	8008a76 <__ulp+0x26>
 8008a64:	425b      	negs	r3, r3
 8008a66:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008a6a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008a6e:	da04      	bge.n	8008a7a <__ulp+0x2a>
 8008a70:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008a74:	4113      	asrs	r3, r2
 8008a76:	2200      	movs	r2, #0
 8008a78:	e008      	b.n	8008a8c <__ulp+0x3c>
 8008a7a:	f1a2 0314 	sub.w	r3, r2, #20
 8008a7e:	2b1e      	cmp	r3, #30
 8008a80:	bfda      	itte	le
 8008a82:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008a86:	40da      	lsrle	r2, r3
 8008a88:	2201      	movgt	r2, #1
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	4610      	mov	r0, r2
 8008a90:	ec41 0b10 	vmov	d0, r0, r1
 8008a94:	b002      	add	sp, #8
 8008a96:	4770      	bx	lr
 8008a98:	7ff00000 	.word	0x7ff00000

08008a9c <__b2d>:
 8008a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aa0:	6906      	ldr	r6, [r0, #16]
 8008aa2:	f100 0814 	add.w	r8, r0, #20
 8008aa6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008aaa:	1f37      	subs	r7, r6, #4
 8008aac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008ab0:	4610      	mov	r0, r2
 8008ab2:	f7ff fd53 	bl	800855c <__hi0bits>
 8008ab6:	f1c0 0320 	rsb	r3, r0, #32
 8008aba:	280a      	cmp	r0, #10
 8008abc:	600b      	str	r3, [r1, #0]
 8008abe:	491b      	ldr	r1, [pc, #108]	@ (8008b2c <__b2d+0x90>)
 8008ac0:	dc15      	bgt.n	8008aee <__b2d+0x52>
 8008ac2:	f1c0 0c0b 	rsb	ip, r0, #11
 8008ac6:	fa22 f30c 	lsr.w	r3, r2, ip
 8008aca:	45b8      	cmp	r8, r7
 8008acc:	ea43 0501 	orr.w	r5, r3, r1
 8008ad0:	bf34      	ite	cc
 8008ad2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008ad6:	2300      	movcs	r3, #0
 8008ad8:	3015      	adds	r0, #21
 8008ada:	fa02 f000 	lsl.w	r0, r2, r0
 8008ade:	fa23 f30c 	lsr.w	r3, r3, ip
 8008ae2:	4303      	orrs	r3, r0
 8008ae4:	461c      	mov	r4, r3
 8008ae6:	ec45 4b10 	vmov	d0, r4, r5
 8008aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aee:	45b8      	cmp	r8, r7
 8008af0:	bf3a      	itte	cc
 8008af2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008af6:	f1a6 0708 	subcc.w	r7, r6, #8
 8008afa:	2300      	movcs	r3, #0
 8008afc:	380b      	subs	r0, #11
 8008afe:	d012      	beq.n	8008b26 <__b2d+0x8a>
 8008b00:	f1c0 0120 	rsb	r1, r0, #32
 8008b04:	fa23 f401 	lsr.w	r4, r3, r1
 8008b08:	4082      	lsls	r2, r0
 8008b0a:	4322      	orrs	r2, r4
 8008b0c:	4547      	cmp	r7, r8
 8008b0e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008b12:	bf8c      	ite	hi
 8008b14:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008b18:	2200      	movls	r2, #0
 8008b1a:	4083      	lsls	r3, r0
 8008b1c:	40ca      	lsrs	r2, r1
 8008b1e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008b22:	4313      	orrs	r3, r2
 8008b24:	e7de      	b.n	8008ae4 <__b2d+0x48>
 8008b26:	ea42 0501 	orr.w	r5, r2, r1
 8008b2a:	e7db      	b.n	8008ae4 <__b2d+0x48>
 8008b2c:	3ff00000 	.word	0x3ff00000

08008b30 <__d2b>:
 8008b30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b34:	460f      	mov	r7, r1
 8008b36:	2101      	movs	r1, #1
 8008b38:	ec59 8b10 	vmov	r8, r9, d0
 8008b3c:	4616      	mov	r6, r2
 8008b3e:	f7ff fc1b 	bl	8008378 <_Balloc>
 8008b42:	4604      	mov	r4, r0
 8008b44:	b930      	cbnz	r0, 8008b54 <__d2b+0x24>
 8008b46:	4602      	mov	r2, r0
 8008b48:	4b23      	ldr	r3, [pc, #140]	@ (8008bd8 <__d2b+0xa8>)
 8008b4a:	4824      	ldr	r0, [pc, #144]	@ (8008bdc <__d2b+0xac>)
 8008b4c:	f240 310f 	movw	r1, #783	@ 0x30f
 8008b50:	f000 fb72 	bl	8009238 <__assert_func>
 8008b54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b5c:	b10d      	cbz	r5, 8008b62 <__d2b+0x32>
 8008b5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b62:	9301      	str	r3, [sp, #4]
 8008b64:	f1b8 0300 	subs.w	r3, r8, #0
 8008b68:	d023      	beq.n	8008bb2 <__d2b+0x82>
 8008b6a:	4668      	mov	r0, sp
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	f7ff fd14 	bl	800859a <__lo0bits>
 8008b72:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b76:	b1d0      	cbz	r0, 8008bae <__d2b+0x7e>
 8008b78:	f1c0 0320 	rsb	r3, r0, #32
 8008b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b80:	430b      	orrs	r3, r1
 8008b82:	40c2      	lsrs	r2, r0
 8008b84:	6163      	str	r3, [r4, #20]
 8008b86:	9201      	str	r2, [sp, #4]
 8008b88:	9b01      	ldr	r3, [sp, #4]
 8008b8a:	61a3      	str	r3, [r4, #24]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	bf0c      	ite	eq
 8008b90:	2201      	moveq	r2, #1
 8008b92:	2202      	movne	r2, #2
 8008b94:	6122      	str	r2, [r4, #16]
 8008b96:	b1a5      	cbz	r5, 8008bc2 <__d2b+0x92>
 8008b98:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008b9c:	4405      	add	r5, r0
 8008b9e:	603d      	str	r5, [r7, #0]
 8008ba0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008ba4:	6030      	str	r0, [r6, #0]
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	b003      	add	sp, #12
 8008baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bae:	6161      	str	r1, [r4, #20]
 8008bb0:	e7ea      	b.n	8008b88 <__d2b+0x58>
 8008bb2:	a801      	add	r0, sp, #4
 8008bb4:	f7ff fcf1 	bl	800859a <__lo0bits>
 8008bb8:	9b01      	ldr	r3, [sp, #4]
 8008bba:	6163      	str	r3, [r4, #20]
 8008bbc:	3020      	adds	r0, #32
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	e7e8      	b.n	8008b94 <__d2b+0x64>
 8008bc2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008bc6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008bca:	6038      	str	r0, [r7, #0]
 8008bcc:	6918      	ldr	r0, [r3, #16]
 8008bce:	f7ff fcc5 	bl	800855c <__hi0bits>
 8008bd2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008bd6:	e7e5      	b.n	8008ba4 <__d2b+0x74>
 8008bd8:	0800e88b 	.word	0x0800e88b
 8008bdc:	0800e8fc 	.word	0x0800e8fc

08008be0 <__ratio>:
 8008be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be4:	b085      	sub	sp, #20
 8008be6:	e9cd 1000 	strd	r1, r0, [sp]
 8008bea:	a902      	add	r1, sp, #8
 8008bec:	f7ff ff56 	bl	8008a9c <__b2d>
 8008bf0:	9800      	ldr	r0, [sp, #0]
 8008bf2:	a903      	add	r1, sp, #12
 8008bf4:	ec55 4b10 	vmov	r4, r5, d0
 8008bf8:	f7ff ff50 	bl	8008a9c <__b2d>
 8008bfc:	9b01      	ldr	r3, [sp, #4]
 8008bfe:	6919      	ldr	r1, [r3, #16]
 8008c00:	9b00      	ldr	r3, [sp, #0]
 8008c02:	691b      	ldr	r3, [r3, #16]
 8008c04:	1ac9      	subs	r1, r1, r3
 8008c06:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008c0a:	1a9b      	subs	r3, r3, r2
 8008c0c:	ec5b ab10 	vmov	sl, fp, d0
 8008c10:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	bfce      	itee	gt
 8008c18:	462a      	movgt	r2, r5
 8008c1a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008c1e:	465a      	movle	r2, fp
 8008c20:	462f      	mov	r7, r5
 8008c22:	46d9      	mov	r9, fp
 8008c24:	bfcc      	ite	gt
 8008c26:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008c2a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008c2e:	464b      	mov	r3, r9
 8008c30:	4652      	mov	r2, sl
 8008c32:	4620      	mov	r0, r4
 8008c34:	4639      	mov	r1, r7
 8008c36:	f7f7 fe11 	bl	800085c <__aeabi_ddiv>
 8008c3a:	ec41 0b10 	vmov	d0, r0, r1
 8008c3e:	b005      	add	sp, #20
 8008c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c44 <__copybits>:
 8008c44:	3901      	subs	r1, #1
 8008c46:	b570      	push	{r4, r5, r6, lr}
 8008c48:	1149      	asrs	r1, r1, #5
 8008c4a:	6914      	ldr	r4, [r2, #16]
 8008c4c:	3101      	adds	r1, #1
 8008c4e:	f102 0314 	add.w	r3, r2, #20
 8008c52:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c56:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c5a:	1f05      	subs	r5, r0, #4
 8008c5c:	42a3      	cmp	r3, r4
 8008c5e:	d30c      	bcc.n	8008c7a <__copybits+0x36>
 8008c60:	1aa3      	subs	r3, r4, r2
 8008c62:	3b11      	subs	r3, #17
 8008c64:	f023 0303 	bic.w	r3, r3, #3
 8008c68:	3211      	adds	r2, #17
 8008c6a:	42a2      	cmp	r2, r4
 8008c6c:	bf88      	it	hi
 8008c6e:	2300      	movhi	r3, #0
 8008c70:	4418      	add	r0, r3
 8008c72:	2300      	movs	r3, #0
 8008c74:	4288      	cmp	r0, r1
 8008c76:	d305      	bcc.n	8008c84 <__copybits+0x40>
 8008c78:	bd70      	pop	{r4, r5, r6, pc}
 8008c7a:	f853 6b04 	ldr.w	r6, [r3], #4
 8008c7e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008c82:	e7eb      	b.n	8008c5c <__copybits+0x18>
 8008c84:	f840 3b04 	str.w	r3, [r0], #4
 8008c88:	e7f4      	b.n	8008c74 <__copybits+0x30>

08008c8a <__any_on>:
 8008c8a:	f100 0214 	add.w	r2, r0, #20
 8008c8e:	6900      	ldr	r0, [r0, #16]
 8008c90:	114b      	asrs	r3, r1, #5
 8008c92:	4298      	cmp	r0, r3
 8008c94:	b510      	push	{r4, lr}
 8008c96:	db11      	blt.n	8008cbc <__any_on+0x32>
 8008c98:	dd0a      	ble.n	8008cb0 <__any_on+0x26>
 8008c9a:	f011 011f 	ands.w	r1, r1, #31
 8008c9e:	d007      	beq.n	8008cb0 <__any_on+0x26>
 8008ca0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008ca4:	fa24 f001 	lsr.w	r0, r4, r1
 8008ca8:	fa00 f101 	lsl.w	r1, r0, r1
 8008cac:	428c      	cmp	r4, r1
 8008cae:	d10b      	bne.n	8008cc8 <__any_on+0x3e>
 8008cb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d803      	bhi.n	8008cc0 <__any_on+0x36>
 8008cb8:	2000      	movs	r0, #0
 8008cba:	bd10      	pop	{r4, pc}
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	e7f7      	b.n	8008cb0 <__any_on+0x26>
 8008cc0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008cc4:	2900      	cmp	r1, #0
 8008cc6:	d0f5      	beq.n	8008cb4 <__any_on+0x2a>
 8008cc8:	2001      	movs	r0, #1
 8008cca:	e7f6      	b.n	8008cba <__any_on+0x30>

08008ccc <_strtol_l.isra.0>:
 8008ccc:	2b24      	cmp	r3, #36	@ 0x24
 8008cce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cd2:	4686      	mov	lr, r0
 8008cd4:	4690      	mov	r8, r2
 8008cd6:	d801      	bhi.n	8008cdc <_strtol_l.isra.0+0x10>
 8008cd8:	2b01      	cmp	r3, #1
 8008cda:	d106      	bne.n	8008cea <_strtol_l.isra.0+0x1e>
 8008cdc:	f7fe f85c 	bl	8006d98 <__errno>
 8008ce0:	2316      	movs	r3, #22
 8008ce2:	6003      	str	r3, [r0, #0]
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cea:	4834      	ldr	r0, [pc, #208]	@ (8008dbc <_strtol_l.isra.0+0xf0>)
 8008cec:	460d      	mov	r5, r1
 8008cee:	462a      	mov	r2, r5
 8008cf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008cf4:	5d06      	ldrb	r6, [r0, r4]
 8008cf6:	f016 0608 	ands.w	r6, r6, #8
 8008cfa:	d1f8      	bne.n	8008cee <_strtol_l.isra.0+0x22>
 8008cfc:	2c2d      	cmp	r4, #45	@ 0x2d
 8008cfe:	d110      	bne.n	8008d22 <_strtol_l.isra.0+0x56>
 8008d00:	782c      	ldrb	r4, [r5, #0]
 8008d02:	2601      	movs	r6, #1
 8008d04:	1c95      	adds	r5, r2, #2
 8008d06:	f033 0210 	bics.w	r2, r3, #16
 8008d0a:	d115      	bne.n	8008d38 <_strtol_l.isra.0+0x6c>
 8008d0c:	2c30      	cmp	r4, #48	@ 0x30
 8008d0e:	d10d      	bne.n	8008d2c <_strtol_l.isra.0+0x60>
 8008d10:	782a      	ldrb	r2, [r5, #0]
 8008d12:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d16:	2a58      	cmp	r2, #88	@ 0x58
 8008d18:	d108      	bne.n	8008d2c <_strtol_l.isra.0+0x60>
 8008d1a:	786c      	ldrb	r4, [r5, #1]
 8008d1c:	3502      	adds	r5, #2
 8008d1e:	2310      	movs	r3, #16
 8008d20:	e00a      	b.n	8008d38 <_strtol_l.isra.0+0x6c>
 8008d22:	2c2b      	cmp	r4, #43	@ 0x2b
 8008d24:	bf04      	itt	eq
 8008d26:	782c      	ldrbeq	r4, [r5, #0]
 8008d28:	1c95      	addeq	r5, r2, #2
 8008d2a:	e7ec      	b.n	8008d06 <_strtol_l.isra.0+0x3a>
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d1f6      	bne.n	8008d1e <_strtol_l.isra.0+0x52>
 8008d30:	2c30      	cmp	r4, #48	@ 0x30
 8008d32:	bf14      	ite	ne
 8008d34:	230a      	movne	r3, #10
 8008d36:	2308      	moveq	r3, #8
 8008d38:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008d3c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008d40:	2200      	movs	r2, #0
 8008d42:	fbbc f9f3 	udiv	r9, ip, r3
 8008d46:	4610      	mov	r0, r2
 8008d48:	fb03 ca19 	mls	sl, r3, r9, ip
 8008d4c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008d50:	2f09      	cmp	r7, #9
 8008d52:	d80f      	bhi.n	8008d74 <_strtol_l.isra.0+0xa8>
 8008d54:	463c      	mov	r4, r7
 8008d56:	42a3      	cmp	r3, r4
 8008d58:	dd1b      	ble.n	8008d92 <_strtol_l.isra.0+0xc6>
 8008d5a:	1c57      	adds	r7, r2, #1
 8008d5c:	d007      	beq.n	8008d6e <_strtol_l.isra.0+0xa2>
 8008d5e:	4581      	cmp	r9, r0
 8008d60:	d314      	bcc.n	8008d8c <_strtol_l.isra.0+0xc0>
 8008d62:	d101      	bne.n	8008d68 <_strtol_l.isra.0+0x9c>
 8008d64:	45a2      	cmp	sl, r4
 8008d66:	db11      	blt.n	8008d8c <_strtol_l.isra.0+0xc0>
 8008d68:	fb00 4003 	mla	r0, r0, r3, r4
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008d72:	e7eb      	b.n	8008d4c <_strtol_l.isra.0+0x80>
 8008d74:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008d78:	2f19      	cmp	r7, #25
 8008d7a:	d801      	bhi.n	8008d80 <_strtol_l.isra.0+0xb4>
 8008d7c:	3c37      	subs	r4, #55	@ 0x37
 8008d7e:	e7ea      	b.n	8008d56 <_strtol_l.isra.0+0x8a>
 8008d80:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008d84:	2f19      	cmp	r7, #25
 8008d86:	d804      	bhi.n	8008d92 <_strtol_l.isra.0+0xc6>
 8008d88:	3c57      	subs	r4, #87	@ 0x57
 8008d8a:	e7e4      	b.n	8008d56 <_strtol_l.isra.0+0x8a>
 8008d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d90:	e7ed      	b.n	8008d6e <_strtol_l.isra.0+0xa2>
 8008d92:	1c53      	adds	r3, r2, #1
 8008d94:	d108      	bne.n	8008da8 <_strtol_l.isra.0+0xdc>
 8008d96:	2322      	movs	r3, #34	@ 0x22
 8008d98:	f8ce 3000 	str.w	r3, [lr]
 8008d9c:	4660      	mov	r0, ip
 8008d9e:	f1b8 0f00 	cmp.w	r8, #0
 8008da2:	d0a0      	beq.n	8008ce6 <_strtol_l.isra.0+0x1a>
 8008da4:	1e69      	subs	r1, r5, #1
 8008da6:	e006      	b.n	8008db6 <_strtol_l.isra.0+0xea>
 8008da8:	b106      	cbz	r6, 8008dac <_strtol_l.isra.0+0xe0>
 8008daa:	4240      	negs	r0, r0
 8008dac:	f1b8 0f00 	cmp.w	r8, #0
 8008db0:	d099      	beq.n	8008ce6 <_strtol_l.isra.0+0x1a>
 8008db2:	2a00      	cmp	r2, #0
 8008db4:	d1f6      	bne.n	8008da4 <_strtol_l.isra.0+0xd8>
 8008db6:	f8c8 1000 	str.w	r1, [r8]
 8008dba:	e794      	b.n	8008ce6 <_strtol_l.isra.0+0x1a>
 8008dbc:	0800eaf9 	.word	0x0800eaf9

08008dc0 <_strtol_r>:
 8008dc0:	f7ff bf84 	b.w	8008ccc <_strtol_l.isra.0>

08008dc4 <__ascii_wctomb>:
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	4608      	mov	r0, r1
 8008dc8:	b141      	cbz	r1, 8008ddc <__ascii_wctomb+0x18>
 8008dca:	2aff      	cmp	r2, #255	@ 0xff
 8008dcc:	d904      	bls.n	8008dd8 <__ascii_wctomb+0x14>
 8008dce:	228a      	movs	r2, #138	@ 0x8a
 8008dd0:	601a      	str	r2, [r3, #0]
 8008dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd6:	4770      	bx	lr
 8008dd8:	700a      	strb	r2, [r1, #0]
 8008dda:	2001      	movs	r0, #1
 8008ddc:	4770      	bx	lr

08008dde <__ssputs_r>:
 8008dde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008de2:	688e      	ldr	r6, [r1, #8]
 8008de4:	461f      	mov	r7, r3
 8008de6:	42be      	cmp	r6, r7
 8008de8:	680b      	ldr	r3, [r1, #0]
 8008dea:	4682      	mov	sl, r0
 8008dec:	460c      	mov	r4, r1
 8008dee:	4690      	mov	r8, r2
 8008df0:	d82d      	bhi.n	8008e4e <__ssputs_r+0x70>
 8008df2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008df6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008dfa:	d026      	beq.n	8008e4a <__ssputs_r+0x6c>
 8008dfc:	6965      	ldr	r5, [r4, #20]
 8008dfe:	6909      	ldr	r1, [r1, #16]
 8008e00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e04:	eba3 0901 	sub.w	r9, r3, r1
 8008e08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e0c:	1c7b      	adds	r3, r7, #1
 8008e0e:	444b      	add	r3, r9
 8008e10:	106d      	asrs	r5, r5, #1
 8008e12:	429d      	cmp	r5, r3
 8008e14:	bf38      	it	cc
 8008e16:	461d      	movcc	r5, r3
 8008e18:	0553      	lsls	r3, r2, #21
 8008e1a:	d527      	bpl.n	8008e6c <__ssputs_r+0x8e>
 8008e1c:	4629      	mov	r1, r5
 8008e1e:	f7ff fa0d 	bl	800823c <_malloc_r>
 8008e22:	4606      	mov	r6, r0
 8008e24:	b360      	cbz	r0, 8008e80 <__ssputs_r+0xa2>
 8008e26:	6921      	ldr	r1, [r4, #16]
 8008e28:	464a      	mov	r2, r9
 8008e2a:	f7fd ffe2 	bl	8006df2 <memcpy>
 8008e2e:	89a3      	ldrh	r3, [r4, #12]
 8008e30:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e38:	81a3      	strh	r3, [r4, #12]
 8008e3a:	6126      	str	r6, [r4, #16]
 8008e3c:	6165      	str	r5, [r4, #20]
 8008e3e:	444e      	add	r6, r9
 8008e40:	eba5 0509 	sub.w	r5, r5, r9
 8008e44:	6026      	str	r6, [r4, #0]
 8008e46:	60a5      	str	r5, [r4, #8]
 8008e48:	463e      	mov	r6, r7
 8008e4a:	42be      	cmp	r6, r7
 8008e4c:	d900      	bls.n	8008e50 <__ssputs_r+0x72>
 8008e4e:	463e      	mov	r6, r7
 8008e50:	6820      	ldr	r0, [r4, #0]
 8008e52:	4632      	mov	r2, r6
 8008e54:	4641      	mov	r1, r8
 8008e56:	f000 f9c5 	bl	80091e4 <memmove>
 8008e5a:	68a3      	ldr	r3, [r4, #8]
 8008e5c:	1b9b      	subs	r3, r3, r6
 8008e5e:	60a3      	str	r3, [r4, #8]
 8008e60:	6823      	ldr	r3, [r4, #0]
 8008e62:	4433      	add	r3, r6
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	2000      	movs	r0, #0
 8008e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e6c:	462a      	mov	r2, r5
 8008e6e:	f000 fa15 	bl	800929c <_realloc_r>
 8008e72:	4606      	mov	r6, r0
 8008e74:	2800      	cmp	r0, #0
 8008e76:	d1e0      	bne.n	8008e3a <__ssputs_r+0x5c>
 8008e78:	6921      	ldr	r1, [r4, #16]
 8008e7a:	4650      	mov	r0, sl
 8008e7c:	f7fe fe30 	bl	8007ae0 <_free_r>
 8008e80:	230c      	movs	r3, #12
 8008e82:	f8ca 3000 	str.w	r3, [sl]
 8008e86:	89a3      	ldrh	r3, [r4, #12]
 8008e88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e8c:	81a3      	strh	r3, [r4, #12]
 8008e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e92:	e7e9      	b.n	8008e68 <__ssputs_r+0x8a>

08008e94 <_svfiprintf_r>:
 8008e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e98:	4698      	mov	r8, r3
 8008e9a:	898b      	ldrh	r3, [r1, #12]
 8008e9c:	061b      	lsls	r3, r3, #24
 8008e9e:	b09d      	sub	sp, #116	@ 0x74
 8008ea0:	4607      	mov	r7, r0
 8008ea2:	460d      	mov	r5, r1
 8008ea4:	4614      	mov	r4, r2
 8008ea6:	d510      	bpl.n	8008eca <_svfiprintf_r+0x36>
 8008ea8:	690b      	ldr	r3, [r1, #16]
 8008eaa:	b973      	cbnz	r3, 8008eca <_svfiprintf_r+0x36>
 8008eac:	2140      	movs	r1, #64	@ 0x40
 8008eae:	f7ff f9c5 	bl	800823c <_malloc_r>
 8008eb2:	6028      	str	r0, [r5, #0]
 8008eb4:	6128      	str	r0, [r5, #16]
 8008eb6:	b930      	cbnz	r0, 8008ec6 <_svfiprintf_r+0x32>
 8008eb8:	230c      	movs	r3, #12
 8008eba:	603b      	str	r3, [r7, #0]
 8008ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ec0:	b01d      	add	sp, #116	@ 0x74
 8008ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec6:	2340      	movs	r3, #64	@ 0x40
 8008ec8:	616b      	str	r3, [r5, #20]
 8008eca:	2300      	movs	r3, #0
 8008ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ece:	2320      	movs	r3, #32
 8008ed0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ed4:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ed8:	2330      	movs	r3, #48	@ 0x30
 8008eda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009078 <_svfiprintf_r+0x1e4>
 8008ede:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ee2:	f04f 0901 	mov.w	r9, #1
 8008ee6:	4623      	mov	r3, r4
 8008ee8:	469a      	mov	sl, r3
 8008eea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eee:	b10a      	cbz	r2, 8008ef4 <_svfiprintf_r+0x60>
 8008ef0:	2a25      	cmp	r2, #37	@ 0x25
 8008ef2:	d1f9      	bne.n	8008ee8 <_svfiprintf_r+0x54>
 8008ef4:	ebba 0b04 	subs.w	fp, sl, r4
 8008ef8:	d00b      	beq.n	8008f12 <_svfiprintf_r+0x7e>
 8008efa:	465b      	mov	r3, fp
 8008efc:	4622      	mov	r2, r4
 8008efe:	4629      	mov	r1, r5
 8008f00:	4638      	mov	r0, r7
 8008f02:	f7ff ff6c 	bl	8008dde <__ssputs_r>
 8008f06:	3001      	adds	r0, #1
 8008f08:	f000 80a7 	beq.w	800905a <_svfiprintf_r+0x1c6>
 8008f0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f0e:	445a      	add	r2, fp
 8008f10:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f12:	f89a 3000 	ldrb.w	r3, [sl]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	f000 809f 	beq.w	800905a <_svfiprintf_r+0x1c6>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008f22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f26:	f10a 0a01 	add.w	sl, sl, #1
 8008f2a:	9304      	str	r3, [sp, #16]
 8008f2c:	9307      	str	r3, [sp, #28]
 8008f2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f32:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f34:	4654      	mov	r4, sl
 8008f36:	2205      	movs	r2, #5
 8008f38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f3c:	484e      	ldr	r0, [pc, #312]	@ (8009078 <_svfiprintf_r+0x1e4>)
 8008f3e:	f7f7 f94f 	bl	80001e0 <memchr>
 8008f42:	9a04      	ldr	r2, [sp, #16]
 8008f44:	b9d8      	cbnz	r0, 8008f7e <_svfiprintf_r+0xea>
 8008f46:	06d0      	lsls	r0, r2, #27
 8008f48:	bf44      	itt	mi
 8008f4a:	2320      	movmi	r3, #32
 8008f4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f50:	0711      	lsls	r1, r2, #28
 8008f52:	bf44      	itt	mi
 8008f54:	232b      	movmi	r3, #43	@ 0x2b
 8008f56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f60:	d015      	beq.n	8008f8e <_svfiprintf_r+0xfa>
 8008f62:	9a07      	ldr	r2, [sp, #28]
 8008f64:	4654      	mov	r4, sl
 8008f66:	2000      	movs	r0, #0
 8008f68:	f04f 0c0a 	mov.w	ip, #10
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f72:	3b30      	subs	r3, #48	@ 0x30
 8008f74:	2b09      	cmp	r3, #9
 8008f76:	d94b      	bls.n	8009010 <_svfiprintf_r+0x17c>
 8008f78:	b1b0      	cbz	r0, 8008fa8 <_svfiprintf_r+0x114>
 8008f7a:	9207      	str	r2, [sp, #28]
 8008f7c:	e014      	b.n	8008fa8 <_svfiprintf_r+0x114>
 8008f7e:	eba0 0308 	sub.w	r3, r0, r8
 8008f82:	fa09 f303 	lsl.w	r3, r9, r3
 8008f86:	4313      	orrs	r3, r2
 8008f88:	9304      	str	r3, [sp, #16]
 8008f8a:	46a2      	mov	sl, r4
 8008f8c:	e7d2      	b.n	8008f34 <_svfiprintf_r+0xa0>
 8008f8e:	9b03      	ldr	r3, [sp, #12]
 8008f90:	1d19      	adds	r1, r3, #4
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	9103      	str	r1, [sp, #12]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	bfbb      	ittet	lt
 8008f9a:	425b      	neglt	r3, r3
 8008f9c:	f042 0202 	orrlt.w	r2, r2, #2
 8008fa0:	9307      	strge	r3, [sp, #28]
 8008fa2:	9307      	strlt	r3, [sp, #28]
 8008fa4:	bfb8      	it	lt
 8008fa6:	9204      	strlt	r2, [sp, #16]
 8008fa8:	7823      	ldrb	r3, [r4, #0]
 8008faa:	2b2e      	cmp	r3, #46	@ 0x2e
 8008fac:	d10a      	bne.n	8008fc4 <_svfiprintf_r+0x130>
 8008fae:	7863      	ldrb	r3, [r4, #1]
 8008fb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fb2:	d132      	bne.n	800901a <_svfiprintf_r+0x186>
 8008fb4:	9b03      	ldr	r3, [sp, #12]
 8008fb6:	1d1a      	adds	r2, r3, #4
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	9203      	str	r2, [sp, #12]
 8008fbc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fc0:	3402      	adds	r4, #2
 8008fc2:	9305      	str	r3, [sp, #20]
 8008fc4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009088 <_svfiprintf_r+0x1f4>
 8008fc8:	7821      	ldrb	r1, [r4, #0]
 8008fca:	2203      	movs	r2, #3
 8008fcc:	4650      	mov	r0, sl
 8008fce:	f7f7 f907 	bl	80001e0 <memchr>
 8008fd2:	b138      	cbz	r0, 8008fe4 <_svfiprintf_r+0x150>
 8008fd4:	9b04      	ldr	r3, [sp, #16]
 8008fd6:	eba0 000a 	sub.w	r0, r0, sl
 8008fda:	2240      	movs	r2, #64	@ 0x40
 8008fdc:	4082      	lsls	r2, r0
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	3401      	adds	r4, #1
 8008fe2:	9304      	str	r3, [sp, #16]
 8008fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fe8:	4824      	ldr	r0, [pc, #144]	@ (800907c <_svfiprintf_r+0x1e8>)
 8008fea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fee:	2206      	movs	r2, #6
 8008ff0:	f7f7 f8f6 	bl	80001e0 <memchr>
 8008ff4:	2800      	cmp	r0, #0
 8008ff6:	d036      	beq.n	8009066 <_svfiprintf_r+0x1d2>
 8008ff8:	4b21      	ldr	r3, [pc, #132]	@ (8009080 <_svfiprintf_r+0x1ec>)
 8008ffa:	bb1b      	cbnz	r3, 8009044 <_svfiprintf_r+0x1b0>
 8008ffc:	9b03      	ldr	r3, [sp, #12]
 8008ffe:	3307      	adds	r3, #7
 8009000:	f023 0307 	bic.w	r3, r3, #7
 8009004:	3308      	adds	r3, #8
 8009006:	9303      	str	r3, [sp, #12]
 8009008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800900a:	4433      	add	r3, r6
 800900c:	9309      	str	r3, [sp, #36]	@ 0x24
 800900e:	e76a      	b.n	8008ee6 <_svfiprintf_r+0x52>
 8009010:	fb0c 3202 	mla	r2, ip, r2, r3
 8009014:	460c      	mov	r4, r1
 8009016:	2001      	movs	r0, #1
 8009018:	e7a8      	b.n	8008f6c <_svfiprintf_r+0xd8>
 800901a:	2300      	movs	r3, #0
 800901c:	3401      	adds	r4, #1
 800901e:	9305      	str	r3, [sp, #20]
 8009020:	4619      	mov	r1, r3
 8009022:	f04f 0c0a 	mov.w	ip, #10
 8009026:	4620      	mov	r0, r4
 8009028:	f810 2b01 	ldrb.w	r2, [r0], #1
 800902c:	3a30      	subs	r2, #48	@ 0x30
 800902e:	2a09      	cmp	r2, #9
 8009030:	d903      	bls.n	800903a <_svfiprintf_r+0x1a6>
 8009032:	2b00      	cmp	r3, #0
 8009034:	d0c6      	beq.n	8008fc4 <_svfiprintf_r+0x130>
 8009036:	9105      	str	r1, [sp, #20]
 8009038:	e7c4      	b.n	8008fc4 <_svfiprintf_r+0x130>
 800903a:	fb0c 2101 	mla	r1, ip, r1, r2
 800903e:	4604      	mov	r4, r0
 8009040:	2301      	movs	r3, #1
 8009042:	e7f0      	b.n	8009026 <_svfiprintf_r+0x192>
 8009044:	ab03      	add	r3, sp, #12
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	462a      	mov	r2, r5
 800904a:	4b0e      	ldr	r3, [pc, #56]	@ (8009084 <_svfiprintf_r+0x1f0>)
 800904c:	a904      	add	r1, sp, #16
 800904e:	4638      	mov	r0, r7
 8009050:	f7fc ff28 	bl	8005ea4 <_printf_float>
 8009054:	1c42      	adds	r2, r0, #1
 8009056:	4606      	mov	r6, r0
 8009058:	d1d6      	bne.n	8009008 <_svfiprintf_r+0x174>
 800905a:	89ab      	ldrh	r3, [r5, #12]
 800905c:	065b      	lsls	r3, r3, #25
 800905e:	f53f af2d 	bmi.w	8008ebc <_svfiprintf_r+0x28>
 8009062:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009064:	e72c      	b.n	8008ec0 <_svfiprintf_r+0x2c>
 8009066:	ab03      	add	r3, sp, #12
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	462a      	mov	r2, r5
 800906c:	4b05      	ldr	r3, [pc, #20]	@ (8009084 <_svfiprintf_r+0x1f0>)
 800906e:	a904      	add	r1, sp, #16
 8009070:	4638      	mov	r0, r7
 8009072:	f7fd f9af 	bl	80063d4 <_printf_i>
 8009076:	e7ed      	b.n	8009054 <_svfiprintf_r+0x1c0>
 8009078:	0800e955 	.word	0x0800e955
 800907c:	0800e95f 	.word	0x0800e95f
 8009080:	08005ea5 	.word	0x08005ea5
 8009084:	08008ddf 	.word	0x08008ddf
 8009088:	0800e95b 	.word	0x0800e95b

0800908c <__sflush_r>:
 800908c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009094:	0716      	lsls	r6, r2, #28
 8009096:	4605      	mov	r5, r0
 8009098:	460c      	mov	r4, r1
 800909a:	d454      	bmi.n	8009146 <__sflush_r+0xba>
 800909c:	684b      	ldr	r3, [r1, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	dc02      	bgt.n	80090a8 <__sflush_r+0x1c>
 80090a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	dd48      	ble.n	800913a <__sflush_r+0xae>
 80090a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090aa:	2e00      	cmp	r6, #0
 80090ac:	d045      	beq.n	800913a <__sflush_r+0xae>
 80090ae:	2300      	movs	r3, #0
 80090b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80090b4:	682f      	ldr	r7, [r5, #0]
 80090b6:	6a21      	ldr	r1, [r4, #32]
 80090b8:	602b      	str	r3, [r5, #0]
 80090ba:	d030      	beq.n	800911e <__sflush_r+0x92>
 80090bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090be:	89a3      	ldrh	r3, [r4, #12]
 80090c0:	0759      	lsls	r1, r3, #29
 80090c2:	d505      	bpl.n	80090d0 <__sflush_r+0x44>
 80090c4:	6863      	ldr	r3, [r4, #4]
 80090c6:	1ad2      	subs	r2, r2, r3
 80090c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090ca:	b10b      	cbz	r3, 80090d0 <__sflush_r+0x44>
 80090cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090ce:	1ad2      	subs	r2, r2, r3
 80090d0:	2300      	movs	r3, #0
 80090d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090d4:	6a21      	ldr	r1, [r4, #32]
 80090d6:	4628      	mov	r0, r5
 80090d8:	47b0      	blx	r6
 80090da:	1c43      	adds	r3, r0, #1
 80090dc:	89a3      	ldrh	r3, [r4, #12]
 80090de:	d106      	bne.n	80090ee <__sflush_r+0x62>
 80090e0:	6829      	ldr	r1, [r5, #0]
 80090e2:	291d      	cmp	r1, #29
 80090e4:	d82b      	bhi.n	800913e <__sflush_r+0xb2>
 80090e6:	4a2a      	ldr	r2, [pc, #168]	@ (8009190 <__sflush_r+0x104>)
 80090e8:	40ca      	lsrs	r2, r1
 80090ea:	07d6      	lsls	r6, r2, #31
 80090ec:	d527      	bpl.n	800913e <__sflush_r+0xb2>
 80090ee:	2200      	movs	r2, #0
 80090f0:	6062      	str	r2, [r4, #4]
 80090f2:	04d9      	lsls	r1, r3, #19
 80090f4:	6922      	ldr	r2, [r4, #16]
 80090f6:	6022      	str	r2, [r4, #0]
 80090f8:	d504      	bpl.n	8009104 <__sflush_r+0x78>
 80090fa:	1c42      	adds	r2, r0, #1
 80090fc:	d101      	bne.n	8009102 <__sflush_r+0x76>
 80090fe:	682b      	ldr	r3, [r5, #0]
 8009100:	b903      	cbnz	r3, 8009104 <__sflush_r+0x78>
 8009102:	6560      	str	r0, [r4, #84]	@ 0x54
 8009104:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009106:	602f      	str	r7, [r5, #0]
 8009108:	b1b9      	cbz	r1, 800913a <__sflush_r+0xae>
 800910a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800910e:	4299      	cmp	r1, r3
 8009110:	d002      	beq.n	8009118 <__sflush_r+0x8c>
 8009112:	4628      	mov	r0, r5
 8009114:	f7fe fce4 	bl	8007ae0 <_free_r>
 8009118:	2300      	movs	r3, #0
 800911a:	6363      	str	r3, [r4, #52]	@ 0x34
 800911c:	e00d      	b.n	800913a <__sflush_r+0xae>
 800911e:	2301      	movs	r3, #1
 8009120:	4628      	mov	r0, r5
 8009122:	47b0      	blx	r6
 8009124:	4602      	mov	r2, r0
 8009126:	1c50      	adds	r0, r2, #1
 8009128:	d1c9      	bne.n	80090be <__sflush_r+0x32>
 800912a:	682b      	ldr	r3, [r5, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d0c6      	beq.n	80090be <__sflush_r+0x32>
 8009130:	2b1d      	cmp	r3, #29
 8009132:	d001      	beq.n	8009138 <__sflush_r+0xac>
 8009134:	2b16      	cmp	r3, #22
 8009136:	d11e      	bne.n	8009176 <__sflush_r+0xea>
 8009138:	602f      	str	r7, [r5, #0]
 800913a:	2000      	movs	r0, #0
 800913c:	e022      	b.n	8009184 <__sflush_r+0xf8>
 800913e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009142:	b21b      	sxth	r3, r3
 8009144:	e01b      	b.n	800917e <__sflush_r+0xf2>
 8009146:	690f      	ldr	r7, [r1, #16]
 8009148:	2f00      	cmp	r7, #0
 800914a:	d0f6      	beq.n	800913a <__sflush_r+0xae>
 800914c:	0793      	lsls	r3, r2, #30
 800914e:	680e      	ldr	r6, [r1, #0]
 8009150:	bf08      	it	eq
 8009152:	694b      	ldreq	r3, [r1, #20]
 8009154:	600f      	str	r7, [r1, #0]
 8009156:	bf18      	it	ne
 8009158:	2300      	movne	r3, #0
 800915a:	eba6 0807 	sub.w	r8, r6, r7
 800915e:	608b      	str	r3, [r1, #8]
 8009160:	f1b8 0f00 	cmp.w	r8, #0
 8009164:	dde9      	ble.n	800913a <__sflush_r+0xae>
 8009166:	6a21      	ldr	r1, [r4, #32]
 8009168:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800916a:	4643      	mov	r3, r8
 800916c:	463a      	mov	r2, r7
 800916e:	4628      	mov	r0, r5
 8009170:	47b0      	blx	r6
 8009172:	2800      	cmp	r0, #0
 8009174:	dc08      	bgt.n	8009188 <__sflush_r+0xfc>
 8009176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800917a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800917e:	81a3      	strh	r3, [r4, #12]
 8009180:	f04f 30ff 	mov.w	r0, #4294967295
 8009184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009188:	4407      	add	r7, r0
 800918a:	eba8 0800 	sub.w	r8, r8, r0
 800918e:	e7e7      	b.n	8009160 <__sflush_r+0xd4>
 8009190:	20400001 	.word	0x20400001

08009194 <_fflush_r>:
 8009194:	b538      	push	{r3, r4, r5, lr}
 8009196:	690b      	ldr	r3, [r1, #16]
 8009198:	4605      	mov	r5, r0
 800919a:	460c      	mov	r4, r1
 800919c:	b913      	cbnz	r3, 80091a4 <_fflush_r+0x10>
 800919e:	2500      	movs	r5, #0
 80091a0:	4628      	mov	r0, r5
 80091a2:	bd38      	pop	{r3, r4, r5, pc}
 80091a4:	b118      	cbz	r0, 80091ae <_fflush_r+0x1a>
 80091a6:	6a03      	ldr	r3, [r0, #32]
 80091a8:	b90b      	cbnz	r3, 80091ae <_fflush_r+0x1a>
 80091aa:	f7fd fccb 	bl	8006b44 <__sinit>
 80091ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d0f3      	beq.n	800919e <_fflush_r+0xa>
 80091b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091b8:	07d0      	lsls	r0, r2, #31
 80091ba:	d404      	bmi.n	80091c6 <_fflush_r+0x32>
 80091bc:	0599      	lsls	r1, r3, #22
 80091be:	d402      	bmi.n	80091c6 <_fflush_r+0x32>
 80091c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091c2:	f7fd fe14 	bl	8006dee <__retarget_lock_acquire_recursive>
 80091c6:	4628      	mov	r0, r5
 80091c8:	4621      	mov	r1, r4
 80091ca:	f7ff ff5f 	bl	800908c <__sflush_r>
 80091ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091d0:	07da      	lsls	r2, r3, #31
 80091d2:	4605      	mov	r5, r0
 80091d4:	d4e4      	bmi.n	80091a0 <_fflush_r+0xc>
 80091d6:	89a3      	ldrh	r3, [r4, #12]
 80091d8:	059b      	lsls	r3, r3, #22
 80091da:	d4e1      	bmi.n	80091a0 <_fflush_r+0xc>
 80091dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091de:	f7fd fe07 	bl	8006df0 <__retarget_lock_release_recursive>
 80091e2:	e7dd      	b.n	80091a0 <_fflush_r+0xc>

080091e4 <memmove>:
 80091e4:	4288      	cmp	r0, r1
 80091e6:	b510      	push	{r4, lr}
 80091e8:	eb01 0402 	add.w	r4, r1, r2
 80091ec:	d902      	bls.n	80091f4 <memmove+0x10>
 80091ee:	4284      	cmp	r4, r0
 80091f0:	4623      	mov	r3, r4
 80091f2:	d807      	bhi.n	8009204 <memmove+0x20>
 80091f4:	1e43      	subs	r3, r0, #1
 80091f6:	42a1      	cmp	r1, r4
 80091f8:	d008      	beq.n	800920c <memmove+0x28>
 80091fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009202:	e7f8      	b.n	80091f6 <memmove+0x12>
 8009204:	4402      	add	r2, r0
 8009206:	4601      	mov	r1, r0
 8009208:	428a      	cmp	r2, r1
 800920a:	d100      	bne.n	800920e <memmove+0x2a>
 800920c:	bd10      	pop	{r4, pc}
 800920e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009212:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009216:	e7f7      	b.n	8009208 <memmove+0x24>

08009218 <_sbrk_r>:
 8009218:	b538      	push	{r3, r4, r5, lr}
 800921a:	4d06      	ldr	r5, [pc, #24]	@ (8009234 <_sbrk_r+0x1c>)
 800921c:	2300      	movs	r3, #0
 800921e:	4604      	mov	r4, r0
 8009220:	4608      	mov	r0, r1
 8009222:	602b      	str	r3, [r5, #0]
 8009224:	f7f8 fe30 	bl	8001e88 <_sbrk>
 8009228:	1c43      	adds	r3, r0, #1
 800922a:	d102      	bne.n	8009232 <_sbrk_r+0x1a>
 800922c:	682b      	ldr	r3, [r5, #0]
 800922e:	b103      	cbz	r3, 8009232 <_sbrk_r+0x1a>
 8009230:	6023      	str	r3, [r4, #0]
 8009232:	bd38      	pop	{r3, r4, r5, pc}
 8009234:	20000d58 	.word	0x20000d58

08009238 <__assert_func>:
 8009238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800923a:	4614      	mov	r4, r2
 800923c:	461a      	mov	r2, r3
 800923e:	4b09      	ldr	r3, [pc, #36]	@ (8009264 <__assert_func+0x2c>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4605      	mov	r5, r0
 8009244:	68d8      	ldr	r0, [r3, #12]
 8009246:	b14c      	cbz	r4, 800925c <__assert_func+0x24>
 8009248:	4b07      	ldr	r3, [pc, #28]	@ (8009268 <__assert_func+0x30>)
 800924a:	9100      	str	r1, [sp, #0]
 800924c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009250:	4906      	ldr	r1, [pc, #24]	@ (800926c <__assert_func+0x34>)
 8009252:	462b      	mov	r3, r5
 8009254:	f000 f850 	bl	80092f8 <fiprintf>
 8009258:	f000 f860 	bl	800931c <abort>
 800925c:	4b04      	ldr	r3, [pc, #16]	@ (8009270 <__assert_func+0x38>)
 800925e:	461c      	mov	r4, r3
 8009260:	e7f3      	b.n	800924a <__assert_func+0x12>
 8009262:	bf00      	nop
 8009264:	20000184 	.word	0x20000184
 8009268:	0800e966 	.word	0x0800e966
 800926c:	0800e973 	.word	0x0800e973
 8009270:	0800e9a1 	.word	0x0800e9a1

08009274 <_calloc_r>:
 8009274:	b570      	push	{r4, r5, r6, lr}
 8009276:	fba1 5402 	umull	r5, r4, r1, r2
 800927a:	b934      	cbnz	r4, 800928a <_calloc_r+0x16>
 800927c:	4629      	mov	r1, r5
 800927e:	f7fe ffdd 	bl	800823c <_malloc_r>
 8009282:	4606      	mov	r6, r0
 8009284:	b928      	cbnz	r0, 8009292 <_calloc_r+0x1e>
 8009286:	4630      	mov	r0, r6
 8009288:	bd70      	pop	{r4, r5, r6, pc}
 800928a:	220c      	movs	r2, #12
 800928c:	6002      	str	r2, [r0, #0]
 800928e:	2600      	movs	r6, #0
 8009290:	e7f9      	b.n	8009286 <_calloc_r+0x12>
 8009292:	462a      	mov	r2, r5
 8009294:	4621      	mov	r1, r4
 8009296:	f7fd fcf0 	bl	8006c7a <memset>
 800929a:	e7f4      	b.n	8009286 <_calloc_r+0x12>

0800929c <_realloc_r>:
 800929c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092a0:	4607      	mov	r7, r0
 80092a2:	4614      	mov	r4, r2
 80092a4:	460d      	mov	r5, r1
 80092a6:	b921      	cbnz	r1, 80092b2 <_realloc_r+0x16>
 80092a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092ac:	4611      	mov	r1, r2
 80092ae:	f7fe bfc5 	b.w	800823c <_malloc_r>
 80092b2:	b92a      	cbnz	r2, 80092c0 <_realloc_r+0x24>
 80092b4:	f7fe fc14 	bl	8007ae0 <_free_r>
 80092b8:	4625      	mov	r5, r4
 80092ba:	4628      	mov	r0, r5
 80092bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092c0:	f000 f833 	bl	800932a <_malloc_usable_size_r>
 80092c4:	4284      	cmp	r4, r0
 80092c6:	4606      	mov	r6, r0
 80092c8:	d802      	bhi.n	80092d0 <_realloc_r+0x34>
 80092ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80092ce:	d8f4      	bhi.n	80092ba <_realloc_r+0x1e>
 80092d0:	4621      	mov	r1, r4
 80092d2:	4638      	mov	r0, r7
 80092d4:	f7fe ffb2 	bl	800823c <_malloc_r>
 80092d8:	4680      	mov	r8, r0
 80092da:	b908      	cbnz	r0, 80092e0 <_realloc_r+0x44>
 80092dc:	4645      	mov	r5, r8
 80092de:	e7ec      	b.n	80092ba <_realloc_r+0x1e>
 80092e0:	42b4      	cmp	r4, r6
 80092e2:	4622      	mov	r2, r4
 80092e4:	4629      	mov	r1, r5
 80092e6:	bf28      	it	cs
 80092e8:	4632      	movcs	r2, r6
 80092ea:	f7fd fd82 	bl	8006df2 <memcpy>
 80092ee:	4629      	mov	r1, r5
 80092f0:	4638      	mov	r0, r7
 80092f2:	f7fe fbf5 	bl	8007ae0 <_free_r>
 80092f6:	e7f1      	b.n	80092dc <_realloc_r+0x40>

080092f8 <fiprintf>:
 80092f8:	b40e      	push	{r1, r2, r3}
 80092fa:	b503      	push	{r0, r1, lr}
 80092fc:	4601      	mov	r1, r0
 80092fe:	ab03      	add	r3, sp, #12
 8009300:	4805      	ldr	r0, [pc, #20]	@ (8009318 <fiprintf+0x20>)
 8009302:	f853 2b04 	ldr.w	r2, [r3], #4
 8009306:	6800      	ldr	r0, [r0, #0]
 8009308:	9301      	str	r3, [sp, #4]
 800930a:	f000 f83f 	bl	800938c <_vfiprintf_r>
 800930e:	b002      	add	sp, #8
 8009310:	f85d eb04 	ldr.w	lr, [sp], #4
 8009314:	b003      	add	sp, #12
 8009316:	4770      	bx	lr
 8009318:	20000184 	.word	0x20000184

0800931c <abort>:
 800931c:	b508      	push	{r3, lr}
 800931e:	2006      	movs	r0, #6
 8009320:	f000 fa08 	bl	8009734 <raise>
 8009324:	2001      	movs	r0, #1
 8009326:	f7f8 fd7f 	bl	8001e28 <_exit>

0800932a <_malloc_usable_size_r>:
 800932a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800932e:	1f18      	subs	r0, r3, #4
 8009330:	2b00      	cmp	r3, #0
 8009332:	bfbc      	itt	lt
 8009334:	580b      	ldrlt	r3, [r1, r0]
 8009336:	18c0      	addlt	r0, r0, r3
 8009338:	4770      	bx	lr

0800933a <__sfputc_r>:
 800933a:	6893      	ldr	r3, [r2, #8]
 800933c:	3b01      	subs	r3, #1
 800933e:	2b00      	cmp	r3, #0
 8009340:	b410      	push	{r4}
 8009342:	6093      	str	r3, [r2, #8]
 8009344:	da08      	bge.n	8009358 <__sfputc_r+0x1e>
 8009346:	6994      	ldr	r4, [r2, #24]
 8009348:	42a3      	cmp	r3, r4
 800934a:	db01      	blt.n	8009350 <__sfputc_r+0x16>
 800934c:	290a      	cmp	r1, #10
 800934e:	d103      	bne.n	8009358 <__sfputc_r+0x1e>
 8009350:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009354:	f000 b932 	b.w	80095bc <__swbuf_r>
 8009358:	6813      	ldr	r3, [r2, #0]
 800935a:	1c58      	adds	r0, r3, #1
 800935c:	6010      	str	r0, [r2, #0]
 800935e:	7019      	strb	r1, [r3, #0]
 8009360:	4608      	mov	r0, r1
 8009362:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009366:	4770      	bx	lr

08009368 <__sfputs_r>:
 8009368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936a:	4606      	mov	r6, r0
 800936c:	460f      	mov	r7, r1
 800936e:	4614      	mov	r4, r2
 8009370:	18d5      	adds	r5, r2, r3
 8009372:	42ac      	cmp	r4, r5
 8009374:	d101      	bne.n	800937a <__sfputs_r+0x12>
 8009376:	2000      	movs	r0, #0
 8009378:	e007      	b.n	800938a <__sfputs_r+0x22>
 800937a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800937e:	463a      	mov	r2, r7
 8009380:	4630      	mov	r0, r6
 8009382:	f7ff ffda 	bl	800933a <__sfputc_r>
 8009386:	1c43      	adds	r3, r0, #1
 8009388:	d1f3      	bne.n	8009372 <__sfputs_r+0xa>
 800938a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800938c <_vfiprintf_r>:
 800938c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009390:	460d      	mov	r5, r1
 8009392:	b09d      	sub	sp, #116	@ 0x74
 8009394:	4614      	mov	r4, r2
 8009396:	4698      	mov	r8, r3
 8009398:	4606      	mov	r6, r0
 800939a:	b118      	cbz	r0, 80093a4 <_vfiprintf_r+0x18>
 800939c:	6a03      	ldr	r3, [r0, #32]
 800939e:	b90b      	cbnz	r3, 80093a4 <_vfiprintf_r+0x18>
 80093a0:	f7fd fbd0 	bl	8006b44 <__sinit>
 80093a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093a6:	07d9      	lsls	r1, r3, #31
 80093a8:	d405      	bmi.n	80093b6 <_vfiprintf_r+0x2a>
 80093aa:	89ab      	ldrh	r3, [r5, #12]
 80093ac:	059a      	lsls	r2, r3, #22
 80093ae:	d402      	bmi.n	80093b6 <_vfiprintf_r+0x2a>
 80093b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093b2:	f7fd fd1c 	bl	8006dee <__retarget_lock_acquire_recursive>
 80093b6:	89ab      	ldrh	r3, [r5, #12]
 80093b8:	071b      	lsls	r3, r3, #28
 80093ba:	d501      	bpl.n	80093c0 <_vfiprintf_r+0x34>
 80093bc:	692b      	ldr	r3, [r5, #16]
 80093be:	b99b      	cbnz	r3, 80093e8 <_vfiprintf_r+0x5c>
 80093c0:	4629      	mov	r1, r5
 80093c2:	4630      	mov	r0, r6
 80093c4:	f000 f938 	bl	8009638 <__swsetup_r>
 80093c8:	b170      	cbz	r0, 80093e8 <_vfiprintf_r+0x5c>
 80093ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093cc:	07dc      	lsls	r4, r3, #31
 80093ce:	d504      	bpl.n	80093da <_vfiprintf_r+0x4e>
 80093d0:	f04f 30ff 	mov.w	r0, #4294967295
 80093d4:	b01d      	add	sp, #116	@ 0x74
 80093d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093da:	89ab      	ldrh	r3, [r5, #12]
 80093dc:	0598      	lsls	r0, r3, #22
 80093de:	d4f7      	bmi.n	80093d0 <_vfiprintf_r+0x44>
 80093e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093e2:	f7fd fd05 	bl	8006df0 <__retarget_lock_release_recursive>
 80093e6:	e7f3      	b.n	80093d0 <_vfiprintf_r+0x44>
 80093e8:	2300      	movs	r3, #0
 80093ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80093ec:	2320      	movs	r3, #32
 80093ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80093f6:	2330      	movs	r3, #48	@ 0x30
 80093f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80095a8 <_vfiprintf_r+0x21c>
 80093fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009400:	f04f 0901 	mov.w	r9, #1
 8009404:	4623      	mov	r3, r4
 8009406:	469a      	mov	sl, r3
 8009408:	f813 2b01 	ldrb.w	r2, [r3], #1
 800940c:	b10a      	cbz	r2, 8009412 <_vfiprintf_r+0x86>
 800940e:	2a25      	cmp	r2, #37	@ 0x25
 8009410:	d1f9      	bne.n	8009406 <_vfiprintf_r+0x7a>
 8009412:	ebba 0b04 	subs.w	fp, sl, r4
 8009416:	d00b      	beq.n	8009430 <_vfiprintf_r+0xa4>
 8009418:	465b      	mov	r3, fp
 800941a:	4622      	mov	r2, r4
 800941c:	4629      	mov	r1, r5
 800941e:	4630      	mov	r0, r6
 8009420:	f7ff ffa2 	bl	8009368 <__sfputs_r>
 8009424:	3001      	adds	r0, #1
 8009426:	f000 80a7 	beq.w	8009578 <_vfiprintf_r+0x1ec>
 800942a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800942c:	445a      	add	r2, fp
 800942e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009430:	f89a 3000 	ldrb.w	r3, [sl]
 8009434:	2b00      	cmp	r3, #0
 8009436:	f000 809f 	beq.w	8009578 <_vfiprintf_r+0x1ec>
 800943a:	2300      	movs	r3, #0
 800943c:	f04f 32ff 	mov.w	r2, #4294967295
 8009440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009444:	f10a 0a01 	add.w	sl, sl, #1
 8009448:	9304      	str	r3, [sp, #16]
 800944a:	9307      	str	r3, [sp, #28]
 800944c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009450:	931a      	str	r3, [sp, #104]	@ 0x68
 8009452:	4654      	mov	r4, sl
 8009454:	2205      	movs	r2, #5
 8009456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800945a:	4853      	ldr	r0, [pc, #332]	@ (80095a8 <_vfiprintf_r+0x21c>)
 800945c:	f7f6 fec0 	bl	80001e0 <memchr>
 8009460:	9a04      	ldr	r2, [sp, #16]
 8009462:	b9d8      	cbnz	r0, 800949c <_vfiprintf_r+0x110>
 8009464:	06d1      	lsls	r1, r2, #27
 8009466:	bf44      	itt	mi
 8009468:	2320      	movmi	r3, #32
 800946a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800946e:	0713      	lsls	r3, r2, #28
 8009470:	bf44      	itt	mi
 8009472:	232b      	movmi	r3, #43	@ 0x2b
 8009474:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009478:	f89a 3000 	ldrb.w	r3, [sl]
 800947c:	2b2a      	cmp	r3, #42	@ 0x2a
 800947e:	d015      	beq.n	80094ac <_vfiprintf_r+0x120>
 8009480:	9a07      	ldr	r2, [sp, #28]
 8009482:	4654      	mov	r4, sl
 8009484:	2000      	movs	r0, #0
 8009486:	f04f 0c0a 	mov.w	ip, #10
 800948a:	4621      	mov	r1, r4
 800948c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009490:	3b30      	subs	r3, #48	@ 0x30
 8009492:	2b09      	cmp	r3, #9
 8009494:	d94b      	bls.n	800952e <_vfiprintf_r+0x1a2>
 8009496:	b1b0      	cbz	r0, 80094c6 <_vfiprintf_r+0x13a>
 8009498:	9207      	str	r2, [sp, #28]
 800949a:	e014      	b.n	80094c6 <_vfiprintf_r+0x13a>
 800949c:	eba0 0308 	sub.w	r3, r0, r8
 80094a0:	fa09 f303 	lsl.w	r3, r9, r3
 80094a4:	4313      	orrs	r3, r2
 80094a6:	9304      	str	r3, [sp, #16]
 80094a8:	46a2      	mov	sl, r4
 80094aa:	e7d2      	b.n	8009452 <_vfiprintf_r+0xc6>
 80094ac:	9b03      	ldr	r3, [sp, #12]
 80094ae:	1d19      	adds	r1, r3, #4
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	9103      	str	r1, [sp, #12]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	bfbb      	ittet	lt
 80094b8:	425b      	neglt	r3, r3
 80094ba:	f042 0202 	orrlt.w	r2, r2, #2
 80094be:	9307      	strge	r3, [sp, #28]
 80094c0:	9307      	strlt	r3, [sp, #28]
 80094c2:	bfb8      	it	lt
 80094c4:	9204      	strlt	r2, [sp, #16]
 80094c6:	7823      	ldrb	r3, [r4, #0]
 80094c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80094ca:	d10a      	bne.n	80094e2 <_vfiprintf_r+0x156>
 80094cc:	7863      	ldrb	r3, [r4, #1]
 80094ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80094d0:	d132      	bne.n	8009538 <_vfiprintf_r+0x1ac>
 80094d2:	9b03      	ldr	r3, [sp, #12]
 80094d4:	1d1a      	adds	r2, r3, #4
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	9203      	str	r2, [sp, #12]
 80094da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094de:	3402      	adds	r4, #2
 80094e0:	9305      	str	r3, [sp, #20]
 80094e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80095b8 <_vfiprintf_r+0x22c>
 80094e6:	7821      	ldrb	r1, [r4, #0]
 80094e8:	2203      	movs	r2, #3
 80094ea:	4650      	mov	r0, sl
 80094ec:	f7f6 fe78 	bl	80001e0 <memchr>
 80094f0:	b138      	cbz	r0, 8009502 <_vfiprintf_r+0x176>
 80094f2:	9b04      	ldr	r3, [sp, #16]
 80094f4:	eba0 000a 	sub.w	r0, r0, sl
 80094f8:	2240      	movs	r2, #64	@ 0x40
 80094fa:	4082      	lsls	r2, r0
 80094fc:	4313      	orrs	r3, r2
 80094fe:	3401      	adds	r4, #1
 8009500:	9304      	str	r3, [sp, #16]
 8009502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009506:	4829      	ldr	r0, [pc, #164]	@ (80095ac <_vfiprintf_r+0x220>)
 8009508:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800950c:	2206      	movs	r2, #6
 800950e:	f7f6 fe67 	bl	80001e0 <memchr>
 8009512:	2800      	cmp	r0, #0
 8009514:	d03f      	beq.n	8009596 <_vfiprintf_r+0x20a>
 8009516:	4b26      	ldr	r3, [pc, #152]	@ (80095b0 <_vfiprintf_r+0x224>)
 8009518:	bb1b      	cbnz	r3, 8009562 <_vfiprintf_r+0x1d6>
 800951a:	9b03      	ldr	r3, [sp, #12]
 800951c:	3307      	adds	r3, #7
 800951e:	f023 0307 	bic.w	r3, r3, #7
 8009522:	3308      	adds	r3, #8
 8009524:	9303      	str	r3, [sp, #12]
 8009526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009528:	443b      	add	r3, r7
 800952a:	9309      	str	r3, [sp, #36]	@ 0x24
 800952c:	e76a      	b.n	8009404 <_vfiprintf_r+0x78>
 800952e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009532:	460c      	mov	r4, r1
 8009534:	2001      	movs	r0, #1
 8009536:	e7a8      	b.n	800948a <_vfiprintf_r+0xfe>
 8009538:	2300      	movs	r3, #0
 800953a:	3401      	adds	r4, #1
 800953c:	9305      	str	r3, [sp, #20]
 800953e:	4619      	mov	r1, r3
 8009540:	f04f 0c0a 	mov.w	ip, #10
 8009544:	4620      	mov	r0, r4
 8009546:	f810 2b01 	ldrb.w	r2, [r0], #1
 800954a:	3a30      	subs	r2, #48	@ 0x30
 800954c:	2a09      	cmp	r2, #9
 800954e:	d903      	bls.n	8009558 <_vfiprintf_r+0x1cc>
 8009550:	2b00      	cmp	r3, #0
 8009552:	d0c6      	beq.n	80094e2 <_vfiprintf_r+0x156>
 8009554:	9105      	str	r1, [sp, #20]
 8009556:	e7c4      	b.n	80094e2 <_vfiprintf_r+0x156>
 8009558:	fb0c 2101 	mla	r1, ip, r1, r2
 800955c:	4604      	mov	r4, r0
 800955e:	2301      	movs	r3, #1
 8009560:	e7f0      	b.n	8009544 <_vfiprintf_r+0x1b8>
 8009562:	ab03      	add	r3, sp, #12
 8009564:	9300      	str	r3, [sp, #0]
 8009566:	462a      	mov	r2, r5
 8009568:	4b12      	ldr	r3, [pc, #72]	@ (80095b4 <_vfiprintf_r+0x228>)
 800956a:	a904      	add	r1, sp, #16
 800956c:	4630      	mov	r0, r6
 800956e:	f7fc fc99 	bl	8005ea4 <_printf_float>
 8009572:	4607      	mov	r7, r0
 8009574:	1c78      	adds	r0, r7, #1
 8009576:	d1d6      	bne.n	8009526 <_vfiprintf_r+0x19a>
 8009578:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800957a:	07d9      	lsls	r1, r3, #31
 800957c:	d405      	bmi.n	800958a <_vfiprintf_r+0x1fe>
 800957e:	89ab      	ldrh	r3, [r5, #12]
 8009580:	059a      	lsls	r2, r3, #22
 8009582:	d402      	bmi.n	800958a <_vfiprintf_r+0x1fe>
 8009584:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009586:	f7fd fc33 	bl	8006df0 <__retarget_lock_release_recursive>
 800958a:	89ab      	ldrh	r3, [r5, #12]
 800958c:	065b      	lsls	r3, r3, #25
 800958e:	f53f af1f 	bmi.w	80093d0 <_vfiprintf_r+0x44>
 8009592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009594:	e71e      	b.n	80093d4 <_vfiprintf_r+0x48>
 8009596:	ab03      	add	r3, sp, #12
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	462a      	mov	r2, r5
 800959c:	4b05      	ldr	r3, [pc, #20]	@ (80095b4 <_vfiprintf_r+0x228>)
 800959e:	a904      	add	r1, sp, #16
 80095a0:	4630      	mov	r0, r6
 80095a2:	f7fc ff17 	bl	80063d4 <_printf_i>
 80095a6:	e7e4      	b.n	8009572 <_vfiprintf_r+0x1e6>
 80095a8:	0800e955 	.word	0x0800e955
 80095ac:	0800e95f 	.word	0x0800e95f
 80095b0:	08005ea5 	.word	0x08005ea5
 80095b4:	08009369 	.word	0x08009369
 80095b8:	0800e95b 	.word	0x0800e95b

080095bc <__swbuf_r>:
 80095bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095be:	460e      	mov	r6, r1
 80095c0:	4614      	mov	r4, r2
 80095c2:	4605      	mov	r5, r0
 80095c4:	b118      	cbz	r0, 80095ce <__swbuf_r+0x12>
 80095c6:	6a03      	ldr	r3, [r0, #32]
 80095c8:	b90b      	cbnz	r3, 80095ce <__swbuf_r+0x12>
 80095ca:	f7fd fabb 	bl	8006b44 <__sinit>
 80095ce:	69a3      	ldr	r3, [r4, #24]
 80095d0:	60a3      	str	r3, [r4, #8]
 80095d2:	89a3      	ldrh	r3, [r4, #12]
 80095d4:	071a      	lsls	r2, r3, #28
 80095d6:	d501      	bpl.n	80095dc <__swbuf_r+0x20>
 80095d8:	6923      	ldr	r3, [r4, #16]
 80095da:	b943      	cbnz	r3, 80095ee <__swbuf_r+0x32>
 80095dc:	4621      	mov	r1, r4
 80095de:	4628      	mov	r0, r5
 80095e0:	f000 f82a 	bl	8009638 <__swsetup_r>
 80095e4:	b118      	cbz	r0, 80095ee <__swbuf_r+0x32>
 80095e6:	f04f 37ff 	mov.w	r7, #4294967295
 80095ea:	4638      	mov	r0, r7
 80095ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095ee:	6823      	ldr	r3, [r4, #0]
 80095f0:	6922      	ldr	r2, [r4, #16]
 80095f2:	1a98      	subs	r0, r3, r2
 80095f4:	6963      	ldr	r3, [r4, #20]
 80095f6:	b2f6      	uxtb	r6, r6
 80095f8:	4283      	cmp	r3, r0
 80095fa:	4637      	mov	r7, r6
 80095fc:	dc05      	bgt.n	800960a <__swbuf_r+0x4e>
 80095fe:	4621      	mov	r1, r4
 8009600:	4628      	mov	r0, r5
 8009602:	f7ff fdc7 	bl	8009194 <_fflush_r>
 8009606:	2800      	cmp	r0, #0
 8009608:	d1ed      	bne.n	80095e6 <__swbuf_r+0x2a>
 800960a:	68a3      	ldr	r3, [r4, #8]
 800960c:	3b01      	subs	r3, #1
 800960e:	60a3      	str	r3, [r4, #8]
 8009610:	6823      	ldr	r3, [r4, #0]
 8009612:	1c5a      	adds	r2, r3, #1
 8009614:	6022      	str	r2, [r4, #0]
 8009616:	701e      	strb	r6, [r3, #0]
 8009618:	6962      	ldr	r2, [r4, #20]
 800961a:	1c43      	adds	r3, r0, #1
 800961c:	429a      	cmp	r2, r3
 800961e:	d004      	beq.n	800962a <__swbuf_r+0x6e>
 8009620:	89a3      	ldrh	r3, [r4, #12]
 8009622:	07db      	lsls	r3, r3, #31
 8009624:	d5e1      	bpl.n	80095ea <__swbuf_r+0x2e>
 8009626:	2e0a      	cmp	r6, #10
 8009628:	d1df      	bne.n	80095ea <__swbuf_r+0x2e>
 800962a:	4621      	mov	r1, r4
 800962c:	4628      	mov	r0, r5
 800962e:	f7ff fdb1 	bl	8009194 <_fflush_r>
 8009632:	2800      	cmp	r0, #0
 8009634:	d0d9      	beq.n	80095ea <__swbuf_r+0x2e>
 8009636:	e7d6      	b.n	80095e6 <__swbuf_r+0x2a>

08009638 <__swsetup_r>:
 8009638:	b538      	push	{r3, r4, r5, lr}
 800963a:	4b29      	ldr	r3, [pc, #164]	@ (80096e0 <__swsetup_r+0xa8>)
 800963c:	4605      	mov	r5, r0
 800963e:	6818      	ldr	r0, [r3, #0]
 8009640:	460c      	mov	r4, r1
 8009642:	b118      	cbz	r0, 800964c <__swsetup_r+0x14>
 8009644:	6a03      	ldr	r3, [r0, #32]
 8009646:	b90b      	cbnz	r3, 800964c <__swsetup_r+0x14>
 8009648:	f7fd fa7c 	bl	8006b44 <__sinit>
 800964c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009650:	0719      	lsls	r1, r3, #28
 8009652:	d422      	bmi.n	800969a <__swsetup_r+0x62>
 8009654:	06da      	lsls	r2, r3, #27
 8009656:	d407      	bmi.n	8009668 <__swsetup_r+0x30>
 8009658:	2209      	movs	r2, #9
 800965a:	602a      	str	r2, [r5, #0]
 800965c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009660:	81a3      	strh	r3, [r4, #12]
 8009662:	f04f 30ff 	mov.w	r0, #4294967295
 8009666:	e033      	b.n	80096d0 <__swsetup_r+0x98>
 8009668:	0758      	lsls	r0, r3, #29
 800966a:	d512      	bpl.n	8009692 <__swsetup_r+0x5a>
 800966c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800966e:	b141      	cbz	r1, 8009682 <__swsetup_r+0x4a>
 8009670:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009674:	4299      	cmp	r1, r3
 8009676:	d002      	beq.n	800967e <__swsetup_r+0x46>
 8009678:	4628      	mov	r0, r5
 800967a:	f7fe fa31 	bl	8007ae0 <_free_r>
 800967e:	2300      	movs	r3, #0
 8009680:	6363      	str	r3, [r4, #52]	@ 0x34
 8009682:	89a3      	ldrh	r3, [r4, #12]
 8009684:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009688:	81a3      	strh	r3, [r4, #12]
 800968a:	2300      	movs	r3, #0
 800968c:	6063      	str	r3, [r4, #4]
 800968e:	6923      	ldr	r3, [r4, #16]
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	89a3      	ldrh	r3, [r4, #12]
 8009694:	f043 0308 	orr.w	r3, r3, #8
 8009698:	81a3      	strh	r3, [r4, #12]
 800969a:	6923      	ldr	r3, [r4, #16]
 800969c:	b94b      	cbnz	r3, 80096b2 <__swsetup_r+0x7a>
 800969e:	89a3      	ldrh	r3, [r4, #12]
 80096a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80096a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096a8:	d003      	beq.n	80096b2 <__swsetup_r+0x7a>
 80096aa:	4621      	mov	r1, r4
 80096ac:	4628      	mov	r0, r5
 80096ae:	f000 f883 	bl	80097b8 <__smakebuf_r>
 80096b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096b6:	f013 0201 	ands.w	r2, r3, #1
 80096ba:	d00a      	beq.n	80096d2 <__swsetup_r+0x9a>
 80096bc:	2200      	movs	r2, #0
 80096be:	60a2      	str	r2, [r4, #8]
 80096c0:	6962      	ldr	r2, [r4, #20]
 80096c2:	4252      	negs	r2, r2
 80096c4:	61a2      	str	r2, [r4, #24]
 80096c6:	6922      	ldr	r2, [r4, #16]
 80096c8:	b942      	cbnz	r2, 80096dc <__swsetup_r+0xa4>
 80096ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80096ce:	d1c5      	bne.n	800965c <__swsetup_r+0x24>
 80096d0:	bd38      	pop	{r3, r4, r5, pc}
 80096d2:	0799      	lsls	r1, r3, #30
 80096d4:	bf58      	it	pl
 80096d6:	6962      	ldrpl	r2, [r4, #20]
 80096d8:	60a2      	str	r2, [r4, #8]
 80096da:	e7f4      	b.n	80096c6 <__swsetup_r+0x8e>
 80096dc:	2000      	movs	r0, #0
 80096de:	e7f7      	b.n	80096d0 <__swsetup_r+0x98>
 80096e0:	20000184 	.word	0x20000184

080096e4 <_raise_r>:
 80096e4:	291f      	cmp	r1, #31
 80096e6:	b538      	push	{r3, r4, r5, lr}
 80096e8:	4605      	mov	r5, r0
 80096ea:	460c      	mov	r4, r1
 80096ec:	d904      	bls.n	80096f8 <_raise_r+0x14>
 80096ee:	2316      	movs	r3, #22
 80096f0:	6003      	str	r3, [r0, #0]
 80096f2:	f04f 30ff 	mov.w	r0, #4294967295
 80096f6:	bd38      	pop	{r3, r4, r5, pc}
 80096f8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80096fa:	b112      	cbz	r2, 8009702 <_raise_r+0x1e>
 80096fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009700:	b94b      	cbnz	r3, 8009716 <_raise_r+0x32>
 8009702:	4628      	mov	r0, r5
 8009704:	f000 f830 	bl	8009768 <_getpid_r>
 8009708:	4622      	mov	r2, r4
 800970a:	4601      	mov	r1, r0
 800970c:	4628      	mov	r0, r5
 800970e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009712:	f000 b817 	b.w	8009744 <_kill_r>
 8009716:	2b01      	cmp	r3, #1
 8009718:	d00a      	beq.n	8009730 <_raise_r+0x4c>
 800971a:	1c59      	adds	r1, r3, #1
 800971c:	d103      	bne.n	8009726 <_raise_r+0x42>
 800971e:	2316      	movs	r3, #22
 8009720:	6003      	str	r3, [r0, #0]
 8009722:	2001      	movs	r0, #1
 8009724:	e7e7      	b.n	80096f6 <_raise_r+0x12>
 8009726:	2100      	movs	r1, #0
 8009728:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800972c:	4620      	mov	r0, r4
 800972e:	4798      	blx	r3
 8009730:	2000      	movs	r0, #0
 8009732:	e7e0      	b.n	80096f6 <_raise_r+0x12>

08009734 <raise>:
 8009734:	4b02      	ldr	r3, [pc, #8]	@ (8009740 <raise+0xc>)
 8009736:	4601      	mov	r1, r0
 8009738:	6818      	ldr	r0, [r3, #0]
 800973a:	f7ff bfd3 	b.w	80096e4 <_raise_r>
 800973e:	bf00      	nop
 8009740:	20000184 	.word	0x20000184

08009744 <_kill_r>:
 8009744:	b538      	push	{r3, r4, r5, lr}
 8009746:	4d07      	ldr	r5, [pc, #28]	@ (8009764 <_kill_r+0x20>)
 8009748:	2300      	movs	r3, #0
 800974a:	4604      	mov	r4, r0
 800974c:	4608      	mov	r0, r1
 800974e:	4611      	mov	r1, r2
 8009750:	602b      	str	r3, [r5, #0]
 8009752:	f7f8 fb61 	bl	8001e18 <_kill>
 8009756:	1c43      	adds	r3, r0, #1
 8009758:	d102      	bne.n	8009760 <_kill_r+0x1c>
 800975a:	682b      	ldr	r3, [r5, #0]
 800975c:	b103      	cbz	r3, 8009760 <_kill_r+0x1c>
 800975e:	6023      	str	r3, [r4, #0]
 8009760:	bd38      	pop	{r3, r4, r5, pc}
 8009762:	bf00      	nop
 8009764:	20000d58 	.word	0x20000d58

08009768 <_getpid_r>:
 8009768:	f7f8 bb54 	b.w	8001e14 <_getpid>

0800976c <__swhatbuf_r>:
 800976c:	b570      	push	{r4, r5, r6, lr}
 800976e:	460c      	mov	r4, r1
 8009770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009774:	2900      	cmp	r1, #0
 8009776:	b096      	sub	sp, #88	@ 0x58
 8009778:	4615      	mov	r5, r2
 800977a:	461e      	mov	r6, r3
 800977c:	da0d      	bge.n	800979a <__swhatbuf_r+0x2e>
 800977e:	89a3      	ldrh	r3, [r4, #12]
 8009780:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009784:	f04f 0100 	mov.w	r1, #0
 8009788:	bf14      	ite	ne
 800978a:	2340      	movne	r3, #64	@ 0x40
 800978c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009790:	2000      	movs	r0, #0
 8009792:	6031      	str	r1, [r6, #0]
 8009794:	602b      	str	r3, [r5, #0]
 8009796:	b016      	add	sp, #88	@ 0x58
 8009798:	bd70      	pop	{r4, r5, r6, pc}
 800979a:	466a      	mov	r2, sp
 800979c:	f000 f848 	bl	8009830 <_fstat_r>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	dbec      	blt.n	800977e <__swhatbuf_r+0x12>
 80097a4:	9901      	ldr	r1, [sp, #4]
 80097a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80097aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80097ae:	4259      	negs	r1, r3
 80097b0:	4159      	adcs	r1, r3
 80097b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097b6:	e7eb      	b.n	8009790 <__swhatbuf_r+0x24>

080097b8 <__smakebuf_r>:
 80097b8:	898b      	ldrh	r3, [r1, #12]
 80097ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097bc:	079d      	lsls	r5, r3, #30
 80097be:	4606      	mov	r6, r0
 80097c0:	460c      	mov	r4, r1
 80097c2:	d507      	bpl.n	80097d4 <__smakebuf_r+0x1c>
 80097c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80097c8:	6023      	str	r3, [r4, #0]
 80097ca:	6123      	str	r3, [r4, #16]
 80097cc:	2301      	movs	r3, #1
 80097ce:	6163      	str	r3, [r4, #20]
 80097d0:	b003      	add	sp, #12
 80097d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097d4:	ab01      	add	r3, sp, #4
 80097d6:	466a      	mov	r2, sp
 80097d8:	f7ff ffc8 	bl	800976c <__swhatbuf_r>
 80097dc:	9f00      	ldr	r7, [sp, #0]
 80097de:	4605      	mov	r5, r0
 80097e0:	4639      	mov	r1, r7
 80097e2:	4630      	mov	r0, r6
 80097e4:	f7fe fd2a 	bl	800823c <_malloc_r>
 80097e8:	b948      	cbnz	r0, 80097fe <__smakebuf_r+0x46>
 80097ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097ee:	059a      	lsls	r2, r3, #22
 80097f0:	d4ee      	bmi.n	80097d0 <__smakebuf_r+0x18>
 80097f2:	f023 0303 	bic.w	r3, r3, #3
 80097f6:	f043 0302 	orr.w	r3, r3, #2
 80097fa:	81a3      	strh	r3, [r4, #12]
 80097fc:	e7e2      	b.n	80097c4 <__smakebuf_r+0xc>
 80097fe:	89a3      	ldrh	r3, [r4, #12]
 8009800:	6020      	str	r0, [r4, #0]
 8009802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009806:	81a3      	strh	r3, [r4, #12]
 8009808:	9b01      	ldr	r3, [sp, #4]
 800980a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800980e:	b15b      	cbz	r3, 8009828 <__smakebuf_r+0x70>
 8009810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009814:	4630      	mov	r0, r6
 8009816:	f000 f81d 	bl	8009854 <_isatty_r>
 800981a:	b128      	cbz	r0, 8009828 <__smakebuf_r+0x70>
 800981c:	89a3      	ldrh	r3, [r4, #12]
 800981e:	f023 0303 	bic.w	r3, r3, #3
 8009822:	f043 0301 	orr.w	r3, r3, #1
 8009826:	81a3      	strh	r3, [r4, #12]
 8009828:	89a3      	ldrh	r3, [r4, #12]
 800982a:	431d      	orrs	r5, r3
 800982c:	81a5      	strh	r5, [r4, #12]
 800982e:	e7cf      	b.n	80097d0 <__smakebuf_r+0x18>

08009830 <_fstat_r>:
 8009830:	b538      	push	{r3, r4, r5, lr}
 8009832:	4d07      	ldr	r5, [pc, #28]	@ (8009850 <_fstat_r+0x20>)
 8009834:	2300      	movs	r3, #0
 8009836:	4604      	mov	r4, r0
 8009838:	4608      	mov	r0, r1
 800983a:	4611      	mov	r1, r2
 800983c:	602b      	str	r3, [r5, #0]
 800983e:	f7f8 fb19 	bl	8001e74 <_fstat>
 8009842:	1c43      	adds	r3, r0, #1
 8009844:	d102      	bne.n	800984c <_fstat_r+0x1c>
 8009846:	682b      	ldr	r3, [r5, #0]
 8009848:	b103      	cbz	r3, 800984c <_fstat_r+0x1c>
 800984a:	6023      	str	r3, [r4, #0]
 800984c:	bd38      	pop	{r3, r4, r5, pc}
 800984e:	bf00      	nop
 8009850:	20000d58 	.word	0x20000d58

08009854 <_isatty_r>:
 8009854:	b538      	push	{r3, r4, r5, lr}
 8009856:	4d06      	ldr	r5, [pc, #24]	@ (8009870 <_isatty_r+0x1c>)
 8009858:	2300      	movs	r3, #0
 800985a:	4604      	mov	r4, r0
 800985c:	4608      	mov	r0, r1
 800985e:	602b      	str	r3, [r5, #0]
 8009860:	f7f8 fb0e 	bl	8001e80 <_isatty>
 8009864:	1c43      	adds	r3, r0, #1
 8009866:	d102      	bne.n	800986e <_isatty_r+0x1a>
 8009868:	682b      	ldr	r3, [r5, #0]
 800986a:	b103      	cbz	r3, 800986e <_isatty_r+0x1a>
 800986c:	6023      	str	r3, [r4, #0]
 800986e:	bd38      	pop	{r3, r4, r5, pc}
 8009870:	20000d58 	.word	0x20000d58

08009874 <_init>:
 8009874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009876:	bf00      	nop
 8009878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800987a:	bc08      	pop	{r3}
 800987c:	469e      	mov	lr, r3
 800987e:	4770      	bx	lr

08009880 <_fini>:
 8009880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009882:	bf00      	nop
 8009884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009886:	bc08      	pop	{r3}
 8009888:	469e      	mov	lr, r3
 800988a:	4770      	bx	lr
